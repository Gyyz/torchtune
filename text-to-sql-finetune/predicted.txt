SELECT COUNT(Singer_ID) FROM singer	concert_singer
SELECT COUNT(Singer_ID) FROM singer	concert_singer
SELECT T1.Name, T1.Country, T1.Age FROM singer AS T1 ORDER BY T1.Age DESC	concert_singer
SELECT T1.Name, T1.Country, T1.Age FROM singer AS T1 ORDER BY T1.Age DESC	concert_singer
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country = 'France'	concert_singer
SELECT AVG(Age), MIN(Age), MAX(Age) FROM singer WHERE Country  =  'France'	concert_singer
SELECT T2.Name, T2.`Song_release_year` FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T1.Age =  SELECT MIN(T1.Age) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3	concert_singer
SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T1.Age =  SELECT MIN(T1.Age) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T	concert_singer
SELECT DISTINCT T2.Country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T1.Age > 20	concert_singer
SELECT DISTINCT T2.Country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Age > 20	concert_singer
SELECT T2.Country, COUNT(T1.Singer_ID) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Country	concert_singer
SELECT T1.Country, COUNT(T1.Singer_ID) FROM singer AS T1 GROUP BY T1.Country	concert_singer
SELECT T2.Song_Name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T1.Age >  SELECT AVG(T1.Age) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID	concert_singer
SELECT T2.Song_Name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T1.Age >  SELECT AVG(T1.Age) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID	concert_singer
SELECT T1.Location, T1.Name FROM stadium AS T1 WHERE T1.Capacity BETWEEN 5000 AND 10000	concert_singer
SELECT `Location`, `Name` FROM `stadium` WHERE `Capacity` BETWEEN 5000 AND 10000	concert_singer
SELECT MAX(Capacity),  AVG(Capacity) FROM stadium	concert_singer
SELECT AVG(Capacity), MAX(Capacity) FROM stadium	concert_singer
SELECT T1.Name, T1.Capacity FROM stadium AS T1 INNER JOIN ( SELECT Stadium_ID, MAX(Average) AS max_avg FROM stadium GROUP BY Stadium_ID ) AS T2 ON T1.Stadium_ID = T2.Stadium_ID ORDER BY T2.max_avg DESC LIMIT 1	concert_singer
SELECT T1.Name, T1.Capacity FROM stadium AS T1 INNER JOIN ( SELECT Stadium_ID, MAX(Average) AS max_avg FROM stadium GROUP BY Stadium_ID ) AS T2 ON T1.Stadium_ID = T2.Stadium_ID ORDER BY T2.max_avg DESC LIMIT 1	concert_singer
SELECT COUNT(concert_ID) FROM concert WHERE YEAR = 2014 OR YEAR = 2015	concert_singer
SELECT COUNT(concert_ID) FROM concert WHERE YEAR = 2014 OR YEAR = 2015	concert_singer
SELECT T1.Name, COUNT(T2.concert_ID) FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Stadium_ID	concert_singer
SELECT T1.Name, COUNT(T2.concert_ID) FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID GROUP BY T1.Name	concert_singer
SELECT T1.Name, T1.Capacity FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID INNER JOIN singer_in_concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T2.Year >= 2014 GROUP BY T1.Name, T1.Capacity ORDER BY COUNT(T2.concert_ID) DESC LIMIT 1	concert_singer
SELECT T1.Name, T1.Capacity FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year > 2013 GROUP BY T1.Stadium_ID ORDER BY COUNT(T2.concert_ID) DESC LIMIT 1	concert_singer
SELECT `Year` FROM `concert` GROUP BY `Year` ORDER BY COUNT(`concert_ID`) DESC LIMIT 1	concert_singer
SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(concert_ID) DESC LIMIT 1	concert_singer
SELECT T2.Name FROM singer_in_concert AS T1 INNER JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T1.concert_ID NOT IN ( SELECT concert_ID FROM concert )	concert_singer
SELECT T1.Name FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.concert_ID IS NULL	concert_singer
SELECT T1.Country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T1.Age > 40 INTERSECT SELECT T1.Country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID	concert_singer
SELECT T1.Name FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID LEFT JOIN singer_in_concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T2.Year = 2014 GROUP BY T1.Name HAVING COUNT(T1.Name) = 0	concert_singer
SELECT T1.Name FROM stadium AS T1 LEFT JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.concert_ID IS NULL AND T2.Year = 2014	concert_singer
SELECT T2.concert_Name, T2.Theme, COUNT(T1.Singer_ID) FROM singer_in_concert AS T1 INNER JOIN concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T2.concert_Name, T2.Theme	concert_singer
SELECT T2.concert_Name, T2.Theme, COUNT(T1.Singer_ID) FROM singer_in_concert AS T1 INNER JOIN concert AS T2 ON T1.concert_ID = T2.concert_ID GROUP BY T2.concert_Name, T2.Theme	concert_singer
SELECT T1.Name, COUNT(T2.concert_ID) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Singer_ID	concert_singer
SELECT T2.Name, COUNT(T1.concert_ID) FROM singer_in_concert AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Name	concert_singer
SELECT T1.Name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = 2014	concert_singer
SELECT T1.Name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = 2014	concert_singer
SELECT T1.Name, T1.Country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID INNER JOIN song AS T4 ON T3.concert_Name = T4.Song_Name WHERE T4.Song_Name LIKE '%Hey%' GROUP BY T1.Name, T1.Country	concert_singer
SELECT T1.Name, T1.Country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID INNER JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID INNER JOIN `song` AS T4 ON T3.concert_Name = T4.Song_Name WHERE T4.Song_Name LIKE '%Hey%' GROUP BY T1.Name, T1.Country	concert_singer
SELECT T1.Name, T1.Location FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2014 INTERSECT SELECT T1.Name, T1.Location FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2015 INTERSECT SELECT T1.Name, T1.Location FROM stadium AS T1 INNER JOIN concert	concert_singer
SELECT T1.Name, T1.Location FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2014 INTERSECT SELECT T1.Name, T1.Location FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = 2015 INTERSECT SELECT T1.Name, T1.Location FROM stadium AS T1 INNER JOIN concert	concert_singer
SELECT COUNT(concert.concert_ID) FROM concert JOIN stadium ON concert.Stadium_ID = stadium.Stadium_ID ORDER BY stadium.Capacity DESC LIMIT 1	concert_singer
SELECT COUNT(T2.concert_ID) FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID ORDER BY T1.Capacity DESC LIMIT 1	concert_singer
SELECT COUNT(T1.PetID) FROM Pets AS T1 INNER JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID WHERE T1.weight > 10	pets_1
SELECT COUNT(T1.PetID) FROM Pets AS T1 INNER JOIN Has_Pet AS T2 ON T1.PetID = T2.PetID WHERE T1.weight > 10	pets_1
SELECT T3.weight FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Age =  SELECT MIN(T1.Age) FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.P	pets_1
SELECT T3.weight FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Age =  SELECT MIN(T1.Age) FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.P	pets_1
SELECT T2.pet_type, MAX(T2.weight) FROM Pets AS T2 GROUP BY T2.pet_type	pets_1
SELECT T2.PetType, MAX(T2.weight) FROM Pets AS T2 GROUP BY T2.PetType	pets_1
SELECT COUNT(DISTINCT T1.StuID) FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Age > 20	pets_1
SELECT COUNT(DISTINCT T1.StuID) FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Age > 20	pets_1
SELECT COUNT(T2.PetID) FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = 'F' AND T3.PetType = 'dog' 	pets_1
SELECT COUNT(DISTINCT T1.StuID) FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.Sex = 'F' AND T3.PetType = 'dog'	pets_1
SELECT COUNT(DISTINCT PetType) FROM Pets	pets_1
SELECT COUNT(DISTINCT PetType) FROM Pets	pets_1
SELECT T1.Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' OR T3.PetType = 'dog'	pets_1
SELECT T1.Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' OR T3.PetType = 'dog' GROUP BY T1.Fname	pets_1
SELECT T1.Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' INTERSECT SELECT T1.Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2	pets_1
SELECT T1.Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' INTERSECT SELECT T1.Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2	pets_1
SELECT T1.`Major`, T1.`Age` FROM `Student` AS T1 INNER JOIN `Has_Pet` AS T2 ON T1.`StuID` = T2.`StuID` LEFT JOIN `Pets` AS T3 ON T2.`PetID` = T3.`PetID` WHERE T3.`PetType`!= 'cat' GROUP BY T1.`StuID` HAVING COUNT(T3.`PetID`) = 0	pets_1
SELECT T1.`Major`, T1.`Age` FROM `Student` AS T1 INNER JOIN `Has_Pet` AS T2 ON T1.`StuID` = T2.`StuID` INNER JOIN `Pets` AS T3 ON T2.`PetID` = T3.`PetID` WHERE T3.`PetType`!= 'cat' GROUP BY T1.`Major`, T1.`Age`	pets_1
SELECT T1.StuID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID LEFT JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType!= 'cat' GROUP BY T1.StuID HAVING COUNT(T3.PetID) = 0	pets_1
SELECT T1.StuID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' EXCEPT SELECT T1.StuID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T	pets_1
SELECT T1.Fname, T1.Age FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' AND T3.PetType!= 'cat'	pets_1
SELECT T1.Fname FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' AND T3.PetType!= 'cat' GROUP BY T1.Fname	pets_1
SELECT T2.PetType, T2.weight FROM Pets AS T2 INNER JOIN Has_Pet AS T1 ON T1.PetID = T2.PetID ORDER BY T2.pet_age ASC LIMIT 1	pets_1
SELECT T2.PetType, T2.weight FROM Pets AS T2 INNER JOIN Has_Pet AS T3 ON T2.PetID = T3.PetID INNER JOIN Student AS T1 ON T3.StuID = T1.StuID ORDER BY T2.pet_age ASC LIMIT 1	pets_1
SELECT T2.PetID, T2.weight FROM Pets AS T2 INNER JOIN Has_Pet AS T1 ON T2.PetID = T1.PetID WHERE T2.pet_age > 1	pets_1
SELECT T2.PetID, T2.weight FROM Pets AS T2 INNER JOIN Has_Pet AS T1 ON T2.PetID = T1.PetID WHERE T2.pet_age > 1	pets_1
SELECT T2.pet_age, AVG(T2.pet_age) AS avg_age, MAX(T2.pet_age) AS max_age FROM Pets AS T2 JOIN Has_Pet AS T1 ON T2.PetID = T1.PetID GROUP BY T2.pet_age, T2.PetType	pets_1
SELECT T2.pet_type, AVG(T2.pet_age) AS avg_age, MAX(T2.pet_age) AS max_age FROM Pets AS T2 INNER JOIN Has_Pet AS T1 ON T1.PetID = T2.PetID GROUP BY T2.pet_type	pets_1
SELECT T1.pet_type, AVG(T1.weight) FROM Pets AS T1 GROUP BY T1.pet_type	pets_1
SELECT T1.PetType, AVG(T1.weight) FROM Pets AS T1 GROUP BY T1.PetType	pets_1
SELECT T1.Fname, T1.Age FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID ORDER BY T1.StuID LIMIT 1	pets_1
SELECT DISTINCT T1.Fname, T1.Age FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID	pets_1
SELECT T2.PetID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID WHERE T1.LName = 'Smith'	pets_1
SELECT T3.PetID FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T1.LName = 'Smith'	pets_1
SELECT T1.StuID, COUNT(T2.PetID) FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING COUNT(T2.PetID) > 0	pets_1
SELECT T1.StuID, COUNT(T2.PetID) FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID	pets_1
SELECT T1.Fname, T1.Sex FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING COUNT(T2.PetID) > 1	pets_1
SELECT T1.Fname, T1.Sex FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID HAVING COUNT(T2.PetID) > 1	pets_1
SELECT T1.LName FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' AND T3.pet_age = 3	pets_1
SELECT T1.LName FROM Student AS T1 INNER JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID INNER JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' AND T3.pet_age = 3	pets_1
SELECT AVG(Age) FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet )	pets_1
SELECT AVG(Age) FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet )	pets_1
SELECT COUNT(DISTINCT `Continent`) FROM `countries`	car_1
SELECT COUNT(ContId) FROM continents	car_1
SELECT T2.Continent, T2.ContId, COUNT(T1.CountryId) FROM countries AS T1 INNER JOIN continents AS T2 ON T1.Continent = T2.Continent GROUP BY T2.Continent, T2.ContId	car_1
SELECT T1.ContId, T1.Continent, COUNT(T2.CountryId) FROM continents AS T1 INNER JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId, T1.Continent	car_1
SELECT COUNT(T1.CountryName) FROM countries AS T1	car_1
SELECT COUNT(T1.CountryId) FROM countries AS T1	car_1
SELECT T1.Maker, T1.Id, COUNT(T2.Model) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Maker, T1.Id	car_1
SELECT T1.Id, T1.Maker, T1.FullName, COUNT(T2.ModelId) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker, T1.FullName	car_1
SELECT T2.Model FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.MakeId = T2.ModelId ORDER BY T1.Horsepower ASC LIMIT 1	car_1
SELECT T2.Model FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.MakeId = T2.ModelId ORDER BY T1.Horsepower ASC LIMIT 1	car_1
SELECT T1.Model FROM model_list AS T1 INNER JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T2.Weight < ( SELECT AVG(T2.Weight) FROM cars_data AS T2 )	car_1
SELECT T2.Model FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.MakeId = T2.ModelId INNER JOIN cars_data AS T3 ON T2.Maker = T3.Country WHERE T3.Weight <  SELECT AVG(T3.Weight) FROM cars_data AS T3 INNER JOIN car_makers AS T4 ON T3.Country = T4.Country INNER JOIN countries AS T5 ON T4.Country = T5.CountryName INNER JOIN continents AS T6 ON T	car_1
SELECT T1.Maker FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker INNER JOIN cars_data AS T3 ON T2.ModelId = T3.Id WHERE T3.Year = 1970 GROUP BY T1.Maker HAVING COUNT(T3.Id) > 0	car_1
SELECT DISTINCT T1.Maker FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker INNER JOIN cars_data AS T3 ON T2.ModelId = T3.Id WHERE T3.Year = 1970	car_1
SELECT T1.Make, T2.Year FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id ORDER BY T2.Year ASC LIMIT 1	car_1
SELECT T1.Maker, T1.Year FROM car_makers AS T1 INNER JOIN cars_data AS T2 ON T1.Id = T2.Id ORDER BY T2.Year ASC LIMIT 1	car_1
SELECT DISTINCT T1.Model FROM model_list AS T1 INNER JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T2.Year > 1980	car_1
SELECT DISTINCT T1.Model FROM model_list AS T1 INNER JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T2.Year > 1980	car_1
SELECT T2.Continent, COUNT(T1.Maker) FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryName GROUP BY T2.Continent	car_1
SELECT T2.Continent, COUNT(T1.Maker) FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryName GROUP BY T2.Continent	car_1
SELECT T2.CountryName FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryName GROUP BY T2.CountryName ORDER BY COUNT(T1.Id) DESC LIMIT 1	car_1
SELECT T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName ORDER BY COUNT(T2.Id) DESC LIMIT 1	car_1
SELECT T1.Maker, COUNT(T2.Model) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Maker ORDER BY COUNT(T2.Model) DESC	car_1
SELECT T1.Maker, T1.FullName, COUNT(T2.Model) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Maker, T1.FullName	car_1
SELECT T1.Accelerate FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.MakeId = T2.ModelId INNER JOIN car_makers AS T3 ON T2.Maker = T3.Maker WHERE T3.FullName = 'AMC Hornet Sportabout (SW)' AND T1.Model = 'AMC Hornet Sportabout (SW)'	car_1
SELECT T1.Accelerate FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId INNER JOIN model_list AS T3 ON T2.ModelId = T3.ModelId WHERE T3.Model = 'amc hornet sportabout (sw)' LIMIT 1	car_1
SELECT COUNT(DISTINCT T1.Maker) FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryName WHERE T2.CountryName = 'france'	car_1
SELECT COUNT(DISTINCT T1.Maker) FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryName WHERE T2.CountryName = 'France'	car_1
SELECT COUNT(T1.Model) FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Maker INNER JOIN countries AS T3 ON T2.Country = T3.CountryName WHERE T3.CountryName = 'usa'	car_1
SELECT COUNT(T1.ModelId) FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Id INNER JOIN countries AS T3 ON T2.Country = T3.CountryName WHERE T3.CountryName = 'United States'	car_1
SELECT AVG(T1.MPG) FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.ModelId = T2.ModelId INNER JOIN car_makers AS T3 ON T2.Maker = T3.Maker WHERE T1.Cylinders = 4	car_1
SELECT AVG(T1.MPG) FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.ModelId = T2.ModelId INNER JOIN car_makers AS T3 ON T2.Maker = T3.Maker WHERE T1.Cylinders = 4	car_1
SELECT MIN(T1.Weight) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId INNER JOIN model_list AS T3 ON T2.ModelId = T3.ModelId INNER JOIN car_makers AS T4 ON T3.MakerId = T4.Id WHERE T1.Cylinders = 8 AND T1.Year = 1974	car_1
SELECT MIN(T1.Weight) FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.ModelId = T2.ModelId INNER JOIN car_makers AS T3 ON T2.Maker = T3.Maker INNER JOIN countries AS T4 ON T3.Country = T4.CountryName WHERE T1.Cylinders = 8 AND T1.Year = 1974	car_1
SELECT T1.Maker, T2.Model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker	car_1
SELECT T1.Maker, T2.Model FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker	car_1
SELECT T1.CountryId, T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker GROUP BY T1.CountryId, T1.CountryName HAVING COUNT(T2.Id) > 0	car_1
SELECT T1.CountryId, T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker GROUP BY T1.CountryId, T1.CountryName HAVING COUNT(T2.Id) > 0	car_1
SELECT COUNT(Id) FROM cars_data WHERE Horsepower  >  150	car_1
SELECT COUNT(Id) FROM cars_data WHERE Horsepower  >  150	car_1
SELECT `Year`, AVG(`Weight`) AS `avg_weight` FROM `cars_data` GROUP BY `Year`	car_1
SELECT `Year`, AVG(`Weight`) AS `avg_weight`, AVG(`Year`) AS `avg_year` FROM `cars_data` GROUP BY `Year`	car_1
SELECT T2.CountryName FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryName INNER JOIN continents AS T3 ON T2.Continent = T3.Continent WHERE T3.Continent = 'Europe' GROUP BY T2.CountryName HAVING COUNT(T1.Country) >= 3	car_1
SELECT T2.CountryName FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryName INNER JOIN continents AS T3 ON T2.Continent = T3.Continent WHERE T3.Continent = 'Europe' GROUP BY T2.CountryName HAVING COUNT(T1.Maker) >= 3	car_1
SELECT MAX(T1.Horsepower), T2.Make FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.MakeId = T2.ModelId INNER JOIN cars_data AS T3 ON T2.ModelId = T3.Id WHERE T3.Cylinders = 3 GROUP BY T2.Make ORDER BY MAX(T1.Horsepower) DESC LIMIT 1	car_1
SELECT T2.Maker, MAX(T1.Horsepower) FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.MakeId = T2.ModelId INNER JOIN cars_data AS T3 ON T2.ModelId = T3.Id WHERE T3.Cylinders = 3 GROUP BY T2.Maker	car_1
SELECT T1.Model FROM model_list AS T1 INNER JOIN cars_data AS T2 ON T1.ModelId = T2.Id ORDER BY T2.MPG DESC LIMIT 1	car_1
SELECT T1.Model FROM model_list AS T1 INNER JOIN cars_data AS T2 ON T1.ModelId = T2.Id ORDER BY T2.MPG DESC LIMIT 1	car_1
SELECT AVG(T1.Horsepower) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.MakeId = T2.MakeId WHERE T1.Year < 1980	car_1
SELECT AVG(T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980	car_1
SELECT AVG(T1.Edispl) FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.ModelId INNER JOIN car_makers AS T3 ON T2.Maker = T3.Maker WHERE T3.Maker = 'volvo' AND T2.Model = 'volvo'	car_1
SELECT AVG(T1.Edispl) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker INNER JOIN car_names AS T3 ON T2.Model = T3.Model INNER JOIN cars_data AS T4 ON T3.MakeId = T4.Id WHERE T1.Maker = 'VOLVO'	car_1
SELECT MAX(Accelerate) FROM cars_data GROUP BY Cylinders	car_1
SELECT MAX(Accelerate) FROM cars_data GROUP BY Cylinders	car_1
SELECT T2.Model FROM car_names AS T1 INNER JOIN model_list AS T2 ON T1.MakeId = T2.ModelId GROUP BY T2.Model ORDER BY COUNT(T2.ModelId) DESC LIMIT 1	car_1
SELECT T1.Model FROM model_list AS T1 INNER JOIN car_names AS T2 ON T1.Maker = T2.MakeId GROUP BY T1.Model ORDER BY COUNT(DISTINCT T2.Model) DESC LIMIT 1	car_1
SELECT COUNT(*) FROM `cars_data` WHERE `Cylinders` > 4	car_1
SELECT COUNT(Id) FROM cars_data WHERE Cylinders  >  4	car_1
SELECT COUNT(Id) FROM cars_data WHERE Year = 1980	car_1
SELECT COUNT(Id) FROM cars_data WHERE Year = 1980	car_1
SELECT COUNT(T1.ModelId) FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'	car_1
SELECT COUNT(T1.ModelId) FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Maker WHERE T2.Maker = 'American Motor Company'	car_1
SELECT T1.Id, T1.FullName, COUNT(T2.ModelId) FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName HAVING COUNT(T2.ModelId) > 3	car_1
SELECT T1.Id, T1.Maker, T1.FullName, T1.Country FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker, T1.FullName, T1.Country HAVING COUNT(T2.ModelId) > 3	car_1
SELECT DISTINCT T1.Model FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'General Motors' OR T1.Weight > 3500 ORDER BY T1.Model	car_1
SELECT DISTINCT T1.Model FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Maker WHERE T2.Maker = 'General Motors' OR T1.Weight > 3500	car_1
SELECT `Year` FROM `cars_data` WHERE `Weight` >= 3000 AND `Weight` <= 4000	car_1
SELECT DISTINCT YEAR FROM cars_data WHERE Weight  <  4000 INTERSECT SELECT DISTINCT YEAR FROM cars_data WHERE Weight  >  3000	car_1
SELECT T2.Horsepower FROM cars_data AS T1 INNER JOIN car_makers AS T2 ON T1.Country = T2.Country WHERE T1.Accelerate = ( SELECT MAX(Accelerate) FROM cars_data )	car_1
SELECT T1.Horsepower FROM car_makers AS T1 INNER JOIN cars_data AS T2 ON T1.Id = T2.Id ORDER BY T2.Accelerate DESC LIMIT 1	car_1
SELECT T2.Cylinders FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo' ORDER BY T2.Accelerate ASC LIMIT 1	car_1
SELECT T1.Cylinders FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId INNER JOIN model_list AS T3 ON T2.Maker = T3.Maker WHERE T3.Model = 'Volvo' ORDER BY T1.Accelerate ASC LIMIT 1	car_1
SELECT COUNT(*) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId INNER JOIN car_makers AS T3 ON T2.Maker = T3.Maker WHERE T1.Accelerate > ( SELECT MAX(T4.Horsepower) FROM cars_data AS T4 INNER JOIN car_names AS T5 ON T4.Id = T5.MakeId INNER JOIN car_makers AS T6 ON T5.Maker = T6.Maker )	car_1
SELECT COUNT(*) FROM cars_data AS T1 INNER JOIN car_names AS T2 ON T1.Id = T2.MakeId INNER JOIN car_makers AS T3 ON T2.Maker = T3.Maker WHERE T1.Accelerate > ( SELECT MAX(T4.Horsepower) FROM cars_data AS T4 INNER JOIN car_names AS T5 ON T4.Id = T5.MakeId INNER JOIN car_makers AS T6 ON T5.Maker = T6.Maker )	car_1
SELECT COUNT(T2.CountryName) FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryName GROUP BY T2.CountryName HAVING COUNT(T1.Maker) > 2	car_1
SELECT COUNT(T2.CountryName) FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryName GROUP BY T2.CountryName HAVING COUNT(T1.Maker) > 2	car_1
SELECT COUNT(*) FROM `cars_data` WHERE `Cylinders` > 6	car_1
SELECT COUNT(*) FROM `cars_data` WHERE `Cylinders` > 6	car_1
SELECT T1.Model FROM model_list AS T1 INNER JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.Horsepower DESC LIMIT 1	car_1
SELECT T1.Model FROM model_list AS T1 INNER JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.Horsepower DESC LIMIT 1	car_1
SELECT T1.MakeId, T1.Model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower > ( SELECT MIN(T3.Horsepower) FROM cars_data AS T3 ) AND T2.Cylinders <= 3	car_1
SELECT T1.MakeId, T1.Model FROM car_names AS T1 INNER JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower > ( SELECT MIN(Horsepower) FROM cars_data ) AND T2.Cylinders < 4	car_1
SELECT MAX(T1.MPG) FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.ModelId = T2.ModelId INNER JOIN car_makers AS T3 ON T2.Maker = T3.Maker WHERE T1.Cylinders = 8 OR T1.Year < 1980	car_1
SELECT MAX(T1.MPG) FROM cars_data AS T1 INNER JOIN model_list AS T2 ON T1.ModelId = T2.ModelId INNER JOIN car_makers AS T3 ON T2.Maker = T3.Maker WHERE T1.Cylinders = 8 OR T1.Year < 1980	car_1
SELECT T1.Model FROM model_list AS T1 INNER JOIN cars_data AS T2 ON T1.ModelId = T2.Id WHERE T2.Weight < 3500 AND T1.Maker!= 'Ford Motor Company'	car_1
SELECT DISTINCT T1.Model FROM model_list AS T1 INNER JOIN car_makers AS T2 ON T1.Maker = T2.Maker INNER JOIN cars_data AS T3 ON T1.ModelId = T3.Id WHERE T3.Weight < 3500 AND T2.Maker!= 'Ford Motor Company' ORDER BY T1.Model	car_1
SELECT T2.CountryName FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryName GROUP BY T2.CountryName HAVING COUNT(T1.Maker) = 0	car_1
SELECT T2.CountryName FROM car_makers AS T1 INNER JOIN countries AS T2 ON T1.Country = T2.CountryName WHERE T1.Maker IS NULL	car_1
SELECT T1.Id, T1.Maker FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker HAVING COUNT(T2.ModelId) >= 2 AND COUNT(DISTINCT T1.Id) > 3	car_1
SELECT T1.Id, T1.Maker FROM car_makers AS T1 INNER JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.Maker HAVING COUNT(T2.ModelId) >= 2 INNER JOIN cars_data AS T3 ON T1.Id = T3.Id GROUP BY T1.Id, T1.Maker HAVING COUNT(T3.Id) > 3	car_1
SELECT T1.CountryId, T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker GROUP BY T1.CountryId, T1.CountryName HAVING COUNT(T2.Id) > 3 UNION SELECT T1.CountryId, T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2	car_1
SELECT T1.CountryId, T1.CountryName FROM countries AS T1 INNER JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker GROUP BY T1.CountryId, T1.CountryName HAVING COUNT(T2.Id) > 3 UNION SELECT T1.CountryId, T1.CountryName FROM countries AS T1 INNER JOIN car_names AS T2 ON T1.CountryId = T2.Make	car_1
SELECT T1.Country FROM airlines AS T1 INNER JOIN airports AS T2 ON T1.Abbreviation = T2.CountryAbbrev WHERE T1.Airline = 'JetBlue Airways'	flight_2
SELECT T2.Country FROM airlines AS T1 INNER JOIN airports AS T2 ON T1.Abbreviation = T2.CountryAbbrev WHERE T1.Airline = 'Jetblue Airways'	flight_2
SELECT T2.Abbreviation FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.Airline = T2.Airline WHERE T1.Airline = 'JetBlue Airways'	flight_2
SELECT T2.Abbreviation FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.Airline = T2.Airline WHERE T1.Airline = 'Jetblue Airways' AND T2.Airline = 'Jetblue Airways'	flight_2
SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1 INNER JOIN airports AS T2 ON T1.Country = T2.CountryAbbrev WHERE T2.Country = 'USA' GROUP BY T1.Airline, T1.Abbreviation	flight_2
SELECT T2.Airline, T2.Abbreviation FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline INNER JOIN airports AS T3 ON T2.SourceAirport = T3.AirportCode WHERE T3.Country = 'USA' GROUP BY T2.Airline, T2.Abbreviation	flight_2
SELECT `AirportCode`, `AirportName` FROM `airports` WHERE `City` = 'Anthony'	flight_2
SELECT `AirportCode`, `AirportName` FROM `airports` WHERE `City` = 'Anthony'	flight_2
SELECT COUNT(Airline) FROM airlines	flight_2
SELECT COUNT(Airline) FROM airlines	flight_2
SELECT COUNT(AirportCode) FROM airports	flight_2
SELECT COUNT(AirportCode) FROM airports	flight_2
SELECT COUNT(*) FROM flights	flight_2
SELECT COUNT(*) FROM flights	flight_2
SELECT `Airline` FROM `airlines` WHERE `Abbreviation` = 'UAL' LIMIT 1	flight_2
SELECT `Airline` FROM `airlines` WHERE `Abbreviation` = 'UAL'	flight_2
SELECT COUNT(T1.Airline) FROM airlines AS T1 INNER JOIN airports AS T2 ON T1.Abbreviation = T2.CountryAbbrev WHERE T2.Country = 'USA'	flight_2
SELECT COUNT(T1.Airline) FROM airlines AS T1 INNER JOIN airports AS T2 ON T1.uid = T2.AirportCode WHERE T2.Country = 'USA' GROUP BY T1.Airline	flight_2
SELECT T2.City, T2.Country FROM airports AS T1 INNER JOIN airlines AS T2 ON T1.AirportCode = T2.Abbreviation WHERE T1.AirportName = 'Alton'	flight_2
SELECT T2.City, T2.Country FROM airports AS T1 INNER JOIN airlines AS T2 ON T1.AirportCode = T2.Abbreviation WHERE T1.AirportName = 'Alton'	flight_2
SELECT T2.AirportName FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportCode = 'AKO'	flight_2
SELECT `AirportName` FROM `airports` WHERE `AirportCode` = 'AKO'	flight_2
SELECT T2.AirportName FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = 'Aberdeen'	flight_2
SELECT T2.AirportName FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = 'Aberdeen'	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'APG'	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'APG'	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportName = 'ATO'	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'	flight_2
SELECT COUNT(*) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode INNER JOIN airports AS T3 ON T1.DestAirport = T3.AirportCode WHERE T2.City = 'Aberdeen' AND T3.City = 'Ashley'	flight_2
SELECT COUNT(*) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode INNER JOIN airports AS T3 ON T1.DestAirport = T3.AirportCode WHERE T2.AirportName = 'Aberdeen' AND T3.AirportName = 'Ashley'	flight_2
SELECT COUNT(*) FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.Airline WHERE T2.Airline = 'JetBlue Airways'	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.Abbreviation WHERE T2.Airline = 'Jetblue Airways' AND T2.Abbreviation = 'B6'	flight_2
SELECT COUNT(T2.FlightNo) FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.Airline = T2.Airline INNER JOIN airports AS T3 ON T2.DestAirport = T3.AirportCode WHERE T1.Airline = 'United Airlines' AND T3.AirportCode = 'ASY'	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.Abbreviation INNER JOIN airports AS T3 ON T3.AirportCode = T1.DestAirport WHERE T2.Airline = 'United Airlines' AND T3.AirportCode = 'ASY' 	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.Abbreviation WHERE T2.Airline = 'United Airlines' AND T1.SourceAirport = 'AHD'	flight_2
SELECT COUNT(*) FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.Abbreviation INNER JOIN airports AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.Airline = 'United Airlines' AND T3.AirportName = 'AHD Airport'	flight_2
SELECT COUNT(T2.FlightNo) FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline INNER JOIN airports AS T3 ON T2.DestAirport = T3.AirportCode WHERE T1.Airline = 'United Airlines' AND T3.City = 'Aberdeen'	flight_2
SELECT COUNT(T2.FlightNo) FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline INNER JOIN airports AS T3 ON T2.DestAirport = T3.AirportCode WHERE T1.Airline = 'United Airlines' AND T3.AirportName = 'Aberdeen'	flight_2
SELECT T2.City FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode GROUP BY T2.City ORDER BY COUNT(T1.FlightNo) DESC LIMIT 1	flight_2
SELECT T2.City FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode GROUP BY T2.City ORDER BY COUNT(T1.DestAirport) DESC LIMIT 1	flight_2
SELECT T2.City FROM flights AS T1 INNER JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode GROUP BY T2.City ORDER BY COUNT(T1.FlightNo) DESC LIMIT 1	flight_2
SELECT T1.City FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T2.SourceAirport ORDER BY COUNT(T2.SourceAirport) DESC LIMIT 1	flight_2
SELECT T2.AirportCode FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode GROUP BY T2.AirportCode ORDER BY COUNT(T2.AirportCode) DESC LIMIT 1	flight_2
SELECT T2.AirportCode FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode GROUP BY T2.AirportCode ORDER BY COUNT(T2.AirportCode) DESC LIMIT 1	flight_2
SELECT T2.AirportCode FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode GROUP BY T2.AirportCode ORDER BY COUNT(T1.FlightNo) ASC LIMIT 1	flight_2
SELECT T2.AirportCode FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode GROUP BY T2.AirportCode ORDER BY COUNT(T2.AirportCode) ASC LIMIT 1	flight_2
SELECT `Airline` FROM `flights` GROUP BY `Airline` ORDER BY COUNT(`Airline`) DESC LIMIT 1	flight_2
SELECT T1.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.Airline GROUP BY T1.Airline ORDER BY COUNT(T1.Airline) DESC LIMIT 1	flight_2
SELECT T2.Abbreviation, T2.Country FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.Airline GROUP BY T1.Airline ORDER BY COUNT(T1.FlightNo) ASC LIMIT 1	flight_2
SELECT T2.Abbreviation, T2.Country FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.Airline GROUP BY T1.Airline ORDER BY COUNT(T1.FlightNo) ASC LIMIT 1	flight_2
SELECT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'AHD' GROUP BY T1.Airline HAVING COUNT(T1.Airline) > 0	flight_2
SELECT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.Airline = T2.Airline WHERE T2.SourceAirport = 'AHD' GROUP BY T1.Airline	flight_2
SELECT T1.Airline FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.AirportCode = 'AHD' GROUP BY T1.Airline	flight_2
SELECT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = 'AHD' GROUP BY T1.Airline	flight_2
SELECT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' INTERSECT SELECT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' INTERSECT SELECT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1	flight_2
SELECT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline INNER JOIN airports AS T3 ON T2.SourceAirport = T3.AirportCode WHERE T3.AirportCode = 'APG' INTERSECT SELECT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline INNER JOIN airports AS T3 ON T2.SourceAirport = T	flight_2
SELECT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' AND T2.Airline NOT IN ( SELECT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG' )	flight_2
SELECT DISTINCT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' EXCEPT SELECT DISTINCT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG'	flight_2
SELECT T1.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.Airline GROUP BY T1.Airline HAVING COUNT(T1.Airline) >= 10	flight_2
SELECT T1.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.uid GROUP BY T1.Airline HAVING COUNT(T1.Airline) >= 10	flight_2
SELECT T1.Airline FROM flights AS T1 INNER JOIN airlines AS T2 ON T1.Airline = T2.Airline GROUP BY T1.Airline HAVING COUNT(T1.FlightNo) < 200	flight_2
SELECT T1.Airline FROM airlines AS T1 INNER JOIN flights AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING COUNT(T2.FlightNo) < 200	flight_2
SELECT FlightNo FROM flights WHERE Airline = "United Airlines"	flight_2
SELECT `FlightNo` FROM `flights` WHERE `Airline` = 'United Airlines' LIMIT 1	flight_2
SELECT T2.FlightNo FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = 'APG'	flight_2
SELECT T2.FlightNo FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = 'APG.'	flight_2
SELECT T2.FlightNo FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.AirportName = 'APG'	flight_2
SELECT T2.FlightNo FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.AirportName = 'APG.'	flight_2
SELECT T2.FlightNo FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.City = 'Aberdeen'	flight_2
SELECT T2.FlightNo FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport WHERE T1.AirportName = 'Aberdeen'	flight_2
SELECT T1.FlightNo FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'	flight_2
SELECT T2.FlightNo FROM airports AS T1 INNER JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.AirportName = 'Aberdeen'	flight_2
SELECT COUNT(T1.FlightNo) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City IN ('Aberdeen', 'Abilene')	flight_2
SELECT COUNT(*) FROM flights AS T1 INNER JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City IN ('Aberdeen', 'Abilene')	flight_2
SELECT `AirportName` FROM `airports` WHERE `AirportCode` NOT IN ( SELECT `SourceAirport` FROM `flights` UNION SELECT `DestAirport` FROM `flights` )	flight_2
SELECT `airports`.`City`, `airports`.`AirportCode`, `airports`.`AirportName`, `airports`.`Country`, `airports`.`CountryAbbrev` FROM `airports` WHERE `airports`.`AirportCode` NOT IN ( SELECT `flights`.`SourceAirport` FROM `flights` UNION SELECT `flights`.`DestAirport` FROM `flights` )	flight_2
SELECT COUNT(T1.Employee_ID) FROM employee AS T1	employee_hire_evaluation
SELECT COUNT(T1.Employee_ID) FROM employee AS T1	employee_hire_evaluation
SELECT `Name` FROM `employee` ORDER BY `Age` ASC	employee_hire_evaluation
SELECT Name FROM employee ORDER BY Age ASC	employee_hire_evaluation
SELECT T2.City, COUNT(T1.Employee_ID) FROM employee AS T1 INNER JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.City	employee_hire_evaluation
SELECT T1.City, COUNT(T1.Employee_ID) FROM employee AS T1 GROUP BY T1.City	employee_hire_evaluation
SELECT T2.City FROM employee AS T1 INNER JOIN `shop` AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T1.Age < 30 GROUP BY T2.City HAVING COUNT(T1.Employee_ID) > 1	employee_hire_evaluation
SELECT T2.City FROM employee AS T1 INNER JOIN `shop` AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T1.Age < 30 GROUP BY T2.City HAVING COUNT(T1.Employee_ID) > 1	employee_hire_evaluation
SELECT T2.Location, COUNT(T2.Shop_ID) FROM evaluation AS T1 INNER JOIN shop AS T2 ON T1.Employee_ID = T2.Manager_name GROUP BY T2.Location	employee_hire_evaluation
SELECT T2.Location, COUNT(T2.Shop_ID) FROM evaluation AS T1 INNER JOIN shop AS T2 ON T1.Employee_ID = T2.Manager_name INNER JOIN hiring AS T3 ON T2.Shop_ID = T3.Shop_ID GROUP BY T2.Location	employee_hire_evaluation
SELECT T2.Manager_name, T2.District FROM shop AS T1 INNER JOIN `hiring` AS T2 ON T1.Shop_ID = T2.Shop_ID ORDER BY T1.Number_products DESC LIMIT 1	employee_hire_evaluation
SELECT T2.Manager_name, T2.District FROM shop AS T1 INNER JOIN `hiring` AS T2 ON T1.Shop_ID = T2.Shop_ID ORDER BY T1.Number_products DESC LIMIT 1	employee_hire_evaluation
SELECT MIN(Number_products), MAX(Number_products) FROM shop	employee_hire_evaluation
SELECT MIN(Number_products), MAX(Number_products) FROM shop	employee_hire_evaluation
SELECT T1.Name, T1.Location, T1.District FROM shop AS T1 ORDER BY T1.Number_products DESC	employee_hire_evaluation
SELECT T1.Name, T1.Location, T1.District FROM shop AS T1 ORDER BY T1.Number_products DESC	employee_hire_evaluation
SELECT T1.Name FROM shop AS T1 INNER JOIN ( SELECT Shop_ID, AVG(Number_products) AS avg_num FROM shop GROUP BY Shop_ID ) AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T1.Number_products > T2.avg_num	employee_hire_evaluation
SELECT T1.Name FROM shop AS T1 INNER JOIN ( SELECT Shop_ID, AVG(Number_products) AS avg_num FROM shop GROUP BY Shop_ID ) AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T1.Number_products > T2.avg_num	employee_hire_evaluation
SELECT T1.Name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY COUNT(T2.Employee_ID) DESC LIMIT 1	employee_hire_evaluation
SELECT T1.Name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T2.Employee_ID ORDER BY COUNT(T2.Employee_ID) DESC LIMIT 1	employee_hire_evaluation
SELECT T1.Name FROM employee AS T1 INNER JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID INNER JOIN evaluation AS T3 ON T1.Employee_ID = T3.Employee_ID WHERE T3.Bonus = 1 ORDER BY T3.Bonus DESC LIMIT 1	employee_hire_evaluation
SELECT T1.Name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1	employee_hire_evaluation
SELECT T1.Name FROM employee AS T1 INNER JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID LEFT JOIN evaluation AS T3 ON T1.Employee_ID = T3.Employee_ID WHERE T3.Employee_ID IS NULL	employee_hire_evaluation
SELECT T1.Name FROM employee AS T1 INNER JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID LEFT JOIN evaluation AS T3 ON T1.Employee_ID = T3.Employee_ID WHERE T3.Employee_ID IS NULL	employee_hire_evaluation
SELECT T2.Name FROM hiring AS T1 INNER JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(T1.Employee_ID) DESC LIMIT 1	employee_hire_evaluation
SELECT T1.Name FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Shop_ID ORDER BY COUNT(T2.Shop_ID) DESC LIMIT 1	employee_hire_evaluation
SELECT T1.Name FROM shop AS T1 LEFT JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Shop_ID IS NULL	employee_hire_evaluation
SELECT T1.Name FROM shop AS T1 LEFT JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Shop_ID IS NULL	employee_hire_evaluation
SELECT T1.Name, COUNT(T2.Employee_ID) FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID	employee_hire_evaluation
SELECT T1.Name, COUNT(T2.Employee_ID) FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID	employee_hire_evaluation
SELECT SUM(T2.Bonus) FROM evaluation AS T1 INNER JOIN hiring AS T2 ON T1.Employee_ID = T2.Employee_ID INNER JOIN shop AS T3 ON T2.Shop_ID = T3.Shop_ID INNER JOIN employee AS T4 ON T1.Employee_ID = T4.Employee_ID WHERE T1.Bonus IS NOT NULL	employee_hire_evaluation
SELECT SUM(T1.Bonus) FROM evaluation AS T1	employee_hire_evaluation
SELECT * FROM `hiring`	employee_hire_evaluation
SELECT * FROM `hiring`	employee_hire_evaluation
SELECT T1.District FROM shop AS T1 INNER JOIN shop AS T1_1 ON T1.District = T1_1.District WHERE T1.Number_products < 3000 INTERSECT SELECT T1.District FROM shop AS T1 INNER JOIN shop AS T1_1 ON T1.District = T1_1.District WHERE T1.Number_products > 10000 INTERSECT SELECT T1.District FROM shop AS T1 INNER JOIN shop AS T1	employee_hire_evaluation
SELECT T1.District FROM shop AS T1 INNER JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.District HAVING SUM(CASE WHEN T1.Number_products < 3000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN T1.Number_products > 10000 THEN 1 ELSE 0 END) > 0	employee_hire_evaluation
SELECT COUNT(DISTINCT Location) FROM shop	employee_hire_evaluation
SELECT COUNT(DISTINCT Location) FROM shop	employee_hire_evaluation
SELECT COUNT(DISTINCT Document_ID) FROM Documents	cre_Doc_Template_Mgt
SELECT COUNT(Template_ID) FROM Documents	cre_Doc_Template_Mgt
SELECT T2.Document_ID, T2.Document_Name, T2.Document_Description FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID	cre_Doc_Template_Mgt
SELECT T2.Document_ID, T2.Document_Name, T2.Document_Description FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID	cre_Doc_Template_Mgt
SELECT T1.Document_Name, T1.Template_ID FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Description LIKE '%w%'	cre_Doc_Template_Mgt
SELECT T1.Document_Name, T1.Template_ID FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Description LIKE '%w%'	cre_Doc_Template_Mgt
SELECT T1.Document_ID, T1.Template_ID, T2.Template_Type_Description FROM Documents AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_ID = T2.Template_Type_Code WHERE T1.Document_Name = 'Robbin CV'	cre_Doc_Template_Mgt
SELECT T1.Document_ID, T1.Template_ID, T1.Document_Name, T1.Document_Description FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Robbin CV.'	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT T1.Template_ID) FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID	cre_Doc_Template_Mgt
SELECT COUNT(DISTINCT T1.Template_ID) FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID	cre_Doc_Template_Mgt
SELECT COUNT(T1.Document_ID) FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID INNER JOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code = T3.Template_Type_Code WHERE T3.Template_Type_Code = 'PPT'	cre_Doc_Template_Mgt
SELECT COUNT(T1.Document_ID) FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID INNER JOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code = T3.Template_Type_Code WHERE T3.Template_Type_Description = 'PPT'	cre_Doc_Template_Mgt
SELECT T1.Template_ID, COUNT(T2.Document_ID) FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID	cre_Doc_Template_Mgt
SELECT T1.Template_ID, COUNT(T1.Template_ID) FROM Documents AS T1 GROUP BY T1.Template_ID	cre_Doc_Template_Mgt
SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Code ORDER BY COUNT(T2.Document_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Code ORDER BY COUNT(T2.Document_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT T1.Template_ID FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID HAVING COUNT(T1.Template_ID) > 1	cre_Doc_Template_Mgt
SELECT T1.Template_ID FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID HAVING COUNT(T1.Template_ID) > 1	cre_Doc_Template_Mgt
SELECT T1.Template_ID FROM Templates AS T1 LEFT JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_ID IS NULL	cre_Doc_Template_Mgt
SELECT T1.Template_ID FROM Templates AS T1 LEFT JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_ID IS NULL	cre_Doc_Template_Mgt
SELECT COUNT(Template_ID) FROM Templates	cre_Doc_Template_Mgt
SELECT COUNT(Template_ID) FROM Templates	cre_Doc_Template_Mgt
SELECT T1.Template_ID, T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1	cre_Doc_Template_Mgt
SELECT T1.Template_ID, T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1	cre_Doc_Template_Mgt
SELECT DISTINCT Template_Type_Code FROM Templates	cre_Doc_Template_Mgt
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types	cre_Doc_Template_Mgt
SELECT T1.Template_ID FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'PP' OR T2.Template_Type_Description = 'PPT'	cre_Doc_Template_Mgt
SELECT T1.Template_ID FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'PP' OR T2.Template_Type_Description = 'PPT'	cre_Doc_Template_Mgt
SELECT COUNT(*) FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'CV?'	cre_Doc_Template_Mgt
SELECT COUNT(Template_ID) FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'CV.'	cre_Doc_Template_Mgt
SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Version_Number > 5	cre_Doc_Template_Mgt
SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1 WHERE T1.Version_Number > 5	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code, COUNT(T2.Template_ID) FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code, COUNT(T2.Template_ID) FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code, COUNT(T2.Template_ID) FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY COUNT(T2.Template_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY COUNT(T1.Template_Type_Code) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(T1.Template_ID) < 3	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code HAVING COUNT(T2.Template_ID) < 3	cre_Doc_Template_Mgt
SELECT MIN(T1.Version_Number), T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code	cre_Doc_Template_Mgt
SELECT T1.Version_Number, T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code ORDER BY T1.Version_Number ASC LIMIT 1	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID INNER JOIN Paragraphs AS T3 ON T2.Document_ID = T3.Document_ID WHERE T3.Paragraph_Text = 'Data base' AND T2.Document_Name = 'Data base' AND T1.Date_Effective_To IS NULL	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID INNER JOIN Ref_Template_Types AS T3 ON T1.Template_Type_Code = T3.Template_Type_Code WHERE T2.Document_Name = 'Data base.'	cre_Doc_Template_Mgt
SELECT T1.Document_Name FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID INNER JOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code = T3.Template_Type_Code WHERE T3.Template_Type_Code = 'BK' GROUP BY T1.Document_Name	cre_Doc_Template_Mgt
SELECT T1.Document_Name FROM Documents AS T1 INNER JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID INNER JOIN Ref_Template_Types AS T3 ON T2.Template_Type_Code = T3.Template_Type_Code WHERE T3.Template_Type_Code = 'BK' GROUP BY T1.Document_Name	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code, COUNT(T2.Document_ID) FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code INNER JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID GROUP BY T1.Template_Type_Code	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code, COUNT(T2.Document_ID) FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code, COUNT(T2.Document_ID) FROM Ref_Template_Types AS T1 INNER JOIN Documents AS T2 ON T1.Template_Type_Code = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(T2.Document_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(T1.Template_Type_Code) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT DISTINCT T1.Template_Type_Code FROM Ref_Template_Types AS T1 LEFT JOIN Documents AS T2 ON T1.Template_Type_Code = T2.Template_ID WHERE T2.Template_ID IS NULL	cre_Doc_Template_Mgt
SELECT DISTINCT T1.Template_Type_Code FROM Ref_Template_Types AS T1 LEFT JOIN Documents AS T2 ON T1.Template_Type_Code = T2.Template_ID WHERE T2.Template_ID IS NULL	cre_Doc_Template_Mgt
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types	cre_Doc_Template_Mgt
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Description FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Code = 'AD'	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Description FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Code = 'AD' LIMIT 1	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_Type_Description = 'Book' AND T2.Date_Effective_To IS NULL	cre_Doc_Template_Mgt
SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T1.Template_Type_Description = 'Book'	cre_Doc_Template_Mgt
SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code INNER JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID	cre_Doc_Template_Mgt
SELECT DISTINCT T1.Template_Type_Description FROM Ref_Template_Types AS T1 INNER JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code INNER JOIN Documents AS T3 ON T2.Template_ID = T3.Template_ID	cre_Doc_Template_Mgt
SELECT T1.Template_ID FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'	cre_Doc_Template_Mgt
SELECT T1.Template_ID FROM Templates AS T1 INNER JOIN Ref_Template_Types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'	cre_Doc_Template_Mgt
SELECT COUNT(T1.Paragraph_ID) FROM Paragraphs AS T1	cre_Doc_Template_Mgt
SELECT COUNT(T1.Paragraph_ID) FROM Paragraphs AS T1	cre_Doc_Template_Mgt
SELECT COUNT(T1.Paragraph_ID) FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'	cre_Doc_Template_Mgt
SELECT COUNT(T1.Paragraph_ID) FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'	cre_Doc_Template_Mgt
SELECT T2.Paragraph_Text FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text LIKE '%Korea %'	cre_Doc_Template_Mgt
SELECT T3.Template_Details FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID INNER JOIN Paragraphs AS T3 ON T2.Document_ID = T3.Document_ID WHERE T3.Paragraph_Text LIKE '%Korea %'	cre_Doc_Template_Mgt
SELECT T2.Paragraph_ID, T2.Paragraph_Text FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = 'Welcome to NY'	cre_Doc_Template_Mgt
SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY' ORDER BY T1.Paragraph_ID ASC	cre_Doc_Template_Mgt
SELECT T2.Paragraph_Text FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = 'Customer reviews'	cre_Doc_Template_Mgt
SELECT T2.Paragraph_Text FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = 'Customer reviews'	cre_Doc_Template_Mgt
SELECT T1.Document_ID, COUNT(T2.Paragraph_ID) FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY T1.Document_ID ASC	cre_Doc_Template_Mgt
SELECT T1.Document_ID, COUNT(T2.Paragraph_ID) FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY T1.Document_ID	cre_Doc_Template_Mgt
SELECT T2.Document_ID, T2.Document_Name, COUNT(T3.Paragraph_ID) FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID INNER JOIN Paragraphs AS T3 ON T2.Document_ID = T3.Document_ID GROUP BY T2.Document_ID, T2.Document_Name	cre_Doc_Template_Mgt
SELECT T2.Document_ID, T2.Document_Name, COUNT(T3.Paragraph_ID) FROM Templates AS T1 INNER JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID INNER JOIN Paragraphs AS T3 ON T2.Document_ID = T3.Document_ID GROUP BY T2.Document_ID, T2.Document_Name	cre_Doc_Template_Mgt
SELECT T1.Document_ID FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID HAVING COUNT(T2.Paragraph_ID) >= 2	cre_Doc_Template_Mgt
SELECT T2.Document_ID FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING COUNT(T1.Paragraph_ID) >= 2	cre_Doc_Template_Mgt
SELECT T1.Document_ID, T1.Document_Name FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID, T1.Document_Name ORDER BY COUNT(T2.Paragraph_ID) DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT T1.Document_ID, T1.Document_Name FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID ORDER BY T2.Paragraph_ID DESC LIMIT 1	cre_Doc_Template_Mgt
SELECT T1.Document_ID FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY COUNT(T2.Paragraph_ID) ASC LIMIT 1	cre_Doc_Template_Mgt
SELECT T1.Document_ID FROM Documents AS T1 INNER JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T1.Document_ID ORDER BY COUNT(T2.Paragraph_ID) ASC LIMIT 1	cre_Doc_Template_Mgt
SELECT T2.Document_ID FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING COUNT(T1.Paragraph_ID) BETWEEN 1 AND 2	cre_Doc_Template_Mgt
SELECT T2.Document_ID FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID GROUP BY T2.Document_ID HAVING COUNT(T1.Paragraph_ID) BETWEEN 1 AND 2	cre_Doc_Template_Mgt
SELECT T2.Document_ID FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Paragraph_Text = 'Brazil' AND T1.Paragraph_Text = 'Ireland'	cre_Doc_Template_Mgt
SELECT T2.Document_ID FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Paragraph_Text = 'Brazil' INTERSECT SELECT T2.Document_ID FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Paragraph_Text = 'Ireland' INTERSECT SELECT T2.Document_ID FROM Paragraphs AS T1 INNER JOIN Documents AS T2 ON T	cre_Doc_Template_Mgt
SELECT COUNT(Teacher_ID) FROM teacher	course_teach
SELECT COUNT(Teacher_ID) FROM teacher	course_teach
SELECT T1.Name FROM teacher AS T1 ORDER BY T1.Age ASC	course_teach
SELECT T1.Name FROM teacher AS T1 ORDER BY T1.Age ASC	course_teach
SELECT `Name`, `Age`, `Hometown` FROM `teacher`	course_teach
SELECT `Name`, `Age`, `Hometown` FROM `teacher`	course_teach
SELECT T2.Name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T2.Hometown!= 'Little Lever Urban District' GROUP BY T2.Name	course_teach
SELECT T2.Name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T2.Hometown!= 'Little Lever Urban District' GROUP BY T2.Name	course_teach
SELECT T2.Name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T2.Age = 32 OR T2.Age = 33	course_teach
SELECT T2.Name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T2.Age = 32 OR T2.Age = 33	course_teach
SELECT T1.Hometown FROM teacher AS T1 INNER JOIN ( SELECT Teacher_ID, MIN(Age) AS Age FROM teacher GROUP BY Teacher_ID ) AS T2 ON T1.Teacher_ID = T2.Teacher_ID ORDER BY T2.Age DESC LIMIT 1	course_teach
SELECT T2.Hometown FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID ORDER BY T1.Age ASC LIMIT 1	course_teach
SELECT T2.Hometown, COUNT(T2.Hometown) FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Hometown	course_teach
SELECT COUNT(Teacher_ID) FROM teacher GROUP BY Hometown	course_teach
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(Hometown) DESC LIMIT 1	course_teach
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(Hometown) DESC LIMIT 1	course_teach
SELECT T1.Hometown FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Hometown HAVING COUNT(T1.Teacher_ID) > 1	course_teach
SELECT T2.Hometown FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Hometown HAVING COUNT(T2.Teacher_ID) >= 2	course_teach
SELECT T2.Name, T1.Course FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID	course_teach
SELECT T1.Name, T2.Course FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID	course_teach
SELECT T1.Name, T2.Course FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID ORDER BY T1.Name ASC	course_teach
SELECT T1.Name, T2.Course FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID ORDER BY T1.Name ASC	course_teach
SELECT T1.Name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID INNER JOIN course AS T3 ON T2.Course_ID = T3.Course_ID WHERE T3.Course ='math'	course_teach
SELECT T2.Name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID INNER JOIN course AS T3 ON T1.Course_ID = T3.Course_ID WHERE T3.Course ='math' GROUP BY T2.Name	course_teach
SELECT T2.Name, COUNT(T1.Course_ID) FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name	course_teach
SELECT T2.Name, COUNT(T3.Course_ID) FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID INNER JOIN course AS T3 ON T1.Course_ID = T3.Course_ID GROUP BY T2.Name	course_teach
SELECT T2.Name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING COUNT(T1.Course_ID) >= 2	course_teach
SELECT T2.Name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T1.Teacher_ID HAVING COUNT(T1.Course_ID) >= 2	course_teach
SELECT T2.Name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID LEFT JOIN course AS T3 ON T1.Course_ID = T3.Course_ID WHERE T3.Course_ID IS NULL	course_teach
SELECT T2.Name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID LEFT JOIN course AS T3 ON T1.Course_ID = T3.Course_ID WHERE T3.Course_ID IS NULL	course_teach
SELECT COUNT(*) FROM visitor WHERE Age < 30	museum_visit
SELECT Name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC	museum_visit
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4	museum_visit
SELECT T1.Name, T1.Level_of_membership FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T1.Level_of_membership > 4 ORDER BY T1.Age DESC	museum_visit
SELECT T1.Museum_ID, T1.Name FROM museum AS T1 ORDER BY T1.Num_of_Staff DESC LIMIT 1	museum_visit
SELECT AVG(`Num_of_Staff`) FROM `museum` WHERE `Open_Year` < 2009	museum_visit
SELECT `Open_Year`, `Num_of_Staff` FROM `museum` WHERE `Name` = 'Plaza Museum'	museum_visit
SELECT T1.Name FROM museum AS T1 INNER JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Open_Year > 2010 AND T1.Num_of_Staff > ( SELECT MIN(T1.Num_of_Staff) FROM museum AS T1 INNER JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T1.Open_Year > 2010 )	museum_visit
SELECT T2.ID, T2.Name, T2.Age FROM visit AS T1 INNER JOIN visitor AS T2 ON T1.visitor_ID = T2.ID GROUP BY T1.visitor_ID HAVING COUNT(T1.visitor_ID) > 1	museum_visit
SELECT T1.ID, T1.Name, T1.Level_of_membership FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.ID = T2.visitor_ID ORDER BY T2.Total_spent DESC LIMIT 1	museum_visit
SELECT T1.Museum_ID, T1.Name FROM museum AS T1 INNER JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T1.Museum_ID ORDER BY SUM(T2.Num_of_Ticket) DESC LIMIT 1	museum_visit
SELECT T1.Name FROM museum AS T1 LEFT JOIN visit AS T2 ON T1.Museum_ID = T2.Museum_ID WHERE T2.Museum_ID IS NULL	museum_visit
SELECT T1.Name, T1.Age FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.ID = T2.visitor_ID ORDER BY T2.Num_of_Ticket DESC LIMIT 1	museum_visit
SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit	museum_visit
SELECT SUM(T2.Total_spent) FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.ID = T2.visitor_ID WHERE T1.Level_of_membership = 1	museum_visit
SELECT T1.Name FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.ID = T2.visitor_ID INNER JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID WHERE T3.Open_Year < 2009 OR T3.Open_Year > 2011 GROUP BY T1.Name HAVING COUNT(DISTINCT T3.Museum_ID) > 1	museum_visit
SELECT COUNT(T1.ID) FROM visitor AS T1 LEFT JOIN visit AS T2 ON T1.ID = T2.visitor_ID LEFT JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID WHERE T3.Open_Year <= 2010	museum_visit
SELECT COUNT(Museum_ID) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008	museum_visit
SELECT COUNT(player_id) FROM players	wta_1
SELECT COUNT(player_id) FROM players	wta_1
SELECT COUNT(match_num) FROM matches	wta_1
SELECT COUNT(match_num) FROM matches	wta_1
SELECT T1.first_name, T1.birth_date FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T1.country_code = 'USA' GROUP BY T1.first_name, T1.birth_date	wta_1
SELECT T1.first_name, T1.birth_date FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T2.ranking_points > 1000 AND T1.country_code = 'USA' ORDER BY T2.ranking_points DESC	wta_1
SELECT AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age FROM matches	wta_1
SELECT AVG(winner_age) AS avg_winner_age, AVG(loser_age) AS avg_loser_age FROM matches	wta_1
SELECT AVG(winner_rank) FROM matches	wta_1
SELECT AVG(winner_rank) FROM matches	wta_1
SELECT MAX(T1.ranking) FROM rankings AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.loser_id	wta_1
SELECT MAX(ranking) FROM rankings AS r INNER JOIN matches AS m ON r.player_id = m.loser_id	wta_1
SELECT COUNT(DISTINCT T1.country_code) FROM players AS T1	wta_1
SELECT COUNT(DISTINCT T2.country_code) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id INNER JOIN `matches` AS T3 ON T1.player_id = T3.winner_id UNION SELECT COUNT(DISTINCT T2.country_code) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id INNER JOIN `matches` AS T3 ON T1.player_id = T3.loser	wta_1
SELECT COUNT(DISTINCT loser_name) FROM matches	wta_1
SELECT COUNT(DISTINCT loser_name) FROM matches	wta_1
SELECT T1.tourney_name FROM matches AS T1 INNER JOIN tourneys AS T2 ON T1.tourney_id = T2.tourney_id GROUP BY T1.tourney_id HAVING COUNT(T1.match_num) > 10	wta_1
SELECT T2.tourney_name FROM matches AS T1 INNER JOIN tournaments AS T2 ON T1.tourney_id = T2.tourney_id GROUP BY T1.tourney_id HAVING COUNT(T1.match_num) > 10	wta_1
SELECT DISTINCT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_date >= '2013-01-01' AND T2.tourney_date <= '2013-12-31' INTERSECT SELECT DISTINCT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE	wta_1
SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year IN (2013, 2016) GROUP BY T1.first_name, T1.last_name HAVING COUNT(DISTINCT T2.year) = 2	wta_1
SELECT COUNT(match_num) FROM matches WHERE YEAR(tourney_date) IN (2013, 2016) 	wta_1
SELECT COUNT(DISTINCT match_num) FROM matches WHERE YEAR(tourney_date) IN (2013, 2016)	wta_1
SELECT T1.country_code, T1.first_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open' INTERSECT SELECT T1.country_code, T	wta_1
SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open' INTERSECT SELECT T1.first_name, T	wta_1
SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.ranking_date DESC LIMIT 1	wta_1
SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.ranking_points DESC LIMIT 1	wta_1
SELECT T1.first_name, T1.last_name FROM players AS T1 ORDER BY T1.birth_date ASC	wta_1
SELECT T1.first_name, T1.last_name FROM players AS T1 ORDER BY T1.birth_date ASC	wta_1
SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T1.hand = 'L' ORDER BY T1.birth_date ASC	wta_1
SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T1.hand = 'L' ORDER BY T1.birth_date ASC	wta_1
SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1	wta_1
SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1	wta_1
SELECT year FROM matches GROUP BY year ORDER BY COUNT(year) DESC LIMIT 1	wta_1
SELECT year FROM matches GROUP BY year ORDER BY COUNT(year) DESC LIMIT 1	wta_1
SELECT T1.first_name, T1.last_name, T2.ranking_points FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.ranking_points DESC LIMIT 1	wta_1
SELECT T1.first_name, T1.last_name, T2.ranking_points FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.ranking_points DESC LIMIT 1	wta_1
SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id INNER JOIN matches AS T3 ON T1.player_id = T3.winner_id WHERE T3.tourney_name = 'Australian Open' AND T2.ranking_points =  SELECT MAX(T2.ranking_points) FROM rankings AS T2 INNER JOIN matches AS T3 ON T2.player_id = T3.winner_id WHERE T3	wta_1
SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id INNER JOIN matches AS T3 ON T1.player_id = T3.winner_id WHERE T3.tourney_name = 'Australian Open' ORDER BY T2.ranking_points DESC LIMIT 1	wta_1
SELECT T1.first_name, T1.last_name, T2.first_name, T2.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.loser_id ORDER BY T2.minutes DESC LIMIT 1 UNION SELECT T1.first_name, T1.last_name, T2.first_name, T2.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.minutes	wta_1
SELECT T1.first_name, T1.last_name, T2.first_name, T2.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.minutes DESC LIMIT 1	wta_1
SELECT AVG(r.ranking), p.first_name FROM rankings r JOIN players p ON r.player_id = p.player_id GROUP BY p.first_name	wta_1
SELECT T1.first_name, AVG(T2.ranking) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name	wta_1
SELECT T1.first_name, T1.player_id, SUM(T2.ranking_points) AS total_ranking_points FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id, T1.first_name	wta_1
SELECT T1.first_name, SUM(T2.ranking_points) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name	wta_1
SELECT T1.country_code, COUNT(T1.player_id) FROM players AS T1 GROUP BY T1.country_code	wta_1
SELECT COUNT(*),  `country_code` FROM `players` GROUP BY `country_code`	wta_1
SELECT T1.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.country_code ORDER BY COUNT(T1.player_id) DESC LIMIT 1	wta_1
SELECT T1.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.country_code ORDER BY COUNT(T1.player_id) DESC LIMIT 1	wta_1
SELECT T2.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T2.country_code HAVING COUNT(T1.player_id) > 50	wta_1
SELECT T1.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.country_code HAVING COUNT(T1.player_id) > 50	wta_1
SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date	wta_1
SELECT ranking_date, COUNT(tours) AS total_tours	wta_1
SELECT 	wta_1
SELECT 	wta_1
SELECT T1.first_name, T1.last_name, T2.ranking FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T1.birth_date DESC LIMIT 3	wta_1
SELECT T1.first_name, T1.last_name, T2.ranking FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T1.birth_date DESC LIMIT 3	wta_1
SELECT COUNT(DISTINCT T1.winner_name) FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T2.hand = 'L' AND T1.tourney_name = 'WTA Championships'	wta_1
SELECT COUNT(*) FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T1.hand = 'L' AND T2.tourney_name = 'WTA Championships'	wta_1
SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id WHERE T2.ranking_points = ( SELECT MAX(T2.ranking_points) FROM rankings AS T2 INNER JOIN players AS T1 ON T2.player_id = T1.player_id ) AND T2.player_id =  SELECT T2.player_id FROM rankings AS T2 INNER JOIN players AS T1 ON T2	wta_1
SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1	wta_1
SELECT `hand`, COUNT(`player_id`) FROM `players` GROUP BY `hand`	wta_1
SELECT `hand`, COUNT(`player_id`) FROM `players` GROUP BY `hand`	wta_1
SELECT COUNT(T1.id) FROM ship AS T1 INNER JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T2.note = 'Captured' AND T1.disposition_of_ship = 'Captured'	battle_death
SELECT name, tonnage FROM ship ORDER BY name DESC	battle_death
SELECT T1.name, T1.date, T1.result FROM battle AS T1	battle_death
SELECT MAX(killed), MIN(killed) FROM death	battle_death
SELECT AVG(injured) FROM death	battle_death
SELECT T2.note, T2.killed, T2.injured FROM battle AS T1 INNER JOIN death AS T2 ON T1.id = T2.caused_by_ship_id INNER JOIN ship AS T3 ON T2.caused_by_ship_id = T3.id WHERE T3.tonnage = 't'	battle_death
SELECT T1.name, T1.result FROM battle AS T1 INNER JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.bulgarian_commander!= 'Boril'	battle_death
SELECT DISTINCT T1.id, T1.name FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'	battle_death
SELECT T1.id, T1.name FROM battle AS T1 INNER JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id, T1.name HAVING SUM(T2.killed) > 10	battle_death
SELECT T1.id, T1.name FROM ship AS T1 INNER JOIN death AS T2 ON T1.id = T2.caused_by_ship_id GROUP BY T1.id, T1.name ORDER BY SUM(T2.killed) + SUM(T2.injured) DESC LIMIT 1	battle_death
SELECT DISTINCT T1.name FROM battle AS T1 INNER JOIN death AS T2 ON T1.id = T2.caused_by_ship_id INNER JOIN ship AS T3 ON T2.caused_by_ship_id = T3.lost_in_battle WHERE T1.bulgarian_commander = 'Kaloyan' AND T1.latin_commander = 'Baldwin I'	battle_death
SELECT COUNT(DISTINCT result) FROM battle	battle_death
SELECT COUNT(T1.id) FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.tonnage = 225 AND T2.disposition_of_ship ='sunk' GROUP BY T1.id HAVING COUNT(T1.id) = 0	battle_death
SELECT T1.name, T1.date FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' OR T2.name = 'HMS Atalanta'	battle_death
SELECT T1.name, T1.result, T1.bulgarian_commander FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel' AND T2.disposition_of_ship ='sunk' GROUP BY T1.name, T1.result, T1.bulgarian_commander HAVING COUNT(T2.id) = 0	battle_death
SELECT T2.note FROM battle AS T1 INNER JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T2.note LIKE '%East%'	battle_death
SELECT line_1, line_2 FROM Addresses	student_transcripts_tracking
SELECT line_1, line_2 FROM Addresses	student_transcripts_tracking
SELECT COUNT(course_id) FROM Courses	student_transcripts_tracking
SELECT COUNT(course_id) FROM Courses	student_transcripts_tracking
SELECT T1.course_description FROM Courses AS T1 INNER JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id WHERE T2.student_enrolment_id IN ( SELECT student_enrolment_id FROM Student_Enrolment WHERE degree_program_id IN ( SELECT degree_program_id FROM Degree_Programs WHERE department_id IN ( SELECT department_id FROM Departments WHERE department_name = 'Math' ) ) ) AND T1.course_name = 'Math Course' LIMIT	student_transcripts_tracking
SELECT T1.course_description FROM Courses AS T1 INNER JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id INNER JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id INNER JOIN Degree_Programs AS T4 ON T3.degree_program_id = T4.degree_program_id INNER JOIN Departments AS T5 ON T4.department_id = T5.department_id WHERE T1.course_name =	student_transcripts_tracking
SELECT T1.zip_postcode FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.current_address_id WHERE T2.city = 'Port Chelsea'	student_transcripts_tracking
SELECT T1.zip_postcode FROM Addresses AS T1 INNER JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Port Chelsea' LIMIT 1	student_transcripts_tracking
SELECT T1.department_name, T1.department_id FROM Departments AS T1 INNER JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(T2.degree_program_id) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.department_name, T1.department_id FROM Departments AS T1 INNER JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(T2.degree_program_id) DESC LIMIT 1	student_transcripts_tracking
SELECT COUNT(DISTINCT T1.department_id) FROM Degree_Programs AS T1 INNER JOIN Departments AS T2 ON T1.department_id = T2.department_id	student_transcripts_tracking
SELECT COUNT(DISTINCT T1.department_id) FROM Degree_Programs AS T1 INNER JOIN Departments AS T2 ON T1.department_id = T2.department_id	student_transcripts_tracking
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs	student_transcripts_tracking
SELECT COUNT(DISTINCT T1.degree_summary_name) FROM Degree_Programs AS T1 INNER JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Engineering'	student_transcripts_tracking
SELECT COUNT(DISTINCT T1.degree_summary_name) FROM Degree_Programs AS T1 INNER JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Engineering'	student_transcripts_tracking
SELECT T2.section_name, T2.section_description FROM Sections AS T1 INNER JOIN Sections AS T2 ON T1.section_id = T2.section_id INNER JOIN Sections AS T3 ON T1.section_id = T3.section_id INNER JOIN Sections AS T4 ON T1.section_id = T4.section_id INNER JOIN Sections AS T5 ON T1.section_id = T5.section_id INNER JOIN Sections AS T6 ON T1.section_id = T6.section_id INNER JOIN Sections AS T	student_transcripts_tracking
SELECT T1.section_name, T1.section_description FROM Sections AS T1	student_transcripts_tracking
SELECT T1.course_id, T1.course_name FROM Courses AS T1 INNER JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id, T1.course_name HAVING COUNT(T2.section_id) <= 2	student_transcripts_tracking
SELECT T1.course_id, T1.course_name FROM Courses AS T1 INNER JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id, T1.course_name HAVING COUNT(T2.section_id) < 2	student_transcripts_tracking
SELECT section_name FROM Sections ORDER BY section_name DESC	student_transcripts_tracking
SELECT section_name FROM Sections ORDER BY section_name DESC	student_transcripts_tracking
SELECT T1.semester_name, T1.semester_id FROM Semesters AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.semester_name, T1.semester_id FROM Semesters AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.department_description FROM Departments AS T1 INNER JOIN ( SELECT department_id FROM Departments WHERE department_name LIKE '%the computer%' ) AS T2 ON T1.department_id = T2.department_id	student_transcripts_tracking
SELECT T2.department_description FROM Departments AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.department_id = T2.degree_program_id INNER JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id INNER JOIN Sections AS T4 ON T3.course_id = T4.course_id INNER JOIN Courses AS T5 ON T4.course_id = T5.course_id WHERE T5.course_name LIKE '%computer%'	student_transcripts_tracking
SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id INNER JOIN Degree_Programs AS T4 ON T2.degree_program_id = T4.degree_program_id INNER JOIN Semesters AS T5	student_transcripts_tracking
SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id INNER JOIN Degree_Programs AS T4 ON T2.degree_program_id = T4.degree_program_id INNER JOIN Semesters AS T5	student_transcripts_tracking
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor' GROUP BY T1.first_name, T1.middle_name, T1.last_name	student_transcripts_tracking
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelors'	student_transcripts_tracking
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY COUNT(T1.degree_program_id) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.degree_summary_name FROM Degree_Programs AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id INNER JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.degree_summary_name ORDER BY COUNT(T3.student_course_id) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(T1.degree_program_id) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT 	student_transcripts_tracking
SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(T3.student_enrolment_id) FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.student_id ORDER BY COUNT(T3.student_enrolment_id)	student_transcripts_tracking
SELECT T2.semester_name FROM Student_Enrolment AS T1 INNER JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id WHERE T1.student_id IS NULL	student_transcripts_tracking
SELECT T1.semester_name FROM Semesters AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.student_id IS NULL	student_transcripts_tracking
SELECT T1.course_name FROM Courses AS T1 INNER JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id INNER JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_name	student_transcripts_tracking
SELECT T1.course_name FROM Courses AS T1 INNER JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id INNER JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_name HAVING COUNT(T3.student_id) > 0	student_transcripts_tracking
SELECT T1.course_name FROM Courses AS T1 INNER JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id INNER JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_name ORDER BY COUNT(T3.student_enrolment_id) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.course_name FROM Courses AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.course_id = T2.degree_program_id INNER JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id GROUP BY T1.course_name ORDER BY COUNT(T3.student_course_id) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.last_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' EXCEPT SELECT T1.last_name FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name IS NOT NULL	student_transcripts_tracking
SELECT T1.last_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' EXCEPT SELECT T1.last_name FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.department_id IS NOT	student_transcripts_tracking
SELECT T1.transcript_id, T1.transcript_date FROM Transcripts AS T1 INNER JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(T2.student_course_id) >= 2	student_transcripts_tracking
SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 INNER JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(T2.student_course_id) >= 2	student_transcripts_tracking
SELECT T1.cell_mobile_number FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T1.first_name = 'Timmothy' AND T1.last_name = 'Ward'	student_transcripts_tracking
SELECT T1.cell_mobile_number FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T1.first_name = 'Timmothy' AND T1.last_name = 'Ward'	student_transcripts_tracking
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 ORDER BY T1.date_first_registered ASC LIMIT 1	student_transcripts_tracking
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 ORDER BY T1.date_first_registered ASC LIMIT 1	student_transcripts_tracking
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id INNER JOIN Courses AS T4 ON T3.course_id = T4.course_id INNER JOIN Degree_Programs AS T5 ON T2.degree_program_id = T	student_transcripts_tracking
SELECT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN Student_Enrolment_Courses AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id INNER JOIN Transcripts AS T4 ON T3.student_course_id = T4.transcript_id INNER JOIN Transcript_Contents AS T5 ON T4.transcript	student_transcripts_tracking
SELECT T1.first_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id INNER JOIN Addresses AS T3 ON T1.current_address_id = T3.address_id WHERE T2.address_id!= T3.address_id	student_transcripts_tracking
SELECT T1.first_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id INNER JOIN Addresses AS T3 ON T1.current_address_id = T3.address_id WHERE T2.line_1!= T3.line_1 OR T2.line_2!= T3.line_2 OR T2.line_3!= T3.line_3 OR T2.city!= T3.city OR T2.zip_postcode!= T3.zip	student_transcripts_tracking
SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country, T1.other_address_details FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1	student_transcripts_tracking
SELECT 	student_transcripts_tracking
SELECT AVG(transcript_date) FROM Transcripts	student_transcripts_tracking
SELECT T1.transcript_date FROM Transcripts AS T1 INNER JOIN Transcript_Contents AS T1_1 ON T1.transcript_id = T1_1.transcript_id ORDER BY T1.transcript_date ASC LIMIT 1	student_transcripts_tracking
SELECT MIN(transcript_date) AS earliest_transcript_date, other_details FROM Transcripts	student_transcripts_tracking
SELECT COUNT(*) FROM Transcripts WHERE transcript_date IS NOT NULL	student_transcripts_tracking
SELECT COUNT(*) FROM Transcripts	student_transcripts_tracking
SELECT MAX(transcript_date) FROM Transcripts	student_transcripts_tracking
SELECT MAX(transcript_date) FROM Transcripts	student_transcripts_tracking
SELECT 	student_transcripts_tracking
SELECT course_id, COUNT(DISTINCT transcript_id) AS max_transcript_count	student_transcripts_tracking
SELECT T1.transcript_date FROM Transcripts AS T1 INNER JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_date ORDER BY COUNT(T1.transcript_id) ASC LIMIT 1	student_transcripts_tracking
SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 INNER JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY COUNT(T2.student_course_id) ASC LIMIT 1	student_transcripts_tracking
SELECT T1.semester_name FROM Semesters AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id INNER JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Master' INTERSECT SELECT T1.semester_name FROM Semesters AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester	student_transcripts_tracking
SELECT T1.semester_id FROM Semesters AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id INNER JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Masters' INTERSECT SELECT T1.semester_id FROM Semesters AS T1 INNER JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.sem	student_transcripts_tracking
SELECT COUNT(DISTINCT T1.current_address_id) FROM Students AS T1	student_transcripts_tracking
SELECT DISTINCT T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country, T1.other_address_details FROM Addresses AS T1 INNER JOIN Students AS T2 ON T1.address_id = T2.current_address_id UNION SELECT DISTINCT T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T	student_transcripts_tracking
SELECT first_name, middle_name, last_name FROM Students ORDER BY first_name DESC, middle_name DESC, last_name DESC	student_transcripts_tracking
SELECT other_student_details FROM Students ORDER BY last_name DESC	student_transcripts_tracking
SELECT T1.section_name FROM Sections AS T1 INNER JOIN Student_Enrolment_Courses AS T2 ON T1.section_id = T2.course_id INNER JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id INNER JOIN Students AS T4 ON T3.student_id = T4.student_id WHERE T4.first_name = 'h' AND T4.middle_name = 'h' AND T4.last_name = 'h	student_transcripts_tracking
SELECT T1.section_description FROM Sections AS T1 INNER JOIN Student_Enrolment_Courses AS T2 ON T1.section_id = T2.course_id INNER JOIN Student_Enrolment AS T3 ON T2.student_enrolment_id = T3.student_enrolment_id INNER JOIN Students AS T4 ON T3.student_id = T4.student_id WHERE T1.section_name = 'h?'	student_transcripts_tracking
SELECT T1.first_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582'	student_transcripts_tracking
SELECT T1.first_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582' UNION SELECT T1.first_name FROM Students AS T1 INNER JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '097001	student_transcripts_tracking
SELECT `Title` FROM `Cartoon` ORDER BY `Title` ASC	tvshow
SELECT `Title` FROM `Cartoon` ORDER BY `Title` ASC	tvshow
SELECT `Title` FROM `Cartoon` WHERE `Directed_by` = "Ben Jones"	tvshow
SELECT T1.Title FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Content = 'Cartoon' AND T1.Directed_by = 'Ben Jones'	tvshow
SELECT COUNT(T1.id) FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English' AND T1.Written_by = 'Joseph Kuhr'	tvshow
SELECT COUNT(T1.id) FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.Language = 'English' AND T1.Written_by = 'Joseph Kuhr'	tvshow
SELECT T2.Title, T2.Directed_by FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel ORDER BY T2.`Original_air_date` ASC	tvshow
SELECT T1.Title, T1.Directed_by FROM Cartoon AS T1 ORDER BY T1.`Original_air_date` ASC	tvshow
SELECT T2.Title FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Brandon Vietti'	tvshow
SELECT T1.Title FROM Cartoon AS T1 INNER JOIN `TV_Channel` AS T2 ON T1.Channel = T2.id WHERE T1.Directed_by = 'Ben Jones' OR T1.Directed_by = 'Brandon Vietti' UNION SELECT T1.Title FROM Cartoon AS T1 INNER JOIN `TV_Channel` AS T2 ON T1.Channel = T2.id WHERE T1.Directed_by = 'Ben Jones' OR T1.Directed_by = 'Brandon Vietti'	tvshow
SELECT `Country`, COUNT(`id`) FROM `TV_Channel` GROUP BY `Country` ORDER BY COUNT(`id`) DESC LIMIT 1	tvshow
SELECT T1.Country, COUNT(T1.id) FROM TV_Channel AS T1 GROUP BY T1.Country ORDER BY COUNT(T1.id) DESC LIMIT 1	tvshow
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel	tvshow
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel	tvshow
SELECT T1.Content FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Series_name = 'Sky Radio'	tvshow
SELECT T1.Content FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Series_name = 'Sky Radio'	tvshow
SELECT T1.Package_Option FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Series_name = 'Sky Radio'	tvshow
SELECT T1.Package_Option FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Series_name = 'Sky Radio'	tvshow
SELECT COUNT(id) FROM TV_Channel WHERE Language = 'English'	tvshow
SELECT COUNT(TV_Channel.id) FROM TV_Channel WHERE TV_Channel.Language = 'English'	tvshow
SELECT Language, COUNT(id) FROM TV_Channel GROUP BY Language ORDER BY COUNT(id) ASC LIMIT 1	tvshow
SELECT T2.Language, COUNT(T1.id) FROM TV_Channel AS T1 INNER JOIN `TV_Channel` AS T2 ON T1.Language = T2.Language GROUP BY T2.Language ORDER BY COUNT(T1.id) ASC LIMIT 1	tvshow
SELECT T1.Language, COUNT(T1.id) FROM TV_Channel AS T1 GROUP BY T1.Language	tvshow
SELECT COUNT(TV_Channel.id),  TV_Channel.Language FROM TV_Channel GROUP BY TV_Channel.Language	tvshow
SELECT T1.series_name FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'	tvshow
SELECT T1.series_name FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle'	tvshow
SELECT T2.Title FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'	tvshow
SELECT T2.Title FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'	tvshow
SELECT T2.Episode FROM TV_series AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id ORDER BY T1.Rating DESC	tvshow
SELECT T1.Episode FROM TV_series AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id ORDER BY T1.`18_49_Rating_Share` DESC	tvshow
SELECT T1.Episode, T1.Rating FROM TV_series AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id ORDER BY T1.Rating DESC LIMIT 3	tvshow
SELECT TOP 3 Episode, Rating 	tvshow
SELECT MIN(Share), MAX(Share) FROM TV_series	tvshow
SELECT MAX(Share), MIN(Share) FROM TV_series	tvshow
SELECT T2.Air_Date FROM TV_series AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime'	tvshow
SELECT T2.Air_Date FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'	tvshow
SELECT T2.Weekly_Rank FROM TV_series AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime'	tvshow
SELECT T2.Weekly_Rank FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'	tvshow
SELECT T1.series_name FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'	tvshow
SELECT T1.series_name FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'	tvshow
SELECT T2.Episode FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'	tvshow
SELECT T2.Episode FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio'	tvshow
SELECT COUNT(T1.id), T2.Directed_by FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.id = T2.id GROUP BY T2.Directed_by	tvshow
SELECT COUNT(T1.id), T2.Directed_by FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id GROUP BY T2.Directed_by	tvshow
SELECT T1.Title, T1.Channel FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id ORDER BY T1.Original_air_date DESC LIMIT 1	tvshow
SELECT T1.Title, T1.Channel FROM Cartoon AS T1 INNER JOIN TV_Channel AS T2 ON T1.Channel = T2.id ORDER BY T1.Original_air_date DESC LIMIT 1	tvshow
SELECT T1.Package_Option, T2.series_name FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV = 1	tvshow
SELECT T1.Package_Option, T2.series_name FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Hight_definition_TV = 1	tvshow
SELECT T1.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey' GROUP BY T1.Country	tvshow
SELECT T1.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey' GROUP BY T1.Country	tvshow
SELECT T1.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey' GROUP BY T1.Country HAVING COUNT(T2.id) = 0	tvshow
SELECT T1.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey' GROUP BY T1.Country HAVING COUNT(T2.id) = 0	tvshow
SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Michael Chang' GROUP BY T1.series_name, T1.Country	tvshow
SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' OR T2.Directed_by = 'Michael Chang'	tvshow
SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM TV_Channel AS T1 INNER JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.Language!= 'English'	tvshow
SELECT TV_Channel.id, TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country 	tvshow
SELECT T1.id FROM TV_Channel AS T1 INNER JOIN ( SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(Country) > 2 ) AS T2 ON T1.Country = T2.Country	tvshow
SELECT T1.id FROM TV_Channel AS T1 INNER JOIN ( SELECT id, COUNT(id) AS cnt FROM TV_Channel GROUP BY id ) AS T2 ON T1.id = T2.id GROUP BY T1.id HAVING COUNT(T1.id) > 2	tvshow
SELECT TV_Channel.id 	tvshow
SELECT T1.id FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by!= 'Ben Jones' GROUP BY T1.id HAVING COUNT(T2.id) = 0	tvshow
SELECT T1.`Package_Option` FROM `TV_Channel` AS T1 INNER JOIN `Cartoon` AS T2 ON T1.`id` = T2.`Channel` WHERE T2.`Directed_by`!= 'Ben Jones'	tvshow
SELECT T1.Package_Option FROM TV_Channel AS T1 INNER JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by!= 'Ben Jones' GROUP BY T1.Package_Option	tvshow
SELECT COUNT(Poker_Player_ID) FROM poker_player	poker_player
SELECT COUNT(T1.Poker_Player_ID) FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID	poker_player
SELECT T2.Earnings FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC	poker_player
SELECT T2.Earnings FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC	poker_player
SELECT T1.Final_Table_Made, T1.Best_Finish FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID	poker_player
SELECT T1.Poker_Player_ID, T1.Final_Table_Made, T1.Best_Finish FROM poker_player AS T1	poker_player
SELECT AVG(T2.Earnings) FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID	poker_player
SELECT AVG(T1.Earnings) FROM poker_player AS T1	poker_player
SELECT T1.`Money_Rank` FROM `poker_player` AS T1 INNER JOIN `people` AS T2 ON T1.`People_ID` = T2.`People_ID` ORDER BY T1.`Earnings` DESC LIMIT 1	poker_player
SELECT T1.`Money_Rank` FROM `poker_player` AS T1 INNER JOIN `people` AS T2 ON T1.`People_ID` = T2.`People_ID` ORDER BY T1.`Earnings` DESC LIMIT 1	poker_player
SELECT MAX(T1.Final_Table_Made) FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings < 200000	poker_player
SELECT MAX(T1.Final_Table_Made) FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings < 200000	poker_player
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID	poker_player
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID	poker_player
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000	poker_player
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000	poker_player
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC	poker_player
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC	poker_player
SELECT T2.`Birth_Date` FROM `poker_player` AS T1 INNER JOIN `people` AS T2 ON T1.`People_ID` = T2.`People_ID` ORDER BY T1.`Earnings` ASC LIMIT 1	poker_player
SELECT T2.`Birth_Date` FROM `poker_player` AS T1 INNER JOIN `people` AS T2 ON T1.`People_ID` = T2.`People_ID` ORDER BY T1.`Earnings` ASC LIMIT 1	poker_player
SELECT T1.`Money_Rank` FROM `poker_player` AS T1 INNER JOIN `people` AS T2 ON T1.`People_ID` = T2.`People_ID` ORDER BY T2.`Height` DESC LIMIT 1	poker_player
SELECT T1.`Money_Rank` FROM `poker_player` AS T1 INNER JOIN `people` AS T2 ON T1.`People_ID` = T2.`People_ID` ORDER BY T2.`Height` DESC LIMIT 1	poker_player
SELECT AVG(T1.Earnings) FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200	poker_player
SELECT AVG(T1.Earnings) FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200	poker_player
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC	poker_player
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC	poker_player
SELECT T2.Nationality, COUNT(T2.People_ID) FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID GROUP BY T2.Nationality	poker_player
SELECT `Nationality`, COUNT(`People_ID`) FROM `people` GROUP BY `Nationality`	poker_player
SELECT `Nationality` FROM `people` GROUP BY `Nationality` ORDER BY COUNT(`Nationality`) DESC LIMIT 1	poker_player
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1	poker_player
SELECT T1.Nationality FROM people AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID GROUP BY T1.Nationality HAVING COUNT(T1.People_ID) > 1	poker_player
SELECT T2.Nationality FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID GROUP BY T2.Nationality HAVING COUNT(T2.People_ID) >= 2	poker_player
SELECT T2.Name, T2.`Birth_Date` FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Name ASC	poker_player
SELECT T2.Name, T2.Birth_Date FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Name ASC	poker_player
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Nationality!= 'Russia'	poker_player
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Nationality!= 'Russia'	poker_player
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Poker_Player_ID IS NULL	poker_player
SELECT T2.Name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Poker_Player_ID IS NULL	poker_player
SELECT COUNT(DISTINCT `Nationality`) FROM `people`	poker_player
SELECT COUNT(DISTINCT Nationality) FROM people	poker_player
SELECT COUNT(state) FROM `AREA_CODE_STATE`	voter_1
SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 ORDER BY T1.contestant_name DESC	voter_1
SELECT T1.vote_id, T1.phone_number, T1.state FROM VOTES AS T1	voter_1
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE	voter_1
SELECT T1.created FROM VOTES AS T1 INNER JOIN AREA_CODE_STATE AS T2 ON T1.state = T2.area_code WHERE T2.state = 'CA' ORDER BY T1.created DESC LIMIT 1	voter_1
SELECT T2.contestant_name FROM VOTES AS T1 INNER JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name!= 'Jessie Alloway'	voter_1
SELECT DISTINCT T1.state, T2.created FROM VOTES AS T1 INNER JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number	voter_1
SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 INNER JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number, T1.contestant_name HAVING COUNT(T2.vote_id) >= 2	voter_1
SELECT T1.contestant_number, T1.contestant_name FROM CONTESTANTS AS T1 INNER JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number, T1.contestant_name ORDER BY COUNT(T2.vote_id) ASC LIMIT 1	voter_1
SELECT COUNT(*) FROM VOTES AS T1 INNER JOIN AREA_CODE_STATE AS T2 ON T1.state = T2.area_code WHERE T2.state IN ('NY', 'CA')	voter_1
SELECT COUNT(T1.contestant_number) FROM CONTESTANTS AS T1 LEFT JOIN VOTES AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_number IS NULL	voter_1
SELECT T2.area_code FROM VOTES AS T1 INNER JOIN AREA_CODE_STATE AS T2 ON T1.state = T2.state GROUP BY T2.area_code ORDER BY COUNT(T1.vote_id) DESC LIMIT 1	voter_1
SELECT T1.created, T1.state, T1.phone_number FROM VOTES AS T1 INNER JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' ORDER BY T1.created DESC	voter_1
SELECT T1.area_code FROM VOTES AS T1 INNER JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T1.area_code FROM VOTES AS T1 INNER JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name = 'Kelly Clauss' INTERSECT SELECT	voter_1
SELECT T2.contestant_name FROM VOTES AS T1 INNER JOIN CONTESTANTS AS T2 ON T1.contestant_number = T2.contestant_number WHERE T2.contestant_name LIKE '%Al%'	voter_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 1 AND T1.IndepYear > 1950	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' AND T1.IndepYear > 1950	world_1
SELECT COUNT(T1.Code) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic'	world_1
SELECT COUNT(T1.Code) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = 'Republic'	world_1
SELECT SUM(T2.SurfaceArea) FROM country AS T1 INNER JOIN country AS T2 ON T1.Code = T2.Code INNER JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T1.Region = 'Caribbean' AND T3.Language = 'English'	world_1
SELECT SUM(T2.SurfaceArea) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Carribean' AND T2.Language = 'English' AND T2.IsOfficial = 'T' AND T2.Percentage = 100	world_1
SELECT T2.Continent FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' AND T1.Percentage = 100 AND T2.Name = 'Anguilla'	world_1
SELECT T2.Continent FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Anguilla' AND T2.Language = 'English' AND T2.IsOfficial = 'T' AND T2.Percentage = 100	world_1
SELECT T2.Region FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Kabul'	world_1
SELECT T2.Region FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Name = 'Kabul'	world_1
SELECT T1.Language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba' ORDER BY T1.Percentage DESC LIMIT 1	world_1
SELECT T1.Language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba' AND T1.Percentage = ( SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = T2.Code ) ORDER BY T1.Percentage DESC LIMIT 1	world_1
SELECT T2.Population, T2.LifeExpectancy FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Portuguese' AND T2.Name = 'Brazil'	world_1
SELECT T1.Population, T1.LifeExpectancy FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Portuguese' AND T1.Name = 'Brazil'	world_1
SELECT T1.Region, T1.Population FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Portuguese' AND T1.Name = 'Angola'	world_1
SELECT T2.Region, T1.Population FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Angola' AND T2.Language = 'Portuguese'	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central'	world_1
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central'	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' AND T1.LifeExpectancy = ( SELECT MIN(T1.LifeExpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' )	world_1
SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code2 WHERE T2.Continent = 'Asia' AND T2.LifeExpectancy = ( SELECT MIN(T2.LifeExpectancy) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code2 WHERE T2.Continent = 'Asia' )	world_1
SELECT SUM(T1.Population), MAX(T1.GNP) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T1.Continent = 'Asia'	world_1
SELECT T1.Population, T2.GNP FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' ORDER BY T2.GNP DESC LIMIT 1	world_1
SELECT AVG(T2.LifeExpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Africa' AND T1.GovernmentForm = 'Republic'	world_1
SELECT AVG(T2.LifeExpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Africa' AND T1.GovernmentForm = 'Republic'	world_1
SELECT SUM(T2.SurfaceArea) FROM country AS T1 INNER JOIN country AS T2 ON T1.Code = T2.Code WHERE T1.Continent = 'Asia' AND T2.Continent = 'Europe'	world_1
SELECT SUM(T2.SurfaceArea) FROM country AS T1 INNER JOIN country AS T2 ON T1.Code = T2.Code INNER JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T1.Continent = 'Asia' OR T1.Continent = 'Europe' AND T3.Language = 'English'	world_1
SELECT T1.Population FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code INNER JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T1.District = 'Gelderland' AND T3.Language = 'Dutch' AND T3.IsOfficial = 'T' AND T3.Percentage = 100	world_1
SELECT SUM(T2.Population) FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN country AS T3 ON T2.CountryCode = T3.Code WHERE T1.District = 'Gelderland' AND T2.Language = 'Dutch' AND T3.Name = 'Netherlands'	world_1
SELECT AVG(T1.GNP), SUM(T1.Population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 1 AND T2.Percentage = 100 AND T1.GovernmentForm = 'Federal Republic'	world_1
SELECT AVG(T2.GNP), SUM(T2.Population) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' AND T2.Code2 = 'US'	world_1
SELECT COUNT(DISTINCT Language) FROM countrylanguage	world_1
SELECT COUNT(DISTINCT Language) FROM countrylanguage	world_1
SELECT COUNT(DISTINCT T2.GovernmentForm) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Africa' AND T2.Language = 'English' AND T2.IsOfficial = 'T'	world_1
SELECT COUNT(DISTINCT T2.GovernmentForm) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN country AS T3 ON T1.Code = T3.Code WHERE T1.Continent = 'Africa' AND T2.IsOfficial = 'T' ORDER BY T2.Percentage DESC LIMIT 1	world_1
SELECT COUNT(T1.Language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code2 WHERE T2.Name = 'Aruba' AND T1.IsOfficial = 'T' AND T1.Percentage = 100	world_1
SELECT COUNT(T1.Language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code2 WHERE T2.Name = 'Aruba' AND T1.IsOfficial = 1	world_1
SELECT COUNT(T1.Language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Afghanistan' AND T1.IsOfficial = 'T' 	world_1
SELECT COUNT(T1.Language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Afghanistan' AND T1.IsOfficial = 1	world_1
SELECT T3.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code INNER JOIN city AS T3 ON T2.Code = T3.CountryCode GROUP BY T3.Name ORDER BY COUNT(T1.Language) DESC LIMIT 1	world_1
SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T1.CountryCode ORDER BY COUNT(T1.Language) DESC LIMIT 1	world_1
SELECT T2.Continent FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Continent ORDER BY COUNT(DISTINCT T1.Language) DESC LIMIT 1	world_1
SELECT T2.Continent FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Continent ORDER BY COUNT(T1.Language) DESC LIMIT 1	world_1
SELECT COUNT(T1.CountryCode) FROM countrylanguage AS T1 INNER JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Language = 'English' AND T2.Language = 'Dutch' GROUP BY T1.CountryCode HAVING COUNT(T1.CountryCode) > 1	world_1
SELECT SUM(CASE WHEN T2.Language = 'English' THEN 1 ELSE 0 END) + SUM(CASE WHEN T2.Language = 'Dutch' THEN 1 ELSE 0 END) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Percentage > 50	world_1
SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' INTERSECT SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'French' INTERSECT SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1	world_1
SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' INTERSECT SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'French' INTERSECT SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' INTERSECT SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' INTERSECT SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'French' INTERSECT SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2	world_1
SELECT COUNT(DISTINCT T2.Continent) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Chinese'	world_1
SELECT COUNT(T1.Language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia' AND T1.Language = 'Chinese'	world_1
SELECT DISTINCT T2.Region FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language IN ('English', 'Dutch')	world_1
SELECT T2.Region FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Dutch' OR T1.Language = 'English'	world_1
SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language IN ('English', 'Dutch') AND T1.IsOfficial = 1	world_1
SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language IN ('English', 'Dutch') AND T1.IsOfficial = 1	world_1
SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' ORDER BY T2.Percentage DESC LIMIT 1	world_1
SELECT T2.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' GROUP BY T2.Language ORDER BY COUNT(T2.Language) DESC LIMIT 1	world_1
SELECT T1.Language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = 'Republic' GROUP BY T1.Language HAVING COUNT(T1.CountryCode) = 1	world_1
SELECT T1.Language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = 'Republic' GROUP BY T1.Language HAVING COUNT(T1.CountryCode) = 1	world_1
SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN city AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Language = 'English' ORDER BY T2.Population DESC LIMIT 1	world_1
SELECT T1.Name, T1.Population FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = 'English' ORDER BY T1.Population DESC LIMIT 1	world_1
SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' AND T1.SurfaceArea = ( SELECT MAX(T3.SurfaceArea) FROM country AS T3 WHERE T3.Continent = 'Asia' ) 	world_1
SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' ORDER BY T1.SurfaceArea DESC LIMIT 1	world_1
SELECT AVG(T2.LifeExpectancy) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' AND T1.IsOfficial = 0	world_1
SELECT AVG(T2.LifeExpectancy) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' AND T1.IsOfficial = 'N' 	world_1
SELECT SUM(T2.Population) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language!= 'English'	world_1
SELECT COUNT(T1.Population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' EXCEPT SELECT COUNT(T1.Population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' AND T2.Percentage = 100	world_1
SELECT T3.Language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN country AS T3 ON T2.CountryCode = T3.Code WHERE T1.HeadOfState = 'Beatrix' AND T2.IsOfficial = 1	world_1
SELECT T1.Language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.HeadOfState = 'Beatrix' AND T1.IsOfficial = 1	world_1
SELECT COUNT(DISTINCT T2.Language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear < 1930 AND T2.IsOfficial = 1	world_1
SELECT COUNT(DISTINCT T2.Language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.IndepYear < 1930 AND T2.IsOfficial = 1	world_1
SELECT T1.Code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T1.SurfaceArea > ( SELECT MAX(T3.SurfaceArea) FROM country AS T3 INNER JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.Language = 'English' AND T3.Continent = 'Europe' )	world_1
SELECT Code FROM country WHERE SurfaceArea > ( SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe' )	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Africa' AND T1.Population < ( SELECT MAX(T3.Population) FROM country AS T3 INNER JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T3.Continent = 'Asia' )	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Africa' AND T1.Population < ( SELECT MAX(T3.Population) FROM country AS T3 INNER JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T3.Continent = 'Asia' )	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' AND T1.Population > ( SELECT MAX(T3.Population) FROM country AS T3 INNER JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T3.Continent = 'Africa' )	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' AND T1.Population > ( SELECT MAX(T3.Population) FROM country AS T3 INNER JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T3.Continent = 'Africa' )	world_1
SELECT T2.CountryCode FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' AND T1.IsOfficial = 'T' EXCEPT SELECT T2.CountryCode FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' AND T1.IsOfficial = 'T' UNION SELECT T2.CountryCode FROM countrylanguage AS T1	world_1
SELECT T2.Code FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' AND T1.IsOfficial = 'T' EXCEPT SELECT T2.Code FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' AND T1.IsOfficial = 'T' GROUP BY T2.Code HAVING COUNT(T2.Code) >	world_1
SELECT T2.CountryCode FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language <> 'English'	world_1
SELECT T2.Code FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' AND T1.IsOfficial = 'T' EXCEPT SELECT T2.Code FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' AND T1.IsOfficial = 'T' INTERSECT SELECT T2.Code FROM countrylanguage AS T1 INNER	world_1
SELECT T2.Code FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'English' AND T2.GovernmentForm!= 'Republic' AND T1.IsOfficial = 0	world_1
SELECT T1.Code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language <> 'English' AND T1.GovernmentForm <> 'Republic'	world_1
SELECT T1.Name FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code INNER JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T2.Continent = 'Europe' AND T3.Language = 'English' AND T3.IsOfficial = 0	world_1
SELECT T2.Name FROM countrylanguage AS T1 INNER JOIN city AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN country AS T3 ON T2.CountryCode = T3.Code WHERE T3.Continent = 'Europe' AND T1.Language = 'English' AND T1.IsOfficial = 0	world_1
SELECT DISTINCT T1.Name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN country AS T3 ON T2.CountryCode = T3.Code WHERE T3.Continent = 'Asia' AND T2.Language = 'Chinese' AND T2.IsOfficial = 1	world_1
SELECT T1.Name FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode INNER JOIN country AS T3 ON T2.CountryCode = T3.Code WHERE T3.Continent = 'Asia' AND T2.Language = 'Chinese' AND T2.IsOfficial = 'T' GROUP BY T1.Name	world_1
SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Population = ( SELECT MIN(T1.Population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode )	world_1
SELECT T1.Name, T1.IndepYear, T1.SurfaceArea FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Population = ( SELECT MIN(T1.Population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode )	world_1
SELECT T1.Population, T1.Name, T2.HeadOfState FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.SurfaceArea DESC LIMIT 1	world_1
SELECT T1.Name, T1.Population, T2.HeadOfState FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.SurfaceArea DESC LIMIT 1	world_1
SELECT T1.Name, COUNT(T2.Language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(T2.Language) >= 3	world_1
SELECT T1.Name, COUNT(T2.Language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(T2.Language) > 2	world_1
SELECT T2.District, COUNT(T1.ID) FROM city AS T1 INNER JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Population > ( SELECT AVG(T3.Population) FROM city AS T3 ) GROUP BY T2.District	world_1
SELECT T1.District, COUNT(T1.ID) FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code INNER JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode WHERE T1.Population > ( SELECT AVG(T1.Population) FROM city AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code INNER JOIN countrylanguage AS T3 ON T2.Code = T3.CountryCode ) GROUP BY	world_1
SELECT T1.LocalName, SUM(T2.Population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.LifeExpectancy > 72 GROUP BY T1.GovernmentForm	world_1
SELECT T1.GovernmentForm, SUM(T1.Population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.LifeExpectancy > 72 GROUP BY T1.GovernmentForm ORDER BY T1.GovernmentForm	world_1
SELECT AVG(T1.LifeExpectancy), SUM(T1.Population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent HAVING AVG(T1.LifeExpectancy) < 72	world_1
SELECT T2.Continent, SUM(T1.Population) AS TotalPopulation, AVG(T1.LifeExpectancy) AS AverageLifeExpectancy FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T2.Continent HAVING AVG(T1.LifeExpectancy) < 72	world_1
SELECT T1.Name, T1.SurfaceArea FROM country AS T1 ORDER BY T1.SurfaceArea DESC LIMIT 5	world_1
SELECT T1.Name, T1.SurfaceArea FROM country AS T1 ORDER BY T1.SurfaceArea DESC LIMIT 5	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T1_1 ON T1.Code = T1_1.CountryCode INNER JOIN countrylanguage AS T1_2 ON T1.Code = T1_2.CountryCode INNER JOIN countrylanguage AS T1_3 ON T1.Code = T1_3.CountryCode INNER JOIN countrylanguage AS T1_4 ON T1.Code = T1_4.CountryCode INNER JOIN countrylanguage AS T1_5 ON T	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.Population DESC LIMIT 3	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.Population ASC LIMIT 3	world_1
SELECT Name FROM country ORDER BY Population ASC LIMIT 3	world_1
SELECT COUNT(T1.Code) FROM country AS T1 INNER JOIN countrylanguage AS T1_1 ON T1.Code = T1_1.CountryCode WHERE T1_1.Language = 'English' AND T1.Continent = 'Asia' AND T1_1.IsOfficial = 'T'	world_1
SELECT COUNT(T1.Code) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Asia' AND T2.Language = 'English'	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Europe' AND T2.Percentage = 100 AND T1.Population = 80000	world_1
SELECT T1.Name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'Europe' AND T2.Percentage = 100 AND T1.Population = 80000	world_1
SELECT SUM(T2.Population),  AVG(T2.SurfaceArea) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN country AS T3 ON T1.Code = T3.Code WHERE T1.Continent = 'North America' AND T3.SurfaceArea > 3000	world_1
SELECT SUM(T1.Population), AVG(T1.SurfaceArea) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = 'North America' AND T1.SurfaceArea > 3000	world_1
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000	world_1
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000	world_1
SELECT T1.Language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T1.Language ORDER BY COUNT(T1.CountryCode) DESC LIMIT 1	world_1
SELECT T1.Language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code GROUP BY T1.Language ORDER BY COUNT(T1.CountryCode) DESC LIMIT 1	world_1
SELECT T1.Language, T1.Percentage FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code ORDER BY T1.Percentage DESC LIMIT 1	world_1
SELECT T1.Code, T3.Language, T3.Percentage FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode INNER JOIN countrylanguage AS T3 ON T1.Code = T3.CountryCode ORDER BY T3.Percentage DESC LIMIT 1	world_1
SELECT COUNT(T1.CountryCode) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Spanish' AND T1.Percentage = ( SELECT MAX(T3.Percentage) FROM countrylanguage AS T3 WHERE T3.Language = 'Spanish' )	world_1
SELECT COUNT(T1.CountryCode) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Spanish' AND T1.Percentage = 100	world_1
SELECT T1.Code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Spanish' ORDER BY T2.Percentage DESC LIMIT 1	world_1
SELECT T2.Code FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T1.Language = 'Spanish' AND T1.Percentage = 100	world_1
SELECT COUNT(Conductor_ID) FROM conductor	orchestra
SELECT COUNT(Conductor_ID) FROM conductor	orchestra
SELECT T1.Name FROM conductor AS T1 ORDER BY T1.Age ASC	orchestra
SELECT T2.Name FROM performance AS T1 INNER JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID ORDER BY T2.Age	orchestra
SELECT T1.Name FROM conductor AS T1 INNER JOIN performance AS T2 ON T1.Conductor_ID = T2.Orchestra_ID INNER JOIN show AS T3 ON T2.Performance_ID = T3.Show_ID WHERE T1.Nationality!= 'USA' GROUP BY T1.Name	orchestra
SELECT T1.Name FROM conductor AS T1 INNER JOIN performance AS T2 ON T1.Conductor_ID = T2.Orchestra_ID WHERE T1.Nationality!= 'USA'	orchestra
SELECT T2.Record_Company FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID ORDER BY T2.Year_of_Founded DESC	orchestra
SELECT T2.Record_Company FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID ORDER BY T2.Year_of_Founded DESC	orchestra
SELECT AVG(T1.Attendance) FROM show AS T1	orchestra
SELECT AVG(Attendance) FROM show	orchestra
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type!= "Live final"	orchestra
SELECT MAX(Share), MIN(Share) FROM performance WHERE Type!= "Live final"	orchestra
SELECT COUNT(DISTINCT Nationality) FROM conductor	orchestra
SELECT COUNT(DISTINCT Nationality) FROM conductor	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC	orchestra
SELECT T1.Name FROM conductor AS T1 INNER JOIN performance AS T2 ON T1.Conductor_ID = T2.Orchestra_ID GROUP BY T1.Name ORDER BY COUNT(T1.Year_of_Work) DESC	orchestra
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1	orchestra
SELECT T1.Name FROM conductor AS T1 INNER JOIN performance AS T2 ON T1.Conductor_ID = T2.Orchestra_ID ORDER BY T1.Year_of_Work DESC LIMIT 1	orchestra
SELECT T1.Name FROM conductor AS T1 INNER JOIN performance AS T2 ON T1.Conductor_ID = T2.Orchestra_ID INNER JOIN orchestra AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID	orchestra
SELECT T1.Name, T2.Orchestra FROM conductor AS T1 INNER JOIN performance AS T2 ON T1.Conductor_ID = T2.Orchestra_ID INNER JOIN orchestra AS T3 ON T2.Orchestra_ID = T3.Orchestra_ID	orchestra
SELECT T2.Name FROM performance AS T1 INNER JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(T1.Conductor_ID) > 1	orchestra
SELECT T1.Name FROM conductor AS T1 INNER JOIN performance AS T2 ON T1.Conductor_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(DISTINCT T2.Orchestra_ID) > 1	orchestra
SELECT T2.Name FROM performance AS T1 INNER JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(T1.Conductor_ID) DESC LIMIT 1	orchestra
SELECT T2.Name FROM performance AS T1 INNER JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(T1.Conductor_ID) DESC LIMIT 1	orchestra
SELECT T1.Name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008	orchestra
SELECT T1.Name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008	orchestra
SELECT T2.Record_Company, COUNT(T2.Orchestra_ID) FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Record_Company	orchestra
SELECT T2.Record_Company, COUNT(T1.Orchestra_ID) FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Record_Company	orchestra
SELECT T1.Major_Record_Format FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T1.Major_Record_Format ORDER BY COUNT(T1.Major_Record_Format) ASC	orchestra
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(Major_Record_Format) DESC	orchestra
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Record_Company) DESC LIMIT 1	orchestra
SELECT T2.Record_Company FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Record_Company ORDER BY COUNT(T2.Record_Company) DESC LIMIT 1	orchestra
SELECT T2.Orchestra FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T1.Performance_ID IS NULL	orchestra
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN ( SELECT Orchestra_ID FROM performance )	orchestra
SELECT T2.Record_Company FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T2.Year_of_Founded < 2003 INTERSECT SELECT T2.Record_Company FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T2.Year_of_Founded >= 2003	orchestra
SELECT T2.Record_Company FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T2.Year_of_Founded < 2003 INTERSECT SELECT T2.Record_Company FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID WHERE T2.Year_of_Founded >= 2003	orchestra
SELECT COUNT(DISTINCT `Orchestra`) FROM `orchestra` WHERE `Major_Record_Format` = 'CD' OR `Major_Record_Format` = 'DVD'	orchestra
SELECT COUNT(DISTINCT `Orchestra`) FROM `orchestra` WHERE `Major_Record_Format` = 'CD' OR `Major_Record_Format` = 'DVD'	orchestra
SELECT DISTINCT T1.Year_of_Founded FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T1.Year_of_Founded HAVING COUNT(T2.Performance_ID) > 1	orchestra
SELECT T1.Year_of_Founded FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T1.Year_of_Founded HAVING COUNT(T2.Performance_ID) > 1	orchestra
SELECT COUNT(DISTINCT ID) FROM Highschooler	network_1
SELECT COUNT(*) FROM Highschooler	network_1
SELECT name, grade FROM Highschooler	network_1
SELECT name, grade FROM Highschooler	network_1
SELECT grade FROM Highschooler	network_1
SELECT name, grade FROM Highschooler	network_1
SELECT T1.grade FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'	network_1
SELECT T1.grade FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle' UNION SELECT T1.grade FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle' UNION SELECT T1.grade FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name	network_1
SELECT name FROM Highschooler WHERE grade = 10	network_1
SELECT name FROM Highschooler WHERE grade = 10	network_1
SELECT ID FROM Highschooler WHERE name  =  'Kyle'	network_1
SELECT T1.ID FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'	network_1
SELECT COUNT(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Friend AS T3 ON T1.ID = T3.friend_id WHERE T1.grade IN (9, 10) INTERSECT SELECT COUNT(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Friend AS T3 ON T1.ID = T3.friend_id WHERE T1.grade IN 9, 10	network_1
SELECT COUNT(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.grade IN (9, 10) UNION SELECT COUNT(*) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.friend_id WHERE T1.grade IN (9, 10) UNION SELECT COUNT(*) FROM Highschooler AS T1 WHERE T1.grade IN (9, 10) AND T1.ID NOT IN 	network_1
SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade	network_1
SELECT grade, COUNT(ID) FROM Highschooler GROUP BY grade	network_1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(grade) DESC LIMIT 1	network_1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(grade) DESC LIMIT 1	network_1
SELECT T1.grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.grade HAVING COUNT(T2.student_id) >= 4	network_1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(ID) >= 4	network_1
SELECT T1.student_id, COUNT(T2.student_id) FROM Friend AS T1 INNER JOIN Friend AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id	network_1
SELECT T1.name, COUNT(T2.student_id) FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name	network_1
SELECT T1.name, COUNT(T2.student_id) FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name	network_1
SELECT T1.name, COUNT(T2.student_id) FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name	network_1
SELECT T2.name FROM Friend AS T1 INNER JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T1.student_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1	network_1
SELECT T1.name FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1	network_1
SELECT T1.name FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(T2.student_id) >= 3	network_1
SELECT T1.name FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(T2.student_id) >= 3	network_1
SELECT T3.name FROM Friend AS T1 INNER JOIN Highschooler AS T2 ON T1.student_id = T2.ID INNER JOIN Highschooler AS T3 ON T1.friend_id = T3.ID WHERE T2.name = 'Kyle'	network_1
SELECT T3.name FROM Friend AS T1 INNER JOIN Highschooler AS T2 ON T1.student_id = T2.ID INNER JOIN Highschooler AS T3 ON T1.friend_id = T3.ID WHERE T2.name = 'Kyle'	network_1
SELECT COUNT(T2.friend_id) FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'	network_1
SELECT COUNT(T1.friend_id) FROM Friend AS T1 INNER JOIN Highschooler AS T2 ON T1.student_id = T2.ID WHERE T2.name = 'Kyle'	network_1
SELECT T1.ID FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.student_id IS NULL	network_1
SELECT T1.ID FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.student_id IS NULL	network_1
SELECT T1.name FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING COUNT(T2.student_id) = 0	network_1
SELECT T1.name FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(T2.student_id) = 0	network_1
SELECT T1.ID FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id INNER JOIN Likes AS T3 ON T1.ID = T3.student_id GROUP BY T1.ID HAVING COUNT(DISTINCT T2.friend_id) > 0 AND COUNT(DISTINCT T3.liked_id) > 0	network_1
SELECT T1.ID FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id INNER JOIN Likes AS T3 ON T1.ID = T3.student_id GROUP BY T1.ID HAVING COUNT(DISTINCT T2.friend_id) > 0 AND COUNT(DISTINCT T3.liked_id) > 0	network_1
SELECT T1.name FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id INNER JOIN Likes AS T3 ON T1.ID = T3.student_id GROUP BY T1.name HAVING COUNT(DISTINCT T2.friend_id) > 0 AND COUNT(DISTINCT T3.liked_id) > 0	network_1
SELECT T1.name FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id INNER JOIN Likes AS T3 ON T1.ID = T3.student_id GROUP BY T1.name HAVING COUNT(DISTINCT T2.friend_id) > 0 AND COUNT(DISTINCT T3.liked_id) > 0	network_1
SELECT student_id, COUNT(liked_id) FROM Likes GROUP BY student_id	network_1
SELECT student_id, COUNT(liked_id) FROM Likes GROUP BY student_id	network_1
SELECT T1.name, COUNT(T2.liked_id) FROM Highschooler AS T1 INNER JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name	network_1
SELECT T1.name, COUNT(T2.liked_id) FROM Highschooler AS T1 INNER JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name	network_1
SELECT T2.name FROM Likes AS T1 INNER JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T1.student_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1	network_1
SELECT T1.name FROM Highschooler AS T1 INNER JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1	network_1
SELECT T1.name FROM Highschooler AS T1 INNER JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(T2.student_id) >= 2	network_1
SELECT T2.name FROM Likes AS T1 INNER JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T1.student_id HAVING COUNT(T1.student_id) >= 2	network_1
SELECT T1.name FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(T2.student_id) >= 2 AND T1.grade > 5	network_1
SELECT T1.name FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(T2.student_id) >= 2 AND T1.grade > 5	network_1
SELECT COUNT(T2.liked_id) FROM Highschooler AS T1 INNER JOIN Likes AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'	network_1
SELECT COUNT(T2.liked_id) FROM Highschooler AS T1 INNER JOIN Likes AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'	network_1
SELECT AVG(T1.grade) FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING COUNT(T2.student_id) > 0	network_1
SELECT AVG(T1.grade) FROM Highschooler AS T1 INNER JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id	network_1
SELECT MIN(T1.grade) FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.student_id IS NULL	network_1
SELECT MIN(T1.grade) FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T2.student_id IS NULL	network_1
SELECT T1.state FROM Owners AS T1 INNER JOIN Professionals AS T2 ON T1.state = T2.state GROUP BY T1.state HAVING COUNT(DISTINCT T1.owner_id) > 0 AND COUNT(DISTINCT T2.professional_id) > 0	dog_kennels
SELECT DISTINCT T1.state FROM Owners AS T1 INNER JOIN Professionals AS T2 ON T1.state = T2.state	dog_kennels
SELECT AVG(T1.age) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id	dog_kennels
SELECT AVG(T1.age) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id	dog_kennels
SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 INNER JOIN Dogs AS T2 ON T1.professional_id = T2.professional_id INNER JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id WHERE T1.state = 'Indiana' OR T3.dog_id IN  SELECT T2.dog_id FROM Dogs AS T2 INNER JOIN Treatments AS T3 ON T2.dog_id = T	dog_kennels
SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(T2.treatment_id) > 2 UNION SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 WHERE T1.state = 'Indiana' ``` 	dog_kennels
SELECT T1.name FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id INNER JOIN Charges AS T3 ON T2.treatment_id = T3.charge_id WHERE T3.charge_amount < 1000	dog_kennels
SELECT T1.name FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id INNER JOIN Charges AS T3 ON T2.treatment_id = T3.charge_id WHERE T3.charge_amount < 1000	dog_kennels
SELECT DISTINCT T1.first_name FROM Owners AS T1 INNER JOIN Professionals AS T2 ON T1.first_name = T2.first_name INNER JOIN Dogs AS T3 ON T1.first_name = T3.name WHERE T1.first_name NOT IN (SELECT name FROM Dogs) AND T1.first_name NOT IN (SELECT first_name FROM Dogs) AND T1.first_name NOT IN (SELECT last_name FROM Dogs) AND T2.first_name NOT IN (SELECT name FROM Dogs) AND T2.first	dog_kennels
SELECT T1.first_name FROM Owners AS T1 INNER JOIN Professionals AS T2 ON T1.first_name = T2.first_name WHERE T1.first_name NOT IN (SELECT name FROM Dogs)	dog_kennels
SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.treatment_id IS NULL	dog_kennels
SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.treatment_id IS NULL	dog_kennels
SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY COUNT(T2.dog_id) DESC LIMIT 1	dog_kennels
SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY COUNT(T2.dog_id) DESC LIMIT 1	dog_kennels
SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id, T1.role_code, T1.first_name HAVING COUNT(T2.treatment_id) >= 2	dog_kennels
SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id, T1.role_code, T1.first_name HAVING COUNT(T2.treatment_id) >= 2	dog_kennels
SELECT T2.breed_name FROM Dogs AS T1 INNER JOIN Breeds AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_code ORDER BY COUNT(T1.dog_id) DESC LIMIT 1	dog_kennels
SELECT T2.breed_name FROM Dogs AS T1 INNER JOIN Breeds AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_code ORDER BY COUNT(T1.breed_code) DESC LIMIT 1	dog_kennels
SELECT T1.owner_id, T1.last_name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id, T1.last_name ORDER BY COUNT(T3.treatment_id) DESC LIMIT 1	dog_kennels
SELECT T1.owner_id, T1.last_name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1	dog_kennels
SELECT T2.treatment_type_description FROM Charges AS T1 INNER JOIN Treatment_Types AS T2 ON T1.charge_type = T2.treatment_type_code ORDER BY T1.charge_amount ASC LIMIT 1	dog_kennels
SELECT T1.treatment_type_description FROM Treatment_Types AS T1 INNER JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY SUM(T2.cost_of_treatment) ASC LIMIT 1	dog_kennels
SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 INNER JOIN Charges AS T2 ON T1.owner_id = T2.charge_id GROUP BY T1.owner_id, T1.zip_code ORDER BY SUM(T2.charge_amount) DESC LIMIT 1	dog_kennels
SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN Charges AS T3 ON T2.dog_id = T3.charge_id GROUP BY T1.owner_id, T1.zip_code ORDER BY SUM(T3.charge_amount) DESC LIMIT 1	dog_kennels
SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2	dog_kennels
SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2	dog_kennels
SELECT T1.first_name, T1.last_name FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < ( SELECT AVG(T2.cost_of_treatment) FROM Treatments AS T2 )	dog_kennels
SELECT T1.first_name, T1.last_name FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id INNER JOIN Charges AS T3 ON T2.treatment_id = T3.charge_id WHERE T3.charge_amount <  SELECT AVG(T3.charge_amount) FROM Charges AS T3 INNER JOIN Treatments AS T2 ON T3.charge_id = T2.treatment_id INNER JOIN Professionals AS T1 ON T	dog_kennels
SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 INNER JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id	dog_kennels
SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 INNER JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id INNER JOIN Treatment_Types AS T3 ON T1.treatment_type_code = T3.treatment_type_code	dog_kennels
SELECT T1.treatment_type_description, T1.treatment_type_code, T2.cost_of_treatment FROM Treatment_Types AS T1 INNER JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code ORDER BY T2.cost_of_treatment DESC	dog_kennels
SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 INNER JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code	dog_kennels
SELECT T1.first_name, T1.last_name, T3.size_description FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN Sizes AS T3 ON T2.size_code = T3.size_code	dog_kennels
SELECT T1.first_name, T1.last_name, T2.size_description FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id	dog_kennels
SELECT T1.first_name, T2.name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id	dog_kennels
SELECT T1.first_name, T2.name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id	dog_kennels
SELECT T1.name FROM Dogs AS T1 INNER JOIN Breeds AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.breed_name DESC LIMIT 1	dog_kennels
SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id INNER JOIN Breeds AS T3 ON T1.breed_code = T3.breed_code ORDER BY T3.breed_name DESC LIMIT 1	dog_kennels
SELECT T1.first_name, T1.last_name, T2.name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'VA' ORDER BY T1.first_name, T2.name	dog_kennels
SELECT T1.first_name, T2.name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'VA' ORDER BY T1.first_name	dog_kennels
SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id HAVING COUNT(T2.treatment_id) > 0	dog_kennels
SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.treatment_id IS NOT NULL	dog_kennels
SELECT T1.last_name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age ASC LIMIT 1	dog_kennels
SELECT T1.last_name FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.date_of_birth DESC LIMIT 1	dog_kennels
SELECT T2.email_address FROM Owners AS T1 INNER JOIN Professionals AS T2 ON T1.owner_id = T2.professional_id WHERE T1.state = 'Hawaii' OR T1.state = 'Wisconsin'	dog_kennels
SELECT T2.email_address FROM Owners AS T1 INNER JOIN Professionals AS T2 ON T1.owner_id = T2.professional_id WHERE T1.state IN ('Hawaii', 'Wisconsin')	dog_kennels
SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1	dog_kennels
SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1	dog_kennels
SELECT COUNT(DISTINCT dog_id) FROM Treatments	dog_kennels
SELECT COUNT(DISTINCT dog_id) FROM Treatments	dog_kennels
SELECT COUNT(DISTINCT professional_id) FROM Treatments	dog_kennels
SELECT COUNT(DISTINCT professional_id) FROM Treatments	dog_kennels
SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 INNER JOIN Owners AS T2 ON T1.professional_id = T2.owner_id WHERE T2.city LIKE '%West%'	dog_kennels
SELECT T1.role_code, T1.street, T1.city, T1.state FROM Professionals AS T1 INNER JOIN Owners AS T2 ON T1.professional_id = T2.owner_id WHERE T2.city LIKE '%West%'	dog_kennels
SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN Sizes AS T3 ON T2.size_code = T3.size_code INNER JOIN Breeds AS T4 ON T2.breed_code = T4.breed_code INNER JOIN Treatment_Types AS T5 ON T2.dog_id = T5.dog_id INNER JOIN Treatments AS T6 ON T	dog_kennels
SELECT T1.first_name, T1.last_name, T1.email_address FROM Owners AS T1 INNER JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN Sizes AS T3 ON T2.size_code = T3.size_code INNER JOIN Breeds AS T4 ON T2.breed_code = T4.breed_code INNER JOIN Treatment_Types AS T5 ON T2.treatment_type_code = T5.treatment_type_code WHERE T1.state LIKE '%North	dog_kennels
SELECT COUNT(*) FROM Dogs WHERE age < ( SELECT AVG(age) FROM Dogs )	dog_kennels
SELECT COUNT(*) 	dog_kennels
SELECT T2.cost_of_treatment FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id ORDER BY T2.date_of_treatment DESC LIMIT 1	dog_kennels
SELECT T2.cost_of_treatment FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id ORDER BY T2.date_of_treatment DESC LIMIT 1	dog_kennels
SELECT COUNT(*) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.treatment_id IS NULL	dog_kennels
SELECT COUNT(*) FROM Dogs AS T1 INNER JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.treatment_id IS NULL	dog_kennels
SELECT COUNT(T1.owner_id) FROM Owners AS T1 LEFT JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.dog_id IS NULL	dog_kennels
SELECT COUNT(owner_id) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)	dog_kennels
SELECT COUNT(T1.professional_id) FROM Professionals AS T1 LEFT JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id LEFT JOIN Dogs AS T3 ON T2.dog_id = T3.dog_id WHERE T3.dog_id IS NULL	dog_kennels
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )	dog_kennels
SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 INNER JOIN Breeds AS T2 ON T1.breed_code = T2.breed_code WHERE T1.abandoned_yn = 1	dog_kennels
SELECT T1.name, T1.age, T1.weight FROM Dogs AS T1 INNER JOIN Breeds AS T2 ON T1.breed_code = T2.breed_code WHERE T1.abandoned_yn = 1	dog_kennels
SELECT AVG(T1.age) FROM Dogs AS T1	dog_kennels
SELECT AVG(T1.age) FROM Dogs AS T1	dog_kennels
SELECT T1.age FROM Dogs AS T1 ORDER BY T1.age DESC LIMIT 1	dog_kennels
SELECT MAX(T1.age) FROM Dogs AS T1	dog_kennels
SELECT T1.charge_type, T1.charge_amount FROM Charges AS T1	dog_kennels
SELECT charge_type, SUM(charge_amount) FROM Charges GROUP BY charge_type	dog_kennels
SELECT T1.charge_type, MAX(T1.charge_amount) FROM Charges AS T1 GROUP BY T1.charge_type ORDER BY T1.charge_amount DESC LIMIT 1	dog_kennels
SELECT T1.charge_amount FROM Charges AS T1 INNER JOIN ( SELECT charge_type, MAX(charge_amount) AS max_charge_amount FROM Charges GROUP BY charge_type ) AS T2 ON T1.charge_type = T2.charge_type AND T1.charge_amount = T2.max_charge_amount	dog_kennels
SELECT T1.email_address, T1.cell_number, T1.home_phone FROM Professionals AS T1	dog_kennels
SELECT T1.email_address, T1.cell_number, T1.home_phone FROM Professionals AS T1	dog_kennels
SELECT DISTINCT T1.breed_name, T2.size_description FROM Breeds AS T1 INNER JOIN Sizes AS T2 ON T1.breed_code = T2.size_code	dog_kennels
SELECT DISTINCT T1.breed_name, T2.size_description FROM Breeds AS T1 INNER JOIN Sizes AS T2 ON T1.breed_code = T2.size_code INNER JOIN Dogs AS T3 ON T1.breed_code = T3.breed_code INNER JOIN Sizes AS T4 ON T3.size_code = T4.size_code	dog_kennels
SELECT T1.first_name, T2.treatment_type_description FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id INNER JOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code	dog_kennels
SELECT T1.first_name, T2.treatment_type_description FROM Professionals AS T1 INNER JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id INNER JOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code	dog_kennels
SELECT COUNT(DISTINCT Singer_ID) FROM singer	singer
SELECT COUNT(Singer_ID) FROM singer	singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC	singer
SELECT `Name` FROM `singer` ORDER BY `Net_Worth_Millions` ASC	singer
SELECT Birth_Year, Citizenship FROM singer	singer
SELECT Birth_Year, Citizenship FROM singer	singer
SELECT T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Citizenship!= 'France' GROUP BY T1.Name	singer
SELECT T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Citizenship!= 'French'	singer
SELECT T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Birth_Year = 1948 OR T1.Birth_Year = 1949	singer
SELECT T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Birth_Year = 1948 OR T1.Birth_Year = 1949	singer
SELECT T1.Name FROM singer AS T1 INNER JOIN ( SELECT Singer_ID, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Singer_ID ) AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Net_Worth_Millions = T2.Max_Net_Worth	singer
SELECT T1.Name FROM singer AS T1 INNER JOIN ( SELECT Singer_ID, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Singer_ID ) AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Net_Worth_Millions = T2.Max_Net_Worth	singer
SELECT T1.Citizenship, COUNT(T1.Singer_ID) FROM singer AS T1 GROUP BY T1.Citizenship	singer
SELECT COUNT(T1.Name) FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Citizenship	singer
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(Citizenship) DESC LIMIT 1	singer
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(Citizenship) DESC LIMIT 1	singer
SELECT T2.Citizenship, MAX(T1.Net_Worth_Millions) FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Citizenship	singer
SELECT T1.Citizenship, T1.Net_Worth_Millions FROM singer AS T1 INNER JOIN ( SELECT Singer_ID, MAX(Net_Worth_Millions) AS Net_Worth_Millions FROM singer GROUP BY Singer_ID ) AS T2 ON T1.Singer_ID = T2.Singer_ID ORDER BY T1.Citizenship	singer
SELECT T2.Title, T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID	singer
SELECT T1.Title, T1.Singer_ID, T2.Name FROM song AS T1 INNER JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID	singer
SELECT DISTINCT T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000	singer
SELECT DISTINCT T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000	singer
SELECT T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID HAVING COUNT(T2.Singer_ID) > 1	singer
SELECT T1.Name FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T2.Singer_ID HAVING COUNT(T2.Singer_ID) > 1	singer
SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name	singer
SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name	singer
SELECT T1.Name FROM singer AS T1 LEFT JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Song_ID IS NULL	singer
SELECT T1.Name FROM singer AS T1 LEFT JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Song_ID IS NULL	singer
SELECT T1.Citizenship FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Birth_Year < 1945 OR T1.Birth_Year > 1955 GROUP BY T1.Citizenship HAVING COUNT(T1.Singer_ID) > 1	singer
SELECT T1.Citizenship FROM singer AS T1 INNER JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T1.Birth_Year < 1945 OR T1.Birth_Year > 1955 GROUP BY T1.Citizenship HAVING COUNT(DISTINCT T1.Singer_ID) > 1	singer
SELECT COUNT(feature_id) FROM Other_Available_Features	real_estate_properties
SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 INNER JOIN Other_Available_Features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'	real_estate_properties
SELECT T2.property_type_description FROM Properties AS T1 INNER JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code	real_estate_properties
SELECT T1.property_name FROM Properties AS T1 INNER JOIN Other_Property_Features AS T2 ON T1.property_id = T2.property_id INNER JOIN Other_Available_Features AS T3 ON T2.feature_id = T3.feature_id WHERE (T3.feature_type_code = 'hse' OR T3.feature_type_code = 'apt') AND T1.room_count > 1	real_estate_properties