[
    {
        "id": 3,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Show': ['show_id', 'title', 'composer', 'lyricist', 'book_writer', 'premiere_date', 'theater_id', 'genre_id', 'production_company_id', 'director_id', 'composer_id', 'lyricist_id', 'choreographer_id', 'writer_id', 'season_id', 'genre', 'run_time', 'runtime', 'year', 'duration_minutes', 'running_time', 'rating'], 'Performance': ['performance_id', 'date', 'show_id', 'theater_id', 'capacity', 'date_time', 'num_tickets_sold', 'num_performances', 'year', 'location_id', 'total_attendees', 'start_date', 'end_date', 'country', 'revenue', 'num_seats', 'ticket_price', 'start_time', 'price', 'musical_id'], 'Ticket': ['ticket_id', 'price', 'performance_id', 'status', 'sold_out', 'num_attendees', 'seat_type', 'quantity', 'seat_id', 'num_seats'], 'Writer': ['writer_id', 'show_id', 'first_name', 'last_name', 'person_id']} and \n# the user question: Find the writers who have written scripts for the shows that have had the most number of sold out performances, along with the number of sold out performances.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the writers who have written scripts for the shows that have had the most number of sold out performances, along with the number of sold out performances.",
        "output": "SELECT Writer.first_name, Writer.last_name, COUNT(DISTINCT Performance.performance_id) AS num_sold_out_performances FROM Writer INNER JOIN Show ON Writer.writer_id = Show.writer_id INNER JOIN Performance ON Show.show_id = Performance.show_id INNER JOIN Ticket ON Performance.performance_id = Ticket.performance_id WHERE Ticket.sold_out = 1 GROUP BY Writer.writer_id ORDER BY num_sold_out_performances DESC;",
        "schema": "musical_theater",
        "processed_schema_content": {
            "Show": [
                "show_id",
                "title",
                "composer",
                "lyricist",
                "book_writer",
                "premiere_date",
                "theater_id",
                "genre_id",
                "production_company_id",
                "director_id",
                "composer_id",
                "lyricist_id",
                "choreographer_id",
                "writer_id",
                "season_id",
                "genre",
                "run_time",
                "runtime",
                "year",
                "duration_minutes",
                "running_time",
                "rating"
            ],
            "Performance": [
                "performance_id",
                "date",
                "show_id",
                "theater_id",
                "capacity",
                "date_time",
                "num_tickets_sold",
                "num_performances",
                "year",
                "location_id",
                "total_attendees",
                "start_date",
                "end_date",
                "country",
                "revenue",
                "num_seats",
                "ticket_price",
                "start_time",
                "price",
                "musical_id"
            ],
            "Ticket": [
                "ticket_id",
                "price",
                "performance_id",
                "status",
                "sold_out",
                "num_attendees",
                "seat_type",
                "quantity",
                "seat_id",
                "num_seats"
            ],
            "Writer": [
                "writer_id",
                "show_id",
                "first_name",
                "last_name",
                "person_id"
            ]
        }
    },
    {
        "id": 5,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'team_id', 'completed_by', 'skill_id', 'first_name', 'manager_id', 'last_name', 'job_title', 'office_location', 'role', 'years_of_experience', 'department_id', 'salary'], 'Notes': ['user_id', 'note_text', 'note_title', 'created_at', 'updated_at', 'created_by', 'note_id']} and \n# the user question: Find all users who have a note with the word \"campaign\" in the title or text:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all users who have a note with the word \"campaign\" in the title or text:",
        "output": "SELECT DISTINCT Users.username FROM Users JOIN Notes ON Users.user_id = Notes.user_id WHERE Notes.note_title LIKE '%campaign%' OR Notes.note_text LIKE '%campaign%';",
        "schema": "leadership",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "team_id",
                "completed_by",
                "skill_id",
                "first_name",
                "manager_id",
                "last_name",
                "job_title",
                "office_location",
                "role",
                "years_of_experience",
                "department_id",
                "salary"
            ],
            "Notes": [
                "user_id",
                "note_text",
                "note_title",
                "created_at",
                "updated_at",
                "created_by",
                "note_id"
            ]
        }
    },
    {
        "id": 8,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Test_Results': ['psychologist_id', 'score', 'test_id', 'patient_id', 'date']} and \n# the user question: Get the average score for all tests administered by psychologist with ID 1.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the average score for all tests administered by psychologist with ID 1.",
        "output": "SELECT AVG(score) FROM Test_Results WHERE psychologist_id = 1;",
        "schema": "forensic_psychology",
        "processed_schema_content": {
            "Test_Results": [
                "psychologist_id",
                "score",
                "test_id",
                "patient_id",
                "date"
            ]
        }
    },
    {
        "id": 10,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Opportunities': ['closing_date', 'opportunity_id', 'company_id', 'stage', 'name', 'value', 'Negotiation', 'Closed', 'Won', 'Prospect', 'Qualified'], 'Contacts': ['company_id', 'first_name', 'contact_id', 'last_name', 'email']} and \n# the user question: Find the contacts associated with opportunities that have a value higher than $100,000 and are in the 'Qualified' or 'Negotiation' stage.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the contacts associated with opportunities that have a value higher than $100,000 and are in the 'Qualified' or 'Negotiation' stage.",
        "output": "SELECT c.first_name, c.last_name FROM Contacts c INNER JOIN Opportunities o ON c.company_id = o.company_id WHERE o.value > 100000 AND o.stage IN ('Qualified', 'Negotiation');",
        "schema": "business_development",
        "processed_schema_content": {
            "Opportunities": [
                "closing_date",
                "opportunity_id",
                "company_id",
                "stage",
                "name",
                "value",
                "Negotiation",
                "Closed",
                "Won",
                "Prospect",
                "Qualified"
            ],
            "Contacts": [
                "company_id",
                "first_name",
                "contact_id",
                "last_name",
                "email"
            ]
        }
    },
    {
        "id": 14,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Author': ['author_id', 'first_name', 'last_name', 'email', 'gender', 'country_id', 'birth_year', 'has_pulitzer_prize', 'has_phd', 'has_booker_prize', 'birth_country', 'name', 'author_name', 'id'], 'Book': ['book_id', 'title', 'isbn', 'publisher_id', 'publication_date', 'rating', 'price', 'publication_year', 'author_id', 'publisher', 'author', 'weight', 'author_gender', 'language', 'author_name', 'book_title', 'format_id', 'page_count', 'id', 'num_pages'], 'Order': ['order_id', 'customer_id', 'order_date', 'status', 'store_id', 'date', 'total_amount', 'total_cost', 'total_price'], 'Order_Item': ['order_id', 'book_id', 'quantity', 'price', 'store_id', 'order_date', 'customer_id', 'unit_price', 'inventory_id', 'date', 'order_item_date'], 'Store_Inventory': ['store_id', 'book_id', 'quantity', 'inventory_id', 'quantity_available']} and \n# the user question: Find the title and author of the book with the highest rating that has sold more than 100 copies in the last 6 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the title and author of the book with the highest rating that has sold more than 100 copies in the last 6 months.",
        "output": "SELECT Book.title, Author.first_name || ' ' || Author.last_name AS author_name FROM Book JOIN Store_Inventory ON Book.book_id = Store_Inventory.book_id JOIN Order_Item ON Store_Inventory.book_id = Order_Item.book_id JOIN Order ON Order_Item.order_id = Order.order_id JOIN Author ON Book.author_id = Author.author_id WHERE Order.date >= DATE('now', '-6 months') AND Order_Item.quantity > 100 GROUP BY Book.book_id ORDER BY Book.rating DESC LIMIT 1;",
        "schema": "business_books",
        "processed_schema_content": {
            "Author": [
                "author_id",
                "first_name",
                "last_name",
                "email",
                "gender",
                "country_id",
                "birth_year",
                "has_pulitzer_prize",
                "has_phd",
                "has_booker_prize",
                "birth_country",
                "name",
                "author_name",
                "id"
            ],
            "Book": [
                "book_id",
                "title",
                "isbn",
                "publisher_id",
                "publication_date",
                "rating",
                "price",
                "publication_year",
                "author_id",
                "publisher",
                "author",
                "weight",
                "author_gender",
                "language",
                "author_name",
                "book_title",
                "format_id",
                "page_count",
                "id",
                "num_pages"
            ],
            "Order": [
                "order_id",
                "customer_id",
                "order_date",
                "status",
                "store_id",
                "date",
                "total_amount",
                "total_cost",
                "total_price"
            ],
            "Order_Item": [
                "order_id",
                "book_id",
                "quantity",
                "price",
                "store_id",
                "order_date",
                "customer_id",
                "unit_price",
                "inventory_id",
                "date",
                "order_item_date"
            ],
            "Store_Inventory": [
                "store_id",
                "book_id",
                "quantity",
                "inventory_id",
                "quantity_available"
            ]
        }
    },
    {
        "id": 16,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Devices': ['device_id', 'device_name', 'device_type', 'os', 'webserver', 'user_id', 'office_id', 'model', 'manufacturer', 'last_scanned', 'status', 'added_time', 'last_communication_time', 'os_version', 'snmp_community_string', 'hardware_status', 'firmware_version', 'last_reboot_time', 'last_seen_online_time', 'online_status', 'last_active_timestamp', 'ram_capacity', 'processor_speed', 'free_storage_space', 'location', 'operating_system'], 'Offices': ['office_id', 'city', 'office_name', 'Berlin', 'state', 'country']} and \n# the user question: Show all network devices that have been inactive for more than 30 days, and list the associated last active timestamp, device type, and location for each device.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Show all network devices that have been inactive for more than 30 days, and list the associated last active timestamp, device type, and location for each device.",
        "output": "SELECT d.device_name, d.device_type, o.city, d.last_active_timestamp FROM Devices d INNER JOIN Offices o ON d.office_id = o.office_id WHERE d.last_active_timestamp < DATE('now', '-30 day');",
        "schema": "network_security",
        "processed_schema_content": {
            "Devices": [
                "device_id",
                "device_name",
                "device_type",
                "os",
                "webserver",
                "user_id",
                "office_id",
                "model",
                "manufacturer",
                "last_scanned",
                "status",
                "added_time",
                "last_communication_time",
                "os_version",
                "snmp_community_string",
                "hardware_status",
                "firmware_version",
                "last_reboot_time",
                "last_seen_online_time",
                "online_status",
                "last_active_timestamp",
                "ram_capacity",
                "processor_speed",
                "free_storage_space",
                "location",
                "operating_system"
            ],
            "Offices": [
                "office_id",
                "city",
                "office_name",
                "Berlin",
                "state",
                "country"
            ]
        }
    },
    {
        "id": 17,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Analyses': ['method_id', 'project_id', 'analysis_id', 'analysis_name', 'dataset_id', 'confidence_score'], 'AnalysisMethods': ['method_name', 'method_id', 'method_description']} and \n# the user question: Get the analysis names and method descriptions for analyses that utilize the 'Descriptive Statistics' method:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the analysis names and method descriptions for analyses that utilize the 'Descriptive Statistics' method:",
        "output": "SELECT Analyses.analysis_name, AnalysisMethods.method_description FROM Analyses JOIN AnalysisMethods ON Analyses.method_id = AnalysisMethods.method_id WHERE AnalysisMethods.method_name = 'Descriptive Statistics';",
        "schema": "data_analytics",
        "processed_schema_content": {
            "Analyses": [
                "method_id",
                "project_id",
                "analysis_id",
                "analysis_name",
                "dataset_id",
                "confidence_score"
            ],
            "AnalysisMethods": [
                "method_name",
                "method_id",
                "method_description"
            ]
        }
    },
    {
        "id": 18,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id']} and \n# the user question: Get the name and average rating of all classes that have at least one review.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the name and average rating of all classes that have at least one review.",
        "output": "SELECT Classes.name, AVG(Reviews.rating) AS avg_rating FROM Classes INNER JOIN Reviews ON Classes.id = Reviews.class_id GROUP BY Classes.id;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ]
        }
    },
    {
        "id": 21,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'users': ['profile_completion', 'signup_date', 'name', 'email', 'password', 'birthdate', 'id', 'last_login', 'age', 'state', 'verification_code', 'email_verified', 'subscription_plan', 'last_purchase_date', 'subscription_type', 'username', 'verified', 'user_id', 'date_of_birth', 'country', 'registration_date'], 'orders': ['paid', 'creation_date', 'customer_id', 'total_value', 'id', 'shipped', 'employee_id', 'total_cost', 'date_placed', 'order_date', 'total_price', 'date', 'user_id', 'status', 'salesperson_id', 'total_amount', 'created_at', 'order_id']} and \n# the user question: Retrieve the name and email of the user with the highest number of orders.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of the user with the highest number of orders.",
        "output": "SELECT name, email FROM users WHERE id = ( SELECT user_id FROM orders GROUP BY user_id ORDER BY COUNT(*) DESC LIMIT 1 );",
        "schema": "user_interface_design",
        "processed_schema_content": {
            "users": [
                "profile_completion",
                "signup_date",
                "name",
                "email",
                "password",
                "birthdate",
                "id",
                "last_login",
                "age",
                "state",
                "verification_code",
                "email_verified",
                "subscription_plan",
                "last_purchase_date",
                "subscription_type",
                "username",
                "verified",
                "user_id",
                "date_of_birth",
                "country",
                "registration_date"
            ],
            "orders": [
                "paid",
                "creation_date",
                "customer_id",
                "total_value",
                "id",
                "shipped",
                "employee_id",
                "total_cost",
                "date_placed",
                "order_date",
                "total_price",
                "date",
                "user_id",
                "status",
                "salesperson_id",
                "total_amount",
                "created_at",
                "order_id"
            ]
        }
    },
    {
        "id": 22,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'goals': ['goal_id', 'goal_name', 'goal_rating', 'skill_id'], 'athlete_goals': ['goal_id', 'athlete_id', 'goal_achieved', 'goal_date', 'date_achieved']} and \n# the user question: Get a list of all athletes who have a goal related to \"Endurance\" or \"Strength\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get a list of all athletes who have a goal related to \"Endurance\" or \"Strength\".",
        "output": "SELECT athletes.name, goals.goal_name FROM athletes INNER JOIN athlete_goals ON athletes.athlete_id = athlete_goals.athlete_id INNER JOIN goals ON athlete_goals.goal_id = goals.goal_id WHERE goals.goal_name = 'Endurance' OR goals.goal_name = 'Strength';",
        "schema": "sports_psychology",
        "processed_schema_content": {
            "athletes": [
                "name",
                "athlete_id",
                "team_id",
                "last_name",
                "athlete_name",
                "age"
            ],
            "goals": [
                "goal_id",
                "goal_name",
                "goal_rating",
                "skill_id"
            ],
            "athlete_goals": [
                "goal_id",
                "athlete_id",
                "goal_achieved",
                "goal_date",
                "date_achieved"
            ]
        }
    },
    {
        "id": 24,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'category_id', 'ProductName', 'ProductID', 'UnitPrice', 'CategoryID', 'Product_Name', 'Product_ID'], 'Sales': ['product_id', 'price', 'quantity', 'salesperson_id', 'sale_date', 'open_date', 'task_id', 'SaleDate'], 'Purchases': ['cost', 'product_id', 'quantity', 'supplier_id', 'purchase_date']} and \n# the user question: Find the top 10 most profitable products based on their total revenue minus total cost:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the top 10 most profitable products based on their total revenue minus total cost:",
        "output": "SELECT Products.product_name, (SUM(Sales.quantity * Sales.price) - SUM(Purchases.quantity * Purchases.cost)) AS profit FROM Products INNER JOIN Sales ON Products.product_id = Sales.product_id INNER JOIN Purchases ON Products.product_id = Purchases.product_id GROUP BY Products.product_id ORDER BY profit DESC LIMIT 10;",
        "schema": "data_analysis",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "category_id",
                "ProductName",
                "ProductID",
                "UnitPrice",
                "CategoryID",
                "Product_Name",
                "Product_ID"
            ],
            "Sales": [
                "product_id",
                "price",
                "quantity",
                "salesperson_id",
                "sale_date",
                "open_date",
                "task_id",
                "SaleDate"
            ],
            "Purchases": [
                "cost",
                "product_id",
                "quantity",
                "supplier_id",
                "purchase_date"
            ]
        }
    },
    {
        "id": 25,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'sports': ['sport_name', 'sport_id', 'Low', 'motivation', 'competition', 'challenge', 'sport_category'], 'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'mental_skills': ['skill_id', 'skill_name', 'skill_description', 'athlete_id', 'Focus', 'Visualization', 'skill_mastered', 'skill_level', 'Excellent', 'High', 'Low'], 'athlete_sports': ['sport_id', 'athlete_id']} and \n# the user question: Get the name of all athletes who have a \"Low\" level of \"Anxiety\" and have participated in the \"Swimming\" sport.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the name of all athletes who have a \"Low\" level of \"Anxiety\" and have participated in the \"Swimming\" sport.",
        "output": "SELECT DISTINCT athletes.athlete_name FROM athletes INNER JOIN athlete_sports ON athletes.athlete_id = athlete_sports.athlete_id INNER JOIN sports ON athlete_sports.sport_id = sports.sport_id INNER JOIN athlete_skills ON athletes.athlete_id = athlete_skills.athlete_id WHERE sports.sport_name = 'Swimming' AND athlete_skills.skill_id = (SELECT skill_id FROM mental_skills WHERE skill_name = 'Anxiety' AND skill_level = 'Low');",
        "schema": "sports_psychology",
        "processed_schema_content": {
            "athletes": [
                "name",
                "athlete_id",
                "team_id",
                "last_name",
                "athlete_name",
                "age"
            ],
            "sports": [
                "sport_name",
                "sport_id",
                "Low",
                "motivation",
                "competition",
                "challenge",
                "sport_category"
            ],
            "athlete_skills": [
                "skill_id",
                "athlete_id",
                "skill_level",
                "skill_mastered",
                "self_talk",
                "mental_preparation",
                "imagery",
                "goal_setting",
                "anxiety",
                "focus",
                "mental_toughness",
                "confidence",
                "motivation"
            ],
            "mental_skills": [
                "skill_id",
                "skill_name",
                "skill_description",
                "athlete_id",
                "Focus",
                "Visualization",
                "skill_mastered",
                "skill_level",
                "Excellent",
                "High",
                "Low"
            ],
            "athlete_sports": [
                "sport_id",
                "athlete_id"
            ]
        }
    },
    {
        "id": 26,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['UserName', 'UserID'], 'Comments': ['UserID', 'SongID', 'CommentID'], 'Songs': ['AlbumID', 'SongID', 'GenreID', 'SongTitle', 'Duration', 'SongName', 'ArtistID', 'ReleaseDate', 'ReleaseYear', 'Language', 'AvgDuration', 'AvgRating', 'CommentCount', 'Rating', 'PlayCount'], 'Albums': ['ReleaseYear', 'AlbumID', 'ArtistID', 'AlbumTitle', 'ReleaseDate', 'SongID', 'Language', 'LanguageID', 'GenreID', 'AlbumName'], 'Ratings': ['UserID', 'SongID', 'Rating', 'GenreID', 'AlbumID', 'RatingID']} and \n# the user question: \"Retrieve the names of users who have commented on songs from albums released in different years and have also rated songs with a rating of 5.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Retrieve the names of users who have commented on songs from albums released in different years and have also rated songs with a rating of 5.\"",
        "output": "SELECT DISTINCT Users.UserName FROM Users INNER JOIN Comments ON Users.UserID = Comments.UserID INNER JOIN Songs ON Comments.SongID = Songs.SongID INNER JOIN Albums ON Songs.AlbumID = Albums.AlbumID INNER JOIN Ratings ON Users.UserID = Ratings.UserID WHERE Albums.ReleaseYear IN ( SELECT ReleaseYear FROM Albums GROUP BY ReleaseYear HAVING COUNT(DISTINCT Albums.AlbumID) > 1 ) AND Ratings.Rating = 5;",
        "schema": "music",
        "processed_schema_content": {
            "Users": [
                "UserName",
                "UserID"
            ],
            "Comments": [
                "UserID",
                "SongID",
                "CommentID"
            ],
            "Songs": [
                "AlbumID",
                "SongID",
                "GenreID",
                "SongTitle",
                "Duration",
                "SongName",
                "ArtistID",
                "ReleaseDate",
                "ReleaseYear",
                "Language",
                "AvgDuration",
                "AvgRating",
                "CommentCount",
                "Rating",
                "PlayCount"
            ],
            "Albums": [
                "ReleaseYear",
                "AlbumID",
                "ArtistID",
                "AlbumTitle",
                "ReleaseDate",
                "SongID",
                "Language",
                "LanguageID",
                "GenreID",
                "AlbumName"
            ],
            "Ratings": [
                "UserID",
                "SongID",
                "Rating",
                "GenreID",
                "AlbumID",
                "RatingID"
            ]
        }
    },
    {
        "id": 27,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Recipes': ['cooking_time', 'recipe_id', 'title', 'category_id', 'preparation_time', 'difficulty_level_id', 'creation_date', 'cuisine_type_id']} and \n# the user question: Text Query: \"Retrieve the recipes that have a cooking time greater than the average cooking time of all recipes.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the recipes that have a cooking time greater than the average cooking time of all recipes.\"",
        "output": "SELECT r.recipe_id, r.title FROM Recipes r WHERE r.cooking_time > (SELECT AVG(cooking_time) FROM Recipes);",
        "schema": "cooking",
        "processed_schema_content": {
            "Recipes": [
                "cooking_time",
                "recipe_id",
                "title",
                "category_id",
                "preparation_time",
                "difficulty_level_id",
                "creation_date",
                "cuisine_type_id"
            ]
        }
    },
    {
        "id": 28,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1 billion and have been updated in the last 13000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1 billion and have been updated in the last 13000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1000000000 AND Creatives.updated_at BETWEEN DATE('now', '-13000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        }
    },
    {
        "id": 30,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Board': ['model', 'flex', 'brand', 'board_id', 'camber_profile', 'length', 'width', 'camber', 'shape', 'stiffness_rating', 'flex_rating', 'rocker', 'model_name']} and \n# the user question: Retrieve the names and brands of all snowboards with a flex of 7 or greater.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and brands of all snowboards with a flex of 7 or greater.",
        "output": "SELECT brand, model FROM Board WHERE flex >= 7;",
        "schema": "snowboarding",
        "processed_schema_content": {
            "Board": [
                "model",
                "flex",
                "brand",
                "board_id",
                "camber_profile",
                "length",
                "width",
                "camber",
                "shape",
                "stiffness_rating",
                "flex_rating",
                "rocker",
                "model_name"
            ]
        }
    },
    {
        "id": 31,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1 million and have been updated in the last 7 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1 million and have been updated in the last 7 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1000000 AND Creatives.updated_at BETWEEN DATE('now', '-7 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        }
    },
    {
        "id": 32,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'creation_date', 'deletion_date', 'last_login_date', 'password_change_date', 'last_password_change_date', 'email', 'ip_address', 'admin_privileges', 'account_status', 'Last_Login_Time', 'Account_Status', 'Email', 'User_ID', 'id', 'lastLogin'], 'User_Roles': ['role_id', 'user_id'], 'Role_Permissions': ['role_id', 'permission_id'], 'Permissions': ['permission_name', 'permission_id'], 'User_Locations': ['user_id', 'location_id'], 'Locations': ['location_name', 'location_id']} and \n# the user question: Find all users who have a role with the \"write\" permission and are located at the \"branch office\" location.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all users who have a role with the \"write\" permission and are located at the \"branch office\" location.",
        "output": "SELECT Users.username FROM Users JOIN User_Roles ON Users.user_id = User_Roles.user_id JOIN Role_Permissions ON User_Roles.role_id = Role_Permissions.role_id JOIN Permissions ON Role_Permissions.permission_id = Permissions.permission_id JOIN User_Locations ON Users.user_id = User_Locations.user_id JOIN Locations ON User_Locations.location_id = Locations.location_id WHERE Permissions.permission_name = 'write' AND Locations.location_name = 'branch office';",
        "schema": "cybersecurity",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "creation_date",
                "deletion_date",
                "last_login_date",
                "password_change_date",
                "last_password_change_date",
                "email",
                "ip_address",
                "admin_privileges",
                "account_status",
                "Last_Login_Time",
                "Account_Status",
                "Email",
                "User_ID",
                "id",
                "lastLogin"
            ],
            "User_Roles": [
                "role_id",
                "user_id"
            ],
            "Role_Permissions": [
                "role_id",
                "permission_id"
            ],
            "Permissions": [
                "permission_name",
                "permission_id"
            ],
            "User_Locations": [
                "user_id",
                "location_id"
            ],
            "Locations": [
                "location_name",
                "location_id"
            ]
        }
    },
    {
        "id": 33,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Cases': ['Case_ID', 'Case_Name', 'Case_Description', 'Client_ID', 'Case_Status', 'Lawyer_ID', 'Last_Updated', 'Date_Opened', 'Date_Closed', 'Status', 'Case_Closed_Date', 'Practice_Area_ID', 'Case_Manager_ID', 'Open_Date', 'Closed', 'Case_End_Date', 'Case_Start_Date', 'Firm_ID', 'Office_ID', 'CaseStatus', 'CaseNumber', 'ClientID', 'CaseTitle', 'CaseTypeID', 'CaseType', 'CourtName', 'ClosedDate', 'Settlement', 'ID', 'HearingDate', 'ClosingDate', 'AppealStatus', 'LawyerID', 'OpeningDate', 'verdict', 'judge_id', 'defendant_state', 'plaintiff_state', 'lawyer_id'], 'Lawyers': ['Lawyer_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'Specialization', 'Department_ID', 'City', 'Email_Address', 'Phone_Number', 'Hourly_Rate', 'Practice_Area_ID', 'Billing_Rate_ID', 'Firm_ID', 'FirmID', 'LawSchoolID', 'HourlyRate', 'Name', 'ID', 'ExperienceYears', 'years_of_experience', 'state', 'lawyer_id'], 'Time_Entries': ['Time_Entry_ID', 'Lawyer_ID', 'Case_ID', 'Date', 'Hours', 'Description', 'Task_ID', 'Billed', 'Time_Entry_Date', 'Invoice_ID', 'Billable', 'Hours_Worked', 'Entry_Date'], 'Tasks': ['Task_ID', 'Task_Name', 'Task_Description', 'Task_Status', 'Case_ID', 'Due_Date', 'Lawyer_ID', 'Status', 'Completion_Date', 'Practice_Area_ID', 'Paralegal_ID', 'Last_Activity_Date', 'Budgeted_Hours', 'Budget', 'Task_Deadline', 'Hourly_Rate', 'Task_Date', 'Hours_Worked', 'Task_Due_Date', 'Hours_Billed', 'Hours']} and \n# the user question: List all the lawyers and their associated cases, along with the average number of hours billed per case:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List all the lawyers and their associated cases, along with the average number of hours billed per case:",
        "output": "SELECT Lawyers.First_Name, Lawyers.Last_Name, Cases.Case_Name, AVG(Time_Entries.Hours) AS Avg_Hours_Billed FROM Lawyers JOIN Time_Entries ON Lawyers.Lawyer_ID = Time_Entries.Lawyer_ID JOIN Tasks ON Time_Entries.Task_ID = Tasks.Task_ID JOIN Cases ON Tasks.Case_ID = Cases.Case_ID GROUP BY Lawyers.Lawyer_ID, Cases.Case_ID;",
        "schema": "law",
        "processed_schema_content": {
            "Cases": [
                "Case_ID",
                "Case_Name",
                "Case_Description",
                "Client_ID",
                "Case_Status",
                "Lawyer_ID",
                "Last_Updated",
                "Date_Opened",
                "Date_Closed",
                "Status",
                "Case_Closed_Date",
                "Practice_Area_ID",
                "Case_Manager_ID",
                "Open_Date",
                "Closed",
                "Case_End_Date",
                "Case_Start_Date",
                "Firm_ID",
                "Office_ID",
                "CaseStatus",
                "CaseNumber",
                "ClientID",
                "CaseTitle",
                "CaseTypeID",
                "CaseType",
                "CourtName",
                "ClosedDate",
                "Settlement",
                "ID",
                "HearingDate",
                "ClosingDate",
                "AppealStatus",
                "LawyerID",
                "OpeningDate",
                "verdict",
                "judge_id",
                "defendant_state",
                "plaintiff_state",
                "lawyer_id"
            ],
            "Lawyers": [
                "Lawyer_ID",
                "First_Name",
                "Last_Name",
                "Email",
                "Phone",
                "Address",
                "Specialization",
                "Department_ID",
                "City",
                "Email_Address",
                "Phone_Number",
                "Hourly_Rate",
                "Practice_Area_ID",
                "Billing_Rate_ID",
                "Firm_ID",
                "FirmID",
                "LawSchoolID",
                "HourlyRate",
                "Name",
                "ID",
                "ExperienceYears",
                "years_of_experience",
                "state",
                "lawyer_id"
            ],
            "Time_Entries": [
                "Time_Entry_ID",
                "Lawyer_ID",
                "Case_ID",
                "Date",
                "Hours",
                "Description",
                "Task_ID",
                "Billed",
                "Time_Entry_Date",
                "Invoice_ID",
                "Billable",
                "Hours_Worked",
                "Entry_Date"
            ],
            "Tasks": [
                "Task_ID",
                "Task_Name",
                "Task_Description",
                "Task_Status",
                "Case_ID",
                "Due_Date",
                "Lawyer_ID",
                "Status",
                "Completion_Date",
                "Practice_Area_ID",
                "Paralegal_ID",
                "Last_Activity_Date",
                "Budgeted_Hours",
                "Budget",
                "Task_Deadline",
                "Hourly_Rate",
                "Task_Date",
                "Hours_Worked",
                "Task_Due_Date",
                "Hours_Billed",
                "Hours"
            ]
        }
    },
    {
        "id": 34,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Artists': ['artist_id', 'artist_name', 'country', 'birth_date'], 'Albums': ['album_name', 'artist_id', 'release_date', 'song_id', 'album_id', 'label_id'], 'Artists_Awards': ['artist_id', 'award_id', 'album_id'], 'Awards': ['award_id', 'award_name', 'release_date', 'artist_id', 'genre_id'], 'Albums_Labels': ['album_id', 'label_id'], 'Labels': ['label_name', 'label_id'], 'Genres': ['genre_id', 'genre_name']} and \n# the user question: \"Retrieve the names of artists who have won an award in the 'Soul Jazz' genre and have released albums on either 'Blue Note Records' or 'ECM Records'.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Retrieve the names of artists who have won an award in the 'Soul Jazz' genre and have released albums on either 'Blue Note Records' or 'ECM Records'.\"",
        "output": "SELECT artist_name FROM Artists WHERE artist_id IN ( SELECT artist_id FROM Artists_Awards WHERE award_id IN ( SELECT award_id FROM Awards WHERE genre_id IN ( SELECT genre_id FROM Genres WHERE genre_name = 'Soul Jazz' ) ) ) AND artist_id IN ( SELECT artist_id FROM Albums WHERE album_id IN ( SELECT album_id FROM Albums_Labels WHERE label_id IN ( SELECT label_id FROM Labels WHERE label_name = 'Blue Note Records' OR label_name = 'ECM Records' ) ) );",
        "schema": "jazz",
        "processed_schema_content": {
            "Artists": [
                "artist_id",
                "artist_name",
                "country",
                "birth_date"
            ],
            "Albums": [
                "album_name",
                "artist_id",
                "release_date",
                "song_id",
                "album_id",
                "label_id"
            ],
            "Artists_Awards": [
                "artist_id",
                "award_id",
                "album_id"
            ],
            "Awards": [
                "award_id",
                "award_name",
                "release_date",
                "artist_id",
                "genre_id"
            ],
            "Albums_Labels": [
                "album_id",
                "label_id"
            ],
            "Labels": [
                "label_name",
                "label_id"
            ],
            "Genres": [
                "genre_id",
                "genre_name"
            ]
        }
    },
    {
        "id": 35,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EventArtists': ['artist_id', 'event_id'], 'Artists': ['artist_name', 'artist_id', 'artist_genre', 'artist_country', 'country_id', 'genre_id']} and \n# the user question: Retrieve the artists who have performed at the most number of events:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the artists who have performed at the most number of events:",
        "output": "SELECT Artists.artist_name, COUNT(EventArtists.artist_id) AS event_count FROM Artists JOIN EventArtists ON Artists.artist_id = EventArtists.artist_id GROUP BY Artists.artist_id ORDER BY event_count DESC LIMIT 1;",
        "schema": "electronic_music",
        "processed_schema_content": {
            "EventArtists": [
                "artist_id",
                "event_id"
            ],
            "Artists": [
                "artist_name",
                "artist_id",
                "artist_genre",
                "artist_country",
                "country_id",
                "genre_id"
            ]
        }
    },
    {
        "id": 37,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['name', 'manufacturer_id', 'id', 'eyeshadow', 'Sultry', 'Nights', 'category'], 'RetailerProducts': ['retailer_id', 'product_id', 'price', 'id', 'stock']} and \n# the user question: Find the name and price of the cheapest lip gloss available from any retailer.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and price of the cheapest lip gloss available from any retailer.",
        "output": "SELECT Products.name, MIN(RetailerProducts.price) FROM RetailerProducts JOIN Products ON RetailerProducts.product_id = Products.id WHERE Products.category = 'Lip Gloss';",
        "schema": "makeup_artistry",
        "processed_schema_content": {
            "Products": [
                "name",
                "manufacturer_id",
                "id",
                "eyeshadow",
                "Sultry",
                "Nights",
                "category"
            ],
            "RetailerProducts": [
                "retailer_id",
                "product_id",
                "price",
                "id",
                "stock"
            ]
        }
    },
    {
        "id": 39,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Films': ['release_date', 'director_id', 'genre_id', 'title', 'film_id', 'duration'], 'Genres': ['name', 'genre_id'], 'Users': ['user_id', 'email', 'username', 'film_id'], 'Reviews': ['user_id', 'film_id', 'review_id', 'rating_value']} and \n# the user question: List the usernames and email addresses of users who have reviewed at least 4 different comedy films released in the last year and have an average rating above 4.5:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the usernames and email addresses of users who have reviewed at least 4 different comedy films released in the last year and have an average rating above 4.5:",
        "output": "SELECT Users.username, Users.email FROM Users JOIN Reviews ON Users.user_id = Reviews.user_id JOIN Films ON Reviews.film_id = Films.film_id WHERE Films.genre_id = ( SELECT genre_id FROM Genres WHERE name = 'Comedy' ) AND Films.release_date >= DATE('now', '-1 year') GROUP BY Users.user_id HAVING COUNT(DISTINCT Films.film_id) >= 4 AND AVG(Reviews.rating_value) > 4.5;",
        "schema": "comedy_films",
        "processed_schema_content": {
            "Films": [
                "release_date",
                "director_id",
                "genre_id",
                "title",
                "film_id",
                "duration"
            ],
            "Genres": [
                "name",
                "genre_id"
            ],
            "Users": [
                "user_id",
                "email",
                "username",
                "film_id"
            ],
            "Reviews": [
                "user_id",
                "film_id",
                "review_id",
                "rating_value"
            ]
        }
    },
    {
        "id": 40,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Species': ['species_id', 'name', 'common_name', 'classification_id', 'genus', 'family_id', 'scientific_name', 'class_id', 'taxonomy', 'category', 'conservation_status', 'population_trend', 'habitat', 'migration_pattern', 'min_depth_range', 'max_depth_range', 'body_size', 'body_temperature_range', 'migratory_behavior', 'species_name', 'discovery_year', 'class_name', 'is_venomous', 'order_name'], 'FisheryData': ['fishery_id', 'species_id', 'fishery_name', 'catch_date', 'catch_weight', 'fishing_method', 'gear_type', 'fishing_days', 'average_length', 'catch_number', 'fish_length', 'fish_weight', 'catch_length', 'location_id', 'catch_id', 'vessel_id', 'net_mesh_size', 'method_id'], 'SpeciesData': ['sample_id', 'species_id', 'weight', 'catch_id', 'length', 'catch_date', 'depth', 'individuals_caught']} and \n# the user question: Retrieve the names of all fish species caught using the \"Trammel net\" fishing method, along with the total number of fish caught and the average weight of each species:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all fish species caught using the \"Trammel net\" fishing method, along with the total number of fish caught and the average weight of each species:",
        "output": "SELECT Species.common_name, COUNT(SpeciesData.species_id) AS total_catch, AVG(SpeciesData.weight) AS avg_weight FROM Species INNER JOIN SpeciesData ON Species.species_id = SpeciesData.species_id INNER JOIN FisheryData ON SpeciesData.catch_id = FisheryData.catch_id WHERE FisheryData.fishing_method = 'Trammel net' AND Species.category = 'Fish' GROUP BY SpeciesData.species_id;",
        "schema": "marine_biology",
        "processed_schema_content": {
            "Species": [
                "species_id",
                "name",
                "common_name",
                "classification_id",
                "genus",
                "family_id",
                "scientific_name",
                "class_id",
                "taxonomy",
                "category",
                "conservation_status",
                "population_trend",
                "habitat",
                "migration_pattern",
                "min_depth_range",
                "max_depth_range",
                "body_size",
                "body_temperature_range",
                "migratory_behavior",
                "species_name",
                "discovery_year",
                "class_name",
                "is_venomous",
                "order_name"
            ],
            "FisheryData": [
                "fishery_id",
                "species_id",
                "fishery_name",
                "catch_date",
                "catch_weight",
                "fishing_method",
                "gear_type",
                "fishing_days",
                "average_length",
                "catch_number",
                "fish_length",
                "fish_weight",
                "catch_length",
                "location_id",
                "catch_id",
                "vessel_id",
                "net_mesh_size",
                "method_id"
            ],
            "SpeciesData": [
                "sample_id",
                "species_id",
                "weight",
                "catch_id",
                "length",
                "catch_date",
                "depth",
                "individuals_caught"
            ]
        }
    },
    {
        "id": 41,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'patients': ['first_name', 'last_name', 'patient_id', 'phone_number', 'email', 'phone'], 'medical_history': ['patient_id', 'medical_condition', 'diagnosis'], 'prescription': ['patient_id', 'prescription_id', 'prescription_date', 'type', 'practitioner_id'], 'prescription_items': ['formula_id', 'prescription_id'], 'herbal_formulas': ['formula_id', 'formula_name', 'price', 'num_ingredients', 'ingredients', 'name']} and \n# the user question: Retrieve the names and email addresses of patients who have been prescribed herbal formulas containing \"Dang Gui\" and have also been diagnosed with a medical condition containing the word \"pain\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of patients who have been prescribed herbal formulas containing \"Dang Gui\" and have also been diagnosed with a medical condition containing the word \"pain\":",
        "output": "SELECT DISTINCT p.first_name, p.last_name, p.email FROM patients p JOIN medical_history mh ON p.patient_id = mh.patient_id JOIN prescription pr ON p.patient_id = pr.patient_id JOIN prescription_items pi ON pr.prescription_id = pi.prescription_id JOIN herbal_formulas hf ON pi.formula_id = hf.formula_id WHERE hf.formula_name LIKE '%Dang Gui%' AND mh.medical_condition LIKE '%pain%';",
        "schema": "acupuncture",
        "processed_schema_content": {
            "patients": [
                "first_name",
                "last_name",
                "patient_id",
                "phone_number",
                "email",
                "phone"
            ],
            "medical_history": [
                "patient_id",
                "medical_condition",
                "diagnosis"
            ],
            "prescription": [
                "patient_id",
                "prescription_id",
                "prescription_date",
                "type",
                "practitioner_id"
            ],
            "prescription_items": [
                "formula_id",
                "prescription_id"
            ],
            "herbal_formulas": [
                "formula_id",
                "formula_name",
                "price",
                "num_ingredients",
                "ingredients",
                "name"
            ]
        }
    },
    {
        "id": 42,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'plants': ['name', 'id', 'category_id', 'updated_at', 'created_at', 'description', 'min_temp', 'max_temp', 'water_requirement', 'light_requirement', 'watering_schedule', 'width', 'height', 'flowering', 'min_temp_tolerance', 'max_temp_tolerance', 'category', 'spacing_requirement', 'bloomed', 'water_usage', 'last_watered', 'sun_exposure', 'price', 'plant_date', 'harvest_date', 'bed_id', 'suitable_exposure', 'Rosemary', 'is_edible', 'species', 'plant_name', 'soil_type', 'bloom_time', 'max_height', 'flowering_season', 'plant_type', 'sunlight', 'garden_id', 'soil_ph'], 'garden_plants': ['garden_id', 'plant_id', 'variety_id', 'id', 'updated_at', 'quantity', 'created_at', 'description', 'name', 'plant_variety_id', 'planted_on', 'plant_density', 'garden_bed_id', 'last_watered'], 'gardens': ['location', 'description', 'created_at', 'name', 'id', 'owner_id', 'updated_at', 'size', 'user_id', 'soil_type']} and \n# the user question: Retrieve the names of all the gardens that have at least one plant with a light requirement of \"Full Sun\" and a water requirement of less than 250 ml per week.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all the gardens that have at least one plant with a light requirement of \"Full Sun\" and a water requirement of less than 250 ml per week.",
        "output": "SELECT DISTINCT gardens.name FROM gardens INNER JOIN garden_plants ON gardens.id = garden_plants.garden_id INNER JOIN plants ON garden_plants.plant_id = plants.id WHERE plants.light_requirement = 'Full Sun' AND plants.water_requirement < 250;",
        "schema": "gardening",
        "processed_schema_content": {
            "plants": [
                "name",
                "id",
                "category_id",
                "updated_at",
                "created_at",
                "description",
                "min_temp",
                "max_temp",
                "water_requirement",
                "light_requirement",
                "watering_schedule",
                "width",
                "height",
                "flowering",
                "min_temp_tolerance",
                "max_temp_tolerance",
                "category",
                "spacing_requirement",
                "bloomed",
                "water_usage",
                "last_watered",
                "sun_exposure",
                "price",
                "plant_date",
                "harvest_date",
                "bed_id",
                "suitable_exposure",
                "Rosemary",
                "is_edible",
                "species",
                "plant_name",
                "soil_type",
                "bloom_time",
                "max_height",
                "flowering_season",
                "plant_type",
                "sunlight",
                "garden_id",
                "soil_ph"
            ],
            "garden_plants": [
                "garden_id",
                "plant_id",
                "variety_id",
                "id",
                "updated_at",
                "quantity",
                "created_at",
                "description",
                "name",
                "plant_variety_id",
                "planted_on",
                "plant_density",
                "garden_bed_id",
                "last_watered"
            ],
            "gardens": [
                "location",
                "description",
                "created_at",
                "name",
                "id",
                "owner_id",
                "updated_at",
                "size",
                "user_id",
                "soil_type"
            ]
        }
    },
    {
        "id": 43,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Performances': ['rating', 'comedian_id', 'show_id', 'performance_id', 'special_id', 'venue_id', 'production_id', 'performance_date'], 'Shows': ['year', 'show_id', 'title', 'description', 'location', 'venue_id', 'duration', 'network', 'release_date', 'Sticks', 'date_recorded', 'name', 'duration_minutes', 'recorded_year', 'date'], 'Tags': ['tag_id', 'tag'], 'Jokes': ['setup', 'punchline', 'comedian_id', 'joke_id'], 'Joke_Tags': ['tag_id', 'joke_id']} and \n# the user question: Retrieve the titles and release years of all shows that have at least one comedian who has a joke with the tag \"family\" in the setup and the tag \"parenting\" in the punchline.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the titles and release years of all shows that have at least one comedian who has a joke with the tag \"family\" in the setup and the tag \"parenting\" in the punchline.",
        "output": "SELECT DISTINCT s.title, s.year FROM Shows s JOIN Performances p ON p.show_id = s.show_id JOIN Jokes j ON j.comedian_id = p.comedian_id JOIN Joke_Tags jt ON jt.joke_id = j.joke_id JOIN Tags t ON t.tag_id = jt.tag_id WHERE t.tag = 'family' OR t.tag = 'parenting' GROUP BY s.title, s.year;",
        "schema": "stand-up_comedy",
        "processed_schema_content": {
            "Performances": [
                "rating",
                "comedian_id",
                "show_id",
                "performance_id",
                "special_id",
                "venue_id",
                "production_id",
                "performance_date"
            ],
            "Shows": [
                "year",
                "show_id",
                "title",
                "description",
                "location",
                "venue_id",
                "duration",
                "network",
                "release_date",
                "Sticks",
                "date_recorded",
                "name",
                "duration_minutes",
                "recorded_year",
                "date"
            ],
            "Tags": [
                "tag_id",
                "tag"
            ],
            "Jokes": [
                "setup",
                "punchline",
                "comedian_id",
                "joke_id"
            ],
            "Joke_Tags": [
                "tag_id",
                "joke_id"
            ]
        }
    },
    {
        "id": 44,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Director': ['director_id', 'name', 'gender', 'has_won_academy_award', 'director_name', 'birth_year']} and \n# the user question: Retrieve the title of the movie, the name of the director, and the release year for all movies where the director's name contains the word \"Lee\" and the release year is after 2005.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the title of the movie, the name of the director, and the release year for all movies where the director's name contains the word \"Lee\" and the release year is after 2005.",
        "output": "SELECT Movie.title, Director.name, Movie.release_year FROM Movie JOIN Director ON Movie.director_id = Director.director_id WHERE Director.name LIKE '%Lee%' AND Movie.release_year > 2005;",
        "schema": "romance_films",
        "processed_schema_content": {
            "Movie": [
                "movie_id",
                "title",
                "release_year",
                "director_id",
                "runtime",
                "production_company_id",
                "budget",
                "release_date",
                "producer_id",
                "genre"
            ],
            "Director": [
                "director_id",
                "name",
                "gender",
                "has_won_academy_award",
                "director_name",
                "birth_year"
            ]
        }
    },
    {
        "id": 45,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Client': ['client_id', 'name', 'email', 'phone_number', 'industry_id', 'location_id', 'industry', 'budget', 'first_name', 'last_name', 'state', 'city', 'company_name', 'annual_revenue'], 'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months'], 'Story': ['story_id', 'headline', 'content', 'date_published', 'outlet_id', 'campaign_id', 'date', 'journalist_id', 'sentiment_score', 'body', 'views', 'shares', 'likes', 'clicks', 'impressions', 'comments', 'text', 'publication_date', 'word_count'], 'MediaOutlet': ['outlet_id', 'name', 'outlet_type', 'state', 'city', 'contact_info', 'rating_id', 'language', 'location_id', 'email', 'circulation']} and \n# the user question: Retrieve the names and email addresses of all clients who have at least one campaign that has been featured in a story that was published in the last 90 days and has a sentiment score greater than 0.6 and has been featured in a story that had more than 2000 shares and was published in a media outlet with a type of \"Online\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all clients who have at least one campaign that has been featured in a story that was published in the last 90 days and has a sentiment score greater than 0.6 and has been featured in a story that had more than 2000 shares and was published in a media outlet with a type of \"Online\":",
        "output": "SELECT DISTINCT Client.name, Client.email FROM Client INNER JOIN Campaign ON Client.client_id = Campaign.client_id INNER JOIN Story ON Campaign.campaign_id = Story.campaign_id INNER JOIN MediaOutlet ON Story.outlet_id = MediaOutlet.outlet_id WHERE Story.date BETWEEN date('now', '-90 days') AND date('now') AND Story.sentiment_score > 0.6 AND Story.shares > 2000 AND MediaOutlet.outlet_type = 'Online';",
        "schema": "public_relations",
        "processed_schema_content": {
            "Client": [
                "client_id",
                "name",
                "email",
                "phone_number",
                "industry_id",
                "location_id",
                "industry",
                "budget",
                "first_name",
                "last_name",
                "state",
                "city",
                "company_name",
                "annual_revenue"
            ],
            "Campaign": [
                "campaign_id",
                "name",
                "start_date",
                "end_date",
                "client_id",
                "Charity",
                "Drive",
                "Launch",
                "Product",
                "Rebranding",
                "launch_date",
                "impressions",
                "completed",
                "create_date",
                "budget",
                "brand_id",
                "total_spending",
                "cost",
                "invoiced",
                "total_budget",
                "product_id",
                "duration_months"
            ],
            "Story": [
                "story_id",
                "headline",
                "content",
                "date_published",
                "outlet_id",
                "campaign_id",
                "date",
                "journalist_id",
                "sentiment_score",
                "body",
                "views",
                "shares",
                "likes",
                "clicks",
                "impressions",
                "comments",
                "text",
                "publication_date",
                "word_count"
            ],
            "MediaOutlet": [
                "outlet_id",
                "name",
                "outlet_type",
                "state",
                "city",
                "contact_info",
                "rating_id",
                "language",
                "location_id",
                "email",
                "circulation"
            ]
        }
    },
    {
        "id": 47,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Items': ['item_id', 'game_id'], 'Items': ['item_name', 'item_id', 'item_description', 'rarity_id'], 'Game_Levels': ['level_id', 'game_id'], 'Levels': ['level_name', 'level_id', 'difficulty_id', 'duration_id']} and \n# the user question: Find the names of all games that have a level with a name containing \"Tokyo\" and an item with a name containing \"potion\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all games that have a level with a name containing \"Tokyo\" and an item with a name containing \"potion\".",
        "output": "SELECT DISTINCT Games.game_title FROM Games INNER JOIN Game_Levels ON Games.game_id = Game_Levels.game_id INNER JOIN Levels ON Game_Levels.level_id = Levels.level_id INNER JOIN Game_Items ON Games.game_id = Game_Items.game_id INNER JOIN Items ON Game_Items.item_id = Items.item_id WHERE Levels.level_name LIKE '%Tokyo%' AND Items.item_name LIKE '%potion%';",
        "schema": "game_design",
        "processed_schema_content": {
            "Games": [
                "game_id",
                "game_title",
                "game_publisher",
                "game_release_date",
                "game_developer"
            ],
            "Game_Items": [
                "item_id",
                "game_id"
            ],
            "Items": [
                "item_name",
                "item_id",
                "item_description",
                "rarity_id"
            ],
            "Game_Levels": [
                "level_id",
                "game_id"
            ],
            "Levels": [
                "level_name",
                "level_id",
                "difficulty_id",
                "duration_id"
            ]
        }
    },
    {
        "id": 49,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Programs': ['program_id', 'program_name', 'program_description', 'start_date', 'end_date', 'status', 'Program'], 'Goals': ['goal_id', 'goal_name', 'goal_description', 'goal_due_date', 'user_id', 'program_id', 'goal_target', 'goal_type', 'goal_end_date', 'goal_target_date', 'goal_start_date', 'goal_status', 'goal_value']} and \n# the user question: Find the name and email address of the user who has the most completed nutrition goals in the program with name \"Healthy Eating Program\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and email address of the user who has the most completed nutrition goals in the program with name \"Healthy Eating Program\":",
        "output": "SELECT Users.first_name, Users.last_name, Users.email, COUNT(Goals.goal_id) AS num_completed_nutrition_goals FROM Users JOIN Goals ON Users.user_id = Goals.user_id JOIN Programs ON Goals.program_id = Programs.program_id WHERE Programs.program_name = 'Healthy Eating Program' AND Goals.goal_type = 'Nutrition' AND Goals.goal_status = 'Completed' GROUP BY Users.user_id ORDER BY num_completed_nutrition_goals DESC LIMIT 1;",
        "schema": "health_and_wellness_programs",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "first_name",
                "last_name",
                "email",
                "password",
                "phone_number",
                "address",
                "age",
                "gender",
                "bmi",
                "goal_id"
            ],
            "Programs": [
                "program_id",
                "program_name",
                "program_description",
                "start_date",
                "end_date",
                "status",
                "Program"
            ],
            "Goals": [
                "goal_id",
                "goal_name",
                "goal_description",
                "goal_due_date",
                "user_id",
                "program_id",
                "goal_target",
                "goal_type",
                "goal_end_date",
                "goal_target_date",
                "goal_start_date",
                "goal_status",
                "goal_value"
            ]
        }
    },
    {
        "id": 52,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Board': ['model', 'flex', 'brand', 'board_id', 'camber_profile', 'length', 'width', 'camber', 'shape', 'stiffness_rating', 'flex_rating', 'rocker', 'model_name']} and \n# the user question: Retrieve the brand and model of all snowboards with a flex of 8 and a camber profile of \"Rocker\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the brand and model of all snowboards with a flex of 8 and a camber profile of \"Rocker\".",
        "output": "SELECT brand, model FROM Board WHERE flex = 8 AND camber_profile = 'Rocker';",
        "schema": "snowboarding",
        "processed_schema_content": {
            "Board": [
                "model",
                "flex",
                "brand",
                "board_id",
                "camber_profile",
                "length",
                "width",
                "camber",
                "shape",
                "stiffness_rating",
                "flex_rating",
                "rocker",
                "model_name"
            ]
        }
    },
    {
        "id": 53,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'production': ['theater_name', 'end_date', 'musical_name', 'start_date', 'rating', 'composer', 'lyricist', 'duration', 'venue', 'year', 'director', 'production_id', 'runtime_minutes', 'musical_id', 'theater_id', 'id', 'ticket_price']} and \n# the user question: Display the name and date of all the musicals that are currently playing in theaters.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Display the name and date of all the musicals that are currently playing in theaters.",
        "output": "SELECT musical_name, date FROM production WHERE date >= DATE('now')",
        "schema": "musical_theater",
        "processed_schema_content": {
            "production": [
                "theater_name",
                "end_date",
                "musical_name",
                "start_date",
                "rating",
                "composer",
                "lyricist",
                "duration",
                "venue",
                "year",
                "director",
                "production_id",
                "runtime_minutes",
                "musical_id",
                "theater_id",
                "id",
                "ticket_price"
            ]
        }
    },
    {
        "id": 54,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'users': ['password', 'email', 'name', 'created_at', 'id', 'country', 'age', 'region', 'email_verified', 'username', 'date_of_birth', 'countr', 'phone_number', 'device_type', 'user_id', 'last_login'], 'app_reviews': ['app_id', 'rating', 'user_id', 'comment', 'created_at', 'status', 'id', 'updated_at', 'posted_at', 'num_reviews'], 'apps': ['name', 'id', 'price', 'created_at', 'category_id', 'updated_at', 'description', 'developer_id', 'rating', 'app_id', 'developer', 'release_date', 'downloads', 'version', 'price_type', 'status', 'creation_date', 'app_name', 'XYZ', 'category']} and \n# the user question: Retrieve the `name` and `developer` of all apps that have been reviewed by a user with `username` \"jane_doe\" and have a rating of 1:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the `name` and `developer` of all apps that have been reviewed by a user with `username` \"jane_doe\" and have a rating of 1:",
        "output": "SELECT a.name, a.developer FROM apps a INNER JOIN app_reviews ar ON a.id = ar.app_id INNER JOIN users u ON ar.user_id = u.id AND u.username = 'jane_doe' WHERE ar.rating = 1;",
        "schema": "mobile_app_development",
        "processed_schema_content": {
            "users": [
                "password",
                "email",
                "name",
                "created_at",
                "id",
                "country",
                "age",
                "region",
                "email_verified",
                "username",
                "date_of_birth",
                "countr",
                "phone_number",
                "device_type",
                "user_id",
                "last_login"
            ],
            "app_reviews": [
                "app_id",
                "rating",
                "user_id",
                "comment",
                "created_at",
                "status",
                "id",
                "updated_at",
                "posted_at",
                "num_reviews"
            ],
            "apps": [
                "name",
                "id",
                "price",
                "created_at",
                "category_id",
                "updated_at",
                "description",
                "developer_id",
                "rating",
                "app_id",
                "developer",
                "release_date",
                "downloads",
                "version",
                "price_type",
                "status",
                "creation_date",
                "app_name",
                "XYZ",
                "category"
            ]
        }
    },
    {
        "id": 55,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'plants': ['endangered', 'family_name', 'flower_color', 'height', 'plant_id', 'medicinal_use', 'native_region', 'plant_name', 'lifespan', 'edible', 'scientific_name', 'habitat', 'growth_habit', 'description', 'poisonous', 'origin_country', 'drought_tolerant', 'indoor_plant', 'bloom_time', 'edible_fruit', 'fruit_type', 'light_requirement', 'fruit_color', 'price', 'min_temp_tolerance', 'max_height', 'moisture_tolerance', 'growth_rate', 'flowering_time', 'ph_tolerance', 'spread', 'propagation', 'common_name', 'plant_type', 'bloom_period', 'bloom_color', 'hardiness_zone', 'in_stock', 'min_height', 'genus_id', 'min_temp', 'water_need', 'native_state', 'max_temp', 'light_need', 'name', 'species', 'conservation_status', 'family', 'genus', 'id', 'temperature', 'moisture', 'origin', 'mature_height', 'water_needed_per_week', 'medicinal_properties'], 'nurseries': ['address', 'nursery_id', 'nursery_name', 'phone', 'email', 'location_state', 'location_city', 'nursery_state', 'rating', 'nursery_location'], 'nursery_plants': ['nursery_id', 'plant_id', 'rating']} and \n# the user question: Find all nurseries that sell plants with a maximum height of at least 2 meters and have a price lower than $50.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all nurseries that sell plants with a maximum height of at least 2 meters and have a price lower than $50.",
        "output": "SELECT nursery_name FROM nurseries WHERE nursery_id IN ( SELECT nursery_id FROM nursery_plants WHERE plant_id IN ( SELECT plant_id FROM plants WHERE max_height >= 2 AND price < 50 ) );",
        "schema": "botany",
        "processed_schema_content": {
            "plants": [
                "endangered",
                "family_name",
                "flower_color",
                "height",
                "plant_id",
                "medicinal_use",
                "native_region",
                "plant_name",
                "lifespan",
                "edible",
                "scientific_name",
                "habitat",
                "growth_habit",
                "description",
                "poisonous",
                "origin_country",
                "drought_tolerant",
                "indoor_plant",
                "bloom_time",
                "edible_fruit",
                "fruit_type",
                "light_requirement",
                "fruit_color",
                "price",
                "min_temp_tolerance",
                "max_height",
                "moisture_tolerance",
                "growth_rate",
                "flowering_time",
                "ph_tolerance",
                "spread",
                "propagation",
                "common_name",
                "plant_type",
                "bloom_period",
                "bloom_color",
                "hardiness_zone",
                "in_stock",
                "min_height",
                "genus_id",
                "min_temp",
                "water_need",
                "native_state",
                "max_temp",
                "light_need",
                "name",
                "species",
                "conservation_status",
                "family",
                "genus",
                "id",
                "temperature",
                "moisture",
                "origin",
                "mature_height",
                "water_needed_per_week",
                "medicinal_properties"
            ],
            "nurseries": [
                "address",
                "nursery_id",
                "nursery_name",
                "phone",
                "email",
                "location_state",
                "location_city",
                "nursery_state",
                "rating",
                "nursery_location"
            ],
            "nursery_plants": [
                "nursery_id",
                "plant_id",
                "rating"
            ]
        }
    },
    {
        "id": 56,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Carvings': ['carving_id', 'name', 'description', 'price', 'image_url', 'vendor_id', 'stock', 'size', 'last_sold_date', 'cost', 'material_id', 'creation_date', 'type_id', 'weight', 'date_sold', 'is_available', 'width', 'length', 'weight_kg', 'carving_type_id'], 'Categories': ['category_id', 'name'], 'Carving_Categories': ['carving_id', 'category_id', 'category_name', 'material', 'animal_type'], 'Reviews': ['review_id', 'carving_id', 'user_id', 'rating', 'comment', 'review_date']} and \n# the user question: Find the average rating for each category:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average rating for each category:",
        "output": "SELECT cat.name, AVG(r.rating) AS average_rating FROM Categories cat JOIN Carving_Categories cc ON cat.category_id = cc.category_id JOIN Carvings c ON cc.carving_id = c.carving_id LEFT JOIN Reviews r ON c.carving_id = r.carving_id GROUP BY cat.category_id;",
        "schema": "soapstone_carving",
        "processed_schema_content": {
            "Carvings": [
                "carving_id",
                "name",
                "description",
                "price",
                "image_url",
                "vendor_id",
                "stock",
                "size",
                "last_sold_date",
                "cost",
                "material_id",
                "creation_date",
                "type_id",
                "weight",
                "date_sold",
                "is_available",
                "width",
                "length",
                "weight_kg",
                "carving_type_id"
            ],
            "Categories": [
                "category_id",
                "name"
            ],
            "Carving_Categories": [
                "carving_id",
                "category_id",
                "category_name",
                "material",
                "animal_type"
            ],
            "Reviews": [
                "review_id",
                "carving_id",
                "user_id",
                "rating",
                "comment",
                "review_date"
            ]
        }
    },
    {
        "id": 59,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Inventory': ['product_id', 'supplier_id', 'quantity', 'inventory_id', 'units_in_stock', 'quantity_on_hand', 'expiration_date', 'expected_arrival_date', 'quantity_on_order'], 'Suppliers': ['supplier_name', 'supplier_id', 'phone_number', 'address', 'email', 'country', 'contact_name', 'state', 'city', 'phone', 'company_name', 'Canada', 'USA', 'supplier_rating', 'zip'], 'Sale_Items': ['product_id', 'sale_id', 'quantity', 'sale_item_id', 'customer_id', 'unit_price', 'discount_code', 'sale_date', 'price'], 'Product_Ratings': ['rating', 'product_id']} and \n# the user question: Find the names and total revenue for all products that have been sold at least 100 times and have a rating of 4 or higher, and were supplied by a company based in the United States.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and total revenue for all products that have been sold at least 100 times and have a rating of 4 or higher, and were supplied by a company based in the United States.",
        "output": "SELECT Products.product_name, SUM(Sale_Items.quantity * Products.price) AS total_revenue FROM Products INNER JOIN Sale_Items ON Products.product_id = Sale_Items.product_id INNER JOIN Product_Ratings ON Products.product_id = Product_Ratings.product_id INNER JOIN Inventory ON Products.product_id = Inventory.product_id INNER JOIN Suppliers ON Inventory.supplier_id = Suppliers.supplier_id WHERE Product_Ratings.rating >= 4 AND (SELECT COUNT(Sale_Items.sale_item_id) FROM Sale_Items WHERE Sale_Items.product_id = Products.product_id) >= 100 AND Suppliers.country = 'United States' GROUP BY Products.product_id ORDER BY total_revenue DESC;",
        "schema": "pharmacy",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "price",
                "description",
                "product_description",
                "supplier_id",
                "category_id",
                "units_in_stock",
                "expiration_date",
                "stock_quantity",
                "expiration_id",
                "discontinued",
                "cost_price",
                "quantity_in_stock",
                "unit_price",
                "unit_cost",
                "brand_name",
                "last_supplied_date",
                "manufacturer_name",
                "backorder"
            ],
            "Inventory": [
                "product_id",
                "supplier_id",
                "quantity",
                "inventory_id",
                "units_in_stock",
                "quantity_on_hand",
                "expiration_date",
                "expected_arrival_date",
                "quantity_on_order"
            ],
            "Suppliers": [
                "supplier_name",
                "supplier_id",
                "phone_number",
                "address",
                "email",
                "country",
                "contact_name",
                "state",
                "city",
                "phone",
                "company_name",
                "Canada",
                "USA",
                "supplier_rating",
                "zip"
            ],
            "Sale_Items": [
                "product_id",
                "sale_id",
                "quantity",
                "sale_item_id",
                "customer_id",
                "unit_price",
                "discount_code",
                "sale_date",
                "price"
            ],
            "Product_Ratings": [
                "rating",
                "product_id"
            ]
        }
    },
    {
        "id": 60,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'customers': ['customer_id', 'customer_address', 'customer_name', 'email', 'state', 'first_name', 'last_name', 'name', 'id', 'contact_name', 'country', 'address', 'city'], 'orders': ['customer_id', 'order_id', 'order_date', 'payment_status', 'total_amount', 'delivery_status', 'salesperson_id', 'shipping_state', 'employee_id', 'shipped_date', 'product_id', 'status']} and \n# the user question: Retrieve the name and email of all customers who have not placed an order yet.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all customers who have not placed an order yet.",
        "output": "SELECT customer_name, email FROM customers WHERE customer_id NOT IN ( SELECT DISTINCT customer_id FROM orders );",
        "schema": "glass_etching",
        "processed_schema_content": {
            "customers": [
                "customer_id",
                "customer_address",
                "customer_name",
                "email",
                "state",
                "first_name",
                "last_name",
                "name",
                "id",
                "contact_name",
                "country",
                "address",
                "city"
            ],
            "orders": [
                "customer_id",
                "order_id",
                "order_date",
                "payment_status",
                "total_amount",
                "delivery_status",
                "salesperson_id",
                "shipping_state",
                "employee_id",
                "shipped_date",
                "product_id",
                "status"
            ]
        }
    },
    {
        "id": 61,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Titanic': ['Age', 'Sex', 'Survived', 'Fare', 'Pclass', 'SibSp', 'Parch', 'Embarked', 'Cabin']} and \n# the user question: What is the total number of passengers in the 'Titanic' dataset who are in the 'female' gender category and have a 'Pclass' value of 3 and have survived?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What is the total number of passengers in the 'Titanic' dataset who are in the 'female' gender category and have a 'Pclass' value of 3 and have survived?",
        "output": "SELECT COUNT(*) FROM Titanic WHERE Sex = 'female' AND Survived = 1 AND Pclass = 3;",
        "schema": "data_mining",
        "processed_schema_content": {
            "Titanic": [
                "Age",
                "Sex",
                "Survived",
                "Fare",
                "Pclass",
                "SibSp",
                "Parch",
                "Embarked",
                "Cabin"
            ]
        }
    },
    {
        "id": 62,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Event': ['event_id', 'event_name', 'event_date', 'location_id', 'event_category_id', 'event_type_id', 'location', 'venue_id', 'start_date', 'end_date', 'category', 'event_code', 'EVT', 'organizer_id', 'duration', 'name', 'Expo', 'Tech', 'country', 'category_id', 'city', 'ticket_price', 'date', 'start_time', 'end_time', 'min_age_requirement', 'event_type', 'capacity', 'registration_deadline', 'num_attendees', 'min_age', 'duration_hours', 'registration_fee', 'price'], 'Attendee': ['attendee_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'date_of_birth', 'job_title', 'city', 'age', 'email'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID'], 'Payment': ['payment_id', 'registration_id', 'payment_date', 'amount', 'credit_card_id', 'payment_method_id', 'payment_type']} and \n# the user question: What is the total revenue generated from all payments made by attendees who have registered for events in the \"Education\" category and have a job title of \"Teacher\"?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What is the total revenue generated from all payments made by attendees who have registered for events in the \"Education\" category and have a job title of \"Teacher\"?",
        "output": "SELECT SUM(Payment.amount) AS total_revenue FROM Payment INNER JOIN Registration ON Payment.registration_id = Registration.registration_id INNER JOIN Attendee ON Registration.attendee_id = Attendee.attendee_id INNER JOIN Event ON Registration.event_id = Event.event_id WHERE Event.category = 'Education' AND Attendee.job_title = 'Teacher';",
        "schema": "event_management",
        "processed_schema_content": {
            "Event": [
                "event_id",
                "event_name",
                "event_date",
                "location_id",
                "event_category_id",
                "event_type_id",
                "location",
                "venue_id",
                "start_date",
                "end_date",
                "category",
                "event_code",
                "EVT",
                "organizer_id",
                "duration",
                "name",
                "Expo",
                "Tech",
                "country",
                "category_id",
                "city",
                "ticket_price",
                "date",
                "start_time",
                "end_time",
                "min_age_requirement",
                "event_type",
                "capacity",
                "registration_deadline",
                "num_attendees",
                "min_age",
                "duration_hours",
                "registration_fee",
                "price"
            ],
            "Attendee": [
                "attendee_id",
                "first_name",
                "last_name",
                "email_address",
                "phone_number",
                "date_of_birth",
                "job_title",
                "city",
                "age",
                "email"
            ],
            "Registration": [
                "registration_id",
                "attendee_id",
                "event_id",
                "registration_date",
                "num_tickets",
                "attended",
                "fee",
                "registration_status",
                "payment_status",
                "payment_method",
                "num_attendees",
                "EventName",
                "AttendeeID"
            ],
            "Payment": [
                "payment_id",
                "registration_id",
                "payment_date",
                "amount",
                "credit_card_id",
                "payment_method_id",
                "payment_type"
            ]
        }
    },
    {
        "id": 63,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Series': ['publisher_id', 'title', 'id', 'universe', 'start_date', 'main_protagonist_id', 'rating'], 'Creator': ['name', 'id', 'Lee', 'Jim', 'Fabry', 'Glenn', 'McKean'], 'Creator_Appearance': ['creator_id', 'issue_id', 'series_id', 'role', 'volume_id']} and \n# the user question: Find the names of all writers who have written issues for both Batman and Spider-Man series.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all writers who have written issues for both Batman and Spider-Man series.",
        "output": "SELECT c.name FROM Creator c JOIN Creator_Appearance ca1 ON c.id = ca1.creator_id JOIN Creator_Appearance ca2 ON c.id = ca2.creator_id JOIN Issue i1 ON ca1.issue_id = i1.id JOIN Issue i2 ON ca2.issue_id = i2.id JOIN Series s1 ON i1.series_id = s1.id AND s1.title LIKE '%Batman%' JOIN Series s2 ON i2.series_id = s2.id AND s2.title LIKE '%Spider-Man%' WHERE ca1.role = 'writer' AND ca2.role = 'writer';",
        "schema": "graphic_novels",
        "processed_schema_content": {
            "Issue": [
                "volume_id",
                "id",
                "title",
                "number",
                "release_date",
                "published_year",
                "publication_date",
                "series_id",
                "publication_year",
                "page_count",
                "sales",
                "has_variant_cover",
                "cover_price",
                "cover_date",
                "cover_art_id",
                "variant_cover"
            ],
            "Series": [
                "publisher_id",
                "title",
                "id",
                "universe",
                "start_date",
                "main_protagonist_id",
                "rating"
            ],
            "Creator": [
                "name",
                "id",
                "Lee",
                "Jim",
                "Fabry",
                "Glenn",
                "McKean"
            ],
            "Creator_Appearance": [
                "creator_id",
                "issue_id",
                "series_id",
                "role",
                "volume_id"
            ]
        }
    },
    {
        "id": 64,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Seamounts': ['seamount_id', 'seamount_name', 'location', 'height', 'area', 'depth']} and \n# the user question: What is the name and location of the seamount in the Seamounts table that has the largest area?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What is the name and location of the seamount in the Seamounts table that has the largest area?",
        "output": "SELECT seamount_name, location FROM Seamounts WHERE area = (SELECT MAX(area) FROM Seamounts);",
        "schema": "oceanography",
        "processed_schema_content": {
            "Seamounts": [
                "seamount_id",
                "seamount_name",
                "location",
                "height",
                "area",
                "depth"
            ]
        }
    },
    {
        "id": 65,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Credit_Card_Dataset': ['Credit_Limit', 'Education', 'Marital_Status', 'Gender', 'Age', 'Education_Level', 'Card_Type', 'Balance']} and \n# the user question: What is the sum of the 'Credit Limit' column in the 'Credit Card Dataset' for each 'Card Type' value?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What is the sum of the 'Credit Limit' column in the 'Credit Card Dataset' for each 'Card Type' value?",
        "output": "SELECT Card_Type, SUM(Credit_Limit) FROM Credit_Card_Dataset GROUP BY Card_Type;",
        "schema": "data_mining",
        "processed_schema_content": {
            "Credit_Card_Dataset": [
                "Credit_Limit",
                "Education",
                "Marital_Status",
                "Gender",
                "Age",
                "Education_Level",
                "Card_Type",
                "Balance"
            ]
        }
    },
    {
        "id": 66,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Movie': ['movie_id', 'title', 'release_year', 'director', 'runtime', 'budget', 'box_office', 'rating', 'release_date', 'imdb_rating', 'director_id', 'production_company_id', 'box_office_gross'], 'Genre': ['genre_id', 'name'], 'MovieGenre': ['movie_id', 'genre_id'], 'Review': ['review_id', 'movie_id', 'reviewer_id', 'rating', 'review_text']} and \n# the user question: Show the titles and release dates of all Western movies that were released in the 1960s and have an average rating of at least 8.0, sorted by release date in ascending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Show the titles and release dates of all Western movies that were released in the 1960s and have an average rating of at least 8.0, sorted by release date in ascending order.",
        "output": "SELECT Movie.title, Movie.release_date FROM Movie JOIN Review ON Movie.movie_id = Review.movie_id JOIN MovieGenre ON Movie.movie_id = MovieGenre.movie_id JOIN Genre ON MovieGenre.genre_id = Genre.genre_id WHERE Genre.name = 'Western' AND strftime('%Y', Movie.release_date) BETWEEN '1960' AND '1969' GROUP BY Movie.movie_id HAVING AVG(Review.rating) >= 8.0 ORDER BY Movie.release_date ASC;",
        "schema": "western_films",
        "processed_schema_content": {
            "Movie": [
                "movie_id",
                "title",
                "release_year",
                "director",
                "runtime",
                "budget",
                "box_office",
                "rating",
                "release_date",
                "imdb_rating",
                "director_id",
                "production_company_id",
                "box_office_gross"
            ],
            "Genre": [
                "genre_id",
                "name"
            ],
            "MovieGenre": [
                "movie_id",
                "genre_id"
            ],
            "Review": [
                "review_id",
                "movie_id",
                "reviewer_id",
                "rating",
                "review_text"
            ]
        }
    },
    {
        "id": 67,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Tasks': ['task_id', 'task_name', 'project_id', 'start_date', 'end_date', 'status', 'assigned_to', 'created_by', 'created_date', 'due_date', 'completed_date', 'completed_by', 'department_id', 'priority', 'duration', 'Complete', 'completion_date', 'estimated_duration', 'completed_on', 'name', 'task_type', 'id', 'completed', 'actual_duration', 'budget', 'description', 'open_date'], 'Users': ['user_id', 'name', 'email', 'password', 'role', 'department_id', 'role_id'], 'Subtasks': ['subtask_id', 'subtask_name', 'task_id', 'start_date', 'end_date', 'status', 'assigned_to', 'priority']} and \n# the user question: Example 3: Retrieve the task names, assigned user names, and completion percentage for tasks that have no subtasks and are overdue,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Example 3: Retrieve the task names, assigned user names, and completion percentage for tasks that have no subtasks and are overdue",
        "output": "SELECT Tasks.task_name, Users.name as assigned_user, (COUNT(CASE WHEN Tasks.status = 'Complete' THEN 1 ELSE NULL END) / COUNT(Tasks.task_id) * 100) as completion_percentage FROM Tasks INNER JOIN Users ON Tasks.assigned_to = Users.name LEFT JOIN Subtasks ON Tasks.task_id = Subtasks.task_id WHERE Subtasks.subtask_id IS NULL AND Tasks.due_date < DATE('now') AND Tasks.status != 'Complete' GROUP BY Tasks.task_id;",
        "schema": "project_management",
        "processed_schema_content": {
            "Tasks": [
                "task_id",
                "task_name",
                "project_id",
                "start_date",
                "end_date",
                "status",
                "assigned_to",
                "created_by",
                "created_date",
                "due_date",
                "completed_date",
                "completed_by",
                "department_id",
                "priority",
                "duration",
                "Complete",
                "completion_date",
                "estimated_duration",
                "completed_on",
                "name",
                "task_type",
                "id",
                "completed",
                "actual_duration",
                "budget",
                "description",
                "open_date"
            ],
            "Users": [
                "user_id",
                "name",
                "email",
                "password",
                "role",
                "department_id",
                "role_id"
            ],
            "Subtasks": [
                "subtask_id",
                "subtask_name",
                "task_id",
                "start_date",
                "end_date",
                "status",
                "assigned_to",
                "priority"
            ]
        }
    },
    {
        "id": 68,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Review': ['reviewer_id', 'movie_id', 'rating'], 'Reviewer': ['reviewer_id', 'name']} and \n# the user question: Retrieve the names of reviewers who have given the highest rating to all movies they reviewed,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of reviewers who have given the highest rating to all movies they reviewed",
        "output": "SELECT rev.name FROM Reviewer rev WHERE NOT EXISTS (SELECT r.rating FROM Review r WHERE r.reviewer_id = rev.reviewer_id AND r.rating < (SELECT MAX(rating) FROM Review WHERE reviewer_id = rev.reviewer_id));",
        "schema": "movies",
        "processed_schema_content": {
            "Review": [
                "reviewer_id",
                "movie_id",
                "rating"
            ],
            "Reviewer": [
                "reviewer_id",
                "name"
            ]
        }
    },
    {
        "id": 69,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Photographers': ['photographer_id', 'name', 'num_photos_sold', 'rating', 'city', 'state', 'photographer_name', 'stat', 'photo_count', 'experience_start_date', 'Total_Earnings', 'id'], 'Photos': ['photo_id', 'photographer_id', 'category_id', 'date_sold', 'price', 'num_sold', 'cost_of_production', 'num_views', 'rating', 'num_orders', 'city', 'resolution', 'shutter_speed', 'status', 'sales', 'delivery_type', 'taken_date', 'photo_name', 'homepage_featured', 'date_taken', 'location_id', 'resolution_height', 'resolution_width', 'lens_id', 'photo_date'], 'Order_Details': ['order_id', 'photo_id', 'quantity']} and \n# the user question: Find the names and total revenue generated from photo orders for each photographer, and order the results by revenue in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and total revenue generated from photo orders for each photographer, and order the results by revenue in descending order.",
        "output": "SELECT Photographers.photographer_name, SUM(Order_Details.quantity * Photos.price) AS revenue FROM Photographers INNER JOIN Photos ON Photographers.photographer_id = Photos.photographer_id INNER JOIN Order_Details ON Photos.photo_id = Order_Details.photo_id GROUP BY Photographers.photographer_id ORDER BY revenue DESC;",
        "schema": "photography",
        "processed_schema_content": {
            "Photographers": [
                "photographer_id",
                "name",
                "num_photos_sold",
                "rating",
                "city",
                "state",
                "photographer_name",
                "stat",
                "photo_count",
                "experience_start_date",
                "Total_Earnings",
                "id"
            ],
            "Photos": [
                "photo_id",
                "photographer_id",
                "category_id",
                "date_sold",
                "price",
                "num_sold",
                "cost_of_production",
                "num_views",
                "rating",
                "num_orders",
                "city",
                "resolution",
                "shutter_speed",
                "status",
                "sales",
                "delivery_type",
                "taken_date",
                "photo_name",
                "homepage_featured",
                "date_taken",
                "location_id",
                "resolution_height",
                "resolution_width",
                "lens_id",
                "photo_date"
            ],
            "Order_Details": [
                "order_id",
                "photo_id",
                "quantity"
            ]
        }
    },
    {
        "id": 70,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Actor': ['last_name', 'actor_id', 'first_name'], 'Film_Actor': ['film_id', 'actor_id', 'rating'], 'Film_Genre': ['film_id', 'genre_id'], 'Genre': ['name', 'genre_id']} and \n# the user question: Find the actors who have appeared in at least one action film and at least one horror film:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the actors who have appeared in at least one action film and at least one horror film:",
        "output": "SELECT Actor.first_name, Actor.last_name FROM Actor INNER JOIN Film_Actor ON Actor.actor_id = Film_Actor.actor_id INNER JOIN Film_Genre ON Film_Actor.film_id = Film_Genre.film_id INNER JOIN Genre ON Film_Genre.genre_id = Genre.genre_id WHERE Genre.name IN ('Action', 'Horror') GROUP BY Actor.first_name, Actor.last_name HAVING COUNT(DISTINCT Genre.genre_id) >= 2;",
        "schema": "action_films",
        "processed_schema_content": {
            "Actor": [
                "last_name",
                "actor_id",
                "first_name"
            ],
            "Film_Actor": [
                "film_id",
                "actor_id",
                "rating"
            ],
            "Film_Genre": [
                "film_id",
                "genre_id"
            ],
            "Genre": [
                "name",
                "genre_id"
            ]
        }
    },
    {
        "id": 74,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a discount of 10% or more and a price less than $50.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a discount of 10% or more and a price less than $50.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price < 50 AND p.Product_Discount >= 0.1;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        }
    },
    {
        "id": 76,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Films': ['title', 'country', 'rating_id', 'director_id', 'film_id', 'synopsis', 'release_date', 'runtime', 'studio_id', 'composer_id', 'budget', 'box_office', 'imdb_rating', 'rotten_tomatoes_rating', 'mpaa_rating', 'production_company_id', 'oscar_wins', 'rating', 'rottentomatoes_rating', 'genre_id', 'runtime_minutes', 'release_year', 'The Conjuring', 'PG-13'], 'Directors': ['director_id', 'name', 'nationality', 'gender', 'description'], 'Films_Directors': ['film_id', 'director_id'], 'Films_Plots': ['film_id', 'plot_id', 'plot_description'], 'Plots': ['plot_type', 'plot_id'], 'Plot_Types': ['plot_type', 'supernatural', 'psychological', 'twist_ending', 'slasher', 'possession', 'found_footage', 'demonic_possession', 'serial_killer', 'zombie', 'haunted_house', 'ghost', 'vampire', 'werewolf', 'exorcism', 'creature_feature', 'paranormal', 'body_horror', 'cult', 'witch', 'psychological_horror', 'demon', 'virus', 'witchcraft', 'monster']} and \n# the user question: Query: Retrieve the names and release dates of all horror films in the database that were directed by David Cronenberg and have a \"body horror\" plot element, along with their runtime and IMDb ratings, ordered by release date in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Query: Retrieve the names and release dates of all horror films in the database that were directed by David Cronenberg and have a \"body horror\" plot element, along with their runtime and IMDb ratings, ordered by release date in descending order.",
        "output": "SELECT Films.title, Films.release_date, Films.runtime, Films.imdb_rating FROM Films JOIN Films_Directors ON Films.film_id = Films_Directors.film_id JOIN Directors ON Films_Directors.director_id = Directors.director_id JOIN Films_Plots ON Films.film_id = Films_Plots.film_id JOIN Plots ON Films_Plots.plot_id = Plots.plot_id JOIN Plot_Types ON Plots.plot_type = Plot_Types.plot_type WHERE Directors.name = 'David Cronenberg' AND Plot_Types.body_horror = 1 GROUP BY Films.film_id ORDER BY Films.release_date DESC;",
        "schema": "horror_films",
        "processed_schema_content": {
            "Films": [
                "title",
                "country",
                "rating_id",
                "director_id",
                "film_id",
                "synopsis",
                "release_date",
                "runtime",
                "studio_id",
                "composer_id",
                "budget",
                "box_office",
                "imdb_rating",
                "rotten_tomatoes_rating",
                "mpaa_rating",
                "production_company_id",
                "oscar_wins",
                "rating",
                "rottentomatoes_rating",
                "genre_id",
                "runtime_minutes",
                "release_year",
                "The Conjuring",
                "PG-13"
            ],
            "Directors": [
                "director_id",
                "name",
                "nationality",
                "gender",
                "description"
            ],
            "Films_Directors": [
                "film_id",
                "director_id"
            ],
            "Films_Plots": [
                "film_id",
                "plot_id",
                "plot_description"
            ],
            "Plots": [
                "plot_type",
                "plot_id"
            ],
            "Plot_Types": [
                "plot_type",
                "supernatural",
                "psychological",
                "twist_ending",
                "slasher",
                "possession",
                "found_footage",
                "demonic_possession",
                "serial_killer",
                "zombie",
                "haunted_house",
                "ghost",
                "vampire",
                "werewolf",
                "exorcism",
                "creature_feature",
                "paranormal",
                "body_horror",
                "cult",
                "witch",
                "psychological_horror",
                "demon",
                "virus",
                "witchcraft",
                "monster"
            ]
        }
    },
    {
        "id": 79,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue'], 'Country': ['country_id', 'name'], 'ProductionCompany': ['name', 'production_company_id', 'spouse_id']} and \n# the user question: Find the production companies that have produced at least one film in every country:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the production companies that have produced at least one film in every country:",
        "output": "SELECT ProductionCompany.name FROM ProductionCompany WHERE ( SELECT COUNT(DISTINCT Film.country_id) FROM Film WHERE Film.production_company_id = ProductionCompany.production_company_id ) = ( SELECT COUNT(DISTINCT Country.country_id) FROM Country ) ;",
        "schema": "action_films",
        "processed_schema_content": {
            "Film": [
                "film_id",
                "title",
                "rating",
                "release_date",
                "runtime",
                "box_office",
                "director_id",
                "duration_minutes",
                "budget",
                "release_year",
                "production_company_id",
                "country_id",
                "year",
                "length",
                "is_sequel",
                "runtime_minutes",
                "awards",
                "revenue"
            ],
            "Country": [
                "country_id",
                "name"
            ],
            "ProductionCompany": [
                "name",
                "production_company_id",
                "spouse_id"
            ]
        }
    },
    {
        "id": 82,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Comedians': ['first_name', 'last_name', 'comedian_id', 'nationality', 'birthplace', 'country_id', 'birth_year', 'gender', 'name', 'city_id', 'school_id', 'birth_state', 'netflix_special', 'youtube_subscribers', 'experience'], 'Performances': ['rating', 'comedian_id', 'show_id', 'performance_id', 'special_id', 'venue_id', 'production_id', 'performance_date'], 'Shows': ['year', 'show_id', 'title', 'description', 'location', 'venue_id', 'duration', 'network', 'release_date', 'Sticks', 'date_recorded', 'name', 'duration_minutes', 'recorded_year', 'date'], 'Venues': ['capacity', 'venue_id', 'country', 'name', 'is_live', 'city', 'state', 'type', 'seating_capacity', 'city_id', 'zip_code', 'stage_width', 'minimum_age', 'admission_fee'], 'Show_Ratings': ['rating', 'show_id', 'rating_id', 'category_id', 'comedian_id'], 'Ratings': ['rating', 'rating_id', 'show_id', 'category'], 'Categories': ['category_id', 'name', 'CategoryName', 'CategoryID']} and \n# the user question: Retrieve the names of all comedians who have performed in shows that were recorded in theaters and have a rating of at least 8 in the \"originality\" category.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all comedians who have performed in shows that were recorded in theaters and have a rating of at least 8 in the \"originality\" category.",
        "output": "SELECT DISTINCT c.name FROM Comedians c JOIN Performances p ON p.comedian_id = c.comedian_id JOIN Venues v ON v.venue_id = p.venue_id JOIN Shows s ON s.show_id = p.show_id JOIN Show_Ratings sr ON sr.show_id = s.show_id JOIN Ratings r ON r.rating_id = sr.rating_id JOIN Categories cat ON cat.category_id = sr.category_id WHERE v.type = 'theater' AND cat.name = 'originality' AND r.rating >= 8;",
        "schema": "stand-up_comedy",
        "processed_schema_content": {
            "Comedians": [
                "first_name",
                "last_name",
                "comedian_id",
                "nationality",
                "birthplace",
                "country_id",
                "birth_year",
                "gender",
                "name",
                "city_id",
                "school_id",
                "birth_state",
                "netflix_special",
                "youtube_subscribers",
                "experience"
            ],
            "Performances": [
                "rating",
                "comedian_id",
                "show_id",
                "performance_id",
                "special_id",
                "venue_id",
                "production_id",
                "performance_date"
            ],
            "Shows": [
                "year",
                "show_id",
                "title",
                "description",
                "location",
                "venue_id",
                "duration",
                "network",
                "release_date",
                "Sticks",
                "date_recorded",
                "name",
                "duration_minutes",
                "recorded_year",
                "date"
            ],
            "Venues": [
                "capacity",
                "venue_id",
                "country",
                "name",
                "is_live",
                "city",
                "state",
                "type",
                "seating_capacity",
                "city_id",
                "zip_code",
                "stage_width",
                "minimum_age",
                "admission_fee"
            ],
            "Show_Ratings": [
                "rating",
                "show_id",
                "rating_id",
                "category_id",
                "comedian_id"
            ],
            "Ratings": [
                "rating",
                "rating_id",
                "show_id",
                "category"
            ],
            "Categories": [
                "category_id",
                "name",
                "CategoryName",
                "CategoryID"
            ]
        }
    },
    {
        "id": 83,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'patients': ['first_name', 'last_name', 'patient_id', 'phone_number', 'email', 'phone'], 'medical_history': ['patient_id', 'medical_condition', 'diagnosis'], 'prescription': ['patient_id', 'prescription_id', 'prescription_date', 'type', 'practitioner_id'], 'prescription_items': ['formula_id', 'prescription_id'], 'herbal_formulas': ['formula_id', 'formula_name', 'price', 'num_ingredients', 'ingredients', 'name']} and \n# the user question: Retrieve the names and email addresses of patients who have been prescribed herbal formulas costing more than $50 in total and have also been diagnosed with anxiety:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of patients who have been prescribed herbal formulas costing more than $50 in total and have also been diagnosed with anxiety:",
        "output": "SELECT DISTINCT p.first_name, p.last_name, p.email FROM patients p JOIN medical_history mh ON p.patient_id = mh.patient_id JOIN prescription pr ON p.patient_id = pr.patient_id JOIN prescription_items pi ON pr.prescription_id = pi.prescription_id JOIN herbal_formulas hf ON pi.formula_id = hf.formula_id GROUP BY p.patient_id HAVING SUM(hf.price) > 50.00 AND mh.medical_condition LIKE '%anxiety%';",
        "schema": "acupuncture",
        "processed_schema_content": {
            "patients": [
                "first_name",
                "last_name",
                "patient_id",
                "phone_number",
                "email",
                "phone"
            ],
            "medical_history": [
                "patient_id",
                "medical_condition",
                "diagnosis"
            ],
            "prescription": [
                "patient_id",
                "prescription_id",
                "prescription_date",
                "type",
                "practitioner_id"
            ],
            "prescription_items": [
                "formula_id",
                "prescription_id"
            ],
            "herbal_formulas": [
                "formula_id",
                "formula_name",
                "price",
                "num_ingredients",
                "ingredients",
                "name"
            ]
        }
    },
    {
        "id": 85,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Show': ['rating', 'year', 'title', 'show_id', 'genre_id', 'studio_id', 'release_year', 'country_id', 'network_id', 'director_id', 'air_year', 'release_date', 'genre', 'status', 'production_type', 'producer_id', 'start_year', 'end_year'], 'Episode': ['show_id', 'episode_id', 'crew_id', 'director_id', 'writer_id', 'runtime', 'title', 'season_id', 'duration', 'episode_number', 'release_year', 'air_date', 'rating', 'id', 'tv_show_id', 'name'], 'Season': ['show_id', 'season_id', 'season_number', 'release_date', 'release_channel', 'episode_count', 'end_date', 'start_date', 'year_id'], 'Director': ['director_id', 'name', 'episode_id', 'person_id', 'show_id', 'season_id']} and \n# the user question: List the TV shows that have at least one season with more than one episode directed by the same person.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the TV shows that have at least one season with more than one episode directed by the same person.",
        "output": "SELECT DISTINCT Show.title FROM Show JOIN Season ON Show.show_id = Season.show_id JOIN Episode ON Season.season_id = Episode.season_id JOIN Director ON Episode.episode_id = Director.episode_id GROUP BY Show.title, Director.person_id, Season.season_number HAVING COUNT(*) > 1",
        "schema": "tv_shows",
        "processed_schema_content": {
            "Show": [
                "rating",
                "year",
                "title",
                "show_id",
                "genre_id",
                "studio_id",
                "release_year",
                "country_id",
                "network_id",
                "director_id",
                "air_year",
                "release_date",
                "genre",
                "status",
                "production_type",
                "producer_id",
                "start_year",
                "end_year"
            ],
            "Episode": [
                "show_id",
                "episode_id",
                "crew_id",
                "director_id",
                "writer_id",
                "runtime",
                "title",
                "season_id",
                "duration",
                "episode_number",
                "release_year",
                "air_date",
                "rating",
                "id",
                "tv_show_id",
                "name"
            ],
            "Season": [
                "show_id",
                "season_id",
                "season_number",
                "release_date",
                "release_channel",
                "episode_count",
                "end_date",
                "start_date",
                "year_id"
            ],
            "Director": [
                "director_id",
                "name",
                "episode_id",
                "person_id",
                "show_id",
                "season_id"
            ]
        }
    },
    {
        "id": 86,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Sale_Items': ['product_id', 'sale_id', 'quantity', 'sale_item_id', 'customer_id', 'unit_price', 'discount_code', 'sale_date', 'price'], 'Sales': ['employee_id', 'sale_id', 'sale_date', 'customer_id', 'total', 'total_amount', 'payment_method', 'total_price', 'total_spent', 'location_id', 'coupon_code', 'start_date', 'discount_percentage', 'end_date', 'product_id'], 'Returns': ['sale_item_id', 'return_date', 'return_id'], 'Restocks': ['product_id', 'restock_date', 'quantity']} and \n# the user question: Retrieve the names and total revenue for all products that have been sold in the last year and have not been returned or restocked.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and total revenue for all products that have been sold in the last year and have not been returned or restocked.",
        "output": "SELECT Products.product_name, SUM(Sale_Items.quantity * Products.price) AS total_revenue FROM Products INNER JOIN Sale_Items ON Products.product_id = Sale_Items.product_id INNER JOIN Sales ON Sale_Items.sale_id = Sales.sale_id LEFT JOIN Returns ON Sale_Items.sale_item_id = Returns.sale_item_id LEFT JOIN Restocks ON Products.product_id = Restocks.product_id WHERE Sales.sale_date >= DATE('now', '-1 year') AND Returns.sale_item_id IS NULL AND Restocks.product_id IS NULL GROUP BY Products.product_id ORDER BY total_revenue DESC;",
        "schema": "pharmacy",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "price",
                "description",
                "product_description",
                "supplier_id",
                "category_id",
                "units_in_stock",
                "expiration_date",
                "stock_quantity",
                "expiration_id",
                "discontinued",
                "cost_price",
                "quantity_in_stock",
                "unit_price",
                "unit_cost",
                "brand_name",
                "last_supplied_date",
                "manufacturer_name",
                "backorder"
            ],
            "Sale_Items": [
                "product_id",
                "sale_id",
                "quantity",
                "sale_item_id",
                "customer_id",
                "unit_price",
                "discount_code",
                "sale_date",
                "price"
            ],
            "Sales": [
                "employee_id",
                "sale_id",
                "sale_date",
                "customer_id",
                "total",
                "total_amount",
                "payment_method",
                "total_price",
                "total_spent",
                "location_id",
                "coupon_code",
                "start_date",
                "discount_percentage",
                "end_date",
                "product_id"
            ],
            "Returns": [
                "sale_item_id",
                "return_date",
                "return_id"
            ],
            "Restocks": [
                "product_id",
                "restock_date",
                "quantity"
            ]
        }
    },
    {
        "id": 87,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Station': ['station_id', 'name', 'latitude', 'longitude', 'address'], 'StationSchedule': ['station_id', 'route_id', 'arrival_time', 'departure_time']} and \n# the user question: Retrieve the names and locations of all stations that have a scheduled stop on Route 2 but not on Route 1:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and locations of all stations that have a scheduled stop on Route 2 but not on Route 1:",
        "output": "SELECT Station.name, Station.latitude, Station.longitude FROM Station INNER JOIN StationSchedule ON Station.station_id = StationSchedule.station_id WHERE StationSchedule.route_id = 2 AND Station.station_id NOT IN (SELECT Station.station_id FROM Station INNER JOIN StationSchedule ON Station.station_id = StationSchedule.station_id WHERE StationSchedule.route_id = 1);",
        "schema": "intelligent_transportation_systems",
        "processed_schema_content": {
            "Station": [
                "station_id",
                "name",
                "latitude",
                "longitude",
                "address"
            ],
            "StationSchedule": [
                "station_id",
                "route_id",
                "arrival_time",
                "departure_time"
            ]
        }
    },
    {
        "id": 88,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Carvings': ['carving_id', 'name', 'description', 'price', 'image_url', 'vendor_id', 'stock', 'size', 'last_sold_date', 'cost', 'material_id', 'creation_date', 'type_id', 'weight', 'date_sold', 'is_available', 'width', 'length', 'weight_kg', 'carving_type_id'], 'Materials': ['material_id', 'name', 'description', 'price', 'color', 'cost'], 'Carving_Materials': ['carving_id', 'material_id'], 'Order_Items': ['order_item_id', 'order_id', 'carving_id', 'quantity', 'price', 'order_date']} and \n# the user question: Find the carvings made of soapstone that are currently out of stock and have not been ordered in the past year:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the carvings made of soapstone that are currently out of stock and have not been ordered in the past year:",
        "output": "SELECT c.name AS carving_name, c.size FROM Carvings c JOIN Carving_Materials cm ON c.carving_id = cm.carving_id JOIN Materials m ON cm.material_id = m.material_id LEFT JOIN Order_Items oi ON c.carving_id = oi.carving_id WHERE m.name = 'Soapstone' AND c.stock = 0 AND oi.order_date < DATE('now', '-1 year');",
        "schema": "soapstone_carving",
        "processed_schema_content": {
            "Carvings": [
                "carving_id",
                "name",
                "description",
                "price",
                "image_url",
                "vendor_id",
                "stock",
                "size",
                "last_sold_date",
                "cost",
                "material_id",
                "creation_date",
                "type_id",
                "weight",
                "date_sold",
                "is_available",
                "width",
                "length",
                "weight_kg",
                "carving_type_id"
            ],
            "Materials": [
                "material_id",
                "name",
                "description",
                "price",
                "color",
                "cost"
            ],
            "Carving_Materials": [
                "carving_id",
                "material_id"
            ],
            "Order_Items": [
                "order_item_id",
                "order_id",
                "carving_id",
                "quantity",
                "price",
                "order_date"
            ]
        }
    },
    {
        "id": 91,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Films': ['release_date', 'director_id', 'genre_id', 'title', 'film_id', 'duration'], 'Genres': ['name', 'genre_id'], 'Ratings': ['user_id', 'rating_value', 'film_id', 'review_id']} and \n# the user question: List the film titles and release dates of comedy films with an average rating higher than the average rating of all films:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the film titles and release dates of comedy films with an average rating higher than the average rating of all films:",
        "output": "SELECT Films.title, Films.release_date FROM Films JOIN Ratings ON Films.film_id = Ratings.film_id WHERE Films.genre_id = ( SELECT genre_id FROM Genres WHERE name = 'Comedy' ) GROUP BY Films.film_id HAVING AVG(Ratings.rating_value) > ( SELECT AVG(rating_value) FROM Ratings );",
        "schema": "comedy_films",
        "processed_schema_content": {
            "Films": [
                "release_date",
                "director_id",
                "genre_id",
                "title",
                "film_id",
                "duration"
            ],
            "Genres": [
                "name",
                "genre_id"
            ],
            "Ratings": [
                "user_id",
                "rating_value",
                "film_id",
                "review_id"
            ]
        }
    },
    {
        "id": 92,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'client_id', 'end_date', 'project_name', 'start_date', 'category_id', 'payment_amount'], 'Testimonials': ['testimonial_date', 'testimonial_text', 'client_id', 'testimonial_id', 'project_id', 'rating']} and \n# the user question: Retrieve the project names and the count of associated testimonials for projects that have received testimonials with ratings higher than 4.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the project names and the count of associated testimonials for projects that have received testimonials with ratings higher than 4.",
        "output": "SELECT p.project_name, COUNT(t.testimonial_id) AS testimonial_count FROM Projects p JOIN Testimonials t ON p.project_id = t.project_id WHERE t.rating > 4 GROUP BY p.project_name;",
        "schema": "copywriting",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "client_id",
                "end_date",
                "project_name",
                "start_date",
                "category_id",
                "payment_amount"
            ],
            "Testimonials": [
                "testimonial_date",
                "testimonial_text",
                "client_id",
                "testimonial_id",
                "project_id",
                "rating"
            ]
        }
    },
    {
        "id": 94,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'credit_card_transactions': ['card_id', 'amount', 'transaction_type', 'transaction_date', 'payment_amount', 'fee_amount', 'user_id', 'transaction_amount', 'transaction_id', 'card_number', 'transaction_fee', 'account_id', 'credit_card_id', 'transaction_description', 'cardholder_name', 'credit_card_balance']} and \n# the user question: Retrieve the transaction ID, transaction type, and transaction amount for all credit card transactions with a transaction amount greater than $100.00:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the transaction ID, transaction type, and transaction amount for all credit card transactions with a transaction amount greater than $100.00:",
        "output": "SELECT transaction_id, transaction_type, transaction_amount FROM credit_card_transactions WHERE transaction_amount > 100.00;",
        "schema": "finance",
        "processed_schema_content": {
            "credit_card_transactions": [
                "card_id",
                "amount",
                "transaction_type",
                "transaction_date",
                "payment_amount",
                "fee_amount",
                "user_id",
                "transaction_amount",
                "transaction_id",
                "card_number",
                "transaction_fee",
                "account_id",
                "credit_card_id",
                "transaction_description",
                "cardholder_name",
                "credit_card_balance"
            ]
        }
    },
    {
        "id": 95,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Film': ['film_id', 'title', 'director_id', 'duration', 'release_date', 'genre', 'genre_id', 'language_id'], 'Review': ['rating', 'film_id', 'review_id']} and \n# the user question: \"List the film titles and their respective release dates for films with more than 5 reviews.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"List the film titles and their respective release dates for films with more than 5 reviews.\"",
        "output": "SELECT Film.title, Film.release_date FROM Film INNER JOIN Review ON Film.film_id = Review.film_id GROUP BY Film.title, Film.release_date HAVING COUNT(Review.review_id) > 5;",
        "schema": "drama_films",
        "processed_schema_content": {
            "Film": [
                "film_id",
                "title",
                "director_id",
                "duration",
                "release_date",
                "genre",
                "genre_id",
                "language_id"
            ],
            "Review": [
                "rating",
                "film_id",
                "review_id"
            ]
        }
    },
    {
        "id": 96,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['category_id', 'product_id', 'supplier_id', 'product_name', 'price', 'stock_quantity', 'brand_id', 'sku', 'brand', 'category', 'stock', 'discontinued', 'name', 'last_restocked', 'sale_price', 'status', 'stock_count', 'on_sale']} and \n# the user question: Retrieve the name and price of all products that are in stock and have a price greater than $50:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all products that are in stock and have a price greater than $50:",
        "output": "SELECT product_name, price FROM Products WHERE stock_quantity > 0 AND price > 50",
        "schema": "business",
        "processed_schema_content": {
            "Products": [
                "category_id",
                "product_id",
                "supplier_id",
                "product_name",
                "price",
                "stock_quantity",
                "brand_id",
                "sku",
                "brand",
                "category",
                "stock",
                "discontinued",
                "name",
                "last_restocked",
                "sale_price",
                "status",
                "stock_count",
                "on_sale"
            ]
        }
    },
    {
        "id": 97,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Participants': ['first_name', 'last_name', 'participant_id', 'gender', 'age', 'birth_year', 'date_of_birth', 'ag', 'age_group_id', 'parental_edu_id', 'language_group_id'], 'Participant_Tasks': ['task_id', 'participant_id', 'completion_date', 'score', 'completed'], 'Tasks': ['task_id', 'task_name', 'study_id', 'difficulty_level', 'duration', 'difficulty', 'task_category', 'category', 'Tower', 'Hanoi', 'Digit', 'Span', 'Working', 'Spatial', 'Symbol', 'Picture', 'Concepts', 'Coding', 'Regulation', 'Emotional'], 'Participant_Questionnaires': ['participant_id', 'questionnaire_id', 'participant_questionnaire_id', 'completion_date', 'response_text', 'score', 'task_id', 'completion_time'], 'Questionnaires': ['questionnaire_id', 'questionnaire_name', 'category', 'task_id', 'subtest_name', 'alerting', 'network_type', 'orienting']} and \n# the user question: Retrieve the names and ages of all participants who have completed the \"Sorting Objects\" task, have achieved a score that is lower than 70, and have also completed a questionnaire with a score that is higher than the score achieved in the \"Sorting Objects\" task:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and ages of all participants who have completed the \"Sorting Objects\" task, have achieved a score that is lower than 70, and have also completed a questionnaire with a score that is higher than the score achieved in the \"Sorting Objects\" task:",
        "output": "SELECT Participants.first_name, Participants.last_name, Participants.age FROM Participants JOIN Participant_Tasks ON Participants.participant_id = Participant_Tasks.participant_id JOIN Tasks ON Participant_Tasks.task_id = Tasks.task_id JOIN Participant_Questionnaires ON Participants.participant_id = Participant_Questionnaires.participant_id JOIN Questionnaires ON Participant_Questionnaires.questionnaire_id = Questionnaires.questionnaire_id WHERE Tasks.task_name = 'Sorting Objects' AND Participant_Tasks.score < 70 AND Participant_Questionnaires.score > ( SELECT score FROM Participant_Tasks WHERE task_id = ( SELECT task_id FROM Tasks WHERE task_name = 'Sorting Objects' ) AND participant_id = Participants.participant_id );",
        "schema": "developmental_psychology",
        "processed_schema_content": {
            "Participants": [
                "first_name",
                "last_name",
                "participant_id",
                "gender",
                "age",
                "birth_year",
                "date_of_birth",
                "ag",
                "age_group_id",
                "parental_edu_id",
                "language_group_id"
            ],
            "Participant_Tasks": [
                "task_id",
                "participant_id",
                "completion_date",
                "score",
                "completed"
            ],
            "Tasks": [
                "task_id",
                "task_name",
                "study_id",
                "difficulty_level",
                "duration",
                "difficulty",
                "task_category",
                "category",
                "Tower",
                "Hanoi",
                "Digit",
                "Span",
                "Working",
                "Spatial",
                "Symbol",
                "Picture",
                "Concepts",
                "Coding",
                "Regulation",
                "Emotional"
            ],
            "Participant_Questionnaires": [
                "participant_id",
                "questionnaire_id",
                "participant_questionnaire_id",
                "completion_date",
                "response_text",
                "score",
                "task_id",
                "completion_time"
            ],
            "Questionnaires": [
                "questionnaire_id",
                "questionnaire_name",
                "category",
                "task_id",
                "subtest_name",
                "alerting",
                "network_type",
                "orienting"
            ]
        }
    },
    {
        "id": 99,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Habitats': ['location', 'name', 'habitat_id', 'description', 'ph_level', 'temperature', 'water_ph', 'salinity', 'precipitation', 'pH', 'temperature_range'], 'Ecosystems': ['habitat_id', 'name', 'ecosystem_id', 'description', 'conservation_status_id', 'mean_temperature', 'pH_level', 'precipitation_level', 'temperature', 'ph_level', 'num_predator_species', 'num_prey_species', 'species_richness', 'mean_primary_producer_biomass', 'mean_herbivore_biomass', 'primary_producer_biomass', 'top_predator_biomass', 'num_organisms', 'num_top_predators', 'num_prey', 'num_predators'], 'Interactions': ['interaction_id', 'name', 'description', 'trophic_level_id', 'ecosystem_id', 'organism_id', 'symbiont_id', 'prey_id', 'food_web_id', 'population_size', 'predator_id', 'interaction_type']} and \n# the user question: Find the top 5 habitats with the highest number of unique species.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the top 5 habitats with the highest number of unique species.",
        "output": "SELECT Habitats.name, COUNT(DISTINCT Interactions.organism_id) AS num_unique_species FROM Habitats JOIN Ecosystems ON Ecosystems.habitat_id = Habitats.habitat_id JOIN Interactions ON Interactions.ecosystem_id = Ecosystems.ecosystem_id GROUP BY Habitats.habitat_id ORDER BY num_unique_species DESC LIMIT 5;",
        "schema": "ecology",
        "processed_schema_content": {
            "Habitats": [
                "location",
                "name",
                "habitat_id",
                "description",
                "ph_level",
                "temperature",
                "water_ph",
                "salinity",
                "precipitation",
                "pH",
                "temperature_range"
            ],
            "Ecosystems": [
                "habitat_id",
                "name",
                "ecosystem_id",
                "description",
                "conservation_status_id",
                "mean_temperature",
                "pH_level",
                "precipitation_level",
                "temperature",
                "ph_level",
                "num_predator_species",
                "num_prey_species",
                "species_richness",
                "mean_primary_producer_biomass",
                "mean_herbivore_biomass",
                "primary_producer_biomass",
                "top_predator_biomass",
                "num_organisms",
                "num_top_predators",
                "num_prey",
                "num_predators"
            ],
            "Interactions": [
                "interaction_id",
                "name",
                "description",
                "trophic_level_id",
                "ecosystem_id",
                "organism_id",
                "symbiont_id",
                "prey_id",
                "food_web_id",
                "population_size",
                "predator_id",
                "interaction_type"
            ]
        }
    },
    {
        "id": 103,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'email', 'password_hash', 'is_admin', 'name', 'last_login_at', 'last_login', 'created_at', 'verified', 'activated']} and \n# the user question: Retrieve the names of all users who are not administrators:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all users who are not administrators:",
        "output": "SELECT username FROM Users WHERE is_admin = false;",
        "schema": "search_engine_optimization_(seo)",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "email",
                "password_hash",
                "is_admin",
                "name",
                "last_login_at",
                "last_login",
                "created_at",
                "verified",
                "activated"
            ]
        }
    },
    {
        "id": 104,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Companies': ['company_name', 'revenue', 'industry', 'company_id', 'country', 'industry_category', 'headquarters', 'num_employees']} and \n# the user question: \"Get the initiatives and their respective average project budgets for each company headquartered in the United States in the 'Retail' industry.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Get the initiatives and their respective average project budgets for each company headquartered in the United States in the 'Retail' industry.\"",
        "output": "SELECT `CSR Initiatives`.initiative_name, Companies.company_name, AVG(`CSR Projects`.budget) AS average_project_budget FROM `CSR Initiatives` JOIN `CSR Projects` ON `CSR Initiatives`.initiative_id = `CSR Projects`.initiative_id JOIN Companies ON `CSR Initiatives`.company_id = Companies.company_id WHERE Companies.headquarters = 'United States' AND Companies.industry = 'Retail' GROUP BY `CSR Initiatives`.initiative_id, Companies.company_id;",
        "schema": "corporate_social_responsibility",
        "processed_schema_content": {
            "Companies": [
                "company_name",
                "revenue",
                "industry",
                "company_id",
                "country",
                "industry_category",
                "headquarters",
                "num_employees"
            ]
        }
    },
    {
        "id": 105,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Devices': ['device_location', 'device_name', 'device_id', 'location', 'device_type', 'time_diff', 'device_category', 'device_status', 'battery_level', 'last_data_timestamp', 'created_timestamp', 'notify_user', 'room_id', 'active', 'last_used', 'transmit_data'], 'DeviceData': ['device_location', 'data_value', 'data_timestamp', 'device_id', 'data_id', 'alert_threshold', 'data_unit', 'data_type', 'Temperature', 'Humidity', 'sensor_id'], 'Sensors': ['sensor_id', 'sensor_type', 'sensor_name', 'sensor_location', 'device_id', 'sensor_max_threshold', 'sensor_min_threshold', 'sensor_value', 'sensor_safe_threshold', 'sensor_battery_level'], 'Users': ['user_id', 'username', 'user_name'], 'UserDevices': ['user_id', 'device_id']} and \n# the user question: Find all users who have devices that have had a humidity reading above 80% in the past 12 hours and sort them by the number of devices they have.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all users who have devices that have had a humidity reading above 80% in the past 12 hours and sort them by the number of devices they have.",
        "output": "SELECT Users.username, COUNT(DISTINCT Devices.device_id) AS alert_device_count FROM Users JOIN UserDevices ON Users.user_id = UserDevices.user_id JOIN Devices ON UserDevices.device_id = Devices.device_id JOIN DeviceData ON Devices.device_id = DeviceData.device_id JOIN Sensors ON Devices.device_id = Sensors.sensor_id WHERE Sensors.sensor_type = 'Humidity' AND DeviceData.data_value > 80 AND DeviceData.data_timestamp >= datetime('now', '-12 hour') GROUP BY Users.user_id ORDER BY alert_device_count DESC;",
        "schema": "internet_of_things_(iot)",
        "processed_schema_content": {
            "Devices": [
                "device_location",
                "device_name",
                "device_id",
                "location",
                "device_type",
                "time_diff",
                "device_category",
                "device_status",
                "battery_level",
                "last_data_timestamp",
                "created_timestamp",
                "notify_user",
                "room_id",
                "active",
                "last_used",
                "transmit_data"
            ],
            "DeviceData": [
                "device_location",
                "data_value",
                "data_timestamp",
                "device_id",
                "data_id",
                "alert_threshold",
                "data_unit",
                "data_type",
                "Temperature",
                "Humidity",
                "sensor_id"
            ],
            "Sensors": [
                "sensor_id",
                "sensor_type",
                "sensor_name",
                "sensor_location",
                "device_id",
                "sensor_max_threshold",
                "sensor_min_threshold",
                "sensor_value",
                "sensor_safe_threshold",
                "sensor_battery_level"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name"
            ],
            "UserDevices": [
                "user_id",
                "device_id"
            ]
        }
    },
    {
        "id": 106,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Therapist_Specialties': ['therapist_id', 'specialty', 'specialty_id'], 'Billing': ['session_id', 'date', 'amount', 'id', 'start_time', 'end_time'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id']} and \n# the user question: Retrieve the names and total amount billed for all clients who have attended sessions with a therapist who has a specialty in Emotion-Focused Therapy:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and total amount billed for all clients who have attended sessions with a therapist who has a specialty in Emotion-Focused Therapy:",
        "output": "SELECT c.name, SUM(b.amount) AS total_billed FROM Clients c INNER JOIN Session_Attendees sa ON c.id = sa.client_id INNER JOIN Sessions s ON sa.session_id = s.id INNER JOIN Therapists t ON s.therapist_id = t.id INNER JOIN Therapist_Specialties ts ON t.id = ts.therapist_id INNER JOIN Billing b ON s.id = b.session_id WHERE ts.specialty = 'Emotion-Focused Therapy' GROUP BY c.id",
        "schema": "counseling",
        "processed_schema_content": {
            "Clients": [
                "email",
                "phone_number",
                "id",
                "name",
                "date_of_birth",
                "gender",
                "referral_source_id",
                "primary_care_physician_id",
                "substance_abuse_history",
                "depression_history",
                "trauma_history",
                "ptsd_diagnosis",
                "addiction_history",
                "personality_disorder_history",
                "eating_disorder_history",
                "bipolar_history",
                "schizophrenia_history",
                "self_harm_history",
                "anxiety_history",
                "eating_disorders_history",
                "alcoholism_history",
                "gambling_addiction_history",
                "smoking_addiction_history",
                "alcohol_addiction_history",
                "drug_addiction_history",
                "sex_addiction_history",
                "ptsd_history",
                "ocd_history",
                "suicidal_ideation_history",
                "age",
                "phone",
                "balance_owing",
                "contact_number"
            ],
            "Sessions": [
                "therapist_id",
                "client_id",
                "id",
                "date",
                "location",
                "name",
                "duration",
                "therapy_type_id",
                "cost",
                "start_time",
                "session_type",
                "rate",
                "",
                "SessionNotes",
                "SessionID",
                "SessionDate",
                "CounselorID"
            ],
            "Therapists": [
                "id",
                "name",
                "gender",
                "email",
                "phone",
                "license_state",
                "experience_years",
                "last_name",
                "is_active",
                "is_licensed",
                "rate_per_hour"
            ],
            "Therapist_Specialties": [
                "therapist_id",
                "specialty",
                "specialty_id"
            ],
            "Billing": [
                "session_id",
                "date",
                "amount",
                "id",
                "start_time",
                "end_time"
            ],
            "Session_Attendees": [
                "session_id",
                "client_id",
                "attendee_type",
                "attended",
                "id"
            ]
        }
    },
    {
        "id": 107,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'collection': ['name', 'acquisition_date', 'collection_id', 'collector_id', 'date_acquired'], 'artwork_collection': ['collection_id', 'artwork_id'], 'collector': ['first_name', 'collector_id', 'last_name', 'email', 'country', 'state', 'country_of_origin'], 'acquisition': ['acquisition_date', 'artwork_id', 'value', 'location_id', 'acquisition_id', 'acquisition_source', 'acquisition_type', 'year_acquired', 'name']} and \n# the user question: Find the names and dates of all acquisitions made by collectors who live in the United States and were worth more than $50,000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and dates of all acquisitions made by collectors who live in the United States and were worth more than $50,000.",
        "output": "SELECT c.first_name, c.last_name, acq.acquisition_date, acq.value FROM collector AS c INNER JOIN collection AS co ON c.collector_id = co.collector_id INNER JOIN artwork_collection AS ac ON co.collection_id = ac.collection_id INNER JOIN artwork AS a ON ac.artwork_id = a.artwork_id INNER JOIN acquisition AS acq ON a.artwork_id = acq.artwork_id WHERE c.country = 'United States' AND acq.value > 50000;",
        "schema": "painting",
        "processed_schema_content": {
            "artwork": [
                "artwork_id",
                "title",
                "year_created",
                "artist_id",
                "dimensions",
                "medium",
                "lender_id",
                "year",
                "estimated_value",
                "creation_date"
            ],
            "collection": [
                "name",
                "acquisition_date",
                "collection_id",
                "collector_id",
                "date_acquired"
            ],
            "artwork_collection": [
                "collection_id",
                "artwork_id"
            ],
            "collector": [
                "first_name",
                "collector_id",
                "last_name",
                "email",
                "country",
                "state",
                "country_of_origin"
            ],
            "acquisition": [
                "acquisition_date",
                "artwork_id",
                "value",
                "location_id",
                "acquisition_id",
                "acquisition_source",
                "acquisition_type",
                "year_acquired",
                "name"
            ]
        }
    },
    {
        "id": 108,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Book': ['book_id', 'title', 'isbn', 'publisher_id', 'publication_date', 'rating', 'price', 'publication_year', 'author_id', 'publisher', 'author', 'weight', 'author_gender', 'language', 'author_name', 'book_title', 'format_id', 'page_count', 'id', 'num_pages'], 'Order_Item': ['order_id', 'book_id', 'quantity', 'price', 'store_id', 'order_date', 'customer_id', 'unit_price', 'inventory_id', 'date', 'order_item_date'], 'Store_Inventory': ['store_id', 'book_id', 'quantity', 'inventory_id', 'quantity_available']} and \n# the user question: Find the title and author of the top 5 best-selling books of all time.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the title and author of the top 5 best-selling books of all time.",
        "output": "SELECT Book.title, Book.author FROM Book JOIN Store_Inventory ON Book.book_id = Store_Inventory.book_id JOIN Order_Item ON Store_Inventory.inventory_id = Order_Item.inventory_id GROUP BY Book.book_id ORDER BY SUM(Order_Item.quantity) DESC LIMIT 5;",
        "schema": "business_books",
        "processed_schema_content": {
            "Book": [
                "book_id",
                "title",
                "isbn",
                "publisher_id",
                "publication_date",
                "rating",
                "price",
                "publication_year",
                "author_id",
                "publisher",
                "author",
                "weight",
                "author_gender",
                "language",
                "author_name",
                "book_title",
                "format_id",
                "page_count",
                "id",
                "num_pages"
            ],
            "Order_Item": [
                "order_id",
                "book_id",
                "quantity",
                "price",
                "store_id",
                "order_date",
                "customer_id",
                "unit_price",
                "inventory_id",
                "date",
                "order_item_date"
            ],
            "Store_Inventory": [
                "store_id",
                "book_id",
                "quantity",
                "inventory_id",
                "quantity_available"
            ]
        }
    },
    {
        "id": 110,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Project_Contractors': ['project_id', 'contractor_id', 'end_date', 'project_contractor_id', 'contract_date'], 'Contractors': ['contractor_name', 'contractor_id', 'rating']} and \n# the user question: List all the projects that involve a contractor who has worked on a project that has a status of \"On Hold\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List all the projects that involve a contractor who has worked on a project that has a status of \"On Hold\".",
        "output": "SELECT DISTINCT p.project_name FROM Projects p INNER JOIN Project_Contractors pc ON p.project_id = pc.project_id INNER JOIN Contractors c ON pc.contractor_id = c.contractor_id INNER JOIN Projects p2 ON pc.project_id = p2.project_id WHERE p2.status = 'On Hold';",
        "schema": "civil_engineering",
        "processed_schema_content": {
            "Projects": [
                "project_name",
                "project_id",
                "end_date",
                "start_date",
                "square_footage",
                "status",
                "project_manager_id",
                "project_status_id",
                "project_completion_date",
                "project_start_date",
                "project_budget",
                "project_end_date",
                "project_deadline",
                "project_location",
                "supervisor_id",
                "completion_date",
                "Expansion",
                "Highway",
                "Construction",
                "Building",
                "Office",
                "budget",
                "actual_end_date",
                "actual_start_date",
                "State",
                "Project_ID",
                "Name",
                "Status",
                "Start_Date",
                "expected_completion_date",
                "Completion_Date",
                "Actual_Costs",
                "Project_Name",
                "Budget",
                "Client_ID",
                "cost",
                "name",
                "id"
            ],
            "Project_Contractors": [
                "project_id",
                "contractor_id",
                "end_date",
                "project_contractor_id",
                "contract_date"
            ],
            "Contractors": [
                "contractor_name",
                "contractor_id",
                "rating"
            ]
        }
    },
    {
        "id": 111,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['username', 'user_id', 'email', 'john_doe', 'jane_doe', 'sarah_smith', 'tom_wilson', 'robert_king', 'alice_smith', 'jack_smith', 'jane_smith', 'mary_jones', 'joe_brown', 'james_smith', 'jessica_wong', 'david_smith', 'first_name', 'last_name', 'james_wong', 'emily_smith', 'jennifer_wilson', 'subscription', 'date_of_birth'], 'Sales': ['Sales', 'Product', 'Region', 'State', 'product_id', 'dataset_id', 'quantity', 'sale_date', 'Unit_price', 'Sale_date', 'salesperson_id', 'sale_id', 'customer_id', 'company_id', 'unit_price', 'sales_id', 'model_id'], 'Companies': ['company_name', 'company_id', 'city']} and \n# the user question: What are the top 5 users who have made the most purchases from the 'Northwind Traders' company, and what is the total amount they have spent?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What are the top 5 users who have made the most purchases from the 'Northwind Traders' company, and what is the total amount they have spent?",
        "output": "SELECT Users.username, SUM(Sales.quantity * Sales.unit_price) AS total_spent FROM Users INNER JOIN Sales ON Users.user_id = Sales.customer_id INNER JOIN Companies ON Sales.company_id = Companies.company_id WHERE Companies.company_name = 'Northwind Traders' GROUP BY Users.username ORDER BY total_spent DESC LIMIT 5;",
        "schema": "data_mining",
        "processed_schema_content": {
            "Users": [
                "username",
                "user_id",
                "email",
                "john_doe",
                "jane_doe",
                "sarah_smith",
                "tom_wilson",
                "robert_king",
                "alice_smith",
                "jack_smith",
                "jane_smith",
                "mary_jones",
                "joe_brown",
                "james_smith",
                "jessica_wong",
                "david_smith",
                "first_name",
                "last_name",
                "james_wong",
                "emily_smith",
                "jennifer_wilson",
                "subscription",
                "date_of_birth"
            ],
            "Sales": [
                "Sales",
                "Product",
                "Region",
                "State",
                "product_id",
                "dataset_id",
                "quantity",
                "sale_date",
                "Unit_price",
                "Sale_date",
                "salesperson_id",
                "sale_id",
                "customer_id",
                "company_id",
                "unit_price",
                "sales_id",
                "model_id"
            ],
            "Companies": [
                "company_name",
                "company_id",
                "city"
            ]
        }
    },
    {
        "id": 112,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employees': ['first_name', 'last_name', 'employee_id', 'department_id', 'job_title', 'hire_date', 'salary', 'department', 'birth_date', 'team', 'manager_id', 'email_address', 'phone_number', 'compliance_training_due_date', 'salary_amount', 'job_id', 'address', 'city', 'state', 'email', 'supervisor_id', 'num_projects', 'hourly_rate'], 'Projects': ['project_id', 'project_name', 'project_type', 'budget', 'end_date', 'due_date', 'deadline', 'completion_date', 'start_date', 'department_id'], 'Hours_Worked': ['employee_id', 'project_id', 'hours_worked', 'date_worked', 'hourly_rate', 'start_time', 'end_time']} and \n# the user question: Find the names of all employees who have been assigned to a project in the last 3 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have been assigned to a project in the last 3 months.",
        "output": "SELECT DISTINCT e.first_name, e.last_name FROM Employees e INNER JOIN Hours_Worked hw ON e.employee_id = hw.employee_id INNER JOIN Projects p ON hw.project_id = p.project_id WHERE julianday('now') - julianday(hw.date_worked) <= 90;",
        "schema": "human_resources_management",
        "processed_schema_content": {
            "Employees": [
                "first_name",
                "last_name",
                "employee_id",
                "department_id",
                "job_title",
                "hire_date",
                "salary",
                "department",
                "birth_date",
                "team",
                "manager_id",
                "email_address",
                "phone_number",
                "compliance_training_due_date",
                "salary_amount",
                "job_id",
                "address",
                "city",
                "state",
                "email",
                "supervisor_id",
                "num_projects",
                "hourly_rate"
            ],
            "Projects": [
                "project_id",
                "project_name",
                "project_type",
                "budget",
                "end_date",
                "due_date",
                "deadline",
                "completion_date",
                "start_date",
                "department_id"
            ],
            "Hours_Worked": [
                "employee_id",
                "project_id",
                "hours_worked",
                "date_worked",
                "hourly_rate",
                "start_time",
                "end_time"
            ]
        }
    },
    {
        "id": 113,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Collection': ['collection_id', 'name'], 'Movie_Collection': ['movie_id', 'collection_id']} and \n# the user question: Retrieve the title of the movie, the name of the collection, and the release year for all movies in the \"Jurassic Park Collection\" that were released after the year 2015.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the title of the movie, the name of the collection, and the release year for all movies in the \"Jurassic Park Collection\" that were released after the year 2015.",
        "output": "SELECT Movie.title, Collection.name, Movie.release_year FROM Movie JOIN Movie_Collection ON Movie.movie_id = Movie_Collection.movie_id JOIN Collection ON Movie_Collection.collection_id = Collection.collection_id WHERE Collection.name = 'Jurassic Park Collection' AND Movie.release_year > 2015;",
        "schema": "romance_films",
        "processed_schema_content": {
            "Movie": [
                "movie_id",
                "title",
                "release_year",
                "director_id",
                "runtime",
                "production_company_id",
                "budget",
                "release_date",
                "producer_id",
                "genre"
            ],
            "Collection": [
                "collection_id",
                "name"
            ],
            "Movie_Collection": [
                "movie_id",
                "collection_id"
            ]
        }
    },
    {
        "id": 117,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID'], 'Customer': ['CustomerName', 'CustomerID', 'Country', 'SegmentID', 'Continent', 'PhoneNumber', 'Email', 'CreditLimit', 'State', 'AddressID', 'EmailAddress', 'LoyaltyLevelID', 'FirstName', 'LastName', 'City', 'StateCode', 'CountryCode', 'RegistrationDate']} and \n# the user question: Retrieve the list of customers who have made purchases in the year 2023, and have made more than one purchase, along with their email addresses and the total number of purchases, sorted by customer name:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of customers who have made purchases in the year 2023, and have made more than one purchase, along with their email addresses and the total number of purchases, sorted by customer name:",
        "output": "SELECT Customer.CustomerName, Customer.EmailAddress, COUNT(*) as TotalPurchases FROM Customer JOIN SalesOrder ON Customer.CustomerID = SalesOrder.CustomerID WHERE SalesOrder.Year = 2023 GROUP BY Customer.CustomerID HAVING COUNT(*) > 1 ORDER BY Customer.CustomerName;",
        "schema": "business_strategy",
        "processed_schema_content": {
            "SalesOrder": [
                "OrderID",
                "Year",
                "CustomerID",
                "OrderDate",
                "TotalAmount",
                "TotalPrice",
                "QuarterID",
                "ExpectedDeliveryDate",
                "ShippedDate",
                "EmployeeID",
                "CountryCode",
                "ReturnID",
                "OfficeID",
                "Discount",
                "OrderNumber",
                "Status",
                "RegionID"
            ],
            "Customer": [
                "CustomerName",
                "CustomerID",
                "Country",
                "SegmentID",
                "Continent",
                "PhoneNumber",
                "Email",
                "CreditLimit",
                "State",
                "AddressID",
                "EmailAddress",
                "LoyaltyLevelID",
                "FirstName",
                "LastName",
                "City",
                "StateCode",
                "CountryCode",
                "RegistrationDate"
            ]
        }
    },
    {
        "id": 118,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Order_Items': ['product_id', 'order_id', 'quantity'], 'Orders': ['order_date', 'order_id', 'order_total', 'customer_id']} and \n# the user question: Find the top 3 best-selling products for the month of May 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the top 3 best-selling products for the month of May 2022.",
        "output": "SELECT Products.product_name, SUM(Order_Items.quantity) AS total_sales FROM Products INNER JOIN Order_Items ON Products.product_id = Order_Items.product_id INNER JOIN Orders ON Order_Items.order_id = Orders.order_id WHERE Orders.order_date BETWEEN '2022-05-01' AND '2022-05-31' GROUP BY Products.product_id ORDER BY total_sales DESC LIMIT 3;",
        "schema": "pharmacy",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "price",
                "description",
                "product_description",
                "supplier_id",
                "category_id",
                "units_in_stock",
                "expiration_date",
                "stock_quantity",
                "expiration_id",
                "discontinued",
                "cost_price",
                "quantity_in_stock",
                "unit_price",
                "unit_cost",
                "brand_name",
                "last_supplied_date",
                "manufacturer_name",
                "backorder"
            ],
            "Order_Items": [
                "product_id",
                "order_id",
                "quantity"
            ],
            "Orders": [
                "order_date",
                "order_id",
                "order_total",
                "customer_id"
            ]
        }
    },
    {
        "id": 121,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'team_id', 'completed_by', 'skill_id', 'first_name', 'manager_id', 'last_name', 'job_title', 'office_location', 'role', 'years_of_experience', 'department_id', 'salary'], 'User_Skills': ['user_id', 'skill_id', 'proficiency_level', 'skill_name'], 'Skills': ['skill_name', 'skill_id', 'Python'], 'Meeting_Attendees': ['user_id', 'meeting_id', 'attendance_status', 'attendee_id', 'attendance_date'], 'Meetings': ['start_time', 'meeting_id', 'location', 'meeting_date', 'meeting_title', 'organizer_id', 'team_id', 'meeting_time'], 'Skill_Proficiencies': ['proficiency_level', 'skill_id', 'proficiency_level_num', 'skill_name']} and \n# the user question: Find all users who have a skill with the name containing \"project management\" and a proficiency level of \"Advanced\" and have attended a meeting with the word \"planning\" in the meeting title in the last 90 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all users who have a skill with the name containing \"project management\" and a proficiency level of \"Advanced\" and have attended a meeting with the word \"planning\" in the meeting title in the last 90 days:",
        "output": "SELECT DISTINCT Users.username FROM Users JOIN User_Skills ON Users.user_id = User_Skills.user_id JOIN Skills ON User_Skills.skill_id = Skills.skill_id JOIN Skill_Proficiencies ON User_Skills.skill_id = Skill_Proficiencies.skill_id JOIN Meeting_Attendees ON Users.user_id = Meeting_Attendees.user_id JOIN Meetings ON Meeting_Attendees.meeting_id = Meetings.meeting_id WHERE Skills.skill_name LIKE '%project management%' AND Skill_Proficiencies.proficiency_level = 'Advanced' AND Meetings.meeting_title LIKE '%planning%' AND Meetings.meeting_date BETWEEN DATE('now', '-90 day') AND DATE('now');",
        "schema": "leadership",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "team_id",
                "completed_by",
                "skill_id",
                "first_name",
                "manager_id",
                "last_name",
                "job_title",
                "office_location",
                "role",
                "years_of_experience",
                "department_id",
                "salary"
            ],
            "User_Skills": [
                "user_id",
                "skill_id",
                "proficiency_level",
                "skill_name"
            ],
            "Skills": [
                "skill_name",
                "skill_id",
                "Python"
            ],
            "Meeting_Attendees": [
                "user_id",
                "meeting_id",
                "attendance_status",
                "attendee_id",
                "attendance_date"
            ],
            "Meetings": [
                "start_time",
                "meeting_id",
                "location",
                "meeting_date",
                "meeting_title",
                "organizer_id",
                "team_id",
                "meeting_time"
            ],
            "Skill_Proficiencies": [
                "proficiency_level",
                "skill_id",
                "proficiency_level_num",
                "skill_name"
            ]
        }
    },
    {
        "id": 122,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Albums': ['album_title', 'artist_id', 'album_id', 'release_date', 'SUM###', 'label_id', 'release_year'], 'Albums_Producers': ['producer_id', 'album_id'], 'Producers': ['producer_name', 'producer_id']} and \n# the user question: Find the albums produced by the \"Nashville Sound\" producer:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the albums produced by the \"Nashville Sound\" producer:",
        "output": "SELECT Albums.album_title FROM Albums JOIN Albums_Producers ON Albums.album_id = Albums_Producers.album_id JOIN Producers ON Albums_Producers.producer_id = Producers.producer_id WHERE Producers.producer_name = 'Nashville Sound';",
        "schema": "country_music",
        "processed_schema_content": {
            "Albums": [
                "album_title",
                "artist_id",
                "album_id",
                "release_date",
                "SUM###",
                "label_id",
                "release_year"
            ],
            "Albums_Producers": [
                "producer_id",
                "album_id"
            ],
            "Producers": [
                "producer_name",
                "producer_id"
            ]
        }
    },
    {
        "id": 124,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'User_Activities': ['activity_value', 'activity_id', 'date_recorded', 'user_id', 'activity_units', 'activity_date', 'activity_duration', 'activity_intensity', 'activity_hr', 'activity_distance', 'activity_calories', 'activity_count', 'duration', 'distance', 'weight', 'heart_rate', 'date_completed', 'activity_name', 'calories_burned']} and \n# the user question: Find the name and email address of all users who have not completed any activities in the last 30 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and email address of all users who have not completed any activities in the last 30 days:",
        "output": "SELECT Users.first_name, Users.last_name, Users.email FROM Users WHERE Users.user_id NOT IN ( SELECT User_Activities.user_id FROM User_Activities WHERE User_Activities.activity_date BETWEEN date('now', '-30 days') AND date('now') ) GROUP BY Users.user_id;",
        "schema": "health_and_wellness_programs",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "first_name",
                "last_name",
                "email",
                "password",
                "phone_number",
                "address",
                "age",
                "gender",
                "bmi",
                "goal_id"
            ],
            "User_Activities": [
                "activity_value",
                "activity_id",
                "date_recorded",
                "user_id",
                "activity_units",
                "activity_date",
                "activity_duration",
                "activity_intensity",
                "activity_hr",
                "activity_distance",
                "activity_calories",
                "activity_count",
                "duration",
                "distance",
                "weight",
                "heart_rate",
                "date_completed",
                "activity_name",
                "calories_burned"
            ]
        }
    },
    {
        "id": 125,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Film': ['director', 'release_year', 'film_id', 'title', 'box_office', 'language_id', 'runtime', 'budget', 'genre', 'based_on_true_story', 'film_title', 'film_gross', 'film_release_date', 'film_length', 'film_imdb_rating', 'film_director', 'film_runtime_minutes', 'film_release_year', 'film_worldwide_gross', 'film_budget', 'production_company_id', 'film_box_office_gross', 'film_user_rating', 'film_runtime', 'film_director_gender', 'film_box_office_rank', 'genre_id', 'film_duration', 'film_box_office_collection', 'film_running_time', 'film_country', 'film_rating', 'film_revenue', 'film_box_office', 'film_language', 'film_name', 'studio_id', 'film_production_budget'], 'Film_Actor': ['actor_id', 'film_id'], 'Actor': ['actor_id', 'actor_name'], 'Character': ['character_name', 'character_id', 'gender', 'actor_name', 'military_rank_id', 'is_main_character', 'character_kills', 'film_id', 'character_death_date', 'character_birth_date', 'character_nationality', 'character_gender', 'character_death'], 'Film_Character': ['character_id', 'film_id']} and \n# the user question: Find all war films that were released in the 1990s and feature characters played by both Nicolas Cage and Tom Hanks:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all war films that were released in the 1990s and feature characters played by both Nicolas Cage and Tom Hanks:",
        "output": "SELECT Film.title, Film.release_year, Character.character_name FROM Film INNER JOIN Film_Character ON Film.film_id = Film_Character.film_id INNER JOIN Character ON Film_Character.character_id = Character.character_id INNER JOIN Film_Actor ON Film.film_id = Film_Actor.film_id INNER JOIN Actor ON Film_Actor.actor_id = Actor.actor_id WHERE Actor.actor_name IN ('Nicolas Cage', 'Tom Hanks') AND Film.release_year BETWEEN 1990 AND 1999 GROUP BY Film.title, Film.release_year, Character.character_name HAVING COUNT(DISTINCT Character.character_name) = 2;",
        "schema": "war_films",
        "processed_schema_content": {
            "Film": [
                "director",
                "release_year",
                "film_id",
                "title",
                "box_office",
                "language_id",
                "runtime",
                "budget",
                "genre",
                "based_on_true_story",
                "film_title",
                "film_gross",
                "film_release_date",
                "film_length",
                "film_imdb_rating",
                "film_director",
                "film_runtime_minutes",
                "film_release_year",
                "film_worldwide_gross",
                "film_budget",
                "production_company_id",
                "film_box_office_gross",
                "film_user_rating",
                "film_runtime",
                "film_director_gender",
                "film_box_office_rank",
                "genre_id",
                "film_duration",
                "film_box_office_collection",
                "film_running_time",
                "film_country",
                "film_rating",
                "film_revenue",
                "film_box_office",
                "film_language",
                "film_name",
                "studio_id",
                "film_production_budget"
            ],
            "Film_Actor": [
                "actor_id",
                "film_id"
            ],
            "Actor": [
                "actor_id",
                "actor_name"
            ],
            "Character": [
                "character_name",
                "character_id",
                "gender",
                "actor_name",
                "military_rank_id",
                "is_main_character",
                "character_kills",
                "film_id",
                "character_death_date",
                "character_birth_date",
                "character_nationality",
                "character_gender",
                "character_death"
            ],
            "Film_Character": [
                "character_id",
                "film_id"
            ]
        }
    },
    {
        "id": 127,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'VRExperiences': ['experience_id', 'game_id', 'developer', 'user_id', 'resolution', 'rating', 'genre', 'title', 'price', 'release_year', 'number_of_players', 'release_month', 'release_date', 'sale_price', 'rating_id', 'developer_id'], 'ExperienceThemes': ['experience_id', 'theme_id'], 'Themes': ['name', 'theme_id'], 'Platforms': ['platform_id', 'name'], 'Compatibility': ['platform_id', 'experience_id']} and \n# the user question: Find the names of all VR experiences that have a \"music\" theme and are available on the Oculus Quest 2, ordered by title in ascending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all VR experiences that have a \"music\" theme and are available on the Oculus Quest 2, ordered by title in ascending order.",
        "output": "SELECT VRExperiences.title FROM VRExperiences JOIN ExperienceThemes ON VRExperiences.experience_id = ExperienceThemes.experience_id JOIN Themes ON ExperienceThemes.theme_id = Themes.theme_id JOIN Compatibility ON VRExperiences.experience_id = Compatibility.experience_id JOIN Platforms ON Compatibility.platform_id = Platforms.platform_id WHERE Themes.name = 'Music' AND Platforms.name = 'Oculus Quest 2' ORDER BY VRExperiences.title ASC",
        "schema": "virtual_reality",
        "processed_schema_content": {
            "VRExperiences": [
                "experience_id",
                "game_id",
                "developer",
                "user_id",
                "resolution",
                "rating",
                "genre",
                "title",
                "price",
                "release_year",
                "number_of_players",
                "release_month",
                "release_date",
                "sale_price",
                "rating_id",
                "developer_id"
            ],
            "ExperienceThemes": [
                "experience_id",
                "theme_id"
            ],
            "Themes": [
                "name",
                "theme_id"
            ],
            "Platforms": [
                "platform_id",
                "name"
            ],
            "Compatibility": [
                "platform_id",
                "experience_id"
            ]
        }
    },
    {
        "id": 128,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Carvings': ['carving_id', 'name', 'description', 'price', 'image_url', 'vendor_id', 'stock', 'size', 'last_sold_date', 'cost', 'material_id', 'creation_date', 'type_id', 'weight', 'date_sold', 'is_available', 'width', 'length', 'weight_kg', 'carving_type_id'], 'Reviews': ['review_id', 'carving_id', 'user_id', 'rating', 'comment', 'review_date'], 'Order_Items': ['order_item_id', 'order_id', 'carving_id', 'quantity', 'price', 'order_date']} and \n# the user question: Find the average rating for carvings that have been ordered at least 5 times:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average rating for carvings that have been ordered at least 5 times:",
        "output": "SELECT AVG(r.rating) AS average_rating FROM Reviews r WHERE r.carving_id IN (SELECT c.carving_id FROM Carvings c JOIN Order_Items oi ON c.carving_id = oi.carving_id GROUP BY c.carving_id HAVING COUNT(*) >= 5);",
        "schema": "soapstone_carving",
        "processed_schema_content": {
            "Carvings": [
                "carving_id",
                "name",
                "description",
                "price",
                "image_url",
                "vendor_id",
                "stock",
                "size",
                "last_sold_date",
                "cost",
                "material_id",
                "creation_date",
                "type_id",
                "weight",
                "date_sold",
                "is_available",
                "width",
                "length",
                "weight_kg",
                "carving_type_id"
            ],
            "Reviews": [
                "review_id",
                "carving_id",
                "user_id",
                "rating",
                "comment",
                "review_date"
            ],
            "Order_Items": [
                "order_item_id",
                "order_id",
                "carving_id",
                "quantity",
                "price",
                "order_date"
            ]
        }
    },
    {
        "id": 130,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'stocks': ['stock_price', 'stock_name', 'shares', 'user_id', 'stock_id', 'stock_quantity', 'stock_symbol', 'company_name', 'stock_type_id', 'current_price', 'dividend_yield', 'stock_value', 'quantity', 'price', 'previous_value', 'current_value', 'stock_date', 'price_to_earnings', 'name', 'XYZ']} and \n# the user question: Calculate the total value of all stocks with a stock price greater than $100.00:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Calculate the total value of all stocks with a stock price greater than $100.00:",
        "output": "SELECT SUM(stock_quantity * stock_price) AS total_value FROM stocks WHERE stock_price > 100.00;",
        "schema": "finance",
        "processed_schema_content": {
            "stocks": [
                "stock_price",
                "stock_name",
                "shares",
                "user_id",
                "stock_id",
                "stock_quantity",
                "stock_symbol",
                "company_name",
                "stock_type_id",
                "current_price",
                "dividend_yield",
                "stock_value",
                "quantity",
                "price",
                "previous_value",
                "current_value",
                "stock_date",
                "price_to_earnings",
                "name",
                "XYZ"
            ]
        }
    },
    {
        "id": 131,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'User': ['id', 'name', 'email', 'janesmith', 'user_id', 'category_id', 'city_id', 'country_name', 'country'], 'Article_Rating': ['rating', 'article_id', 'user_id']} and \n# the user question: Retrieve the names and email addresses of users who have rated at least one article with a rating of 5 stars.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of users who have rated at least one article with a rating of 5 stars.",
        "output": "SELECT DISTINCT User.name, User.email FROM User JOIN Article_Rating ON User.id = Article_Rating.user_id WHERE Article_Rating.rating = 5;",
        "schema": "news_programs",
        "processed_schema_content": {
            "User": [
                "id",
                "name",
                "email",
                "janesmith",
                "user_id",
                "category_id",
                "city_id",
                "country_name",
                "country"
            ],
            "Article_Rating": [
                "rating",
                "article_id",
                "user_id"
            ]
        }
    },
    {
        "id": 135,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Transaction': ['BlockID', 'Recipient', 'Sender', 'PublicAddress', 'TransactionID', 'Amount', 'Fee', 'Timestamp', 'GasFee', 'GasUsed', 'GasLimit', 'GasPrice', 'EtherAmount', 'IsSuccess', 'Value', 'Currency', 'NodeID', 'SmartContractInstanceID', 'SenderWalletID', 'RecipientWalletID', 'ReceiverWalletID', 'ConfirmationTime', 'TokenID', 'FromWalletID', 'ToWalletID', 'Status', 'Type', 'ReceiverID', 'SenderID'], 'Wallet': ['BlockID', 'Balance', 'UserID', 'WalletID', 'PublicAddress', 'Currency']} and \n# the user question: Find the wallets that have received a high number of transactions within the last 30 days and have a balance in Ether greater than 500:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the wallets that have received a high number of transactions within the last 30 days and have a balance in Ether greater than 500:",
        "output": "SELECT Wallet.PublicAddress, COUNT(Transaction.TransactionID) AS TotalTransactions FROM Wallet JOIN Transaction ON Wallet.PublicAddress = Transaction.Recipient AND Transaction.Timestamp >= datetime('now', '-30 days') WHERE Wallet.Balance > 500 GROUP BY Wallet.PublicAddress ORDER BY TotalTransactions DESC",
        "schema": "blockchain_technology",
        "processed_schema_content": {
            "Transaction": [
                "BlockID",
                "Recipient",
                "Sender",
                "PublicAddress",
                "TransactionID",
                "Amount",
                "Fee",
                "Timestamp",
                "GasFee",
                "GasUsed",
                "GasLimit",
                "GasPrice",
                "EtherAmount",
                "IsSuccess",
                "Value",
                "Currency",
                "NodeID",
                "SmartContractInstanceID",
                "SenderWalletID",
                "RecipientWalletID",
                "ReceiverWalletID",
                "ConfirmationTime",
                "TokenID",
                "FromWalletID",
                "ToWalletID",
                "Status",
                "Type",
                "ReceiverID",
                "SenderID"
            ],
            "Wallet": [
                "BlockID",
                "Balance",
                "UserID",
                "WalletID",
                "PublicAddress",
                "Currency"
            ]
        }
    },
    {
        "id": 136,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Artists': ['artist_name', 'nationality', 'artist_id', 'birth_date', 'experience_years', 'country', 'birthdate'], 'Sculptures': ['width', 'depth', 'material', 'height', 'creation_date', 'sculpture_name', 'sculpture_id', 'artist_id', 'collection_id', 'material_id', 'rating']} and \n# the user question: Retrieve the names of sculptures that have a height greater than the average height of sculptures created by artists with more than 5 years of experience:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of sculptures that have a height greater than the average height of sculptures created by artists with more than 5 years of experience:",
        "output": "SELECT Sculptures.sculpture_name FROM Sculptures JOIN Artists ON Sculptures.artist_id = Artists.artist_id WHERE Sculptures.height > ( SELECT AVG(Sculptures.height) FROM Sculptures JOIN Artists ON Sculptures.artist_id = Artists.artist_id WHERE Artists.experience_years > 5 );",
        "schema": "sculpting",
        "processed_schema_content": {
            "Artists": [
                "artist_name",
                "nationality",
                "artist_id",
                "birth_date",
                "experience_years",
                "country",
                "birthdate"
            ],
            "Sculptures": [
                "width",
                "depth",
                "material",
                "height",
                "creation_date",
                "sculpture_name",
                "sculpture_id",
                "artist_id",
                "collection_id",
                "material_id",
                "rating"
            ]
        }
    },
    {
        "id": 137,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Inventory': ['product_id', 'warehouse_id', 'quantity'], 'Products': ['product_id', 'name', 'Product', 'price', 'category_id', 'rating', 'quantity_in_stock'], 'Order_Items': ['product_id', 'order_id', 'rating', 'quantity', 'customer_id', 'unit_price']} and \n# the user question: List the products that have never been ordered and are currently out of stock in all warehouses,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the products that have never been ordered and are currently out of stock in all warehouses",
        "output": "SELECT p.name FROM Products p WHERE NOT EXISTS (SELECT DISTINCT oi.product_id FROM Order_Items oi WHERE oi.product_id = p.product_id) AND p.product_id IN (SELECT DISTINCT i.product_id FROM Inventory i WHERE i.quantity = 0);",
        "schema": "shipping_and_logistics",
        "processed_schema_content": {
            "Inventory": [
                "product_id",
                "warehouse_id",
                "quantity"
            ],
            "Products": [
                "product_id",
                "name",
                "Product",
                "price",
                "category_id",
                "rating",
                "quantity_in_stock"
            ],
            "Order_Items": [
                "product_id",
                "order_id",
                "rating",
                "quantity",
                "customer_id",
                "unit_price"
            ]
        }
    },
    {
        "id": 138,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'customers': ['customer_id', 'email_address', 'customer_name', 'name', 'phone_number', 'email', 'id', 'customer_address', 'loyalty_program'], 'orders': ['customer_id', 'order_date', 'total_price', 'order_id', 'menu_item_id', 'date', 'waiter_id', 'id', 'date_placed']} and \n# the user question: Find the name and email address of all customers who have placed an order in the last 7 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and email address of all customers who have placed an order in the last 7 days.",
        "output": "SELECT customer_name, email_address FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE order_date >= DATE('now', '-7 days'));",
        "schema": "food_and_drink",
        "processed_schema_content": {
            "customers": [
                "customer_id",
                "email_address",
                "customer_name",
                "name",
                "phone_number",
                "email",
                "id",
                "customer_address",
                "loyalty_program"
            ],
            "orders": [
                "customer_id",
                "order_date",
                "total_price",
                "order_id",
                "menu_item_id",
                "date",
                "waiter_id",
                "id",
                "date_placed"
            ]
        }
    },
    {
        "id": 140,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_price', 'product_name', 'product_id', 'category_id', 'unit_price', 'quantity_in_stock', 'supplier_id', 'stock_quantity', 'category', 'unit_cost', 'reorder_level', 'etching_method', 'name', 'in_stock', 'price', 'discount', 'Product', 'last_reorder_date', 'collection_id', 'id']} and \n# the user question: Retrieve the name and price of all products that have a price higher than the average price of all products.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all products that have a price higher than the average price of all products.",
        "output": "SELECT product_name, unit_price FROM products WHERE unit_price > (SELECT AVG(unit_price) FROM products);",
        "schema": "glass_etching",
        "processed_schema_content": {
            "products": [
                "product_price",
                "product_name",
                "product_id",
                "category_id",
                "unit_price",
                "quantity_in_stock",
                "supplier_id",
                "stock_quantity",
                "category",
                "unit_cost",
                "reorder_level",
                "etching_method",
                "name",
                "in_stock",
                "price",
                "discount",
                "Product",
                "last_reorder_date",
                "collection_id",
                "id"
            ]
        }
    },
    {
        "id": 142,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['username', 'user_id', 'email', 'john_doe', 'jane_doe', 'sarah_smith', 'tom_wilson', 'robert_king', 'alice_smith', 'jack_smith', 'jane_smith', 'mary_jones', 'joe_brown', 'james_smith', 'jessica_wong', 'david_smith', 'first_name', 'last_name', 'james_wong', 'emily_smith', 'jennifer_wilson', 'subscription', 'date_of_birth'], 'Models': ['created_by', 'model_name', 'description', 'model_id', 'modified_date', 'user_i', 'algorithm', 'project_i', 'Rating', 'Created_date', 'rating', 'creation_date', 'category_id'], 'Model_Evaluation': ['metric_name', 'metric_value', 'model_id']} and \n# the user question: What are the names of the models that have been evaluated using the 'Accuracy' metric and have a value greater than 0.75, and were created by 'sarah_smith' or 'tom_wilson'?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What are the names of the models that have been evaluated using the 'Accuracy' metric and have a value greater than 0.75, and were created by 'sarah_smith' or 'tom_wilson'?",
        "output": "SELECT Models.model_name FROM Models INNER JOIN Model_Evaluation ON Models.model_id = Model_Evaluation.model_id WHERE Models.created_by IN (SELECT user_id FROM Users WHERE username IN ('sarah_smith', 'tom_wilson')) AND Model_Evaluation.metric_name = 'Accuracy' AND Model_Evaluation.metric_value > 0.75;",
        "schema": "data_mining",
        "processed_schema_content": {
            "Users": [
                "username",
                "user_id",
                "email",
                "john_doe",
                "jane_doe",
                "sarah_smith",
                "tom_wilson",
                "robert_king",
                "alice_smith",
                "jack_smith",
                "jane_smith",
                "mary_jones",
                "joe_brown",
                "james_smith",
                "jessica_wong",
                "david_smith",
                "first_name",
                "last_name",
                "james_wong",
                "emily_smith",
                "jennifer_wilson",
                "subscription",
                "date_of_birth"
            ],
            "Models": [
                "created_by",
                "model_name",
                "description",
                "model_id",
                "modified_date",
                "user_i",
                "algorithm",
                "project_i",
                "Rating",
                "Created_date",
                "rating",
                "creation_date",
                "category_id"
            ],
            "Model_Evaluation": [
                "metric_name",
                "metric_value",
                "model_id"
            ]
        }
    },
    {
        "id": 145,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employees': ['Access_Level', 'On_Vacation', 'User_ID', 'Password_Change_Time', 'Employee_Name', 'Last_Access_Time', 'Employee_ID', 'Department_ID', 'Remote_Access', 'Suspicious_Activity', 'Completed_Training', 'EmployeeId', 'FirstName', 'LastName']} and \n# the user question: Retrieve the names of all employees who have not completed the required cybersecurity training.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all employees who have not completed the required cybersecurity training.",
        "output": "SELECT Employee_Name FROM Employees WHERE Completed_Training = 'false';",
        "schema": "cybersecurity",
        "processed_schema_content": {
            "Employees": [
                "Access_Level",
                "On_Vacation",
                "User_ID",
                "Password_Change_Time",
                "Employee_Name",
                "Last_Access_Time",
                "Employee_ID",
                "Department_ID",
                "Remote_Access",
                "Suspicious_Activity",
                "Completed_Training",
                "EmployeeId",
                "FirstName",
                "LastName"
            ]
        }
    },
    {
        "id": 146,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'start_date', 'cost', 'project_name', 'end_date', 'project_manager', 'estimated_end_date', 'budget', 'completion_date', 'location_id', 'status', 'due_date'], 'Material_Usages': ['project_id', 'quantity', 'material_id', 'quantity_used', 'task_id'], 'Materials': ['material_cost', 'material_id', 'material_name', 'cost_per_unit', 'UnitCost', 'MaterialName', 'MaterialID'], 'Project_Tasks': ['project_id', 'task_id', 'is_completed', 'completed_date', 'start_date', 'task_name', 'estimated_completion_date', 'due_date', 'priority_level']} and \n# the user question: Find the top 5 most expensive materials, and the projects they were used on.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the top 5 most expensive materials, and the projects they were used on.",
        "output": "SELECT Materials.material_name, Projects.project_name, Material_Usages.quantity * Materials.cost_per_unit AS material_cost FROM Material_Usages JOIN Materials ON Material_Usages.material_id = Materials.material_id JOIN Project_Tasks ON Material_Usages.task_id = Project_Tasks.task_id AND Material_Usages.project_id = Project_Tasks.project_id JOIN Projects ON Project_Tasks.project_id = Projects.project_id ORDER BY material_cost DESC LIMIT 5;",
        "schema": "operations_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "start_date",
                "cost",
                "project_name",
                "end_date",
                "project_manager",
                "estimated_end_date",
                "budget",
                "completion_date",
                "location_id",
                "status",
                "due_date"
            ],
            "Material_Usages": [
                "project_id",
                "quantity",
                "material_id",
                "quantity_used",
                "task_id"
            ],
            "Materials": [
                "material_cost",
                "material_id",
                "material_name",
                "cost_per_unit",
                "UnitCost",
                "MaterialName",
                "MaterialID"
            ],
            "Project_Tasks": [
                "project_id",
                "task_id",
                "is_completed",
                "completed_date",
                "start_date",
                "task_name",
                "estimated_completion_date",
                "due_date",
                "priority_level"
            ]
        }
    },
    {
        "id": 148,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Publishers': ['PublisherID', 'PublisherName', 'SeriesID'], 'Series': ['SeriesID', 'SeriesTitle', 'PublisherID', 'AverageCoverPrice', 'AverageIssueRating', 'SeriesName'], 'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate'], 'Genres': ['GenreID', 'GenreName'], 'IssueGenres': ['IssueGenreID', 'IssueID', 'GenreID', 'SeriesID']} and \n# the user question: Find all series that have published issues with a cover price less than $2.50 and a comedy or slice-of-life genre, and have been published by Boom! Studios or Oni Press:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all series that have published issues with a cover price less than $2.50 and a comedy or slice-of-life genre, and have been published by Boom! Studios or Oni Press:",
        "output": "SELECT DISTINCT Series.SeriesTitle FROM Series JOIN Issues ON Series.SeriesID = Issues.SeriesID JOIN IssueGenres ON Issues.IssueID = IssueGenres.IssueID JOIN Genres ON IssueGenres.GenreID = Genres.GenreID JOIN Publishers ON Series.PublisherID = Publishers.PublisherID WHERE Issues.CoverPrice < 2.50 AND (Genres.GenreName = 'Comedy' OR Genres.GenreName = 'Slice-of-Life') AND (Publishers.PublisherName = 'Boom! Studios' OR Publishers.PublisherName = 'Oni Press');",
        "schema": "comic_books",
        "processed_schema_content": {
            "Publishers": [
                "PublisherID",
                "PublisherName",
                "SeriesID"
            ],
            "Series": [
                "SeriesID",
                "SeriesTitle",
                "PublisherID",
                "AverageCoverPrice",
                "AverageIssueRating",
                "SeriesName"
            ],
            "Issues": [
                "IssueID",
                "IssueNumber",
                "CoverDate",
                "SeriesID",
                "CoverPrice",
                "VariantCover",
                "IssueTitle",
                "Price",
                "PublishDate",
                "Stock",
                "IssueRating",
                "CharacterID",
                "PageCount",
                "LanguageID",
                "Discount",
                "PublicationDate",
                "IssuePrice",
                "Rating",
                "SeriesI",
                "WriterI",
                "IssueName",
                "Sales",
                "PublishedDate"
            ],
            "Genres": [
                "GenreID",
                "GenreName"
            ],
            "IssueGenres": [
                "IssueGenreID",
                "IssueID",
                "GenreID",
                "SeriesID"
            ]
        }
    },
    {
        "id": 149,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'loan': ['return_date', 'loan_date', 'artwork_id', 'lender_id', 'location_id', 'start_date', 'artwork_location_id'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']} and \n# the user question: Find the titles and mediums of all artwork in the \"The Vatican Museums\" that were created by \"Michelangelo\" and are not currently on loan.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the titles and mediums of all artwork in the \"The Vatican Museums\" that were created by \"Michelangelo\" and are not currently on loan.",
        "output": "SELECT a.title, a.medium FROM artwork AS a INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS l ON al.location_id = l.location_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id WHERE ar.last_name = 'Michelangelo' AND l.name = 'The Vatican Museums' AND al.end_date IS NULL AND a.artwork_id NOT IN (SELECT artwork_id FROM loan WHERE return_date IS NULL);",
        "schema": "painting",
        "processed_schema_content": {
            "artwork": [
                "artwork_id",
                "title",
                "year_created",
                "artist_id",
                "dimensions",
                "medium",
                "lender_id",
                "year",
                "estimated_value",
                "creation_date"
            ],
            "loan": [
                "return_date",
                "loan_date",
                "artwork_id",
                "lender_id",
                "location_id",
                "start_date",
                "artwork_location_id"
            ],
            "location": [
                "name",
                "start_date",
                "end_date",
                "location_id",
                "return_date",
                "Gallery",
                "Art",
                "Uffizi",
                "Gogh",
                "Museum",
                "Van",
                "State",
                "Hermitage",
                "Paul",
                "Getty",
                "Fine",
                "Houston",
                "Arts",
                "Boston",
                "Institute",
                "Chicago",
                "Bilbao",
                "Guggenheim",
                "Solomon",
                "Rijksmuseum",
                "type",
                "city",
                "founded_date",
                "country",
                "continent"
            ],
            "artwork_location": [
                "start_date",
                "end_date",
                "artwork_id",
                "location_id",
                "on_display",
                "on_loan",
                "artwork_location_id",
                "museum_id"
            ],
            "artist": [
                "first_name",
                "date_of_birth",
                "last_name",
                "artist_id",
                "Kandinsky",
                "van",
                "Gogh",
                "birth_date",
                "birth_country",
                "year_born",
                "country_of_birth",
                "birth_year",
                "country_of_origin",
                "gender"
            ]
        }
    },
    {
        "id": 152,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Artists': ['artist_name', 'nationality', 'artist_id', 'birth_date', 'experience_years', 'country', 'birthdate'], 'Sculptures': ['width', 'depth', 'material', 'height', 'creation_date', 'sculpture_name', 'sculpture_id', 'artist_id', 'collection_id', 'material_id', 'rating']} and \n# the user question: Retrieve the names of sculptures that have a height greater than the average height of sculptures created by artists with more than 38 years of experience:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of sculptures that have a height greater than the average height of sculptures created by artists with more than 38 years of experience:",
        "output": "SELECT Sculptures.sculpture_name FROM Sculptures JOIN Artists ON Sculptures.artist_id = Artists.artist_id WHERE Sculptures.height > ( SELECT AVG(Sculptures.height) FROM Sculptures JOIN Artists ON Sculptures.artist_id = Artists.artist_id WHERE Artists.experience_years > 38 );",
        "schema": "sculpting",
        "processed_schema_content": {
            "Artists": [
                "artist_name",
                "nationality",
                "artist_id",
                "birth_date",
                "experience_years",
                "country",
                "birthdate"
            ],
            "Sculptures": [
                "width",
                "depth",
                "material",
                "height",
                "creation_date",
                "sculpture_name",
                "sculpture_id",
                "artist_id",
                "collection_id",
                "material_id",
                "rating"
            ]
        }
    },
    {
        "id": 154,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Variation': ['gene_id', 'position', 'variation_type', 'frequency', 'variant_frequency', 'variant_id', 'variant_name', 'Type', 'Gene_ID', 'Frequency', 'ID'], 'Transcript': ['gene_id', 'coding_sequence_end', 'transcript_name', 'transcript_id', 'protein_id', 'coding_sequence_length', 'transcript_length', 'length', 'cds_length']} and \n# the user question: Retrieve the names of all genes and their associated transcripts that have a variation of type \"splice site\" and are located on chromosome 109.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all genes and their associated transcripts that have a variation of type \"splice site\" and are located on chromosome 109.",
        "output": "SELECT Gene.gene_name, Transcript.transcript_name FROM Gene JOIN Transcript ON Gene.gene_id = Transcript.gene_id JOIN Variation ON Gene.gene_id = Variation.gene_id WHERE Variation.variation_type = 'splice site' AND Variation.position BETWEEN Gene.start_position AND Gene.end_position AND Gene.chromosome_id = 109;",
        "schema": "genetics",
        "processed_schema_content": {
            "Gene": [
                "end_position",
                "start_position",
                "chromosome_id",
                "gene_name",
                "gene_id",
                "tss_position",
                "chromosome",
                "entrez_gene_id",
                "hgnc_symbol",
                "chromosome_number",
                "disease_id",
                "associated_disease",
                "accession_number",
                "Name",
                "ID"
            ],
            "Variation": [
                "gene_id",
                "position",
                "variation_type",
                "frequency",
                "variant_frequency",
                "variant_id",
                "variant_name",
                "Type",
                "Gene_ID",
                "Frequency",
                "ID"
            ],
            "Transcript": [
                "gene_id",
                "coding_sequence_end",
                "transcript_name",
                "transcript_id",
                "protein_id",
                "coding_sequence_length",
                "transcript_length",
                "length",
                "cds_length"
            ]
        }
    },
    {
        "id": 155,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['FirstName', 'EmployeeID', 'LastName', 'JobTitle', 'SupervisorID', 'State', 'Country', 'Region', 'EndYear', 'StartYear', 'Continent', 'Title', 'QuarterlySalesTarget', 'EmailAddress', 'HireDate', 'City'], 'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID']} and \n# the user question: Retrieve the list of all employees who have never processed an order, including their first name, last name, and email address:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of all employees who have never processed an order, including their first name, last name, and email address:",
        "output": "SELECT Employee.FirstName, Employee.LastName, Employee.EmailAddress FROM Employee LEFT JOIN SalesOrder ON Employee.EmployeeID = SalesOrder.EmployeeID WHERE SalesOrder.EmployeeID IS NULL;",
        "schema": "business_strategy",
        "processed_schema_content": {
            "Employee": [
                "FirstName",
                "EmployeeID",
                "LastName",
                "JobTitle",
                "SupervisorID",
                "State",
                "Country",
                "Region",
                "EndYear",
                "StartYear",
                "Continent",
                "Title",
                "QuarterlySalesTarget",
                "EmailAddress",
                "HireDate",
                "City"
            ],
            "SalesOrder": [
                "OrderID",
                "Year",
                "CustomerID",
                "OrderDate",
                "TotalAmount",
                "TotalPrice",
                "QuarterID",
                "ExpectedDeliveryDate",
                "ShippedDate",
                "EmployeeID",
                "CountryCode",
                "ReturnID",
                "OfficeID",
                "Discount",
                "OrderNumber",
                "Status",
                "RegionID"
            ]
        }
    },
    {
        "id": 156,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Cities': ['city_name', 'city_id', 'country_id', 'country_name', 'region_id', 'state_id', 'air_quality_index', 'year', 'state_name'], 'Emissions': ['emission_value', 'source_id', 'city_id', 'date', 'country_id', 'marine_area_id', 'facility_id', 'activity_id', 'emissions'], 'Pollution_Sources': ['source_id', 'emission_type']} and \n# the user question: Show the top 5 cities with the highest levels of sulfur dioxide emissions in the first quarter of 2025, along with their respective levels.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Show the top 5 cities with the highest levels of sulfur dioxide emissions in the first quarter of 2025, along with their respective levels.",
        "output": "SELECT c.city_name, e.emission_value FROM Cities c JOIN Emissions e ON c.city_id = e.city_id JOIN Pollution_Sources ps ON ps.source_id = e.source_id WHERE ps.emission_type = 'Sulfur Dioxide' AND e.date BETWEEN '2025-01-01' AND '2025-03-31' ORDER BY e.emission_value DESC LIMIT 5;",
        "schema": "environment",
        "processed_schema_content": {
            "Cities": [
                "city_name",
                "city_id",
                "country_id",
                "country_name",
                "region_id",
                "state_id",
                "air_quality_index",
                "year",
                "state_name"
            ],
            "Emissions": [
                "emission_value",
                "source_id",
                "city_id",
                "date",
                "country_id",
                "marine_area_id",
                "facility_id",
                "activity_id",
                "emissions"
            ],
            "Pollution_Sources": [
                "source_id",
                "emission_type"
            ]
        }
    },
    {
        "id": 158,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Activities': ['activity_id', 'program_id', 'activity_type', 'goal_id', 'activity_category', 'activity_intensity_factor', 'activity_name', 'Strength', 'Training'], 'User_Activities': ['activity_value', 'activity_id', 'date_recorded', 'user_id', 'activity_units', 'activity_date', 'activity_duration', 'activity_intensity', 'activity_hr', 'activity_distance', 'activity_calories', 'activity_count', 'duration', 'distance', 'weight', 'heart_rate', 'date_completed', 'activity_name', 'calories_burned']} and \n# the user question: Find the number of users who have completed \"Yoga\" activities for at least 30 minutes on each day of the past week:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of users who have completed \"Yoga\" activities for at least 30 minutes on each day of the past week:",
        "output": "SELECT COUNT(*) AS Total_Users FROM ( SELECT User_Activities.user_id, COUNT(DISTINCT User_Activities.date_completed) AS Days_Completed FROM User_Activities JOIN Activities ON User_Activities.activity_id = Activities.activity_id WHERE Activities.activity_type = 'Yoga' AND User_Activities.duration >= 30 AND User_Activities.date_completed BETWEEN DATE('now', '-7 days') AND DATE('now') GROUP BY User_Activities.user_id HAVING Days_Completed = 7 ) AS Seven_Day_Completers;",
        "schema": "health_and_wellness_programs",
        "processed_schema_content": {
            "Activities": [
                "activity_id",
                "program_id",
                "activity_type",
                "goal_id",
                "activity_category",
                "activity_intensity_factor",
                "activity_name",
                "Strength",
                "Training"
            ],
            "User_Activities": [
                "activity_value",
                "activity_id",
                "date_recorded",
                "user_id",
                "activity_units",
                "activity_date",
                "activity_duration",
                "activity_intensity",
                "activity_hr",
                "activity_distance",
                "activity_calories",
                "activity_count",
                "duration",
                "distance",
                "weight",
                "heart_rate",
                "date_completed",
                "activity_name",
                "calories_burned"
            ]
        }
    },
    {
        "id": 159,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project status of \"In Progress\" and have not been assigned to any tasks with a task status of \"Completed\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that has a project status of \"In Progress\" and have not been assigned to any tasks with a task status of \"Completed\".",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Status = 'In Progress' GROUP BY e.Employee_ID HAVING SUM(CASE WHEN tk.Task_Status = 'Completed' THEN 1 ELSE 0 END) = 0;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        }
    },
    {
        "id": 160,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Tasks': ['status', 'assigned_to', 'task_id', 'project_id', 'due_date', 'user_id', 'completed', 'task_name', 'created_at', 'completed_at', 'assigned_t', 'assigned', 'date_completed', 'data_table_id', 'completion_time', 'task_description', 'category', 'completion_date', 'open_date', 'priority', 'completed_date', 'start_date', 'estimated_time', 'end_date', 'created_by', 'estimated_duration', 'cost', 'deadline', 'completed_on', 'started_on', 'duration', 'assigned_on', 'date_assigned', 'date_created'], 'Users': ['username', 'email', 'user_id', 'assigned_to', 'completed_tasks', 'total_tasks', 'user_name', 'doe', 'salary', 'num_completed_tasks'], 'Task_Logs': ['started_at', 'duration', 'task_id', 'log_id', 'start_time', 'logged_by', 'date_logged', 'date_updated', 'cost', 'user_id']} and \n# the user question: Find the average time spent by each user on all the tasks assigned to them:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average time spent by each user on all the tasks assigned to them:",
        "output": "SELECT Users.user_name, AVG(Task_Logs.duration) AS avg_duration FROM Users LEFT JOIN Tasks ON Users.user_id = Tasks.assigned_to LEFT JOIN Task_Logs ON Tasks.task_id = Task_Logs.task_id WHERE Task_Logs.duration IS NOT NULL GROUP BY Users.user_id;",
        "schema": "data_analysis",
        "processed_schema_content": {
            "Tasks": [
                "status",
                "assigned_to",
                "task_id",
                "project_id",
                "due_date",
                "user_id",
                "completed",
                "task_name",
                "created_at",
                "completed_at",
                "assigned_t",
                "assigned",
                "date_completed",
                "data_table_id",
                "completion_time",
                "task_description",
                "category",
                "completion_date",
                "open_date",
                "priority",
                "completed_date",
                "start_date",
                "estimated_time",
                "end_date",
                "created_by",
                "estimated_duration",
                "cost",
                "deadline",
                "completed_on",
                "started_on",
                "duration",
                "assigned_on",
                "date_assigned",
                "date_created"
            ],
            "Users": [
                "username",
                "email",
                "user_id",
                "assigned_to",
                "completed_tasks",
                "total_tasks",
                "user_name",
                "doe",
                "salary",
                "num_completed_tasks"
            ],
            "Task_Logs": [
                "started_at",
                "duration",
                "task_id",
                "log_id",
                "start_time",
                "logged_by",
                "date_logged",
                "date_updated",
                "cost",
                "user_id"
            ]
        }
    },
    {
        "id": 161,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['username', 'user_id', 'address_id', 'work_address_id', 'last_active_date', 'home_address_id', 'last_activity_date', 'registration_date', 'email', 'total_purchase_amount', 'user_type_id', 'country', 'name'], 'Orders': ['order_date', 'order_id', 'address_id', 'user_id', 'order_total', 'shipping_status', 'shipping_address_id'], 'Addresses': ['state_id', 'address_id', 'city', 'street_address', 'city_id', 'country_id'], 'States': ['country_id', 'state_id', 'state_name', 'sales_tax_rate', 'population_density', 'time_zone', 'population', 'state_code'], 'Countries': ['country_name', 'country_id', 'population', 'continent', 'country_code', 'name', 'region_id'], 'Payment_details': ['order_id', 'payment_id'], 'Payment_methods': ['payment_type', 'payment_id']} and \n# the user question: Get the details of all orders that were made by users who live in Canada and were paid using a credit card:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the details of all orders that were made by users who live in Canada and were paid using a credit card:",
        "output": "SELECT Orders.order_id, Users.username, Addresses.street_address, Addresses.city, States.state_name, Countries.country_name FROM Orders INNER JOIN Users ON Orders.user_id = Users.user_id INNER JOIN Addresses ON Users.address_id = Addresses.address_id INNER JOIN States ON Addresses.state_id = States.state_id INNER JOIN Countries ON States.country_id = Countries.country_id INNER JOIN Payment_details ON Orders.order_id = Payment_details.order_id INNER JOIN Payment_methods ON Payment_details.payment_id = Payment_methods.payment_id WHERE Countries.country_name = 'Canada' AND Payment_methods.payment_type = 'Credit Card';",
        "schema": "illustration",
        "processed_schema_content": {
            "Users": [
                "username",
                "user_id",
                "address_id",
                "work_address_id",
                "last_active_date",
                "home_address_id",
                "last_activity_date",
                "registration_date",
                "email",
                "total_purchase_amount",
                "user_type_id",
                "country",
                "name"
            ],
            "Orders": [
                "order_date",
                "order_id",
                "address_id",
                "user_id",
                "order_total",
                "shipping_status",
                "shipping_address_id"
            ],
            "Addresses": [
                "state_id",
                "address_id",
                "city",
                "street_address",
                "city_id",
                "country_id"
            ],
            "States": [
                "country_id",
                "state_id",
                "state_name",
                "sales_tax_rate",
                "population_density",
                "time_zone",
                "population",
                "state_code"
            ],
            "Countries": [
                "country_name",
                "country_id",
                "population",
                "continent",
                "country_code",
                "name",
                "region_id"
            ],
            "Payment_details": [
                "order_id",
                "payment_id"
            ],
            "Payment_methods": [
                "payment_type",
                "payment_id"
            ]
        }
    },
    {
        "id": 162,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id'], 'Client_Diagnoses': ['client_id', 'diagnosis_id'], 'Diagnoses': ['id', 'name'], 'Payments': ['billing_id', 'client_id', 'amount', 'session_id', 'date', 'payment_method', 'id', 'payment_date', 'session_attendee_id']} and \n# the user question: Retrieve the names and total earnings of all therapists who have conducted at least one session with a client who has a diagnosis of \"addiction\" and has made a payment using a credit card, and order the results by total earnings:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and total earnings of all therapists who have conducted at least one session with a client who has a diagnosis of \"addiction\" and has made a payment using a credit card, and order the results by total earnings:",
        "output": "SELECT t.name, SUM(p.amount) AS total_earnings FROM Therapists t INNER JOIN Sessions s ON t.id = s.therapist_id INNER JOIN Session_Attendees sa ON s.id = sa.session_id INNER JOIN Clients c ON sa.client_id = c.id INNER JOIN Client_Diagnoses cd ON c.id = cd.client_id INNER JOIN Diagnoses d ON cd.diagnosis_id = d.id INNER JOIN Payments p ON s.id = p.session_id WHERE d.name = 'addiction' AND p.payment_method = 'credit_card' GROUP BY t.id ORDER BY total_earnings DESC",
        "schema": "counseling",
        "processed_schema_content": {
            "Clients": [
                "email",
                "phone_number",
                "id",
                "name",
                "date_of_birth",
                "gender",
                "referral_source_id",
                "primary_care_physician_id",
                "substance_abuse_history",
                "depression_history",
                "trauma_history",
                "ptsd_diagnosis",
                "addiction_history",
                "personality_disorder_history",
                "eating_disorder_history",
                "bipolar_history",
                "schizophrenia_history",
                "self_harm_history",
                "anxiety_history",
                "eating_disorders_history",
                "alcoholism_history",
                "gambling_addiction_history",
                "smoking_addiction_history",
                "alcohol_addiction_history",
                "drug_addiction_history",
                "sex_addiction_history",
                "ptsd_history",
                "ocd_history",
                "suicidal_ideation_history",
                "age",
                "phone",
                "balance_owing",
                "contact_number"
            ],
            "Sessions": [
                "therapist_id",
                "client_id",
                "id",
                "date",
                "location",
                "name",
                "duration",
                "therapy_type_id",
                "cost",
                "start_time",
                "session_type",
                "rate",
                "",
                "SessionNotes",
                "SessionID",
                "SessionDate",
                "CounselorID"
            ],
            "Therapists": [
                "id",
                "name",
                "gender",
                "email",
                "phone",
                "license_state",
                "experience_years",
                "last_name",
                "is_active",
                "is_licensed",
                "rate_per_hour"
            ],
            "Session_Attendees": [
                "session_id",
                "client_id",
                "attendee_type",
                "attended",
                "id"
            ],
            "Client_Diagnoses": [
                "client_id",
                "diagnosis_id"
            ],
            "Diagnoses": [
                "id",
                "name"
            ],
            "Payments": [
                "billing_id",
                "client_id",
                "amount",
                "session_id",
                "date",
                "payment_method",
                "id",
                "payment_date",
                "session_attendee_id"
            ]
        }
    },
    {
        "id": 163,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['order_date', 'quantity', 'customer_id', 'product_id', 'ship_date', 'due_date', 'order_number', 'order_id', 'order_total']} and \n# the user question: Find the total revenue generated from orders in the year 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total revenue generated from orders in the year 2022.",
        "output": "SELECT SUM(order_total) as total_revenue FROM orders WHERE YEAR(order_date) = 2022",
        "schema": "gardening",
        "processed_schema_content": {
            "orders": [
                "order_date",
                "quantity",
                "customer_id",
                "product_id",
                "ship_date",
                "due_date",
                "order_number",
                "order_id",
                "order_total"
            ]
        }
    },
    {
        "id": 167,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'coaches': ['name', 'coach_id', 'coach_name', 'email'], 'injuries': ['injury_type', 'athlete_id', 'injury_id', 'injury_date', 'injury_duration'], 'athlete_injury_status': ['injury_id', 'status_id'], 'injury_status': ['status_name', 'status_id'], 'teams': ['team_id', 'coach_id', 'sport_id', 'team_name', 'team_medal', 'championship_id'], 'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'mental_skills': ['skill_id', 'skill_name', 'skill_description', 'athlete_id', 'Focus', 'Visualization', 'skill_mastered', 'skill_level', 'Excellent', 'High', 'Low']} and \n# the user question: Get a list of all coaches who have at least one athlete with a \"High\" level in the \"Visualization\" mental skill and a \"Major\" injury status, along with the number of injured athletes.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get a list of all coaches who have at least one athlete with a \"High\" level in the \"Visualization\" mental skill and a \"Major\" injury status, along with the number of injured athletes.",
        "output": "SELECT coaches.name, COUNT(DISTINCT injuries.injury_id) AS num_injured_athletes FROM coaches INNER JOIN teams ON coaches.coach_id = teams.coach_id INNER JOIN athletes ON teams.team_id = athletes.team_id INNER JOIN injuries ON athletes.athlete_id = injuries.athlete_id INNER JOIN athlete_injury_status ON injuries.injury_id = athlete_injury_status.injury_id INNER JOIN injury_status ON athlete_injury_status.status_id = injury_status.status_id INNER JOIN athlete_skills ON athletes.athlete_id = athlete_skills.athlete_id INNER JOIN mental_skills ON athlete_skills.skill_id = mental_skills.skill_id WHERE injury_status.status_name = 'Major' AND mental_skills.skill_name = 'Visualization' AND athlete_skills.skill_level = 'High' GROUP BY coaches.name;",
        "schema": "sports_psychology",
        "processed_schema_content": {
            "athletes": [
                "name",
                "athlete_id",
                "team_id",
                "last_name",
                "athlete_name",
                "age"
            ],
            "coaches": [
                "name",
                "coach_id",
                "coach_name",
                "email"
            ],
            "injuries": [
                "injury_type",
                "athlete_id",
                "injury_id",
                "injury_date",
                "injury_duration"
            ],
            "athlete_injury_status": [
                "injury_id",
                "status_id"
            ],
            "injury_status": [
                "status_name",
                "status_id"
            ],
            "teams": [
                "team_id",
                "coach_id",
                "sport_id",
                "team_name",
                "team_medal",
                "championship_id"
            ],
            "athlete_skills": [
                "skill_id",
                "athlete_id",
                "skill_level",
                "skill_mastered",
                "self_talk",
                "mental_preparation",
                "imagery",
                "goal_setting",
                "anxiety",
                "focus",
                "mental_toughness",
                "confidence",
                "motivation"
            ],
            "mental_skills": [
                "skill_id",
                "skill_name",
                "skill_description",
                "athlete_id",
                "Focus",
                "Visualization",
                "skill_mastered",
                "skill_level",
                "Excellent",
                "High",
                "Low"
            ]
        }
    },
    {
        "id": 168,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Payments': ['amount', 'client_id', 'appointment_type_id', 'session_id', 'payment_date', 'appointment_id', 'service_id', 'session_type_id', 'payment_id', 'amount_due', 'amount_paid', 'payment_method'], 'Clients': ['client_id', 'email', 'date_of_birth', 'last_name', 'first_name', 'phone_number', 'age', 'primary_concern', 'phone', 'birth_date', 'state', 'health_condition']} and \n# the user question: Retrieve the name and total amount paid by each client who has paid for services in the year 2095, sorted by total amount in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total amount paid by each client who has paid for services in the year 2095, sorted by total amount in descending order.",
        "output": "SELECT c.first_name, c.last_name, SUM(p.amount) AS total_paid FROM Clients c INNER JOIN Payments p ON c.client_id = p.client_id WHERE p.payment_date BETWEEN '2095-01-01' AND '2095-12-31' GROUP BY c.client_id ORDER BY total_paid DESC;",
        "schema": "hypnotherapy",
        "processed_schema_content": {
            "Payments": [
                "amount",
                "client_id",
                "appointment_type_id",
                "session_id",
                "payment_date",
                "appointment_id",
                "service_id",
                "session_type_id",
                "payment_id",
                "amount_due",
                "amount_paid",
                "payment_method"
            ],
            "Clients": [
                "client_id",
                "email",
                "date_of_birth",
                "last_name",
                "first_name",
                "phone_number",
                "age",
                "primary_concern",
                "phone",
                "birth_date",
                "state",
                "health_condition"
            ]
        }
    },
    {
        "id": 169,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Ingredients': ['Ingredient_ID', 'Ingredient_name', 'Supplier_ID', 'Unit_ID', 'Price_per_unit', 'Unit_of_measurement', 'Unit_price', 'Date_last_purchased', 'Date_supplied', 'Description', 'Unit', 'Cost_per_unit', 'Stock_quantity', 'Quantity', 'Unit_of_measure'], 'Recipes': ['Recipe_ID', 'Recipe_name', 'Description', 'Difficulty_level', 'Total_cooking_time', 'Recipe_description', 'Vegetarian', 'Menu_Item_ID'], 'Recipe_Ingredients': ['Recipe_Ingredient_ID', 'Recipe_ID', 'Ingredient_ID', 'Quantity', 'Quantity_used'], 'Menu_Items': ['Menu_Item_ID', 'Menu_Item_name', 'Description', 'Price', 'Availability', 'Recipe_ID', 'Category_ID', 'Restaurant_ID', 'Vegetarian', 'Calories', 'Menu_Category_ID']} and \n# the user question: Retrieve the name and price of all menu items that contain either shrimp or crab as ingredients and have a price of less than $30.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all menu items that contain either shrimp or crab as ingredients and have a price of less than $30.",
        "output": "SELECT Menu_Items.Menu_Item_name, Menu_Items.Price FROM Menu_Items JOIN Recipes ON Menu_Items.Menu_Item_name = Recipes.Recipe_name JOIN Recipe_Ingredients AS ri1 ON Recipes.Recipe_ID = ri1.Recipe_ID AND ri1.Ingredient_ID IN ( SELECT Ingredient_ID FROM Ingredients WHERE Ingredient_name = 'Shrimp' OR Ingredient_name = 'Crab' ) WHERE Menu_Items.Price < 30;",
        "schema": "food_and_drink",
        "processed_schema_content": {
            "Ingredients": [
                "Ingredient_ID",
                "Ingredient_name",
                "Supplier_ID",
                "Unit_ID",
                "Price_per_unit",
                "Unit_of_measurement",
                "Unit_price",
                "Date_last_purchased",
                "Date_supplied",
                "Description",
                "Unit",
                "Cost_per_unit",
                "Stock_quantity",
                "Quantity",
                "Unit_of_measure"
            ],
            "Recipes": [
                "Recipe_ID",
                "Recipe_name",
                "Description",
                "Difficulty_level",
                "Total_cooking_time",
                "Recipe_description",
                "Vegetarian",
                "Menu_Item_ID"
            ],
            "Recipe_Ingredients": [
                "Recipe_Ingredient_ID",
                "Recipe_ID",
                "Ingredient_ID",
                "Quantity",
                "Quantity_used"
            ],
            "Menu_Items": [
                "Menu_Item_ID",
                "Menu_Item_name",
                "Description",
                "Price",
                "Availability",
                "Recipe_ID",
                "Category_ID",
                "Restaurant_ID",
                "Vegetarian",
                "Calories",
                "Menu_Category_ID"
            ]
        }
    },
    {
        "id": 170,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Sculptures': ['width', 'depth', 'material', 'height', 'creation_date', 'sculpture_name', 'sculpture_id', 'artist_id', 'collection_id', 'material_id', 'rating'], 'Exhibitions': ['exhibition_name', 'exhibition_id', 'museum_id', 'date', 'city', 'city_id', 'sculpture_id'], 'Sculpture_Exhibition': ['sculpture_id', 'exhibition_id', 'museum_id'], 'Museums': ['museum_name', 'museum_id', 'location', 'country', 'city']} and \n# the user question: Retrieve the names of sculptures that have been exhibited in a specific museum (e.g., \"Hermitage Museum\") and have a height greater than 13.8 meters:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of sculptures that have been exhibited in a specific museum (e.g., \"Hermitage Museum\") and have a height greater than 13.8 meters:",
        "output": "SELECT Sculptures.sculpture_name FROM Sculptures JOIN Sculpture_Exhibition ON Sculptures.sculpture_id = Sculpture_Exhibition.sculpture_id JOIN Exhibitions ON Sculpture_Exhibition.exhibition_id = Exhibitions.exhibition_id JOIN Museums ON Exhibitions.museum_id = Museums.museum_id WHERE Museums.museum_name = 'Hermitage Museum' AND Sculptures.height > 13.8;",
        "schema": "sculpting",
        "processed_schema_content": {
            "Sculptures": [
                "width",
                "depth",
                "material",
                "height",
                "creation_date",
                "sculpture_name",
                "sculpture_id",
                "artist_id",
                "collection_id",
                "material_id",
                "rating"
            ],
            "Exhibitions": [
                "exhibition_name",
                "exhibition_id",
                "museum_id",
                "date",
                "city",
                "city_id",
                "sculpture_id"
            ],
            "Sculpture_Exhibition": [
                "sculpture_id",
                "exhibition_id",
                "museum_id"
            ],
            "Museums": [
                "museum_name",
                "museum_id",
                "location",
                "country",
                "city"
            ]
        }
    },
    {
        "id": 171,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id'], 'product': ['name', 'product_id', 'revenue', 'iPhone', 'category_id', 'brand_id', 'quantity', 'price', 'rating'], 'purchase_item': ['product_id', 'price', 'purchase_id', 'quantity', 'discount', 'purchase_item_id']} and \n# the user question: Retrieve the name and total revenue of each product that has been sold in the past week and has a price greater than $50.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total revenue of each product that has been sold in the past week and has a price greater than $50.",
        "output": "SELECT product.name, SUM(purchase_item.price * purchase_item.quantity) AS total_revenue FROM product JOIN purchase_item ON product.product_id = purchase_item.product_id JOIN purchase ON purchase_item.purchase_id = purchase.purchase_id WHERE purchase.purchase_date >= DATE('now', '-7 days') AND product.price > 50 GROUP BY product.product_id",
        "schema": "advertising",
        "processed_schema_content": {
            "purchase": [
                "customer_id",
                "purchase_date",
                "sales_rep_id",
                "purchase_id",
                "payment_status",
                "store_id"
            ],
            "product": [
                "name",
                "product_id",
                "revenue",
                "iPhone",
                "category_id",
                "brand_id",
                "quantity",
                "price",
                "rating"
            ],
            "purchase_item": [
                "product_id",
                "price",
                "purchase_id",
                "quantity",
                "discount",
                "purchase_item_id"
            ]
        }
    },
    {
        "id": 173,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Sale_Items': ['product_id', 'sale_id', 'quantity', 'sale_item_id', 'customer_id', 'unit_price', 'discount_code', 'sale_date', 'price'], 'Sales': ['employee_id', 'sale_id', 'sale_date', 'customer_id', 'total', 'total_amount', 'payment_method', 'total_price', 'total_spent', 'location_id', 'coupon_code', 'start_date', 'discount_percentage', 'end_date', 'product_id'], 'Product_Ratings': ['rating', 'product_id']} and \n# the user question: Retrieve the names and total revenue for all products that have been sold at least 30 times and have a rating of 4 or higher, and were sold in the month of June 2023.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and total revenue for all products that have been sold at least 30 times and have a rating of 4 or higher, and were sold in the month of June 2023.",
        "output": "SELECT Products.product_name, SUM(Sale_Items.quantity * Products.price) AS total_revenue FROM Products INNER JOIN Sale_Items ON Products.product_id = Sale_Items.product_id INNER JOIN Product_Ratings ON Products.product_id = Product_Ratings.product_id INNER JOIN Sales ON Sale_Items.sale_id = Sales.sale_id WHERE Product_Ratings.rating >= 4 AND (SELECT COUNT(Sale_Items.sale_item_id) FROM Sale_Items WHERE Sale_Items.product_id = Products.product_id) >= 30 AND strftime('%Y-%m', Sales.sale_date) = '2023-06' GROUP BY Products.product_id ORDER BY total_revenue DESC;",
        "schema": "pharmacy",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "price",
                "description",
                "product_description",
                "supplier_id",
                "category_id",
                "units_in_stock",
                "expiration_date",
                "stock_quantity",
                "expiration_id",
                "discontinued",
                "cost_price",
                "quantity_in_stock",
                "unit_price",
                "unit_cost",
                "brand_name",
                "last_supplied_date",
                "manufacturer_name",
                "backorder"
            ],
            "Sale_Items": [
                "product_id",
                "sale_id",
                "quantity",
                "sale_item_id",
                "customer_id",
                "unit_price",
                "discount_code",
                "sale_date",
                "price"
            ],
            "Sales": [
                "employee_id",
                "sale_id",
                "sale_date",
                "customer_id",
                "total",
                "total_amount",
                "payment_method",
                "total_price",
                "total_spent",
                "location_id",
                "coupon_code",
                "start_date",
                "discount_percentage",
                "end_date",
                "product_id"
            ],
            "Product_Ratings": [
                "rating",
                "product_id"
            ]
        }
    },
    {
        "id": 174,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Orders': ['customer_id', 'order_total', 'order_date', 'order_id', 'delivery_date', 'shipment_id', 'order_total_cost', 'date', 'total_price', 'total_amount', 'shipping_date'], 'Customers': ['customer_id', 'phone_number', 'email', 'customer_name', 'address', 'customer_email', 'customer_phone', 'customer_address', 'email_address', 'phone', 'registration_date', 'country', 'city', 'state', 'name', 'id', 'first_name', 'last_name'], 'Order_Items': ['order_id', 'product_id', 'glassware_item_id', 'quantity', 'unit_price', 'order_item_id', 'price', 'item_cost', 'item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the list of orders along with the customer name and the total quantity of glassware items in each order, where the quantity is between 15 and 25, sorted by quantity in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of orders along with the customer name and the total quantity of glassware items in each order, where the quantity is between 15 and 25, sorted by quantity in descending order.",
        "output": "SELECT Orders.order_id, Customers.customer_name, SUM(Order_Items.quantity) AS total_items_ordered FROM Orders INNER JOIN Customers ON Orders.customer_id = Customers.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Orders.order_id HAVING total_items_ordered BETWEEN 15 AND 25 ORDER BY total_items_ordered DESC;",
        "schema": "glass_etching",
        "processed_schema_content": {
            "Orders": [
                "customer_id",
                "order_total",
                "order_date",
                "order_id",
                "delivery_date",
                "shipment_id",
                "order_total_cost",
                "date",
                "total_price",
                "total_amount",
                "shipping_date"
            ],
            "Customers": [
                "customer_id",
                "phone_number",
                "email",
                "customer_name",
                "address",
                "customer_email",
                "customer_phone",
                "customer_address",
                "email_address",
                "phone",
                "registration_date",
                "country",
                "city",
                "state",
                "name",
                "id",
                "first_name",
                "last_name"
            ],
            "Order_Items": [
                "order_id",
                "product_id",
                "glassware_item_id",
                "quantity",
                "unit_price",
                "order_item_id",
                "price",
                "item_cost",
                "item_id",
                "order_date",
                "item_price"
            ]
        }
    },
    {
        "id": 175,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Event': ['event_id', 'name', 'date', 'location', 'description', 'campaign_id', 'state', 'city', 'venue_id', 'start_date', 'price', 'capacity', 'start_time', 'status', 'location_id', 'host_organization', 'Event_Name', 'Event_ID', 'Date_Held'], 'Attendee': ['attendee_id', 'first_name', 'last_name', 'email', 'phone_number'], 'Attendance': ['attendance_id', 'event_id', 'attendee_id'], 'Venue': ['venue_id', 'capacity', 'city', 'city_pop', 'zip', 'city_name', 'name', 'state_id', 'city_id', 'state', 'country_id']} and \n# the user question: Retrieve the names and email addresses of all attendees who have registered for an event taking place in a venue with a capacity of at least 5000 and the event has a start time within the next week:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all attendees who have registered for an event taking place in a venue with a capacity of at least 5000 and the event has a start time within the next week:",
        "output": "SELECT DISTINCT Attendee.first_name, Attendee.last_name, Attendee.email FROM Attendee INNER JOIN Attendance ON Attendee.attendee_id = Attendance.attendee_id INNER JOIN Event ON Attendance.event_id = Event.event_id INNER JOIN Venue ON Event.venue_id = Venue.venue_id WHERE Venue.capacity >= 5000 AND Event.start_time BETWEEN date('now') AND date('now', '+1 week');",
        "schema": "public_relations",
        "processed_schema_content": {
            "Event": [
                "event_id",
                "name",
                "date",
                "location",
                "description",
                "campaign_id",
                "state",
                "city",
                "venue_id",
                "start_date",
                "price",
                "capacity",
                "start_time",
                "status",
                "location_id",
                "host_organization",
                "Event_Name",
                "Event_ID",
                "Date_Held"
            ],
            "Attendee": [
                "attendee_id",
                "first_name",
                "last_name",
                "email",
                "phone_number"
            ],
            "Attendance": [
                "attendance_id",
                "event_id",
                "attendee_id"
            ],
            "Venue": [
                "venue_id",
                "capacity",
                "city",
                "city_pop",
                "zip",
                "city_name",
                "name",
                "state_id",
                "city_id",
                "state",
                "country_id"
            ]
        }
    },
    {
        "id": 176,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'description', 'supplier_id', 'price', 'category_id']} and \n# the user question: List the product names and their prices for products with a price lower than the average price of all products. Display only the top 5 products with the lowest prices:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the product names and their prices for products with a price lower than the average price of all products. Display only the top 5 products with the lowest prices:",
        "output": "SELECT product_name, price FROM Products WHERE price < (SELECT AVG(price) FROM Products) ORDER BY price ASC LIMIT 5;",
        "schema": "interior_design",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "description",
                "supplier_id",
                "price",
                "category_id"
            ]
        }
    },
    {
        "id": 177,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Documentary_Films': ['length', 'rating', 'title', 'film_id', 'release_date', 'director_id', 'runtime', 'production_company_id', 'duration', 'runtime_minutes', 'duration_minutes', 'tagline', 'release_year'], 'Directors': ['director_id', 'nationality', 'director_name', 'birthdate', 'birthplace', 'gender', 'gender_id', 'last_name', 'first_name'], 'Film_Directors_Map': ['director_id', 'film_id', 'director_role'], 'Film_Topics_Map': ['topic_id', 'film_id'], 'Topics': ['topic_id', 'topic_name']} and \n# the user question: Find the names and release dates of all documentary films that have a topic related to travel and a crew member with a role of \"Director\" who was born in the United Kingdom.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and release dates of all documentary films that have a topic related to travel and a crew member with a role of \"Director\" who was born in the United Kingdom.",
        "output": "SELECT DISTINCT Documentary_Films.title, Documentary_Films.release_date FROM Documentary_Films JOIN Film_Topics_Map ON Documentary_Films.film_id = Film_Topics_Map.film_id JOIN Topics ON Film_Topics_Map.topic_id = Topics.topic_id JOIN Film_Directors_Map ON Documentary_Films.film_id = Film_Directors_Map.film_id JOIN Directors ON Film_Directors_Map.director_id = Directors.director_id WHERE Topics.topic_name = 'Travel' AND Directors.birthplace = 'United Kingdom';",
        "schema": "documentary_films",
        "processed_schema_content": {
            "Documentary_Films": [
                "length",
                "rating",
                "title",
                "film_id",
                "release_date",
                "director_id",
                "runtime",
                "production_company_id",
                "duration",
                "runtime_minutes",
                "duration_minutes",
                "tagline",
                "release_year"
            ],
            "Directors": [
                "director_id",
                "nationality",
                "director_name",
                "birthdate",
                "birthplace",
                "gender",
                "gender_id",
                "last_name",
                "first_name"
            ],
            "Film_Directors_Map": [
                "director_id",
                "film_id",
                "director_role"
            ],
            "Film_Topics_Map": [
                "topic_id",
                "film_id"
            ],
            "Topics": [
                "topic_id",
                "topic_name"
            ]
        }
    },
    {
        "id": 178,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'User': ['UserID', 'FirstName', 'LastName', 'Email', 'Password', 'Birthdate', 'Gender', 'Age', 'Height', 'BMI', 'Weight'], 'Workout': ['WorkoutID', 'UserID', 'PlanID', 'Date', 'WorkoutType', 'StartTime', 'EndTime', 'Duration', 'TimeSeconds', 'CaloriesBurned', 'WorkoutTypeID', 'Distance', 'Type', 'TotalCalories', 'USERID', 'WorkoutName', 'Steps', 'HeartRate', 'ExerciseTypeID']} and \n# the user question: Find the names and email addresses of all users who have completed a workout in the last week and have burned more than 500 calories:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and email addresses of all users who have completed a workout in the last week and have burned more than 500 calories:",
        "output": "SELECT DISTINCT User.FirstName, User.LastName, User.Email FROM User INNER JOIN Workout ON User.UserID = Workout.UserID WHERE Workout.Date >= DATE('now', '-7 days') AND Workout.CaloriesBurned > 500 GROUP BY User.UserID",
        "schema": "fitness",
        "processed_schema_content": {
            "User": [
                "UserID",
                "FirstName",
                "LastName",
                "Email",
                "Password",
                "Birthdate",
                "Gender",
                "Age",
                "Height",
                "BMI",
                "Weight"
            ],
            "Workout": [
                "WorkoutID",
                "UserID",
                "PlanID",
                "Date",
                "WorkoutType",
                "StartTime",
                "EndTime",
                "Duration",
                "TimeSeconds",
                "CaloriesBurned",
                "WorkoutTypeID",
                "Distance",
                "Type",
                "TotalCalories",
                "USERID",
                "WorkoutName",
                "Steps",
                "HeartRate",
                "ExerciseTypeID"
            ]
        }
    },
    {
        "id": 180,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Ocean_Basins': ['basin_id', 'basin_name', 'depth', 'continent', 'surface_area', 'temperature_range']} and \n# the user question: Which ocean basins have a depth greater than 10,000 meters and are located in the Southern Hemisphere?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Which ocean basins have a depth greater than 10,000 meters and are located in the Southern Hemisphere?",
        "output": "SELECT basin_name FROM Ocean_Basins WHERE depth > 10000 AND continent = 'Southern Hemisphere';",
        "schema": "oceanography",
        "processed_schema_content": {
            "Ocean_Basins": [
                "basin_id",
                "basin_name",
                "depth",
                "continent",
                "surface_area",
                "temperature_range"
            ]
        }
    },
    {
        "id": 182,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Series': ['SeriesID', 'SeriesTitle', 'PublisherID', 'AverageCoverPrice', 'AverageIssueRating', 'SeriesName'], 'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate'], 'Creators': ['CreatorID', 'CreatorName'], 'IssueCreators': ['CreatorID', 'IssueID', 'RoleName', 'Role']} and \n# the user question: Find the top 10 series with the most distinct writers:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the top 10 series with the most distinct writers:",
        "output": "SELECT Series.SeriesTitle, COUNT(DISTINCT Creators.CreatorID) as NumWriters FROM Series JOIN Issues ON Series.SeriesID = Issues.SeriesID JOIN IssueCreators ON Issues.IssueID = IssueCreators.IssueID JOIN Creators ON IssueCreators.CreatorID = Creators.CreatorID GROUP BY Series.SeriesID ORDER BY NumWriters DESC LIMIT 10;",
        "schema": "comic_books",
        "processed_schema_content": {
            "Series": [
                "SeriesID",
                "SeriesTitle",
                "PublisherID",
                "AverageCoverPrice",
                "AverageIssueRating",
                "SeriesName"
            ],
            "Issues": [
                "IssueID",
                "IssueNumber",
                "CoverDate",
                "SeriesID",
                "CoverPrice",
                "VariantCover",
                "IssueTitle",
                "Price",
                "PublishDate",
                "Stock",
                "IssueRating",
                "CharacterID",
                "PageCount",
                "LanguageID",
                "Discount",
                "PublicationDate",
                "IssuePrice",
                "Rating",
                "SeriesI",
                "WriterI",
                "IssueName",
                "Sales",
                "PublishedDate"
            ],
            "Creators": [
                "CreatorID",
                "CreatorName"
            ],
            "IssueCreators": [
                "CreatorID",
                "IssueID",
                "RoleName",
                "Role"
            ]
        }
    },
    {
        "id": 184,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'email', 'password', 'registration_date', 'experience_id', 'playtime', 'age', 'country', 'duration', 'total_duration', 'gender'], 'VRExperiences': ['experience_id', 'game_id', 'developer', 'user_id', 'resolution', 'rating', 'genre', 'title', 'price', 'release_year', 'number_of_players', 'release_month', 'release_date', 'sale_price', 'rating_id', 'developer_id'], 'ExperienceRatings': ['experience_id', 'user_id', 'rating', 'resolution'], 'Playtimes': ['experience_id', 'user_id', 'game_id', 'playtime', 'duration', 'session_id', 'playtime_id']} and \n# the user question: Find the total playtime and number of ratings for each user who has played the \"Superhot\" VR experience.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total playtime and number of ratings for each user who has played the \"Superhot\" VR experience.",
        "output": "SELECT DISTINCT Users.username, SUM(Playtimes.duration) as total_playtime, COUNT(ExperienceRatings.rating) as number_of_ratings FROM Users JOIN Playtimes ON Users.user_id = Playtimes.user_id JOIN VRExperiences ON Playtimes.experience_id = VRExperiences.experience_id JOIN ExperienceRatings ON VRExperiences.experience_id = ExperienceRatings.experience_id WHERE VRExperiences.title = 'Superhot' GROUP BY Users.user_id",
        "schema": "virtual_reality",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "email",
                "password",
                "registration_date",
                "experience_id",
                "playtime",
                "age",
                "country",
                "duration",
                "total_duration",
                "gender"
            ],
            "VRExperiences": [
                "experience_id",
                "game_id",
                "developer",
                "user_id",
                "resolution",
                "rating",
                "genre",
                "title",
                "price",
                "release_year",
                "number_of_players",
                "release_month",
                "release_date",
                "sale_price",
                "rating_id",
                "developer_id"
            ],
            "ExperienceRatings": [
                "experience_id",
                "user_id",
                "rating",
                "resolution"
            ],
            "Playtimes": [
                "experience_id",
                "user_id",
                "game_id",
                "playtime",
                "duration",
                "session_id",
                "playtime_id"
            ]
        }
    },
    {
        "id": 186,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Authors': ['first_name', 'author_id', 'last_name', 'nationality', 'author_name', 'author_city', 'AuthorID', 'AuthorName'], 'Customers': ['customer_id', 'email', 'first_name', 'last_name', 'country_id', 'address', 'city', 'country', 'state', 'loyalty_level', 'York', 'customer_name', 'customer_city', 'phone', 'subscribed_to_newsletter', 'has_ordered_online'], 'Order_Items': ['price', 'quantity', 'order_id', 'book_id', 'customer_id', 'publisher_id', 'is_returned', 'product_id', 'is_delivered', 'total_price', 'order_date'], 'Orders': ['order_date', 'order_id', 'customer_id', 'coupon_code', 'total_cost', 'total_quantity', 'shipping_address_id', 'total_price', 'total_amount', 'salesperson_id', 'book_id', 'channel_id', 'Order_Date', 'Order_Total', 'Customer_Name']} and \n# the user question: Retrieve the titles and authors of books that have been ordered by all customers from a specific city (e.g., New York).,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the titles and authors of books that have been ordered by all customers from a specific city (e.g., New York).",
        "output": "SELECT b.title, CONCAT(a.first_name, ' ', a.last_name) AS author FROM Books b JOIN Authors a ON b.author_id = a.author_id WHERE b.book_id IN ( SELECT oi.book_id FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE c.city = 'New York' GROUP BY oi.book_id HAVING COUNT(DISTINCT c.customer_id) = (SELECT COUNT(*) FROM Customers WHERE city = 'New York') );",
        "schema": "marketing_books",
        "processed_schema_content": {
            "Books": [
                "book_id",
                "title",
                "publisher_id",
                "publication_date",
                "author_id",
                "price",
                "publication_year",
                "publisher",
                "stock",
                "genre",
                "series",
                "year_published",
                "release_date",
                "word_count",
                "avg_rating",
                "A001",
                "genre_id",
                "stock_count",
                "category_id",
                "book_title",
                "rating",
                "available_for_purchase",
                "BookID",
                "BookTitle",
                "PublicationYear",
                "PublisherID",
                "Price"
            ],
            "Authors": [
                "first_name",
                "author_id",
                "last_name",
                "nationality",
                "author_name",
                "author_city",
                "AuthorID",
                "AuthorName"
            ],
            "Customers": [
                "customer_id",
                "email",
                "first_name",
                "last_name",
                "country_id",
                "address",
                "city",
                "country",
                "state",
                "loyalty_level",
                "York",
                "customer_name",
                "customer_city",
                "phone",
                "subscribed_to_newsletter",
                "has_ordered_online"
            ],
            "Order_Items": [
                "price",
                "quantity",
                "order_id",
                "book_id",
                "customer_id",
                "publisher_id",
                "is_returned",
                "product_id",
                "is_delivered",
                "total_price",
                "order_date"
            ],
            "Orders": [
                "order_date",
                "order_id",
                "customer_id",
                "coupon_code",
                "total_cost",
                "total_quantity",
                "shipping_address_id",
                "total_price",
                "total_amount",
                "salesperson_id",
                "book_id",
                "channel_id",
                "Order_Date",
                "Order_Total",
                "Customer_Name"
            ]
        }
    },
    {
        "id": 188,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['FirstName', 'EmployeeID', 'LastName', 'JobTitle', 'SupervisorID', 'State', 'Country', 'Region', 'EndYear', 'StartYear', 'Continent', 'Title', 'QuarterlySalesTarget', 'EmailAddress', 'HireDate', 'City'], 'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID'], 'EmployeeSales': ['EmployeeID', 'OrderID', 'CommissionRate', 'CustomerID', 'CommissionAmount', 'TotalPrice', 'Commission', 'Quantity', 'SalesGoal'], 'Customer': ['CustomerName', 'CustomerID', 'Country', 'SegmentID', 'Continent', 'PhoneNumber', 'Email', 'CreditLimit', 'State', 'AddressID', 'EmailAddress', 'LoyaltyLevelID', 'FirstName', 'LastName', 'City', 'StateCode', 'CountryCode', 'RegistrationDate']} and \n# the user question: Retrieve the list of customers and their respective sales representatives who have made at least one purchase in the year 2023, where the customer is located in South America and the sales representative is located in Brazil:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of customers and their respective sales representatives who have made at least one purchase in the year 2023, where the customer is located in South America and the sales representative is located in Brazil:",
        "output": "SELECT Customer.CustomerName, Employee.FirstName, Employee.LastName FROM Customer JOIN SalesOrder ON Customer.CustomerID = SalesOrder.CustomerID JOIN EmployeeSales ON SalesOrder.OrderID = EmployeeSales.OrderID JOIN Employee ON EmployeeSales.EmployeeID = Employee.EmployeeID WHERE SalesOrder.Year = 2023 AND Customer.Continent = 'South America' AND Employee.Country = 'Brazil' GROUP BY Customer.CustomerID, Employee.EmployeeID;",
        "schema": "business_strategy",
        "processed_schema_content": {
            "Employee": [
                "FirstName",
                "EmployeeID",
                "LastName",
                "JobTitle",
                "SupervisorID",
                "State",
                "Country",
                "Region",
                "EndYear",
                "StartYear",
                "Continent",
                "Title",
                "QuarterlySalesTarget",
                "EmailAddress",
                "HireDate",
                "City"
            ],
            "SalesOrder": [
                "OrderID",
                "Year",
                "CustomerID",
                "OrderDate",
                "TotalAmount",
                "TotalPrice",
                "QuarterID",
                "ExpectedDeliveryDate",
                "ShippedDate",
                "EmployeeID",
                "CountryCode",
                "ReturnID",
                "OfficeID",
                "Discount",
                "OrderNumber",
                "Status",
                "RegionID"
            ],
            "EmployeeSales": [
                "EmployeeID",
                "OrderID",
                "CommissionRate",
                "CustomerID",
                "CommissionAmount",
                "TotalPrice",
                "Commission",
                "Quantity",
                "SalesGoal"
            ],
            "Customer": [
                "CustomerName",
                "CustomerID",
                "Country",
                "SegmentID",
                "Continent",
                "PhoneNumber",
                "Email",
                "CreditLimit",
                "State",
                "AddressID",
                "EmailAddress",
                "LoyaltyLevelID",
                "FirstName",
                "LastName",
                "City",
                "StateCode",
                "CountryCode",
                "RegistrationDate"
            ]
        }
    },
    {
        "id": 189,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Coach': ['name', 'email', 'coach_id', 'phone', 'specialization', 'hourly_rate', 'bio', 'last_activity_time', 'avg_rating'], 'CoachingSession': ['end_time', 'location', 'coach_id', 'start_time', 'client_id', 'notes', 'session_id', 'package_id', 'goal_id', 'session_date', 'description', 'is_completed', 'duration', 'duration_in_hours', 'title', 'total_cost', 'cost'], 'Client': ['name', 'email', 'coach_id', 'package_id', 'client_id', 'address', 'birthdate', 'occupation', 'phone', 'preferred_coach', 'last_activity_time']} and \n# the user question: Retrieve the name and email address of all clients who have purchased a coaching session from a coach whose name contains the word 'John'.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email address of all clients who have purchased a coaching session from a coach whose name contains the word 'John'.",
        "output": "SELECT DISTINCT Client.name, Client.email FROM Client INNER JOIN CoachingSession ON Client.client_id = CoachingSession.client_id INNER JOIN Coach ON CoachingSession.coach_id = Coach.coach_id WHERE Coach.name LIKE '%John%';",
        "schema": "coaching",
        "processed_schema_content": {
            "Coach": [
                "name",
                "email",
                "coach_id",
                "phone",
                "specialization",
                "hourly_rate",
                "bio",
                "last_activity_time",
                "avg_rating"
            ],
            "CoachingSession": [
                "end_time",
                "location",
                "coach_id",
                "start_time",
                "client_id",
                "notes",
                "session_id",
                "package_id",
                "goal_id",
                "session_date",
                "description",
                "is_completed",
                "duration",
                "duration_in_hours",
                "title",
                "total_cost",
                "cost"
            ],
            "Client": [
                "name",
                "email",
                "coach_id",
                "package_id",
                "client_id",
                "address",
                "birthdate",
                "occupation",
                "phone",
                "preferred_coach",
                "last_activity_time"
            ]
        }
    },
    {
        "id": 191,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Participants': ['first_name', 'last_name', 'participant_id', 'gender', 'age', 'birth_year', 'date_of_birth', 'ag', 'age_group_id', 'parental_edu_id', 'language_group_id'], 'Participant_Tasks': ['task_id', 'participant_id', 'completion_date', 'score', 'completed'], 'Tasks': ['task_id', 'task_name', 'study_id', 'difficulty_level', 'duration', 'difficulty', 'task_category', 'category', 'Tower', 'Hanoi', 'Digit', 'Span', 'Working', 'Spatial', 'Symbol', 'Picture', 'Concepts', 'Coding', 'Regulation', 'Emotional'], 'Participant_Questionnaires': ['participant_id', 'questionnaire_id', 'participant_questionnaire_id', 'completion_date', 'response_text', 'score', 'task_id', 'completion_time'], 'Questionnaires': ['questionnaire_id', 'questionnaire_name', 'category', 'task_id', 'subtest_name', 'alerting', 'network_type', 'orienting']} and \n# the user question: Retrieve the names and ages of all participants who have completed the \"Sorting Objects\" task and have also completed a questionnaire with a score that is higher than 80:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and ages of all participants who have completed the \"Sorting Objects\" task and have also completed a questionnaire with a score that is higher than 80:",
        "output": "SELECT Participants.first_name, Participants.last_name, Participants.age FROM Participants JOIN Participant_Tasks ON Participants.participant_id = Participant_Tasks.participant_id JOIN Tasks ON Participant_Tasks.task_id = Tasks.task_id JOIN Participant_Questionnaires ON Participants.participant_id = Participant_Questionnaires.participant_id JOIN Questionnaires ON Participant_Questionnaires.questionnaire_id = Questionnaires.questionnaire_id WHERE Tasks.task_name = 'Sorting Objects' AND Participant_Questionnaires.score > 80;",
        "schema": "developmental_psychology",
        "processed_schema_content": {
            "Participants": [
                "first_name",
                "last_name",
                "participant_id",
                "gender",
                "age",
                "birth_year",
                "date_of_birth",
                "ag",
                "age_group_id",
                "parental_edu_id",
                "language_group_id"
            ],
            "Participant_Tasks": [
                "task_id",
                "participant_id",
                "completion_date",
                "score",
                "completed"
            ],
            "Tasks": [
                "task_id",
                "task_name",
                "study_id",
                "difficulty_level",
                "duration",
                "difficulty",
                "task_category",
                "category",
                "Tower",
                "Hanoi",
                "Digit",
                "Span",
                "Working",
                "Spatial",
                "Symbol",
                "Picture",
                "Concepts",
                "Coding",
                "Regulation",
                "Emotional"
            ],
            "Participant_Questionnaires": [
                "participant_id",
                "questionnaire_id",
                "participant_questionnaire_id",
                "completion_date",
                "response_text",
                "score",
                "task_id",
                "completion_time"
            ],
            "Questionnaires": [
                "questionnaire_id",
                "questionnaire_name",
                "category",
                "task_id",
                "subtest_name",
                "alerting",
                "network_type",
                "orienting"
            ]
        }
    },
    {
        "id": 193,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Event': ['event_id', 'event_name', 'event_date', 'location_id', 'event_category_id', 'event_type_id', 'location', 'venue_id', 'start_date', 'end_date', 'category', 'event_code', 'EVT', 'organizer_id', 'duration', 'name', 'Expo', 'Tech', 'country', 'category_id', 'city', 'ticket_price', 'date', 'start_time', 'end_time', 'min_age_requirement', 'event_type', 'capacity', 'registration_deadline', 'num_attendees', 'min_age', 'duration_hours', 'registration_fee', 'price'], 'Attendee': ['attendee_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'date_of_birth', 'job_title', 'city', 'age', 'email'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID']} and \n# the user question: What is the name and email address of the attendee who has registered for the most events in 2023?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What is the name and email address of the attendee who has registered for the most events in 2023?",
        "output": "SELECT Attendee.first_name, Attendee.last_name, Attendee.email_address FROM Attendee INNER JOIN Registration ON Attendee.attendee_id = Registration.attendee_id INNER JOIN Event ON Registration.event_id = Event.event_id WHERE strftime('%Y', Event.event_date) = '2023' GROUP BY Attendee.attendee_id ORDER BY COUNT(DISTINCT Event.event_id) DESC LIMIT 1;",
        "schema": "event_management",
        "processed_schema_content": {
            "Event": [
                "event_id",
                "event_name",
                "event_date",
                "location_id",
                "event_category_id",
                "event_type_id",
                "location",
                "venue_id",
                "start_date",
                "end_date",
                "category",
                "event_code",
                "EVT",
                "organizer_id",
                "duration",
                "name",
                "Expo",
                "Tech",
                "country",
                "category_id",
                "city",
                "ticket_price",
                "date",
                "start_time",
                "end_time",
                "min_age_requirement",
                "event_type",
                "capacity",
                "registration_deadline",
                "num_attendees",
                "min_age",
                "duration_hours",
                "registration_fee",
                "price"
            ],
            "Attendee": [
                "attendee_id",
                "first_name",
                "last_name",
                "email_address",
                "phone_number",
                "date_of_birth",
                "job_title",
                "city",
                "age",
                "email"
            ],
            "Registration": [
                "registration_id",
                "attendee_id",
                "event_id",
                "registration_date",
                "num_tickets",
                "attended",
                "fee",
                "registration_status",
                "payment_status",
                "payment_method",
                "num_attendees",
                "EventName",
                "AttendeeID"
            ]
        }
    },
    {
        "id": 198,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'password', 'email', 'registration_date', 'gender', 'johnD', 'Male', 'Female', 'location', 'alice23', 'janeD'], 'Profiles': ['profile_id', 'user_id', 'first_name', 'last_name', 'birth_date', 'gender', 'age'], 'Interests': ['interest_id', 'interest_name', 'Social', 'Political', 'Science'], 'User_Interests': ['user_interest_id', 'user_id', 'interest_id']} and \n# the user question: Retrieve the average age of users who have interests in both 'Social Networks' and 'Sociology of Media',\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the average age of users who have interests in both 'Social Networks' and 'Sociology of Media'",
        "output": "SELECT AVG(Profiles.age) AS average_age FROM Profiles INNER JOIN Users ON Profiles.user_id = Users.user_id INNER JOIN User_Interests AS ui1 ON Users.user_id = ui1.user_id INNER JOIN Interests AS i1 ON ui1.interest_id = i1.interest_id INNER JOIN User_Interests AS ui2 ON Users.user_id = ui2.user_id INNER JOIN Interests AS i2 ON ui2.interest_id = i2.interest_id WHERE i1.interest_name = 'Social Networks' AND i2.interest_name = 'Sociology of Media';",
        "schema": "sociology",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "password",
                "email",
                "registration_date",
                "gender",
                "johnD",
                "Male",
                "Female",
                "location",
                "alice23",
                "janeD"
            ],
            "Profiles": [
                "profile_id",
                "user_id",
                "first_name",
                "last_name",
                "birth_date",
                "gender",
                "age"
            ],
            "Interests": [
                "interest_id",
                "interest_name",
                "Social",
                "Political",
                "Science"
            ],
            "User_Interests": [
                "user_interest_id",
                "user_id",
                "interest_id"
            ]
        }
    },
    {
        "id": 200,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Order': ['order_id', 'customer_id', 'order_date', 'status', 'store_id', 'date', 'total_amount', 'total_cost', 'total_price'], 'Order_Item': ['order_id', 'book_id', 'quantity', 'price', 'store_id', 'order_date', 'customer_id', 'unit_price', 'inventory_id', 'date', 'order_item_date'], 'Store': ['store_id', 'name', 'address', 'phone_number', 'state', 'store_name', 'city_id']} and \n# the user question: Find the total revenue for the Main Street Bookstore in the month of January 2023.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total revenue for the Main Street Bookstore in the month of January 2023.",
        "output": "SELECT SUM(Order_Item.quantity * Order_Item.price) AS total_revenue FROM Order JOIN Order_Item ON Order.order_id = Order_Item.order_id JOIN Store ON Order.store_id = Store.store_id WHERE Store.name = 'Main Street Bookstore' AND Order.order_date BETWEEN '2023-01-01' AND '2023-01-31';",
        "schema": "business_books",
        "processed_schema_content": {
            "Order": [
                "order_id",
                "customer_id",
                "order_date",
                "status",
                "store_id",
                "date",
                "total_amount",
                "total_cost",
                "total_price"
            ],
            "Order_Item": [
                "order_id",
                "book_id",
                "quantity",
                "price",
                "store_id",
                "order_date",
                "customer_id",
                "unit_price",
                "inventory_id",
                "date",
                "order_item_date"
            ],
            "Store": [
                "store_id",
                "name",
                "address",
                "phone_number",
                "state",
                "store_name",
                "city_id"
            ]
        }
    },
    {
        "id": 201,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Show': ['show_id', 'title', 'composer', 'lyricist', 'book_writer', 'premiere_date', 'theater_id', 'genre_id', 'production_company_id', 'director_id', 'composer_id', 'lyricist_id', 'choreographer_id', 'writer_id', 'season_id', 'genre', 'run_time', 'runtime', 'year', 'duration_minutes', 'running_time', 'rating'], 'Performance': ['performance_id', 'date', 'show_id', 'theater_id', 'capacity', 'date_time', 'num_tickets_sold', 'num_performances', 'year', 'location_id', 'total_attendees', 'start_date', 'end_date', 'country', 'revenue', 'num_seats', 'ticket_price', 'start_time', 'price', 'musical_id']} and \n# the user question: Find the shows that have the highest number of unique theaters where they have been performed, along with the number of unique theaters.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the shows that have the highest number of unique theaters where they have been performed, along with the number of unique theaters.",
        "output": "SELECT Show.title, COUNT(DISTINCT Performance.theater_id) AS num_unique_theaters FROM Show INNER JOIN Performance ON Show.show_id = Performance.show_id GROUP BY Show.show_id ORDER BY num_unique_theaters DESC;",
        "schema": "musical_theater",
        "processed_schema_content": {
            "Show": [
                "show_id",
                "title",
                "composer",
                "lyricist",
                "book_writer",
                "premiere_date",
                "theater_id",
                "genre_id",
                "production_company_id",
                "director_id",
                "composer_id",
                "lyricist_id",
                "choreographer_id",
                "writer_id",
                "season_id",
                "genre",
                "run_time",
                "runtime",
                "year",
                "duration_minutes",
                "running_time",
                "rating"
            ],
            "Performance": [
                "performance_id",
                "date",
                "show_id",
                "theater_id",
                "capacity",
                "date_time",
                "num_tickets_sold",
                "num_performances",
                "year",
                "location_id",
                "total_attendees",
                "start_date",
                "end_date",
                "country",
                "revenue",
                "num_seats",
                "ticket_price",
                "start_time",
                "price",
                "musical_id"
            ]
        }
    },
    {
        "id": 203,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'celestial_bodies': ['radius', 'mass', 'name', 'type', 'number_of_moons', 'distance_from_sun', 'id', 'distance_from_earth', 'orbital_period', 'diameter', 'orbiting_body_id', 'average_surface_temperature', 'surface_temperature', 'perihelion_distance', 'period', 'semimajor_axis', 'redshift', 'velocity', 'luminosity', 'schwarzschild_radius', 'eccentricity', 'aphelion_distance', 'spin_period', 'semi_major_axis', 'surface_gravity', 'temperature', 'magnitude', 'accretion_disk_temperature', 'rotation_period', 'obliquity', 'pulse_period', 'peak_absolute_magnitude', 'albedo', 'apparent_magnitude', 'absolute_magnitude', 'spectral_type', 'discovery_year', 'spectral_class', 'distance_from_star', 'discovery_method_id', 'equilibrium_temperature', 'metallicity', 'age', 'effective_temperature', 'atmospheric_composition', 'inclination', 'parallax', 'rotation_velocity', 'axial_tilt', 'orbital_inclination', 'density', 'rotational_velocity', 'magnetic_field_strength', 'composition', 'rotational_period', 'spin', 'distance_from_galactic_center', 'binary_system', 'constellation', 'stellar_evolution_stage', 'star_cluster_type', 'galaxy', 'orbital_eccentricity', 'star_spectral_type', 'orbital_period_unit', 'diameter_unit', 'discovery_method', 'pulse_period_unit', 'distance_unit', 'radius_unit', 'avg_temperature', 'temperature_unit', 'aphelion_unit', 'perihelion_unit', 'event_horizon_unit', 'event_horizon_radius', 'luminosity_distance', 'orbit_type', 'equatorial_diameter', 'gravity_unit', 'escape_velocity', 'angle_unit', 'surface_area', 'density_unit', 'parent_body_id', 'atmospheric_pressure', 'luminosity_class', 'inner_habitable_zone', 'outer_habitable_zone', 'period_unit', 'classification', 'pressure_unit', 'surface_pressure', 'orbiting', 'distance', 'proper_motion', 'proper_motion_unit', 'mean_radius', 'mass_unit', 'temperature_range', 'Gas', 'Giant', 'brightness_temperature', 'parallax_unit', 'metallicity_unit', 'magnetic_field_unit', 'spin_parameter', 'orbiting_id', 'stellar_mass', 'stage', 'radial_velocity', 'host_star', 'accretion_rate', 'core_type']} and \n# the user question: Retrieve the name and type of all celestial bodies that have a type of 'Black hole' and a mass greater than 5 solar masses.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all celestial bodies that have a type of 'Black hole' and a mass greater than 5 solar masses.",
        "output": "SELECT name, type FROM celestial_bodies WHERE type = 'Black hole' AND mass > 5 * (SELECT mass FROM celestial_bodies WHERE name = 'Sun');",
        "schema": "astronomy",
        "processed_schema_content": {
            "celestial_bodies": [
                "radius",
                "mass",
                "name",
                "type",
                "number_of_moons",
                "distance_from_sun",
                "id",
                "distance_from_earth",
                "orbital_period",
                "diameter",
                "orbiting_body_id",
                "average_surface_temperature",
                "surface_temperature",
                "perihelion_distance",
                "period",
                "semimajor_axis",
                "redshift",
                "velocity",
                "luminosity",
                "schwarzschild_radius",
                "eccentricity",
                "aphelion_distance",
                "spin_period",
                "semi_major_axis",
                "surface_gravity",
                "temperature",
                "magnitude",
                "accretion_disk_temperature",
                "rotation_period",
                "obliquity",
                "pulse_period",
                "peak_absolute_magnitude",
                "albedo",
                "apparent_magnitude",
                "absolute_magnitude",
                "spectral_type",
                "discovery_year",
                "spectral_class",
                "distance_from_star",
                "discovery_method_id",
                "equilibrium_temperature",
                "metallicity",
                "age",
                "effective_temperature",
                "atmospheric_composition",
                "inclination",
                "parallax",
                "rotation_velocity",
                "axial_tilt",
                "orbital_inclination",
                "density",
                "rotational_velocity",
                "magnetic_field_strength",
                "composition",
                "rotational_period",
                "spin",
                "distance_from_galactic_center",
                "binary_system",
                "constellation",
                "stellar_evolution_stage",
                "star_cluster_type",
                "galaxy",
                "orbital_eccentricity",
                "star_spectral_type",
                "orbital_period_unit",
                "diameter_unit",
                "discovery_method",
                "pulse_period_unit",
                "distance_unit",
                "radius_unit",
                "avg_temperature",
                "temperature_unit",
                "aphelion_unit",
                "perihelion_unit",
                "event_horizon_unit",
                "event_horizon_radius",
                "luminosity_distance",
                "orbit_type",
                "equatorial_diameter",
                "gravity_unit",
                "escape_velocity",
                "angle_unit",
                "surface_area",
                "density_unit",
                "parent_body_id",
                "atmospheric_pressure",
                "luminosity_class",
                "inner_habitable_zone",
                "outer_habitable_zone",
                "period_unit",
                "classification",
                "pressure_unit",
                "surface_pressure",
                "orbiting",
                "distance",
                "proper_motion",
                "proper_motion_unit",
                "mean_radius",
                "mass_unit",
                "temperature_range",
                "Gas",
                "Giant",
                "brightness_temperature",
                "parallax_unit",
                "metallicity_unit",
                "magnetic_field_unit",
                "spin_parameter",
                "orbiting_id",
                "stellar_mass",
                "stage",
                "radial_velocity",
                "host_star",
                "accretion_rate",
                "core_type"
            ]
        }
    },
    {
        "id": 205,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Specials': ['title', 'special_id', 'description', 'year', 'duration', 'release_year', 'show_id', 'production_id', 'release_date'], 'Special_Networks': ['special_id', 'network_id'], 'Networks': ['network_id', 'name'], 'Users': ['email', 'user_id', 'username'], 'User_Reviews': ['user_id', 'review_id'], 'Reviews': ['review_id', 'performance_id', 'rating', 'special_id', 'show_id']} and \n# the user question: Retrieve the usernames of all users who have reviewed at least one special that was released on HBO and had a rating of 10.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the usernames of all users who have reviewed at least one special that was released on HBO and had a rating of 10.",
        "output": "SELECT DISTINCT u.username FROM Users u JOIN User_Reviews ur ON ur.user_id = u.user_id JOIN Reviews r ON r.review_id = ur.review_id JOIN Specials s ON s.special_id = r.special_id JOIN Special_Networks sn ON sn.special_id = s.special_id JOIN Networks n ON n.network_id = sn.network_id WHERE n.name = 'HBO' AND r.rating = 10;",
        "schema": "stand-up_comedy",
        "processed_schema_content": {
            "Specials": [
                "title",
                "special_id",
                "description",
                "year",
                "duration",
                "release_year",
                "show_id",
                "production_id",
                "release_date"
            ],
            "Special_Networks": [
                "special_id",
                "network_id"
            ],
            "Networks": [
                "network_id",
                "name"
            ],
            "Users": [
                "email",
                "user_id",
                "username"
            ],
            "User_Reviews": [
                "user_id",
                "review_id"
            ],
            "Reviews": [
                "review_id",
                "performance_id",
                "rating",
                "special_id",
                "show_id"
            ]
        }
    },
    {
        "id": 210,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Habitats': ['location', 'name', 'habitat_id', 'description', 'ph_level', 'temperature', 'water_ph', 'salinity', 'precipitation', 'pH', 'temperature_range'], 'Ecosystems': ['habitat_id', 'name', 'ecosystem_id', 'description', 'conservation_status_id', 'mean_temperature', 'pH_level', 'precipitation_level', 'temperature', 'ph_level', 'num_predator_species', 'num_prey_species', 'species_richness', 'mean_primary_producer_biomass', 'mean_herbivore_biomass', 'primary_producer_biomass', 'top_predator_biomass', 'num_organisms', 'num_top_predators', 'num_prey', 'num_predators'], 'Organisms': ['organism_id', 'name', 'species', 'trophic_level_id', 'body_length', 'conservation_status_id', 'plant_id', 'nutrient_level', 'nutritional_value', 'nutrient_requirement', 'ecosystem_id', 'body_mass', 'biomass', 'population', 'common_name', 'is_plant', 'is_carnivorous', 'lifespan', 'diet_type'], 'Interactions': ['interaction_id', 'name', 'description', 'trophic_level_id', 'ecosystem_id', 'organism_id', 'symbiont_id', 'prey_id', 'food_web_id', 'population_size', 'predator_id', 'interaction_type'], 'ConservationStatuses': ['status', 'conservation_status_id']} and \n# the user question: Find the names of all habitats where the salinity level is between 10 ppt and 30 ppt and at least one organism has a conservation status of \"Threatened\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all habitats where the salinity level is between 10 ppt and 30 ppt and at least one organism has a conservation status of \"Threatened\".",
        "output": "SELECT Habitats.name FROM Habitats JOIN Ecosystems ON Ecosystems.habitat_id = Habitats.habitat_id JOIN Interactions ON Interactions.ecosystem_id = Ecosystems.ecosystem_id JOIN Organisms ON Organisms.organism_id = Interactions.organism_id JOIN ConservationStatuses ON ConservationStatuses.conservation_status_id = Ecosystems.conservation_status_id AND ConservationStatuses.status = 'Threatened' WHERE Habitats.salinity BETWEEN 10 AND 30;",
        "schema": "ecology",
        "processed_schema_content": {
            "Habitats": [
                "location",
                "name",
                "habitat_id",
                "description",
                "ph_level",
                "temperature",
                "water_ph",
                "salinity",
                "precipitation",
                "pH",
                "temperature_range"
            ],
            "Ecosystems": [
                "habitat_id",
                "name",
                "ecosystem_id",
                "description",
                "conservation_status_id",
                "mean_temperature",
                "pH_level",
                "precipitation_level",
                "temperature",
                "ph_level",
                "num_predator_species",
                "num_prey_species",
                "species_richness",
                "mean_primary_producer_biomass",
                "mean_herbivore_biomass",
                "primary_producer_biomass",
                "top_predator_biomass",
                "num_organisms",
                "num_top_predators",
                "num_prey",
                "num_predators"
            ],
            "Organisms": [
                "organism_id",
                "name",
                "species",
                "trophic_level_id",
                "body_length",
                "conservation_status_id",
                "plant_id",
                "nutrient_level",
                "nutritional_value",
                "nutrient_requirement",
                "ecosystem_id",
                "body_mass",
                "biomass",
                "population",
                "common_name",
                "is_plant",
                "is_carnivorous",
                "lifespan",
                "diet_type"
            ],
            "Interactions": [
                "interaction_id",
                "name",
                "description",
                "trophic_level_id",
                "ecosystem_id",
                "organism_id",
                "symbiont_id",
                "prey_id",
                "food_web_id",
                "population_size",
                "predator_id",
                "interaction_type"
            ],
            "ConservationStatuses": [
                "status",
                "conservation_status_id"
            ]
        }
    },
    {
        "id": 214,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'client_id', 'status', 'assigned_user_id', 'budget'], 'Clients': ['client_id', 'client_name', 'email'], 'Users': ['user_id', 'name', 'email']} and \n# the user question: Example: Retrieving the projects with their client and assigned user details: \"Retrieve the projects along with their client name and assigned user details.\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Example: Retrieving the projects with their client and assigned user details: \"Retrieve the projects along with their client name and assigned user details.\":",
        "output": "SELECT Projects.project_id, Projects.project_name, Clients.client_name, Users.name AS assigned_user FROM Projects JOIN Clients ON Projects.client_id = Clients.client_id JOIN Users ON Projects.assigned_user_id = Users.user_id;",
        "schema": "web_design",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "client_id",
                "status",
                "assigned_user_id",
                "budget"
            ],
            "Clients": [
                "client_id",
                "client_name",
                "email"
            ],
            "Users": [
                "user_id",
                "name",
                "email"
            ]
        }
    },
    {
        "id": 215,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Participant_Tasks': ['task_id', 'participant_id', 'completion_date', 'score', 'completed'], 'Tasks': ['task_id', 'task_name', 'study_id', 'difficulty_level', 'duration', 'difficulty', 'task_category', 'category', 'Tower', 'Hanoi', 'Digit', 'Span', 'Working', 'Spatial', 'Symbol', 'Picture', 'Concepts', 'Coding', 'Regulation', 'Emotional']} and \n# the user question: Retrieve the task names and average scores for all tasks:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the task names and average scores for all tasks:",
        "output": "SELECT Tasks.task_name, AVG(Participant_Tasks.score) AS avg_score FROM Tasks JOIN Participant_Tasks ON Tasks.task_id = Participant_Tasks.task_id GROUP BY Tasks.task_id;",
        "schema": "developmental_psychology",
        "processed_schema_content": {
            "Participant_Tasks": [
                "task_id",
                "participant_id",
                "completion_date",
                "score",
                "completed"
            ],
            "Tasks": [
                "task_id",
                "task_name",
                "study_id",
                "difficulty_level",
                "duration",
                "difficulty",
                "task_category",
                "category",
                "Tower",
                "Hanoi",
                "Digit",
                "Span",
                "Working",
                "Spatial",
                "Symbol",
                "Picture",
                "Concepts",
                "Coding",
                "Regulation",
                "Emotional"
            ]
        }
    },
    {
        "id": 219,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Director': ['director_id', 'name', 'gender', 'has_won_academy_award', 'director_name', 'birth_year'], 'Box_Office': ['movie_id', 'revenue', 'budget']} and \n# the user question: Retrieve the title of the movie, the name of the director, and the box office revenue for all movies released between 1990 and 2000 that had a box office revenue over $100 million and were directed by Martin Scorsese.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the title of the movie, the name of the director, and the box office revenue for all movies released between 1990 and 2000 that had a box office revenue over $100 million and were directed by Martin Scorsese.",
        "output": "SELECT Movie.title, Director.name, Box_Office.revenue FROM Movie JOIN Director ON Movie.director_id = Director.director_id JOIN Box_Office ON Movie.movie_id = Box_Office.movie_id WHERE Director.name = 'Martin Scorsese' AND Movie.release_year BETWEEN 1990 AND 2000 AND Box_Office.revenue > 100000000;",
        "schema": "romance_films",
        "processed_schema_content": {
            "Movie": [
                "movie_id",
                "title",
                "release_year",
                "director_id",
                "runtime",
                "production_company_id",
                "budget",
                "release_date",
                "producer_id",
                "genre"
            ],
            "Director": [
                "director_id",
                "name",
                "gender",
                "has_won_academy_award",
                "director_name",
                "birth_year"
            ],
            "Box_Office": [
                "movie_id",
                "revenue",
                "budget"
            ]
        }
    },
    {
        "id": 220,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Actor': ['last_name', 'actor_id', 'first_name'], 'Film_Actor': ['film_id', 'actor_id', 'rating'], 'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue'], 'Film_Genre': ['film_id', 'genre_id']} and \n# the user question: Find the actors who have appeared in at least two films in the same genre with a box office earning over 500 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the actors who have appeared in at least two films in the same genre with a box office earning over 500 million:",
        "output": "SELECT Actor.first_name, Actor.last_name FROM Actor INNER JOIN Film_Actor ON Actor.actor_id = Film_Actor.actor_id INNER JOIN Film_Genre ON Film_Actor.film_id = Film_Genre.film_id INNER JOIN Film ON Film_Genre.film_id = Film.film_id AND Film.box_office > 500000000 GROUP BY Actor.actor_id, Film_Genre.genre_id HAVING COUNT(DISTINCT Film_Genre.film_id) >= 2;",
        "schema": "action_films",
        "processed_schema_content": {
            "Actor": [
                "last_name",
                "actor_id",
                "first_name"
            ],
            "Film_Actor": [
                "film_id",
                "actor_id",
                "rating"
            ],
            "Film": [
                "film_id",
                "title",
                "rating",
                "release_date",
                "runtime",
                "box_office",
                "director_id",
                "duration_minutes",
                "budget",
                "release_year",
                "production_company_id",
                "country_id",
                "year",
                "length",
                "is_sequel",
                "runtime_minutes",
                "awards",
                "revenue"
            ],
            "Film_Genre": [
                "film_id",
                "genre_id"
            ]
        }
    },
    {
        "id": 223,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Titanic': ['Age', 'Sex', 'Survived', 'Fare', 'Pclass', 'SibSp', 'Parch', 'Embarked', 'Cabin']} and \n# the user question: What is the number of passengers in the 'Titanic' dataset who are female, have a 'Pclass' of 2 or 3, and have survived?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What is the number of passengers in the 'Titanic' dataset who are female, have a 'Pclass' of 2 or 3, and have survived?",
        "output": "SELECT COUNT(*) FROM Titanic WHERE Sex = 'female' AND Pclass IN (2,3) AND Survived = 1;",
        "schema": "data_mining",
        "processed_schema_content": {
            "Titanic": [
                "Age",
                "Sex",
                "Survived",
                "Fare",
                "Pclass",
                "SibSp",
                "Parch",
                "Embarked",
                "Cabin"
            ]
        }
    },
    {
        "id": 224,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'devices': ['room_id', 'device_id', 'user_id', 'device_name', 'device_type', 'wattage', 'smart_device'], 'sensor_data': ['value', 'sensor_id', 'timestamp', 'sensor_type'], 'sensors': ['sensor_id', 'device_id', 'sensor_type', 'value']} and \n# the user question: Find all the devices that have a motion sensor with a value of 1 (motion detected) in the last hour, and show only the device name and the timestamp of the last motion detection.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all the devices that have a motion sensor with a value of 1 (motion detected) in the last hour, and show only the device name and the timestamp of the last motion detection.",
        "output": "SELECT devices.device_name, MAX(sensor_data.timestamp) AS last_motion_detection FROM devices INNER JOIN sensors ON devices.device_id = sensors.device_id INNER JOIN sensor_data ON sensors.sensor_id = sensor_data.sensor_id WHERE sensor_data.value = 1 AND sensors.sensor_type = 'Motion Sensor' AND sensor_data.timestamp >= datetime('now', '-1 hour') GROUP BY devices.device_name ORDER BY devices.device_name;",
        "schema": "smart_lighting",
        "processed_schema_content": {
            "devices": [
                "room_id",
                "device_id",
                "user_id",
                "device_name",
                "device_type",
                "wattage",
                "smart_device"
            ],
            "sensor_data": [
                "value",
                "sensor_id",
                "timestamp",
                "sensor_type"
            ],
            "sensors": [
                "sensor_id",
                "device_id",
                "sensor_type",
                "value"
            ]
        }
    },
    {
        "id": 225,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Rides': ['end_time', 'bike_id', 'duration_minutes', 'user_id', 'ride_type', 'cost', 'start_location_id', 'ride_id', 'location_id', 'start_time', 'distance_miles', 'end_location_id', 'distance', 'rental_price', 'start_station_id', 'end_station_id', 'duration', 'fare', 'end_location', 'start_location', 'price', 'distance_km']} and \n# the user question: What is the total revenue earned by the bike sharing company in the year 2022?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What is the total revenue earned by the bike sharing company in the year 2022?",
        "output": "SELECT SUM(price) AS total_revenue FROM Rides WHERE strftime('%Y', start_time) = '2022';",
        "schema": "bike_sharing",
        "processed_schema_content": {
            "Rides": [
                "end_time",
                "bike_id",
                "duration_minutes",
                "user_id",
                "ride_type",
                "cost",
                "start_location_id",
                "ride_id",
                "location_id",
                "start_time",
                "distance_miles",
                "end_location_id",
                "distance",
                "rental_price",
                "start_station_id",
                "end_station_id",
                "duration",
                "fare",
                "end_location",
                "start_location",
                "price",
                "distance_km"
            ]
        }
    },
    {
        "id": 226,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'celestial_bodies': ['radius', 'mass', 'name', 'type', 'number_of_moons', 'distance_from_sun', 'id', 'distance_from_earth', 'orbital_period', 'diameter', 'orbiting_body_id', 'average_surface_temperature', 'surface_temperature', 'perihelion_distance', 'period', 'semimajor_axis', 'redshift', 'velocity', 'luminosity', 'schwarzschild_radius', 'eccentricity', 'aphelion_distance', 'spin_period', 'semi_major_axis', 'surface_gravity', 'temperature', 'magnitude', 'accretion_disk_temperature', 'rotation_period', 'obliquity', 'pulse_period', 'peak_absolute_magnitude', 'albedo', 'apparent_magnitude', 'absolute_magnitude', 'spectral_type', 'discovery_year', 'spectral_class', 'distance_from_star', 'discovery_method_id', 'equilibrium_temperature', 'metallicity', 'age', 'effective_temperature', 'atmospheric_composition', 'inclination', 'parallax', 'rotation_velocity', 'axial_tilt', 'orbital_inclination', 'density', 'rotational_velocity', 'magnetic_field_strength', 'composition', 'rotational_period', 'spin', 'distance_from_galactic_center', 'binary_system', 'constellation', 'stellar_evolution_stage', 'star_cluster_type', 'galaxy', 'orbital_eccentricity', 'star_spectral_type', 'orbital_period_unit', 'diameter_unit', 'discovery_method', 'pulse_period_unit', 'distance_unit', 'radius_unit', 'avg_temperature', 'temperature_unit', 'aphelion_unit', 'perihelion_unit', 'event_horizon_unit', 'event_horizon_radius', 'luminosity_distance', 'orbit_type', 'equatorial_diameter', 'gravity_unit', 'escape_velocity', 'angle_unit', 'surface_area', 'density_unit', 'parent_body_id', 'atmospheric_pressure', 'luminosity_class', 'inner_habitable_zone', 'outer_habitable_zone', 'period_unit', 'classification', 'pressure_unit', 'surface_pressure', 'orbiting', 'distance', 'proper_motion', 'proper_motion_unit', 'mean_radius', 'mass_unit', 'temperature_range', 'Gas', 'Giant', 'brightness_temperature', 'parallax_unit', 'metallicity_unit', 'magnetic_field_unit', 'spin_parameter', 'orbiting_id', 'stellar_mass', 'stage', 'radial_velocity', 'host_star', 'accretion_rate', 'core_type']} and \n# the user question: Retrieve the name and mass of all celestial bodies that have a type of 'Brown dwarf' and a mass greater than 0.01 solar masses.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and mass of all celestial bodies that have a type of 'Brown dwarf' and a mass greater than 0.01 solar masses.",
        "output": "SELECT name, mass FROM celestial_bodies WHERE type = 'Brown dwarf' AND mass > 0.01 * (SELECT mass FROM celestial_bodies WHERE name = 'Sun');",
        "schema": "astronomy",
        "processed_schema_content": {
            "celestial_bodies": [
                "radius",
                "mass",
                "name",
                "type",
                "number_of_moons",
                "distance_from_sun",
                "id",
                "distance_from_earth",
                "orbital_period",
                "diameter",
                "orbiting_body_id",
                "average_surface_temperature",
                "surface_temperature",
                "perihelion_distance",
                "period",
                "semimajor_axis",
                "redshift",
                "velocity",
                "luminosity",
                "schwarzschild_radius",
                "eccentricity",
                "aphelion_distance",
                "spin_period",
                "semi_major_axis",
                "surface_gravity",
                "temperature",
                "magnitude",
                "accretion_disk_temperature",
                "rotation_period",
                "obliquity",
                "pulse_period",
                "peak_absolute_magnitude",
                "albedo",
                "apparent_magnitude",
                "absolute_magnitude",
                "spectral_type",
                "discovery_year",
                "spectral_class",
                "distance_from_star",
                "discovery_method_id",
                "equilibrium_temperature",
                "metallicity",
                "age",
                "effective_temperature",
                "atmospheric_composition",
                "inclination",
                "parallax",
                "rotation_velocity",
                "axial_tilt",
                "orbital_inclination",
                "density",
                "rotational_velocity",
                "magnetic_field_strength",
                "composition",
                "rotational_period",
                "spin",
                "distance_from_galactic_center",
                "binary_system",
                "constellation",
                "stellar_evolution_stage",
                "star_cluster_type",
                "galaxy",
                "orbital_eccentricity",
                "star_spectral_type",
                "orbital_period_unit",
                "diameter_unit",
                "discovery_method",
                "pulse_period_unit",
                "distance_unit",
                "radius_unit",
                "avg_temperature",
                "temperature_unit",
                "aphelion_unit",
                "perihelion_unit",
                "event_horizon_unit",
                "event_horizon_radius",
                "luminosity_distance",
                "orbit_type",
                "equatorial_diameter",
                "gravity_unit",
                "escape_velocity",
                "angle_unit",
                "surface_area",
                "density_unit",
                "parent_body_id",
                "atmospheric_pressure",
                "luminosity_class",
                "inner_habitable_zone",
                "outer_habitable_zone",
                "period_unit",
                "classification",
                "pressure_unit",
                "surface_pressure",
                "orbiting",
                "distance",
                "proper_motion",
                "proper_motion_unit",
                "mean_radius",
                "mass_unit",
                "temperature_range",
                "Gas",
                "Giant",
                "brightness_temperature",
                "parallax_unit",
                "metallicity_unit",
                "magnetic_field_unit",
                "spin_parameter",
                "orbiting_id",
                "stellar_mass",
                "stage",
                "radial_velocity",
                "host_star",
                "accretion_rate",
                "core_type"
            ]
        }
    },
    {
        "id": 227,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Countries': ['country_id', 'name', 'capital', 'population', 'area']} and \n# the user question: Retrieve the names and capitals of countries with a population greater than 100 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and capitals of countries with a population greater than 100 million:",
        "output": "SELECT name, capital FROM Countries WHERE population > 100000000;",
        "schema": "history",
        "processed_schema_content": {
            "Countries": [
                "country_id",
                "name",
                "capital",
                "population",
                "area"
            ]
        }
    },
    {
        "id": 228,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Tasks': ['status', 'assigned_to', 'task_id', 'project_id', 'due_date', 'user_id', 'completed', 'task_name', 'created_at', 'completed_at', 'assigned_t', 'assigned', 'date_completed', 'data_table_id', 'completion_time', 'task_description', 'category', 'completion_date', 'open_date', 'priority', 'completed_date', 'start_date', 'estimated_time', 'end_date', 'created_by', 'estimated_duration', 'cost', 'deadline', 'completed_on', 'started_on', 'duration', 'assigned_on', 'date_assigned', 'date_created'], 'Users': ['username', 'email', 'user_id', 'assigned_to', 'completed_tasks', 'total_tasks', 'user_name', 'doe', 'salary', 'num_completed_tasks']} and \n# the user question: Find the number of tasks assigned to each user with an estimated duration of less than 5 hours:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of tasks assigned to each user with an estimated duration of less than 5 hours:",
        "output": "SELECT Users.user_name, COUNT(Tasks.task_id) AS num_tasks FROM Users LEFT JOIN Tasks ON Users.user_id = Tasks.assigned_to WHERE Tasks.estimated_duration < 5 GROUP BY Users.user_id;",
        "schema": "data_analysis",
        "processed_schema_content": {
            "Tasks": [
                "status",
                "assigned_to",
                "task_id",
                "project_id",
                "due_date",
                "user_id",
                "completed",
                "task_name",
                "created_at",
                "completed_at",
                "assigned_t",
                "assigned",
                "date_completed",
                "data_table_id",
                "completion_time",
                "task_description",
                "category",
                "completion_date",
                "open_date",
                "priority",
                "completed_date",
                "start_date",
                "estimated_time",
                "end_date",
                "created_by",
                "estimated_duration",
                "cost",
                "deadline",
                "completed_on",
                "started_on",
                "duration",
                "assigned_on",
                "date_assigned",
                "date_created"
            ],
            "Users": [
                "username",
                "email",
                "user_id",
                "assigned_to",
                "completed_tasks",
                "total_tasks",
                "user_name",
                "doe",
                "salary",
                "num_completed_tasks"
            ]
        }
    },
    {
        "id": 229,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Suppliers': ['supplier_name', 'supplier_id', 'phone_number', 'address', 'email', 'country', 'contact_name', 'state', 'city', 'phone', 'company_name', 'Canada', 'USA', 'supplier_rating', 'zip']} and \n# the user question: Find the names and email addresses of all suppliers who have never provided a product with a price greater than $100.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and email addresses of all suppliers who have never provided a product with a price greater than $100.",
        "output": "SELECT DISTINCT Suppliers.supplier_name, Suppliers.email FROM Suppliers WHERE Suppliers.supplier_id NOT IN ( SELECT supplier_id FROM Products WHERE price > 100 );",
        "schema": "pharmacy",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "price",
                "description",
                "product_description",
                "supplier_id",
                "category_id",
                "units_in_stock",
                "expiration_date",
                "stock_quantity",
                "expiration_id",
                "discontinued",
                "cost_price",
                "quantity_in_stock",
                "unit_price",
                "unit_cost",
                "brand_name",
                "last_supplied_date",
                "manufacturer_name",
                "backorder"
            ],
            "Suppliers": [
                "supplier_name",
                "supplier_id",
                "phone_number",
                "address",
                "email",
                "country",
                "contact_name",
                "state",
                "city",
                "phone",
                "company_name",
                "Canada",
                "USA",
                "supplier_rating",
                "zip"
            ]
        }
    },
    {
        "id": 231,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'celestial_bodies': ['radius', 'mass', 'name', 'type', 'number_of_moons', 'distance_from_sun', 'id', 'distance_from_earth', 'orbital_period', 'diameter', 'orbiting_body_id', 'average_surface_temperature', 'surface_temperature', 'perihelion_distance', 'period', 'semimajor_axis', 'redshift', 'velocity', 'luminosity', 'schwarzschild_radius', 'eccentricity', 'aphelion_distance', 'spin_period', 'semi_major_axis', 'surface_gravity', 'temperature', 'magnitude', 'accretion_disk_temperature', 'rotation_period', 'obliquity', 'pulse_period', 'peak_absolute_magnitude', 'albedo', 'apparent_magnitude', 'absolute_magnitude', 'spectral_type', 'discovery_year', 'spectral_class', 'distance_from_star', 'discovery_method_id', 'equilibrium_temperature', 'metallicity', 'age', 'effective_temperature', 'atmospheric_composition', 'inclination', 'parallax', 'rotation_velocity', 'axial_tilt', 'orbital_inclination', 'density', 'rotational_velocity', 'magnetic_field_strength', 'composition', 'rotational_period', 'spin', 'distance_from_galactic_center', 'binary_system', 'constellation', 'stellar_evolution_stage', 'star_cluster_type', 'galaxy', 'orbital_eccentricity', 'star_spectral_type', 'orbital_period_unit', 'diameter_unit', 'discovery_method', 'pulse_period_unit', 'distance_unit', 'radius_unit', 'avg_temperature', 'temperature_unit', 'aphelion_unit', 'perihelion_unit', 'event_horizon_unit', 'event_horizon_radius', 'luminosity_distance', 'orbit_type', 'equatorial_diameter', 'gravity_unit', 'escape_velocity', 'angle_unit', 'surface_area', 'density_unit', 'parent_body_id', 'atmospheric_pressure', 'luminosity_class', 'inner_habitable_zone', 'outer_habitable_zone', 'period_unit', 'classification', 'pressure_unit', 'surface_pressure', 'orbiting', 'distance', 'proper_motion', 'proper_motion_unit', 'mean_radius', 'mass_unit', 'temperature_range', 'Gas', 'Giant', 'brightness_temperature', 'parallax_unit', 'metallicity_unit', 'magnetic_field_unit', 'spin_parameter', 'orbiting_id', 'stellar_mass', 'stage', 'radial_velocity', 'host_star', 'accretion_rate', 'core_type']} and \n# the user question: Retrieve the name, diameter, and albedo of all dwarf planets that have a diameter less than 1000 km and an albedo greater than 0.2.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name, diameter, and albedo of all dwarf planets that have a diameter less than 1000 km and an albedo greater than 0.2.",
        "output": "SELECT name, diameter, albedo FROM celestial_bodies WHERE type = 'Dwarf Planet' AND diameter < 1000 AND albedo > 0.2;",
        "schema": "astronomy",
        "processed_schema_content": {
            "celestial_bodies": [
                "radius",
                "mass",
                "name",
                "type",
                "number_of_moons",
                "distance_from_sun",
                "id",
                "distance_from_earth",
                "orbital_period",
                "diameter",
                "orbiting_body_id",
                "average_surface_temperature",
                "surface_temperature",
                "perihelion_distance",
                "period",
                "semimajor_axis",
                "redshift",
                "velocity",
                "luminosity",
                "schwarzschild_radius",
                "eccentricity",
                "aphelion_distance",
                "spin_period",
                "semi_major_axis",
                "surface_gravity",
                "temperature",
                "magnitude",
                "accretion_disk_temperature",
                "rotation_period",
                "obliquity",
                "pulse_period",
                "peak_absolute_magnitude",
                "albedo",
                "apparent_magnitude",
                "absolute_magnitude",
                "spectral_type",
                "discovery_year",
                "spectral_class",
                "distance_from_star",
                "discovery_method_id",
                "equilibrium_temperature",
                "metallicity",
                "age",
                "effective_temperature",
                "atmospheric_composition",
                "inclination",
                "parallax",
                "rotation_velocity",
                "axial_tilt",
                "orbital_inclination",
                "density",
                "rotational_velocity",
                "magnetic_field_strength",
                "composition",
                "rotational_period",
                "spin",
                "distance_from_galactic_center",
                "binary_system",
                "constellation",
                "stellar_evolution_stage",
                "star_cluster_type",
                "galaxy",
                "orbital_eccentricity",
                "star_spectral_type",
                "orbital_period_unit",
                "diameter_unit",
                "discovery_method",
                "pulse_period_unit",
                "distance_unit",
                "radius_unit",
                "avg_temperature",
                "temperature_unit",
                "aphelion_unit",
                "perihelion_unit",
                "event_horizon_unit",
                "event_horizon_radius",
                "luminosity_distance",
                "orbit_type",
                "equatorial_diameter",
                "gravity_unit",
                "escape_velocity",
                "angle_unit",
                "surface_area",
                "density_unit",
                "parent_body_id",
                "atmospheric_pressure",
                "luminosity_class",
                "inner_habitable_zone",
                "outer_habitable_zone",
                "period_unit",
                "classification",
                "pressure_unit",
                "surface_pressure",
                "orbiting",
                "distance",
                "proper_motion",
                "proper_motion_unit",
                "mean_radius",
                "mass_unit",
                "temperature_range",
                "Gas",
                "Giant",
                "brightness_temperature",
                "parallax_unit",
                "metallicity_unit",
                "magnetic_field_unit",
                "spin_parameter",
                "orbiting_id",
                "stellar_mass",
                "stage",
                "radial_velocity",
                "host_star",
                "accretion_rate",
                "core_type"
            ]
        }
    },
    {
        "id": 233,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate'], 'Creators': ['CreatorID', 'CreatorName'], 'Customers': ['CustomerID', 'CustomerName', 'Email', 'CustomerState', 'State', 'JoinDate', 'BillingAddress', 'BillingState', 'ShippingAddress', 'LastName', 'ShippingState', 'Country', 'ShippingCountry'], 'Orders': ['OrderID', 'CustomerID', 'OrderDate', 'TotalCost', 'ShippedDate', 'ShipDate'], 'OrderItems': ['OrderItemID', 'OrderID', 'IssueID', 'Quantity', 'ShippedDate'], 'IssueCreators': ['CreatorID', 'IssueID', 'RoleName', 'Role']} and \n# the user question: Find all customers who have placed orders for at least one issue written by Grant Morrison or Alan Moore:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all customers who have placed orders for at least one issue written by Grant Morrison or Alan Moore:",
        "output": "SELECT DISTINCT Customers.CustomerName FROM Customers JOIN Orders ON Customers.CustomerID = Orders.CustomerID JOIN OrderItems ON Orders.OrderID = OrderItems.OrderID JOIN Issues ON OrderItems.IssueID = Issues.IssueID JOIN IssueCreators ON Issues.IssueID = IssueCreators.IssueID JOIN Creators ON IssueCreators.CreatorID = Creators.CreatorID AND (Creators.CreatorName = 'Grant Morrison' OR Creators.CreatorName = 'Alan Moore');",
        "schema": "comic_books",
        "processed_schema_content": {
            "Issues": [
                "IssueID",
                "IssueNumber",
                "CoverDate",
                "SeriesID",
                "CoverPrice",
                "VariantCover",
                "IssueTitle",
                "Price",
                "PublishDate",
                "Stock",
                "IssueRating",
                "CharacterID",
                "PageCount",
                "LanguageID",
                "Discount",
                "PublicationDate",
                "IssuePrice",
                "Rating",
                "SeriesI",
                "WriterI",
                "IssueName",
                "Sales",
                "PublishedDate"
            ],
            "Creators": [
                "CreatorID",
                "CreatorName"
            ],
            "Customers": [
                "CustomerID",
                "CustomerName",
                "Email",
                "CustomerState",
                "State",
                "JoinDate",
                "BillingAddress",
                "BillingState",
                "ShippingAddress",
                "LastName",
                "ShippingState",
                "Country",
                "ShippingCountry"
            ],
            "Orders": [
                "OrderID",
                "CustomerID",
                "OrderDate",
                "TotalCost",
                "ShippedDate",
                "ShipDate"
            ],
            "OrderItems": [
                "OrderItemID",
                "OrderID",
                "IssueID",
                "Quantity",
                "ShippedDate"
            ],
            "IssueCreators": [
                "CreatorID",
                "IssueID",
                "RoleName",
                "Role"
            ]
        }
    },
    {
        "id": 235,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'category_id', 'price', 'units_in_stock', 'price_per_unit', 'discount', 'country_of_origin', 'rating', 'discontinued', 'is_discontinued', 'unit_price', 'last_restock_date', 'quantity_in_stock', 'supplier_id', 'discontinued_date', 'unit_cost', 'brand_id', 'stock', 'stock_quantity', 'brand_name', 'cost', 'Ingredients', 'Category', 'Price', 'ProductID'], 'Categories': ['category_name', 'category_id'], 'Product_Reviews': ['product_id', 'review_id', 'rating', 'user_id', 'review_date']} and \n# the user question: Find the average rating for each product category.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average rating for each product category.",
        "output": "SELECT c.category_name, AVG(pr.rating) AS avg_rating FROM Categories c JOIN Products p ON c.category_id = p.category_id JOIN Product_Reviews pr ON p.product_id = pr.product_id GROUP BY c.category_id;",
        "schema": "cosmetics_making",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "category_id",
                "price",
                "units_in_stock",
                "price_per_unit",
                "discount",
                "country_of_origin",
                "rating",
                "discontinued",
                "is_discontinued",
                "unit_price",
                "last_restock_date",
                "quantity_in_stock",
                "supplier_id",
                "discontinued_date",
                "unit_cost",
                "brand_id",
                "stock",
                "stock_quantity",
                "brand_name",
                "cost",
                "Ingredients",
                "Category",
                "Price",
                "ProductID"
            ],
            "Categories": [
                "category_name",
                "category_id"
            ],
            "Product_Reviews": [
                "product_id",
                "review_id",
                "rating",
                "user_id",
                "review_date"
            ]
        }
    },
    {
        "id": 236,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Philosopher': ['philosopher_id', 'name', 'birth_date', 'death_date', 'nationality', 'field_of_study', 'Kant', 'Immanuel', 'Friedrich', 'Nietzsche', 'Socrates', 'Aristotle', 'Plato'], 'Concept': ['concept_id', 'name', 'description', 'philosopher_id', 'topic_id'], 'Publication': ['publication_id', 'title', 'publication_date', 'publisher'], 'PhilosopherPublication': ['philosopher_id', 'publication_id'], 'Lecture': ['lecture_id', 'title', 'speaker', 'date', 'topic_id', 'university_id'], 'PhilosopherLecture': ['philosopher_id', 'lecture_id'], 'University': ['university_id', 'name', 'country'], 'Topic': ['topic_id', 'name', 'description', 'Metaphysics']} and \n# the user question: Get the philosophers who have written works published in the 19th century and have given lectures at the University of Oxford or the University of Paris on topics related to 'metaphysics':,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the philosophers who have written works published in the 19th century and have given lectures at the University of Oxford or the University of Paris on topics related to 'metaphysics':",
        "output": "SELECT DISTINCT P.name FROM Philosopher AS P JOIN PhilosopherPublication AS PP ON P.philosopher_id = PP.philosopher_id JOIN Publication AS PUB ON PP.publication_id = PUB.publication_id JOIN PhilosopherLecture AS PL ON P.philosopher_id = PL.philosopher_id JOIN Lecture AS L ON PL.lecture_id = L.lecture_id JOIN University AS U ON L.university_id = U.university_id JOIN Concept AS C ON P.philosopher_id = C.philosopher_id JOIN Topic AS T ON C.topic_id = T.topic_id WHERE PUB.publication_date BETWEEN '1800-01-01' AND '1899-12-31' AND (U.name = 'University of Oxford' OR U.name = 'University of Paris') AND T.name = 'Metaphysics';",
        "schema": "philosophy",
        "processed_schema_content": {
            "Philosopher": [
                "philosopher_id",
                "name",
                "birth_date",
                "death_date",
                "nationality",
                "field_of_study",
                "Kant",
                "Immanuel",
                "Friedrich",
                "Nietzsche",
                "Socrates",
                "Aristotle",
                "Plato"
            ],
            "Concept": [
                "concept_id",
                "name",
                "description",
                "philosopher_id",
                "topic_id"
            ],
            "Publication": [
                "publication_id",
                "title",
                "publication_date",
                "publisher"
            ],
            "PhilosopherPublication": [
                "philosopher_id",
                "publication_id"
            ],
            "Lecture": [
                "lecture_id",
                "title",
                "speaker",
                "date",
                "topic_id",
                "university_id"
            ],
            "PhilosopherLecture": [
                "philosopher_id",
                "lecture_id"
            ],
            "University": [
                "university_id",
                "name",
                "country"
            ],
            "Topic": [
                "topic_id",
                "name",
                "description",
                "Metaphysics"
            ]
        }
    },
    {
        "id": 237,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'PlantSpecies': ['id', 'name', 'genus_id', 'scientific_name'], 'PlantSpeciesUses': ['plant_species_id', 'plant_uses_id'], 'PlantUses': ['id', 'name'], 'PlantGenus': ['id', 'family_id', 'name'], 'PlantSpeciesLocation': ['plant_location_id', 'plant_species_id'], 'PlantLocation': ['id', 'name']} and \n# the user question: Find all plant genera that have at least one plant species with a location requirement of \"Arid regions\" and at least one use for \"Ornamental\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all plant genera that have at least one plant species with a location requirement of \"Arid regions\" and at least one use for \"Ornamental\":",
        "output": "SELECT PlantGenus.name AS genus FROM PlantGenus JOIN PlantSpecies ON PlantGenus.id = PlantSpecies.genus_id JOIN PlantSpeciesLocation ON PlantSpecies.id = PlantSpeciesLocation.plant_species_id JOIN PlantLocation ON PlantSpeciesLocation.plant_location_id = PlantLocation.id JOIN PlantSpeciesUses ON PlantSpecies.id = PlantSpeciesUses.plant_species_id JOIN PlantUses ON PlantSpeciesUses.plant_uses_id = PlantUses.id WHERE PlantLocation.name = 'Arid regions' AND PlantUses.name = 'Ornamental';",
        "schema": "botany",
        "processed_schema_content": {
            "PlantSpecies": [
                "id",
                "name",
                "genus_id",
                "scientific_name"
            ],
            "PlantSpeciesUses": [
                "plant_species_id",
                "plant_uses_id"
            ],
            "PlantUses": [
                "id",
                "name"
            ],
            "PlantGenus": [
                "id",
                "family_id",
                "name"
            ],
            "PlantSpeciesLocation": [
                "plant_location_id",
                "plant_species_id"
            ],
            "PlantLocation": [
                "id",
                "name"
            ]
        }
    },
    {
        "id": 241,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Company': ['company_id', 'company_name', 'country_id', 'num_employees'], 'CompanyIndustry': ['company_id', 'industry_id'], 'Industry': ['industry_id', 'industry_name'], 'Country': ['country_id', 'country_name', 'population']} and \n# the user question: Find the names of all companies that are headquartered in the United States and operate in the Technology industry.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all companies that are headquartered in the United States and operate in the Technology industry.",
        "output": "SELECT Company.company_name FROM Company INNER JOIN CompanyIndustry ON Company.company_id = CompanyIndustry.company_id INNER JOIN Industry ON CompanyIndustry.industry_id = Industry.industry_id INNER JOIN Country ON Company.country_id = Country.country_id WHERE Industry.industry_name = 'Technology' AND Country.country_name = 'United States';",
        "schema": "economics",
        "processed_schema_content": {
            "Company": [
                "company_id",
                "company_name",
                "country_id",
                "num_employees"
            ],
            "CompanyIndustry": [
                "company_id",
                "industry_id"
            ],
            "Industry": [
                "industry_id",
                "industry_name"
            ],
            "Country": [
                "country_id",
                "country_name",
                "population"
            ]
        }
    },
    {
        "id": 243,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {} and \n# the user question: Text Query: \"Find the average impact score of all risks.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Find the average impact score of all risks.\"",
        "output": "SELECT AVG(impact_score) AS average_impact_score FROM Risks;",
        "schema": "risk_management",
        "processed_schema_content": {}
    },
    {
        "id": 244,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for products that have a price less than $1000 and a discount of at least 15%.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for products that have a price less than $1000 and a discount of at least 15%.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price < 1000 AND pr.Product_Discount >= 0.15;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        }
    },
    {
        "id": 245,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of all products that have a price between $20 and $50, inclusive:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all products that have a price between $20 and $50, inclusive:",
        "output": "SELECT name, price FROM products WHERE price BETWEEN 20 AND 50;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        }
    },
    {
        "id": 246,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'game_player_statistics': ['player_name', 'home_score', 'home_team_name', 'away_team_name', 'goals', 'away_score', 'game_id', 'yellow_card', 'season', 'passes_attempted', 'passing_accuracy', 'assists', 'tackles_won', 'home_away', 'dribbles_won', 'yellow_cards', 'distance_covered', 'saves', 'successful_tackles', 'Golo', 'Kante', 'fouls_committed', 'team_name', 'penalty_goals']} and \n# the user question: Find the player who scored the highest number of goals in a single game in the last season.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the player who scored the highest number of goals in a single game in the last season.",
        "output": "SELECT player_name, MAX(goals) AS most_goals_in_a_game FROM game_player_statistics WHERE season = '2022' GROUP BY player_name ORDER BY most_goals_in_a_game DESC LIMIT 1",
        "schema": "sports_psychology",
        "processed_schema_content": {
            "game_player_statistics": [
                "player_name",
                "home_score",
                "home_team_name",
                "away_team_name",
                "goals",
                "away_score",
                "game_id",
                "yellow_card",
                "season",
                "passes_attempted",
                "passing_accuracy",
                "assists",
                "tackles_won",
                "home_away",
                "dribbles_won",
                "yellow_cards",
                "distance_covered",
                "saves",
                "successful_tackles",
                "Golo",
                "Kante",
                "fouls_committed",
                "team_name",
                "penalty_goals"
            ]
        }
    },
    {
        "id": 250,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Specialties': ['specialty_name', 'therapist_id', 'specialty_id', 'TherapistID', 'SpecialtyName'], 'Therapist_Specialties': ['specialty_id', 'therapist_id']} and \n# the user question: Find the number of therapists who have a specialty in each therapy type.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of therapists who have a specialty in each therapy type.",
        "output": "SELECT sp.specialty_name, COUNT(DISTINCT ts.therapist_id) AS num_therapists FROM Therapist_Specialties ts INNER JOIN Specialties sp ON ts.specialty_id = sp.specialty_id GROUP BY sp.specialty_name;",
        "schema": "hypnotherapy",
        "processed_schema_content": {
            "Specialties": [
                "specialty_name",
                "therapist_id",
                "specialty_id",
                "TherapistID",
                "SpecialtyName"
            ],
            "Therapist_Specialties": [
                "specialty_id",
                "therapist_id"
            ]
        }
    },
    {
        "id": 251,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['order_date', 'total_price', 'customer_id', 'shipping_status', 'order_id', 'total', 'customer_name'], 'customers': ['customer_name', 'customer_email', 'customer_id', 'id', 'name', 'phone', 'address', 'age', 'credit_limit']} and \n# the user question: Retrieve the names and ages of all customers who have placed at least one order and have a credit limit of $10,000 or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and ages of all customers who have placed at least one order and have a credit limit of $10,000 or more.",
        "output": "SELECT customers.name, customers.age FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE customers.credit_limit >= 10000",
        "schema": "search_engine_optimization_(seo)",
        "processed_schema_content": {
            "orders": [
                "order_date",
                "total_price",
                "customer_id",
                "shipping_status",
                "order_id",
                "total",
                "customer_name"
            ],
            "customers": [
                "customer_name",
                "customer_email",
                "customer_id",
                "id",
                "name",
                "phone",
                "address",
                "age",
                "credit_limit"
            ]
        }
    },
    {
        "id": 252,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Films': ['title', 'country', 'rating_id', 'director_id', 'film_id', 'synopsis', 'release_date', 'runtime', 'studio_id', 'composer_id', 'budget', 'box_office', 'imdb_rating', 'rotten_tomatoes_rating', 'mpaa_rating', 'production_company_id', 'oscar_wins', 'rating', 'rottentomatoes_rating', 'genre_id', 'runtime_minutes', 'release_year', 'The Conjuring', 'PG-13'], 'Directors': ['director_id', 'name', 'nationality', 'gender', 'description'], 'Actors': ['actor_id', 'name', 'nationality', 'description', 'birth_date'], 'Films_Actors': ['actor_id', 'film_id', 'role']} and \n# the user question: Query: Retrieve the names and ages of all actors in the database who have appeared in at least three horror films directed by James Wan, ordered by age in ascending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Query: Retrieve the names and ages of all actors in the database who have appeared in at least three horror films directed by James Wan, ordered by age in ascending order.",
        "output": "SELECT Actors.name, (CAST(STRFTIME('%Y', 'now') AS INT) - CAST(STRFTIME('%Y', Actors.birth_date) AS INT)) AS age, COUNT(DISTINCT Films.film_id) AS num_films FROM Actors JOIN Films_Actors ON Actors.actor_id = Films_Actors.actor_id JOIN Films ON Films_Actors.film_id = Films.film_id JOIN Directors ON Films.director_id = Directors.director_id WHERE Directors.name = 'James Wan' GROUP BY Actors.actor_id HAVING COUNT(DISTINCT Films.film_id) >= 3 ORDER BY age ASC;",
        "schema": "horror_films",
        "processed_schema_content": {
            "Films": [
                "title",
                "country",
                "rating_id",
                "director_id",
                "film_id",
                "synopsis",
                "release_date",
                "runtime",
                "studio_id",
                "composer_id",
                "budget",
                "box_office",
                "imdb_rating",
                "rotten_tomatoes_rating",
                "mpaa_rating",
                "production_company_id",
                "oscar_wins",
                "rating",
                "rottentomatoes_rating",
                "genre_id",
                "runtime_minutes",
                "release_year",
                "The Conjuring",
                "PG-13"
            ],
            "Directors": [
                "director_id",
                "name",
                "nationality",
                "gender",
                "description"
            ],
            "Actors": [
                "actor_id",
                "name",
                "nationality",
                "description",
                "birth_date"
            ],
            "Films_Actors": [
                "actor_id",
                "film_id",
                "role"
            ]
        }
    },
    {
        "id": 254,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Reviews': ['book_id', 'review_id', 'order_id', 'rating', 'customer_id', 'genre']} and \n# the user question: Retrieve the average rating for each book, along with the number of reviews it has received.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the average rating for each book, along with the number of reviews it has received.",
        "output": "SELECT b.book_title, AVG(r.rating) AS avg_rating, COUNT(r.review_id) AS num_reviews FROM Books b LEFT JOIN Reviews r ON b.book_id = r.book_id GROUP BY b.book_id;",
        "schema": "marketing_books",
        "processed_schema_content": {
            "Books": [
                "book_id",
                "title",
                "publisher_id",
                "publication_date",
                "author_id",
                "price",
                "publication_year",
                "publisher",
                "stock",
                "genre",
                "series",
                "year_published",
                "release_date",
                "word_count",
                "avg_rating",
                "A001",
                "genre_id",
                "stock_count",
                "category_id",
                "book_title",
                "rating",
                "available_for_purchase",
                "BookID",
                "BookTitle",
                "PublicationYear",
                "PublisherID",
                "Price"
            ],
            "Reviews": [
                "book_id",
                "review_id",
                "order_id",
                "rating",
                "customer_id",
                "genre"
            ]
        }
    },
    {
        "id": 255,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['name', 'product_id', 'price', 'manufacturer_id', 'release_date', 'category_id', 'avg_price', 'stock_quantity']} and \n# the user question: Retrieve the names and release dates of the latest three products:    \"Get the names and release dates of the three latest products.\"   :,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and release dates of the latest three products:    \"Get the names and release dates of the three latest products.\"   :",
        "output": "SELECT name, release_date FROM Products ORDER BY release_date DESC LIMIT 3;",
        "schema": "computer_hardware",
        "processed_schema_content": {
            "Products": [
                "name",
                "product_id",
                "price",
                "manufacturer_id",
                "release_date",
                "category_id",
                "avg_price",
                "stock_quantity"
            ]
        }
    },
    {
        "id": 256,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'PilatesSessions': ['client_id', 'instructor_id', 'price']} and \n# the user question: Find the total revenue generated by each instructor in the \"Instructors\" table.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total revenue generated by each instructor in the \"Instructors\" table.",
        "output": "SELECT i.name, SUM(p.price) AS total_revenue FROM Instructors i JOIN PilatesSessions p ON i.instructor_id = p.instructor_id GROUP BY i.instructor_id;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "PilatesSessions": [
                "client_id",
                "instructor_id",
                "price"
            ]
        }
    },
    {
        "id": 257,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'diagnoses': ['prisoner_id', 'disorder_id', 'diagnosis_date', 'patient_id', 'diagnosis', 'inmate_id'], 'disorders': ['name', 'id', 'Depression', 'description', 'disorder_id']} and \n# the user question: Calculate the total number of diagnoses for each disorder.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Calculate the total number of diagnoses for each disorder.",
        "output": "SELECT disorders.name, COUNT(*) AS total_diagnoses FROM diagnoses JOIN disorders ON diagnoses.disorder_id = disorders.id GROUP BY disorders.name;",
        "schema": "forensic_psychology",
        "processed_schema_content": {
            "diagnoses": [
                "prisoner_id",
                "disorder_id",
                "diagnosis_date",
                "patient_id",
                "diagnosis",
                "inmate_id"
            ],
            "disorders": [
                "name",
                "id",
                "Depression",
                "description",
                "disorder_id"
            ]
        }
    },
    {
        "id": 258,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Teams': ['team_name', 'team_id', 'conference_id', 'division_id', 'last_season', 'first_season', 'city_id', 'division_name', 'conference_name', 'season_id', 'head_coach_id', 'city', 'start_date', 'wins', 'losse', 'home_team_id', 'State', 'Golden', 'Warriors', 'away_team_id', 'coach_id', 'conference', 'playoff_record', 'num_mvp', 'year_founded', 'arena_id', 'player_id', 'year_end', 'winning_team_id', 'end_date', 'num_wins', 'opponent_name', 'Name', 'ID', 'Abbreviation', 'City', 'Color', 'Coach', 'Team_ID', 'Team_Name'], 'Seasons': ['season_id', 'year', 'start_date', 'team_name', 'team_id', 'regular_season_wins', 'season_type', 'champion_id', 'player_id', 'wins', 'losses', 'points_for', 'points_against', 'attendance', 'outcome', 'series_id', 'Regular', 'Season', 'year_end', 'year_start', 'ChampionID', 'Year', 'ID']} and \n# the user question: Find the NBA teams that have won the championship at least 3 times in the last 10 years.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the NBA teams that have won the championship at least 3 times in the last 10 years.",
        "output": "SELECT Teams.team_name, COUNT(DISTINCT Seasons.champion_id) AS num_championships FROM Teams JOIN Seasons ON Teams.team_id = Seasons.champion_id AND Seasons.season_type = 'Playoff' AND Seasons.year >= (strftime('%Y', 'now') - 9) GROUP BY Teams.team_id HAVING COUNT(DISTINCT Seasons.champion_id) >= 3;",
        "schema": "basketball",
        "processed_schema_content": {
            "Teams": [
                "team_name",
                "team_id",
                "conference_id",
                "division_id",
                "last_season",
                "first_season",
                "city_id",
                "division_name",
                "conference_name",
                "season_id",
                "head_coach_id",
                "city",
                "start_date",
                "wins",
                "losse",
                "home_team_id",
                "State",
                "Golden",
                "Warriors",
                "away_team_id",
                "coach_id",
                "conference",
                "playoff_record",
                "num_mvp",
                "year_founded",
                "arena_id",
                "player_id",
                "year_end",
                "winning_team_id",
                "end_date",
                "num_wins",
                "opponent_name",
                "Name",
                "ID",
                "Abbreviation",
                "City",
                "Color",
                "Coach",
                "Team_ID",
                "Team_Name"
            ],
            "Seasons": [
                "season_id",
                "year",
                "start_date",
                "team_name",
                "team_id",
                "regular_season_wins",
                "season_type",
                "champion_id",
                "player_id",
                "wins",
                "losses",
                "points_for",
                "points_against",
                "attendance",
                "outcome",
                "series_id",
                "Regular",
                "Season",
                "year_end",
                "year_start",
                "ChampionID",
                "Year",
                "ID"
            ]
        }
    },
    {
        "id": 259,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Events': ['event_name', 'event_date', 'event_id', 'severity', 'event_description', 'device_id', 'event_time', 'event_type'], 'Devices': ['manufacturer', 'device_id', 'device_type', 'device_name', 'screen_size', 'manufacture_date', 'battery_capacity', 'storage_capacity', 'camera_resolution', 'processor_speed', 'ram_capacity', 'biometric_authentication', 'ip_rating', 'screen_resolution', 'operating_system_version', 'added_date', 'ram_size', 'operating_system', 'os_version', 'ip_address', 'os_id', 'last_used_date', 'location_id', 'serial_number', 'network_id', 'last_access_date', 'is_online', 'last_patched_date', 'max_login_attempts', 'Flag_Status', 'Last_Update_Time', 'Last_Scan_Time', 'Device_Type', 'Last_Vulnerability_Scan', 'Last_Patch_Time', 'Vulnerability_Level', 'Device_Name', 'Certificate_Expiry_Date', 'Device_Status', 'Last_Checkin_Time', 'Last_Patch_Update', 'Last_Security_Update', 'IsConnected', 'ipAddress', 'name', 'id']} and \n# the user question: Find all devices that have been offline for more than 24 hours, along with the name of the device, the date of the last activity, and the number of hours since the device was last active, ordered by number of hours in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all devices that have been offline for more than 24 hours, along with the name of the device, the date of the last activity, and the number of hours since the device was last active, ordered by number of hours in descending order.",
        "output": "SELECT Devices.device_name, MAX(Events.event_date) AS last_activity, ROUND((julianday('now') - julianday(MAX(Events.event_date || ' ' || Events.event_time)))*24,2) AS hours_since_last_activity FROM Devices LEFT JOIN Events ON Devices.device_id = Events.device_id WHERE (Events.event_type = 'Offline' OR Events.event_id IS NULL) AND ROUND((julianday('now') - julianday(MAX(Events.event_date || ' ' || Events.event_time)))*24,2) > 24 GROUP BY Devices.device_id ORDER BY hours_since_last_activity DESC;",
        "schema": "cybersecurity",
        "processed_schema_content": {
            "Events": [
                "event_name",
                "event_date",
                "event_id",
                "severity",
                "event_description",
                "device_id",
                "event_time",
                "event_type"
            ],
            "Devices": [
                "manufacturer",
                "device_id",
                "device_type",
                "device_name",
                "screen_size",
                "manufacture_date",
                "battery_capacity",
                "storage_capacity",
                "camera_resolution",
                "processor_speed",
                "ram_capacity",
                "biometric_authentication",
                "ip_rating",
                "screen_resolution",
                "operating_system_version",
                "added_date",
                "ram_size",
                "operating_system",
                "os_version",
                "ip_address",
                "os_id",
                "last_used_date",
                "location_id",
                "serial_number",
                "network_id",
                "last_access_date",
                "is_online",
                "last_patched_date",
                "max_login_attempts",
                "Flag_Status",
                "Last_Update_Time",
                "Last_Scan_Time",
                "Device_Type",
                "Last_Vulnerability_Scan",
                "Last_Patch_Time",
                "Vulnerability_Level",
                "Device_Name",
                "Certificate_Expiry_Date",
                "Device_Status",
                "Last_Checkin_Time",
                "Last_Patch_Update",
                "Last_Security_Update",
                "IsConnected",
                "ipAddress",
                "name",
                "id"
            ]
        }
    },
    {
        "id": 260,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Trial': ['trial_id', 'session_id', 'task_id', 'trial_number', 'stimuli', 'response', 'reaction_time', 'participant_id', 'stimulus_id', 'task_name', 'completion_time'], 'Stimulus': ['stimulus_id', 'stimulus_name', 'category', 'presentation_duration']} and \n# the user question: Retrieve the stimulus names along with the count of trials and average reaction time for trials where the stimulus presentation duration is greater than 1 second.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the stimulus names along with the count of trials and average reaction time for trials where the stimulus presentation duration is greater than 1 second.",
        "output": "SELECT Stimulus.stimulus_name, COUNT(Trial.trial_id) AS trial_count, AVG(Trial.reaction_time) AS average_reaction_time FROM Stimulus JOIN Trial ON Stimulus.stimulus_id = Trial.stimulus_id WHERE Stimulus.presentation_duration > 1 GROUP BY Stimulus.stimulus_name;",
        "schema": "cognitive_psychology",
        "processed_schema_content": {
            "Trial": [
                "trial_id",
                "session_id",
                "task_id",
                "trial_number",
                "stimuli",
                "response",
                "reaction_time",
                "participant_id",
                "stimulus_id",
                "task_name",
                "completion_time"
            ],
            "Stimulus": [
                "stimulus_id",
                "stimulus_name",
                "category",
                "presentation_duration"
            ]
        }
    },
    {
        "id": 262,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Doctors': ['doctor_id', 'doctor_name', 'specialization', 'hospital_id'], 'Diseases': ['disease_id', 'disease_name', 'description', 'num_symptoms', 'symptom_count'], 'Patient_Disease': ['patient_disease_id', 'patient_id', 'disease_id', 'symptom_id', 'doctor_id', 'hospital_id'], 'Adverse_Reactions': ['reaction_id', 'patient_id', 'vaccine_id', 'reaction_description', 'patient_disease_id', 'doctor_id']} and \n# the user question: Retrieve the list of doctors who have treated patients diagnosed with a specific disease (e.g., Alzheimer's) and have reported adverse reactions, along with the number of adverse reactions reported:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of doctors who have treated patients diagnosed with a specific disease (e.g., Alzheimer's) and have reported adverse reactions, along with the number of adverse reactions reported:",
        "output": "SELECT d.doctor_name, COUNT(ar.reaction_id) AS adverse_reaction_count FROM Doctors AS d JOIN Patient_Disease AS pd ON d.doctor_id = pd.doctor_id JOIN Diseases AS di ON pd.disease_id = di.disease_id JOIN Adverse_Reactions AS ar ON pd.patient_disease_id = ar.patient_disease_id WHERE di.disease_name = 'Alzheimer\\'s' GROUP BY d.doctor_name;",
        "schema": "epidemiology",
        "processed_schema_content": {
            "Doctors": [
                "doctor_id",
                "doctor_name",
                "specialization",
                "hospital_id"
            ],
            "Diseases": [
                "disease_id",
                "disease_name",
                "description",
                "num_symptoms",
                "symptom_count"
            ],
            "Patient_Disease": [
                "patient_disease_id",
                "patient_id",
                "disease_id",
                "symptom_id",
                "doctor_id",
                "hospital_id"
            ],
            "Adverse_Reactions": [
                "reaction_id",
                "patient_id",
                "vaccine_id",
                "reaction_description",
                "patient_disease_id",
                "doctor_id"
            ]
        }
    },
    {
        "id": 264,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project for a total of at least 50 hours and have been assigned to at least one task with a task status of \"In Progress\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project for a total of at least 50 hours and have been assigned to at least one task with a task status of \"In Progress\".",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID AND tk.Task_Status = 'In Progress' GROUP BY e.Employee_ID HAVING SUM(t.Time_Spent) >= 50;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        }
    },
    {
        "id": 265,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Screens': ['project_id', 'screen_id'], 'Comments': ['component_id', 'comment_id', 'user_id', 'project_id', 'created_at'], 'Components': ['screen_id', 'component_id', 'user_id', 'color_id', 'font_id', 'type'], 'Projects': ['title', 'project_id', 'user_id', 'created_at', 'start_date', 'end_date'], 'Users': ['user_id', 'username', 'email']} and \n# the user question: \"Retrieve the usernames of users who have commented on at least one screen of projects created by themselves.\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Retrieve the usernames of users who have commented on at least one screen of projects created by themselves.\":",
        "output": "SELECT Users.username FROM Users JOIN Comments ON Users.user_id = Comments.user_id JOIN Components ON Comments.component_id = Components.component_id JOIN Screens ON Components.screen_id = Screens.screen_id JOIN Projects ON Screens.project_id = Projects.project_id WHERE Users.user_id = Projects.user_id GROUP BY Users.username",
        "schema": "mobile_app_design",
        "processed_schema_content": {
            "Screens": [
                "project_id",
                "screen_id"
            ],
            "Comments": [
                "component_id",
                "comment_id",
                "user_id",
                "project_id",
                "created_at"
            ],
            "Components": [
                "screen_id",
                "component_id",
                "user_id",
                "color_id",
                "font_id",
                "type"
            ],
            "Projects": [
                "title",
                "project_id",
                "user_id",
                "created_at",
                "start_date",
                "end_date"
            ],
            "Users": [
                "user_id",
                "username",
                "email"
            ]
        }
    },
    {
        "id": 269,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Collection': ['collection_id', 'name'], 'Movie_Collection': ['movie_id', 'collection_id']} and \n# the user question: Retrieve the title of the movie, the name of the collection, and the release year for all movies in the \"Lord of the Rings\" collection that were released before the year 2005.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the title of the movie, the name of the collection, and the release year for all movies in the \"Lord of the Rings\" collection that were released before the year 2005.",
        "output": "SELECT Movie.title, Collection.name, Movie.release_year FROM Movie JOIN Movie_Collection ON Movie.movie_id = Movie_Collection.movie_id JOIN Collection ON Movie_Collection.collection_id = Collection.collection_id WHERE Collection.name = 'Lord of the Rings' AND Movie.release_year < 2005;",
        "schema": "romance_films",
        "processed_schema_content": {
            "Movie": [
                "movie_id",
                "title",
                "release_year",
                "director_id",
                "runtime",
                "production_company_id",
                "budget",
                "release_date",
                "producer_id",
                "genre"
            ],
            "Collection": [
                "collection_id",
                "name"
            ],
            "Movie_Collection": [
                "movie_id",
                "collection_id"
            ]
        }
    },
    {
        "id": 271,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Author': ['author_id', 'first_name', 'last_name', 'email', 'gender', 'country_id', 'birth_year', 'has_pulitzer_prize', 'has_phd', 'has_booker_prize', 'birth_country', 'name', 'author_name', 'id'], 'Book': ['book_id', 'title', 'isbn', 'publisher_id', 'publication_date', 'rating', 'price', 'publication_year', 'author_id', 'publisher', 'author', 'weight', 'author_gender', 'language', 'author_name', 'book_title', 'format_id', 'page_count', 'id', 'num_pages'], 'Book_Author': ['book_id', 'author_id'], 'Order': ['order_id', 'customer_id', 'order_date', 'status', 'store_id', 'date', 'total_amount', 'total_cost', 'total_price'], 'Order_Item': ['order_id', 'book_id', 'quantity', 'price', 'store_id', 'order_date', 'customer_id', 'unit_price', 'inventory_id', 'date', 'order_item_date'], 'Customer': ['customer_id', 'first_name', 'last_name', 'email', 'address', 'phone_number', 'zip_code', 'country_id'], 'Store_Inventory': ['store_id', 'book_id', 'quantity', 'inventory_id', 'quantity_available']} and \n# the user question: Find the names of customers who have purchased books written by more than one author, and the number of authors they have purchased from.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of customers who have purchased books written by more than one author, and the number of authors they have purchased from.",
        "output": "SELECT Customer.first_name || ' ' || Customer.last_name AS customer_name, COUNT(DISTINCT Author.author_id) AS num_authors FROM Customer JOIN Order ON Customer.customer_id = Order.customer_id JOIN Order_Item ON Order.order_id = Order_Item.order_id JOIN Store_Inventory ON Order_Item.inventory_id = Store_Inventory.inventory_id JOIN Book ON Store_Inventory.book_id = Book.book_id JOIN Book_Author ON Book.book_id = Book_Author.book_id JOIN Author ON Book_Author.author_id = Author.author_id GROUP BY Customer.customer_id HAVING COUNT(DISTINCT Author.author_id) > 1;",
        "schema": "business_books",
        "processed_schema_content": {
            "Author": [
                "author_id",
                "first_name",
                "last_name",
                "email",
                "gender",
                "country_id",
                "birth_year",
                "has_pulitzer_prize",
                "has_phd",
                "has_booker_prize",
                "birth_country",
                "name",
                "author_name",
                "id"
            ],
            "Book": [
                "book_id",
                "title",
                "isbn",
                "publisher_id",
                "publication_date",
                "rating",
                "price",
                "publication_year",
                "author_id",
                "publisher",
                "author",
                "weight",
                "author_gender",
                "language",
                "author_name",
                "book_title",
                "format_id",
                "page_count",
                "id",
                "num_pages"
            ],
            "Book_Author": [
                "book_id",
                "author_id"
            ],
            "Order": [
                "order_id",
                "customer_id",
                "order_date",
                "status",
                "store_id",
                "date",
                "total_amount",
                "total_cost",
                "total_price"
            ],
            "Order_Item": [
                "order_id",
                "book_id",
                "quantity",
                "price",
                "store_id",
                "order_date",
                "customer_id",
                "unit_price",
                "inventory_id",
                "date",
                "order_item_date"
            ],
            "Customer": [
                "customer_id",
                "first_name",
                "last_name",
                "email",
                "address",
                "phone_number",
                "zip_code",
                "country_id"
            ],
            "Store_Inventory": [
                "store_id",
                "book_id",
                "quantity",
                "inventory_id",
                "quantity_available"
            ]
        }
    },
    {
        "id": 272,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {} and \n# the user question: \"Find the initiatives and their respective number of completed goals for each initiative.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Find the initiatives and their respective number of completed goals for each initiative.\"",
        "output": "SELECT `CSR Initiatives`.initiative_name, COUNT(`CSR Goals`.goal_id) AS completed_goals FROM `CSR Initiatives` LEFT JOIN `CSR Goals` ON `CSR Initiatives`.initiative_id = `CSR Goals`.initiative_id WHERE `CSR Goals`.completion_date IS NOT NULL GROUP BY `CSR Initiatives`.initiative_id;",
        "schema": "corporate_social_responsibility",
        "processed_schema_content": {}
    },
    {
        "id": 273,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'users': ['password', 'email', 'name', 'created_at', 'id', 'country', 'age', 'region', 'email_verified', 'username', 'date_of_birth', 'countr', 'phone_number', 'device_type', 'user_id', 'last_login'], 'app_downloads': ['download_date', 'app_id', 'user_id', 'app_version_id', 'status', 'id', 'created_at', 'downloaded_at', 'num_downloads', 'count', 'date', 'downloads', 'app_name'], 'app_reviews': ['app_id', 'rating', 'user_id', 'comment', 'created_at', 'status', 'id', 'updated_at', 'posted_at', 'num_reviews'], 'app_categories': ['name', 'id', 'description', 'app_id', 'category_id'], 'apps': ['name', 'id', 'price', 'created_at', 'category_id', 'updated_at', 'description', 'developer_id', 'rating', 'app_id', 'developer', 'release_date', 'downloads', 'version', 'price_type', 'status', 'creation_date', 'app_name', 'XYZ', 'category']} and \n# the user question: Retrieve the `name` and `category` of all apps that have a category of \"Social\" and have been downloaded by users who live in the United States and have left a review with a rating of 4 or higher:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the `name` and `category` of all apps that have a category of \"Social\" and have been downloaded by users who live in the United States and have left a review with a rating of 4 or higher:",
        "output": "SELECT a.name, ac.name AS category FROM apps a INNER JOIN app_categories ac ON a.category_id = ac.id INNER JOIN app_reviews ar ON a.id = ar.app_id INNER JOIN app_downloads ad ON a.id = ad.app_id INNER JOIN users u ON ad.user_id = u.id WHERE ac.name = 'Social' AND u.country = 'United States' AND ar.rating >= 4;",
        "schema": "mobile_app_development",
        "processed_schema_content": {
            "users": [
                "password",
                "email",
                "name",
                "created_at",
                "id",
                "country",
                "age",
                "region",
                "email_verified",
                "username",
                "date_of_birth",
                "countr",
                "phone_number",
                "device_type",
                "user_id",
                "last_login"
            ],
            "app_downloads": [
                "download_date",
                "app_id",
                "user_id",
                "app_version_id",
                "status",
                "id",
                "created_at",
                "downloaded_at",
                "num_downloads",
                "count",
                "date",
                "downloads",
                "app_name"
            ],
            "app_reviews": [
                "app_id",
                "rating",
                "user_id",
                "comment",
                "created_at",
                "status",
                "id",
                "updated_at",
                "posted_at",
                "num_reviews"
            ],
            "app_categories": [
                "name",
                "id",
                "description",
                "app_id",
                "category_id"
            ],
            "apps": [
                "name",
                "id",
                "price",
                "created_at",
                "category_id",
                "updated_at",
                "description",
                "developer_id",
                "rating",
                "app_id",
                "developer",
                "release_date",
                "downloads",
                "version",
                "price_type",
                "status",
                "creation_date",
                "app_name",
                "XYZ",
                "category"
            ]
        }
    },
    {
        "id": 274,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve the projects that have risks with an impact score greater than 7 and sort them in descending order based on the number of associated risks.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the projects that have risks with an impact score greater than 7 and sort them in descending order based on the number of associated risks.\"",
        "output": "SELECT Projects.project_id, Projects.project_name, COUNT(Risks.risk_id) AS total_risks FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id WHERE Risks.impact_score > 7 GROUP BY Projects.project_id, Projects.project_name ORDER BY total_risks DESC;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ]
        }
    },
    {
        "id": 277,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Goal': ['goal_id', 'due_date', 'is_completed', 'client_id', 'description', 'coach_id', 'status', 'package_id', 'category', 'target_completion_date', 'completion_date', 'is_cancelled', 'name', 'cancelled', 'completed', 'started', 'progress', 'start_date'], 'Client': ['name', 'email', 'coach_id', 'package_id', 'client_id', 'address', 'birthdate', 'occupation', 'phone', 'preferred_coach', 'last_activity_time']} and \n# the user question: Retrieve the names and email addresses of all clients who have goals with a due date within the next 3 weeks, and where the goal description contains the word 'leadership'.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all clients who have goals with a due date within the next 3 weeks, and where the goal description contains the word 'leadership'.",
        "output": "SELECT DISTINCT Client.name, Client.email FROM Client INNER JOIN Goal ON Client.client_id = Goal.client_id WHERE Goal.description LIKE '%leadership%' AND Goal.due_date BETWEEN date('now') AND date('now', '+21 days');",
        "schema": "coaching",
        "processed_schema_content": {
            "Goal": [
                "goal_id",
                "due_date",
                "is_completed",
                "client_id",
                "description",
                "coach_id",
                "status",
                "package_id",
                "category",
                "target_completion_date",
                "completion_date",
                "is_cancelled",
                "name",
                "cancelled",
                "completed",
                "started",
                "progress",
                "start_date"
            ],
            "Client": [
                "name",
                "email",
                "coach_id",
                "package_id",
                "client_id",
                "address",
                "birthdate",
                "occupation",
                "phone",
                "preferred_coach",
                "last_activity_time"
            ]
        }
    },
    {
        "id": 278,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EnergySuppliers': ['supplier_name', 'supplier_id', 'contact_name', 'phone_number', 'supplier_state', 'supplier_city', 'supplier_address', 'supplier_zip', 'supplier_location'], 'EnergyProducts': ['supplier_id', 'product_name', 'product_id', 'unit_price', 'start_date', 'end_date', 'product_category', 'product_type', 'product_price', 'source_id'], 'EnergyContracts': ['start_date', 'rate', 'end_date', 'user_id', 'product_id', 'contract_id', 'source_id', 'meter_id', 'is_renewed', 'is_terminated', 'contract_type', 'supplier_id', 'revenue', 'contract_name', 'contract_end_date', 'contract_rate', 'contract_start_date', 'contract_status', 'contract_value']} and \n# the user question: Retrieve the names of all energy products, their respective suppliers, and the total number of energy contracts associated with each product.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all energy products, their respective suppliers, and the total number of energy contracts associated with each product.",
        "output": "SELECT p.product_name, s.supplier_name, COUNT(c.contract_id) AS contract_count FROM EnergyProducts p INNER JOIN EnergySuppliers s ON p.supplier_id = s.supplier_id LEFT JOIN EnergyContracts c ON p.product_id = c.product_id GROUP BY p.product_id;",
        "schema": "energy",
        "processed_schema_content": {
            "EnergySuppliers": [
                "supplier_name",
                "supplier_id",
                "contact_name",
                "phone_number",
                "supplier_state",
                "supplier_city",
                "supplier_address",
                "supplier_zip",
                "supplier_location"
            ],
            "EnergyProducts": [
                "supplier_id",
                "product_name",
                "product_id",
                "unit_price",
                "start_date",
                "end_date",
                "product_category",
                "product_type",
                "product_price",
                "source_id"
            ],
            "EnergyContracts": [
                "start_date",
                "rate",
                "end_date",
                "user_id",
                "product_id",
                "contract_id",
                "source_id",
                "meter_id",
                "is_renewed",
                "is_terminated",
                "contract_type",
                "supplier_id",
                "revenue",
                "contract_name",
                "contract_end_date",
                "contract_rate",
                "contract_start_date",
                "contract_status",
                "contract_value"
            ]
        }
    },
    {
        "id": 280,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Train': ['Max_Speed', 'Year_Built', 'Name', 'ID', 'Seats_Business', 'TrainName', 'Speed', 'Country', 'SeatingCapacity', 'TrainID', 'MaxSpeed', 'id', 'train_number', 'fare']} and \n# the user question: Find the train that has the maximum number of seats in business class.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the train that has the maximum number of seats in business class.",
        "output": "SELECT Train.Name, MAX(Train.Seats_Business) AS Max_Business_Seats FROM Train GROUP BY Train.Name ORDER BY Max_Business_Seats DESC LIMIT 1;",
        "schema": "high-speed_trains",
        "processed_schema_content": {
            "Train": [
                "Max_Speed",
                "Year_Built",
                "Name",
                "ID",
                "Seats_Business",
                "TrainName",
                "Speed",
                "Country",
                "SeatingCapacity",
                "TrainID",
                "MaxSpeed",
                "id",
                "train_number",
                "fare"
            ]
        }
    },
    {
        "id": 281,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Participants': ['first_name', 'last_name', 'participant_id', 'gender', 'age', 'birth_year', 'date_of_birth', 'ag', 'age_group_id', 'parental_edu_id', 'language_group_id'], 'Participant_Tasks': ['task_id', 'participant_id', 'completion_date', 'score', 'completed'], 'Tasks': ['task_id', 'task_name', 'study_id', 'difficulty_level', 'duration', 'difficulty', 'task_category', 'category', 'Tower', 'Hanoi', 'Digit', 'Span', 'Working', 'Spatial', 'Symbol', 'Picture', 'Concepts', 'Coding', 'Regulation', 'Emotional']} and \n# the user question: Retrieve the names and ages of participants who have completed tasks in the \"Language\" category and have an age that is a multiple of 5:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and ages of participants who have completed tasks in the \"Language\" category and have an age that is a multiple of 5:",
        "output": "SELECT Participants.first_name, Participants.last_name, Participants.age FROM Participants JOIN Participant_Tasks ON Participants.participant_id = Participant_Tasks.participant_id JOIN Tasks ON Participant_Tasks.task_id = Tasks.task_id AND Tasks.category = 'Language' WHERE Participants.age % 5 = 0 ORDER BY Participants.age, Participants.last_name, Participants.first_name;",
        "schema": "developmental_psychology",
        "processed_schema_content": {
            "Participants": [
                "first_name",
                "last_name",
                "participant_id",
                "gender",
                "age",
                "birth_year",
                "date_of_birth",
                "ag",
                "age_group_id",
                "parental_edu_id",
                "language_group_id"
            ],
            "Participant_Tasks": [
                "task_id",
                "participant_id",
                "completion_date",
                "score",
                "completed"
            ],
            "Tasks": [
                "task_id",
                "task_name",
                "study_id",
                "difficulty_level",
                "duration",
                "difficulty",
                "task_category",
                "category",
                "Tower",
                "Hanoi",
                "Digit",
                "Span",
                "Working",
                "Spatial",
                "Symbol",
                "Picture",
                "Concepts",
                "Coding",
                "Regulation",
                "Emotional"
            ]
        }
    },
    {
        "id": 282,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Authors': ['first_name', 'author_id', 'last_name', 'nationality', 'author_name', 'author_city', 'AuthorID', 'AuthorName'], 'Order_Items': ['price', 'quantity', 'order_id', 'book_id', 'customer_id', 'publisher_id', 'is_returned', 'product_id', 'is_delivered', 'total_price', 'order_date'], 'Orders': ['order_date', 'order_id', 'customer_id', 'coupon_code', 'total_cost', 'total_quantity', 'shipping_address_id', 'total_price', 'total_amount', 'salesperson_id', 'book_id', 'channel_id', 'Order_Date', 'Order_Total', 'Customer_Name']} and \n# the user question: Retrieve the titles and authors of books that have been ordered by customers who have placed orders for at least 3 books that were published in a particular year (e.g. 2021).,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the titles and authors of books that have been ordered by customers who have placed orders for at least 3 books that were published in a particular year (e.g. 2021).",
        "output": "SELECT b.title, CONCAT(a.first_name, ' ', a.last_name) AS author FROM Books b JOIN Authors a ON b.author_id = a.author_id WHERE b.year_published = 2021 AND b.book_id IN ( SELECT oi.book_id FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id WHERE o.customer_id IN ( SELECT o2.customer_id FROM Orders o2 JOIN Order_Items oi2 ON o2.order_id = oi2.order_id JOIN Books b2 ON oi2.book_id = b2.book_id WHERE b2.year_published = 2021 GROUP BY o2.customer_id HAVING COUNT(DISTINCT b2.book_id) >= 3 ) );",
        "schema": "marketing_books",
        "processed_schema_content": {
            "Books": [
                "book_id",
                "title",
                "publisher_id",
                "publication_date",
                "author_id",
                "price",
                "publication_year",
                "publisher",
                "stock",
                "genre",
                "series",
                "year_published",
                "release_date",
                "word_count",
                "avg_rating",
                "A001",
                "genre_id",
                "stock_count",
                "category_id",
                "book_title",
                "rating",
                "available_for_purchase",
                "BookID",
                "BookTitle",
                "PublicationYear",
                "PublisherID",
                "Price"
            ],
            "Authors": [
                "first_name",
                "author_id",
                "last_name",
                "nationality",
                "author_name",
                "author_city",
                "AuthorID",
                "AuthorName"
            ],
            "Order_Items": [
                "price",
                "quantity",
                "order_id",
                "book_id",
                "customer_id",
                "publisher_id",
                "is_returned",
                "product_id",
                "is_delivered",
                "total_price",
                "order_date"
            ],
            "Orders": [
                "order_date",
                "order_id",
                "customer_id",
                "coupon_code",
                "total_cost",
                "total_quantity",
                "shipping_address_id",
                "total_price",
                "total_amount",
                "salesperson_id",
                "book_id",
                "channel_id",
                "Order_Date",
                "Order_Total",
                "Customer_Name"
            ]
        }
    },
    {
        "id": 283,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Illustrations': ['user_id', 'illustration_id', 'upload_date', 'title', 'price', 'category_id', 'discount', 'creation_date', 'artist_id', 'description'], 'Users': ['username', 'user_id', 'address_id', 'work_address_id', 'last_active_date', 'home_address_id', 'last_activity_date', 'registration_date', 'email', 'total_purchase_amount', 'user_type_id', 'country', 'name'], 'Illustration_tags': ['tag_name', 'tag_id', 'illustration_id'], 'Illustration_tag_map': ['tag_id', 'illustration_id'], 'Illustration_ratings': ['illustration_id', 'rating_value', 'user_id', 'rating', 'purchase_id', 'rating_id', 'category_id'], 'User_accounts': ['account_type', 'user_id']} and \n# the user question: Get the details of all illustrations that have been uploaded by users who have an account type of 'premium' and have been rated with a rating value of 5 and have been tagged with the tag 'portrait':,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the details of all illustrations that have been uploaded by users who have an account type of 'premium' and have been rated with a rating value of 5 and have been tagged with the tag 'portrait':",
        "output": "SELECT Illustrations.title, Users.username, User_accounts.account_type, Illustration_ratings.rating_value FROM Illustrations INNER JOIN Users ON Illustrations.user_id = Users.user_id INNER JOIN User_accounts ON Users.user_id = User_accounts.user_id INNER JOIN Illustration_ratings ON Illustrations.illustration_id = Illustration_ratings.illustration_id INNER JOIN Illustration_tag_map ON Illustrations.illustration_id = Illustration_tag_map.illustration_id INNER JOIN Illustration_tags ON Illustration_tag_map.tag_id = Illustration_tags.tag_id WHERE Illustration_ratings.rating_value = 5 AND User_accounts.account_type = 'premium' AND Illustration_tags.tag_name = 'portrait';",
        "schema": "illustration",
        "processed_schema_content": {
            "Illustrations": [
                "user_id",
                "illustration_id",
                "upload_date",
                "title",
                "price",
                "category_id",
                "discount",
                "creation_date",
                "artist_id",
                "description"
            ],
            "Users": [
                "username",
                "user_id",
                "address_id",
                "work_address_id",
                "last_active_date",
                "home_address_id",
                "last_activity_date",
                "registration_date",
                "email",
                "total_purchase_amount",
                "user_type_id",
                "country",
                "name"
            ],
            "Illustration_tags": [
                "tag_name",
                "tag_id",
                "illustration_id"
            ],
            "Illustration_tag_map": [
                "tag_id",
                "illustration_id"
            ],
            "Illustration_ratings": [
                "illustration_id",
                "rating_value",
                "user_id",
                "rating",
                "purchase_id",
                "rating_id",
                "category_id"
            ],
            "User_accounts": [
                "account_type",
                "user_id"
            ]
        }
    },
    {
        "id": 287,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['FirstName', 'EmployeeID', 'LastName', 'JobTitle', 'SupervisorID', 'State', 'Country', 'Region', 'EndYear', 'StartYear', 'Continent', 'Title', 'QuarterlySalesTarget', 'EmailAddress', 'HireDate', 'City'], 'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID'], 'EmployeeSales': ['EmployeeID', 'OrderID', 'CommissionRate', 'CustomerID', 'CommissionAmount', 'TotalPrice', 'Commission', 'Quantity', 'SalesGoal'], 'EmployeeManager': ['EmployeeID', 'ManagerID', 'EmployeeCount']} and \n# the user question: Retrieve the list of sales representatives and their respective managers, where the sales representative has made at least one sale in the year 2023 and the manager is located in Asia:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of sales representatives and their respective managers, where the sales representative has made at least one sale in the year 2023 and the manager is located in Asia:",
        "output": "SELECT Employee.FirstName, Employee.LastName, Manager.FirstName, Manager.LastName FROM Employee JOIN EmployeeManager ON Employee.EmployeeID = EmployeeManager.EmployeeID JOIN Employee as Manager ON EmployeeManager.ManagerID = Manager.EmployeeID JOIN EmployeeSales ON Employee.EmployeeID = EmployeeSales.EmployeeID JOIN SalesOrder ON EmployeeSales.OrderID = SalesOrder.OrderID WHERE SalesOrder.Year = 2023 AND Manager.Continent = 'Asia' GROUP BY Employee.EmployeeID, Manager.EmployeeID;",
        "schema": "business_strategy",
        "processed_schema_content": {
            "Employee": [
                "FirstName",
                "EmployeeID",
                "LastName",
                "JobTitle",
                "SupervisorID",
                "State",
                "Country",
                "Region",
                "EndYear",
                "StartYear",
                "Continent",
                "Title",
                "QuarterlySalesTarget",
                "EmailAddress",
                "HireDate",
                "City"
            ],
            "SalesOrder": [
                "OrderID",
                "Year",
                "CustomerID",
                "OrderDate",
                "TotalAmount",
                "TotalPrice",
                "QuarterID",
                "ExpectedDeliveryDate",
                "ShippedDate",
                "EmployeeID",
                "CountryCode",
                "ReturnID",
                "OfficeID",
                "Discount",
                "OrderNumber",
                "Status",
                "RegionID"
            ],
            "EmployeeSales": [
                "EmployeeID",
                "OrderID",
                "CommissionRate",
                "CustomerID",
                "CommissionAmount",
                "TotalPrice",
                "Commission",
                "Quantity",
                "SalesGoal"
            ],
            "EmployeeManager": [
                "EmployeeID",
                "ManagerID",
                "EmployeeCount"
            ]
        }
    },
    {
        "id": 288,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Event': ['event_id', 'event_name', 'event_date', 'location_id', 'event_category_id', 'event_type_id', 'location', 'venue_id', 'start_date', 'end_date', 'category', 'event_code', 'EVT', 'organizer_id', 'duration', 'name', 'Expo', 'Tech', 'country', 'category_id', 'city', 'ticket_price', 'date', 'start_time', 'end_time', 'min_age_requirement', 'event_type', 'capacity', 'registration_deadline', 'num_attendees', 'min_age', 'duration_hours', 'registration_fee', 'price'], 'Attendee': ['attendee_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'date_of_birth', 'job_title', 'city', 'age', 'email'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID']} and \n# the user question: What is the total number of attendees who have attended events in the year 2024?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What is the total number of attendees who have attended events in the year 2024?",
        "output": "SELECT COUNT(DISTINCT Attendee.attendee_id) AS total_attendees FROM Attendee INNER JOIN Registration ON Attendee.attendee_id = Registration.attendee_id INNER JOIN Event ON Registration.event_id = Event.event_id WHERE strftime('%Y', Event.event_date) = '2024';",
        "schema": "event_management",
        "processed_schema_content": {
            "Event": [
                "event_id",
                "event_name",
                "event_date",
                "location_id",
                "event_category_id",
                "event_type_id",
                "location",
                "venue_id",
                "start_date",
                "end_date",
                "category",
                "event_code",
                "EVT",
                "organizer_id",
                "duration",
                "name",
                "Expo",
                "Tech",
                "country",
                "category_id",
                "city",
                "ticket_price",
                "date",
                "start_time",
                "end_time",
                "min_age_requirement",
                "event_type",
                "capacity",
                "registration_deadline",
                "num_attendees",
                "min_age",
                "duration_hours",
                "registration_fee",
                "price"
            ],
            "Attendee": [
                "attendee_id",
                "first_name",
                "last_name",
                "email_address",
                "phone_number",
                "date_of_birth",
                "job_title",
                "city",
                "age",
                "email"
            ],
            "Registration": [
                "registration_id",
                "attendee_id",
                "event_id",
                "registration_date",
                "num_tickets",
                "attended",
                "fee",
                "registration_status",
                "payment_status",
                "payment_method",
                "num_attendees",
                "EventName",
                "AttendeeID"
            ]
        }
    },
    {
        "id": 290,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Node': ['NodeID', 'IP', 'ConnectedNodeID', 'ValidationRate', 'IPAddress', 'ValidatedBlocks', 'ReputationScore'], 'BlockValidation': ['BlockID', 'IsValid', 'NodeID', 'Creator', 'Timestamp', 'BlockValidationID', 'PublicAddress', 'MiningPoolID', 'Penalty', 'Difficulty', 'GasLimit', 'DifficultyLevel']} and \n# the user question: Find the nodes that have validated blocks in the last 24 hours:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the nodes that have validated blocks in the last 24 hours:",
        "output": "SELECT DISTINCT Node.NodeID FROM Node JOIN BlockValidation ON Node.NodeID = BlockValidation.NodeID AND BlockValidation.Timestamp >= datetime('now', '-24 hours')",
        "schema": "blockchain_technology",
        "processed_schema_content": {
            "Node": [
                "NodeID",
                "IP",
                "ConnectedNodeID",
                "ValidationRate",
                "IPAddress",
                "ValidatedBlocks",
                "ReputationScore"
            ],
            "BlockValidation": [
                "BlockID",
                "IsValid",
                "NodeID",
                "Creator",
                "Timestamp",
                "BlockValidationID",
                "PublicAddress",
                "MiningPoolID",
                "Penalty",
                "Difficulty",
                "GasLimit",
                "DifficultyLevel"
            ]
        }
    },
    {
        "id": 294,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Insurance': ['insurance_provider', 'patient_id', 'policy_number', 'insurance_id', 'insurance_provider_id', 'coverage_type_id'], 'Insurance_Provider': ['insurance_provider_name', 'insurance_provider_id'], 'Appointment': ['chiropractor_id', 'patient_id', 'appointment_date_time', 'appointment_id', 'insurance_id'], 'Diagnosis': ['diagnosis_name', 'appointment_id', 'diagnosis_description', 'body_part_id', 'diagnosis_id', 'body_part']} and \n# the user question: Find the number of appointments that were paid for by Aetna insurance and had a diagnosis of 'Lower Back Pain':,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of appointments that were paid for by Aetna insurance and had a diagnosis of 'Lower Back Pain':",
        "output": "SELECT COUNT(*) AS num_appointments FROM Appointment a INNER JOIN Insurance i ON a.insurance_id = i.insurance_id INNER JOIN Insurance_Provider ip ON i.insurance_provider_id = ip.insurance_provider_id INNER JOIN Diagnosis d ON a.appointment_id = d.appointment_id WHERE ip.insurance_provider_name = 'Aetna' AND d.diagnosis_name = 'Lower Back Pain';",
        "schema": "chiropractic",
        "processed_schema_content": {
            "Insurance": [
                "insurance_provider",
                "patient_id",
                "policy_number",
                "insurance_id",
                "insurance_provider_id",
                "coverage_type_id"
            ],
            "Insurance_Provider": [
                "insurance_provider_name",
                "insurance_provider_id"
            ],
            "Appointment": [
                "chiropractor_id",
                "patient_id",
                "appointment_date_time",
                "appointment_id",
                "insurance_id"
            ],
            "Diagnosis": [
                "diagnosis_name",
                "appointment_id",
                "diagnosis_description",
                "body_part_id",
                "diagnosis_id",
                "body_part"
            ]
        }
    },
    {
        "id": 297,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'customers': ['customer_id', 'customer_address', 'customer_name', 'email', 'state', 'first_name', 'last_name', 'name', 'id', 'contact_name', 'country', 'address', 'city'], 'orders': ['customer_id', 'order_id', 'order_date', 'payment_status', 'total_amount', 'delivery_status', 'salesperson_id', 'shipping_state', 'employee_id', 'shipped_date', 'product_id', 'status']} and \n# the user question: Retrieve the name and email of all customers who have never placed an order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all customers who have never placed an order.",
        "output": "SELECT customer_name, email FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM orders );",
        "schema": "glass_etching",
        "processed_schema_content": {
            "customers": [
                "customer_id",
                "customer_address",
                "customer_name",
                "email",
                "state",
                "first_name",
                "last_name",
                "name",
                "id",
                "contact_name",
                "country",
                "address",
                "city"
            ],
            "orders": [
                "customer_id",
                "order_id",
                "order_date",
                "payment_status",
                "total_amount",
                "delivery_status",
                "salesperson_id",
                "shipping_state",
                "employee_id",
                "shipped_date",
                "product_id",
                "status"
            ]
        }
    },
    {
        "id": 299,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Volume': ['series_id', 'id', 'title', 'publisher_id', 'issue_count', 'volume_id', 'publication_date', 'publication_year', 'release_date', 'price', 'format'], 'Review': ['rating', 'issue_id', 'id', 'user_id'], 'User_Review': ['user_id', 'review_id', 'id']} and \n# the user question: Find the titles of all volumes that have not yet been reviewed by any user.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the titles of all volumes that have not yet been reviewed by any user.",
        "output": "SELECT DISTINCT v.title FROM Volume v LEFT JOIN Issue i ON v.id = i.volume_id LEFT JOIN Review r ON i.id = r.issue_id LEFT JOIN User_Review ur ON r.id = ur.review_id WHERE ur.id IS NULL;",
        "schema": "graphic_novels",
        "processed_schema_content": {
            "Issue": [
                "volume_id",
                "id",
                "title",
                "number",
                "release_date",
                "published_year",
                "publication_date",
                "series_id",
                "publication_year",
                "page_count",
                "sales",
                "has_variant_cover",
                "cover_price",
                "cover_date",
                "cover_art_id",
                "variant_cover"
            ],
            "Volume": [
                "series_id",
                "id",
                "title",
                "publisher_id",
                "issue_count",
                "volume_id",
                "publication_date",
                "publication_year",
                "release_date",
                "price",
                "format"
            ],
            "Review": [
                "rating",
                "issue_id",
                "id",
                "user_id"
            ],
            "User_Review": [
                "user_id",
                "review_id",
                "id"
            ]
        }
    },
    {
        "id": 300,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customers': ['customer_id', 'customer_name', 'company_name', 'city', 'country', 'address_id', 'first_name', 'last_name', 'region', 'contact_name', 'email', 'phone', 'registration_date', 'CustomerID', 'CustomerName'], 'Orders': ['order_total', 'customer_id', 'order_date', 'order_id', 'employee_id', 'shipper_id', 'supplier_id', 'shipped_date', 'required_date', 'shipping_cost', 'shipping_refunded', 'quantity', 'unit_price', 'product_id', 'total_amount', 'refund_issued', 'cancelled_date', 'returned_date', 'shipping_date', 'status', 'OrderDate', 'OrderStatus', 'ShippedDate', 'OrderID', 'CustomerID'], 'Order_Details': ['order_id', 'product_id', 'quantity', 'unit_price', 'order_detail_id', 'cost_price', 'shift_id', 'status', 'customer_rating', 'unit_cost']} and \n# the user question: Find the total number of products ordered by each customer in the last 3 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total number of products ordered by each customer in the last 3 months.",
        "output": "SELECT Customers.first_name || ' ' || Customers.last_name AS customer_name, SUM(Order_Details.quantity) AS total_ordered FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Details ON Orders.order_id = Order_Details.order_id WHERE Orders.order_date BETWEEN DATE('now', '-3 months') AND DATE('now') GROUP BY Customers.customer_id ORDER BY total_ordered DESC;",
        "schema": "operations_management",
        "processed_schema_content": {
            "Customers": [
                "customer_id",
                "customer_name",
                "company_name",
                "city",
                "country",
                "address_id",
                "first_name",
                "last_name",
                "region",
                "contact_name",
                "email",
                "phone",
                "registration_date",
                "CustomerID",
                "CustomerName"
            ],
            "Orders": [
                "order_total",
                "customer_id",
                "order_date",
                "order_id",
                "employee_id",
                "shipper_id",
                "supplier_id",
                "shipped_date",
                "required_date",
                "shipping_cost",
                "shipping_refunded",
                "quantity",
                "unit_price",
                "product_id",
                "total_amount",
                "refund_issued",
                "cancelled_date",
                "returned_date",
                "shipping_date",
                "status",
                "OrderDate",
                "OrderStatus",
                "ShippedDate",
                "OrderID",
                "CustomerID"
            ],
            "Order_Details": [
                "order_id",
                "product_id",
                "quantity",
                "unit_price",
                "order_detail_id",
                "cost_price",
                "shift_id",
                "status",
                "customer_rating",
                "unit_cost"
            ]
        }
    },
    {
        "id": 301,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Participants': ['first_name', 'last_name', 'participant_id', 'gender', 'age', 'birth_year', 'date_of_birth', 'ag', 'age_group_id', 'parental_edu_id', 'language_group_id'], 'Participant_Tasks': ['task_id', 'participant_id', 'completion_date', 'score', 'completed'], 'Tasks': ['task_id', 'task_name', 'study_id', 'difficulty_level', 'duration', 'difficulty', 'task_category', 'category', 'Tower', 'Hanoi', 'Digit', 'Span', 'Working', 'Spatial', 'Symbol', 'Picture', 'Concepts', 'Coding', 'Regulation', 'Emotional']} and \n# the user question: Retrieve the names and ages of all participants who have completed a task that has a difficulty level that is lower than the average difficulty level for all tasks:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and ages of all participants who have completed a task that has a difficulty level that is lower than the average difficulty level for all tasks:",
        "output": "SELECT Participants.first_name, Participants.last_name, Participants.age FROM Participants JOIN Participant_Tasks ON Participants.participant_id = Participant_Tasks.participant_id JOIN Tasks ON Participant_Tasks.task_id = Tasks.task_id WHERE Tasks.difficulty < ( SELECT AVG(difficulty) FROM Tasks );",
        "schema": "developmental_psychology",
        "processed_schema_content": {
            "Participants": [
                "first_name",
                "last_name",
                "participant_id",
                "gender",
                "age",
                "birth_year",
                "date_of_birth",
                "ag",
                "age_group_id",
                "parental_edu_id",
                "language_group_id"
            ],
            "Participant_Tasks": [
                "task_id",
                "participant_id",
                "completion_date",
                "score",
                "completed"
            ],
            "Tasks": [
                "task_id",
                "task_name",
                "study_id",
                "difficulty_level",
                "duration",
                "difficulty",
                "task_category",
                "category",
                "Tower",
                "Hanoi",
                "Digit",
                "Span",
                "Working",
                "Spatial",
                "Symbol",
                "Picture",
                "Concepts",
                "Coding",
                "Regulation",
                "Emotional"
            ]
        }
    },
    {
        "id": 305,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Sculptures': ['width', 'depth', 'material', 'height', 'creation_date', 'sculpture_name', 'sculpture_id', 'artist_id', 'collection_id', 'material_id', 'rating'], 'Reviews': ['sculpture_id', 'rating', 'review_id', 'user_id'], 'Sculpture_Awards': ['award_id', 'sculpture_id'], 'Awards': ['award_id', 'award_name', 'year', 'category_id'], 'Categories': ['category_name', 'category_id']} and \n# the user question: Find the names of sculptures that have won awards in a specific category (e.g., \"Outdoor Sculpture\") and have a rating above 4.0:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of sculptures that have won awards in a specific category (e.g., \"Outdoor Sculpture\") and have a rating above 4.0:",
        "output": "SELECT Sculptures.sculpture_name FROM Sculptures JOIN Sculpture_Awards ON Sculptures.sculpture_id = Sculpture_Awards.sculpture_id JOIN Awards ON Sculpture_Awards.award_id = Awards.award_id JOIN Categories ON Awards.category_id = Categories.category_id JOIN Reviews ON Sculptures.sculpture_id = Reviews.sculpture_id WHERE Categories.category_name = 'Outdoor Sculpture' AND Reviews.rating > 4.0;",
        "schema": "sculpting",
        "processed_schema_content": {
            "Sculptures": [
                "width",
                "depth",
                "material",
                "height",
                "creation_date",
                "sculpture_name",
                "sculpture_id",
                "artist_id",
                "collection_id",
                "material_id",
                "rating"
            ],
            "Reviews": [
                "sculpture_id",
                "rating",
                "review_id",
                "user_id"
            ],
            "Sculpture_Awards": [
                "award_id",
                "sculpture_id"
            ],
            "Awards": [
                "award_id",
                "award_name",
                "year",
                "category_id"
            ],
            "Categories": [
                "category_name",
                "category_id"
            ]
        }
    },
    {
        "id": 306,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EnergyMeters': ['meter_id', 'installation_date', 'meter_type', 'user_id', 'meter_number', 'starting_reading', 'meter_location', 'meter_name', 'product_id', 'meter_serial', 'created_date', 'avg_consumption', 'source_id'], 'EnergyMeterReadings': ['meter_id', 'reading_date', 'reading_value', 'reading_id', 'reading_hour']} and \n# the user question: Retrieve the energy meter reading with the highest reading value for each energy meter in the month of May 2023.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the energy meter reading with the highest reading value for each energy meter in the month of May 2023.",
        "output": "SELECT EnergyMeters.meter_id, MAX(EnergyMeterReadings.reading_value) AS max_reading_value FROM EnergyMeters INNER JOIN EnergyMeterReadings ON EnergyMeters.meter_id = EnergyMeterReadings.meter_id WHERE STRFTIME('%Y-%m', EnergyMeterReadings.reading_date) = '2023-05' GROUP BY EnergyMeters.meter_id;",
        "schema": "energy",
        "processed_schema_content": {
            "EnergyMeters": [
                "meter_id",
                "installation_date",
                "meter_type",
                "user_id",
                "meter_number",
                "starting_reading",
                "meter_location",
                "meter_name",
                "product_id",
                "meter_serial",
                "created_date",
                "avg_consumption",
                "source_id"
            ],
            "EnergyMeterReadings": [
                "meter_id",
                "reading_date",
                "reading_value",
                "reading_id",
                "reading_hour"
            ]
        }
    },
    {
        "id": 307,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'coaches': ['name', 'coach_id', 'coach_name', 'email'], 'sports': ['sport_name', 'sport_id', 'Low', 'motivation', 'competition', 'challenge', 'sport_category'], 'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'mental_skills': ['skill_id', 'skill_name', 'skill_description', 'athlete_id', 'Focus', 'Visualization', 'skill_mastered', 'skill_level', 'Excellent', 'High', 'Low'], 'athlete_coach': ['athlete_id', 'coach_id'], 'athlete_sports': ['sport_id', 'athlete_id']} and \n# the user question: Get the name and email of coaches who have worked with athletes who have a \"Low\" level of \"Mental Imagery\" in the \"Tennis\" sport.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the name and email of coaches who have worked with athletes who have a \"Low\" level of \"Mental Imagery\" in the \"Tennis\" sport.",
        "output": "SELECT DISTINCT coaches.coach_name, coaches.email FROM coaches INNER JOIN athlete_coach ON coaches.coach_id = athlete_coach.coach_id INNER JOIN athlete_skills ON athlete_coach.athlete_id = athlete_skills.athlete_id INNER JOIN athlete_sports ON athlete_skills.athlete_id = athlete_sports.athlete_id INNER JOIN sports ON athlete_sports.sport_id = sports.sport_id INNER JOIN mental_skills ON athlete_skills.skill_id = mental_skills.skill_id WHERE mental_skills.skill_name = 'Mental Imagery' AND mental_skills.skill_level = 'Low' AND sports.sport_name = 'Tennis';",
        "schema": "sports_psychology",
        "processed_schema_content": {
            "coaches": [
                "name",
                "coach_id",
                "coach_name",
                "email"
            ],
            "sports": [
                "sport_name",
                "sport_id",
                "Low",
                "motivation",
                "competition",
                "challenge",
                "sport_category"
            ],
            "athlete_skills": [
                "skill_id",
                "athlete_id",
                "skill_level",
                "skill_mastered",
                "self_talk",
                "mental_preparation",
                "imagery",
                "goal_setting",
                "anxiety",
                "focus",
                "mental_toughness",
                "confidence",
                "motivation"
            ],
            "mental_skills": [
                "skill_id",
                "skill_name",
                "skill_description",
                "athlete_id",
                "Focus",
                "Visualization",
                "skill_mastered",
                "skill_level",
                "Excellent",
                "High",
                "Low"
            ],
            "athlete_coach": [
                "athlete_id",
                "coach_id"
            ],
            "athlete_sports": [
                "sport_id",
                "athlete_id"
            ]
        }
    },
    {
        "id": 308,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'User': ['UserID', 'FirstName', 'LastName', 'Email', 'Password', 'Birthdate', 'Gender', 'Age', 'Height', 'BMI', 'Weight'], 'Exercise': ['ExerciseID', 'ExerciseName', 'Description', 'Image', 'CaloriesBurned', 'Distance', 'TargetMuscle', 'Category', 'ExerciseType', 'Name', 'CaloriesPerRep', 'CaloriesPerMinute', 'MuscleGroupID', 'ExerciseTypeID'], 'Workout': ['WorkoutID', 'UserID', 'PlanID', 'Date', 'WorkoutType', 'StartTime', 'EndTime', 'Duration', 'TimeSeconds', 'CaloriesBurned', 'WorkoutTypeID', 'Distance', 'Type', 'TotalCalories', 'USERID', 'WorkoutName', 'Steps', 'HeartRate', 'ExerciseTypeID'], 'WorkoutExercise': ['WorkoutID', 'ExerciseID', 'Sets', 'Reps', 'Weight', 'Duration', 'CaloriesBurned', 'NumSets', 'NumReps']} and \n# the user question: Find the names of all users who have completed a workout in the last week that included at least one exercise that targets the triceps:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all users who have completed a workout in the last week that included at least one exercise that targets the triceps:",
        "output": "SELECT DISTINCT User.FirstName, User.LastName FROM User INNER JOIN Workout ON User.UserID = Workout.UserID INNER JOIN WorkoutExercise ON Workout.WorkoutID = WorkoutExercise.WorkoutID INNER JOIN Exercise ON WorkoutExercise.ExerciseID = Exercise.ExerciseID WHERE Workout.Date >= DATE('now', '-7 days') AND Exercise.TargetMuscle = 'Triceps' GROUP BY User.UserID",
        "schema": "fitness",
        "processed_schema_content": {
            "User": [
                "UserID",
                "FirstName",
                "LastName",
                "Email",
                "Password",
                "Birthdate",
                "Gender",
                "Age",
                "Height",
                "BMI",
                "Weight"
            ],
            "Exercise": [
                "ExerciseID",
                "ExerciseName",
                "Description",
                "Image",
                "CaloriesBurned",
                "Distance",
                "TargetMuscle",
                "Category",
                "ExerciseType",
                "Name",
                "CaloriesPerRep",
                "CaloriesPerMinute",
                "MuscleGroupID",
                "ExerciseTypeID"
            ],
            "Workout": [
                "WorkoutID",
                "UserID",
                "PlanID",
                "Date",
                "WorkoutType",
                "StartTime",
                "EndTime",
                "Duration",
                "TimeSeconds",
                "CaloriesBurned",
                "WorkoutTypeID",
                "Distance",
                "Type",
                "TotalCalories",
                "USERID",
                "WorkoutName",
                "Steps",
                "HeartRate",
                "ExerciseTypeID"
            ],
            "WorkoutExercise": [
                "WorkoutID",
                "ExerciseID",
                "Sets",
                "Reps",
                "Weight",
                "Duration",
                "CaloriesBurned",
                "NumSets",
                "NumReps"
            ]
        }
    },
    {
        "id": 309,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Protein': ['gene_id', 'molecular_weight', 'protein_name', 'isoelectric_point', 'protein_id', 'length', 'protein_length'], 'Pathway_Gene': ['gene_id', 'pathway_id'], 'Pathway': ['pathway_id', 'pathway_name', 'description']} and \n# the user question: Retrieve the names of all genes and their associated proteins that have a length less than 400 amino acids and are part of the \"T cell receptor signaling pathway\" pathway.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all genes and their associated proteins that have a length less than 400 amino acids and are part of the \"T cell receptor signaling pathway\" pathway.",
        "output": "SELECT Gene.gene_name, Protein.protein_name FROM Gene JOIN Protein ON Gene.gene_id = Protein.gene_id JOIN Pathway_Gene ON Gene.gene_id = Pathway_Gene.gene_id JOIN Pathway ON Pathway_Gene.pathway_id = Pathway.pathway_id WHERE Protein.length < 400 AND Pathway.pathway_name = 'T cell receptor signaling pathway';",
        "schema": "genetics",
        "processed_schema_content": {
            "Gene": [
                "end_position",
                "start_position",
                "chromosome_id",
                "gene_name",
                "gene_id",
                "tss_position",
                "chromosome",
                "entrez_gene_id",
                "hgnc_symbol",
                "chromosome_number",
                "disease_id",
                "associated_disease",
                "accession_number",
                "Name",
                "ID"
            ],
            "Protein": [
                "gene_id",
                "molecular_weight",
                "protein_name",
                "isoelectric_point",
                "protein_id",
                "length",
                "protein_length"
            ],
            "Pathway_Gene": [
                "gene_id",
                "pathway_id"
            ],
            "Pathway": [
                "pathway_id",
                "pathway_name",
                "description"
            ]
        }
    },
    {
        "id": 310,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['FirstName', 'EmployeeID', 'LastName', 'JobTitle', 'SupervisorID', 'State', 'Country', 'Region', 'EndYear', 'StartYear', 'Continent', 'Title', 'QuarterlySalesTarget', 'EmailAddress', 'HireDate', 'City'], 'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID'], 'EmployeeSales': ['EmployeeID', 'OrderID', 'CommissionRate', 'CustomerID', 'CommissionAmount', 'TotalPrice', 'Commission', 'Quantity', 'SalesGoal'], 'Customer': ['CustomerName', 'CustomerID', 'Country', 'SegmentID', 'Continent', 'PhoneNumber', 'Email', 'CreditLimit', 'State', 'AddressID', 'EmailAddress', 'LoyaltyLevelID', 'FirstName', 'LastName', 'City', 'StateCode', 'CountryCode', 'RegistrationDate']} and \n# the user question: Retrieve the list of customers and their respective sales representatives who have made the highest number of purchases in the year 2023:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of customers and their respective sales representatives who have made the highest number of purchases in the year 2023:",
        "output": "SELECT Customer.CustomerName, Employee.FirstName, Employee.LastName, COUNT(DISTINCT SalesOrder.OrderID) as NumPurchases FROM Customer JOIN SalesOrder ON Customer.CustomerID = SalesOrder.CustomerID JOIN EmployeeSales ON SalesOrder.OrderID = EmployeeSales.OrderID JOIN Employee ON EmployeeSales.EmployeeID = Employee.EmployeeID WHERE SalesOrder.Year = 2023 GROUP BY Customer.CustomerID, EmployeeSales.EmployeeID ORDER BY NumPurchases DESC;",
        "schema": "business_strategy",
        "processed_schema_content": {
            "Employee": [
                "FirstName",
                "EmployeeID",
                "LastName",
                "JobTitle",
                "SupervisorID",
                "State",
                "Country",
                "Region",
                "EndYear",
                "StartYear",
                "Continent",
                "Title",
                "QuarterlySalesTarget",
                "EmailAddress",
                "HireDate",
                "City"
            ],
            "SalesOrder": [
                "OrderID",
                "Year",
                "CustomerID",
                "OrderDate",
                "TotalAmount",
                "TotalPrice",
                "QuarterID",
                "ExpectedDeliveryDate",
                "ShippedDate",
                "EmployeeID",
                "CountryCode",
                "ReturnID",
                "OfficeID",
                "Discount",
                "OrderNumber",
                "Status",
                "RegionID"
            ],
            "EmployeeSales": [
                "EmployeeID",
                "OrderID",
                "CommissionRate",
                "CustomerID",
                "CommissionAmount",
                "TotalPrice",
                "Commission",
                "Quantity",
                "SalesGoal"
            ],
            "Customer": [
                "CustomerName",
                "CustomerID",
                "Country",
                "SegmentID",
                "Continent",
                "PhoneNumber",
                "Email",
                "CreditLimit",
                "State",
                "AddressID",
                "EmailAddress",
                "LoyaltyLevelID",
                "FirstName",
                "LastName",
                "City",
                "StateCode",
                "CountryCode",
                "RegistrationDate"
            ]
        }
    },
    {
        "id": 311,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'plants': ['name', 'id', 'category_id', 'updated_at', 'created_at', 'description', 'min_temp', 'max_temp', 'water_requirement', 'light_requirement', 'watering_schedule', 'width', 'height', 'flowering', 'min_temp_tolerance', 'max_temp_tolerance', 'category', 'spacing_requirement', 'bloomed', 'water_usage', 'last_watered', 'sun_exposure', 'price', 'plant_date', 'harvest_date', 'bed_id', 'suitable_exposure', 'Rosemary', 'is_edible', 'species', 'plant_name', 'soil_type', 'bloom_time', 'max_height', 'flowering_season', 'plant_type', 'sunlight', 'garden_id', 'soil_ph'], 'plant_varieties': ['variety', 'id', 'Tomato', 'Roma', 'plant_id', 'updated_at', 'created_at', 'description', 'name', 'price'], 'garden_plants': ['garden_id', 'plant_id', 'variety_id', 'id', 'updated_at', 'quantity', 'created_at', 'description', 'name', 'plant_variety_id', 'planted_on', 'plant_density', 'garden_bed_id', 'last_watered'], 'task_assignments': ['updated_at', 'task_id', 'created_at', 'assigned_to', 'due_date', 'garden_id', 'completed_at', 'id', 'garden_plant_id', 'status', 'task_type', 'plant_variety_id'], 'tasks': ['name', 'id', 'updated_at', 'description', 'created_at', 'garden_id', 'due_date', 'type', 'priority']} and \n# the user question: Retrieve the names of all the plants that have a variety containing the word \"purple\" and have a task assignment with a status of \"InProgress\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all the plants that have a variety containing the word \"purple\" and have a task assignment with a status of \"InProgress\".",
        "output": "SELECT DISTINCT plants.name FROM plants JOIN garden_plants ON plants.id = garden_plants.plant_id JOIN task_assignments ON garden_plants.id = task_assignments.garden_plant_id JOIN tasks ON task_assignments.task_id = tasks.id JOIN plant_varieties ON plants.id = plant_varieties.plant_id WHERE plant_varieties.variety LIKE '%Purple%' AND task_assignments.status = 'InProgress';",
        "schema": "gardening",
        "processed_schema_content": {
            "plants": [
                "name",
                "id",
                "category_id",
                "updated_at",
                "created_at",
                "description",
                "min_temp",
                "max_temp",
                "water_requirement",
                "light_requirement",
                "watering_schedule",
                "width",
                "height",
                "flowering",
                "min_temp_tolerance",
                "max_temp_tolerance",
                "category",
                "spacing_requirement",
                "bloomed",
                "water_usage",
                "last_watered",
                "sun_exposure",
                "price",
                "plant_date",
                "harvest_date",
                "bed_id",
                "suitable_exposure",
                "Rosemary",
                "is_edible",
                "species",
                "plant_name",
                "soil_type",
                "bloom_time",
                "max_height",
                "flowering_season",
                "plant_type",
                "sunlight",
                "garden_id",
                "soil_ph"
            ],
            "plant_varieties": [
                "variety",
                "id",
                "Tomato",
                "Roma",
                "plant_id",
                "updated_at",
                "created_at",
                "description",
                "name",
                "price"
            ],
            "garden_plants": [
                "garden_id",
                "plant_id",
                "variety_id",
                "id",
                "updated_at",
                "quantity",
                "created_at",
                "description",
                "name",
                "plant_variety_id",
                "planted_on",
                "plant_density",
                "garden_bed_id",
                "last_watered"
            ],
            "task_assignments": [
                "updated_at",
                "task_id",
                "created_at",
                "assigned_to",
                "due_date",
                "garden_id",
                "completed_at",
                "id",
                "garden_plant_id",
                "status",
                "task_type",
                "plant_variety_id"
            ],
            "tasks": [
                "name",
                "id",
                "updated_at",
                "description",
                "created_at",
                "garden_id",
                "due_date",
                "type",
                "priority"
            ]
        }
    },
    {
        "id": 317,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'injuries': ['injury_type', 'athlete_id', 'injury_id', 'injury_date', 'injury_duration'], 'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'mental_skills': ['skill_id', 'skill_name', 'skill_description', 'athlete_id', 'Focus', 'Visualization', 'skill_mastered', 'skill_level', 'Excellent', 'High', 'Low']} and \n# the user question: Get the number of athletes who have a \"Medium\" level in the \"Motivation\" mental skill and have at least one injury that occurred during a practice.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the number of athletes who have a \"Medium\" level in the \"Motivation\" mental skill and have at least one injury that occurred during a practice.",
        "output": "SELECT COUNT(DISTINCT athletes.athlete_id) AS num_athletes FROM athletes INNER JOIN athlete_skills ON athletes.athlete_id = athlete_skills.athlete_id INNER JOIN mental_skills ON athlete_skills.skill_id = mental_skills.skill_id INNER JOIN injuries ON athletes.athlete_id = injuries.athlete_id WHERE mental_skills.skill_name = 'Motivation' AND athlete_skills.skill_level = 'Medium' AND injuries.injury_type = 'Practice';",
        "schema": "sports_psychology",
        "processed_schema_content": {
            "athletes": [
                "name",
                "athlete_id",
                "team_id",
                "last_name",
                "athlete_name",
                "age"
            ],
            "injuries": [
                "injury_type",
                "athlete_id",
                "injury_id",
                "injury_date",
                "injury_duration"
            ],
            "athlete_skills": [
                "skill_id",
                "athlete_id",
                "skill_level",
                "skill_mastered",
                "self_talk",
                "mental_preparation",
                "imagery",
                "goal_setting",
                "anxiety",
                "focus",
                "mental_toughness",
                "confidence",
                "motivation"
            ],
            "mental_skills": [
                "skill_id",
                "skill_name",
                "skill_description",
                "athlete_id",
                "Focus",
                "Visualization",
                "skill_mastered",
                "skill_level",
                "Excellent",
                "High",
                "Low"
            ]
        }
    },
    {
        "id": 319,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'email'], 'UserRoles': ['user_id', 'role_id', 'user_role_id'], 'Roles': ['role_name', 'role_id']} and \n# the user question: Example 1: Retrieve the usernames and email addresses of users who have the same role as the user with username 'admin'.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Example 1: Retrieve the usernames and email addresses of users who have the same role as the user with username 'admin'.",
        "output": "SELECT U.username, U.email FROM Users U INNER JOIN UserRoles UR ON U.user_id = UR.user_id INNER JOIN Roles R ON UR.role_id = R.role_id WHERE R.role_id IN ( SELECT UR2.role_id FROM Users U2 INNER JOIN UserRoles UR2 ON U2.user_id = UR2.user_id WHERE U2.username = 'admin' ) AND U.username != 'admin';",
        "schema": "information_security",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "email"
            ],
            "UserRoles": [
                "user_id",
                "role_id",
                "user_role_id"
            ],
            "Roles": [
                "role_name",
                "role_id"
            ]
        }
    },
    {
        "id": 320,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'name', 'description', 'start_date', 'end_date', 'status', 'org_id', 'min_donation', 'min_rating', 'location_id', 'funding_goal', 'total_funding_needed'], 'Volunteers': ['volunteer_id', 'user_id', 'project_id', 'start_date', 'end_date', 'date', 'hours', 'email', 'last_name', 'phone', 'first_name', 'role'], 'Events': ['event_id', 'name', 'description', 'start_date', 'end_date', 'location', 'min_age_requirement', 'project_id', 'is_free', 'date', 'location_id', 'capacity'], 'Causes': ['cause_id', 'name', 'description', 'Energy', 'Renewable', 'Clean', 'Water', 'Conservation', 'Ocean', 'Waste', 'Reduction', 'Buildings', 'Green', 'Materials', 'Sustainable', 'Climate', 'Agriculture', 'Transportation', 'Tourism', 'Building', 'Zero', 'Jobs', 'Reforestation', 'Plastic', 'Biodiversity', 'Food', 'Eco', 'Systems', 'Environmental', 'Education', 'Justice'], 'Projects_Causes': ['project_id', 'cause_id']} and \n# the user question: Retrieve the name and total number of volunteers for all projects associated with the \"Sustainable Consumption\" cause that have a status of \"completed\" and have at least one event scheduled within the next two weeks, grouped by project name and sorted by total number of volunteers in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total number of volunteers for all projects associated with the \"Sustainable Consumption\" cause that have a status of \"completed\" and have at least one event scheduled within the next two weeks, grouped by project name and sorted by total number of volunteers in descending order:",
        "output": "SELECT Projects.name, COUNT(DISTINCT Volunteers.user_id) AS total_volunteers FROM Projects INNER JOIN Projects_Causes ON Projects.project_id = Projects_Causes.project_id INNER JOIN Causes ON Projects_Causes.cause_id = Causes.cause_id AND Causes.name = 'Sustainable Consumption' INNER JOIN Events ON Projects.project_id = Events.project_id AND Events.date >= DATE('now') AND Events.date <= DATE('now', '+2 weeks') INNER JOIN Volunteers ON Projects.project_id = Volunteers.project_id WHERE Projects.status = 'completed' GROUP BY Projects.name ORDER BY total_volunteers DESC;",
        "schema": "sustainability",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "name",
                "description",
                "start_date",
                "end_date",
                "status",
                "org_id",
                "min_donation",
                "min_rating",
                "location_id",
                "funding_goal",
                "total_funding_needed"
            ],
            "Volunteers": [
                "volunteer_id",
                "user_id",
                "project_id",
                "start_date",
                "end_date",
                "date",
                "hours",
                "email",
                "last_name",
                "phone",
                "first_name",
                "role"
            ],
            "Events": [
                "event_id",
                "name",
                "description",
                "start_date",
                "end_date",
                "location",
                "min_age_requirement",
                "project_id",
                "is_free",
                "date",
                "location_id",
                "capacity"
            ],
            "Causes": [
                "cause_id",
                "name",
                "description",
                "Energy",
                "Renewable",
                "Clean",
                "Water",
                "Conservation",
                "Ocean",
                "Waste",
                "Reduction",
                "Buildings",
                "Green",
                "Materials",
                "Sustainable",
                "Climate",
                "Agriculture",
                "Transportation",
                "Tourism",
                "Building",
                "Zero",
                "Jobs",
                "Reforestation",
                "Plastic",
                "Biodiversity",
                "Food",
                "Eco",
                "Systems",
                "Environmental",
                "Education",
                "Justice"
            ],
            "Projects_Causes": [
                "project_id",
                "cause_id"
            ]
        }
    },
    {
        "id": 321,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'status', 'location', 'deadline', 'name', 'description', 'id', 'budget', 'client_id', 'completion_date'], 'Tasks': ['task_id', 'task_name', 'project_id', 'start_date', 'end_date', 'status', 'assigned_to', 'created_by', 'created_date', 'due_date', 'completed_date', 'completed_by', 'department_id', 'priority', 'duration', 'Complete', 'completion_date', 'estimated_duration', 'completed_on', 'name', 'task_type', 'id', 'completed', 'actual_duration', 'budget', 'description', 'open_date'], 'Subtasks': ['subtask_id', 'subtask_name', 'task_id', 'start_date', 'end_date', 'status', 'assigned_to', 'priority']} and \n# the user question: Example 3: Retrieve the names and total duration of projects that have tasks with no subtasks and are overdue,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Example 3: Retrieve the names and total duration of projects that have tasks with no subtasks and are overdue",
        "output": "SELECT Projects.project_name, SUM(Tasks.duration) as total_duration FROM Projects INNER JOIN Tasks ON Projects.project_id = Tasks.project_id LEFT JOIN Subtasks ON Tasks.task_id = Subtasks.task_id WHERE Subtasks.subtask_id IS NULL AND Tasks.due_date < DATE('now') AND Tasks.status != 'Complete' GROUP BY Projects.project_id;",
        "schema": "project_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "status",
                "location",
                "deadline",
                "name",
                "description",
                "id",
                "budget",
                "client_id",
                "completion_date"
            ],
            "Tasks": [
                "task_id",
                "task_name",
                "project_id",
                "start_date",
                "end_date",
                "status",
                "assigned_to",
                "created_by",
                "created_date",
                "due_date",
                "completed_date",
                "completed_by",
                "department_id",
                "priority",
                "duration",
                "Complete",
                "completion_date",
                "estimated_duration",
                "completed_on",
                "name",
                "task_type",
                "id",
                "completed",
                "actual_duration",
                "budget",
                "description",
                "open_date"
            ],
            "Subtasks": [
                "subtask_id",
                "subtask_name",
                "task_id",
                "start_date",
                "end_date",
                "status",
                "assigned_to",
                "priority"
            ]
        }
    },
    {
        "id": 322,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'catch': ['species', 'ocean', 'weight', 'category', 'fisherman', 'quantity', 'gear'], 'species': ['habitat', 'name', 'common_name', 'scientific_name', 'max_size', 'id', 'conservation_status', 'order_name', 'Lepus', 'timidus']} and \n# the user question: What is the total weight of all \"Tuna\" caught by fishermen in the \"South Atlantic Ocean\" between the years 2020 and 2023?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What is the total weight of all \"Tuna\" caught by fishermen in the \"South Atlantic Ocean\" between the years 2020 and 2023?",
        "output": "SELECT SUM(weight) FROM catch WHERE species = 'Tuna' AND ocean = 'South Atlantic Ocean' AND year BETWEEN 2020 AND 2023;",
        "schema": "marine_biology",
        "processed_schema_content": {
            "catch": [
                "species",
                "ocean",
                "weight",
                "category",
                "fisherman",
                "quantity",
                "gear"
            ],
            "species": [
                "habitat",
                "name",
                "common_name",
                "scientific_name",
                "max_size",
                "id",
                "conservation_status",
                "order_name",
                "Lepus",
                "timidus"
            ]
        }
    },
    {
        "id": 325,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Habitats': ['location', 'name', 'habitat_id', 'description', 'ph_level', 'temperature', 'water_ph', 'salinity', 'precipitation', 'pH', 'temperature_range'], 'Ecosystems': ['habitat_id', 'name', 'ecosystem_id', 'description', 'conservation_status_id', 'mean_temperature', 'pH_level', 'precipitation_level', 'temperature', 'ph_level', 'num_predator_species', 'num_prey_species', 'species_richness', 'mean_primary_producer_biomass', 'mean_herbivore_biomass', 'primary_producer_biomass', 'top_predator_biomass', 'num_organisms', 'num_top_predators', 'num_prey', 'num_predators']} and \n# the user question: Find the names of all habitats that have at least one ecosystem with a precipitation level less than 500 mm/year and at least one ecosystem with a precipitation level greater than 2000 mm/year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all habitats that have at least one ecosystem with a precipitation level less than 500 mm/year and at least one ecosystem with a precipitation level greater than 2000 mm/year.",
        "output": "SELECT Habitats.name FROM Habitats WHERE EXISTS ( SELECT 1 FROM Ecosystems WHERE Ecosystems.habitat_id = Habitats.habitat_id AND Ecosystems.precipitation_level < 500 ) AND EXISTS ( SELECT 1 FROM Ecosystems WHERE Ecosystems.habitat_id = Habitats.habitat_id AND Ecosystems.precipitation_level > 2000 );",
        "schema": "ecology",
        "processed_schema_content": {
            "Habitats": [
                "location",
                "name",
                "habitat_id",
                "description",
                "ph_level",
                "temperature",
                "water_ph",
                "salinity",
                "precipitation",
                "pH",
                "temperature_range"
            ],
            "Ecosystems": [
                "habitat_id",
                "name",
                "ecosystem_id",
                "description",
                "conservation_status_id",
                "mean_temperature",
                "pH_level",
                "precipitation_level",
                "temperature",
                "ph_level",
                "num_predator_species",
                "num_prey_species",
                "species_richness",
                "mean_primary_producer_biomass",
                "mean_herbivore_biomass",
                "primary_producer_biomass",
                "top_predator_biomass",
                "num_organisms",
                "num_top_predators",
                "num_prey",
                "num_predators"
            ]
        }
    },
    {
        "id": 326,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Sites': ['site_id', 'name', 'location', 'date_discovered', 'excavated_by', 'culture_id', 'description'], 'Excavations': ['excavation_id', 'site_id', 'start_date', 'end_date', 'description', 'excavated_by'], 'Artifacts': ['artifact_id', 'excavation_id', 'name', 'type', 'description', 'weight'], 'Cultures': ['culture_id', 'name', 'region', 'time_period']} and \n# the user question: Find the average weight of artifacts discovered at sites located in the region 'South America':,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average weight of artifacts discovered at sites located in the region 'South America':",
        "output": "SELECT AVG(Artifacts.weight) AS average_weight FROM Artifacts JOIN Excavations ON Artifacts.excavation_id = Excavations.excavation_id JOIN Sites ON Excavations.site_id = Sites.site_id JOIN Cultures ON Sites.site_id = Cultures.culture_id WHERE Cultures.region = 'South America';",
        "schema": "anthropology",
        "processed_schema_content": {
            "Sites": [
                "site_id",
                "name",
                "location",
                "date_discovered",
                "excavated_by",
                "culture_id",
                "description"
            ],
            "Excavations": [
                "excavation_id",
                "site_id",
                "start_date",
                "end_date",
                "description",
                "excavated_by"
            ],
            "Artifacts": [
                "artifact_id",
                "excavation_id",
                "name",
                "type",
                "description",
                "weight"
            ],
            "Cultures": [
                "culture_id",
                "name",
                "region",
                "time_period"
            ]
        }
    },
    {
        "id": 327,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'password', 'email', 'date_registered'], 'EnergyInvoices': ['total_amount', 'is_paid', 'due_date', 'user_id', 'end_date', 'start_date', 'contract_id', 'invoice_id']} and \n# the user question: Retrieve the usernames and total bill amounts of all users who have energy bills that are past due.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the usernames and total bill amounts of all users who have energy bills that are past due.",
        "output": "SELECT u.username, SUM(b.total_amount) AS total_due FROM Users u INNER JOIN EnergyInvoices b ON u.user_id = b.user_id WHERE b.due_date < date('now') AND b.is_paid = 0 GROUP BY u.user_id;",
        "schema": "energy",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "password",
                "email",
                "date_registered"
            ],
            "EnergyInvoices": [
                "total_amount",
                "is_paid",
                "due_date",
                "user_id",
                "end_date",
                "start_date",
                "contract_id",
                "invoice_id"
            ]
        }
    },
    {
        "id": 331,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Machines': ['machine_name', 'machine_id', 'machine_type', 'last_maintenance_date', 'manufacture_date', 'last_use', 'estimated_repair_cost', 'maintenance_status', 'machine_type_id', 'last_maintenance'], 'Maintenance': ['maintenance_date', 'machine_id', 'maintenance_description', 'cost', 'next_maintenance_date'], 'Production_Details': ['production_order_id', 'start_time', 'end_time', 'machine_id', 'shift_id', 'product_id', 'duration']} and \n# the user question: Find the machines that have not been used in production in the last 29 years and require maintenance.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the machines that have not been used in production in the last 29 years and require maintenance.",
        "output": "SELECT Machines.machine_name FROM Machines LEFT JOIN Production_Details ON Machines.machine_id = Production_Details.machine_id LEFT JOIN Maintenance ON Machines.machine_id = Maintenance.machine_id WHERE Production_Details.start_time IS NULL OR Production_Details.start_time < DATE('now', '-29 years') AND Maintenance.maintenance_date IS NULL OR Maintenance.maintenance_date < DATE('now');",
        "schema": "operations_management",
        "processed_schema_content": {
            "Machines": [
                "machine_name",
                "machine_id",
                "machine_type",
                "last_maintenance_date",
                "manufacture_date",
                "last_use",
                "estimated_repair_cost",
                "maintenance_status",
                "machine_type_id",
                "last_maintenance"
            ],
            "Maintenance": [
                "maintenance_date",
                "machine_id",
                "maintenance_description",
                "cost",
                "next_maintenance_date"
            ],
            "Production_Details": [
                "production_order_id",
                "start_time",
                "end_time",
                "machine_id",
                "shift_id",
                "product_id",
                "duration"
            ]
        }
    },
    {
        "id": 334,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Websites': ['website_id', 'user_id', 'url', 'created_at', 'updated_at', 'name', 'domain_id', 'domain_authority_score', 'domain_created_at'], 'Pages': ['page_id', 'website_id', 'url', 'title', 'description', 'content', 'created_at', 'updated_at', 'meta_description', 'meta_keywords', 'meta_title', 'h1_tag', 'h2_tag', 'title_tag', 'canonical_url', 'description_tag', 'header_tag', 'meta_tag', 'meta_keyword', 'h1', 'heading', 'header', 'word_count', 'time_on_page', 'total_words', 'http_status_code', 'user_id', 'last_modified_date', '[website_id]'], 'Page_Stats': ['page_stat_id', 'page_id', 'visits', 'bounce_rate', 'time_on_page', 'created_at', 'updated_at', 'organic_traffic', 'load_time', 'page_speed_score', 'total_images', 'total_videos', 'page_authority_score', 'domain_authority_score', 'page_load_time', 'backlinks', 'search_query', 'search_volume']} and \n# the user question: Retrieve the names and URLs of all websites that have at least one page with a time on page greater than or equal to 12000 seconds and a bounce rate less than or equal to 0.0000000000000000000000000000000000001:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and URLs of all websites that have at least one page with a time on page greater than or equal to 12000 seconds and a bounce rate less than or equal to 0.0000000000000000000000000000000000001:",
        "output": "SELECT DISTINCT Websites.name, Websites.url FROM Websites INNER JOIN Pages ON Websites.website_id = Pages.website_id INNER JOIN Page_Stats ON Pages.page_id = Page_Stats.page_id WHERE Page_Stats.time_on_page >= 12000 AND Page_Stats.bounce_rate <= 0.0000000000000000000000000000000000001;",
        "schema": "search_engine_optimization_(seo)",
        "processed_schema_content": {
            "Websites": [
                "website_id",
                "user_id",
                "url",
                "created_at",
                "updated_at",
                "name",
                "domain_id",
                "domain_authority_score",
                "domain_created_at"
            ],
            "Pages": [
                "page_id",
                "website_id",
                "url",
                "title",
                "description",
                "content",
                "created_at",
                "updated_at",
                "meta_description",
                "meta_keywords",
                "meta_title",
                "h1_tag",
                "h2_tag",
                "title_tag",
                "canonical_url",
                "description_tag",
                "header_tag",
                "meta_tag",
                "meta_keyword",
                "h1",
                "heading",
                "header",
                "word_count",
                "time_on_page",
                "total_words",
                "http_status_code",
                "user_id",
                "last_modified_date",
                "[website_id]"
            ],
            "Page_Stats": [
                "page_stat_id",
                "page_id",
                "visits",
                "bounce_rate",
                "time_on_page",
                "created_at",
                "updated_at",
                "organic_traffic",
                "load_time",
                "page_speed_score",
                "total_images",
                "total_videos",
                "page_authority_score",
                "domain_authority_score",
                "page_load_time",
                "backlinks",
                "search_query",
                "search_volume"
            ]
        }
    },
    {
        "id": 336,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Doctors': ['doctor_id', 'first_name', 'last_name', 'specialty', 'medical_degree', 'graduation_date', 'Department', 'Name', 'Address', 'Doctor_ID', 'Phone_Number'], 'Medical_Records': ['doctor_id', 'diagnosis', 'patient_id', 'date_of_visit', 'admission_id', 'medical_record_id', 'treatment_description', 'surgery_id', 'procedure_id', 'nurse_id', 'notes', 'diagnosis_id', 'discharge_date', 'attending_physician_id']} and \n# the user question: Find the doctors who have treated patients with COPD.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the doctors who have treated patients with COPD.",
        "output": "SELECT DISTINCT Doctors.doctor_id, Doctors.first_name, Doctors.last_name FROM Medical_Records INNER JOIN Doctors ON Medical_Records.doctor_id = Doctors.doctor_id WHERE Medical_Records.diagnosis LIKE '%COPD%';",
        "schema": "nursing",
        "processed_schema_content": {
            "Doctors": [
                "doctor_id",
                "first_name",
                "last_name",
                "specialty",
                "medical_degree",
                "graduation_date",
                "Department",
                "Name",
                "Address",
                "Doctor_ID",
                "Phone_Number"
            ],
            "Medical_Records": [
                "doctor_id",
                "diagnosis",
                "patient_id",
                "date_of_visit",
                "admission_id",
                "medical_record_id",
                "treatment_description",
                "surgery_id",
                "procedure_id",
                "nurse_id",
                "notes",
                "diagnosis_id",
                "discharge_date",
                "attending_physician_id"
            ]
        }
    },
    {
        "id": 337,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Sales': ['Sales', 'Product', 'Region', 'State', 'product_id', 'dataset_id', 'quantity', 'sale_date', 'Unit_price', 'Sale_date', 'salesperson_id', 'sale_id', 'customer_id', 'company_id', 'unit_price', 'sales_id', 'model_id'], 'Products': ['Product_name', 'Unit_price', 'product_id', 'category_id', 'product_name', 'unit_price', 'origin_state', 'manufacturer_id', 'brand_id', 'stock'], 'Categories': ['category_id', 'Category_name', 'category_name']} and \n# the user question: What is the total revenue generated by each category of products, for each year?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What is the total revenue generated by each category of products, for each year?",
        "output": "SELECT Categories.category_name, strftime('%Y', Sales.sale_date) AS sales_year, SUM(Sales.quantity * Sales.unit_price) AS total_revenue FROM Categories INNER JOIN Products ON Categories.category_id = Products.category_id INNER JOIN Sales ON Products.product_id = Sales.product_id GROUP BY Categories.category_name, sales_year;",
        "schema": "data_mining",
        "processed_schema_content": {
            "Sales": [
                "Sales",
                "Product",
                "Region",
                "State",
                "product_id",
                "dataset_id",
                "quantity",
                "sale_date",
                "Unit_price",
                "Sale_date",
                "salesperson_id",
                "sale_id",
                "customer_id",
                "company_id",
                "unit_price",
                "sales_id",
                "model_id"
            ],
            "Products": [
                "Product_name",
                "Unit_price",
                "product_id",
                "category_id",
                "product_name",
                "unit_price",
                "origin_state",
                "manufacturer_id",
                "brand_id",
                "stock"
            ],
            "Categories": [
                "category_id",
                "Category_name",
                "category_name"
            ]
        }
    },
    {
        "id": 338,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Documentary_Films': ['length', 'rating', 'title', 'film_id', 'release_date', 'director_id', 'runtime', 'production_company_id', 'duration', 'runtime_minutes', 'duration_minutes', 'tagline', 'release_year']} and \n# the user question: Find the total number of documentary films that have been released in the last 5 years.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total number of documentary films that have been released in the last 5 years.",
        "output": "SELECT COUNT(*) FROM Documentary_Films WHERE release_year >= strftime('%Y', 'now', '-5 year');",
        "schema": "documentary_films",
        "processed_schema_content": {
            "Documentary_Films": [
                "length",
                "rating",
                "title",
                "film_id",
                "release_date",
                "director_id",
                "runtime",
                "production_company_id",
                "duration",
                "runtime_minutes",
                "duration_minutes",
                "tagline",
                "release_year"
            ]
        }
    },
    {
        "id": 339,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Artists': ['artist_id', 'artist_name', 'country', 'birth_date'], 'Artists_Awards': ['artist_id', 'award_id', 'album_id'], 'Awards': ['award_id', 'award_name', 'release_date', 'artist_id', 'genre_id'], 'Genres': ['genre_id', 'genre_name']} and \n# the user question: \"Retrieve the names of artists who have won an award in every genre except 'Latin Jazz' and 'Bebop'.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Retrieve the names of artists who have won an award in every genre except 'Latin Jazz' and 'Bebop'.\"",
        "output": "SELECT artist_name FROM Artists WHERE artist_id IN ( SELECT artist_id FROM Artists_Awards GROUP BY artist_id HAVING COUNT(DISTINCT award_id) = ( SELECT COUNT(DISTINCT award_id) FROM Awards ) ) AND artist_id NOT IN ( SELECT artist_id FROM Artists_Awards WHERE award_id IN ( SELECT award_id FROM Awards WHERE genre_id IN ( SELECT genre_id FROM Genres WHERE genre_name IN ('Latin Jazz', 'Bebop') ) ) );",
        "schema": "jazz",
        "processed_schema_content": {
            "Artists": [
                "artist_id",
                "artist_name",
                "country",
                "birth_date"
            ],
            "Artists_Awards": [
                "artist_id",
                "award_id",
                "album_id"
            ],
            "Awards": [
                "award_id",
                "award_name",
                "release_date",
                "artist_id",
                "genre_id"
            ],
            "Genres": [
                "genre_id",
                "genre_name"
            ]
        }
    },
    {
        "id": 341,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Orders': ['customer_id', 'order_total', 'order_date', 'order_id', 'delivery_date', 'shipment_id', 'order_total_cost', 'date', 'total_price', 'total_amount', 'shipping_date'], 'Customers': ['customer_id', 'phone_number', 'email', 'customer_name', 'address', 'customer_email', 'customer_phone', 'customer_address', 'email_address', 'phone', 'registration_date', 'country', 'city', 'state', 'name', 'id', 'first_name', 'last_name'], 'Order_Items': ['order_id', 'product_id', 'glassware_item_id', 'quantity', 'unit_price', 'order_item_id', 'price', 'item_cost', 'item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the list of customers who have placed orders for more than 10 glassware items.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of customers who have placed orders for more than 10 glassware items.",
        "output": "SELECT Customers.customer_name FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id GROUP BY Customers.customer_id HAVING SUM(Order_Items.quantity) > 10;",
        "schema": "glass_etching",
        "processed_schema_content": {
            "Orders": [
                "customer_id",
                "order_total",
                "order_date",
                "order_id",
                "delivery_date",
                "shipment_id",
                "order_total_cost",
                "date",
                "total_price",
                "total_amount",
                "shipping_date"
            ],
            "Customers": [
                "customer_id",
                "phone_number",
                "email",
                "customer_name",
                "address",
                "customer_email",
                "customer_phone",
                "customer_address",
                "email_address",
                "phone",
                "registration_date",
                "country",
                "city",
                "state",
                "name",
                "id",
                "first_name",
                "last_name"
            ],
            "Order_Items": [
                "order_id",
                "product_id",
                "glassware_item_id",
                "quantity",
                "unit_price",
                "order_item_id",
                "price",
                "item_cost",
                "item_id",
                "order_date",
                "item_price"
            ]
        }
    },
    {
        "id": 342,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Film': ['director', 'release_year', 'film_id', 'title', 'box_office', 'language_id', 'runtime', 'budget', 'genre', 'based_on_true_story', 'film_title', 'film_gross', 'film_release_date', 'film_length', 'film_imdb_rating', 'film_director', 'film_runtime_minutes', 'film_release_year', 'film_worldwide_gross', 'film_budget', 'production_company_id', 'film_box_office_gross', 'film_user_rating', 'film_runtime', 'film_director_gender', 'film_box_office_rank', 'genre_id', 'film_duration', 'film_box_office_collection', 'film_running_time', 'film_country', 'film_rating', 'film_revenue', 'film_box_office', 'film_language', 'film_name', 'studio_id', 'film_production_budget'], 'Award': ['award_id', 'award_name', 'award_type', 'award_organization', 'film_id'], 'Film_Award': ['award_id', 'film_id'], 'Film_Country': ['country_id', 'film_id', 'country_setting'], 'Country': ['country_id', 'country_name', 'country_rank']} and \n# the user question: Find all war films that feature a runtime of under 90 minutes and were released in Germany and won at least one Academy Award:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all war films that feature a runtime of under 90 minutes and were released in Germany and won at least one Academy Award:",
        "output": "SELECT Film.title, Film.release_year, Film.runtime, Award.award_name FROM Film INNER JOIN Film_Country ON Film.film_id = Film_Country.film_id INNER JOIN Country ON Film_Country.country_id = Country.country_id INNER JOIN Film_Award ON Film.film_id = Film_Award.film_id INNER JOIN Award ON Film_Award.award_id = Award.award_id WHERE Country.country_name = 'Germany' AND Film.runtime < 90 AND Award.award_name LIKE '%Academy Award%';",
        "schema": "war_films",
        "processed_schema_content": {
            "Film": [
                "director",
                "release_year",
                "film_id",
                "title",
                "box_office",
                "language_id",
                "runtime",
                "budget",
                "genre",
                "based_on_true_story",
                "film_title",
                "film_gross",
                "film_release_date",
                "film_length",
                "film_imdb_rating",
                "film_director",
                "film_runtime_minutes",
                "film_release_year",
                "film_worldwide_gross",
                "film_budget",
                "production_company_id",
                "film_box_office_gross",
                "film_user_rating",
                "film_runtime",
                "film_director_gender",
                "film_box_office_rank",
                "genre_id",
                "film_duration",
                "film_box_office_collection",
                "film_running_time",
                "film_country",
                "film_rating",
                "film_revenue",
                "film_box_office",
                "film_language",
                "film_name",
                "studio_id",
                "film_production_budget"
            ],
            "Award": [
                "award_id",
                "award_name",
                "award_type",
                "award_organization",
                "film_id"
            ],
            "Film_Award": [
                "award_id",
                "film_id"
            ],
            "Film_Country": [
                "country_id",
                "film_id",
                "country_setting"
            ],
            "Country": [
                "country_id",
                "country_name",
                "country_rank"
            ]
        }
    },
    {
        "id": 344,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Materials': ['material_id', 'material_name', 'cost_per_unit', 'unit_of_measurement', 'unit_quantity', 'unit_cost', 'quantity', 'unit_price', 'material_type_id', 'quantity_in_stock', 'material_unit', 'quantity_available', 'reorder_level', 'stock_level'], 'Suppliers': ['supplier_id', 'supplier_name', 'supplier_state'], 'Material_Suppliers': ['material_id', 'supplier_id', 'supply_price']} and \n# the user question: List all the suppliers who have provided a material with a unit price higher than $100.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List all the suppliers who have provided a material with a unit price higher than $100.",
        "output": "SELECT DISTINCT s.supplier_name FROM Suppliers s INNER JOIN Material_Suppliers ms ON s.supplier_id = ms.supplier_id INNER JOIN Materials m ON ms.material_id = m.material_id WHERE m.unit_price > 100;",
        "schema": "civil_engineering",
        "processed_schema_content": {
            "Materials": [
                "material_id",
                "material_name",
                "cost_per_unit",
                "unit_of_measurement",
                "unit_quantity",
                "unit_cost",
                "quantity",
                "unit_price",
                "material_type_id",
                "quantity_in_stock",
                "material_unit",
                "quantity_available",
                "reorder_level",
                "stock_level"
            ],
            "Suppliers": [
                "supplier_id",
                "supplier_name",
                "supplier_state"
            ],
            "Material_Suppliers": [
                "material_id",
                "supplier_id",
                "supply_price"
            ]
        }
    },
    {
        "id": 346,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Companies': ['industry', 'company_name', 'revenue', 'company_id', 'employee_count'], 'Opportunities': ['closing_date', 'opportunity_id', 'company_id', 'stage', 'name', 'value', 'Negotiation', 'Closed', 'Won', 'Prospect', 'Qualified']} and \n# the user question: Retrieve the names of companies and their corresponding opportunities where the closing date is within the next 7 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of companies and their corresponding opportunities where the closing date is within the next 7 days.",
        "output": "SELECT c.company_name, o.name FROM Companies c INNER JOIN Opportunities o ON c.company_id = o.company_id WHERE o.closing_date <= DATE('now', '+7 days');",
        "schema": "business_development",
        "processed_schema_content": {
            "Companies": [
                "industry",
                "company_name",
                "revenue",
                "company_id",
                "employee_count"
            ],
            "Opportunities": [
                "closing_date",
                "opportunity_id",
                "company_id",
                "stage",
                "name",
                "value",
                "Negotiation",
                "Closed",
                "Won",
                "Prospect",
                "Qualified"
            ]
        }
    },
    {
        "id": 349,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'category_id', 'price', 'units_in_stock', 'price_per_unit', 'discount', 'country_of_origin', 'rating', 'discontinued', 'is_discontinued', 'unit_price', 'last_restock_date', 'quantity_in_stock', 'supplier_id', 'discontinued_date', 'unit_cost', 'brand_id', 'stock', 'stock_quantity', 'brand_name', 'cost', 'Ingredients', 'Category', 'Price', 'ProductID'], 'Order_Details': ['order_id', 'product_id', 'price_per_unit', 'quantity', 'user_id', 'total_price', 'order_detail_id', 'unit_price']} and \n# the user question: Find the products that have been ordered more than 10 times in total.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the products that have been ordered more than 10 times in total.",
        "output": "SELECT DISTINCT p.product_name FROM Products p JOIN Order_Details od ON p.product_id = od.product_id GROUP BY p.product_id HAVING COUNT(DISTINCT od.order_id) > 10;",
        "schema": "cosmetics_making",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "category_id",
                "price",
                "units_in_stock",
                "price_per_unit",
                "discount",
                "country_of_origin",
                "rating",
                "discontinued",
                "is_discontinued",
                "unit_price",
                "last_restock_date",
                "quantity_in_stock",
                "supplier_id",
                "discontinued_date",
                "unit_cost",
                "brand_id",
                "stock",
                "stock_quantity",
                "brand_name",
                "cost",
                "Ingredients",
                "Category",
                "Price",
                "ProductID"
            ],
            "Order_Details": [
                "order_id",
                "product_id",
                "price_per_unit",
                "quantity",
                "user_id",
                "total_price",
                "order_detail_id",
                "unit_price"
            ]
        }
    },
    {
        "id": 0,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Posts': ['post_id', 'title', 'category_id', 'name'], 'Categories': ['name', 'category_id'], 'Reviews': ['product_id', 'rating', 'review_id', 'post_id', 'user_id']} and \n# the user question: Find the categories with the highest average rating across all posts.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the categories with the highest average rating across all posts.",
        "output": "SELECT Categories.name, AVG(Reviews.rating) AS average_rating FROM Categories INNER JOIN Posts ON Categories.category_id = Posts.category_id INNER JOIN Reviews ON Posts.post_id = Reviews.post_id GROUP BY Categories.category_id ORDER BY average_rating DESC LIMIT 1;",
        "schema": "web_development",
        "processed_schema_content": {
            "Posts": [
                "post_id",
                "title",
                "category_id",
                "name"
            ],
            "Categories": [
                "name",
                "category_id"
            ],
            "Reviews": [
                "product_id",
                "rating",
                "review_id",
                "post_id",
                "user_id"
            ]
        }
    },
    {
        "id": 2,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['name', 'product_id', 'price', 'manufacturer_id', 'release_date', 'category_id', 'avg_price', 'stock_quantity'], 'Categories': ['category_id', 'name']} and \n# the user question: Retrieve the names of the categories along with the count of products in each category:    \"Get the names of the categories along with the count of products in each category.\"   :,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of the categories along with the count of products in each category:    \"Get the names of the categories along with the count of products in each category.\"   :",
        "output": "SELECT c.name AS category, COUNT(p.product_id) AS product_count FROM Categories c LEFT JOIN Products p ON c.category_id = p.category_id GROUP BY c.name;",
        "schema": "computer_hardware",
        "processed_schema_content": {
            "Products": [
                "name",
                "product_id",
                "price",
                "manufacturer_id",
                "release_date",
                "category_id",
                "avg_price",
                "stock_quantity"
            ],
            "Categories": [
                "category_id",
                "name"
            ]
        }
    },
    {
        "id": 3,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'users': ['username', 'user_id'], 'students': ['student_id', 'user_id', 'city_id'], 'class_students': ['student_id', 'class_id', 'payment_amount', 'training_session_id'], 'classes': ['class_id', 'day', 'instructor_id', 'name', 'location', 'date', 'start_time', 'student_id', 'location_id'], 'rankings': ['student_id', 'rank', 'date_earned', 'rank_name']} and \n# the user question: Find the names of all students who have earned a ranking of \"Advanced\" and have attended at least one class at the \"Community Center\" location:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all students who have earned a ranking of \"Advanced\" and have attended at least one class at the \"Community Center\" location:",
        "output": "SELECT DISTINCT users.username FROM users INNER JOIN students ON users.user_id = students.user_id INNER JOIN rankings ON students.student_id = rankings.student_id AND rankings.rank_name = 'Advanced' INNER JOIN class_students ON students.student_id = class_students.student_id INNER JOIN classes ON class_students.class_id = classes.class_id AND classes.location = 'Community Center';",
        "schema": "tai_chi",
        "processed_schema_content": {
            "users": [
                "username",
                "user_id"
            ],
            "students": [
                "student_id",
                "user_id",
                "city_id"
            ],
            "class_students": [
                "student_id",
                "class_id",
                "payment_amount",
                "training_session_id"
            ],
            "classes": [
                "class_id",
                "day",
                "instructor_id",
                "name",
                "location",
                "date",
                "start_time",
                "student_id",
                "location_id"
            ],
            "rankings": [
                "student_id",
                "rank",
                "date_earned",
                "rank_name"
            ]
        }
    },
    {
        "id": 5,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Show': ['show_name', 'host_id', 'air_date', 'show_id', 'Gourmet', 'Getaway', 'contestant_count'], 'Host': ['host_name', 'host_id']} and \n# the user question: \"Retrieve the shows that aired between January 1, 2023, and March 31, 2023, along with their respective hosts.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Retrieve the shows that aired between January 1, 2023, and March 31, 2023, along with their respective hosts.\"",
        "output": "SELECT s.show_name, h.host_name FROM Show s JOIN Host h ON s.host_id = h.host_id WHERE s.air_date >= '2023-01-01' AND s.air_date <= '2023-03-31';",
        "schema": "cooking_shows",
        "processed_schema_content": {
            "Show": [
                "show_name",
                "host_id",
                "air_date",
                "show_id",
                "Gourmet",
                "Getaway",
                "contestant_count"
            ],
            "Host": [
                "host_name",
                "host_id"
            ]
        }
    },
    {
        "id": 7,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Tracks': ['track_id', 'track_title', 'duration', 'album_id', 'track_name', 'genre_id', 'rating', 'artist_id', 'release_id'], 'UserFavorites': ['track_id', 'user_id', 'genre_id', 'favorite_date']} and \n# the user question: Find the tracks that have been favorited by more than three users:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the tracks that have been favorited by more than three users:",
        "output": "SELECT Tracks.track_title FROM Tracks JOIN UserFavorites ON Tracks.track_id = UserFavorites.track_id GROUP BY Tracks.track_id HAVING COUNT(DISTINCT UserFavorites.user_id) > 3;",
        "schema": "electronic_music",
        "processed_schema_content": {
            "Tracks": [
                "track_id",
                "track_title",
                "duration",
                "album_id",
                "track_name",
                "genre_id",
                "rating",
                "artist_id",
                "release_id"
            ],
            "UserFavorites": [
                "track_id",
                "user_id",
                "genre_id",
                "favorite_date"
            ]
        }
    },
    {
        "id": 8,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Incidents': ['reported_by_user_id', 'location_id', 'created_at', 'incident_id', 'evacuation_status', 'severity_level', 'vehicle_id', 'status', 'reported_time', 'location', 'type', 'start_time', 'assigned_to_vehicle_id', 'incident_date', 'incident_type', 'category_id', 'reporting_agency_id', 'reported_at', 'date_id', 'description', 'date', 'time'], 'Users': ['user_id', 'email', 'username', 'phone_number', 'email_address', 'creation_date', 'current_city_id', 'current_state_id', 'state_id'], 'Locations': ['longitude', 'location_id', 'latitude', 'location_name', 'address', 'city', 'city_id', 'location', 'state_id'], 'Sensor_Readings': ['reading_value', 'sensor_id', 'sensor_type', 'reading', 'sensor'], 'Sensors': ['sensor_type', 'location_id', 'sensor_id', 'reading_value', 'Humidity', 'threshold_valu', 'Air', 'Quality', 'threshold_value', 'min_threshold_value', 'max_threshold_value', 'sensor_name']} and \n# the user question: Retrieve the names and email addresses of all users who have reported an incident in a location where the air quality sensor reading value was below the sensor's threshold value and the carbon monoxide sensor reading value was above the sensor's threshold value.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all users who have reported an incident in a location where the air quality sensor reading value was below the sensor's threshold value and the carbon monoxide sensor reading value was above the sensor's threshold value.",
        "output": "SELECT Users.username, Users.email FROM Users INNER JOIN Incidents ON Users.user_id = Incidents.reported_by_user_id INNER JOIN Locations ON Incidents.location_id = Locations.location_id INNER JOIN Sensors ON Locations.location_id = Sensors.location_id INNER JOIN Sensor_Readings AS AQ ON Sensors.sensor_id = AQ.sensor_id AND AQ.sensor_type = 'Air Quality' INNER JOIN Sensor_Readings AS CO ON Sensors.sensor_id = CO.sensor_id AND CO.sensor_type = 'Carbon Monoxide' WHERE AQ.reading_value < Sensors.threshold_value AND CO.reading_value > Sensors.threshold_value GROUP BY Users.username, Users.email",
        "schema": "intelligent_public_safety",
        "processed_schema_content": {
            "Incidents": [
                "reported_by_user_id",
                "location_id",
                "created_at",
                "incident_id",
                "evacuation_status",
                "severity_level",
                "vehicle_id",
                "status",
                "reported_time",
                "location",
                "type",
                "start_time",
                "assigned_to_vehicle_id",
                "incident_date",
                "incident_type",
                "category_id",
                "reporting_agency_id",
                "reported_at",
                "date_id",
                "description",
                "date",
                "time"
            ],
            "Users": [
                "user_id",
                "email",
                "username",
                "phone_number",
                "email_address",
                "creation_date",
                "current_city_id",
                "current_state_id",
                "state_id"
            ],
            "Locations": [
                "longitude",
                "location_id",
                "latitude",
                "location_name",
                "address",
                "city",
                "city_id",
                "location",
                "state_id"
            ],
            "Sensor_Readings": [
                "reading_value",
                "sensor_id",
                "sensor_type",
                "reading",
                "sensor"
            ],
            "Sensors": [
                "sensor_type",
                "location_id",
                "sensor_id",
                "reading_value",
                "Humidity",
                "threshold_valu",
                "Air",
                "Quality",
                "threshold_value",
                "min_threshold_value",
                "max_threshold_value",
                "sensor_name"
            ]
        }
    },
    {
        "id": 9,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Employees': ['first_name', 'employee_id', 'last_name', 'email', 'hire_date', 'phone_number', 'manager_id', 'supervisor_id', 'job_title'], 'Sale_Items': ['product_id', 'sale_id', 'quantity', 'sale_item_id', 'customer_id', 'unit_price', 'discount_code', 'sale_date', 'price'], 'Sales': ['employee_id', 'sale_id', 'sale_date', 'customer_id', 'total', 'total_amount', 'payment_method', 'total_price', 'total_spent', 'location_id', 'coupon_code', 'start_date', 'discount_percentage', 'end_date', 'product_id']} and \n# the user question: Retrieve the names and total revenue for all employees who made sales of at least $2000 in the month of November 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and total revenue for all employees who made sales of at least $2000 in the month of November 2022.",
        "output": "SELECT Employees.first_name, Employees.last_name, SUM(Sale_Items.quantity * Products.price) AS total_revenue FROM Employees INNER JOIN Sales ON Employees.employee_id = Sales.employee_id INNER JOIN Sale_Items ON Sales.sale_id = Sale_Items.sale_id INNER JOIN Products ON Sale_Items.product_id = Products.product_id WHERE Sales.sale_date BETWEEN '2022-11-01' AND '2022-11-30' GROUP BY Employees.employee_id HAVING total_revenue >= 2000;",
        "schema": "pharmacy",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "price",
                "description",
                "product_description",
                "supplier_id",
                "category_id",
                "units_in_stock",
                "expiration_date",
                "stock_quantity",
                "expiration_id",
                "discontinued",
                "cost_price",
                "quantity_in_stock",
                "unit_price",
                "unit_cost",
                "brand_name",
                "last_supplied_date",
                "manufacturer_name",
                "backorder"
            ],
            "Employees": [
                "first_name",
                "employee_id",
                "last_name",
                "email",
                "hire_date",
                "phone_number",
                "manager_id",
                "supervisor_id",
                "job_title"
            ],
            "Sale_Items": [
                "product_id",
                "sale_id",
                "quantity",
                "sale_item_id",
                "customer_id",
                "unit_price",
                "discount_code",
                "sale_date",
                "price"
            ],
            "Sales": [
                "employee_id",
                "sale_id",
                "sale_date",
                "customer_id",
                "total",
                "total_amount",
                "payment_method",
                "total_price",
                "total_spent",
                "location_id",
                "coupon_code",
                "start_date",
                "discount_percentage",
                "end_date",
                "product_id"
            ]
        }
    },
    {
        "id": 10,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'appointments': ['patient_id', 'practitioner_id', 'appointment_date', 'appointment_id', 'duration_minutes', 'treatment_type', 'condition', 'treatment', 'duration', 'date'], 'appointment_treatments': ['treatment_id', 'appointment_id', 'patient_id'], 'practitioners': ['practitioner_id', 'first_name', 'last_name', 'acupuncturist', 'title', 'prescription_id', 'patient_id'], 'payments': ['payment_amount', 'payment_date', 'appointment_id', 'payment_id'], 'medical_history': ['patient_id', 'medical_condition', 'diagnosis'], 'treatments': ['treatment_name', 'treatment_id', 'price', 'patient_id', 'practitioner_id', 'appointment_id']} and \n# the user question: Retrieve the names of practitioners who have treated patients for more than one medical condition and have not had any appointments in the past 2 months:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of practitioners who have treated patients for more than one medical condition and have not had any appointments in the past 2 months:",
        "output": "SELECT DISTINCT pr.first_name, pr.last_name FROM practitioners pr JOIN appointments a ON pr.practitioner_id = a.practitioner_id JOIN appointment_treatments at ON a.appointment_id = at.appointment_id JOIN treatments t ON at.treatment_id = t.treatment_id JOIN medical_history mh ON a.patient_id = mh.patient_id LEFT JOIN payments p ON a.appointment_id = p.appointment_id WHERE mh.medical_condition IS NOT NULL AND (p.payment_id IS NULL OR p.payment_date < DATE('now', '-2 month')) GROUP BY pr.practitioner_id HAVING COUNT(DISTINCT mh.medical_condition) > 1;",
        "schema": "acupuncture",
        "processed_schema_content": {
            "appointments": [
                "patient_id",
                "practitioner_id",
                "appointment_date",
                "appointment_id",
                "duration_minutes",
                "treatment_type",
                "condition",
                "treatment",
                "duration",
                "date"
            ],
            "appointment_treatments": [
                "treatment_id",
                "appointment_id",
                "patient_id"
            ],
            "practitioners": [
                "practitioner_id",
                "first_name",
                "last_name",
                "acupuncturist",
                "title",
                "prescription_id",
                "patient_id"
            ],
            "payments": [
                "payment_amount",
                "payment_date",
                "appointment_id",
                "payment_id"
            ],
            "medical_history": [
                "patient_id",
                "medical_condition",
                "diagnosis"
            ],
            "treatments": [
                "treatment_name",
                "treatment_id",
                "price",
                "patient_id",
                "practitioner_id",
                "appointment_id"
            ]
        }
    },
    {
        "id": 12,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Therapist_Specialties': ['therapist_id', 'specialty', 'specialty_id'], 'Billing': ['session_id', 'date', 'amount', 'id', 'start_time', 'end_time'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id']} and \n# the user question: Retrieve the names and total amount billed for all clients who have attended sessions with a therapist who has a specialty in Mindfulness-Based Stress Reduction:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and total amount billed for all clients who have attended sessions with a therapist who has a specialty in Mindfulness-Based Stress Reduction:",
        "output": "SELECT c.name, SUM(b.amount) AS total_billed FROM Clients c INNER JOIN Session_Attendees sa ON c.id = sa.client_id INNER JOIN Sessions s ON sa.session_id = s.id INNER JOIN Therapists t ON s.therapist_id = t.id INNER JOIN Therapist_Specialties ts ON t.id = ts.therapist_id INNER JOIN Billing b ON s.id = b.session_id WHERE ts.specialty = 'Mindfulness-Based Stress Reduction' GROUP BY c.id",
        "schema": "counseling",
        "processed_schema_content": {
            "Clients": [
                "email",
                "phone_number",
                "id",
                "name",
                "date_of_birth",
                "gender",
                "referral_source_id",
                "primary_care_physician_id",
                "substance_abuse_history",
                "depression_history",
                "trauma_history",
                "ptsd_diagnosis",
                "addiction_history",
                "personality_disorder_history",
                "eating_disorder_history",
                "bipolar_history",
                "schizophrenia_history",
                "self_harm_history",
                "anxiety_history",
                "eating_disorders_history",
                "alcoholism_history",
                "gambling_addiction_history",
                "smoking_addiction_history",
                "alcohol_addiction_history",
                "drug_addiction_history",
                "sex_addiction_history",
                "ptsd_history",
                "ocd_history",
                "suicidal_ideation_history",
                "age",
                "phone",
                "balance_owing",
                "contact_number"
            ],
            "Sessions": [
                "therapist_id",
                "client_id",
                "id",
                "date",
                "location",
                "name",
                "duration",
                "therapy_type_id",
                "cost",
                "start_time",
                "session_type",
                "rate",
                "",
                "SessionNotes",
                "SessionID",
                "SessionDate",
                "CounselorID"
            ],
            "Therapists": [
                "id",
                "name",
                "gender",
                "email",
                "phone",
                "license_state",
                "experience_years",
                "last_name",
                "is_active",
                "is_licensed",
                "rate_per_hour"
            ],
            "Therapist_Specialties": [
                "therapist_id",
                "specialty",
                "specialty_id"
            ],
            "Billing": [
                "session_id",
                "date",
                "amount",
                "id",
                "start_time",
                "end_time"
            ],
            "Session_Attendees": [
                "session_id",
                "client_id",
                "attendee_type",
                "attended",
                "id"
            ]
        }
    },
    {
        "id": 13,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Goal': ['goal_id', 'due_date', 'is_completed', 'client_id', 'description', 'coach_id', 'status', 'package_id', 'category', 'target_completion_date', 'completion_date', 'is_cancelled', 'name', 'cancelled', 'completed', 'started', 'progress', 'start_date'], 'Client': ['name', 'email', 'coach_id', 'package_id', 'client_id', 'address', 'birthdate', 'occupation', 'phone', 'preferred_coach', 'last_activity_time'], 'GoalTag': ['goal_id', 'tag', 'tag_id']} and \n# the user question: Retrieve the names and email addresses of all clients who have at least one completed goal with the tag 'Fitness', and where the goal due date was in the past 6 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all clients who have at least one completed goal with the tag 'Fitness', and where the goal due date was in the past 6 months.",
        "output": "SELECT DISTINCT Client.name, Client.email FROM Client INNER JOIN Goal ON Client.client_id = Goal.client_id INNER JOIN GoalTag ON Goal.goal_id = GoalTag.goal_id WHERE Goal.is_completed = 1 AND GoalTag.tag = 'Fitness' AND Goal.due_date BETWEEN date('now', '-6 months') AND date('now');",
        "schema": "coaching",
        "processed_schema_content": {
            "Goal": [
                "goal_id",
                "due_date",
                "is_completed",
                "client_id",
                "description",
                "coach_id",
                "status",
                "package_id",
                "category",
                "target_completion_date",
                "completion_date",
                "is_cancelled",
                "name",
                "cancelled",
                "completed",
                "started",
                "progress",
                "start_date"
            ],
            "Client": [
                "name",
                "email",
                "coach_id",
                "package_id",
                "client_id",
                "address",
                "birthdate",
                "occupation",
                "phone",
                "preferred_coach",
                "last_activity_time"
            ],
            "GoalTag": [
                "goal_id",
                "tag",
                "tag_id"
            ]
        }
    },
    {
        "id": 15,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date']} and \n# the user question: Find the total revenue generated from each customer for the year 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total revenue generated from each customer for the year 2022.",
        "output": "SELECT c.Customer_Name, SUM(oi.Quantity * oi.Price) as Total_Revenue FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID AND o.Order_Date BETWEEN '2022-01-01' AND '2022-12-31' INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID GROUP BY c.Customer_ID;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ]
        }
    },
    {
        "id": 16,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'john123', 'username', 'email'], 'Projects': ['status', 'end_date', 'start_date', 'project_name', 'contractor_id', 'project_id', 'user_id', 'category_id'], 'Project_Services': ['service_id', 'project_id', 'contractor_id', 'status', 'price', 'service_count', 'rating', 'avg_rating']} and \n# the user question: \"Retrieve the project names and the corresponding users for projects that have at least one completed service and no pending services.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Retrieve the project names and the corresponding users for projects that have at least one completed service and no pending services.\"",
        "output": "SELECT P.project_name, U.username FROM Projects P JOIN Users U ON P.user_id = U.user_id WHERE P.project_id IN ( SELECT project_id FROM Project_Services GROUP BY project_id HAVING COUNT(CASE WHEN status = 'Completed' THEN 1 END) > 0 AND COUNT(CASE WHEN status = 'Pending' THEN 1 END) = 0 );",
        "schema": "home_improvement",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "john123",
                "username",
                "email"
            ],
            "Projects": [
                "status",
                "end_date",
                "start_date",
                "project_name",
                "contractor_id",
                "project_id",
                "user_id",
                "category_id"
            ],
            "Project_Services": [
                "service_id",
                "project_id",
                "contractor_id",
                "status",
                "price",
                "service_count",
                "rating",
                "avg_rating"
            ]
        }
    },
    {
        "id": 17,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Clients': ['Client_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'City', 'Email_Address', 'Phone_Number', 'State', 'ClientName', 'ClientID', 'Name', 'ID', 'Status', 'Balance', 'pending_case', 'legal_fees'], 'Cases': ['Case_ID', 'Case_Name', 'Case_Description', 'Client_ID', 'Case_Status', 'Lawyer_ID', 'Last_Updated', 'Date_Opened', 'Date_Closed', 'Status', 'Case_Closed_Date', 'Practice_Area_ID', 'Case_Manager_ID', 'Open_Date', 'Closed', 'Case_End_Date', 'Case_Start_Date', 'Firm_ID', 'Office_ID', 'CaseStatus', 'CaseNumber', 'ClientID', 'CaseTitle', 'CaseTypeID', 'CaseType', 'CourtName', 'ClosedDate', 'Settlement', 'ID', 'HearingDate', 'ClosingDate', 'AppealStatus', 'LawyerID', 'OpeningDate', 'verdict', 'judge_id', 'defendant_state', 'plaintiff_state', 'lawyer_id'], 'Time_Entries': ['Time_Entry_ID', 'Lawyer_ID', 'Case_ID', 'Date', 'Hours', 'Description', 'Task_ID', 'Billed', 'Time_Entry_Date', 'Invoice_ID', 'Billable', 'Hours_Worked', 'Entry_Date'], 'Invoices': ['Invoice_ID', 'Client_ID', 'Date', 'Amount', 'Case_ID', 'Paid_Date', 'Due_Date', 'Invoice_Date', 'Time_Entry_ID', 'Paid', 'Billed', 'Task_ID', 'Issue_Date', 'Total_Amount', 'Invoice_Number', 'Amount_Billed', 'Invoice_Status', 'Billing_Date', 'Billing_Rate_ID', 'Hours_Billed', 'Amount_Paid', 'Amount_Due', 'Bill_Date', 'ClientID', 'Status', 'Unpaid', 'IssueDate'], 'Tasks': ['Task_ID', 'Task_Name', 'Task_Description', 'Task_Status', 'Case_ID', 'Due_Date', 'Lawyer_ID', 'Status', 'Completion_Date', 'Practice_Area_ID', 'Paralegal_ID', 'Last_Activity_Date', 'Budgeted_Hours', 'Budget', 'Task_Deadline', 'Hourly_Rate', 'Task_Date', 'Hours_Worked', 'Task_Due_Date', 'Hours_Billed', 'Hours']} and \n# the user question: List all the invoices that have been paid, along with the corresponding matter and client:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List all the invoices that have been paid, along with the corresponding matter and client:",
        "output": "SELECT Invoices.Invoice_ID, Clients.First_Name, Clients.Last_Name, Cases.Case_Name FROM Invoices JOIN Time_Entries ON Invoices.Time_Entry_ID = Time_Entries.Time_Entry_ID JOIN Tasks ON Time_Entries.Task_ID = Tasks.Task_ID JOIN Cases ON Tasks.Case_ID = Cases.Case_ID JOIN Clients ON Cases.Client_ID = Clients.Client_ID WHERE Invoices.Paid = 1;",
        "schema": "law",
        "processed_schema_content": {
            "Clients": [
                "Client_ID",
                "First_Name",
                "Last_Name",
                "Email",
                "Phone",
                "Address",
                "City",
                "Email_Address",
                "Phone_Number",
                "State",
                "ClientName",
                "ClientID",
                "Name",
                "ID",
                "Status",
                "Balance",
                "pending_case",
                "legal_fees"
            ],
            "Cases": [
                "Case_ID",
                "Case_Name",
                "Case_Description",
                "Client_ID",
                "Case_Status",
                "Lawyer_ID",
                "Last_Updated",
                "Date_Opened",
                "Date_Closed",
                "Status",
                "Case_Closed_Date",
                "Practice_Area_ID",
                "Case_Manager_ID",
                "Open_Date",
                "Closed",
                "Case_End_Date",
                "Case_Start_Date",
                "Firm_ID",
                "Office_ID",
                "CaseStatus",
                "CaseNumber",
                "ClientID",
                "CaseTitle",
                "CaseTypeID",
                "CaseType",
                "CourtName",
                "ClosedDate",
                "Settlement",
                "ID",
                "HearingDate",
                "ClosingDate",
                "AppealStatus",
                "LawyerID",
                "OpeningDate",
                "verdict",
                "judge_id",
                "defendant_state",
                "plaintiff_state",
                "lawyer_id"
            ],
            "Time_Entries": [
                "Time_Entry_ID",
                "Lawyer_ID",
                "Case_ID",
                "Date",
                "Hours",
                "Description",
                "Task_ID",
                "Billed",
                "Time_Entry_Date",
                "Invoice_ID",
                "Billable",
                "Hours_Worked",
                "Entry_Date"
            ],
            "Invoices": [
                "Invoice_ID",
                "Client_ID",
                "Date",
                "Amount",
                "Case_ID",
                "Paid_Date",
                "Due_Date",
                "Invoice_Date",
                "Time_Entry_ID",
                "Paid",
                "Billed",
                "Task_ID",
                "Issue_Date",
                "Total_Amount",
                "Invoice_Number",
                "Amount_Billed",
                "Invoice_Status",
                "Billing_Date",
                "Billing_Rate_ID",
                "Hours_Billed",
                "Amount_Paid",
                "Amount_Due",
                "Bill_Date",
                "ClientID",
                "Status",
                "Unpaid",
                "IssueDate"
            ],
            "Tasks": [
                "Task_ID",
                "Task_Name",
                "Task_Description",
                "Task_Status",
                "Case_ID",
                "Due_Date",
                "Lawyer_ID",
                "Status",
                "Completion_Date",
                "Practice_Area_ID",
                "Paralegal_ID",
                "Last_Activity_Date",
                "Budgeted_Hours",
                "Budget",
                "Task_Deadline",
                "Hourly_Rate",
                "Task_Date",
                "Hours_Worked",
                "Task_Due_Date",
                "Hours_Billed",
                "Hours"
            ]
        }
    },
    {
        "id": 18,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'coaches': ['name', 'coach_id', 'coach_name', 'email'], 'teams': ['team_id', 'coach_id', 'sport_id', 'team_name', 'team_medal', 'championship_id'], 'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'mental_skills': ['skill_id', 'skill_name', 'skill_description', 'athlete_id', 'Focus', 'Visualization', 'skill_mastered', 'skill_level', 'Excellent', 'High', 'Low'], 'goals': ['goal_id', 'goal_name', 'goal_rating', 'skill_id'], 'athlete_goals': ['goal_id', 'athlete_id', 'goal_achieved', 'goal_date', 'date_achieved']} and \n# the user question: Get the list of all coaches who have at least one athlete with a \"High\" level in the \"Visualization\" mental skill and have achieved a goal related to \"Power\" that is either \"Excellent\" or \"Outstanding\", along with the number of athletes with that mental skill level and goal, sorted by the number of athletes in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the list of all coaches who have at least one athlete with a \"High\" level in the \"Visualization\" mental skill and have achieved a goal related to \"Power\" that is either \"Excellent\" or \"Outstanding\", along with the number of athletes with that mental skill level and goal, sorted by the number of athletes in descending order.",
        "output": "SELECT coaches.name, COUNT(DISTINCT athletes.athlete_id) AS num_athletes FROM coaches INNER JOIN teams ON coaches.coach_id = teams.coach_id INNER JOIN athletes ON teams.team_id = athletes.team_id INNER JOIN athlete_goals ON athletes.athlete_id = athlete_goals.athlete_id INNER JOIN goals ON athlete_goals.goal_id = goals.goal_id INNER JOIN athlete_skills ON athletes.athlete_id = athlete_skills.athlete_id INNER JOIN mental_skills ON athlete_skills.skill_id = mental_skills.skill_id WHERE mental_skills.skill_name = 'Visualization' AND athlete_skills.skill_level = 'High' AND goals.goal_name = 'Power' AND goals.goal_rating IN ('Excellent', 'Outstanding') AND athlete_goals.goal_achieved = 1 GROUP BY coaches.name ORDER BY num_athletes DESC;",
        "schema": "sports_psychology",
        "processed_schema_content": {
            "athletes": [
                "name",
                "athlete_id",
                "team_id",
                "last_name",
                "athlete_name",
                "age"
            ],
            "coaches": [
                "name",
                "coach_id",
                "coach_name",
                "email"
            ],
            "teams": [
                "team_id",
                "coach_id",
                "sport_id",
                "team_name",
                "team_medal",
                "championship_id"
            ],
            "athlete_skills": [
                "skill_id",
                "athlete_id",
                "skill_level",
                "skill_mastered",
                "self_talk",
                "mental_preparation",
                "imagery",
                "goal_setting",
                "anxiety",
                "focus",
                "mental_toughness",
                "confidence",
                "motivation"
            ],
            "mental_skills": [
                "skill_id",
                "skill_name",
                "skill_description",
                "athlete_id",
                "Focus",
                "Visualization",
                "skill_mastered",
                "skill_level",
                "Excellent",
                "High",
                "Low"
            ],
            "goals": [
                "goal_id",
                "goal_name",
                "goal_rating",
                "skill_id"
            ],
            "athlete_goals": [
                "goal_id",
                "athlete_id",
                "goal_achieved",
                "goal_date",
                "date_achieved"
            ]
        }
    },
    {
        "id": 19,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Illustrations': ['user_id', 'illustration_id', 'upload_date', 'title', 'price', 'category_id', 'discount', 'creation_date', 'artist_id', 'description'], 'Users': ['username', 'user_id', 'address_id', 'work_address_id', 'last_active_date', 'home_address_id', 'last_activity_date', 'registration_date', 'email', 'total_purchase_amount', 'user_type_id', 'country', 'name'], 'Illustration_tags': ['tag_name', 'tag_id', 'illustration_id'], 'Illustration_tag_map': ['tag_id', 'illustration_id'], 'Addresses': ['state_id', 'address_id', 'city', 'street_address', 'city_id', 'country_id'], 'States': ['country_id', 'state_id', 'state_name', 'sales_tax_rate', 'population_density', 'time_zone', 'population', 'state_code'], 'Countries': ['country_name', 'country_id', 'population', 'continent', 'country_code', 'name', 'region_id']} and \n# the user question: Get the details of all illustrations that have been uploaded by users who live in the United States and have been tagged with the tag 'portrait' or 'landscape':,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the details of all illustrations that have been uploaded by users who live in the United States and have been tagged with the tag 'portrait' or 'landscape':",
        "output": "SELECT Illustrations.title, Users.username, Addresses.street_address, Addresses.city, States.state_name, Countries.country_name, Illustration_tags.tag_name FROM Illustrations INNER JOIN Users ON Illustrations.user_id = Users.user_id INNER JOIN Addresses ON Users.address_id = Addresses.address_id INNER JOIN States ON Addresses.state_id = States.state_id INNER JOIN Countries ON States.country_id = Countries.country_id INNER JOIN Illustration_tag_map ON Illustrations.illustration_id = Illustration_tag_map.illustration_id INNER JOIN Illustration_tags ON Illustration_tag_map.tag_id = Illustration_tags.tag_id WHERE Countries.country_name = 'United States' AND Illustration_tags.tag_name IN ('portrait', 'landscape');",
        "schema": "illustration",
        "processed_schema_content": {
            "Illustrations": [
                "user_id",
                "illustration_id",
                "upload_date",
                "title",
                "price",
                "category_id",
                "discount",
                "creation_date",
                "artist_id",
                "description"
            ],
            "Users": [
                "username",
                "user_id",
                "address_id",
                "work_address_id",
                "last_active_date",
                "home_address_id",
                "last_activity_date",
                "registration_date",
                "email",
                "total_purchase_amount",
                "user_type_id",
                "country",
                "name"
            ],
            "Illustration_tags": [
                "tag_name",
                "tag_id",
                "illustration_id"
            ],
            "Illustration_tag_map": [
                "tag_id",
                "illustration_id"
            ],
            "Addresses": [
                "state_id",
                "address_id",
                "city",
                "street_address",
                "city_id",
                "country_id"
            ],
            "States": [
                "country_id",
                "state_id",
                "state_name",
                "sales_tax_rate",
                "population_density",
                "time_zone",
                "population",
                "state_code"
            ],
            "Countries": [
                "country_name",
                "country_id",
                "population",
                "continent",
                "country_code",
                "name",
                "region_id"
            ]
        }
    },
    {
        "id": 21,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'celestial_bodies': ['radius', 'mass', 'name', 'type', 'number_of_moons', 'distance_from_sun', 'id', 'distance_from_earth', 'orbital_period', 'diameter', 'orbiting_body_id', 'average_surface_temperature', 'surface_temperature', 'perihelion_distance', 'period', 'semimajor_axis', 'redshift', 'velocity', 'luminosity', 'schwarzschild_radius', 'eccentricity', 'aphelion_distance', 'spin_period', 'semi_major_axis', 'surface_gravity', 'temperature', 'magnitude', 'accretion_disk_temperature', 'rotation_period', 'obliquity', 'pulse_period', 'peak_absolute_magnitude', 'albedo', 'apparent_magnitude', 'absolute_magnitude', 'spectral_type', 'discovery_year', 'spectral_class', 'distance_from_star', 'discovery_method_id', 'equilibrium_temperature', 'metallicity', 'age', 'effective_temperature', 'atmospheric_composition', 'inclination', 'parallax', 'rotation_velocity', 'axial_tilt', 'orbital_inclination', 'density', 'rotational_velocity', 'magnetic_field_strength', 'composition', 'rotational_period', 'spin', 'distance_from_galactic_center', 'binary_system', 'constellation', 'stellar_evolution_stage', 'star_cluster_type', 'galaxy', 'orbital_eccentricity', 'star_spectral_type', 'orbital_period_unit', 'diameter_unit', 'discovery_method', 'pulse_period_unit', 'distance_unit', 'radius_unit', 'avg_temperature', 'temperature_unit', 'aphelion_unit', 'perihelion_unit', 'event_horizon_unit', 'event_horizon_radius', 'luminosity_distance', 'orbit_type', 'equatorial_diameter', 'gravity_unit', 'escape_velocity', 'angle_unit', 'surface_area', 'density_unit', 'parent_body_id', 'atmospheric_pressure', 'luminosity_class', 'inner_habitable_zone', 'outer_habitable_zone', 'period_unit', 'classification', 'pressure_unit', 'surface_pressure', 'orbiting', 'distance', 'proper_motion', 'proper_motion_unit', 'mean_radius', 'mass_unit', 'temperature_range', 'Gas', 'Giant', 'brightness_temperature', 'parallax_unit', 'metallicity_unit', 'magnetic_field_unit', 'spin_parameter', 'orbiting_id', 'stellar_mass', 'stage', 'radial_velocity', 'host_star', 'accretion_rate', 'core_type']} and \n# the user question: Retrieve the name and rotational period of all planets that have a magnetic field strength greater than 0.1 Gauss and a surface temperature between 200 and 400 Kelvin.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and rotational period of all planets that have a magnetic field strength greater than 0.1 Gauss and a surface temperature between 200 and 400 Kelvin.",
        "output": "SELECT name, rotational_period FROM celestial_bodies WHERE type = 'Planet' AND magnetic_field_strength > 0.1 AND surface_temperature BETWEEN 200 AND 400;",
        "schema": "astronomy",
        "processed_schema_content": {
            "celestial_bodies": [
                "radius",
                "mass",
                "name",
                "type",
                "number_of_moons",
                "distance_from_sun",
                "id",
                "distance_from_earth",
                "orbital_period",
                "diameter",
                "orbiting_body_id",
                "average_surface_temperature",
                "surface_temperature",
                "perihelion_distance",
                "period",
                "semimajor_axis",
                "redshift",
                "velocity",
                "luminosity",
                "schwarzschild_radius",
                "eccentricity",
                "aphelion_distance",
                "spin_period",
                "semi_major_axis",
                "surface_gravity",
                "temperature",
                "magnitude",
                "accretion_disk_temperature",
                "rotation_period",
                "obliquity",
                "pulse_period",
                "peak_absolute_magnitude",
                "albedo",
                "apparent_magnitude",
                "absolute_magnitude",
                "spectral_type",
                "discovery_year",
                "spectral_class",
                "distance_from_star",
                "discovery_method_id",
                "equilibrium_temperature",
                "metallicity",
                "age",
                "effective_temperature",
                "atmospheric_composition",
                "inclination",
                "parallax",
                "rotation_velocity",
                "axial_tilt",
                "orbital_inclination",
                "density",
                "rotational_velocity",
                "magnetic_field_strength",
                "composition",
                "rotational_period",
                "spin",
                "distance_from_galactic_center",
                "binary_system",
                "constellation",
                "stellar_evolution_stage",
                "star_cluster_type",
                "galaxy",
                "orbital_eccentricity",
                "star_spectral_type",
                "orbital_period_unit",
                "diameter_unit",
                "discovery_method",
                "pulse_period_unit",
                "distance_unit",
                "radius_unit",
                "avg_temperature",
                "temperature_unit",
                "aphelion_unit",
                "perihelion_unit",
                "event_horizon_unit",
                "event_horizon_radius",
                "luminosity_distance",
                "orbit_type",
                "equatorial_diameter",
                "gravity_unit",
                "escape_velocity",
                "angle_unit",
                "surface_area",
                "density_unit",
                "parent_body_id",
                "atmospheric_pressure",
                "luminosity_class",
                "inner_habitable_zone",
                "outer_habitable_zone",
                "period_unit",
                "classification",
                "pressure_unit",
                "surface_pressure",
                "orbiting",
                "distance",
                "proper_motion",
                "proper_motion_unit",
                "mean_radius",
                "mass_unit",
                "temperature_range",
                "Gas",
                "Giant",
                "brightness_temperature",
                "parallax_unit",
                "metallicity_unit",
                "magnetic_field_unit",
                "spin_parameter",
                "orbiting_id",
                "stellar_mass",
                "stage",
                "radial_velocity",
                "host_star",
                "accretion_rate",
                "core_type"
            ]
        }
    },
    {
        "id": 22,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Protein': ['gene_id', 'molecular_weight', 'protein_name', 'isoelectric_point', 'protein_id', 'length', 'protein_length'], 'Pathway_Gene': ['gene_id', 'pathway_id'], 'Pathway': ['pathway_id', 'pathway_name', 'description']} and \n# the user question: Retrieve the names of all genes and their associated proteins that have a length greater than 800 amino acids and are part of the \"Wnt signaling pathway\" pathway.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all genes and their associated proteins that have a length greater than 800 amino acids and are part of the \"Wnt signaling pathway\" pathway.",
        "output": "SELECT Gene.gene_name, Protein.protein_name FROM Gene JOIN Protein ON Gene.gene_id = Protein.gene_id JOIN Pathway_Gene ON Gene.gene_id = Pathway_Gene.gene_id JOIN Pathway ON Pathway_Gene.pathway_id = Pathway.pathway_id WHERE Protein.length > 800 AND Pathway.pathway_name = 'Wnt signaling pathway';",
        "schema": "genetics",
        "processed_schema_content": {
            "Gene": [
                "end_position",
                "start_position",
                "chromosome_id",
                "gene_name",
                "gene_id",
                "tss_position",
                "chromosome",
                "entrez_gene_id",
                "hgnc_symbol",
                "chromosome_number",
                "disease_id",
                "associated_disease",
                "accession_number",
                "Name",
                "ID"
            ],
            "Protein": [
                "gene_id",
                "molecular_weight",
                "protein_name",
                "isoelectric_point",
                "protein_id",
                "length",
                "protein_length"
            ],
            "Pathway_Gene": [
                "gene_id",
                "pathway_id"
            ],
            "Pathway": [
                "pathway_id",
                "pathway_name",
                "description"
            ]
        }
    },
    {
        "id": 24,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID'], 'SalesOrderLineItem': ['ProductID', 'UnitPrice', 'Quantity', 'OrderID', 'OrderDate', 'Price', 'OrderLineID'], 'Customer': ['CustomerName', 'CustomerID', 'Country', 'SegmentID', 'Continent', 'PhoneNumber', 'Email', 'CreditLimit', 'State', 'AddressID', 'EmailAddress', 'LoyaltyLevelID', 'FirstName', 'LastName', 'City', 'StateCode', 'CountryCode', 'RegistrationDate']} and \n# the user question: Retrieve the list of customers who have made at least one purchase in the past month and have a lifetime purchase value of less than $500, along with their first and last name, email address, and lifetime purchase value, sorted by lifetime purchase value:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of customers who have made at least one purchase in the past month and have a lifetime purchase value of less than $500, along with their first and last name, email address, and lifetime purchase value, sorted by lifetime purchase value:",
        "output": "SELECT Customer.FirstName, Customer.LastName, Customer.EmailAddress, SUM(SalesOrderLineItem.Quantity * SalesOrderLineItem.UnitPrice) as LifetimePurchaseValue FROM Customer JOIN SalesOrder ON Customer.CustomerID = SalesOrder.CustomerID JOIN SalesOrderLineItem ON SalesOrder.OrderID = SalesOrderLineItem.OrderID WHERE SalesOrder.OrderDate >= DATE('now', '-1 month') GROUP BY Customer.CustomerID HAVING LifetimePurchaseValue < 500 ORDER BY LifetimePurchaseValue ASC;",
        "schema": "business_strategy",
        "processed_schema_content": {
            "SalesOrder": [
                "OrderID",
                "Year",
                "CustomerID",
                "OrderDate",
                "TotalAmount",
                "TotalPrice",
                "QuarterID",
                "ExpectedDeliveryDate",
                "ShippedDate",
                "EmployeeID",
                "CountryCode",
                "ReturnID",
                "OfficeID",
                "Discount",
                "OrderNumber",
                "Status",
                "RegionID"
            ],
            "SalesOrderLineItem": [
                "ProductID",
                "UnitPrice",
                "Quantity",
                "OrderID",
                "OrderDate",
                "Price",
                "OrderLineID"
            ],
            "Customer": [
                "CustomerName",
                "CustomerID",
                "Country",
                "SegmentID",
                "Continent",
                "PhoneNumber",
                "Email",
                "CreditLimit",
                "State",
                "AddressID",
                "EmailAddress",
                "LoyaltyLevelID",
                "FirstName",
                "LastName",
                "City",
                "StateCode",
                "CountryCode",
                "RegistrationDate"
            ]
        }
    },
    {
        "id": 26,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customers': ['name', 'customer_id', 'email', 'address'], 'Orders': ['total_amount', 'customer_id', 'order_date', 'order_id', 'processing_time', 'delivery_date']} and \n# the user question: List the customers who have not placed any orders in the past three months,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the customers who have not placed any orders in the past three months",
        "output": "SELECT c.name, c.email FROM Customers c WHERE c.customer_id NOT IN (SELECT DISTINCT customer_id FROM Orders WHERE order_date >= DATE('now', '3 months'));",
        "schema": "shipping_and_logistics",
        "processed_schema_content": {
            "Customers": [
                "name",
                "customer_id",
                "email",
                "address"
            ],
            "Orders": [
                "total_amount",
                "customer_id",
                "order_date",
                "order_id",
                "processing_time",
                "delivery_date"
            ]
        }
    },
    {
        "id": 27,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Episode': ['rating', 'show_id', 'guest_id', 'episode_number', 'episode_id', 'air_date', 'host_id', 'year', 'month', 'max_rating'], 'Show': ['show_name', 'show_id', 'Night', 'Late', 'Talk', 'host_id', 'rating', 'end_time', 'start_time', 'language'], 'Guest': ['guest_id', 'guest_name', 'nationality', 'occupation', 'industry', 'country', 'rating'], 'Host': ['host_id', 'host_name', 'country']} and \n# the user question: \"Retrieve the names of hosts who have interviewed a guest with the occupation 'Actor'.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Retrieve the names of hosts who have interviewed a guest with the occupation 'Actor'.\"",
        "output": "SELECT DISTINCT Host.host_name FROM Host INNER JOIN Show ON Host.host_id = Show.host_id INNER JOIN Episode ON Show.show_id = Episode.show_id INNER JOIN Guest ON Episode.guest_id = Guest.guest_id WHERE Guest.occupation = 'Actor';",
        "schema": "talk_shows",
        "processed_schema_content": {
            "Episode": [
                "rating",
                "show_id",
                "guest_id",
                "episode_number",
                "episode_id",
                "air_date",
                "host_id",
                "year",
                "month",
                "max_rating"
            ],
            "Show": [
                "show_name",
                "show_id",
                "Night",
                "Late",
                "Talk",
                "host_id",
                "rating",
                "end_time",
                "start_time",
                "language"
            ],
            "Guest": [
                "guest_id",
                "guest_name",
                "nationality",
                "occupation",
                "industry",
                "country",
                "rating"
            ],
            "Host": [
                "host_id",
                "host_name",
                "country"
            ]
        }
    },
    {
        "id": 29,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'devices': ['room_id', 'device_id', 'user_id', 'device_name', 'device_type', 'wattage', 'smart_device'], 'users': ['user_id', 'user_name', 'first_name', 'last_name'], 'sensors': ['sensor_id', 'device_id', 'sensor_type', 'value']} and \n# the user question: Find all the users who have at least one device with a light sensor and a humidity sensor, and sort the results by user ID in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all the users who have at least one device with a light sensor and a humidity sensor, and sort the results by user ID in descending order.",
        "output": "SELECT users.user_id, users.first_name, users.last_name FROM users WHERE user_id IN ( SELECT user_id FROM devices WHERE device_id IN ( SELECT device_id FROM sensors WHERE sensor_type = 'Light Sensor' AND device_id IN ( SELECT device_id FROM sensors WHERE sensor_type = 'Humidity Sensor' ) ) ) ORDER BY users.user_id DESC;",
        "schema": "smart_lighting",
        "processed_schema_content": {
            "devices": [
                "room_id",
                "device_id",
                "user_id",
                "device_name",
                "device_type",
                "wattage",
                "smart_device"
            ],
            "users": [
                "user_id",
                "user_name",
                "first_name",
                "last_name"
            ],
            "sensors": [
                "sensor_id",
                "device_id",
                "sensor_type",
                "value"
            ]
        }
    },
    {
        "id": 30,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'graphic_novels': ['publish_date', 'name', 'author', 'publisher', 'pages', 'price', 'id', 'rating', 'sale_price', 'series_id', 'in_stock', 'format', 'page_count', 'trilogy_number', 'series', 'protagonist', 'genre', 'publication_date', 'writer', 'release_date', 'awards']} and \n# the user question: Get the name and author of all graphic novels published by DC Comics and Marvel Comics.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the name and author of all graphic novels published by DC Comics and Marvel Comics.",
        "output": "SELECT name, author FROM graphic_novels WHERE publisher IN ('DC Comics', 'Marvel Comics');",
        "schema": "graphic_novels",
        "processed_schema_content": {
            "graphic_novels": [
                "publish_date",
                "name",
                "author",
                "publisher",
                "pages",
                "price",
                "id",
                "rating",
                "sale_price",
                "series_id",
                "in_stock",
                "format",
                "page_count",
                "trilogy_number",
                "series",
                "protagonist",
                "genre",
                "publication_date",
                "writer",
                "release_date",
                "awards"
            ]
        }
    },
    {
        "id": 33,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'book_formats': ['book_id', 'format_id', 'file_size', 'file_format', 'download_link', 'name', 'format', 'price', 'book_format_id'], 'users': ['user_id', 'username', 'email', 'password_hash', 'state', 'first_name', 'last_name', 'country', 'city'], 'shopping_carts': ['cart_id', 'user_id', 'created_at', 'purchase_date', 'book_id', 'checkout_date'], 'cart_items': ['cart_id', 'book_id', 'quantity', 'price', 'total', 'format_id', 'cart_item_id', 'book_format_id', 'user_id', 'created_at']} and \n# the user question: Find the top 5 users who have made the most purchases, sorted by the total amount spent in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the top 5 users who have made the most purchases, sorted by the total amount spent in descending order.",
        "output": "SELECT users.username, users.email, SUM(book_formats.price) as total_spent FROM users JOIN shopping_carts ON users.user_id = shopping_carts.user_id JOIN cart_items ON shopping_carts.cart_id = cart_items.cart_id JOIN book_formats ON cart_items.book_format_id = book_formats.book_format_id GROUP BY users.user_id ORDER BY total_spent DESC LIMIT 5;",
        "schema": "psychology_books",
        "processed_schema_content": {
            "book_formats": [
                "book_id",
                "format_id",
                "file_size",
                "file_format",
                "download_link",
                "name",
                "format",
                "price",
                "book_format_id"
            ],
            "users": [
                "user_id",
                "username",
                "email",
                "password_hash",
                "state",
                "first_name",
                "last_name",
                "country",
                "city"
            ],
            "shopping_carts": [
                "cart_id",
                "user_id",
                "created_at",
                "purchase_date",
                "book_id",
                "checkout_date"
            ],
            "cart_items": [
                "cart_id",
                "book_id",
                "quantity",
                "price",
                "total",
                "format_id",
                "cart_item_id",
                "book_format_id",
                "user_id",
                "created_at"
            ]
        }
    },
    {
        "id": 34,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id']} and \n# the user question: Retrieve the names of all clients who have attended a session with a therapist who has conducted sessions on at least four different days in the past month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all clients who have attended a session with a therapist who has conducted sessions on at least four different days in the past month:",
        "output": "SELECT DISTINCT c.name FROM Clients c INNER JOIN Session_Attendees sa ON c.id = sa.client_id INNER JOIN Sessions s ON sa.session_id = s.id INNER JOIN Therapists t ON s.therapist_id = t.id WHERE s.date BETWEEN DATE('now', '-1 month') AND DATE('now') GROUP BY t.id, STRFTIME('%Y-%m-%d', s.date) HAVING COUNT(DISTINCT STRFTIME('%Y-%m-%d', s.date)) >= 4",
        "schema": "counseling",
        "processed_schema_content": {
            "Clients": [
                "email",
                "phone_number",
                "id",
                "name",
                "date_of_birth",
                "gender",
                "referral_source_id",
                "primary_care_physician_id",
                "substance_abuse_history",
                "depression_history",
                "trauma_history",
                "ptsd_diagnosis",
                "addiction_history",
                "personality_disorder_history",
                "eating_disorder_history",
                "bipolar_history",
                "schizophrenia_history",
                "self_harm_history",
                "anxiety_history",
                "eating_disorders_history",
                "alcoholism_history",
                "gambling_addiction_history",
                "smoking_addiction_history",
                "alcohol_addiction_history",
                "drug_addiction_history",
                "sex_addiction_history",
                "ptsd_history",
                "ocd_history",
                "suicidal_ideation_history",
                "age",
                "phone",
                "balance_owing",
                "contact_number"
            ],
            "Sessions": [
                "therapist_id",
                "client_id",
                "id",
                "date",
                "location",
                "name",
                "duration",
                "therapy_type_id",
                "cost",
                "start_time",
                "session_type",
                "rate",
                "",
                "SessionNotes",
                "SessionID",
                "SessionDate",
                "CounselorID"
            ],
            "Therapists": [
                "id",
                "name",
                "gender",
                "email",
                "phone",
                "license_state",
                "experience_years",
                "last_name",
                "is_active",
                "is_licensed",
                "rate_per_hour"
            ],
            "Session_Attendees": [
                "session_id",
                "client_id",
                "attendee_type",
                "attended",
                "id"
            ]
        }
    },
    {
        "id": 35,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'team_id', 'completed_by', 'skill_id', 'first_name', 'manager_id', 'last_name', 'job_title', 'office_location', 'role', 'years_of_experience', 'department_id', 'salary'], 'Tasks': ['assigned_to', 'deadline', 'project_id', 'task_id', 'priority_level', 'status', 'completed_by', 'created_at', 'completed_at', 'priority', 'created_by', 'due_date', 'user_id', 'assigned_team', 'team_id', 'started_at', 'assigned_skill', 'requested_by', 'assigned_at', 'assigned_by', 'completion_date', 'assignment_date', 'skill_name', 'task_status', 'department_name', 'task_assigned_date', 'task_completion_date'], 'User_Roles': ['user_id', 'role_id'], 'Roles': ['role_id', 'role_name']} and \n# the user question: Find the user who has completed the most tasks in the last month and has the role of \"Marketing Manager\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the user who has completed the most tasks in the last month and has the role of \"Marketing Manager\":",
        "output": "SELECT Users.username, COUNT(Tasks.task_id) AS completed_task_count FROM Users JOIN Tasks ON Users.user_id = Tasks.completed_by JOIN User_Roles ON Users.user_id = User_Roles.user_id JOIN Roles ON User_Roles.role_id = Roles.role_id WHERE Tasks.completed_at >= DATE('now', '-1 month') AND Roles.role_name = 'Marketing Manager' GROUP BY Users.user_id ORDER BY completed_task_count DESC LIMIT 1;",
        "schema": "leadership",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "team_id",
                "completed_by",
                "skill_id",
                "first_name",
                "manager_id",
                "last_name",
                "job_title",
                "office_location",
                "role",
                "years_of_experience",
                "department_id",
                "salary"
            ],
            "Tasks": [
                "assigned_to",
                "deadline",
                "project_id",
                "task_id",
                "priority_level",
                "status",
                "completed_by",
                "created_at",
                "completed_at",
                "priority",
                "created_by",
                "due_date",
                "user_id",
                "assigned_team",
                "team_id",
                "started_at",
                "assigned_skill",
                "requested_by",
                "assigned_at",
                "assigned_by",
                "completion_date",
                "assignment_date",
                "skill_name",
                "task_status",
                "department_name",
                "task_assigned_date",
                "task_completion_date"
            ],
            "User_Roles": [
                "user_id",
                "role_id"
            ],
            "Roles": [
                "role_id",
                "role_name"
            ]
        }
    },
    {
        "id": 36,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'devices': ['room_id', 'device_id', 'user_id', 'device_name', 'device_type', 'wattage', 'smart_device'], 'rooms': ['room_id', 'room_name', 'user_id'], 'thermostats': ['is_smart', 'device_id', 'target_temperature', 'thermostat_id', 'room_id', 'thermostat_temperature', 'thermostat_type'], 'motion_sensors': ['motion_id', 'device_id', 'sensor_type', 'motion_detected', 'activity_id', 'sensor_id', 'sensor_name'], 'thermostat_data': ['current_temperature', 'target_temperature', 'thermostat_id'], 'activity_data': ['activity_id', 'timestamp', 'activity_status', 'user_id', 'start_time', 'end_time', 'device_id', 'activity_type', 'lock_id', 'light_id', 'thermostat_id', 'energy_device_id', 'session_id']} and \n# the user question: Find all the rooms that have a motion sensor and a smart thermostat, and show the room name and the average temperature when there is motion detected.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all the rooms that have a motion sensor and a smart thermostat, and show the room name and the average temperature when there is motion detected.",
        "output": "SELECT rooms.room_name, AVG(thermostat_data.current_temperature) AS avg_temp FROM rooms INNER JOIN devices AS motion_devices ON rooms.room_id = motion_devices.room_id INNER JOIN motion_sensors ON motion_devices.device_id = motion_sensors.device_id INNER JOIN activity_data ON motion_sensors.activity_id = activity_data.activity_id INNER JOIN devices AS thermostat_devices ON rooms.room_id = thermostat_devices.room_id INNER JOIN thermostats ON thermostat_devices.device_id = thermostats.device_id INNER JOIN thermostat_data ON thermostats.thermostat_id = thermostat_data.thermostat_id WHERE motion_devices.device_type = 'Motion Sensor' AND thermostat_devices.device_type = 'Smart Thermostat' AND activity_data.activity_status = 'Motion Detected' GROUP BY rooms.room_id;",
        "schema": "smart_lighting",
        "processed_schema_content": {
            "devices": [
                "room_id",
                "device_id",
                "user_id",
                "device_name",
                "device_type",
                "wattage",
                "smart_device"
            ],
            "rooms": [
                "room_id",
                "room_name",
                "user_id"
            ],
            "thermostats": [
                "is_smart",
                "device_id",
                "target_temperature",
                "thermostat_id",
                "room_id",
                "thermostat_temperature",
                "thermostat_type"
            ],
            "motion_sensors": [
                "motion_id",
                "device_id",
                "sensor_type",
                "motion_detected",
                "activity_id",
                "sensor_id",
                "sensor_name"
            ],
            "thermostat_data": [
                "current_temperature",
                "target_temperature",
                "thermostat_id"
            ],
            "activity_data": [
                "activity_id",
                "timestamp",
                "activity_status",
                "user_id",
                "start_time",
                "end_time",
                "device_id",
                "activity_type",
                "lock_id",
                "light_id",
                "thermostat_id",
                "energy_device_id",
                "session_id"
            ]
        }
    },
    {
        "id": 39,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Book': ['book_id', 'title', 'isbn', 'publisher_id', 'publication_date', 'rating', 'price', 'publication_year', 'author_id', 'publisher', 'author', 'weight', 'author_gender', 'language', 'author_name', 'book_title', 'format_id', 'page_count', 'id', 'num_pages'], 'Order_Item': ['order_id', 'book_id', 'quantity', 'price', 'store_id', 'order_date', 'customer_id', 'unit_price', 'inventory_id', 'date', 'order_item_date'], 'Store_Inventory': ['store_id', 'book_id', 'quantity', 'inventory_id', 'quantity_available']} and \n# the user question: Find the top 5 bestselling books of all time, along with the total number of copies sold.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the top 5 bestselling books of all time, along with the total number of copies sold.",
        "output": "SELECT Book.book_title, SUM(Order_Item.quantity) AS total_copies_sold FROM Book JOIN Store_Inventory ON Book.book_id = Store_Inventory.book_id JOIN Order_Item ON Store_Inventory.inventory_id = Order_Item.inventory_id GROUP BY Book.book_id ORDER BY total_copies_sold DESC LIMIT 5;",
        "schema": "business_books",
        "processed_schema_content": {
            "Book": [
                "book_id",
                "title",
                "isbn",
                "publisher_id",
                "publication_date",
                "rating",
                "price",
                "publication_year",
                "author_id",
                "publisher",
                "author",
                "weight",
                "author_gender",
                "language",
                "author_name",
                "book_title",
                "format_id",
                "page_count",
                "id",
                "num_pages"
            ],
            "Order_Item": [
                "order_id",
                "book_id",
                "quantity",
                "price",
                "store_id",
                "order_date",
                "customer_id",
                "unit_price",
                "inventory_id",
                "date",
                "order_item_date"
            ],
            "Store_Inventory": [
                "store_id",
                "book_id",
                "quantity",
                "inventory_id",
                "quantity_available"
            ]
        }
    },
    {
        "id": 40,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'mental_skills': ['skill_id', 'skill_name', 'skill_description', 'athlete_id', 'Focus', 'Visualization', 'skill_mastered', 'skill_level', 'Excellent', 'High', 'Low'], 'goals': ['goal_id', 'goal_name', 'goal_rating', 'skill_id'], 'athlete_goals': ['goal_id', 'athlete_id', 'goal_achieved', 'goal_date', 'date_achieved']} and \n# the user question: Get the name and rating of all goals related to \"Stress Management\" achieved by athletes with a \"High\" level in the \"Focus\" mental skill, sorted by rating in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the name and rating of all goals related to \"Stress Management\" achieved by athletes with a \"High\" level in the \"Focus\" mental skill, sorted by rating in descending order.",
        "output": "SELECT goals.goal_name, goals.goal_rating FROM athletes INNER JOIN athlete_skills ON athletes.athlete_id = athlete_skills.athlete_id INNER JOIN mental_skills ON athlete_skills.skill_id = mental_skills.skill_id INNER JOIN athlete_goals ON athletes.athlete_id = athlete_goals.athlete_id INNER JOIN goals ON athlete_goals.goal_id = goals.goal_id WHERE mental_skills.skill_name = 'Focus' AND athlete_skills.skill_level = 'High' AND goals.goal_name = 'Stress Management' AND athlete_goals.goal_achieved = 1 ORDER BY goals.goal_rating DESC;",
        "schema": "sports_psychology",
        "processed_schema_content": {
            "athletes": [
                "name",
                "athlete_id",
                "team_id",
                "last_name",
                "athlete_name",
                "age"
            ],
            "athlete_skills": [
                "skill_id",
                "athlete_id",
                "skill_level",
                "skill_mastered",
                "self_talk",
                "mental_preparation",
                "imagery",
                "goal_setting",
                "anxiety",
                "focus",
                "mental_toughness",
                "confidence",
                "motivation"
            ],
            "mental_skills": [
                "skill_id",
                "skill_name",
                "skill_description",
                "athlete_id",
                "Focus",
                "Visualization",
                "skill_mastered",
                "skill_level",
                "Excellent",
                "High",
                "Low"
            ],
            "goals": [
                "goal_id",
                "goal_name",
                "goal_rating",
                "skill_id"
            ],
            "athlete_goals": [
                "goal_id",
                "athlete_id",
                "goal_achieved",
                "goal_date",
                "date_achieved"
            ]
        }
    },
    {
        "id": 41,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_price', 'product_name', 'product_id', 'category_id', 'unit_price', 'quantity_in_stock', 'supplier_id', 'stock_quantity', 'category', 'unit_cost', 'reorder_level', 'etching_method', 'name', 'in_stock', 'price', 'discount', 'Product', 'last_reorder_date', 'collection_id', 'id']} and \n# the user question: Retrieve the name and quantity of all products that are currently out of stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and quantity of all products that are currently out of stock.",
        "output": "SELECT product_name, quantity_in_stock FROM products WHERE quantity_in_stock = 0;",
        "schema": "glass_etching",
        "processed_schema_content": {
            "products": [
                "product_price",
                "product_name",
                "product_id",
                "category_id",
                "unit_price",
                "quantity_in_stock",
                "supplier_id",
                "stock_quantity",
                "category",
                "unit_cost",
                "reorder_level",
                "etching_method",
                "name",
                "in_stock",
                "price",
                "discount",
                "Product",
                "last_reorder_date",
                "collection_id",
                "id"
            ]
        }
    },
    {
        "id": 42,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'email', 'password', 'registration_date', 'experience_id', 'playtime', 'age', 'country', 'duration', 'total_duration', 'gender'], 'Games': ['game_id', 'game_name', 'genre', 'developer', 'publisher', 'rating', 'user_id', 'title', 'price', 'release_year', 'number_of_players', 'release_month', 'multiplayer_support', 'release_date'], 'GameRatings': ['game_id', 'user_id', 'rating'], 'VRExperiences': ['experience_id', 'game_id', 'developer', 'user_id', 'resolution', 'rating', 'genre', 'title', 'price', 'release_year', 'number_of_players', 'release_month', 'release_date', 'sale_price', 'rating_id', 'developer_id'], 'ExperienceRatings': ['experience_id', 'user_id', 'rating', 'resolution']} and \n# the user question: Find the names of all users who have played at least one game and at least one VR experience in the \"Horror\" genre with a rating greater than or equal to 4.0.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all users who have played at least one game and at least one VR experience in the \"Horror\" genre with a rating greater than or equal to 4.0.",
        "output": "SELECT DISTINCT Users.username FROM Users JOIN GameRatings ON Users.user_id = GameRatings.user_id JOIN Games ON GameRatings.game_id = Games.game_id JOIN ExperienceRatings ON Users.user_id = ExperienceRatings.user_id JOIN VRExperiences ON ExperienceRatings.experience_id = VRExperiences.experience_id WHERE Games.genre = 'Horror' AND GameRatings.rating >= 4.0 AND VRExperiences.genre = 'Horror' AND ExperienceRatings.rating >= 4.0",
        "schema": "virtual_reality",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "email",
                "password",
                "registration_date",
                "experience_id",
                "playtime",
                "age",
                "country",
                "duration",
                "total_duration",
                "gender"
            ],
            "Games": [
                "game_id",
                "game_name",
                "genre",
                "developer",
                "publisher",
                "rating",
                "user_id",
                "title",
                "price",
                "release_year",
                "number_of_players",
                "release_month",
                "multiplayer_support",
                "release_date"
            ],
            "GameRatings": [
                "game_id",
                "user_id",
                "rating"
            ],
            "VRExperiences": [
                "experience_id",
                "game_id",
                "developer",
                "user_id",
                "resolution",
                "rating",
                "genre",
                "title",
                "price",
                "release_year",
                "number_of_players",
                "release_month",
                "release_date",
                "sale_price",
                "rating_id",
                "developer_id"
            ],
            "ExperienceRatings": [
                "experience_id",
                "user_id",
                "rating",
                "resolution"
            ]
        }
    },
    {
        "id": 43,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Patients': ['medical_history', 'patient_id', 'first_name', 'last_name', 'age_group', 'gender', 'Age', 'Contact_Info', 'Name', 'Diagnosis', 'Discharge_Date', 'Admission_Date', 'Address', 'Family_History', 'Patient_ID', 'Doctor_ID', 'Doctor_I', 'AdmissionDate', 'Therapy', 'date_of_birth', 'name'], 'Medications': ['medication_name', 'patient_id', 'start_date', 'end_date', 'medical_record_id', 'admission_id', 'dosage', 'quantity', 'frequency', 'duration', 'medication_id', 'drug_class', 'medication_type', 'dosage_amount', 'TimeToAdminister']} and \n# the user question: Find the patients who have been prescribed a medication with a duration of more than 30 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the patients who have been prescribed a medication with a duration of more than 30 days.",
        "output": "SELECT DISTINCT Patients.patient_id, Patients.first_name, Patients.last_name, Medications.medication_name, Medications.duration FROM Patients INNER JOIN Medications ON Patients.patient_id = Medications.patient_id WHERE Medications.duration > 30;",
        "schema": "nursing",
        "processed_schema_content": {
            "Patients": [
                "medical_history",
                "patient_id",
                "first_name",
                "last_name",
                "age_group",
                "gender",
                "Age",
                "Contact_Info",
                "Name",
                "Diagnosis",
                "Discharge_Date",
                "Admission_Date",
                "Address",
                "Family_History",
                "Patient_ID",
                "Doctor_ID",
                "Doctor_I",
                "AdmissionDate",
                "Therapy",
                "date_of_birth",
                "name"
            ],
            "Medications": [
                "medication_name",
                "patient_id",
                "start_date",
                "end_date",
                "medical_record_id",
                "admission_id",
                "dosage",
                "quantity",
                "frequency",
                "duration",
                "medication_id",
                "drug_class",
                "medication_type",
                "dosage_amount",
                "TimeToAdminister"
            ]
        }
    },
    {
        "id": 44,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Websites': ['website_id', 'user_id', 'url', 'created_at', 'updated_at', 'name', 'domain_id', 'domain_authority_score', 'domain_created_at'], 'Pages': ['page_id', 'website_id', 'url', 'title', 'description', 'content', 'created_at', 'updated_at', 'meta_description', 'meta_keywords', 'meta_title', 'h1_tag', 'h2_tag', 'title_tag', 'canonical_url', 'description_tag', 'header_tag', 'meta_tag', 'meta_keyword', 'h1', 'heading', 'header', 'word_count', 'time_on_page', 'total_words', 'http_status_code', 'user_id', 'last_modified_date', '[website_id]'], 'Page_Stats': ['page_stat_id', 'page_id', 'visits', 'bounce_rate', 'time_on_page', 'created_at', 'updated_at', 'organic_traffic', 'load_time', 'page_speed_score', 'total_images', 'total_videos', 'page_authority_score', 'domain_authority_score', 'page_load_time', 'backlinks', 'search_query', 'search_volume']} and \n# the user question: Retrieve the names and URLs of all websites that have at least one page with a time on page greater than or equal to 120 seconds and a bounce rate less than or equal to 0.3:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and URLs of all websites that have at least one page with a time on page greater than or equal to 120 seconds and a bounce rate less than or equal to 0.3:",
        "output": "SELECT DISTINCT Websites.name, Websites.url FROM Websites INNER JOIN Pages ON Websites.website_id = Pages.website_id INNER JOIN Page_Stats ON Pages.page_id = Page_Stats.page_id WHERE Page_Stats.time_on_page >= 120 AND Page_Stats.bounce_rate <= 0.3;",
        "schema": "search_engine_optimization_(seo)",
        "processed_schema_content": {
            "Websites": [
                "website_id",
                "user_id",
                "url",
                "created_at",
                "updated_at",
                "name",
                "domain_id",
                "domain_authority_score",
                "domain_created_at"
            ],
            "Pages": [
                "page_id",
                "website_id",
                "url",
                "title",
                "description",
                "content",
                "created_at",
                "updated_at",
                "meta_description",
                "meta_keywords",
                "meta_title",
                "h1_tag",
                "h2_tag",
                "title_tag",
                "canonical_url",
                "description_tag",
                "header_tag",
                "meta_tag",
                "meta_keyword",
                "h1",
                "heading",
                "header",
                "word_count",
                "time_on_page",
                "total_words",
                "http_status_code",
                "user_id",
                "last_modified_date",
                "[website_id]"
            ],
            "Page_Stats": [
                "page_stat_id",
                "page_id",
                "visits",
                "bounce_rate",
                "time_on_page",
                "created_at",
                "updated_at",
                "organic_traffic",
                "load_time",
                "page_speed_score",
                "total_images",
                "total_videos",
                "page_authority_score",
                "domain_authority_score",
                "page_load_time",
                "backlinks",
                "search_query",
                "search_volume"
            ]
        }
    },
    {
        "id": 45,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {} and \n# the user question: Retrieve the name and total revenue of all health insurance providers with plans that cover patients in at least 2 different states in the United States.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total revenue of all health insurance providers with plans that cover patients in at least 2 different states in the United States.",
        "output": "SELECT Health_Insurance_Providers.provider_name, COUNT(DISTINCT Patient_Insurance.patient_id) * Insurance_Plans.deductible AS Total_Revenue FROM Health_Insurance_Providers JOIN Insurance_Plans ON Health_Insurance_Providers.provider_id = Insurance_Plans.provider_id JOIN Patient_Insurance ON Insurance_Plans.plan_id = Patient_Insurance.plan_id JOIN States ON Patient_Insurance.patient_id = States.state_id JOIN Countries ON States.country_id = Countries.country_id WHERE Countries.country_name = 'United States' GROUP BY Health_Insurance_Providers.provider_id HAVING COUNT(DISTINCT States.state_id) >= 2;",
        "schema": "public_health",
        "processed_schema_content": {}
    },
    {
        "id": 47,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'game': ['game_mode', 'price', 'name', 'publisher', 'num_players', 'rating', 'platform', 'genre', 'release_year', 'developer', 'platform_count', 'tag', 'game_name', 'release_date', 'multiplayer', 'copies_sold', 'playtime', 'year']} and \n# the user question: Get the name, publisher and rating of all games that were published by 'Ubisoft' and have a rating of at least 7.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the name, publisher and rating of all games that were published by 'Ubisoft' and have a rating of at least 7.",
        "output": "SELECT name, publisher, rating FROM game WHERE publisher = 'Ubisoft' AND rating >= 7;",
        "schema": "game_design",
        "processed_schema_content": {
            "game": [
                "game_mode",
                "price",
                "name",
                "publisher",
                "num_players",
                "rating",
                "platform",
                "genre",
                "release_year",
                "developer",
                "platform_count",
                "tag",
                "game_name",
                "release_date",
                "multiplayer",
                "copies_sold",
                "playtime",
                "year"
            ]
        }
    },
    {
        "id": 49,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Orders': ['customer_id', 'order_total', 'order_date', 'order_id', 'delivery_date', 'shipment_id', 'order_total_cost', 'date', 'total_price', 'total_amount', 'shipping_date'], 'Customers': ['customer_id', 'phone_number', 'email', 'customer_name', 'address', 'customer_email', 'customer_phone', 'customer_address', 'email_address', 'phone', 'registration_date', 'country', 'city', 'state', 'name', 'id', 'first_name', 'last_name'], 'Order_Items': ['order_id', 'product_id', 'glassware_item_id', 'quantity', 'unit_price', 'order_item_id', 'price', 'item_cost', 'item_id', 'order_date', 'item_price'], 'Glassware_Items': ['glassware_type_id', 'quantity', 'glassware_item_id', 'product_id', 'glassware_item_name', 'glassware_item_description', 'etching_id', 'price', 'item_name', 'material', 'glassware_item_type_id', 'stock', 'design_id', 'discontinued', 'supplier_id', 'quantity_in_stock', 'unit_price', 'quantity_supplied']} and \n# the user question: Retrieve the list of orders that include at least one glassware item with a price higher than $50, along with the order ID, customer name, and total order value.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of orders that include at least one glassware item with a price higher than $50, along with the order ID, customer name, and total order value.",
        "output": "SELECT Orders.order_id, Customers.customer_name, SUM(Glassware_Items.price) AS total_order_value FROM Orders INNER JOIN Customers ON Orders.customer_id = Customers.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Glassware_Items ON Order_Items.glassware_item_id = Glassware_Items.glassware_item_id WHERE Glassware_Items.price > 50 GROUP BY Orders.order_id HAVING COUNT(DISTINCT Order_Items.glassware_item_id) > 0;",
        "schema": "glass_etching",
        "processed_schema_content": {
            "Orders": [
                "customer_id",
                "order_total",
                "order_date",
                "order_id",
                "delivery_date",
                "shipment_id",
                "order_total_cost",
                "date",
                "total_price",
                "total_amount",
                "shipping_date"
            ],
            "Customers": [
                "customer_id",
                "phone_number",
                "email",
                "customer_name",
                "address",
                "customer_email",
                "customer_phone",
                "customer_address",
                "email_address",
                "phone",
                "registration_date",
                "country",
                "city",
                "state",
                "name",
                "id",
                "first_name",
                "last_name"
            ],
            "Order_Items": [
                "order_id",
                "product_id",
                "glassware_item_id",
                "quantity",
                "unit_price",
                "order_item_id",
                "price",
                "item_cost",
                "item_id",
                "order_date",
                "item_price"
            ],
            "Glassware_Items": [
                "glassware_type_id",
                "quantity",
                "glassware_item_id",
                "product_id",
                "glassware_item_name",
                "glassware_item_description",
                "etching_id",
                "price",
                "item_name",
                "material",
                "glassware_item_type_id",
                "stock",
                "design_id",
                "discontinued",
                "supplier_id",
                "quantity_in_stock",
                "unit_price",
                "quantity_supplied"
            ]
        }
    },
    {
        "id": 51,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'team_id', 'completed_by', 'skill_id', 'first_name', 'manager_id', 'last_name', 'job_title', 'office_location', 'role', 'years_of_experience', 'department_id', 'salary'], 'Tasks': ['assigned_to', 'deadline', 'project_id', 'task_id', 'priority_level', 'status', 'completed_by', 'created_at', 'completed_at', 'priority', 'created_by', 'due_date', 'user_id', 'assigned_team', 'team_id', 'started_at', 'assigned_skill', 'requested_by', 'assigned_at', 'assigned_by', 'completion_date', 'assignment_date', 'skill_name', 'task_status', 'department_name', 'task_assigned_date', 'task_completion_date'], 'User_Roles': ['user_id', 'role_id'], 'Roles': ['role_id', 'role_name']} and \n# the user question: Find the user who has the most completed tasks in the last month and has the role of \"Tester\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the user who has the most completed tasks in the last month and has the role of \"Tester\":",
        "output": "SELECT Users.username, COUNT(Tasks.task_id) AS completed_task_count FROM Users JOIN Tasks ON Users.user_id = Tasks.completed_by JOIN User_Roles ON Users.user_id = User_Roles.user_id JOIN Roles ON User_Roles.role_id = Roles.role_id WHERE Tasks.completed_at >= DATE('now', '-1 month') AND Roles.role_name = 'Tester' GROUP BY Users.user_id ORDER BY completed_task_count DESC LIMIT 1;",
        "schema": "leadership",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "team_id",
                "completed_by",
                "skill_id",
                "first_name",
                "manager_id",
                "last_name",
                "job_title",
                "office_location",
                "role",
                "years_of_experience",
                "department_id",
                "salary"
            ],
            "Tasks": [
                "assigned_to",
                "deadline",
                "project_id",
                "task_id",
                "priority_level",
                "status",
                "completed_by",
                "created_at",
                "completed_at",
                "priority",
                "created_by",
                "due_date",
                "user_id",
                "assigned_team",
                "team_id",
                "started_at",
                "assigned_skill",
                "requested_by",
                "assigned_at",
                "assigned_by",
                "completion_date",
                "assignment_date",
                "skill_name",
                "task_status",
                "department_name",
                "task_assigned_date",
                "task_completion_date"
            ],
            "User_Roles": [
                "user_id",
                "role_id"
            ],
            "Roles": [
                "role_id",
                "role_name"
            ]
        }
    },
    {
        "id": 53,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'creation_date', 'deletion_date', 'last_login_date', 'password_change_date', 'last_password_change_date', 'email', 'ip_address', 'admin_privileges', 'account_status', 'Last_Login_Time', 'Account_Status', 'Email', 'User_ID', 'id', 'lastLogin'], 'User_Roles': ['role_id', 'user_id'], 'Role_Permissions': ['role_id', 'permission_id'], 'Permissions': ['permission_name', 'permission_id'], 'User_Locations': ['user_id', 'location_id'], 'Locations': ['location_name', 'location_id']} and \n# the user question: Find all users who have a role with the \"delete\" permission and are located at the \"data center\" location.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all users who have a role with the \"delete\" permission and are located at the \"data center\" location.",
        "output": "SELECT Users.username FROM Users JOIN User_Roles ON Users.user_id = User_Roles.user_id JOIN Role_Permissions ON User_Roles.role_id = Role_Permissions.role_id JOIN Permissions ON Role_Permissions.permission_id = Permissions.permission_id JOIN User_Locations ON Users.user_id = User_Locations.user_id JOIN Locations ON User_Locations.location_id = Locations.location_id WHERE Permissions.permission_name = 'delete' AND Locations.location_name = 'data center';",
        "schema": "cybersecurity",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "creation_date",
                "deletion_date",
                "last_login_date",
                "password_change_date",
                "last_password_change_date",
                "email",
                "ip_address",
                "admin_privileges",
                "account_status",
                "Last_Login_Time",
                "Account_Status",
                "Email",
                "User_ID",
                "id",
                "lastLogin"
            ],
            "User_Roles": [
                "role_id",
                "user_id"
            ],
            "Role_Permissions": [
                "role_id",
                "permission_id"
            ],
            "Permissions": [
                "permission_name",
                "permission_id"
            ],
            "User_Locations": [
                "user_id",
                "location_id"
            ],
            "Locations": [
                "location_name",
                "location_id"
            ]
        }
    },
    {
        "id": 55,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'team_id', 'completed_by', 'skill_id', 'first_name', 'manager_id', 'last_name', 'job_title', 'office_location', 'role', 'years_of_experience', 'department_id', 'salary'], 'User_Skills': ['user_id', 'skill_id', 'proficiency_level', 'skill_name'], 'Skills': ['skill_name', 'skill_id', 'Python'], 'Team_Members': ['user_id', 'team_id'], 'Teams': ['leader_id', 'team_id', 'team_name', 'project_id', 'primary_skill', 'manager_id', 'location', 'team_leader_id'], 'Skill_Proficiencies': ['proficiency_level', 'skill_id', 'proficiency_level_num', 'skill_name']} and \n# the user question: Find all team members who have a skill with the name containing \"leadership\" and a proficiency level of \"Advanced\" and are part of a team with a name containing \"Management\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all team members who have a skill with the name containing \"leadership\" and a proficiency level of \"Advanced\" and are part of a team with a name containing \"Management\":",
        "output": "SELECT DISTINCT Users.username FROM Users JOIN User_Skills ON Users.user_id = User_Skills.user_id JOIN Skills ON User_Skills.skill_id = Skills.skill_id JOIN Skill_Proficiencies ON User_Skills.skill_id = Skill_Proficiencies.skill_id JOIN Team_Members ON Users.user_id = Team_Members.user_id JOIN Teams ON Team_Members.team_id = Teams.team_id WHERE Skills.skill_name LIKE '%leadership%' AND Skill_Proficiencies.proficiency_level = 'Advanced' AND Teams.team_name LIKE '%Management%';",
        "schema": "leadership",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "team_id",
                "completed_by",
                "skill_id",
                "first_name",
                "manager_id",
                "last_name",
                "job_title",
                "office_location",
                "role",
                "years_of_experience",
                "department_id",
                "salary"
            ],
            "User_Skills": [
                "user_id",
                "skill_id",
                "proficiency_level",
                "skill_name"
            ],
            "Skills": [
                "skill_name",
                "skill_id",
                "Python"
            ],
            "Team_Members": [
                "user_id",
                "team_id"
            ],
            "Teams": [
                "leader_id",
                "team_id",
                "team_name",
                "project_id",
                "primary_skill",
                "manager_id",
                "location",
                "team_leader_id"
            ],
            "Skill_Proficiencies": [
                "proficiency_level",
                "skill_id",
                "proficiency_level_num",
                "skill_name"
            ]
        }
    },
    {
        "id": 56,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employees': ['first_name', 'last_name', 'employee_id', 'department_id', 'job_title', 'hire_date', 'salary', 'department', 'birth_date', 'team', 'manager_id', 'email_address', 'phone_number', 'compliance_training_due_date', 'salary_amount', 'job_id', 'address', 'city', 'state', 'email', 'supervisor_id', 'num_projects', 'hourly_rate'], 'Orders': ['employee_id', 'total_price', 'order_date']} and \n# the user question: Find the names and total sales revenue of all employees who have made at least one sale in the past month and work in the \"Sales\" department but not in the \"Online Sales\" team.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and total sales revenue of all employees who have made at least one sale in the past month and work in the \"Sales\" department but not in the \"Online Sales\" team.",
        "output": "SELECT e.first_name, e.last_name, SUM(o.total_price) AS total_sales_revenue FROM Employees e INNER JOIN Orders o ON e.employee_id = o.employee_id WHERE strftime('%Y-%m', o.order_date) = strftime('%Y-%m', date('now')) AND e.department = 'Sales' AND e.team != 'Online Sales' GROUP BY e.employee_id ORDER BY total_sales_revenue DESC;",
        "schema": "human_resources_management",
        "processed_schema_content": {
            "Employees": [
                "first_name",
                "last_name",
                "employee_id",
                "department_id",
                "job_title",
                "hire_date",
                "salary",
                "department",
                "birth_date",
                "team",
                "manager_id",
                "email_address",
                "phone_number",
                "compliance_training_due_date",
                "salary_amount",
                "job_id",
                "address",
                "city",
                "state",
                "email",
                "supervisor_id",
                "num_projects",
                "hourly_rate"
            ],
            "Orders": [
                "employee_id",
                "total_price",
                "order_date"
            ]
        }
    },
    {
        "id": 57,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'sales': ['TOP', 'sales_date', 'customer_id', 'sales_amount', 'employee_id', 'sales_id', 'sales_revenue', 'product_id', 'order_number', 'quantity', 'date', 'amount', 'id', 'salesperson_id', 'price', 'representative_id', 'category', 'product']} and \n# the user question: Find the number of sales made by each salesperson in the month of June.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of sales made by each salesperson in the month of June.",
        "output": "SELECT salesperson_id, COUNT(*) AS number_of_sales FROM sales WHERE date >= '20230601' AND date < '20230701' GROUP BY salesperson_id;",
        "schema": "big_data",
        "processed_schema_content": {
            "sales": [
                "TOP",
                "sales_date",
                "customer_id",
                "sales_amount",
                "employee_id",
                "sales_id",
                "sales_revenue",
                "product_id",
                "order_number",
                "quantity",
                "date",
                "amount",
                "id",
                "salesperson_id",
                "price",
                "representative_id",
                "category",
                "product"
            ]
        }
    },
    {
        "id": 59,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Companies': ['company_name', 'revenue', 'industry', 'company_id', 'country', 'industry_category', 'headquarters', 'num_employees']} and \n# the user question: \"List the initiatives and their respective average completion time for each initiative category in the 'Retail' industry.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"List the initiatives and their respective average completion time for each initiative category in the 'Retail' industry.\"",
        "output": "SELECT `CSR Initiatives`.initiative_name, `CSR Initiatives`.category, AVG(DATEDIFF(`CSR Projects`.end_date, `CSR Projects`.start_date)) AS average_completion_time FROM `CSR Initiatives` JOIN `CSR Projects` ON `CSR Initiatives`.initiative_id = `CSR Projects`.initiative_id JOIN Companies ON `CSR Initiatives`.company_id = Companies.company_id WHERE Companies.industry = 'Retail' GROUP BY `CSR Initiatives`.initiative_id, `CSR Initiatives`.category;",
        "schema": "corporate_social_responsibility",
        "processed_schema_content": {
            "Companies": [
                "company_name",
                "revenue",
                "industry",
                "company_id",
                "country",
                "industry_category",
                "headquarters",
                "num_employees"
            ]
        }
    },
    {
        "id": 60,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Sales': ['CustomerID', 'Amount', 'SaleDate', 'SaleID', 'Product', 'Description', 'ProductID', 'TransactionID', 'SalespersonID', 'Commission', 'OrderID', 'SalesRepID', 'ProductCategory', 'Product_ID', 'Quantity', 'Date', 'Customer_ID'], 'Products': ['Price', 'ProductName', 'Category', 'ProductID', 'Cost', 'CategoryID', 'SubcategoryID', 'UnitPrice', 'LastOrderDate', 'UnitsInStock', 'SupplierID', 'UnitCost', 'Discontinued', 'ReorderLevel']} and \n# the user question: List all products that have been sold more than 10 times:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List all products that have been sold more than 10 times:",
        "output": "SELECT Products.ProductName, COUNT(*) AS TotalSales FROM Sales INNER JOIN Products ON Sales.ProductID = Products.ProductID GROUP BY Products.ProductID HAVING TotalSales > 10;",
        "schema": "accounting",
        "processed_schema_content": {
            "Sales": [
                "CustomerID",
                "Amount",
                "SaleDate",
                "SaleID",
                "Product",
                "Description",
                "ProductID",
                "TransactionID",
                "SalespersonID",
                "Commission",
                "OrderID",
                "SalesRepID",
                "ProductCategory",
                "Product_ID",
                "Quantity",
                "Date",
                "Customer_ID"
            ],
            "Products": [
                "Price",
                "ProductName",
                "Category",
                "ProductID",
                "Cost",
                "CategoryID",
                "SubcategoryID",
                "UnitPrice",
                "LastOrderDate",
                "UnitsInStock",
                "SupplierID",
                "UnitCost",
                "Discontinued",
                "ReorderLevel"
            ]
        }
    },
    {
        "id": 61,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Menu_Items': ['Menu_Item_ID', 'Menu_Item_name', 'Description', 'Price', 'Availability', 'Recipe_ID', 'Category_ID', 'Restaurant_ID', 'Vegetarian', 'Calories', 'Menu_Category_ID'], 'Orders': ['Order_ID', 'Customer_ID', 'Date_ordered', 'Total_price', 'Date_paid', 'Date_fulfilled', 'Loyalty_points', 'Reward_ID', 'Order_date', 'Time_ordered', 'Amount_due', 'Recipe_ID', 'Menu_Item_ID', 'Order_total', 'Payment_ID', 'Rating', 'Employee_ID', 'Location_ID', 'Preparation_time', 'Order_placed'], 'Order_Items': ['Order_Item_ID', 'Order_ID', 'Menu_Item_ID', 'Quantity', 'Menu_Item_I'], 'Customers': ['Customer_ID', 'Customer_name', 'Address', 'Phone_number', 'Email', 'Loyalty_points', 'Total_price', 'Customer_last_name', 'Customer_first_name', 'Customer_address', 'Customer_phone', 'Customer_email', 'State', 'Email_address']} and \n# the user question: Retrieve the name and total revenue generated by each customer who has placed at least one order in the past month, sorted in descending order by total revenue.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total revenue generated by each customer who has placed at least one order in the past month, sorted in descending order by total revenue.",
        "output": "SELECT Customers.Customer_name, SUM(Order_Items.Quantity * Menu_Items.Price) AS Total_revenue FROM Customers JOIN Orders ON Customers.Customer_ID = Orders.Customer_ID JOIN Order_Items ON Orders.Order_ID = Order_Items.Order_ID JOIN Menu_Items ON Order_Items.Menu_Item_ID = Menu_Items.Menu_Item_ID WHERE Orders.Order_placed >= DATE('now', '-1 month') GROUP BY Customers.Customer_ID ORDER BY Total_revenue DESC;",
        "schema": "food_and_drink",
        "processed_schema_content": {
            "Menu_Items": [
                "Menu_Item_ID",
                "Menu_Item_name",
                "Description",
                "Price",
                "Availability",
                "Recipe_ID",
                "Category_ID",
                "Restaurant_ID",
                "Vegetarian",
                "Calories",
                "Menu_Category_ID"
            ],
            "Orders": [
                "Order_ID",
                "Customer_ID",
                "Date_ordered",
                "Total_price",
                "Date_paid",
                "Date_fulfilled",
                "Loyalty_points",
                "Reward_ID",
                "Order_date",
                "Time_ordered",
                "Amount_due",
                "Recipe_ID",
                "Menu_Item_ID",
                "Order_total",
                "Payment_ID",
                "Rating",
                "Employee_ID",
                "Location_ID",
                "Preparation_time",
                "Order_placed"
            ],
            "Order_Items": [
                "Order_Item_ID",
                "Order_ID",
                "Menu_Item_ID",
                "Quantity",
                "Menu_Item_I"
            ],
            "Customers": [
                "Customer_ID",
                "Customer_name",
                "Address",
                "Phone_number",
                "Email",
                "Loyalty_points",
                "Total_price",
                "Customer_last_name",
                "Customer_first_name",
                "Customer_address",
                "Customer_phone",
                "Customer_email",
                "State",
                "Email_address"
            ]
        }
    },
    {
        "id": 62,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Ingredients': ['Ingredient_ID', 'Ingredient_name', 'Supplier_ID', 'Unit_ID', 'Price_per_unit', 'Unit_of_measurement', 'Unit_price', 'Date_last_purchased', 'Date_supplied', 'Description', 'Unit', 'Cost_per_unit', 'Stock_quantity', 'Quantity', 'Unit_of_measure'], 'Recipes': ['Recipe_ID', 'Recipe_name', 'Description', 'Difficulty_level', 'Total_cooking_time', 'Recipe_description', 'Vegetarian', 'Menu_Item_ID'], 'Recipe_Ingredients': ['Recipe_Ingredient_ID', 'Recipe_ID', 'Ingredient_ID', 'Quantity', 'Quantity_used']} and \n# the user question: Retrieve the name and total quantity of all ingredients used in menu items that are vegetarian, sorted by quantity in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total quantity of all ingredients used in menu items that are vegetarian, sorted by quantity in descending order.",
        "output": "SELECT Ingredients.Ingredient_name, SUM(Recipe_Ingredients.Quantity) AS Total_quantity FROM Ingredients JOIN Recipe_Ingredients ON Ingredients.Ingredient_ID = Recipe_Ingredients.Ingredient_ID JOIN Recipes ON Recipe_Ingredients.Recipe_ID = Recipes.Recipe_ID WHERE Recipes.Recipe_description LIKE '%vegetarian%' GROUP BY Ingredients.Ingredient_name ORDER BY Total_quantity DESC;",
        "schema": "food_and_drink",
        "processed_schema_content": {
            "Ingredients": [
                "Ingredient_ID",
                "Ingredient_name",
                "Supplier_ID",
                "Unit_ID",
                "Price_per_unit",
                "Unit_of_measurement",
                "Unit_price",
                "Date_last_purchased",
                "Date_supplied",
                "Description",
                "Unit",
                "Cost_per_unit",
                "Stock_quantity",
                "Quantity",
                "Unit_of_measure"
            ],
            "Recipes": [
                "Recipe_ID",
                "Recipe_name",
                "Description",
                "Difficulty_level",
                "Total_cooking_time",
                "Recipe_description",
                "Vegetarian",
                "Menu_Item_ID"
            ],
            "Recipe_Ingredients": [
                "Recipe_Ingredient_ID",
                "Recipe_ID",
                "Ingredient_ID",
                "Quantity",
                "Quantity_used"
            ]
        }
    },
    {
        "id": 64,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['username', 'user_id', 'email', 'john_doe', 'jane_doe', 'sarah_smith', 'tom_wilson', 'robert_king', 'alice_smith', 'jack_smith', 'jane_smith', 'mary_jones', 'joe_brown', 'james_smith', 'jessica_wong', 'david_smith', 'first_name', 'last_name', 'james_wong', 'emily_smith', 'jennifer_wilson', 'subscription', 'date_of_birth'], 'Models': ['created_by', 'model_name', 'description', 'model_id', 'modified_date', 'user_i', 'algorithm', 'project_i', 'Rating', 'Created_date', 'rating', 'creation_date', 'category_id'], 'Model_Evaluation': ['metric_name', 'metric_value', 'model_id']} and \n# the user question: What is the name of the user who has the highest total score for all their models?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What is the name of the user who has the highest total score for all their models?",
        "output": "SELECT Users.username FROM Users INNER JOIN Models ON Users.user_id = Models.created_by INNER JOIN Model_Evaluation ON Models.model_id = Model_Evaluation.model_id GROUP BY Users.user_id ORDER BY SUM(Model_Evaluation.metric_value) DESC LIMIT 1;",
        "schema": "data_mining",
        "processed_schema_content": {
            "Users": [
                "username",
                "user_id",
                "email",
                "john_doe",
                "jane_doe",
                "sarah_smith",
                "tom_wilson",
                "robert_king",
                "alice_smith",
                "jack_smith",
                "jane_smith",
                "mary_jones",
                "joe_brown",
                "james_smith",
                "jessica_wong",
                "david_smith",
                "first_name",
                "last_name",
                "james_wong",
                "emily_smith",
                "jennifer_wilson",
                "subscription",
                "date_of_birth"
            ],
            "Models": [
                "created_by",
                "model_name",
                "description",
                "model_id",
                "modified_date",
                "user_i",
                "algorithm",
                "project_i",
                "Rating",
                "Created_date",
                "rating",
                "creation_date",
                "category_id"
            ],
            "Model_Evaluation": [
                "metric_name",
                "metric_value",
                "model_id"
            ]
        }
    },
    {
        "id": 65,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'patients': ['first_name', 'last_name', 'patient_id', 'phone_number', 'email', 'phone'], 'medical_history': ['patient_id', 'medical_condition', 'diagnosis'], 'prescription': ['patient_id', 'prescription_id', 'prescription_date', 'type', 'practitioner_id'], 'prescription_items': ['formula_id', 'prescription_id'], 'herbal_formulas': ['formula_id', 'formula_name', 'price', 'num_ingredients', 'ingredients', 'name']} and \n# the user question: Retrieve the names and email addresses of patients who have been prescribed herbal formulas containing more than 7 ingredients and have also been diagnosed with a medical condition containing the word \"depression\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of patients who have been prescribed herbal formulas containing more than 7 ingredients and have also been diagnosed with a medical condition containing the word \"depression\":",
        "output": "SELECT DISTINCT p.first_name, p.last_name, p.email FROM patients p JOIN medical_history mh ON p.patient_id = mh.patient_id JOIN prescription pr ON p.patient_id = pr.patient_id JOIN prescription_items pi ON pr.prescription_id = pi.prescription_id JOIN herbal_formulas hf ON pi.formula_id = hf.formula_id WHERE hf.num_ingredients > 7 AND mh.medical_condition LIKE '%depression%';",
        "schema": "acupuncture",
        "processed_schema_content": {
            "patients": [
                "first_name",
                "last_name",
                "patient_id",
                "phone_number",
                "email",
                "phone"
            ],
            "medical_history": [
                "patient_id",
                "medical_condition",
                "diagnosis"
            ],
            "prescription": [
                "patient_id",
                "prescription_id",
                "prescription_date",
                "type",
                "practitioner_id"
            ],
            "prescription_items": [
                "formula_id",
                "prescription_id"
            ],
            "herbal_formulas": [
                "formula_id",
                "formula_name",
                "price",
                "num_ingredients",
                "ingredients",
                "name"
            ]
        }
    },
    {
        "id": 66,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'category_id', 'price', 'units_in_stock', 'price_per_unit', 'discount', 'country_of_origin', 'rating', 'discontinued', 'is_discontinued', 'unit_price', 'last_restock_date', 'quantity_in_stock', 'supplier_id', 'discontinued_date', 'unit_cost', 'brand_id', 'stock', 'stock_quantity', 'brand_name', 'cost', 'Ingredients', 'Category', 'Price', 'ProductID'], 'Orders': ['order_id', 'total_price', 'user_id', 'order_date', 'status', 'shipping_method', 'shipping_date', 'delivered_date', 'coupon_code', 'category_id', 'product_id', 'shipped_date', 'order_total', 'ship_date'], 'Order_Details': ['order_id', 'product_id', 'price_per_unit', 'quantity', 'user_id', 'total_price', 'order_detail_id', 'unit_price']} and \n# the user question: Find the orders that contain products with a discount of at least 20% and have been shipped.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the orders that contain products with a discount of at least 20% and have been shipped.",
        "output": "SELECT DISTINCT o.order_id, o.order_date FROM Orders o JOIN Order_Details od ON o.order_id = od.order_id JOIN Products p ON od.product_id = p.product_id WHERE p.discount >= 0.2 AND o.shipped_date IS NOT NULL;",
        "schema": "cosmetics_making",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "category_id",
                "price",
                "units_in_stock",
                "price_per_unit",
                "discount",
                "country_of_origin",
                "rating",
                "discontinued",
                "is_discontinued",
                "unit_price",
                "last_restock_date",
                "quantity_in_stock",
                "supplier_id",
                "discontinued_date",
                "unit_cost",
                "brand_id",
                "stock",
                "stock_quantity",
                "brand_name",
                "cost",
                "Ingredients",
                "Category",
                "Price",
                "ProductID"
            ],
            "Orders": [
                "order_id",
                "total_price",
                "user_id",
                "order_date",
                "status",
                "shipping_method",
                "shipping_date",
                "delivered_date",
                "coupon_code",
                "category_id",
                "product_id",
                "shipped_date",
                "order_total",
                "ship_date"
            ],
            "Order_Details": [
                "order_id",
                "product_id",
                "price_per_unit",
                "quantity",
                "user_id",
                "total_price",
                "order_detail_id",
                "unit_price"
            ]
        }
    },
    {
        "id": 68,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Dance': ['name', 'tempo', 'style', 'id', 'choreographer_id', 'type', 'dance_class_id'], 'Dancer': ['experience', 'height', 'name', 'gender', 'level', 'age', 'id', 'country', 'dancer_id', 'PerformanceID', 'DancerID'], 'Choreographer': ['phone_number', 'id', 'name', 'email', 'choreographer_id'], 'DancePerformance': ['dance_id', 'id', 'competition_id', 'duration', 'dancer_id']} and \n# the user question: Retrieve the names and ages of all dancers who have performed a tap dance that was choreographed by Savion Glover.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and ages of all dancers who have performed a tap dance that was choreographed by Savion Glover.",
        "output": "SELECT Dancer.name, Dancer.age FROM Dancer INNER JOIN DancePerformance ON Dancer.id = DancePerformance.dancer_id INNER JOIN Dance ON DancePerformance.dance_id = Dance.id INNER JOIN Choreographer ON Dance.choreographer_id = Choreographer.id WHERE Dance.style = 'tap' AND Choreographer.name = 'Savion Glover';",
        "schema": "dance",
        "processed_schema_content": {
            "Dance": [
                "name",
                "tempo",
                "style",
                "id",
                "choreographer_id",
                "type",
                "dance_class_id"
            ],
            "Dancer": [
                "experience",
                "height",
                "name",
                "gender",
                "level",
                "age",
                "id",
                "country",
                "dancer_id",
                "PerformanceID",
                "DancerID"
            ],
            "Choreographer": [
                "phone_number",
                "id",
                "name",
                "email",
                "choreographer_id"
            ],
            "DancePerformance": [
                "dance_id",
                "id",
                "competition_id",
                "duration",
                "dancer_id"
            ]
        }
    },
    {
        "id": 69,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $150 million and have been updated in the last 3000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $150 million and have been updated in the last 3000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 150000000 AND Creatives.updated_at BETWEEN DATE('now', '-3000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        }
    },
    {
        "id": 70,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Songs': ['song_title', 'song_id', 'duration', 'album_id', 'artist_id', 'release_date', 'genre_id'], 'Albums': ['album_title', 'artist_id', 'album_id', 'release_date', 'SUM###', 'label_id', 'release_year'], 'Songs_Charts': ['chart_id', 'song_id', 'position', 'artist_id']} and \n# the user question: Get the count of songs in each album that have chart positions in the top 5 on any chart and have a duration longer than the average duration of all songs in their respective albums, ordered by the album title:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the count of songs in each album that have chart positions in the top 5 on any chart and have a duration longer than the average duration of all songs in their respective albums, ordered by the album title:",
        "output": "SELECT Albums.album_title, COUNT(Songs.song_id) AS song_count FROM Albums JOIN Songs ON Albums.album_id = Songs.album_id JOIN Songs_Charts ON Songs.song_id = Songs_Charts.song_id WHERE Songs_Charts.position BETWEEN 1 AND 5 AND Songs.duration > (SELECT AVG(duration) FROM Songs WHERE Songs.album_id = Albums.album_id) GROUP BY Albums.album_id ORDER BY Albums.album_title;",
        "schema": "country_music",
        "processed_schema_content": {
            "Songs": [
                "song_title",
                "song_id",
                "duration",
                "album_id",
                "artist_id",
                "release_date",
                "genre_id"
            ],
            "Albums": [
                "album_title",
                "artist_id",
                "album_id",
                "release_date",
                "SUM###",
                "label_id",
                "release_year"
            ],
            "Songs_Charts": [
                "chart_id",
                "song_id",
                "position",
                "artist_id"
            ]
        }
    },
    {
        "id": 71,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'injuries': ['injury_type', 'athlete_id', 'injury_id', 'injury_date', 'injury_duration'], 'athlete_injury_status': ['injury_id', 'status_id'], 'injury_status': ['status_name', 'status_id'], 'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'mental_skills': ['skill_id', 'skill_name', 'skill_description', 'athlete_id', 'Focus', 'Visualization', 'skill_mastered', 'skill_level', 'Excellent', 'High', 'Low']} and \n# the user question: Get a list of all athletes who have a \"Beginner\" level in the \"Visualization\" mental skill and a \"Healthy\" injury status.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get a list of all athletes who have a \"Beginner\" level in the \"Visualization\" mental skill and a \"Healthy\" injury status.",
        "output": "SELECT athletes.name, injury_status.status_name FROM athletes INNER JOIN injuries ON athletes.athlete_id = injuries.athlete_id INNER JOIN athlete_injury_status ON injuries.injury_id = athlete_injury_status.injury_id INNER JOIN injury_status ON athlete_injury_status.status_id = injury_status.status_id INNER JOIN athlete_skills ON athletes.athlete_id = athlete_skills.athlete_id INNER JOIN mental_skills ON athlete_skills.skill_id = mental_skills.skill_id WHERE injury_status.status_name = 'Healthy' AND mental_skills.skill_name = 'Visualization' AND athlete_skills.skill_level = 'Beginner';",
        "schema": "sports_psychology",
        "processed_schema_content": {
            "athletes": [
                "name",
                "athlete_id",
                "team_id",
                "last_name",
                "athlete_name",
                "age"
            ],
            "injuries": [
                "injury_type",
                "athlete_id",
                "injury_id",
                "injury_date",
                "injury_duration"
            ],
            "athlete_injury_status": [
                "injury_id",
                "status_id"
            ],
            "injury_status": [
                "status_name",
                "status_id"
            ],
            "athlete_skills": [
                "skill_id",
                "athlete_id",
                "skill_level",
                "skill_mastered",
                "self_talk",
                "mental_preparation",
                "imagery",
                "goal_setting",
                "anxiety",
                "focus",
                "mental_toughness",
                "confidence",
                "motivation"
            ],
            "mental_skills": [
                "skill_id",
                "skill_name",
                "skill_description",
                "athlete_id",
                "Focus",
                "Visualization",
                "skill_mastered",
                "skill_level",
                "Excellent",
                "High",
                "Low"
            ]
        }
    },
    {
        "id": 73,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Ingredients': ['Ingredient_ID', 'Ingredient_name', 'Supplier_ID', 'Unit_ID', 'Price_per_unit', 'Unit_of_measurement', 'Unit_price', 'Date_last_purchased', 'Date_supplied', 'Description', 'Unit', 'Cost_per_unit', 'Stock_quantity', 'Quantity', 'Unit_of_measure'], 'Suppliers': ['Supplier_ID', 'Supplier_name', 'Address', 'Phone_number', 'Email', 'Contact_name', 'Date_last_contacted', 'Contact_person', 'Supplier_rating', 'Supplier_address', 'Supplier_phone'], 'Ingredient_suppliers': ['Supplier_ID', 'Ingredient_ID', 'Quantity_supplied', 'Supplier_address']} and \n# the user question: Retrieve the name and total cost of all ingredients that are supplied by 'XYZ Foods', sorted by ingredient name in ascending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all ingredients that are supplied by 'XYZ Foods', sorted by ingredient name in ascending order.",
        "output": "SELECT Ingredients.Ingredient_name, SUM(Ingredients.Price_per_unit * Ingredients.Quantity) AS Total_cost FROM Ingredients JOIN Ingredient_suppliers ON Ingredients.Ingredient_ID = Ingredient_suppliers.Ingredient_ID JOIN Suppliers ON Ingredient_suppliers.Supplier_ID = Suppliers.Supplier_ID WHERE Suppliers.Supplier_name = 'XYZ Foods' GROUP BY Ingredients.Ingredient_ID ORDER BY Ingredients.Ingredient_name ASC;",
        "schema": "food_and_drink",
        "processed_schema_content": {
            "Ingredients": [
                "Ingredient_ID",
                "Ingredient_name",
                "Supplier_ID",
                "Unit_ID",
                "Price_per_unit",
                "Unit_of_measurement",
                "Unit_price",
                "Date_last_purchased",
                "Date_supplied",
                "Description",
                "Unit",
                "Cost_per_unit",
                "Stock_quantity",
                "Quantity",
                "Unit_of_measure"
            ],
            "Suppliers": [
                "Supplier_ID",
                "Supplier_name",
                "Address",
                "Phone_number",
                "Email",
                "Contact_name",
                "Date_last_contacted",
                "Contact_person",
                "Supplier_rating",
                "Supplier_address",
                "Supplier_phone"
            ],
            "Ingredient_suppliers": [
                "Supplier_ID",
                "Ingredient_ID",
                "Quantity_supplied",
                "Supplier_address"
            ]
        }
    },
    {
        "id": 74,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Incidents': ['reported_by_user_id', 'location_id', 'created_at', 'incident_id', 'evacuation_status', 'severity_level', 'vehicle_id', 'status', 'reported_time', 'location', 'type', 'start_time', 'assigned_to_vehicle_id', 'incident_date', 'incident_type', 'category_id', 'reporting_agency_id', 'reported_at', 'date_id', 'description', 'date', 'time'], 'Vehicles': ['vehicle_type', 'agency_id', 'status', 'vehicle_plate_number', 'location_id', 'vehicle_id', 'license_plate_number', 'vin', 'fuel_level', 'mileage', 'model', 'make', 'availability', 'assigned_to_agency_id', 'responded_to_incident_id', 'dispatched_time', 'num_vehicles_involved'], 'Officers': ['badge_number', 'officer_name', 'officer_id', 'assigned_to_agency_id', 'phone_number', 'rank', 'date_of_birth'], 'Responds_To': ['responding_officer_id', 'responded_to_incident_id', 'response_time', 'responding_agency_id', 'officer_id', 'responded_at', 'response_time_minutes', 'respond'], 'Involves': ['involving_incident_id', 'involving_suspect_id', 'involving_weapon_id', 'num_users_injured', 'involving_vehicle_id', 'involving_hazard_id', 'involving_crime_id', 'involving_incident', 'involving']} and \n# the user question: Retrieve the names and corresponding badge numbers of all officers who have responded to incidents involving more than five vehicles.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and corresponding badge numbers of all officers who have responded to incidents involving more than five vehicles.",
        "output": "SELECT DISTINCT Officers.officer_name, Officers.badge_number FROM Officers INNER JOIN Responds_To ON Officers.officer_id = Responds_To.responding_officer_id INNER JOIN Incidents ON Responds_To.responded_to_incident_id = Incidents.incident_id INNER JOIN Involves ON Incidents.incident_id = Involves.involving_incident_id INNER JOIN Vehicles ON Involves.involving_vehicle_id = Vehicles.vehicle_id WHERE Vehicles.num_vehicles_involved > 5",
        "schema": "intelligent_public_safety",
        "processed_schema_content": {
            "Incidents": [
                "reported_by_user_id",
                "location_id",
                "created_at",
                "incident_id",
                "evacuation_status",
                "severity_level",
                "vehicle_id",
                "status",
                "reported_time",
                "location",
                "type",
                "start_time",
                "assigned_to_vehicle_id",
                "incident_date",
                "incident_type",
                "category_id",
                "reporting_agency_id",
                "reported_at",
                "date_id",
                "description",
                "date",
                "time"
            ],
            "Vehicles": [
                "vehicle_type",
                "agency_id",
                "status",
                "vehicle_plate_number",
                "location_id",
                "vehicle_id",
                "license_plate_number",
                "vin",
                "fuel_level",
                "mileage",
                "model",
                "make",
                "availability",
                "assigned_to_agency_id",
                "responded_to_incident_id",
                "dispatched_time",
                "num_vehicles_involved"
            ],
            "Officers": [
                "badge_number",
                "officer_name",
                "officer_id",
                "assigned_to_agency_id",
                "phone_number",
                "rank",
                "date_of_birth"
            ],
            "Responds_To": [
                "responding_officer_id",
                "responded_to_incident_id",
                "response_time",
                "responding_agency_id",
                "officer_id",
                "responded_at",
                "response_time_minutes",
                "respond"
            ],
            "Involves": [
                "involving_incident_id",
                "involving_suspect_id",
                "involving_weapon_id",
                "num_users_injured",
                "involving_vehicle_id",
                "involving_hazard_id",
                "involving_crime_id",
                "involving_incident",
                "involving"
            ]
        }
    },
    {
        "id": 77,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Authors': ['first_name', 'author_id', 'last_name', 'nationality', 'author_name', 'author_city', 'AuthorID', 'AuthorName'], 'Customers': ['customer_id', 'email', 'first_name', 'last_name', 'country_id', 'address', 'city', 'country', 'state', 'loyalty_level', 'York', 'customer_name', 'customer_city', 'phone', 'subscribed_to_newsletter', 'has_ordered_online'], 'Order_Items': ['price', 'quantity', 'order_id', 'book_id', 'customer_id', 'publisher_id', 'is_returned', 'product_id', 'is_delivered', 'total_price', 'order_date'], 'Orders': ['order_date', 'order_id', 'customer_id', 'coupon_code', 'total_cost', 'total_quantity', 'shipping_address_id', 'total_price', 'total_amount', 'salesperson_id', 'book_id', 'channel_id', 'Order_Date', 'Order_Total', 'Customer_Name']} and \n# the user question: Retrieve the titles and authors of books that have been ordered by customers from at least 3 different countries.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the titles and authors of books that have been ordered by customers from at least 3 different countries.",
        "output": "SELECT b.title, CONCAT(a.first_name, ' ', a.last_name) AS author FROM Books b JOIN Authors a ON b.author_id = a.author_id WHERE b.book_id IN ( SELECT oi.book_id FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id GROUP BY oi.book_id HAVING COUNT(DISTINCT c.country) >= 3 );",
        "schema": "marketing_books",
        "processed_schema_content": {
            "Books": [
                "book_id",
                "title",
                "publisher_id",
                "publication_date",
                "author_id",
                "price",
                "publication_year",
                "publisher",
                "stock",
                "genre",
                "series",
                "year_published",
                "release_date",
                "word_count",
                "avg_rating",
                "A001",
                "genre_id",
                "stock_count",
                "category_id",
                "book_title",
                "rating",
                "available_for_purchase",
                "BookID",
                "BookTitle",
                "PublicationYear",
                "PublisherID",
                "Price"
            ],
            "Authors": [
                "first_name",
                "author_id",
                "last_name",
                "nationality",
                "author_name",
                "author_city",
                "AuthorID",
                "AuthorName"
            ],
            "Customers": [
                "customer_id",
                "email",
                "first_name",
                "last_name",
                "country_id",
                "address",
                "city",
                "country",
                "state",
                "loyalty_level",
                "York",
                "customer_name",
                "customer_city",
                "phone",
                "subscribed_to_newsletter",
                "has_ordered_online"
            ],
            "Order_Items": [
                "price",
                "quantity",
                "order_id",
                "book_id",
                "customer_id",
                "publisher_id",
                "is_returned",
                "product_id",
                "is_delivered",
                "total_price",
                "order_date"
            ],
            "Orders": [
                "order_date",
                "order_id",
                "customer_id",
                "coupon_code",
                "total_cost",
                "total_quantity",
                "shipping_address_id",
                "total_price",
                "total_amount",
                "salesperson_id",
                "book_id",
                "channel_id",
                "Order_Date",
                "Order_Total",
                "Customer_Name"
            ]
        }
    },
    {
        "id": 78,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Species': ['species_id', 'name', 'common_name', 'classification_id', 'genus', 'family_id', 'scientific_name', 'class_id', 'taxonomy', 'category', 'conservation_status', 'population_trend', 'habitat', 'migration_pattern', 'min_depth_range', 'max_depth_range', 'body_size', 'body_temperature_range', 'migratory_behavior', 'species_name', 'discovery_year', 'class_name', 'is_venomous', 'order_name'], 'MorphologyData': ['morphology_id', 'species_id', 'measurement_type', 'measurement_value', 'measurement_unit', 'measurement_date', 'value', 'unit']} and \n# the user question: Retrieve the name and average weight for all fish species with a length between 50-100 cm:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and average weight for all fish species with a length between 50-100 cm:",
        "output": "SELECT Species.name, AVG(MorphologyData.value) AS average_weight FROM Species INNER JOIN MorphologyData ON Species.species_id = MorphologyData.species_id WHERE MorphologyData.measurement_type = 'Length' AND MorphologyData.value BETWEEN 50 AND 100 GROUP BY Species.species_id;",
        "schema": "marine_biology",
        "processed_schema_content": {
            "Species": [
                "species_id",
                "name",
                "common_name",
                "classification_id",
                "genus",
                "family_id",
                "scientific_name",
                "class_id",
                "taxonomy",
                "category",
                "conservation_status",
                "population_trend",
                "habitat",
                "migration_pattern",
                "min_depth_range",
                "max_depth_range",
                "body_size",
                "body_temperature_range",
                "migratory_behavior",
                "species_name",
                "discovery_year",
                "class_name",
                "is_venomous",
                "order_name"
            ],
            "MorphologyData": [
                "morphology_id",
                "species_id",
                "measurement_type",
                "measurement_value",
                "measurement_unit",
                "measurement_date",
                "value",
                "unit"
            ]
        }
    },
    {
        "id": 79,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'celestial_bodies': ['radius', 'mass', 'name', 'type', 'number_of_moons', 'distance_from_sun', 'id', 'distance_from_earth', 'orbital_period', 'diameter', 'orbiting_body_id', 'average_surface_temperature', 'surface_temperature', 'perihelion_distance', 'period', 'semimajor_axis', 'redshift', 'velocity', 'luminosity', 'schwarzschild_radius', 'eccentricity', 'aphelion_distance', 'spin_period', 'semi_major_axis', 'surface_gravity', 'temperature', 'magnitude', 'accretion_disk_temperature', 'rotation_period', 'obliquity', 'pulse_period', 'peak_absolute_magnitude', 'albedo', 'apparent_magnitude', 'absolute_magnitude', 'spectral_type', 'discovery_year', 'spectral_class', 'distance_from_star', 'discovery_method_id', 'equilibrium_temperature', 'metallicity', 'age', 'effective_temperature', 'atmospheric_composition', 'inclination', 'parallax', 'rotation_velocity', 'axial_tilt', 'orbital_inclination', 'density', 'rotational_velocity', 'magnetic_field_strength', 'composition', 'rotational_period', 'spin', 'distance_from_galactic_center', 'binary_system', 'constellation', 'stellar_evolution_stage', 'star_cluster_type', 'galaxy', 'orbital_eccentricity', 'star_spectral_type', 'orbital_period_unit', 'diameter_unit', 'discovery_method', 'pulse_period_unit', 'distance_unit', 'radius_unit', 'avg_temperature', 'temperature_unit', 'aphelion_unit', 'perihelion_unit', 'event_horizon_unit', 'event_horizon_radius', 'luminosity_distance', 'orbit_type', 'equatorial_diameter', 'gravity_unit', 'escape_velocity', 'angle_unit', 'surface_area', 'density_unit', 'parent_body_id', 'atmospheric_pressure', 'luminosity_class', 'inner_habitable_zone', 'outer_habitable_zone', 'period_unit', 'classification', 'pressure_unit', 'surface_pressure', 'orbiting', 'distance', 'proper_motion', 'proper_motion_unit', 'mean_radius', 'mass_unit', 'temperature_range', 'Gas', 'Giant', 'brightness_temperature', 'parallax_unit', 'metallicity_unit', 'magnetic_field_unit', 'spin_parameter', 'orbiting_id', 'stellar_mass', 'stage', 'radial_velocity', 'host_star', 'accretion_rate', 'core_type']} and \n# the user question: Retrieve the name and mass of all celestial bodies that have a type of 'Red giant' and a mass greater than 1.5 solar masses.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and mass of all celestial bodies that have a type of 'Red giant' and a mass greater than 1.5 solar masses.",
        "output": "SELECT name, mass FROM celestial_bodies WHERE type = 'Red giant' AND mass > 1.5 * (SELECT mass FROM celestial_bodies WHERE name = 'Sun');",
        "schema": "astronomy",
        "processed_schema_content": {
            "celestial_bodies": [
                "radius",
                "mass",
                "name",
                "type",
                "number_of_moons",
                "distance_from_sun",
                "id",
                "distance_from_earth",
                "orbital_period",
                "diameter",
                "orbiting_body_id",
                "average_surface_temperature",
                "surface_temperature",
                "perihelion_distance",
                "period",
                "semimajor_axis",
                "redshift",
                "velocity",
                "luminosity",
                "schwarzschild_radius",
                "eccentricity",
                "aphelion_distance",
                "spin_period",
                "semi_major_axis",
                "surface_gravity",
                "temperature",
                "magnitude",
                "accretion_disk_temperature",
                "rotation_period",
                "obliquity",
                "pulse_period",
                "peak_absolute_magnitude",
                "albedo",
                "apparent_magnitude",
                "absolute_magnitude",
                "spectral_type",
                "discovery_year",
                "spectral_class",
                "distance_from_star",
                "discovery_method_id",
                "equilibrium_temperature",
                "metallicity",
                "age",
                "effective_temperature",
                "atmospheric_composition",
                "inclination",
                "parallax",
                "rotation_velocity",
                "axial_tilt",
                "orbital_inclination",
                "density",
                "rotational_velocity",
                "magnetic_field_strength",
                "composition",
                "rotational_period",
                "spin",
                "distance_from_galactic_center",
                "binary_system",
                "constellation",
                "stellar_evolution_stage",
                "star_cluster_type",
                "galaxy",
                "orbital_eccentricity",
                "star_spectral_type",
                "orbital_period_unit",
                "diameter_unit",
                "discovery_method",
                "pulse_period_unit",
                "distance_unit",
                "radius_unit",
                "avg_temperature",
                "temperature_unit",
                "aphelion_unit",
                "perihelion_unit",
                "event_horizon_unit",
                "event_horizon_radius",
                "luminosity_distance",
                "orbit_type",
                "equatorial_diameter",
                "gravity_unit",
                "escape_velocity",
                "angle_unit",
                "surface_area",
                "density_unit",
                "parent_body_id",
                "atmospheric_pressure",
                "luminosity_class",
                "inner_habitable_zone",
                "outer_habitable_zone",
                "period_unit",
                "classification",
                "pressure_unit",
                "surface_pressure",
                "orbiting",
                "distance",
                "proper_motion",
                "proper_motion_unit",
                "mean_radius",
                "mass_unit",
                "temperature_range",
                "Gas",
                "Giant",
                "brightness_temperature",
                "parallax_unit",
                "metallicity_unit",
                "magnetic_field_unit",
                "spin_parameter",
                "orbiting_id",
                "stellar_mass",
                "stage",
                "radial_velocity",
                "host_star",
                "accretion_rate",
                "core_type"
            ]
        }
    },
    {
        "id": 82,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Board': ['model', 'flex', 'brand', 'board_id', 'camber_profile', 'length', 'width', 'camber', 'shape', 'stiffness_rating', 'flex_rating', 'rocker', 'model_name']} and \n# the user question: Retrieve the brand and model of all snowboards with a camber profile of \"Rocker\" and a flex of 4 or greater and a length between 140 and 150 cm.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the brand and model of all snowboards with a camber profile of \"Rocker\" and a flex of 4 or greater and a length between 140 and 150 cm.",
        "output": "SELECT brand, model FROM Board WHERE camber_profile = 'Rocker' AND flex >= 4 AND length BETWEEN 140 AND 150;",
        "schema": "snowboarding",
        "processed_schema_content": {
            "Board": [
                "model",
                "flex",
                "brand",
                "board_id",
                "camber_profile",
                "length",
                "width",
                "camber",
                "shape",
                "stiffness_rating",
                "flex_rating",
                "rocker",
                "model_name"
            ]
        }
    },
    {
        "id": 85,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Artists': ['artist_name', 'nationality', 'artist_id', 'birth_date', 'experience_years', 'country', 'birthdate'], 'Sculptures': ['width', 'depth', 'material', 'height', 'creation_date', 'sculpture_name', 'sculpture_id', 'artist_id', 'collection_id', 'material_id', 'rating']} and \n# the user question: Retrieve the names of sculptures that have a height greater than the average height of sculptures created by artists with more than 78 years of experience:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of sculptures that have a height greater than the average height of sculptures created by artists with more than 78 years of experience:",
        "output": "SELECT Sculptures.sculpture_name FROM Sculptures JOIN Artists ON Sculptures.artist_id = Artists.artist_id WHERE Sculptures.height > ( SELECT AVG(Sculptures.height) FROM Sculptures JOIN Artists ON Sculptures.artist_id = Artists.artist_id WHERE Artists.experience_years > 78 );",
        "schema": "sculpting",
        "processed_schema_content": {
            "Artists": [
                "artist_name",
                "nationality",
                "artist_id",
                "birth_date",
                "experience_years",
                "country",
                "birthdate"
            ],
            "Sculptures": [
                "width",
                "depth",
                "material",
                "height",
                "creation_date",
                "sculpture_name",
                "sculpture_id",
                "artist_id",
                "collection_id",
                "material_id",
                "rating"
            ]
        }
    },
    {
        "id": 87,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Performances': ['rating', 'comedian_id', 'show_id', 'performance_id', 'special_id', 'venue_id', 'production_id', 'performance_date'], 'Specials': ['title', 'special_id', 'description', 'year', 'duration', 'release_year', 'show_id', 'production_id', 'release_date'], 'Show_Ratings': ['rating', 'show_id', 'rating_id', 'category_id', 'comedian_id'], 'Ratings': ['rating', 'rating_id', 'show_id', 'category'], 'User_Ratings': ['user_id', 'rating_id', 'stars']} and \n# the user question: Retrieve the titles of all specials that have not been rated by any user.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the titles of all specials that have not been rated by any user.",
        "output": "SELECT s.title FROM Specials s WHERE s.special_id NOT IN ( SELECT p.special_id FROM Performances p JOIN Show_Ratings sr ON sr.show_id = p.show_id JOIN Ratings r ON r.rating_id = sr.rating_id JOIN User_Ratings ur ON ur.rating_id = r.rating_id );",
        "schema": "stand-up_comedy",
        "processed_schema_content": {
            "Performances": [
                "rating",
                "comedian_id",
                "show_id",
                "performance_id",
                "special_id",
                "venue_id",
                "production_id",
                "performance_date"
            ],
            "Specials": [
                "title",
                "special_id",
                "description",
                "year",
                "duration",
                "release_year",
                "show_id",
                "production_id",
                "release_date"
            ],
            "Show_Ratings": [
                "rating",
                "show_id",
                "rating_id",
                "category_id",
                "comedian_id"
            ],
            "Ratings": [
                "rating",
                "rating_id",
                "show_id",
                "category"
            ],
            "User_Ratings": [
                "user_id",
                "rating_id",
                "stars"
            ]
        }
    },
    {
        "id": 88,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Employees': ['first_name', 'employee_id', 'last_name', 'hire_date', 'salary', 'job_title_id', 'department_id', 'location_id', 'job_title', 'employee_status_id', 'employee_experience', 'certification_id', 'equipment_rental_cost', 'hourly_rate', 'Salary', 'Department'], 'Project_Costs': ['project_id', 'total_cost', 'equipment_cost', 'labor_cost', 'material_cost', 'square_feet'], 'Project_Managers': ['project_manager_id', 'employee_id', 'project_id']} and \n# the user question: List all the projects that have a project manager whose last name is \"Johnson\" and have a budget of more than $500,000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List all the projects that have a project manager whose last name is \"Johnson\" and have a budget of more than $500,000.",
        "output": "SELECT DISTINCT p.project_name FROM Projects p INNER JOIN Project_Managers pm ON p.project_manager_id = pm.project_manager_id INNER JOIN Employees e ON pm.employee_id = e.employee_id INNER JOIN Project_Costs pc ON p.project_id = pc.project_id WHERE e.last_name = 'Johnson' AND pc.total_cost > 500000;",
        "schema": "civil_engineering",
        "processed_schema_content": {
            "Projects": [
                "project_name",
                "project_id",
                "end_date",
                "start_date",
                "square_footage",
                "status",
                "project_manager_id",
                "project_status_id",
                "project_completion_date",
                "project_start_date",
                "project_budget",
                "project_end_date",
                "project_deadline",
                "project_location",
                "supervisor_id",
                "completion_date",
                "Expansion",
                "Highway",
                "Construction",
                "Building",
                "Office",
                "budget",
                "actual_end_date",
                "actual_start_date",
                "State",
                "Project_ID",
                "Name",
                "Status",
                "Start_Date",
                "expected_completion_date",
                "Completion_Date",
                "Actual_Costs",
                "Project_Name",
                "Budget",
                "Client_ID",
                "cost",
                "name",
                "id"
            ],
            "Employees": [
                "first_name",
                "employee_id",
                "last_name",
                "hire_date",
                "salary",
                "job_title_id",
                "department_id",
                "location_id",
                "job_title",
                "employee_status_id",
                "employee_experience",
                "certification_id",
                "equipment_rental_cost",
                "hourly_rate",
                "Salary",
                "Department"
            ],
            "Project_Costs": [
                "project_id",
                "total_cost",
                "equipment_cost",
                "labor_cost",
                "material_cost",
                "square_feet"
            ],
            "Project_Managers": [
                "project_manager_id",
                "employee_id",
                "project_id"
            ]
        }
    },
    {
        "id": 91,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name'], 'RiskActions': ['action_id', 'risk_id', 'action_name', 'due_date', 'assigned_to', 'status']} and \n# the user question: Text Query: \"Retrieve the risk actions assigned to employee with employee_id = 3.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the risk actions assigned to employee with employee_id = 3.\"",
        "output": "SELECT RiskActions.action_name, RiskActions.due_date, RiskActions.status FROM RiskActions INNER JOIN Employees ON RiskActions.assigned_to = Employees.employee_id WHERE Employees.employee_id = 3;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Employees": [
                "employee_id",
                "department_id",
                "first_name",
                "last_name",
                "email",
                "phone_number",
                "employee_name"
            ],
            "RiskActions": [
                "action_id",
                "risk_id",
                "action_name",
                "due_date",
                "assigned_to",
                "status"
            ]
        }
    },
    {
        "id": 93,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customers': ['customer_id', 'customer_name', 'company_name', 'city', 'country', 'address_id', 'first_name', 'last_name', 'region', 'contact_name', 'email', 'phone', 'registration_date', 'CustomerID', 'CustomerName'], 'Orders': ['order_total', 'customer_id', 'order_date', 'order_id', 'employee_id', 'shipper_id', 'supplier_id', 'shipped_date', 'required_date', 'shipping_cost', 'shipping_refunded', 'quantity', 'unit_price', 'product_id', 'total_amount', 'refund_issued', 'cancelled_date', 'returned_date', 'shipping_date', 'status', 'OrderDate', 'OrderStatus', 'ShippedDate', 'OrderID', 'CustomerID']} and \n# the user question: Find the orders that were cancelled in the last month and need to be refunded.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the orders that were cancelled in the last month and need to be refunded.",
        "output": "SELECT Orders.order_id, Orders.order_date, Orders.cancelled_date, Customers.company_name, Orders.total_amount FROM Orders INNER JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Orders.cancelled_date BETWEEN DATE('now', '-1 month') AND DATE('now') AND Orders.refund_issued = 0;",
        "schema": "operations_management",
        "processed_schema_content": {
            "Customers": [
                "customer_id",
                "customer_name",
                "company_name",
                "city",
                "country",
                "address_id",
                "first_name",
                "last_name",
                "region",
                "contact_name",
                "email",
                "phone",
                "registration_date",
                "CustomerID",
                "CustomerName"
            ],
            "Orders": [
                "order_total",
                "customer_id",
                "order_date",
                "order_id",
                "employee_id",
                "shipper_id",
                "supplier_id",
                "shipped_date",
                "required_date",
                "shipping_cost",
                "shipping_refunded",
                "quantity",
                "unit_price",
                "product_id",
                "total_amount",
                "refund_issued",
                "cancelled_date",
                "returned_date",
                "shipping_date",
                "status",
                "OrderDate",
                "OrderStatus",
                "ShippedDate",
                "OrderID",
                "CustomerID"
            ]
        }
    },
    {
        "id": 94,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'coaches': ['name', 'coach_id', 'coach_name', 'email'], 'teams': ['team_id', 'coach_id', 'sport_id', 'team_name', 'team_medal', 'championship_id'], 'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'mental_skills': ['skill_id', 'skill_name', 'skill_description', 'athlete_id', 'Focus', 'Visualization', 'skill_mastered', 'skill_level', 'Excellent', 'High', 'Low'], 'goals': ['goal_id', 'goal_name', 'goal_rating', 'skill_id'], 'athlete_goals': ['goal_id', 'athlete_id', 'goal_achieved', 'goal_date', 'date_achieved']} and \n# the user question: Get the list of all coaches who have at least one athlete with a \"High\" level in the \"Confidence\" mental skill and a goal related to \"Endurance\" that they have not achieved yet, along with the number of athletes with that mental skill level and goal, sorted by the number of athletes in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the list of all coaches who have at least one athlete with a \"High\" level in the \"Confidence\" mental skill and a goal related to \"Endurance\" that they have not achieved yet, along with the number of athletes with that mental skill level and goal, sorted by the number of athletes in descending order.",
        "output": "SELECT coaches.name, COUNT(DISTINCT athletes.athlete_id) AS num_athletes FROM coaches INNER JOIN teams ON coaches.coach_id = teams.coach_id INNER JOIN athletes ON teams.team_id = athletes.team_id INNER JOIN athlete_goals ON athletes.athlete_id = athlete_goals.athlete_id INNER JOIN goals ON athlete_goals.goal_id = goals.goal_id INNER JOIN athlete_skills ON athletes.athlete_id = athlete_skills.athlete_id INNER JOIN mental_skills ON athlete_skills.skill_id = mental_skills.skill_id WHERE goals.goal_name = 'Endurance' AND mental_skills.skill_name = 'Confidence' AND athlete_skills.skill_level = 'High' AND athlete_goals.goal_achieved = 0 GROUP BY coaches.name ORDER BY num_athletes DESC;",
        "schema": "sports_psychology",
        "processed_schema_content": {
            "athletes": [
                "name",
                "athlete_id",
                "team_id",
                "last_name",
                "athlete_name",
                "age"
            ],
            "coaches": [
                "name",
                "coach_id",
                "coach_name",
                "email"
            ],
            "teams": [
                "team_id",
                "coach_id",
                "sport_id",
                "team_name",
                "team_medal",
                "championship_id"
            ],
            "athlete_skills": [
                "skill_id",
                "athlete_id",
                "skill_level",
                "skill_mastered",
                "self_talk",
                "mental_preparation",
                "imagery",
                "goal_setting",
                "anxiety",
                "focus",
                "mental_toughness",
                "confidence",
                "motivation"
            ],
            "mental_skills": [
                "skill_id",
                "skill_name",
                "skill_description",
                "athlete_id",
                "Focus",
                "Visualization",
                "skill_mastered",
                "skill_level",
                "Excellent",
                "High",
                "Low"
            ],
            "goals": [
                "goal_id",
                "goal_name",
                "goal_rating",
                "skill_id"
            ],
            "athlete_goals": [
                "goal_id",
                "athlete_id",
                "goal_achieved",
                "goal_date",
                "date_achieved"
            ]
        }
    },
    {
        "id": 95,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Workouts': ['duration', 'athlete_id', 'workout_id', 'type', 'intensity', 'date', 'distance', 'calories_burned', 'location', 'competition_id', 'heart_rate', 'average_heart_rate', 'resting_heart_rate', 'power_output', 'speed', 'difficulty_level', 'intensity_level', 'pace', 'exercise_id', 'weight_lifted', 'member_id'], 'Exercises': ['exercise_id', 'name', 'description', 'exercise_name', 'type', 'category'], 'Gyms': ['name', 'gym_id', 'state', 'rating', 'pool', 'sauna', 'weight_room', 'track', 'basketball_court', 'hours', 'swimming_pool', 'yoga_classes', 'personal_training_program'], 'Memberships': ['gym_id', 'membership_id', 'member_id', 'start_date', 'type'], 'Members': ['member_id', 'birthdate', 'last_name', 'first_name']} and \n# the user question: Show the names and total weight lifted in all weightlifting workouts completed by each member who has a membership at a gym with a weight room and a rating of at least 4, ordered by total weight lifted in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Show the names and total weight lifted in all weightlifting workouts completed by each member who has a membership at a gym with a weight room and a rating of at least 4, ordered by total weight lifted in descending order.",
        "output": "SELECT Members.first_name, Members.last_name, SUM(Workouts.weight_lifted) AS total_weight_lifted FROM Members JOIN Workouts ON Members.member_id = Workouts.member_id JOIN Exercises ON Workouts.exercise_id = Exercises.exercise_id JOIN Memberships ON Members.member_id = Memberships.member_id JOIN Gyms ON Memberships.gym_id = Gyms.gym_id WHERE Exercises.type = 'Weightlifting' AND Gyms.weight_room = 1 AND Gyms.rating >= 4 GROUP BY Members.member_id HAVING SUM(Workouts.weight_lifted) IS NOT NULL ORDER BY total_weight_lifted DESC;",
        "schema": "athletic_training",
        "processed_schema_content": {
            "Workouts": [
                "duration",
                "athlete_id",
                "workout_id",
                "type",
                "intensity",
                "date",
                "distance",
                "calories_burned",
                "location",
                "competition_id",
                "heart_rate",
                "average_heart_rate",
                "resting_heart_rate",
                "power_output",
                "speed",
                "difficulty_level",
                "intensity_level",
                "pace",
                "exercise_id",
                "weight_lifted",
                "member_id"
            ],
            "Exercises": [
                "exercise_id",
                "name",
                "description",
                "exercise_name",
                "type",
                "category"
            ],
            "Gyms": [
                "name",
                "gym_id",
                "state",
                "rating",
                "pool",
                "sauna",
                "weight_room",
                "track",
                "basketball_court",
                "hours",
                "swimming_pool",
                "yoga_classes",
                "personal_training_program"
            ],
            "Memberships": [
                "gym_id",
                "membership_id",
                "member_id",
                "start_date",
                "type"
            ],
            "Members": [
                "member_id",
                "birthdate",
                "last_name",
                "first_name"
            ]
        }
    },
    {
        "id": 97,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Photos': ['photo_id', 'photographer_id', 'category_id', 'date_sold', 'price', 'num_sold', 'cost_of_production', 'num_views', 'rating', 'num_orders', 'city', 'resolution', 'shutter_speed', 'status', 'sales', 'delivery_type', 'taken_date', 'photo_name', 'homepage_featured', 'date_taken', 'location_id', 'resolution_height', 'resolution_width', 'lens_id', 'photo_date'], 'Categories': ['category_id', 'name', 'category_name'], 'Order_Details': ['order_id', 'photo_id', 'quantity']} and \n# the user question: Find the names and total revenue generated from photo orders for each category, and order the results by revenue in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and total revenue generated from photo orders for each category, and order the results by revenue in descending order.",
        "output": "SELECT Categories.category_name, SUM(Order_Details.quantity * Photos.price) AS revenue FROM Categories INNER JOIN Photos ON Categories.category_id = Photos.category_id INNER JOIN Order_Details ON Photos.photo_id = Order_Details.photo_id GROUP BY Categories.category_id ORDER BY revenue DESC;",
        "schema": "photography",
        "processed_schema_content": {
            "Photos": [
                "photo_id",
                "photographer_id",
                "category_id",
                "date_sold",
                "price",
                "num_sold",
                "cost_of_production",
                "num_views",
                "rating",
                "num_orders",
                "city",
                "resolution",
                "shutter_speed",
                "status",
                "sales",
                "delivery_type",
                "taken_date",
                "photo_name",
                "homepage_featured",
                "date_taken",
                "location_id",
                "resolution_height",
                "resolution_width",
                "lens_id",
                "photo_date"
            ],
            "Categories": [
                "category_id",
                "name",
                "category_name"
            ],
            "Order_Details": [
                "order_id",
                "photo_id",
                "quantity"
            ]
        }
    },
    {
        "id": 98,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Goal': ['goal_id', 'due_date', 'is_completed', 'client_id', 'description', 'coach_id', 'status', 'package_id', 'category', 'target_completion_date', 'completion_date', 'is_cancelled', 'name', 'cancelled', 'completed', 'started', 'progress', 'start_date'], 'Client': ['name', 'email', 'coach_id', 'package_id', 'client_id', 'address', 'birthdate', 'occupation', 'phone', 'preferred_coach', 'last_activity_time'], 'GoalTag': ['goal_id', 'tag', 'tag_id']} and \n# the user question: Retrieve the names and email addresses of all clients who have at least one completed goal with the tag 'Self-Care', and where the goal due date was in the past 6 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all clients who have at least one completed goal with the tag 'Self-Care', and where the goal due date was in the past 6 months.",
        "output": "SELECT DISTINCT Client.name, Client.email FROM Client INNER JOIN Goal ON Client.client_id = Goal.client_id INNER JOIN GoalTag ON Goal.goal_id = GoalTag.goal_id WHERE Goal.is_completed = 1 AND GoalTag.tag = 'Self-Care' AND Goal.due_date BETWEEN date('now', '-6 months') AND date('now');",
        "schema": "coaching",
        "processed_schema_content": {
            "Goal": [
                "goal_id",
                "due_date",
                "is_completed",
                "client_id",
                "description",
                "coach_id",
                "status",
                "package_id",
                "category",
                "target_completion_date",
                "completion_date",
                "is_cancelled",
                "name",
                "cancelled",
                "completed",
                "started",
                "progress",
                "start_date"
            ],
            "Client": [
                "name",
                "email",
                "coach_id",
                "package_id",
                "client_id",
                "address",
                "birthdate",
                "occupation",
                "phone",
                "preferred_coach",
                "last_activity_time"
            ],
            "GoalTag": [
                "goal_id",
                "tag",
                "tag_id"
            ]
        }
    },
    {
        "id": 104,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Cast': ['name', 'cast_id', 'show_id', 'actor_id', 'role', 'episode_id', 'is_guest_star', 'tv_show_id'], 'Show': ['rating', 'year', 'title', 'show_id', 'genre_id', 'studio_id', 'release_year', 'country_id', 'network_id', 'director_id', 'air_year', 'release_date', 'genre', 'status', 'production_type', 'producer_id', 'start_year', 'end_year'], 'Episode': ['show_id', 'episode_id', 'crew_id', 'director_id', 'writer_id', 'runtime', 'title', 'season_id', 'duration', 'episode_number', 'release_year', 'air_date', 'rating', 'id', 'tv_show_id', 'name'], 'Season': ['show_id', 'season_id', 'season_number', 'release_date', 'release_channel', 'episode_count', 'end_date', 'start_date', 'year_id'], 'Actor': ['name', 'actor_id', 'oscar_wins', 'gender', 'age', 'id'], 'Rating': ['rating', 'season_id', 'episode_id', 'num_users']} and \n# the user question: List the names of actors who have appeared in more than 10 episodes of a TV show that has at least 3 seasons and where the average rating of all episodes is greater than 7.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of actors who have appeared in more than 10 episodes of a TV show that has at least 3 seasons and where the average rating of all episodes is greater than 7.",
        "output": "SELECT DISTINCT Actor.name FROM Actor JOIN Cast ON Actor.actor_id = Cast.actor_id JOIN Episode ON Cast.episode_id = Episode.episode_id JOIN Season ON Episode.season_id = Season.season_id JOIN Show ON Season.show_id = Show.show_id JOIN Rating ON Episode.episode_id = Rating.episode_id GROUP BY Actor.actor_id, Show.show_id HAVING COUNT(DISTINCT Season.season_id) >= 3 AND AVG(Rating.rating) > 7 AND COUNT(DISTINCT Episode.episode_id) > 10",
        "schema": "tv_shows",
        "processed_schema_content": {
            "Cast": [
                "name",
                "cast_id",
                "show_id",
                "actor_id",
                "role",
                "episode_id",
                "is_guest_star",
                "tv_show_id"
            ],
            "Show": [
                "rating",
                "year",
                "title",
                "show_id",
                "genre_id",
                "studio_id",
                "release_year",
                "country_id",
                "network_id",
                "director_id",
                "air_year",
                "release_date",
                "genre",
                "status",
                "production_type",
                "producer_id",
                "start_year",
                "end_year"
            ],
            "Episode": [
                "show_id",
                "episode_id",
                "crew_id",
                "director_id",
                "writer_id",
                "runtime",
                "title",
                "season_id",
                "duration",
                "episode_number",
                "release_year",
                "air_date",
                "rating",
                "id",
                "tv_show_id",
                "name"
            ],
            "Season": [
                "show_id",
                "season_id",
                "season_number",
                "release_date",
                "release_channel",
                "episode_count",
                "end_date",
                "start_date",
                "year_id"
            ],
            "Actor": [
                "name",
                "actor_id",
                "oscar_wins",
                "gender",
                "age",
                "id"
            ],
            "Rating": [
                "rating",
                "season_id",
                "episode_id",
                "num_users"
            ]
        }
    },
    {
        "id": 105,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Cities': ['city_name', 'city_id', 'country_id', 'country_name', 'region_id', 'state_id', 'air_quality_index', 'year', 'state_name'], 'Countries': ['country_name', 'country_id', 'continent', 'region', 'forest_coverage'], 'Waste_Sources': ['source_id', 'city_id', 'waste_source', 'facility_id'], 'Food_Waste_Production': ['source_id', 'date', 'food_waste_production']} and \n# the user question: Display the amount of food waste production for each city in North America in 2027, broken down by waste source.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Display the amount of food waste production for each city in North America in 2027, broken down by waste source.",
        "output": "SELECT c.city_name, ws.waste_source, SUM(fwp.food_waste_production) as total_production FROM Countries co JOIN Cities c ON co.country_id = c.country_id JOIN Waste_Sources ws ON c.city_id = ws.city_id JOIN Food_Waste_Production fwp ON ws.source_id = fwp.source_id WHERE co.continent = 'North America' AND fwp.date BETWEEN '2027-01-01' AND '2027-12-31' GROUP BY c.city_name, ws.waste_source;",
        "schema": "environment",
        "processed_schema_content": {
            "Cities": [
                "city_name",
                "city_id",
                "country_id",
                "country_name",
                "region_id",
                "state_id",
                "air_quality_index",
                "year",
                "state_name"
            ],
            "Countries": [
                "country_name",
                "country_id",
                "continent",
                "region",
                "forest_coverage"
            ],
            "Waste_Sources": [
                "source_id",
                "city_id",
                "waste_source",
                "facility_id"
            ],
            "Food_Waste_Production": [
                "source_id",
                "date",
                "food_waste_production"
            ]
        }
    },
    {
        "id": 106,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Actor': ['actor_id', 'name', 'actor_name'], 'Movie_Actor': ['movie_id', 'actor_id'], 'Box_Office': ['movie_id', 'revenue', 'budget']} and \n# the user question: Retrieve the name of the actor, the title of the movie, and the box office revenue for all movies where the actor's name contains the word \"Smith\" and the revenue is greater than $200 million.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name of the actor, the title of the movie, and the box office revenue for all movies where the actor's name contains the word \"Smith\" and the revenue is greater than $200 million.",
        "output": "SELECT Actor.name, Movie.title, Box_Office.revenue FROM Movie JOIN Movie_Actor ON Movie.movie_id = Movie_Actor.movie_id JOIN Actor ON Movie_Actor.actor_id = Actor.actor_id JOIN Box_Office ON Movie.movie_id = Box_Office.movie_id WHERE Actor.name LIKE '%Smith%' AND Box_Office.revenue > 200000000;",
        "schema": "romance_films",
        "processed_schema_content": {
            "Movie": [
                "movie_id",
                "title",
                "release_year",
                "director_id",
                "runtime",
                "production_company_id",
                "budget",
                "release_date",
                "producer_id",
                "genre"
            ],
            "Actor": [
                "actor_id",
                "name",
                "actor_name"
            ],
            "Movie_Actor": [
                "movie_id",
                "actor_id"
            ],
            "Box_Office": [
                "movie_id",
                "revenue",
                "budget"
            ]
        }
    },
    {
        "id": 109,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'sales': ['date', 'amount', 'product_id', 'quantity', 'customer_id', 'salesperson_id', 'id', 'price', 'total_price', 'payment_status', 'date_sold', 'total_revenue'], 'customers': ['id', 'name', 'loyalty_level', 'customer_id', 'first_name', 'last_name', 'email', 'phone', 'address']} and \n# the user question: Retrieve the list of customers who have made a purchase of more than $100 in a single transaction.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of customers who have made a purchase of more than $100 in a single transaction.",
        "output": "SELECT customers.name, sales.total_price FROM sales JOIN customers ON sales.customer_id = customers.id WHERE sales.total_price > 100;",
        "schema": "business_strategy",
        "processed_schema_content": {
            "sales": [
                "date",
                "amount",
                "product_id",
                "quantity",
                "customer_id",
                "salesperson_id",
                "id",
                "price",
                "total_price",
                "payment_status",
                "date_sold",
                "total_revenue"
            ],
            "customers": [
                "id",
                "name",
                "loyalty_level",
                "customer_id",
                "first_name",
                "last_name",
                "email",
                "phone",
                "address"
            ]
        }
    },
    {
        "id": 110,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'PlantSpecies': ['id', 'name', 'genus_id', 'scientific_name'], 'PlantSpeciesUses': ['plant_species_id', 'plant_uses_id'], 'PlantUses': ['id', 'name'], 'PlantSpeciesGrowth': ['plant_species_id', 'plant_growth_id'], 'PlantGrowth': ['id', 'name'], 'PlantSpeciesLocation': ['plant_location_id', 'plant_species_id'], 'PlantLocation': ['id', 'name']} and \n# the user question: Find all plant species that have a location requirement of \"Humid areas\", a growth requirement for \"Loamy soil\", and at least one use for \"Food\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all plant species that have a location requirement of \"Humid areas\", a growth requirement for \"Loamy soil\", and at least one use for \"Food\":",
        "output": "SELECT PlantSpecies.name AS species, PlantLocation.name AS location, PlantGrowth.name AS growth, PlantUses.name AS use FROM PlantSpecies JOIN PlantSpeciesLocation ON PlantSpecies.id = PlantSpeciesLocation.plant_species_id JOIN PlantLocation ON PlantSpeciesLocation.plant_location_id = PlantLocation.id JOIN PlantSpeciesUses ON PlantSpecies.id = PlantSpeciesUses.plant_species_id JOIN PlantUses ON PlantSpeciesUses.plant_uses_id = PlantUses.id JOIN PlantSpeciesGrowth ON PlantSpecies.id = PlantSpeciesGrowth.plant_species_id JOIN PlantGrowth ON PlantSpeciesGrowth.plant_growth_id = PlantGrowth.id WHERE PlantLocation.name = 'Humid areas' AND PlantGrowth.name = 'Loamy soil' AND PlantUses.name = 'Food';",
        "schema": "botany",
        "processed_schema_content": {
            "PlantSpecies": [
                "id",
                "name",
                "genus_id",
                "scientific_name"
            ],
            "PlantSpeciesUses": [
                "plant_species_id",
                "plant_uses_id"
            ],
            "PlantUses": [
                "id",
                "name"
            ],
            "PlantSpeciesGrowth": [
                "plant_species_id",
                "plant_growth_id"
            ],
            "PlantGrowth": [
                "id",
                "name"
            ],
            "PlantSpeciesLocation": [
                "plant_location_id",
                "plant_species_id"
            ],
            "PlantLocation": [
                "id",
                "name"
            ]
        }
    },
    {
        "id": 113,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'patients': ['first_name', 'last_name', 'patient_id', 'phone_number', 'email', 'phone'], 'medical_history': ['patient_id', 'medical_condition', 'diagnosis'], 'prescription': ['patient_id', 'prescription_id', 'prescription_date', 'type', 'practitioner_id'], 'prescription_items': ['formula_id', 'prescription_id'], 'herbal_formulas': ['formula_id', 'formula_name', 'price', 'num_ingredients', 'ingredients', 'name']} and \n# the user question: Retrieve the names and email addresses of patients who have been prescribed herbal formulas containing \"Ban Xia\" and have also been diagnosed with a medical condition containing the word \"nausea\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of patients who have been prescribed herbal formulas containing \"Ban Xia\" and have also been diagnosed with a medical condition containing the word \"nausea\":",
        "output": "SELECT DISTINCT p.first_name, p.last_name, p.email FROM patients p JOIN medical_history mh ON p.patient_id = mh.patient_id JOIN prescription pr ON p.patient_id = pr.patient_id JOIN prescription_items pi ON pr.prescription_id = pi.prescription_id JOIN herbal_formulas hf ON pi.formula_id = hf.formula_id WHERE hf.formula_name LIKE '%Ban Xia%' AND mh.medical_condition LIKE '%nausea%';",
        "schema": "acupuncture",
        "processed_schema_content": {
            "patients": [
                "first_name",
                "last_name",
                "patient_id",
                "phone_number",
                "email",
                "phone"
            ],
            "medical_history": [
                "patient_id",
                "medical_condition",
                "diagnosis"
            ],
            "prescription": [
                "patient_id",
                "prescription_id",
                "prescription_date",
                "type",
                "practitioner_id"
            ],
            "prescription_items": [
                "formula_id",
                "prescription_id"
            ],
            "herbal_formulas": [
                "formula_id",
                "formula_name",
                "price",
                "num_ingredients",
                "ingredients",
                "name"
            ]
        }
    },
    {
        "id": 114,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'remedy': ['remedy_id', 'dosage', 'name', 'description'], 'remedy_symptom': ['remedy_id', 'symptom_id', 'age_group_id', 'gender_id'], 'symptom': ['symptom_id', 'name'], 'medicine': ['medicine_id', 'dosage', 'name', 'description'], 'medicine_symptom': ['symptom_id', 'medicine_id', 'age_group_id', 'gender_id']} and \n# the user question: Find the names and dosages of all medicines and remedies that are recommended for teething:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and dosages of all medicines and remedies that are recommended for teething:",
        "output": "SELECT medicine.name, medicine.dosage FROM medicine JOIN medicine_symptom ON medicine.medicine_id = medicine_symptom.medicine_id JOIN symptom ON medicine_symptom.symptom_id = symptom.symptom_id WHERE symptom.name = 'Teething' UNION SELECT remedy.name, remedy.dosage FROM remedy JOIN remedy_symptom ON remedy.remedy_id = remedy_symptom.remedy_id JOIN symptom ON remedy_symptom.symptom_id = symptom.symptom_id WHERE symptom.name = 'Teething';",
        "schema": "homeopathy",
        "processed_schema_content": {
            "remedy": [
                "remedy_id",
                "dosage",
                "name",
                "description"
            ],
            "remedy_symptom": [
                "remedy_id",
                "symptom_id",
                "age_group_id",
                "gender_id"
            ],
            "symptom": [
                "symptom_id",
                "name"
            ],
            "medicine": [
                "medicine_id",
                "dosage",
                "name",
                "description"
            ],
            "medicine_symptom": [
                "symptom_id",
                "medicine_id",
                "age_group_id",
                "gender_id"
            ]
        }
    },
    {
        "id": 115,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Actor': ['actor_id', 'actor_name'], 'Character': ['character_name', 'character_id', 'gender', 'actor_name', 'military_rank_id', 'is_main_character', 'character_kills', 'film_id', 'character_death_date', 'character_birth_date', 'character_nationality', 'character_gender', 'character_death'], 'Film_Character': ['character_id', 'film_id'], 'War': ['war_id', 'war_name', 'war_start_year'], 'Film_War': ['war_id', 'film_id', 'battle_id']} and \n# the user question: Find the actors who have appeared in war films set in the 20th century, and the number of films they have appeared in:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the actors who have appeared in war films set in the 20th century, and the number of films they have appeared in:",
        "output": "SELECT Actor.actor_name, COUNT(*) AS num_films FROM Actor INNER JOIN Character ON Actor.actor_name = Character.actor_name INNER JOIN Film_Character ON Character.character_id = Film_Character.character_id INNER JOIN Film_War ON Film_Character.film_id = Film_War.film_id INNER JOIN War ON Film_War.war_id = War.war_id WHERE War.war_start_year BETWEEN 1900 AND 1999 GROUP BY Actor.actor_name ORDER BY num_films DESC;",
        "schema": "war_films",
        "processed_schema_content": {
            "Actor": [
                "actor_id",
                "actor_name"
            ],
            "Character": [
                "character_name",
                "character_id",
                "gender",
                "actor_name",
                "military_rank_id",
                "is_main_character",
                "character_kills",
                "film_id",
                "character_death_date",
                "character_birth_date",
                "character_nationality",
                "character_gender",
                "character_death"
            ],
            "Film_Character": [
                "character_id",
                "film_id"
            ],
            "War": [
                "war_id",
                "war_name",
                "war_start_year"
            ],
            "Film_War": [
                "war_id",
                "film_id",
                "battle_id"
            ]
        }
    },
    {
        "id": 116,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Book': ['book_id', 'title', 'isbn', 'publisher_id', 'publication_date', 'rating', 'price', 'publication_year', 'author_id', 'publisher', 'author', 'weight', 'author_gender', 'language', 'author_name', 'book_title', 'format_id', 'page_count', 'id', 'num_pages'], 'Order': ['order_id', 'customer_id', 'order_date', 'status', 'store_id', 'date', 'total_amount', 'total_cost', 'total_price'], 'Order_Item': ['order_id', 'book_id', 'quantity', 'price', 'store_id', 'order_date', 'customer_id', 'unit_price', 'inventory_id', 'date', 'order_item_date'], 'Store': ['store_id', 'name', 'address', 'phone_number', 'state', 'store_name', 'city_id'], 'Store_Inventory': ['store_id', 'book_id', 'quantity', 'inventory_id', 'quantity_available']} and \n# the user question: Find the name and phone number of the store that has the most inventory of the book \"1984\" and has sold at least 3 copies of the book in the past month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and phone number of the store that has the most inventory of the book \"1984\" and has sold at least 3 copies of the book in the past month.",
        "output": "SELECT Store.name, Store.phone_number FROM Store JOIN Store_Inventory ON Store.store_id = Store_Inventory.store_id JOIN Book ON Store_Inventory.book_id = Book.book_id JOIN Order_Item ON Book.book_id = Order_Item.book_id JOIN Order ON Order_Item.order_id = Order.order_id WHERE Book.title = '1984' AND Order.order_date >= DATE('now', '-1 month') GROUP BY Store.store_id HAVING SUM(Store_Inventory.quantity) > 0 AND SUM(Order_Item.quantity) >= 3 ORDER BY SUM(Store_Inventory.quantity) DESC LIMIT 1;",
        "schema": "business_books",
        "processed_schema_content": {
            "Book": [
                "book_id",
                "title",
                "isbn",
                "publisher_id",
                "publication_date",
                "rating",
                "price",
                "publication_year",
                "author_id",
                "publisher",
                "author",
                "weight",
                "author_gender",
                "language",
                "author_name",
                "book_title",
                "format_id",
                "page_count",
                "id",
                "num_pages"
            ],
            "Order": [
                "order_id",
                "customer_id",
                "order_date",
                "status",
                "store_id",
                "date",
                "total_amount",
                "total_cost",
                "total_price"
            ],
            "Order_Item": [
                "order_id",
                "book_id",
                "quantity",
                "price",
                "store_id",
                "order_date",
                "customer_id",
                "unit_price",
                "inventory_id",
                "date",
                "order_item_date"
            ],
            "Store": [
                "store_id",
                "name",
                "address",
                "phone_number",
                "state",
                "store_name",
                "city_id"
            ],
            "Store_Inventory": [
                "store_id",
                "book_id",
                "quantity",
                "inventory_id",
                "quantity_available"
            ]
        }
    },
    {
        "id": 121,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'catch': ['species', 'ocean', 'weight', 'category', 'fisherman', 'quantity', 'gear'], 'species': ['habitat', 'name', 'common_name', 'scientific_name', 'max_size', 'id', 'conservation_status', 'order_name', 'Lepus', 'timidus']} and \n# the user question: What is the most commonly caught \"Shark\" species by fishermen in the \"Indian Ocean\"?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What is the most commonly caught \"Shark\" species by fishermen in the \"Indian Ocean\"?",
        "output": "SELECT species FROM catch WHERE category = 'Shark' AND ocean = 'Indian Ocean' GROUP BY species ORDER BY COUNT(*) DESC LIMIT 1;",
        "schema": "marine_biology",
        "processed_schema_content": {
            "catch": [
                "species",
                "ocean",
                "weight",
                "category",
                "fisherman",
                "quantity",
                "gear"
            ],
            "species": [
                "habitat",
                "name",
                "common_name",
                "scientific_name",
                "max_size",
                "id",
                "conservation_status",
                "order_name",
                "Lepus",
                "timidus"
            ]
        }
    },
    {
        "id": 122,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Order_Items': ['price', 'product_id', 'quantity', 'order_id', 'discount_id', 'order_item_id', 'discount', 'returned', 'customer_id'], 'Products': ['category_id', 'product_id', 'supplier_id', 'product_name', 'price', 'stock_quantity', 'brand_id', 'sku', 'brand', 'category', 'stock', 'discontinued', 'name', 'last_restocked', 'sale_price', 'status', 'stock_count', 'on_sale'], 'Suppliers': ['company_name', 'supplier_id'], 'Product_Tags': ['tag_id', 'product_id', 'created_at', 'tag_name'], 'Tags': ['tag_id', 'tag_name']} and \n# the user question: Retrieve the name of the supplier and the total revenue generated from their sales of products with the tag \"limited edition\", where the total revenue is greater than $500, sorted by revenue in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name of the supplier and the total revenue generated from their sales of products with the tag \"limited edition\", where the total revenue is greater than $500, sorted by revenue in descending order:",
        "output": "SELECT Suppliers.company_name, SUM(Order_Items.quantity * Order_Items.price) AS total_revenue FROM Suppliers LEFT JOIN Products ON Suppliers.supplier_id = Products.supplier_id LEFT JOIN Order_Items ON Products.product_id = Order_Items.product_id LEFT JOIN Product_Tags ON Products.product_id = Product_Tags.product_id LEFT JOIN Tags ON Product_Tags.tag_id = Tags.tag_id WHERE Tags.tag_name = 'limited edition' GROUP BY Suppliers.supplier_id HAVING total_revenue > 500 ORDER BY total_revenue DESC",
        "schema": "business",
        "processed_schema_content": {
            "Order_Items": [
                "price",
                "product_id",
                "quantity",
                "order_id",
                "discount_id",
                "order_item_id",
                "discount",
                "returned",
                "customer_id"
            ],
            "Products": [
                "category_id",
                "product_id",
                "supplier_id",
                "product_name",
                "price",
                "stock_quantity",
                "brand_id",
                "sku",
                "brand",
                "category",
                "stock",
                "discontinued",
                "name",
                "last_restocked",
                "sale_price",
                "status",
                "stock_count",
                "on_sale"
            ],
            "Suppliers": [
                "company_name",
                "supplier_id"
            ],
            "Product_Tags": [
                "tag_id",
                "product_id",
                "created_at",
                "tag_name"
            ],
            "Tags": [
                "tag_id",
                "tag_name"
            ]
        }
    },
    {
        "id": 124,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['review_id', 'book_id', 'user_id', 'rating', 'review_text', 'review_date', 'author_id', 'user_country', 'genre_id', 'language_id', 'product_id']} and \n# the user question: Find the average rating for books that have been reviewed more than 10 times, sorted by rating in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average rating for books that have been reviewed more than 10 times, sorted by rating in descending order.",
        "output": "SELECT AVG(reviews.rating) as avg_rating, COUNT(*) as num_reviews FROM reviews GROUP BY reviews.book_id HAVING num_reviews > 10 ORDER BY avg_rating DESC;",
        "schema": "psychology_books",
        "processed_schema_content": {
            "reviews": [
                "review_id",
                "book_id",
                "user_id",
                "rating",
                "review_text",
                "review_date",
                "author_id",
                "user_country",
                "genre_id",
                "language_id",
                "product_id"
            ]
        }
    },
    {
        "id": 126,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['username', 'user_id', 'email', 'john_doe', 'jane_doe', 'sarah_smith', 'tom_wilson', 'robert_king', 'alice_smith', 'jack_smith', 'jane_smith', 'mary_jones', 'joe_brown', 'james_smith', 'jessica_wong', 'david_smith', 'first_name', 'last_name', 'james_wong', 'emily_smith', 'jennifer_wilson', 'subscription', 'date_of_birth'], 'Project_Teams': ['team_id', 'project_id', 'team_name', 'created_by', 'user_i'], 'Team_Members': ['team_id', 'user_id'], 'Projects': ['project_name', 'project_id', 'start_date', 'end_date', 'description', 'num_teams', 'created_by', 'user_i']} and \n# the user question: What are the names of the users who have created at least two projects, one of which has a team with 'john_doe' as a member?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What are the names of the users who have created at least two projects, one of which has a team with 'john_doe' as a member?",
        "output": "SELECT DISTINCT Users.username FROM Users INNER JOIN Projects ON Users.user_id = Projects.created_by INNER JOIN Project_Teams AS pt1 ON Projects.project_id = pt1.project_id INNER JOIN Team_Members AS tm1 ON pt1.team_id = tm1.team_id AND tm1.user_id = (SELECT user_id FROM Users WHERE username = 'john_doe') GROUP BY Users.user_id HAVING COUNT(DISTINCT Projects.project_id) >= 2;",
        "schema": "data_mining",
        "processed_schema_content": {
            "Users": [
                "username",
                "user_id",
                "email",
                "john_doe",
                "jane_doe",
                "sarah_smith",
                "tom_wilson",
                "robert_king",
                "alice_smith",
                "jack_smith",
                "jane_smith",
                "mary_jones",
                "joe_brown",
                "james_smith",
                "jessica_wong",
                "david_smith",
                "first_name",
                "last_name",
                "james_wong",
                "emily_smith",
                "jennifer_wilson",
                "subscription",
                "date_of_birth"
            ],
            "Project_Teams": [
                "team_id",
                "project_id",
                "team_name",
                "created_by",
                "user_i"
            ],
            "Team_Members": [
                "team_id",
                "user_id"
            ],
            "Projects": [
                "project_name",
                "project_id",
                "start_date",
                "end_date",
                "description",
                "num_teams",
                "created_by",
                "user_i"
            ]
        }
    },
    {
        "id": 127,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['customer_id', 'date_placed', 'order_id', 'date_shipped', 'order_total', 'total_price', 'sales_channel', 'order_date', 'payment_date']} and \n# the user question: Calculate the total number of customers who have placed an order in each month of the current year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Calculate the total number of customers who have placed an order in each month of the current year.",
        "output": "SELECT strftime('%m', date_placed) AS month, COUNT(DISTINCT customer_id) AS num_customers FROM orders WHERE strftime('%Y', date_placed) = strftime('%Y', 'now') GROUP BY month;",
        "schema": "advertising",
        "processed_schema_content": {
            "orders": [
                "customer_id",
                "date_placed",
                "order_id",
                "date_shipped",
                "order_total",
                "total_price",
                "sales_channel",
                "order_date",
                "payment_date"
            ]
        }
    },
    {
        "id": 129,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Flights': ['flight_id', 'airline', 'origin', 'destination', 'departure_date', 'return_date', 'price', 'duration', 'departure_time', 'arrival_time', 'flight_number', 'airline_id', 'status', 'airline_code', 'flight_name', 'layover_code', 'direct_route', 'origin_code', 'non_stop'], 'Bookings': ['booking_id', 'user_id', 'hotel_id', 'flight_id', 'check_in_date', 'check_out_date', 'total_price', 'total_cost', 'booking_date', 'destination_id', 'activity_id', 'date', 'status', 'room_id', 'checkout', 'checkin', 'price', 'num_children', 'num_adults', 'customer_id', 'flight_name', 'passenger_id', 'departure_date'], 'Airports': ['city', 'longitude', 'latitude', 'continent', 'country', 'airport_code', 'airport_name', 'Denver', 'address'], 'Airlines': ['airline_id', 'airline_name', 'airline_code', 'contact_info']} and \n# the user question: Find the names and total revenue earned by each airline from flights departing from New York JFK airport in 2023.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and total revenue earned by each airline from flights departing from New York JFK airport in 2023.",
        "output": "SELECT Airlines.airline_name, SUM(Bookings.price) AS total_revenue FROM Airlines JOIN Flights ON Airlines.airline_code = Flights.airline_code JOIN Airports ON Flights.origin = Airports.airport_code JOIN Bookings ON Flights.flight_name = Bookings.flight_name WHERE Airports.airport_name = 'John F. Kennedy International Airport' AND strftime('%Y', Bookings.checkin) = '2023' GROUP BY Airlines.airline_code ORDER BY total_revenue DESC;",
        "schema": "travel",
        "processed_schema_content": {
            "Flights": [
                "flight_id",
                "airline",
                "origin",
                "destination",
                "departure_date",
                "return_date",
                "price",
                "duration",
                "departure_time",
                "arrival_time",
                "flight_number",
                "airline_id",
                "status",
                "airline_code",
                "flight_name",
                "layover_code",
                "direct_route",
                "origin_code",
                "non_stop"
            ],
            "Bookings": [
                "booking_id",
                "user_id",
                "hotel_id",
                "flight_id",
                "check_in_date",
                "check_out_date",
                "total_price",
                "total_cost",
                "booking_date",
                "destination_id",
                "activity_id",
                "date",
                "status",
                "room_id",
                "checkout",
                "checkin",
                "price",
                "num_children",
                "num_adults",
                "customer_id",
                "flight_name",
                "passenger_id",
                "departure_date"
            ],
            "Airports": [
                "city",
                "longitude",
                "latitude",
                "continent",
                "country",
                "airport_code",
                "airport_name",
                "Denver",
                "address"
            ],
            "Airlines": [
                "airline_id",
                "airline_name",
                "airline_code",
                "contact_info"
            ]
        }
    },
    {
        "id": 133,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Crops': ['crop_id', 'crop_name', 'farm_id', 'planting_date', 'harvest_date', 'fertilizer_id', 'season', 'yield_per_acre', 'crop_type', 'crop_value', 'total_price', 'acres', 'total_cost', 'quantity', 'yield_last_year', 'production_cost', 'farm_name', 'Corn', 'sale_date', 'unit_price'], 'Sales': ['crop_id', 'quantity_sold', 'total_price', 'sale_id', 'sale_date', 'season', 'livestock_id', 'sales_id', 'quantity', 'farm_id', 'unit_price', 'customer_id'], 'Farms': ['farm_id', 'farm_name', 'farmer_id', 'location', 'region', 'city']} and \n# the user question: Example: Retrieve the farms that have made at least 5 sales in the past quarter.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Example: Retrieve the farms that have made at least 5 sales in the past quarter.",
        "output": "SELECT F.farm_name FROM Farms AS F JOIN Crops AS C ON F.farm_id = C.farm_id JOIN Sales AS S ON C.crop_id = S.crop_id WHERE S.sale_date >= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH) GROUP BY F.farm_name HAVING COUNT(*) >= 5;",
        "schema": "agriculture",
        "processed_schema_content": {
            "Crops": [
                "crop_id",
                "crop_name",
                "farm_id",
                "planting_date",
                "harvest_date",
                "fertilizer_id",
                "season",
                "yield_per_acre",
                "crop_type",
                "crop_value",
                "total_price",
                "acres",
                "total_cost",
                "quantity",
                "yield_last_year",
                "production_cost",
                "farm_name",
                "Corn",
                "sale_date",
                "unit_price"
            ],
            "Sales": [
                "crop_id",
                "quantity_sold",
                "total_price",
                "sale_id",
                "sale_date",
                "season",
                "livestock_id",
                "sales_id",
                "quantity",
                "farm_id",
                "unit_price",
                "customer_id"
            ],
            "Farms": [
                "farm_id",
                "farm_name",
                "farmer_id",
                "location",
                "region",
                "city"
            ]
        }
    },
    {
        "id": 135,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Artists': ['artist_name', 'nationality', 'artist_id', 'birth_date', 'experience_years', 'country', 'birthdate'], 'Sculptures': ['width', 'depth', 'material', 'height', 'creation_date', 'sculpture_name', 'sculpture_id', 'artist_id', 'collection_id', 'material_id', 'rating']} and \n# the user question: Retrieve the names of sculptures that have a height greater than the average height of sculptures created by artists from a specific country (e.g., \"Germany\"):,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of sculptures that have a height greater than the average height of sculptures created by artists from a specific country (e.g., \"Germany\"):",
        "output": "SELECT Sculptures.sculpture_name FROM Sculptures JOIN Artists ON Sculptures.artist_id = Artists.artist_id WHERE Sculptures.height > ( SELECT AVG(Sculptures.height) FROM Sculptures JOIN Artists ON Sculptures.artist_id = Artists.artist_id WHERE Artists.country = 'Germany' );",
        "schema": "sculpting",
        "processed_schema_content": {
            "Artists": [
                "artist_name",
                "nationality",
                "artist_id",
                "birth_date",
                "experience_years",
                "country",
                "birthdate"
            ],
            "Sculptures": [
                "width",
                "depth",
                "material",
                "height",
                "creation_date",
                "sculpture_name",
                "sculpture_id",
                "artist_id",
                "collection_id",
                "material_id",
                "rating"
            ]
        }
    },
    {
        "id": 137,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'PlantSpecies': ['id', 'name', 'genus_id', 'scientific_name'], 'PlantSpeciesUses': ['plant_species_id', 'plant_uses_id'], 'PlantUses': ['id', 'name'], 'PlantSpeciesGrowth': ['plant_species_id', 'plant_growth_id'], 'PlantGrowth': ['id', 'name'], 'PlantSpeciesLocation': ['plant_location_id', 'plant_species_id'], 'PlantLocation': ['id', 'name']} and \n# the user question: Find all plant species that have a location requirement of \"Coastal areas\", a growth requirement for \"Sandy soil\", and at least one use for \"Medicine\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all plant species that have a location requirement of \"Coastal areas\", a growth requirement for \"Sandy soil\", and at least one use for \"Medicine\":",
        "output": "SELECT PlantSpecies.name AS species, PlantLocation.name AS location, PlantGrowth.name AS growth, PlantUses.name AS use FROM PlantSpecies JOIN PlantSpeciesLocation ON PlantSpecies.id = PlantSpeciesLocation.plant_species_id JOIN PlantLocation ON PlantSpeciesLocation.plant_location_id = PlantLocation.id JOIN PlantSpeciesUses ON PlantSpecies.id = PlantSpeciesUses.plant_species_id JOIN PlantUses ON PlantSpeciesUses.plant_uses_id = PlantUses.id JOIN PlantSpeciesGrowth ON PlantSpecies.id = PlantSpeciesGrowth.plant_species_id JOIN PlantGrowth ON PlantSpeciesGrowth.plant_growth_id = PlantGrowth.id WHERE PlantLocation.name = 'Coastal areas' AND PlantGrowth.name = 'Sandy soil' AND PlantUses.name = 'Medicine';",
        "schema": "botany",
        "processed_schema_content": {
            "PlantSpecies": [
                "id",
                "name",
                "genus_id",
                "scientific_name"
            ],
            "PlantSpeciesUses": [
                "plant_species_id",
                "plant_uses_id"
            ],
            "PlantUses": [
                "id",
                "name"
            ],
            "PlantSpeciesGrowth": [
                "plant_species_id",
                "plant_growth_id"
            ],
            "PlantGrowth": [
                "id",
                "name"
            ],
            "PlantSpeciesLocation": [
                "plant_location_id",
                "plant_species_id"
            ],
            "PlantLocation": [
                "id",
                "name"
            ]
        }
    },
    {
        "id": 138,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Patient': ['patient_id', 'last_name', 'first_name', 'date_of_birth'], 'Insurance': ['insurance_provider', 'patient_id', 'policy_number', 'insurance_id', 'insurance_provider_id', 'coverage_type_id'], 'Insurance_Provider': ['insurance_provider_name', 'insurance_provider_id'], 'Appointment': ['chiropractor_id', 'patient_id', 'appointment_date_time', 'appointment_id', 'insurance_id'], 'Chiropractor': ['first_name', 'last_name', 'chiropractor_id'], 'Prescriptions': ['prescription_name', 'appointment_id', 'prescription_category', 'patient_id', 'medication_id'], 'Coverage_Type': ['coverage_type_name', 'coverage_type_id']} and \n# the user question: Find the names of all chiropractors who have prescribed pain medications to patients who have an insurance policy with coverage for chiropractic services:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all chiropractors who have prescribed pain medications to patients who have an insurance policy with coverage for chiropractic services:",
        "output": "SELECT DISTINCT c.first_name, c.last_name FROM Chiropractor c INNER JOIN Appointment a ON c.chiropractor_id = a.chiropractor_id INNER JOIN Patient p ON a.patient_id = p.patient_id INNER JOIN Insurance i ON p.patient_id = i.patient_id INNER JOIN Insurance_Provider ip ON i.insurance_provider_id = ip.insurance_provider_id INNER JOIN Coverage_Type ct ON i.coverage_type_id = ct.coverage_type_id INNER JOIN Prescriptions pr ON a.appointment_id = pr.appointment_id WHERE ct.coverage_type_name = 'Chiropractic Services' AND pr.prescription_category = 'Pain Medications';",
        "schema": "chiropractic",
        "processed_schema_content": {
            "Patient": [
                "patient_id",
                "last_name",
                "first_name",
                "date_of_birth"
            ],
            "Insurance": [
                "insurance_provider",
                "patient_id",
                "policy_number",
                "insurance_id",
                "insurance_provider_id",
                "coverage_type_id"
            ],
            "Insurance_Provider": [
                "insurance_provider_name",
                "insurance_provider_id"
            ],
            "Appointment": [
                "chiropractor_id",
                "patient_id",
                "appointment_date_time",
                "appointment_id",
                "insurance_id"
            ],
            "Chiropractor": [
                "first_name",
                "last_name",
                "chiropractor_id"
            ],
            "Prescriptions": [
                "prescription_name",
                "appointment_id",
                "prescription_category",
                "patient_id",
                "medication_id"
            ],
            "Coverage_Type": [
                "coverage_type_name",
                "coverage_type_id"
            ]
        }
    },
    {
        "id": 139,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Menu_Items': ['Menu_Item_ID', 'Menu_Item_name', 'Description', 'Price', 'Availability', 'Recipe_ID', 'Category_ID', 'Restaurant_ID', 'Vegetarian', 'Calories', 'Menu_Category_ID']} and \n# the user question: Retrieve the name and price of the five most expensive menu items.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of the five most expensive menu items.",
        "output": "SELECT Menu_Item_name, Price FROM Menu_Items ORDER BY Price DESC LIMIT 5;",
        "schema": "food_and_drink",
        "processed_schema_content": {
            "Menu_Items": [
                "Menu_Item_ID",
                "Menu_Item_name",
                "Description",
                "Price",
                "Availability",
                "Recipe_ID",
                "Category_ID",
                "Restaurant_ID",
                "Vegetarian",
                "Calories",
                "Menu_Category_ID"
            ]
        }
    },
    {
        "id": 140,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Orders': ['customer_id', 'order_total', 'order_date', 'order_id', 'delivery_date', 'shipment_id', 'order_total_cost', 'date', 'total_price', 'total_amount', 'shipping_date'], 'Customers': ['customer_id', 'phone_number', 'email', 'customer_name', 'address', 'customer_email', 'customer_phone', 'customer_address', 'email_address', 'phone', 'registration_date', 'country', 'city', 'state', 'name', 'id', 'first_name', 'last_name']} and \n# the user question: Retrieve the list of orders along with the customer name and the date of the order, where the date is between '2022-06-01' and '2022-06-30' and the customer name starts with 'A', sorted by date in ascending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of orders along with the customer name and the date of the order, where the date is between '2022-06-01' and '2022-06-30' and the customer name starts with 'A', sorted by date in ascending order.",
        "output": "SELECT Orders.order_id, Customers.customer_name, Orders.date FROM Orders INNER JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.customer_name LIKE 'A%' AND Orders.date BETWEEN '2022-06-01' AND '2022-06-30' ORDER BY Orders.date ASC;",
        "schema": "glass_etching",
        "processed_schema_content": {
            "Orders": [
                "customer_id",
                "order_total",
                "order_date",
                "order_id",
                "delivery_date",
                "shipment_id",
                "order_total_cost",
                "date",
                "total_price",
                "total_amount",
                "shipping_date"
            ],
            "Customers": [
                "customer_id",
                "phone_number",
                "email",
                "customer_name",
                "address",
                "customer_email",
                "customer_phone",
                "customer_address",
                "email_address",
                "phone",
                "registration_date",
                "country",
                "city",
                "state",
                "name",
                "id",
                "first_name",
                "last_name"
            ]
        }
    },
    {
        "id": 142,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Books': ['library_id', 'book_id', 'publication_date', 'book_title', 'author', 'category', 'genre'], 'Libraries': ['library_id', 'library_name']} and \n# the user question: \"Retrieve the list of libraries and the total number of books available in each library.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Retrieve the list of libraries and the total number of books available in each library.\"",
        "output": "SELECT Libraries.library_name, COUNT(Books.book_id) AS total_books FROM Libraries LEFT JOIN Books ON Libraries.library_id = Books.library_id GROUP BY Libraries.library_id;",
        "schema": "education",
        "processed_schema_content": {
            "Books": [
                "library_id",
                "book_id",
                "publication_date",
                "book_title",
                "author",
                "category",
                "genre"
            ],
            "Libraries": [
                "library_id",
                "library_name"
            ]
        }
    },
    {
        "id": 143,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'email', 'john_doe', 'jane_smith', 'mike_jones'], 'Projects': ['user_id', 'Project', 'project_name', 'project_id', 'created_date'], 'Instances': ['project_id', 'instance_name', 'launch_date', 'storage_id', 'user_id', 'instance_id', 'instance_type', 'region_id', 'zone_id', 'cpu_usage', 'memory_usage', 'availability_zone', 'storage_usage', 'network_bandwidth', 'status', 'cpu_count'], 'Databases': ['project_id', 'db_id', 'database_id']} and \n# the user question: Text Query: Get the username and email of users who have launched instances in all available regions and have at least one database.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: Get the username and email of users who have launched instances in all available regions and have at least one database.",
        "output": "SELECT Users.username, Users.email FROM Users INNER JOIN Projects ON Users.user_id = Projects.user_id WHERE ( SELECT COUNT(DISTINCT Instances.region_id) FROM Instances WHERE Instances.project_id = Projects.project_id ) = (SELECT COUNT(DISTINCT region_id) FROM Regions) AND EXISTS ( SELECT 1 FROM Databases WHERE Databases.project_id = Projects.project_id );",
        "schema": "cloud_computing",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "email",
                "john_doe",
                "jane_smith",
                "mike_jones"
            ],
            "Projects": [
                "user_id",
                "Project",
                "project_name",
                "project_id",
                "created_date"
            ],
            "Instances": [
                "project_id",
                "instance_name",
                "launch_date",
                "storage_id",
                "user_id",
                "instance_id",
                "instance_type",
                "region_id",
                "zone_id",
                "cpu_usage",
                "memory_usage",
                "availability_zone",
                "storage_usage",
                "network_bandwidth",
                "status",
                "cpu_count"
            ],
            "Databases": [
                "project_id",
                "db_id",
                "database_id"
            ]
        }
    },
    {
        "id": 146,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Ingredients': ['Ingredient_ID', 'Ingredient_name', 'Supplier_ID', 'Unit_ID', 'Price_per_unit', 'Unit_of_measurement', 'Unit_price', 'Date_last_purchased', 'Date_supplied', 'Description', 'Unit', 'Cost_per_unit', 'Stock_quantity', 'Quantity', 'Unit_of_measure'], 'Menu_Items': ['Menu_Item_ID', 'Menu_Item_name', 'Description', 'Price', 'Availability', 'Recipe_ID', 'Category_ID', 'Restaurant_ID', 'Vegetarian', 'Calories', 'Menu_Category_ID'], 'Order_Items': ['Order_Item_ID', 'Order_ID', 'Menu_Item_ID', 'Quantity', 'Menu_Item_I'], 'Menu_Item_Ingredients': ['Menu_Item_ID', 'Quantity', 'Ingredient_ID']} and \n# the user question: Retrieve the name and total quantity of all ingredients that have been used in menu items, sorted by total quantity in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total quantity of all ingredients that have been used in menu items, sorted by total quantity in descending order.",
        "output": "SELECT Ingredients.Ingredient_name, SUM(Order_Items.Quantity * Menu_Item_Ingredients.Quantity) AS Total_quantity FROM Ingredients JOIN Menu_Item_Ingredients ON Ingredients.Ingredient_ID = Menu_Item_Ingredients.Ingredient_ID JOIN Menu_Items ON Menu_Item_Ingredients.Menu_Item_ID = Menu_Items.Menu_Item_ID JOIN Order_Items ON Menu_Items.Menu_Item_ID = Order_Items.Menu_Item_ID GROUP BY Ingredients.Ingredient_ID ORDER BY Total_quantity DESC;",
        "schema": "food_and_drink",
        "processed_schema_content": {
            "Ingredients": [
                "Ingredient_ID",
                "Ingredient_name",
                "Supplier_ID",
                "Unit_ID",
                "Price_per_unit",
                "Unit_of_measurement",
                "Unit_price",
                "Date_last_purchased",
                "Date_supplied",
                "Description",
                "Unit",
                "Cost_per_unit",
                "Stock_quantity",
                "Quantity",
                "Unit_of_measure"
            ],
            "Menu_Items": [
                "Menu_Item_ID",
                "Menu_Item_name",
                "Description",
                "Price",
                "Availability",
                "Recipe_ID",
                "Category_ID",
                "Restaurant_ID",
                "Vegetarian",
                "Calories",
                "Menu_Category_ID"
            ],
            "Order_Items": [
                "Order_Item_ID",
                "Order_ID",
                "Menu_Item_ID",
                "Quantity",
                "Menu_Item_I"
            ],
            "Menu_Item_Ingredients": [
                "Menu_Item_ID",
                "Quantity",
                "Ingredient_ID"
            ]
        }
    },
    {
        "id": 148,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {} and \n# the user question: Retrieve the average experience in years of all artisans:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the average experience in years of all artisans:",
        "output": "SELECT AVG(experience_years) AS average_experience FROM Artisans;",
        "schema": "sculpting",
        "processed_schema_content": {}
    },
    {
        "id": 150,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'cameras': ['model', 'id', 'sensor_size', 'megapixels', 'brand', 'resolution', 'price', 'name', 'image_stabilization', 'manual_focus', '[camera model]', '[new price]', 'camera_model', 'max_aperture', 'iso_range', 'wifi_supported']} and \n# the user question: Retrieve the name, resolution, and ISO range of all cameras that have a price between $500 and $1000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name, resolution, and ISO range of all cameras that have a price between $500 and $1000.",
        "output": "SELECT name, resolution, iso_range FROM cameras WHERE price BETWEEN 500 AND 1000;",
        "schema": "photography",
        "processed_schema_content": {
            "cameras": [
                "model",
                "id",
                "sensor_size",
                "megapixels",
                "brand",
                "resolution",
                "price",
                "name",
                "image_stabilization",
                "manual_focus",
                "[camera model]",
                "[new price]",
                "camera_model",
                "max_aperture",
                "iso_range",
                "wifi_supported"
            ]
        }
    },
    {
        "id": 153,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Sculptures': ['width', 'depth', 'material', 'height', 'creation_date', 'sculpture_name', 'sculpture_id', 'artist_id', 'collection_id', 'material_id', 'rating'], 'Artisans': ['artisan_name', 'specialization', 'experience_years', 'artisan_id', 'artist_id'], 'Exhibitions': ['exhibition_name', 'exhibition_id', 'museum_id', 'date', 'city', 'city_id', 'sculpture_id'], 'Sculpture_Exhibition': ['sculpture_id', 'exhibition_id', 'museum_id'], 'Sculptor_Artisan': ['artist_id', 'artisan_id', 'specialization', 'specialization_id'], 'Sculpture_Materials': ['sculpture_id', 'material_id'], 'Materials': ['material_name', 'material_id'], 'Cities': ['city_name', 'city_id']} and \n# the user question: Get the names of artisans who have worked on sculptures made of a specific material (e.g., \"Metal\") and have sculptures exhibited in a specific city (e.g., \"Barcelona\"):,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the names of artisans who have worked on sculptures made of a specific material (e.g., \"Metal\") and have sculptures exhibited in a specific city (e.g., \"Barcelona\"):",
        "output": "SELECT Artisans.artisan_name FROM Artisans JOIN Sculptor_Artisan ON Artisans.artisan_id = Sculptor_Artisan.artisan_id JOIN Sculptures ON Sculptor_Artisan.artist_id = Sculptures.artist_id JOIN Sculpture_Exhibition ON Sculptures.sculpture_id = Sculpture_Exhibition.sculpture_id JOIN Exhibitions ON Sculpture_Exhibition.exhibition_id = Exhibitions.exhibition_id JOIN Cities ON Exhibitions.city_id = Cities.city_id JOIN Sculpture_Materials ON Sculptures.sculpture_id = Sculpture_Materials.sculpture_id JOIN Materials ON Sculpture_Materials.material_id = Materials.material_id WHERE Materials.material_name = 'Metal' AND Cities.city_name = 'Barcelona';",
        "schema": "sculpting",
        "processed_schema_content": {
            "Sculptures": [
                "width",
                "depth",
                "material",
                "height",
                "creation_date",
                "sculpture_name",
                "sculpture_id",
                "artist_id",
                "collection_id",
                "material_id",
                "rating"
            ],
            "Artisans": [
                "artisan_name",
                "specialization",
                "experience_years",
                "artisan_id",
                "artist_id"
            ],
            "Exhibitions": [
                "exhibition_name",
                "exhibition_id",
                "museum_id",
                "date",
                "city",
                "city_id",
                "sculpture_id"
            ],
            "Sculpture_Exhibition": [
                "sculpture_id",
                "exhibition_id",
                "museum_id"
            ],
            "Sculptor_Artisan": [
                "artist_id",
                "artisan_id",
                "specialization",
                "specialization_id"
            ],
            "Sculpture_Materials": [
                "sculpture_id",
                "material_id"
            ],
            "Materials": [
                "material_name",
                "material_id"
            ],
            "Cities": [
                "city_name",
                "city_id"
            ]
        }
    },
    {
        "id": 154,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Patients': ['medical_history', 'patient_id', 'first_name', 'last_name', 'age_group', 'gender', 'Age', 'Contact_Info', 'Name', 'Diagnosis', 'Discharge_Date', 'Admission_Date', 'Address', 'Family_History', 'Patient_ID', 'Doctor_ID', 'Doctor_I', 'AdmissionDate', 'Therapy', 'date_of_birth', 'name'], 'Medications': ['medication_name', 'patient_id', 'start_date', 'end_date', 'medical_record_id', 'admission_id', 'dosage', 'quantity', 'frequency', 'duration', 'medication_id', 'drug_class', 'medication_type', 'dosage_amount', 'TimeToAdminister']} and \n# the user question: Find the patients who have been prescribed a medication with a dosage between 5 and 10mg.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the patients who have been prescribed a medication with a dosage between 5 and 10mg.",
        "output": "SELECT DISTINCT Patients.patient_id, Patients.first_name, Patients.last_name, Medications.medication_name, Medications.dosage FROM Patients INNER JOIN Medications ON Patients.patient_id = Medications.patient_id WHERE Medications.dosage BETWEEN 5 AND 10;",
        "schema": "nursing",
        "processed_schema_content": {
            "Patients": [
                "medical_history",
                "patient_id",
                "first_name",
                "last_name",
                "age_group",
                "gender",
                "Age",
                "Contact_Info",
                "Name",
                "Diagnosis",
                "Discharge_Date",
                "Admission_Date",
                "Address",
                "Family_History",
                "Patient_ID",
                "Doctor_ID",
                "Doctor_I",
                "AdmissionDate",
                "Therapy",
                "date_of_birth",
                "name"
            ],
            "Medications": [
                "medication_name",
                "patient_id",
                "start_date",
                "end_date",
                "medical_record_id",
                "admission_id",
                "dosage",
                "quantity",
                "frequency",
                "duration",
                "medication_id",
                "drug_class",
                "medication_type",
                "dosage_amount",
                "TimeToAdminister"
            ]
        }
    },
    {
        "id": 157,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'users': ['password', 'email', 'name', 'created_at', 'id', 'country', 'age', 'region', 'email_verified', 'username', 'date_of_birth', 'countr', 'phone_number', 'device_type', 'user_id', 'last_login'], 'app_downloads': ['download_date', 'app_id', 'user_id', 'app_version_id', 'status', 'id', 'created_at', 'downloaded_at', 'num_downloads', 'count', 'date', 'downloads', 'app_name'], 'app_reviews': ['app_id', 'rating', 'user_id', 'comment', 'created_at', 'status', 'id', 'updated_at', 'posted_at', 'num_reviews'], 'app_categories': ['name', 'id', 'description', 'app_id', 'category_id'], 'apps': ['name', 'id', 'price', 'created_at', 'category_id', 'updated_at', 'description', 'developer_id', 'rating', 'app_id', 'developer', 'release_date', 'downloads', 'version', 'price_type', 'status', 'creation_date', 'app_name', 'XYZ', 'category']} and \n# the user question: Retrieve the `name` and `category` of all apps that have been downloaded by users who live in Canada and have left a review with a rating of 5:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the `name` and `category` of all apps that have been downloaded by users who live in Canada and have left a review with a rating of 5:",
        "output": "SELECT a.name, ac.name AS category FROM apps a INNER JOIN app_categories ac ON a.category_id = ac.id INNER JOIN app_reviews ar ON a.id = ar.app_id INNER JOIN app_downloads ad ON a.id = ad.app_id INNER JOIN users u ON ad.user_id = u.id WHERE u.country = 'Canada' AND ar.rating = 5;",
        "schema": "mobile_app_development",
        "processed_schema_content": {
            "users": [
                "password",
                "email",
                "name",
                "created_at",
                "id",
                "country",
                "age",
                "region",
                "email_verified",
                "username",
                "date_of_birth",
                "countr",
                "phone_number",
                "device_type",
                "user_id",
                "last_login"
            ],
            "app_downloads": [
                "download_date",
                "app_id",
                "user_id",
                "app_version_id",
                "status",
                "id",
                "created_at",
                "downloaded_at",
                "num_downloads",
                "count",
                "date",
                "downloads",
                "app_name"
            ],
            "app_reviews": [
                "app_id",
                "rating",
                "user_id",
                "comment",
                "created_at",
                "status",
                "id",
                "updated_at",
                "posted_at",
                "num_reviews"
            ],
            "app_categories": [
                "name",
                "id",
                "description",
                "app_id",
                "category_id"
            ],
            "apps": [
                "name",
                "id",
                "price",
                "created_at",
                "category_id",
                "updated_at",
                "description",
                "developer_id",
                "rating",
                "app_id",
                "developer",
                "release_date",
                "downloads",
                "version",
                "price_type",
                "status",
                "creation_date",
                "app_name",
                "XYZ",
                "category"
            ]
        }
    },
    {
        "id": 159,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Devices': ['device_id', 'device_name', 'device_type', 'os', 'webserver', 'user_id', 'office_id', 'model', 'manufacturer', 'last_scanned', 'status', 'added_time', 'last_communication_time', 'os_version', 'snmp_community_string', 'hardware_status', 'firmware_version', 'last_reboot_time', 'last_seen_online_time', 'online_status', 'last_active_timestamp', 'ram_capacity', 'processor_speed', 'free_storage_space', 'location', 'operating_system'], 'Network_Interfaces': ['interface_id', 'device_id', 'interface_name', 'ip_address', 'subnet_mask', 'mac_address', 'default_gateway', 'vlan_tag', 'interface_type', 'bandwidth', 'link_speed', 'ip_address_type', 'mtu', 'dns_server', 'ip_mode', 'vlan_id', 'link_status', 'speed', 'interface_speed', 'status', 'last_activity_time'], 'Firewall_Rules': ['rule_id', 'device_id', 'source_ip', 'destination_ip', 'protocol', 'action', 'destination_port', 'status', 'source_port', 'source_ip_address', 'destination_ip_address', 'rule_action'], 'Scans': ['scan_id', 'scanner_id', 'device_id', 'start_time', 'end_time']} and \n# the user question: Find all devices that have at least one open port on port range 3000-4000 and have been scanned in the last 24 hours.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all devices that have at least one open port on port range 3000-4000 and have been scanned in the last 24 hours.",
        "output": "SELECT DISTINCT d.device_name FROM Devices d INNER JOIN Network_Interfaces ni ON d.device_id = ni.device_id INNER JOIN Firewall_Rules fr ON ni.ip_address = fr.destination_ip INNER JOIN Scans s ON d.device_id = s.device_id WHERE fr.destination_port >= 3000 AND fr.destination_port <= 4000 AND fr.action = 'allow' AND s.end_time >= datetime('now', '-24 hours');",
        "schema": "network_security",
        "processed_schema_content": {
            "Devices": [
                "device_id",
                "device_name",
                "device_type",
                "os",
                "webserver",
                "user_id",
                "office_id",
                "model",
                "manufacturer",
                "last_scanned",
                "status",
                "added_time",
                "last_communication_time",
                "os_version",
                "snmp_community_string",
                "hardware_status",
                "firmware_version",
                "last_reboot_time",
                "last_seen_online_time",
                "online_status",
                "last_active_timestamp",
                "ram_capacity",
                "processor_speed",
                "free_storage_space",
                "location",
                "operating_system"
            ],
            "Network_Interfaces": [
                "interface_id",
                "device_id",
                "interface_name",
                "ip_address",
                "subnet_mask",
                "mac_address",
                "default_gateway",
                "vlan_tag",
                "interface_type",
                "bandwidth",
                "link_speed",
                "ip_address_type",
                "mtu",
                "dns_server",
                "ip_mode",
                "vlan_id",
                "link_status",
                "speed",
                "interface_speed",
                "status",
                "last_activity_time"
            ],
            "Firewall_Rules": [
                "rule_id",
                "device_id",
                "source_ip",
                "destination_ip",
                "protocol",
                "action",
                "destination_port",
                "status",
                "source_port",
                "source_ip_address",
                "destination_ip_address",
                "rule_action"
            ],
            "Scans": [
                "scan_id",
                "scanner_id",
                "device_id",
                "start_time",
                "end_time"
            ]
        }
    },
    {
        "id": 161,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Billing': ['session_id', 'date', 'amount', 'id', 'start_time', 'end_time']} and \n# the user question: Retrieve the names and total hours of all therapists who have billed for sessions in the past month, sorted in descending order by total hours:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and total hours of all therapists who have billed for sessions in the past month, sorted in descending order by total hours:",
        "output": "SELECT t.name, SUM(julianday(b.end_time) - julianday(b.start_time)) * 24 AS total_hours FROM Therapists t INNER JOIN Sessions s ON t.id = s.therapist_id INNER JOIN Billing b ON s.id = b.session_id WHERE b.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY t.id ORDER BY total_hours DESC",
        "schema": "counseling",
        "processed_schema_content": {
            "Sessions": [
                "therapist_id",
                "client_id",
                "id",
                "date",
                "location",
                "name",
                "duration",
                "therapy_type_id",
                "cost",
                "start_time",
                "session_type",
                "rate",
                "",
                "SessionNotes",
                "SessionID",
                "SessionDate",
                "CounselorID"
            ],
            "Therapists": [
                "id",
                "name",
                "gender",
                "email",
                "phone",
                "license_state",
                "experience_years",
                "last_name",
                "is_active",
                "is_licensed",
                "rate_per_hour"
            ],
            "Billing": [
                "session_id",
                "date",
                "amount",
                "id",
                "start_time",
                "end_time"
            ]
        }
    },
    {
        "id": 163,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'email', 'password', 'registration_date', 'experience_id', 'playtime', 'age', 'country', 'duration', 'total_duration', 'gender'], 'Games': ['game_id', 'game_name', 'genre', 'developer', 'publisher', 'rating', 'user_id', 'title', 'price', 'release_year', 'number_of_players', 'release_month', 'multiplayer_support', 'release_date'], 'GameRatings': ['game_id', 'user_id', 'rating'], 'VRExperiences': ['experience_id', 'game_id', 'developer', 'user_id', 'resolution', 'rating', 'genre', 'title', 'price', 'release_year', 'number_of_players', 'release_month', 'release_date', 'sale_price', 'rating_id', 'developer_id'], 'ExperienceRatings': ['experience_id', 'user_id', 'rating', 'resolution']} and \n# the user question: Find the names of all users who have played a game with a rating greater than or equal to 4.0, and have also played a VR experience developed by \"Oculus\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all users who have played a game with a rating greater than or equal to 4.0, and have also played a VR experience developed by \"Oculus\".",
        "output": "SELECT DISTINCT Users.username FROM Users JOIN GameRatings ON Users.user_id = GameRatings.user_id JOIN Games ON GameRatings.game_id = Games.game_id JOIN VRExperiences ON Games.game_id = VRExperiences.game_id JOIN ExperienceRatings ON VRExperiences.experience_id = ExperienceRatings.experience_id WHERE GameRatings.rating >= 4.0 AND VRExperiences.developer = 'Oculus' AND ExperienceRatings.user_id = Users.user_id",
        "schema": "virtual_reality",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "email",
                "password",
                "registration_date",
                "experience_id",
                "playtime",
                "age",
                "country",
                "duration",
                "total_duration",
                "gender"
            ],
            "Games": [
                "game_id",
                "game_name",
                "genre",
                "developer",
                "publisher",
                "rating",
                "user_id",
                "title",
                "price",
                "release_year",
                "number_of_players",
                "release_month",
                "multiplayer_support",
                "release_date"
            ],
            "GameRatings": [
                "game_id",
                "user_id",
                "rating"
            ],
            "VRExperiences": [
                "experience_id",
                "game_id",
                "developer",
                "user_id",
                "resolution",
                "rating",
                "genre",
                "title",
                "price",
                "release_year",
                "number_of_players",
                "release_month",
                "release_date",
                "sale_price",
                "rating_id",
                "developer_id"
            ],
            "ExperienceRatings": [
                "experience_id",
                "user_id",
                "rating",
                "resolution"
            ]
        }
    },
    {
        "id": 164,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'investment_accounts': ['account_balance', 'interest_rate', 'user_id', 'account_name', 'return_rate']} and \n# the user question: Get the name and total balance of all investment accounts with a return rate greater than 8%.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the name and total balance of all investment accounts with a return rate greater than 8%.",
        "output": "SELECT account_name, SUM(account_balance) AS total_balance FROM investment_accounts WHERE return_rate > 8;",
        "schema": "finance",
        "processed_schema_content": {
            "investment_accounts": [
                "account_balance",
                "interest_rate",
                "user_id",
                "account_name",
                "return_rate"
            ]
        }
    },
    {
        "id": 165,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Programs': ['program_id', 'program_name', 'program_description', 'start_date', 'end_date', 'status', 'Program'], 'Enrollments': ['enrollment_id', 'user_id', 'program_id', 'enrollment_date', 'enrollment_status'], 'Assessments': ['assessment_id', 'assessment_name', 'assessment_description', 'assessment_date', 'program_id', 'user_id', 'date_recorded', 'weight_current', 'weight_initial']} and \n# the user question: Find the names and email addresses of all users who have enrolled in a program but have not completed any assessments:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and email addresses of all users who have enrolled in a program but have not completed any assessments:",
        "output": "SELECT Users.first_name, Users.last_name, Users.email FROM Users JOIN Enrollments ON Users.user_id = Enrollments.user_id JOIN Programs ON Enrollments.program_id = Programs.program_id LEFT JOIN Assessments ON Users.user_id = Assessments.user_id WHERE Assessments.assessment_id IS NULL;",
        "schema": "health_and_wellness_programs",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "first_name",
                "last_name",
                "email",
                "password",
                "phone_number",
                "address",
                "age",
                "gender",
                "bmi",
                "goal_id"
            ],
            "Programs": [
                "program_id",
                "program_name",
                "program_description",
                "start_date",
                "end_date",
                "status",
                "Program"
            ],
            "Enrollments": [
                "enrollment_id",
                "user_id",
                "program_id",
                "enrollment_date",
                "enrollment_status"
            ],
            "Assessments": [
                "assessment_id",
                "assessment_name",
                "assessment_description",
                "assessment_date",
                "program_id",
                "user_id",
                "date_recorded",
                "weight_current",
                "weight_initial"
            ]
        }
    },
    {
        "id": 166,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Company': ['company_id', 'company_name', 'country_id', 'num_employees'], 'CompanyIndustry': ['company_id', 'industry_id'], 'Industry': ['industry_id', 'industry_name'], 'Country': ['country_id', 'country_name', 'population']} and \n# the user question: Find the company names and their respective industry that have a headquarters in Germany and operate in the Aerospace industry.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the company names and their respective industry that have a headquarters in Germany and operate in the Aerospace industry.",
        "output": "SELECT Company.company_name, Industry.industry_name FROM Company INNER JOIN CompanyIndustry ON Company.company_id = CompanyIndustry.company_id INNER JOIN Industry ON CompanyIndustry.industry_id = Industry.industry_id INNER JOIN Country ON Company.country_id = Country.country_id WHERE Country.country_name = 'Germany' AND Industry.industry_name = 'Aerospace';",
        "schema": "economics",
        "processed_schema_content": {
            "Company": [
                "company_id",
                "company_name",
                "country_id",
                "num_employees"
            ],
            "CompanyIndustry": [
                "company_id",
                "industry_id"
            ],
            "Industry": [
                "industry_id",
                "industry_name"
            ],
            "Country": [
                "country_id",
                "country_name",
                "population"
            ]
        }
    },
    {
        "id": 168,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Comedians': ['first_name', 'last_name', 'comedian_id', 'nationality', 'birthplace', 'country_id', 'birth_year', 'gender', 'name', 'city_id', 'school_id', 'birth_state', 'netflix_special', 'youtube_subscribers', 'experience'], 'Performances': ['rating', 'comedian_id', 'show_id', 'performance_id', 'special_id', 'venue_id', 'production_id', 'performance_date'], 'Shows': ['year', 'show_id', 'title', 'description', 'location', 'venue_id', 'duration', 'network', 'release_date', 'Sticks', 'date_recorded', 'name', 'duration_minutes', 'recorded_year', 'date'], 'Special_Networks': ['special_id', 'network_id'], 'Networks': ['network_id', 'name'], 'Countries': ['country_id', 'continent_id', 'name']} and \n# the user question: Retrieve the titles and release years of all shows that were released on HBO and had at least one comedian who is a woman and was born in the 1980s.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the titles and release years of all shows that were released on HBO and had at least one comedian who is a woman and was born in the 1980s.",
        "output": "SELECT DISTINCT s.title, s.year FROM Shows s JOIN Performances p ON p.show_id = s.show_id JOIN Comedians c ON c.comedian_id = p.comedian_id JOIN Countries co ON co.country_id = c.country_id JOIN Special_Networks sn ON sn.special_id = s.show_id JOIN Networks n ON n.network_id = sn.network_id WHERE n.name = 'HBO' AND c.gender = 'female' AND c.birth_year BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY s.title, s.year;",
        "schema": "stand-up_comedy",
        "processed_schema_content": {
            "Comedians": [
                "first_name",
                "last_name",
                "comedian_id",
                "nationality",
                "birthplace",
                "country_id",
                "birth_year",
                "gender",
                "name",
                "city_id",
                "school_id",
                "birth_state",
                "netflix_special",
                "youtube_subscribers",
                "experience"
            ],
            "Performances": [
                "rating",
                "comedian_id",
                "show_id",
                "performance_id",
                "special_id",
                "venue_id",
                "production_id",
                "performance_date"
            ],
            "Shows": [
                "year",
                "show_id",
                "title",
                "description",
                "location",
                "venue_id",
                "duration",
                "network",
                "release_date",
                "Sticks",
                "date_recorded",
                "name",
                "duration_minutes",
                "recorded_year",
                "date"
            ],
            "Special_Networks": [
                "special_id",
                "network_id"
            ],
            "Networks": [
                "network_id",
                "name"
            ],
            "Countries": [
                "country_id",
                "continent_id",
                "name"
            ]
        }
    },
    {
        "id": 169,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'name', 'description', 'start_date', 'end_date', 'status', 'org_id', 'min_donation', 'min_rating', 'location_id', 'funding_goal', 'total_funding_needed'], 'Donations': ['donation_id', 'user_id', 'project_id', 'amount', 'date', 'organization_id'], 'Volunteers': ['volunteer_id', 'user_id', 'project_id', 'start_date', 'end_date', 'date', 'hours', 'email', 'last_name', 'phone', 'first_name', 'role'], 'Causes': ['cause_id', 'name', 'description', 'Energy', 'Renewable', 'Clean', 'Water', 'Conservation', 'Ocean', 'Waste', 'Reduction', 'Buildings', 'Green', 'Materials', 'Sustainable', 'Climate', 'Agriculture', 'Transportation', 'Tourism', 'Building', 'Zero', 'Jobs', 'Reforestation', 'Plastic', 'Biodiversity', 'Food', 'Eco', 'Systems', 'Environmental', 'Education', 'Justice'], 'Projects_Causes': ['project_id', 'cause_id']} and \n# the user question: Retrieve the name and total number of volunteers for all projects associated with the \"Sustainable Ecotourism\" cause that have a minimum donation amount of $50 and have received at least one donation, sorted by total number of volunteers in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total number of volunteers for all projects associated with the \"Sustainable Ecotourism\" cause that have a minimum donation amount of $50 and have received at least one donation, sorted by total number of volunteers in descending order:",
        "output": "SELECT Projects.name, COUNT(DISTINCT Volunteers.user_id) AS total_volunteers FROM Projects INNER JOIN Projects_Causes ON Projects.project_id = Projects_Causes.project_id INNER JOIN Causes ON Projects_Causes.cause_id = Causes.cause_id AND Causes.name = 'Sustainable Ecotourism' INNER JOIN Donations ON Projects.project_id = Donations.project_id AND Donations.amount >= 50 INNER JOIN Volunteers ON Projects.project_id = Volunteers.project_id GROUP BY Projects.name HAVING COUNT(DISTINCT Donations.user_id) >= 1 ORDER BY total_volunteers DESC;",
        "schema": "sustainability",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "name",
                "description",
                "start_date",
                "end_date",
                "status",
                "org_id",
                "min_donation",
                "min_rating",
                "location_id",
                "funding_goal",
                "total_funding_needed"
            ],
            "Donations": [
                "donation_id",
                "user_id",
                "project_id",
                "amount",
                "date",
                "organization_id"
            ],
            "Volunteers": [
                "volunteer_id",
                "user_id",
                "project_id",
                "start_date",
                "end_date",
                "date",
                "hours",
                "email",
                "last_name",
                "phone",
                "first_name",
                "role"
            ],
            "Causes": [
                "cause_id",
                "name",
                "description",
                "Energy",
                "Renewable",
                "Clean",
                "Water",
                "Conservation",
                "Ocean",
                "Waste",
                "Reduction",
                "Buildings",
                "Green",
                "Materials",
                "Sustainable",
                "Climate",
                "Agriculture",
                "Transportation",
                "Tourism",
                "Building",
                "Zero",
                "Jobs",
                "Reforestation",
                "Plastic",
                "Biodiversity",
                "Food",
                "Eco",
                "Systems",
                "Environmental",
                "Education",
                "Justice"
            ],
            "Projects_Causes": [
                "project_id",
                "cause_id"
            ]
        }
    },
    {
        "id": 170,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Teams': ['coach_id', 'sport', 'team_name', 'team_id', 'athlete_id', 'disqualified', 'name'], 'Competitions': ['season', 'competition_id', 'team_id', 'sport', 'name', 'date']} and \n# the user question: Find the number of competitions each team has participated in, sorted in descending order of number of competitions.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of competitions each team has participated in, sorted in descending order of number of competitions.",
        "output": "SELECT Teams.team_name, COUNT(DISTINCT Competitions.competition_id) AS num_competitions FROM Teams LEFT JOIN Competitions ON Teams.team_id = Competitions.team_id GROUP BY Teams.team_id ORDER BY num_competitions DESC;",
        "schema": "athletic_training",
        "processed_schema_content": {
            "Teams": [
                "coach_id",
                "sport",
                "team_name",
                "team_id",
                "athlete_id",
                "disqualified",
                "name"
            ],
            "Competitions": [
                "season",
                "competition_id",
                "team_id",
                "sport",
                "name",
                "date"
            ]
        }
    },
    {
        "id": 173,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'category_id', 'price', 'units_in_stock', 'price_per_unit', 'discount', 'country_of_origin', 'rating', 'discontinued', 'is_discontinued', 'unit_price', 'last_restock_date', 'quantity_in_stock', 'supplier_id', 'discontinued_date', 'unit_cost', 'brand_id', 'stock', 'stock_quantity', 'brand_name', 'cost', 'Ingredients', 'Category', 'Price', 'ProductID'], 'Product_Reviews': ['product_id', 'review_id', 'rating', 'user_id', 'review_date']} and \n# the user question: Find the average rating of each product.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average rating of each product.",
        "output": "SELECT p.product_name, AVG(pr.rating) AS avg_rating FROM Products p LEFT JOIN Product_Reviews pr ON p.product_id = pr.product_id GROUP BY p.product_id;",
        "schema": "cosmetics_making",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "category_id",
                "price",
                "units_in_stock",
                "price_per_unit",
                "discount",
                "country_of_origin",
                "rating",
                "discontinued",
                "is_discontinued",
                "unit_price",
                "last_restock_date",
                "quantity_in_stock",
                "supplier_id",
                "discontinued_date",
                "unit_cost",
                "brand_id",
                "stock",
                "stock_quantity",
                "brand_name",
                "cost",
                "Ingredients",
                "Category",
                "Price",
                "ProductID"
            ],
            "Product_Reviews": [
                "product_id",
                "review_id",
                "rating",
                "user_id",
                "review_date"
            ]
        }
    },
    {
        "id": 174,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Programs': ['program_id', 'program_name', 'program_description', 'start_date', 'end_date', 'status', 'Program'], 'Goals': ['goal_id', 'goal_name', 'goal_description', 'goal_due_date', 'user_id', 'program_id', 'goal_target', 'goal_type', 'goal_end_date', 'goal_target_date', 'goal_start_date', 'goal_status', 'goal_value'], 'Progress': ['progress_id', 'goal_id', 'user_id', 'progress_date', 'progress_value', 'date_recorded']} and \n# the user question: Find the name and email address of the user who has achieved the most progress towards their stress reduction goal in the program with name \"Stress Management Program\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and email address of the user who has achieved the most progress towards their stress reduction goal in the program with name \"Stress Management Program\":",
        "output": "SELECT Users.first_name, Users.last_name, Users.email, MAX(Progress.progress_value / Goals.goal_target) AS max_progress FROM Users JOIN Goals ON Users.user_id = Goals.user_id JOIN Programs ON Goals.program_id = Programs.program_id JOIN Progress ON Goals.goal_id = Progress.goal_id WHERE Programs.program_name = 'Stress Management Program' AND Goals.goal_type = 'Stress Reduction' AND Goals.goal_target IS NOT NULL GROUP BY Users.user_id ORDER BY max_progress DESC LIMIT 1;",
        "schema": "health_and_wellness_programs",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "first_name",
                "last_name",
                "email",
                "password",
                "phone_number",
                "address",
                "age",
                "gender",
                "bmi",
                "goal_id"
            ],
            "Programs": [
                "program_id",
                "program_name",
                "program_description",
                "start_date",
                "end_date",
                "status",
                "Program"
            ],
            "Goals": [
                "goal_id",
                "goal_name",
                "goal_description",
                "goal_due_date",
                "user_id",
                "program_id",
                "goal_target",
                "goal_type",
                "goal_end_date",
                "goal_target_date",
                "goal_start_date",
                "goal_status",
                "goal_value"
            ],
            "Progress": [
                "progress_id",
                "goal_id",
                "user_id",
                "progress_date",
                "progress_value",
                "date_recorded"
            ]
        }
    },
    {
        "id": 176,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Screens': ['screen_description', 'screen_name', 'project_id', 'screen_id', 'template_id'], 'Projects': ['project_id', 'project_name', 'project_description', 'user_id', 'screen_count', 'client_id', 'screen_id', 'created_at']} and \n# the user question: Retrieve the project_name and the sum of screen counts for all projects that have at least one screen.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the project_name and the sum of screen counts for all projects that have at least one screen.",
        "output": "SELECT Projects.project_name, SUM(screen_count) AS total_screens FROM Projects INNER JOIN ( SELECT project_id, COUNT(screen_id) AS screen_count FROM Screens GROUP BY project_id ) AS screen_counts ON Projects.project_id = screen_counts.project_id WHERE screen_counts.screen_count > 0 GROUP BY Projects.project_id;",
        "schema": "user_interface_design",
        "processed_schema_content": {
            "Screens": [
                "screen_description",
                "screen_name",
                "project_id",
                "screen_id",
                "template_id"
            ],
            "Projects": [
                "project_id",
                "project_name",
                "project_description",
                "user_id",
                "screen_count",
                "client_id",
                "screen_id",
                "created_at"
            ]
        }
    },
    {
        "id": 177,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'exoplanets': ['radius', 'name', 'discovery_date', 'orbital_period', 'mass', 'discovery_method_id', 'eccentricity', 'surface_gravity', 'surface_temperature', 'density', 'minimum_mass', 'equilibrium_temperature', 'distance_from_star', 'inclination', 'temperature', 'orbital_eccentricity', 'semi_major_axis', 'discovery_year', 'exoplanet_name', 'discovery_method', 'average_temperature', 'year_discovered']} and \n# the user question: Retrieve the name and discovery date of all exoplanets that have an orbital period less than 5 days and a radius less than 1000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and discovery date of all exoplanets that have an orbital period less than 5 days and a radius less than 1000.",
        "output": "SELECT name, discovery_date FROM exoplanets WHERE orbital_period < 5 AND radius < 1000;",
        "schema": "astronomy",
        "processed_schema_content": {
            "exoplanets": [
                "radius",
                "name",
                "discovery_date",
                "orbital_period",
                "mass",
                "discovery_method_id",
                "eccentricity",
                "surface_gravity",
                "surface_temperature",
                "density",
                "minimum_mass",
                "equilibrium_temperature",
                "distance_from_star",
                "inclination",
                "temperature",
                "orbital_eccentricity",
                "semi_major_axis",
                "discovery_year",
                "exoplanet_name",
                "discovery_method",
                "average_temperature",
                "year_discovered"
            ]
        }
    },
    {
        "id": 178,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Hotels': ['hotel_id', 'name', 'description', 'address', 'city', 'country', 'image_url', 'price', 'hotel_name', 'chain_id', 'num_rooms', 'destination_id', 'rating', 'has_gym', 'has_swimming_pool', 'longitude', 'hotel_address', 'latitude', 'attraction_name', 'distance_to_attraction', 'star_rating'], 'Hotel_Features': ['gym', 'swimming_pool', 'hotel_id', 'rooftop_bar', 'ocean_view', 'rooftop_pool', 'spa', 'beachfront', 'fitness_center', 'casino', 'pool', 'beachfront_view'], 'Hotel_Services': ['shuttle_service', 'hotel_id', 'free_breakfast', 'vegetarian_meals', 'kids_club', 'complimentary_breakfast', 'spa', 'pet_friendly', 'wifi', 'fitness_center', 'rooftop_pool', 'breakfast', 'free_wifi', 'room_service']} and \n# the user question: Find the names and addresses of all hotels in Bali that have a spa and offer vegetarian meals.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and addresses of all hotels in Bali that have a spa and offer vegetarian meals.",
        "output": "SELECT Hotels.hotel_name, Hotels.address FROM Hotels JOIN Hotel_Features ON Hotels.hotel_id = Hotel_Features.hotel_id JOIN Hotel_Services ON Hotels.hotel_id = Hotel_Services.hotel_id WHERE Hotels.city = 'Bali' AND Hotel_Features.spa = 'Yes' AND Hotel_Services.vegetarian_meals = 'Yes';",
        "schema": "travel",
        "processed_schema_content": {
            "Hotels": [
                "hotel_id",
                "name",
                "description",
                "address",
                "city",
                "country",
                "image_url",
                "price",
                "hotel_name",
                "chain_id",
                "num_rooms",
                "destination_id",
                "rating",
                "has_gym",
                "has_swimming_pool",
                "longitude",
                "hotel_address",
                "latitude",
                "attraction_name",
                "distance_to_attraction",
                "star_rating"
            ],
            "Hotel_Features": [
                "gym",
                "swimming_pool",
                "hotel_id",
                "rooftop_bar",
                "ocean_view",
                "rooftop_pool",
                "spa",
                "beachfront",
                "fitness_center",
                "casino",
                "pool",
                "beachfront_view"
            ],
            "Hotel_Services": [
                "shuttle_service",
                "hotel_id",
                "free_breakfast",
                "vegetarian_meals",
                "kids_club",
                "complimentary_breakfast",
                "spa",
                "pet_friendly",
                "wifi",
                "fitness_center",
                "rooftop_pool",
                "breakfast",
                "free_wifi",
                "room_service"
            ]
        }
    },
    {
        "id": 179,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Photographers': ['photographer_id', 'name', 'num_photos_sold', 'rating', 'city', 'state', 'photographer_name', 'stat', 'photo_count', 'experience_start_date', 'Total_Earnings', 'id'], 'Photos': ['photo_id', 'photographer_id', 'category_id', 'date_sold', 'price', 'num_sold', 'cost_of_production', 'num_views', 'rating', 'num_orders', 'city', 'resolution', 'shutter_speed', 'status', 'sales', 'delivery_type', 'taken_date', 'photo_name', 'homepage_featured', 'date_taken', 'location_id', 'resolution_height', 'resolution_width', 'lens_id', 'photo_date'], 'Locations': ['city', 'location_id', 'country', 'state', 'Last_Photo_Shoot_Date']} and \n# the user question: Find the names and average ratings of all photographers who have taken photos in the state \"New York\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and average ratings of all photographers who have taken photos in the state \"New York\".",
        "output": "SELECT Photographers.photographer_name, AVG(Photos.rating) AS avg_rating FROM Photographers INNER JOIN Photos ON Photographers.photographer_id = Photos.photographer_id INNER JOIN Locations ON Photos.location_id = Locations.location_id WHERE Locations.state = 'New York' GROUP BY Photographers.photographer_name;",
        "schema": "photography",
        "processed_schema_content": {
            "Photographers": [
                "photographer_id",
                "name",
                "num_photos_sold",
                "rating",
                "city",
                "state",
                "photographer_name",
                "stat",
                "photo_count",
                "experience_start_date",
                "Total_Earnings",
                "id"
            ],
            "Photos": [
                "photo_id",
                "photographer_id",
                "category_id",
                "date_sold",
                "price",
                "num_sold",
                "cost_of_production",
                "num_views",
                "rating",
                "num_orders",
                "city",
                "resolution",
                "shutter_speed",
                "status",
                "sales",
                "delivery_type",
                "taken_date",
                "photo_name",
                "homepage_featured",
                "date_taken",
                "location_id",
                "resolution_height",
                "resolution_width",
                "lens_id",
                "photo_date"
            ],
            "Locations": [
                "city",
                "location_id",
                "country",
                "state",
                "Last_Photo_Shoot_Date"
            ]
        }
    },
    {
        "id": 181,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['status', 'end_date', 'start_date', 'project_name', 'contractor_id', 'project_id', 'user_id', 'category_id']} and \n# the user question: \"Retrieve the project name, start date, and end date for all projects that are currently in progress.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Retrieve the project name, start date, and end date for all projects that are currently in progress.\"",
        "output": "SELECT project_name, start_date, end_date FROM Projects WHERE status = 'In Progress';",
        "schema": "home_improvement",
        "processed_schema_content": {
            "Projects": [
                "status",
                "end_date",
                "start_date",
                "project_name",
                "contractor_id",
                "project_id",
                "user_id",
                "category_id"
            ]
        }
    },
    {
        "id": 184,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['user_id', 'Project', 'project_name', 'project_id', 'created_date'], 'Instances': ['project_id', 'instance_name', 'launch_date', 'storage_id', 'user_id', 'instance_id', 'instance_type', 'region_id', 'zone_id', 'cpu_usage', 'memory_usage', 'availability_zone', 'storage_usage', 'network_bandwidth', 'status', 'cpu_count']} and \n# the user question: Text Query: Retrieve the project names and the total storage usage across all instances for each project, sorted in descending order of the total storage usage.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: Retrieve the project names and the total storage usage across all instances for each project, sorted in descending order of the total storage usage.",
        "output": "SELECT Projects.project_name, SUM(Instances.storage_usage) AS total_storage_usage FROM Projects INNER JOIN Instances ON Projects.project_id = Instances.project_id GROUP BY Projects.project_name ORDER BY total_storage_usage DESC;",
        "schema": "cloud_computing",
        "processed_schema_content": {
            "Projects": [
                "user_id",
                "Project",
                "project_name",
                "project_id",
                "created_date"
            ],
            "Instances": [
                "project_id",
                "instance_name",
                "launch_date",
                "storage_id",
                "user_id",
                "instance_id",
                "instance_type",
                "region_id",
                "zone_id",
                "cpu_usage",
                "memory_usage",
                "availability_zone",
                "storage_usage",
                "network_bandwidth",
                "status",
                "cpu_count"
            ]
        }
    },
    {
        "id": 186,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Match': ['team1_id', 'match_id', 'team2_id', 'venue_id', 'date', 'venue', 'winning_team_id', 'tournament_id', 'attendance', 'team', 'winning_team'], 'Referee': ['referee_name', 'referee_id'], 'Referee_Assignment': ['match_id', 'referee_id'], 'Venue': ['venue_name', 'venue_id', 'country', 'city'], 'Tournament': ['tournament_id', 'country', 'tournament_name', 'start_date', 'venue_id']} and \n# the user question: Find the referees who have officiated matches in tournaments held in at least 26 different cities and 26 different years,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the referees who have officiated matches in tournaments held in at least 26 different cities and 26 different years",
        "output": "SELECT Referee.referee_name FROM Referee JOIN Referee_Assignment ON Referee.referee_id = Referee_Assignment.referee_id JOIN Match ON Referee_Assignment.match_id = Match.match_id JOIN Tournament ON Match.tournament_id = Tournament.tournament_id JOIN Venue ON Tournament.venue_id = Venue.venue_id GROUP BY Referee.referee_name HAVING COUNT(DISTINCT Venue.city) >= 26 AND COUNT(DISTINCT strftime('%Y', Tournament.start_date)) >= 26;",
        "schema": "volleyball",
        "processed_schema_content": {
            "Match": [
                "team1_id",
                "match_id",
                "team2_id",
                "venue_id",
                "date",
                "venue",
                "winning_team_id",
                "tournament_id",
                "attendance",
                "team",
                "winning_team"
            ],
            "Referee": [
                "referee_name",
                "referee_id"
            ],
            "Referee_Assignment": [
                "match_id",
                "referee_id"
            ],
            "Venue": [
                "venue_name",
                "venue_id",
                "country",
                "city"
            ],
            "Tournament": [
                "tournament_id",
                "country",
                "tournament_name",
                "start_date",
                "venue_id"
            ]
        }
    },
    {
        "id": 187,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Companies': ['company_name', 'revenue', 'industry', 'company_id', 'country', 'industry_category', 'headquarters', 'num_employees']} and \n# the user question: \"List all companies in the manufacturing industry.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"List all companies in the manufacturing industry.\"",
        "output": "SELECT company_name FROM Companies WHERE industry = 'Manufacturing';",
        "schema": "corporate_social_responsibility",
        "processed_schema_content": {
            "Companies": [
                "company_name",
                "revenue",
                "industry",
                "company_id",
                "country",
                "industry_category",
                "headquarters",
                "num_employees"
            ]
        }
    },
    {
        "id": 189,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'User': ['UserID', 'FirstName', 'LastName', 'Email', 'Password', 'Birthdate', 'Gender', 'Age', 'Height', 'BMI', 'Weight'], 'Workout': ['WorkoutID', 'UserID', 'PlanID', 'Date', 'WorkoutType', 'StartTime', 'EndTime', 'Duration', 'TimeSeconds', 'CaloriesBurned', 'WorkoutTypeID', 'Distance', 'Type', 'TotalCalories', 'USERID', 'WorkoutName', 'Steps', 'HeartRate', 'ExerciseTypeID']} and \n# the user question: Find the average duration of workouts for each user:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average duration of workouts for each user:",
        "output": "SELECT User.FirstName, User.LastName, AVG(Workout.Duration) AS AvgDuration FROM User INNER JOIN Workout ON User.UserID = Workout.UserID GROUP BY User.UserID",
        "schema": "fitness",
        "processed_schema_content": {
            "User": [
                "UserID",
                "FirstName",
                "LastName",
                "Email",
                "Password",
                "Birthdate",
                "Gender",
                "Age",
                "Height",
                "BMI",
                "Weight"
            ],
            "Workout": [
                "WorkoutID",
                "UserID",
                "PlanID",
                "Date",
                "WorkoutType",
                "StartTime",
                "EndTime",
                "Duration",
                "TimeSeconds",
                "CaloriesBurned",
                "WorkoutTypeID",
                "Distance",
                "Type",
                "TotalCalories",
                "USERID",
                "WorkoutName",
                "Steps",
                "HeartRate",
                "ExerciseTypeID"
            ]
        }
    },
    {
        "id": 192,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Artists_Instruments': ['instrument_id', 'artist_id'], 'Instruments': ['instrument_id', 'instrument_name'], 'Albums': ['album_name', 'artist_id', 'release_date', 'song_id', 'album_id', 'label_id'], 'Artists_Awards': ['artist_id', 'award_id', 'album_id'], 'Awards': ['award_id', 'award_name', 'release_date', 'artist_id', 'genre_id'], 'Songs_Performers': ['song_id', 'artist_id', 'album_id'], 'Genres': ['genre_id', 'genre_name']} and \n# the user question: \"List the albums released on or after 2010 that feature artists who play the saxophone and have won an award in the 'Contemporary Jazz' genre.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"List the albums released on or after 2010 that feature artists who play the saxophone and have won an award in the 'Contemporary Jazz' genre.\"",
        "output": "SELECT album_name, release_date FROM Albums WHERE release_date >= '2010-01-01' AND album_id IN ( SELECT album_id FROM Songs_Performers WHERE artist_id IN ( SELECT artist_id FROM Artists_Instruments WHERE instrument_id IN ( SELECT instrument_id FROM Instruments WHERE instrument_name = 'Saxophone' ) ) ) AND album_id IN ( SELECT album_id FROM Artists_Awards WHERE award_id IN ( SELECT award_id FROM Awards WHERE genre_id IN ( SELECT genre_id FROM Genres WHERE genre_name = 'Contemporary Jazz' ) ) );",
        "schema": "jazz",
        "processed_schema_content": {
            "Artists_Instruments": [
                "instrument_id",
                "artist_id"
            ],
            "Instruments": [
                "instrument_id",
                "instrument_name"
            ],
            "Albums": [
                "album_name",
                "artist_id",
                "release_date",
                "song_id",
                "album_id",
                "label_id"
            ],
            "Artists_Awards": [
                "artist_id",
                "award_id",
                "album_id"
            ],
            "Awards": [
                "award_id",
                "award_name",
                "release_date",
                "artist_id",
                "genre_id"
            ],
            "Songs_Performers": [
                "song_id",
                "artist_id",
                "album_id"
            ],
            "Genres": [
                "genre_id",
                "genre_name"
            ]
        }
    },
    {
        "id": 194,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Teams': ['team_name', 'team_id', 'conference_id', 'division_id', 'last_season', 'first_season', 'city_id', 'division_name', 'conference_name', 'season_id', 'head_coach_id', 'city', 'start_date', 'wins', 'losse', 'home_team_id', 'State', 'Golden', 'Warriors', 'away_team_id', 'coach_id', 'conference', 'playoff_record', 'num_mvp', 'year_founded', 'arena_id', 'player_id', 'year_end', 'winning_team_id', 'end_date', 'num_wins', 'opponent_name', 'Name', 'ID', 'Abbreviation', 'City', 'Color', 'Coach', 'Team_ID', 'Team_Name'], 'Seasons': ['season_id', 'year', 'start_date', 'team_name', 'team_id', 'regular_season_wins', 'season_type', 'champion_id', 'player_id', 'wins', 'losses', 'points_for', 'points_against', 'attendance', 'outcome', 'series_id', 'Regular', 'Season', 'year_end', 'year_start', 'ChampionID', 'Year', 'ID'], 'Stats': ['total_rebounds', 'player_id', 'points', 'game_id', 'field_goals_made', 'field_goals_attempted', 'season_id', 'three_pointers_made', 'rebounds', 'assists', 'steals', 'blocks', 'three_pointers_attempted', 'per', 'season_type', 'free_throws_attempted', 'free_throws_made', 'opponent_points', 'three_pointers', 'wins', 'date', 'games_played', 'team_id', 'field_goals', 'field_goal_attempts', 'free_throw_percentage', 'minutes_played', 'fg3m', 'Points', 'PlayerID', 'FieldGoalAttempts', 'Assists', 'FieldGoalsMade', 'FGPercentage', 'GameID', 'Rebounds', 'FieldGoalsAttempted']} and \n# the user question: Find the NBA teams that have won a game by at least 30 points in the playoffs.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the NBA teams that have won a game by at least 30 points in the playoffs.",
        "output": "SELECT Teams.team_name, Seasons.year AS season, Stats.points - Stats.opponent_points AS margin_of_victory FROM Teams JOIN Seasons ON Teams.team_id = Seasons.team_id JOIN Stats ON Seasons.season_id = Stats.season_id AND Stats.season_type = 'Playoffs' WHERE Stats.points - Stats.opponent_points >= 30 ORDER BY Seasons.year DESC, margin_of_victory DESC;",
        "schema": "basketball",
        "processed_schema_content": {
            "Teams": [
                "team_name",
                "team_id",
                "conference_id",
                "division_id",
                "last_season",
                "first_season",
                "city_id",
                "division_name",
                "conference_name",
                "season_id",
                "head_coach_id",
                "city",
                "start_date",
                "wins",
                "losse",
                "home_team_id",
                "State",
                "Golden",
                "Warriors",
                "away_team_id",
                "coach_id",
                "conference",
                "playoff_record",
                "num_mvp",
                "year_founded",
                "arena_id",
                "player_id",
                "year_end",
                "winning_team_id",
                "end_date",
                "num_wins",
                "opponent_name",
                "Name",
                "ID",
                "Abbreviation",
                "City",
                "Color",
                "Coach",
                "Team_ID",
                "Team_Name"
            ],
            "Seasons": [
                "season_id",
                "year",
                "start_date",
                "team_name",
                "team_id",
                "regular_season_wins",
                "season_type",
                "champion_id",
                "player_id",
                "wins",
                "losses",
                "points_for",
                "points_against",
                "attendance",
                "outcome",
                "series_id",
                "Regular",
                "Season",
                "year_end",
                "year_start",
                "ChampionID",
                "Year",
                "ID"
            ],
            "Stats": [
                "total_rebounds",
                "player_id",
                "points",
                "game_id",
                "field_goals_made",
                "field_goals_attempted",
                "season_id",
                "three_pointers_made",
                "rebounds",
                "assists",
                "steals",
                "blocks",
                "three_pointers_attempted",
                "per",
                "season_type",
                "free_throws_attempted",
                "free_throws_made",
                "opponent_points",
                "three_pointers",
                "wins",
                "date",
                "games_played",
                "team_id",
                "field_goals",
                "field_goal_attempts",
                "free_throw_percentage",
                "minutes_played",
                "fg3m",
                "Points",
                "PlayerID",
                "FieldGoalAttempts",
                "Assists",
                "FieldGoalsMade",
                "FGPercentage",
                "GameID",
                "Rebounds",
                "FieldGoalsAttempted"
            ]
        }
    },
    {
        "id": 195,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Team': ['team_name', 'team_id', 'country'], 'Match': ['team1_id', 'match_id', 'team2_id', 'venue_id', 'date', 'venue', 'winning_team_id', 'tournament_id', 'attendance', 'team', 'winning_team'], 'Match_Set': ['team2_score', 'match_id', 'set_number', 'team1_score', 'team2_id', 'team1_id']} and \n# the user question: Retrieve the matches where both teams won at least one set, and the total number of sets played is a multiple of 118,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the matches where both teams won at least one set, and the total number of sets played is a multiple of 118",
        "output": "SELECT Match.match_id, Match.date, Match.venue, Team1.team_name AS team1_name, Team2.team_name AS team2_name FROM Match JOIN Team AS Team1 ON Match.team1_id = Team1.team_id JOIN Team AS Team2 ON Match.team2_id = Team2.team_id JOIN Match_Set ON Match.match_id = Match_Set.match_id WHERE (Team1.team_id = Match_Set.team1_id AND Team2.team_id = Match_Set.team2_id AND Match_Set.team1_score > 0 AND Match_Set.team2_score > 0) OR (Team1.team_id = Match_Set.team2_id AND Team2.team_id = Match_Set.team1_id AND Match_Set.team2_score > 0 AND Match_Set.team1_score > 0) GROUP BY Match.match_id HAVING COUNT(DISTINCT Match_Set.set_number) % 118 = 0;",
        "schema": "volleyball",
        "processed_schema_content": {
            "Team": [
                "team_name",
                "team_id",
                "country"
            ],
            "Match": [
                "team1_id",
                "match_id",
                "team2_id",
                "venue_id",
                "date",
                "venue",
                "winning_team_id",
                "tournament_id",
                "attendance",
                "team",
                "winning_team"
            ],
            "Match_Set": [
                "team2_score",
                "match_id",
                "set_number",
                "team1_score",
                "team2_id",
                "team1_id"
            ]
        }
    },
    {
        "id": 196,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Cases': ['Case_ID', 'Case_Name', 'Case_Description', 'Client_ID', 'Case_Status', 'Lawyer_ID', 'Last_Updated', 'Date_Opened', 'Date_Closed', 'Status', 'Case_Closed_Date', 'Practice_Area_ID', 'Case_Manager_ID', 'Open_Date', 'Closed', 'Case_End_Date', 'Case_Start_Date', 'Firm_ID', 'Office_ID', 'CaseStatus', 'CaseNumber', 'ClientID', 'CaseTitle', 'CaseTypeID', 'CaseType', 'CourtName', 'ClosedDate', 'Settlement', 'ID', 'HearingDate', 'ClosingDate', 'AppealStatus', 'LawyerID', 'OpeningDate', 'verdict', 'judge_id', 'defendant_state', 'plaintiff_state', 'lawyer_id'], 'Lawyers': ['Lawyer_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'Specialization', 'Department_ID', 'City', 'Email_Address', 'Phone_Number', 'Hourly_Rate', 'Practice_Area_ID', 'Billing_Rate_ID', 'Firm_ID', 'FirmID', 'LawSchoolID', 'HourlyRate', 'Name', 'ID', 'ExperienceYears', 'years_of_experience', 'state', 'lawyer_id'], 'Time_Entries': ['Time_Entry_ID', 'Lawyer_ID', 'Case_ID', 'Date', 'Hours', 'Description', 'Task_ID', 'Billed', 'Time_Entry_Date', 'Invoice_ID', 'Billable', 'Hours_Worked', 'Entry_Date'], 'Tasks': ['Task_ID', 'Task_Name', 'Task_Description', 'Task_Status', 'Case_ID', 'Due_Date', 'Lawyer_ID', 'Status', 'Completion_Date', 'Practice_Area_ID', 'Paralegal_ID', 'Last_Activity_Date', 'Budgeted_Hours', 'Budget', 'Task_Deadline', 'Hourly_Rate', 'Task_Date', 'Hours_Worked', 'Task_Due_Date', 'Hours_Billed', 'Hours'], 'Billing_Rates': ['Effective_Date', 'Lawyer_ID', 'Rate', 'Billing_Rate_ID', 'Rate_Per_Hour', 'Hourly_Rate'], 'Practice_Areas': ['Practice_Area_Name', 'Practice_Area_ID', 'Corporate', 'Law']} and \n# the user question: List all the cases where the amount billed for a particular practice area is greater than the budget for that practice area:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List all the cases where the amount billed for a particular practice area is greater than the budget for that practice area:",
        "output": "SELECT Cases.Case_Name, Practice_Areas.Practice_Area_Name, SUM(Time_Entries.Hours * Billing_Rates.Rate) AS Total_Revenue, Tasks.Budget FROM Cases JOIN Tasks ON Cases.Case_ID = Tasks.Case_ID JOIN Time_Entries ON Tasks.Task_ID = Time_Entries.Task_ID JOIN Lawyers ON Time_Entries.Lawyer_ID = Lawyers.Lawyer_ID JOIN Billing_Rates ON Lawyers.Lawyer_ID = Billing_Rates.Lawyer_ID JOIN Practice_Areas ON Tasks.Practice_Area_ID = Practice_Areas.Practice_Area_ID GROUP BY Cases.Case_ID, Practice_Areas.Practice_Area_ID HAVING Total_Revenue > Tasks.Budget;",
        "schema": "law",
        "processed_schema_content": {
            "Cases": [
                "Case_ID",
                "Case_Name",
                "Case_Description",
                "Client_ID",
                "Case_Status",
                "Lawyer_ID",
                "Last_Updated",
                "Date_Opened",
                "Date_Closed",
                "Status",
                "Case_Closed_Date",
                "Practice_Area_ID",
                "Case_Manager_ID",
                "Open_Date",
                "Closed",
                "Case_End_Date",
                "Case_Start_Date",
                "Firm_ID",
                "Office_ID",
                "CaseStatus",
                "CaseNumber",
                "ClientID",
                "CaseTitle",
                "CaseTypeID",
                "CaseType",
                "CourtName",
                "ClosedDate",
                "Settlement",
                "ID",
                "HearingDate",
                "ClosingDate",
                "AppealStatus",
                "LawyerID",
                "OpeningDate",
                "verdict",
                "judge_id",
                "defendant_state",
                "plaintiff_state",
                "lawyer_id"
            ],
            "Lawyers": [
                "Lawyer_ID",
                "First_Name",
                "Last_Name",
                "Email",
                "Phone",
                "Address",
                "Specialization",
                "Department_ID",
                "City",
                "Email_Address",
                "Phone_Number",
                "Hourly_Rate",
                "Practice_Area_ID",
                "Billing_Rate_ID",
                "Firm_ID",
                "FirmID",
                "LawSchoolID",
                "HourlyRate",
                "Name",
                "ID",
                "ExperienceYears",
                "years_of_experience",
                "state",
                "lawyer_id"
            ],
            "Time_Entries": [
                "Time_Entry_ID",
                "Lawyer_ID",
                "Case_ID",
                "Date",
                "Hours",
                "Description",
                "Task_ID",
                "Billed",
                "Time_Entry_Date",
                "Invoice_ID",
                "Billable",
                "Hours_Worked",
                "Entry_Date"
            ],
            "Tasks": [
                "Task_ID",
                "Task_Name",
                "Task_Description",
                "Task_Status",
                "Case_ID",
                "Due_Date",
                "Lawyer_ID",
                "Status",
                "Completion_Date",
                "Practice_Area_ID",
                "Paralegal_ID",
                "Last_Activity_Date",
                "Budgeted_Hours",
                "Budget",
                "Task_Deadline",
                "Hourly_Rate",
                "Task_Date",
                "Hours_Worked",
                "Task_Due_Date",
                "Hours_Billed",
                "Hours"
            ],
            "Billing_Rates": [
                "Effective_Date",
                "Lawyer_ID",
                "Rate",
                "Billing_Rate_ID",
                "Rate_Per_Hour",
                "Hourly_Rate"
            ],
            "Practice_Areas": [
                "Practice_Area_Name",
                "Practice_Area_ID",
                "Corporate",
                "Law"
            ]
        }
    },
    {
        "id": 197,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Task': ['task_id', 'task_name', 'description', 'experiment_id'], 'Trial': ['trial_id', 'session_id', 'task_id', 'trial_number', 'stimuli', 'response', 'reaction_time', 'participant_id', 'stimulus_id', 'task_name', 'completion_time'], 'Stimulus': ['stimulus_id', 'stimulus_name', 'category', 'presentation_duration'], 'TaskResult': ['task_result_id', 'task_id', 'participant_id', 'accuracy', 'average_reaction_time', 'trial_id', 'session_id', 'task_name']} and \n# the user question: Retrieve the stimulus names along with the average accuracy for trials in the \"Attention Test\" task, where the stimulus category is \"Auditory\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the stimulus names along with the average accuracy for trials in the \"Attention Test\" task, where the stimulus category is \"Auditory\".",
        "output": "SELECT Stimulus.stimulus_name, AVG(TaskResult.accuracy) AS average_accuracy FROM Stimulus JOIN Trial ON Stimulus.stimulus_id = Trial.stimulus_id JOIN Task ON Trial.task_id = Task.task_id JOIN TaskResult ON Task.task_id = TaskResult.task_id WHERE Task.task_name = 'Attention Test' AND Stimulus.category = 'Auditory' GROUP BY Stimulus.stimulus_name;",
        "schema": "cognitive_psychology",
        "processed_schema_content": {
            "Task": [
                "task_id",
                "task_name",
                "description",
                "experiment_id"
            ],
            "Trial": [
                "trial_id",
                "session_id",
                "task_id",
                "trial_number",
                "stimuli",
                "response",
                "reaction_time",
                "participant_id",
                "stimulus_id",
                "task_name",
                "completion_time"
            ],
            "Stimulus": [
                "stimulus_id",
                "stimulus_name",
                "category",
                "presentation_duration"
            ],
            "TaskResult": [
                "task_result_id",
                "task_id",
                "participant_id",
                "accuracy",
                "average_reaction_time",
                "trial_id",
                "session_id",
                "task_name"
            ]
        }
    },
    {
        "id": 198,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Species': ['species_id', 'name', 'common_name', 'classification_id', 'genus', 'family_id', 'scientific_name', 'class_id', 'taxonomy', 'category', 'conservation_status', 'population_trend', 'habitat', 'migration_pattern', 'min_depth_range', 'max_depth_range', 'body_size', 'body_temperature_range', 'migratory_behavior', 'species_name', 'discovery_year', 'class_name', 'is_venomous', 'order_name'], 'SamplingLocations': ['location_id', 'location_name', 'latitude', 'longitude', 'depth', 'habitat_id', 'temperature_range', 'ocean_id', 'ocean', 'Reef', 'Great', 'Barrier'], 'FisheryData': ['fishery_id', 'species_id', 'fishery_name', 'catch_date', 'catch_weight', 'fishing_method', 'gear_type', 'fishing_days', 'average_length', 'catch_number', 'fish_length', 'fish_weight', 'catch_length', 'location_id', 'catch_id', 'vessel_id', 'net_mesh_size', 'method_id'], 'SpeciesData': ['sample_id', 'species_id', 'weight', 'catch_id', 'length', 'catch_date', 'depth', 'individuals_caught'], 'Oceans': ['ocean_id', 'name']} and \n# the user question: Retrieve the names of all species that have been caught in the Atlantic Ocean and have a weight greater than 50 kg:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all species that have been caught in the Atlantic Ocean and have a weight greater than 50 kg:",
        "output": "SELECT DISTINCT Species.common_name FROM Species INNER JOIN SpeciesData ON Species.species_id = SpeciesData.species_id INNER JOIN FisheryData ON SpeciesData.catch_id = FisheryData.catch_id INNER JOIN SamplingLocations ON FisheryData.location_id = SamplingLocations.location_id INNER JOIN Oceans ON SamplingLocations.ocean_id = Oceans.ocean_id WHERE Oceans.name = 'Atlantic' AND SpeciesData.weight > 50;",
        "schema": "marine_biology",
        "processed_schema_content": {
            "Species": [
                "species_id",
                "name",
                "common_name",
                "classification_id",
                "genus",
                "family_id",
                "scientific_name",
                "class_id",
                "taxonomy",
                "category",
                "conservation_status",
                "population_trend",
                "habitat",
                "migration_pattern",
                "min_depth_range",
                "max_depth_range",
                "body_size",
                "body_temperature_range",
                "migratory_behavior",
                "species_name",
                "discovery_year",
                "class_name",
                "is_venomous",
                "order_name"
            ],
            "SamplingLocations": [
                "location_id",
                "location_name",
                "latitude",
                "longitude",
                "depth",
                "habitat_id",
                "temperature_range",
                "ocean_id",
                "ocean",
                "Reef",
                "Great",
                "Barrier"
            ],
            "FisheryData": [
                "fishery_id",
                "species_id",
                "fishery_name",
                "catch_date",
                "catch_weight",
                "fishing_method",
                "gear_type",
                "fishing_days",
                "average_length",
                "catch_number",
                "fish_length",
                "fish_weight",
                "catch_length",
                "location_id",
                "catch_id",
                "vessel_id",
                "net_mesh_size",
                "method_id"
            ],
            "SpeciesData": [
                "sample_id",
                "species_id",
                "weight",
                "catch_id",
                "length",
                "catch_date",
                "depth",
                "individuals_caught"
            ],
            "Oceans": [
                "ocean_id",
                "name"
            ]
        }
    },
    {
        "id": 200,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Event': ['event_id', 'name', 'date', 'location', 'description', 'campaign_id', 'state', 'city', 'venue_id', 'start_date', 'price', 'capacity', 'start_time', 'status', 'location_id', 'host_organization', 'Event_Name', 'Event_ID', 'Date_Held'], 'Attendee': ['attendee_id', 'first_name', 'last_name', 'email', 'phone_number'], 'Attendance': ['attendance_id', 'event_id', 'attendee_id'], 'Venue': ['venue_id', 'capacity', 'city', 'city_pop', 'zip', 'city_name', 'name', 'state_id', 'city_id', 'state', 'country_id']} and \n# the user question: Retrieve the names and email addresses of all attendees who have registered for events that take place in a venue with a capacity less than 200:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all attendees who have registered for events that take place in a venue with a capacity less than 200:",
        "output": "SELECT DISTINCT Attendee.first_name, Attendee.last_name, Attendee.email FROM Attendee INNER JOIN Attendance ON Attendee.attendee_id = Attendance.attendee_id INNER JOIN Event ON Attendance.event_id = Event.event_id INNER JOIN Venue ON Event.venue_id = Venue.venue_id WHERE Venue.capacity < 200;",
        "schema": "public_relations",
        "processed_schema_content": {
            "Event": [
                "event_id",
                "name",
                "date",
                "location",
                "description",
                "campaign_id",
                "state",
                "city",
                "venue_id",
                "start_date",
                "price",
                "capacity",
                "start_time",
                "status",
                "location_id",
                "host_organization",
                "Event_Name",
                "Event_ID",
                "Date_Held"
            ],
            "Attendee": [
                "attendee_id",
                "first_name",
                "last_name",
                "email",
                "phone_number"
            ],
            "Attendance": [
                "attendance_id",
                "event_id",
                "attendee_id"
            ],
            "Venue": [
                "venue_id",
                "capacity",
                "city",
                "city_pop",
                "zip",
                "city_name",
                "name",
                "state_id",
                "city_id",
                "state",
                "country_id"
            ]
        }
    },
    {
        "id": 201,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Teams': ['team_name', 'team_id', 'conference_id', 'division_id', 'last_season', 'first_season', 'city_id', 'division_name', 'conference_name', 'season_id', 'head_coach_id', 'city', 'start_date', 'wins', 'losse', 'home_team_id', 'State', 'Golden', 'Warriors', 'away_team_id', 'coach_id', 'conference', 'playoff_record', 'num_mvp', 'year_founded', 'arena_id', 'player_id', 'year_end', 'winning_team_id', 'end_date', 'num_wins', 'opponent_name', 'Name', 'ID', 'Abbreviation', 'City', 'Color', 'Coach', 'Team_ID', 'Team_Name'], 'Championships': ['team_id', 'season_id', 'championship_id', 'place', 'num_games', 'coach_id', 'playoff_record', 'championships', 'championship_year', 'player_id', 'conference', 'wins', 'win', 'round', 'year', 'finals_mvp_id', 'home_team_id', 'series_id', 'championship_series', 'away_team_id']} and \n# the user question: Find the teams that have made the NBA Finals at least 3 times in a row.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the teams that have made the NBA Finals at least 3 times in a row.",
        "output": "SELECT Teams.team_name FROM Teams JOIN Championships C1 ON Teams.team_id = C1.team_id AND C1.championships = 1 JOIN Championships C2 ON Teams.team_id = C2.team_id AND C2.championships = 1 AND C2.season_id = C1.season_id + 1 JOIN Championships C3 ON Teams.team_id = C3.team_id AND C3.championships = 1 AND C3.season_id = C1.season_id + 2;",
        "schema": "basketball",
        "processed_schema_content": {
            "Teams": [
                "team_name",
                "team_id",
                "conference_id",
                "division_id",
                "last_season",
                "first_season",
                "city_id",
                "division_name",
                "conference_name",
                "season_id",
                "head_coach_id",
                "city",
                "start_date",
                "wins",
                "losse",
                "home_team_id",
                "State",
                "Golden",
                "Warriors",
                "away_team_id",
                "coach_id",
                "conference",
                "playoff_record",
                "num_mvp",
                "year_founded",
                "arena_id",
                "player_id",
                "year_end",
                "winning_team_id",
                "end_date",
                "num_wins",
                "opponent_name",
                "Name",
                "ID",
                "Abbreviation",
                "City",
                "Color",
                "Coach",
                "Team_ID",
                "Team_Name"
            ],
            "Championships": [
                "team_id",
                "season_id",
                "championship_id",
                "place",
                "num_games",
                "coach_id",
                "playoff_record",
                "championships",
                "championship_year",
                "player_id",
                "conference",
                "wins",
                "win",
                "round",
                "year",
                "finals_mvp_id",
                "home_team_id",
                "series_id",
                "championship_series",
                "away_team_id"
            ]
        }
    },
    {
        "id": 204,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customers': ['customer_id', 'first_name', 'last_name', 'country', 'city', 'state', 'address', 'zip', 'email', 'registration_date', 'customer_date_added', 'shipping_address', 'loyalty_status', 'billing_address', 'join_date', 'total_price', 'total_purchase', 'sales_rep_id', 'phone'], 'Orders': ['order_date', 'customer_id', 'order_id', 'payment_status', 'employee_id', 'coupon_id', 'gift_card_id', 'return_date', 'order_status', 'payment_method', 'coupon_code', 'discount_code', 'order_total', 'total_price', 'total']} and \n# the user question: Retrieve the names and email addresses of all customers who have placed an order in the last 3 months and have not placed an order in the 3 months before that:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all customers who have placed an order in the last 3 months and have not placed an order in the 3 months before that:",
        "output": "SELECT first_name, last_name, email FROM Customers WHERE customer_id IN ( SELECT customer_id FROM Orders WHERE order_date >= DATE('now', '-3 month') GROUP BY customer_id EXCEPT SELECT customer_id FROM Orders WHERE order_date >= DATE('now', '-6 month') AND order_date < DATE('now', '-3 month') GROUP BY customer_id )",
        "schema": "business",
        "processed_schema_content": {
            "Customers": [
                "customer_id",
                "first_name",
                "last_name",
                "country",
                "city",
                "state",
                "address",
                "zip",
                "email",
                "registration_date",
                "customer_date_added",
                "shipping_address",
                "loyalty_status",
                "billing_address",
                "join_date",
                "total_price",
                "total_purchase",
                "sales_rep_id",
                "phone"
            ],
            "Orders": [
                "order_date",
                "customer_id",
                "order_id",
                "payment_status",
                "employee_id",
                "coupon_id",
                "gift_card_id",
                "return_date",
                "order_status",
                "payment_method",
                "coupon_code",
                "discount_code",
                "order_total",
                "total_price",
                "total"
            ]
        }
    },
    {
        "id": 206,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'team_id', 'completed_by', 'skill_id', 'first_name', 'manager_id', 'last_name', 'job_title', 'office_location', 'role', 'years_of_experience', 'department_id', 'salary'], 'Tasks': ['assigned_to', 'deadline', 'project_id', 'task_id', 'priority_level', 'status', 'completed_by', 'created_at', 'completed_at', 'priority', 'created_by', 'due_date', 'user_id', 'assigned_team', 'team_id', 'started_at', 'assigned_skill', 'requested_by', 'assigned_at', 'assigned_by', 'completion_date', 'assignment_date', 'skill_name', 'task_status', 'department_name', 'task_assigned_date', 'task_completion_date'], 'User_Roles': ['user_id', 'role_id'], 'Roles': ['role_id', 'role_name']} and \n# the user question: Find the user who has completed the most tasks in the last 24 hours and has the role of \"System Administrator\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the user who has completed the most tasks in the last 24 hours and has the role of \"System Administrator\":",
        "output": "SELECT Users.username, COUNT(Tasks.task_id) AS completed_task_count FROM Users JOIN Tasks ON Users.user_id = Tasks.completed_by JOIN User_Roles ON Users.user_id = User_Roles.user_id JOIN Roles ON User_Roles.role_id = Roles.role_id WHERE Tasks.completed_at >= DATE('now', '-24 hour') AND Roles.role_name = 'System Administrator' GROUP BY Users.user_id ORDER BY completed_task_count DESC LIMIT 1;",
        "schema": "leadership",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "team_id",
                "completed_by",
                "skill_id",
                "first_name",
                "manager_id",
                "last_name",
                "job_title",
                "office_location",
                "role",
                "years_of_experience",
                "department_id",
                "salary"
            ],
            "Tasks": [
                "assigned_to",
                "deadline",
                "project_id",
                "task_id",
                "priority_level",
                "status",
                "completed_by",
                "created_at",
                "completed_at",
                "priority",
                "created_by",
                "due_date",
                "user_id",
                "assigned_team",
                "team_id",
                "started_at",
                "assigned_skill",
                "requested_by",
                "assigned_at",
                "assigned_by",
                "completion_date",
                "assignment_date",
                "skill_name",
                "task_status",
                "department_name",
                "task_assigned_date",
                "task_completion_date"
            ],
            "User_Roles": [
                "user_id",
                "role_id"
            ],
            "Roles": [
                "role_id",
                "role_name"
            ]
        }
    },
    {
        "id": 209,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Documentary_Films': ['length', 'rating', 'title', 'film_id', 'release_date', 'director_id', 'runtime', 'production_company_id', 'duration', 'runtime_minutes', 'duration_minutes', 'tagline', 'release_year'], 'Directors': ['director_id', 'nationality', 'director_name', 'birthdate', 'birthplace', 'gender', 'gender_id', 'last_name', 'first_name'], 'Film_Directors': ['director_id', 'film_id']} and \n# the user question: Find the names of all documentary films that have been directed by a female director.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all documentary films that have been directed by a female director.",
        "output": "SELECT DISTINCT Documentary_Films.title FROM Documentary_Films JOIN Film_Directors ON Documentary_Films.film_id = Film_Directors.film_id JOIN Directors ON Film_Directors.director_id = Directors.director_id WHERE Directors.gender = 'female';",
        "schema": "documentary_films",
        "processed_schema_content": {
            "Documentary_Films": [
                "length",
                "rating",
                "title",
                "film_id",
                "release_date",
                "director_id",
                "runtime",
                "production_company_id",
                "duration",
                "runtime_minutes",
                "duration_minutes",
                "tagline",
                "release_year"
            ],
            "Directors": [
                "director_id",
                "nationality",
                "director_name",
                "birthdate",
                "birthplace",
                "gender",
                "gender_id",
                "last_name",
                "first_name"
            ],
            "Film_Directors": [
                "director_id",
                "film_id"
            ]
        }
    },
    {
        "id": 210,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Songs': ['song_title', 'song_id', 'duration', 'album_id', 'artist_id', 'release_date', 'genre_id'], 'Artists': ['artist_name', 'artist_id', 'country_id', 'birth_date'], 'Songs_Charts': ['chart_id', 'song_id', 'position', 'artist_id'], 'Awards': ['year', 'award_name', 'artist_id', 'award_id', 'song_id', 'artist1_id', 'artist2_id', 'genre_id', 'category', 'award_date']} and \n# the user question: Retrieve the artists who have won awards in multiple categories and have at least one song with a chart position in the top 3, ordered by the artist name:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the artists who have won awards in multiple categories and have at least one song with a chart position in the top 3, ordered by the artist name:",
        "output": "SELECT DISTINCT Artists.artist_name FROM Artists JOIN Awards ON Artists.artist_id = Awards.artist_id JOIN Songs ON Artists.artist_id = Songs.artist_id JOIN Songs_Charts ON Songs.song_id = Songs_Charts.song_id WHERE (SELECT COUNT(DISTINCT category) FROM Awards WHERE artist_id = Artists.artist_id) > 1 AND Songs_Charts.position <= 3 ORDER BY Artists.artist_name;",
        "schema": "country_music",
        "processed_schema_content": {
            "Songs": [
                "song_title",
                "song_id",
                "duration",
                "album_id",
                "artist_id",
                "release_date",
                "genre_id"
            ],
            "Artists": [
                "artist_name",
                "artist_id",
                "country_id",
                "birth_date"
            ],
            "Songs_Charts": [
                "chart_id",
                "song_id",
                "position",
                "artist_id"
            ],
            "Awards": [
                "year",
                "award_name",
                "artist_id",
                "award_id",
                "song_id",
                "artist1_id",
                "artist2_id",
                "genre_id",
                "category",
                "award_date"
            ]
        }
    },
    {
        "id": 212,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'category_id', 'price', 'units_in_stock', 'price_per_unit', 'discount', 'country_of_origin', 'rating', 'discontinued', 'is_discontinued', 'unit_price', 'last_restock_date', 'quantity_in_stock', 'supplier_id', 'discontinued_date', 'unit_cost', 'brand_id', 'stock', 'stock_quantity', 'brand_name', 'cost', 'Ingredients', 'Category', 'Price', 'ProductID'], 'Reviews': ['product_id', 'rating', 'user_id', 'review_id', 'review_date', 'order_id', 'order_detail_id'], 'Users': ['username', 'user_id', 'num_products', 'country', 'city', 'state', 'specific_user', 'email_confirmed', 'address_id'], 'Orders': ['order_id', 'total_price', 'user_id', 'order_date', 'status', 'shipping_method', 'shipping_date', 'delivered_date', 'coupon_code', 'category_id', 'product_id', 'shipped_date', 'order_total', 'ship_date'], 'Order_Details': ['order_id', 'product_id', 'price_per_unit', 'quantity', 'user_id', 'total_price', 'order_detail_id', 'unit_price']} and \n# the user question: Find the customers who have placed orders for products that have a discount of at least 10% and have also left a review for those products.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the customers who have placed orders for products that have a discount of at least 10% and have also left a review for those products.",
        "output": "SELECT DISTINCT u.username FROM Users u JOIN Orders o ON u.user_id = o.user_id JOIN Order_Details od ON o.order_id = od.order_id JOIN Products p ON od.product_id = p.product_id AND p.discount >= 10 JOIN Reviews r ON p.product_id = r.product_id AND r.user_id = u.user_id;",
        "schema": "cosmetics_making",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "category_id",
                "price",
                "units_in_stock",
                "price_per_unit",
                "discount",
                "country_of_origin",
                "rating",
                "discontinued",
                "is_discontinued",
                "unit_price",
                "last_restock_date",
                "quantity_in_stock",
                "supplier_id",
                "discontinued_date",
                "unit_cost",
                "brand_id",
                "stock",
                "stock_quantity",
                "brand_name",
                "cost",
                "Ingredients",
                "Category",
                "Price",
                "ProductID"
            ],
            "Reviews": [
                "product_id",
                "rating",
                "user_id",
                "review_id",
                "review_date",
                "order_id",
                "order_detail_id"
            ],
            "Users": [
                "username",
                "user_id",
                "num_products",
                "country",
                "city",
                "state",
                "specific_user",
                "email_confirmed",
                "address_id"
            ],
            "Orders": [
                "order_id",
                "total_price",
                "user_id",
                "order_date",
                "status",
                "shipping_method",
                "shipping_date",
                "delivered_date",
                "coupon_code",
                "category_id",
                "product_id",
                "shipped_date",
                "order_total",
                "ship_date"
            ],
            "Order_Details": [
                "order_id",
                "product_id",
                "price_per_unit",
                "quantity",
                "user_id",
                "total_price",
                "order_detail_id",
                "unit_price"
            ]
        }
    },
    {
        "id": 213,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Client': ['client_id', 'first_name', 'last_name', 'email', 'phone_number', 'date_of_birth', 'gender', 'address', 'age', 'weight', 'partner_id', 'zip_code', 'name', 'startingWeight', 'phone', 'clientId'], 'Trainer': ['trainer_id', 'first_name', 'last_name', 'email', 'phone_number', 'date_of_birth', 'gender', 'address', 'end_time', 'start_time'], 'Exercise_Plan': ['exercise_plan_id', 'client_id', 'start_date', 'end_date', 'exercise_id', 'exercise_type', 'Strength', 'date', 'trainer_id', 'plan_id', 'exercise_plan_name', 'exercise_type_id', 'session_id', 'price', 'purchase_date', 'goal_num_sessions'], 'Fitness_Goal': ['goal_type', 'goal_target', 'goal_progress', 'client_id', 'achieved', 'goal_id']} and \n# the user question: Find the trainers who have the highest percentage of clients achieving their fitness goals.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the trainers who have the highest percentage of clients achieving their fitness goals.",
        "output": "SELECT Trainer.first_name, Trainer.last_name, COUNT(DISTINCT CASE WHEN Fitness_Goal.achieved = 1 THEN Client.client_id END) * 100.0 / COUNT(DISTINCT Client.client_id) AS success_rate FROM Trainer JOIN Exercise_Plan ON Trainer.trainer_id = Exercise_Plan.trainer_id JOIN Client ON Exercise_Plan.client_id = Client.client_id JOIN Fitness_Goal ON Client.client_id = Fitness_Goal.client_id GROUP BY Trainer.trainer_id ORDER BY success_rate DESC LIMIT 1",
        "schema": "personal_training",
        "processed_schema_content": {
            "Client": [
                "client_id",
                "first_name",
                "last_name",
                "email",
                "phone_number",
                "date_of_birth",
                "gender",
                "address",
                "age",
                "weight",
                "partner_id",
                "zip_code",
                "name",
                "startingWeight",
                "phone",
                "clientId"
            ],
            "Trainer": [
                "trainer_id",
                "first_name",
                "last_name",
                "email",
                "phone_number",
                "date_of_birth",
                "gender",
                "address",
                "end_time",
                "start_time"
            ],
            "Exercise_Plan": [
                "exercise_plan_id",
                "client_id",
                "start_date",
                "end_date",
                "exercise_id",
                "exercise_type",
                "Strength",
                "date",
                "trainer_id",
                "plan_id",
                "exercise_plan_name",
                "exercise_type_id",
                "session_id",
                "price",
                "purchase_date",
                "goal_num_sessions"
            ],
            "Fitness_Goal": [
                "goal_type",
                "goal_target",
                "goal_progress",
                "client_id",
                "achieved",
                "goal_id"
            ]
        }
    },
    {
        "id": 215,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have not taught any classes in the last 30 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have not taught any classes in the last 30 days.",
        "output": "SELECT Instructors.instructor_name FROM Instructors LEFT JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_id IS NULL OR ClassSessions.session_date < date('now', '-30 days') GROUP BY Instructors.instructor_id;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        }
    },
    {
        "id": 218,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Participants': ['first_name', 'last_name', 'participant_id', 'gender', 'age', 'birth_year', 'date_of_birth', 'ag', 'age_group_id', 'parental_edu_id', 'language_group_id'], 'Participant_Tasks': ['task_id', 'participant_id', 'completion_date', 'score', 'completed'], 'Tasks': ['task_id', 'task_name', 'study_id', 'difficulty_level', 'duration', 'difficulty', 'task_category', 'category', 'Tower', 'Hanoi', 'Digit', 'Span', 'Working', 'Spatial', 'Symbol', 'Picture', 'Concepts', 'Coding', 'Regulation', 'Emotional'], 'Researchers': ['first_name', 'last_name', 'researcher_id', 'email', 'title'], 'Observations': ['task_id', 'participant_id', 'observer_id', 'observation_notes', 'researcher_id', 'observation_id']} and \n# the user question: Retrieve the names and ages of all participants who have completed the \"Memory Game\" task and have achieved a score that is higher than the average score for that task, and have also been observed by a researcher with the last name \"Garcia\" or \"Martinez\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and ages of all participants who have completed the \"Memory Game\" task and have achieved a score that is higher than the average score for that task, and have also been observed by a researcher with the last name \"Garcia\" or \"Martinez\":",
        "output": "SELECT Participants.first_name, Participants.last_name, Participants.age FROM Participants JOIN Participant_Tasks ON Participants.participant_id = Participant_Tasks.participant_id JOIN Tasks ON Participant_Tasks.task_id = Tasks.task_id JOIN Observations ON Participants.participant_id = Observations.participant_id JOIN Researchers ON Observations.researcher_id = Researchers.researcher_id WHERE Tasks.task_name = 'Memory Game' AND Participant_Tasks.score > ( SELECT AVG(score) FROM Participant_Tasks WHERE task_id = ( SELECT task_id FROM Tasks WHERE task_name = 'Memory Game' ) ) AND Researchers.last_name IN ('Garcia', 'Martinez');",
        "schema": "developmental_psychology",
        "processed_schema_content": {
            "Participants": [
                "first_name",
                "last_name",
                "participant_id",
                "gender",
                "age",
                "birth_year",
                "date_of_birth",
                "ag",
                "age_group_id",
                "parental_edu_id",
                "language_group_id"
            ],
            "Participant_Tasks": [
                "task_id",
                "participant_id",
                "completion_date",
                "score",
                "completed"
            ],
            "Tasks": [
                "task_id",
                "task_name",
                "study_id",
                "difficulty_level",
                "duration",
                "difficulty",
                "task_category",
                "category",
                "Tower",
                "Hanoi",
                "Digit",
                "Span",
                "Working",
                "Spatial",
                "Symbol",
                "Picture",
                "Concepts",
                "Coding",
                "Regulation",
                "Emotional"
            ],
            "Researchers": [
                "first_name",
                "last_name",
                "researcher_id",
                "email",
                "title"
            ],
            "Observations": [
                "task_id",
                "participant_id",
                "observer_id",
                "observation_notes",
                "researcher_id",
                "observation_id"
            ]
        }
    },
    {
        "id": 220,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Teams': ['team_name', 'team_id', 'conference_id', 'division_id', 'last_season', 'first_season', 'city_id', 'division_name', 'conference_name', 'season_id', 'head_coach_id', 'city', 'start_date', 'wins', 'losse', 'home_team_id', 'State', 'Golden', 'Warriors', 'away_team_id', 'coach_id', 'conference', 'playoff_record', 'num_mvp', 'year_founded', 'arena_id', 'player_id', 'year_end', 'winning_team_id', 'end_date', 'num_wins', 'opponent_name', 'Name', 'ID', 'Abbreviation', 'City', 'Color', 'Coach', 'Team_ID', 'Team_Name'], 'Coaches': ['coach_id', 'last_name', 'team_id', 'first_name', 'end_year', 'start_year', 'start_date', 'hire_date', 'award_year', 'season_id', 'coaching_experience'], 'Playoff_Series': ['winner_id', 'round_id', 'loser_id', 'series_id', 'ECSF3', 'game_id', 'points', 'opponent_points', 'team_id', 'season_id', 'seed', 'coach_id', 'loser_coach_id', 'winner_coach_id', 'winning_coach_id']} and \n# the user question: Find the coaches who have a winning percentage of at least 70% in the playoffs.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the coaches who have a winning percentage of at least 70% in the playoffs.",
        "output": "SELECT Coaches.first_name, Coaches.last_name, CAST(SUM(CASE WHEN Teams.team_id = Playoff_Series.winner_id THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*) AS playoff_win_percentage FROM Coaches JOIN Teams ON Coaches.team_id = Teams.team_id JOIN Playoff_Series ON Teams.team_id = Playoff_Series.winner_id OR Teams.team_id = Playoff_Series.loser_id GROUP BY Coaches.coach_id HAVING CAST(SUM(CASE WHEN Teams.team_id = Playoff_Series.winner_id THEN 1 ELSE 0 END) AS FLOAT) / COUNT(*) >= 0.7;",
        "schema": "basketball",
        "processed_schema_content": {
            "Teams": [
                "team_name",
                "team_id",
                "conference_id",
                "division_id",
                "last_season",
                "first_season",
                "city_id",
                "division_name",
                "conference_name",
                "season_id",
                "head_coach_id",
                "city",
                "start_date",
                "wins",
                "losse",
                "home_team_id",
                "State",
                "Golden",
                "Warriors",
                "away_team_id",
                "coach_id",
                "conference",
                "playoff_record",
                "num_mvp",
                "year_founded",
                "arena_id",
                "player_id",
                "year_end",
                "winning_team_id",
                "end_date",
                "num_wins",
                "opponent_name",
                "Name",
                "ID",
                "Abbreviation",
                "City",
                "Color",
                "Coach",
                "Team_ID",
                "Team_Name"
            ],
            "Coaches": [
                "coach_id",
                "last_name",
                "team_id",
                "first_name",
                "end_year",
                "start_year",
                "start_date",
                "hire_date",
                "award_year",
                "season_id",
                "coaching_experience"
            ],
            "Playoff_Series": [
                "winner_id",
                "round_id",
                "loser_id",
                "series_id",
                "ECSF3",
                "game_id",
                "points",
                "opponent_points",
                "team_id",
                "season_id",
                "seed",
                "coach_id",
                "loser_coach_id",
                "winner_coach_id",
                "winning_coach_id"
            ]
        }
    },
    {
        "id": 221,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'password', 'email', 'registration_date', 'gender', 'johnD', 'Male', 'Female', 'location', 'alice23', 'janeD']} and \n# the user question: Retrieve the usernames and email addresses of all users who registered after January 1, 2023,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the usernames and email addresses of all users who registered after January 1, 2023",
        "output": "SELECT username, email FROM Users WHERE registration_date > '2023-01-01';",
        "schema": "sociology",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "password",
                "email",
                "registration_date",
                "gender",
                "johnD",
                "Male",
                "Female",
                "location",
                "alice23",
                "janeD"
            ]
        }
    },
    {
        "id": 222,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Programs': ['program_id', 'program_name', 'program_description', 'start_date', 'end_date', 'status', 'Program'], 'Goals': ['goal_id', 'goal_name', 'goal_description', 'goal_due_date', 'user_id', 'program_id', 'goal_target', 'goal_type', 'goal_end_date', 'goal_target_date', 'goal_start_date', 'goal_status', 'goal_value'], 'Progress': ['progress_id', 'goal_id', 'user_id', 'progress_date', 'progress_value', 'date_recorded']} and \n# the user question: Find the name and email address of the user who has achieved the most progress towards their weekly running goal in the program with ID 2:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and email address of the user who has achieved the most progress towards their weekly running goal in the program with ID 2:",
        "output": "SELECT Users.first_name, Users.last_name, Users.email, MAX(Progress.progress_value / Goals.goal_target) AS max_progress FROM Users JOIN Goals ON Users.user_id = Goals.user_id JOIN Programs ON Goals.program_id = Programs.program_id JOIN Progress ON Goals.goal_id = Progress.goal_id WHERE Programs.program_id = 2 AND Goals.goal_type = 'Running' AND Goals.goal_target IS NOT NULL GROUP BY Users.user_id ORDER BY max_progress DESC LIMIT 1;",
        "schema": "health_and_wellness_programs",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "first_name",
                "last_name",
                "email",
                "password",
                "phone_number",
                "address",
                "age",
                "gender",
                "bmi",
                "goal_id"
            ],
            "Programs": [
                "program_id",
                "program_name",
                "program_description",
                "start_date",
                "end_date",
                "status",
                "Program"
            ],
            "Goals": [
                "goal_id",
                "goal_name",
                "goal_description",
                "goal_due_date",
                "user_id",
                "program_id",
                "goal_target",
                "goal_type",
                "goal_end_date",
                "goal_target_date",
                "goal_start_date",
                "goal_status",
                "goal_value"
            ],
            "Progress": [
                "progress_id",
                "goal_id",
                "user_id",
                "progress_date",
                "progress_value",
                "date_recorded"
            ]
        }
    },
    {
        "id": 224,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'PlantSpecies': ['id', 'name', 'genus_id', 'scientific_name'], 'PlantGenus': ['id', 'family_id', 'name'], 'PlantSpeciesLocation': ['plant_location_id', 'plant_species_id'], 'PlantLocation': ['id', 'name'], 'PlantVariety': ['name', 'species_id']} and \n# the user question: Find all plant genera that have at least one plant species with a variety name containing the word \"Red\" and a location requirement of \"Tropical regions\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all plant genera that have at least one plant species with a variety name containing the word \"Red\" and a location requirement of \"Tropical regions\":",
        "output": "SELECT PlantGenus.name AS genus FROM PlantGenus JOIN PlantSpecies ON PlantGenus.id = PlantSpecies.genus_id JOIN PlantVariety ON PlantSpecies.id = PlantVariety.species_id JOIN PlantSpeciesLocation ON PlantSpecies.id = PlantSpeciesLocation.plant_species_id JOIN PlantLocation ON PlantSpeciesLocation.plant_location_id = PlantLocation.id WHERE PlantVariety.name LIKE '%Red%' AND PlantLocation.name = 'Tropical regions';",
        "schema": "botany",
        "processed_schema_content": {
            "PlantSpecies": [
                "id",
                "name",
                "genus_id",
                "scientific_name"
            ],
            "PlantGenus": [
                "id",
                "family_id",
                "name"
            ],
            "PlantSpeciesLocation": [
                "plant_location_id",
                "plant_species_id"
            ],
            "PlantLocation": [
                "id",
                "name"
            ],
            "PlantVariety": [
                "name",
                "species_id"
            ]
        }
    },
    {
        "id": 227,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'data_sets': ['name', 'id', 'data_source_id', 'owner_id', 'is_public', 'created_by_id', 'Sales', 'Customer', 'created_at', 'num_records', 'created_by_user_id', 'num_columns', 'user_id'], 'data_records': ['data_set_id', 'id', 'created_at', 'value', 'data_set_column_id', 'row_id', 'record_id'], 'data_set_columns': ['name', 'data_set_id', 'data_type_id', 'id'], 'data_types': ['name', 'id'], 'users': ['name', 'email', 'id', 'role_id', 'Alice', 'alice', 'last_login_date', 'is_active', 'user_name', 'last_login'], 'user_activity': ['user_id', 'id', 'action_type', 'action_details', 'created_at', 'duration_seconds', 'timestamp', 'data_set_id', 'last_accessed', 'accessed_at']} and \n# the user question: Retrieve the names and email addresses of all users who have created a query on a data set that has a column named \"sales\" with a filter that includes a value greater than or equal to 100 in the \"sales\" column and a column named \"date_created\" with a data type of \"Date\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all users who have created a query on a data set that has a column named \"sales\" with a filter that includes a value greater than or equal to 100 in the \"sales\" column and a column named \"date_created\" with a data type of \"Date\":",
        "output": "SELECT DISTINCT users.name, users.email FROM user_activity JOIN users ON user_activity.user_id = users.id JOIN data_sets ON user_activity.action_details = data_sets.id JOIN data_set_columns AS col1 ON data_sets.id = col1.data_set_id AND col1.name = 'sales' JOIN data_set_columns AS col2 ON data_sets.id = col2.data_set_id AND col2.name = 'date_created' AND col2.data_type_id = (SELECT id FROM data_types WHERE name = 'Date') JOIN data_records AS record ON col1.id = record.data_set_column_id AND record.value >= 100 WHERE user_activity.action_type = 'Query Created' GROUP BY users.id;",
        "schema": "big_data",
        "processed_schema_content": {
            "data_sets": [
                "name",
                "id",
                "data_source_id",
                "owner_id",
                "is_public",
                "created_by_id",
                "Sales",
                "Customer",
                "created_at",
                "num_records",
                "created_by_user_id",
                "num_columns",
                "user_id"
            ],
            "data_records": [
                "data_set_id",
                "id",
                "created_at",
                "value",
                "data_set_column_id",
                "row_id",
                "record_id"
            ],
            "data_set_columns": [
                "name",
                "data_set_id",
                "data_type_id",
                "id"
            ],
            "data_types": [
                "name",
                "id"
            ],
            "users": [
                "name",
                "email",
                "id",
                "role_id",
                "Alice",
                "alice",
                "last_login_date",
                "is_active",
                "user_name",
                "last_login"
            ],
            "user_activity": [
                "user_id",
                "id",
                "action_type",
                "action_details",
                "created_at",
                "duration_seconds",
                "timestamp",
                "data_set_id",
                "last_accessed",
                "accessed_at"
            ]
        }
    },
    {
        "id": 228,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Gene_Publication': ['gene_id', 'publication_id'], 'Publication': ['title', 'publication_id', 'publication_date', 'journal_name']} and \n# the user question: Retrieve the names of all publications and their associated genes that have been published in a journal with the word \"Genome Research\" in the name and have a gene name that contains the word \"receptor\" or \"cytokine\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all publications and their associated genes that have been published in a journal with the word \"Genome Research\" in the name and have a gene name that contains the word \"receptor\" or \"cytokine\".",
        "output": "SELECT Publication.title, Gene.gene_name FROM Publication JOIN Gene_Publication ON Publication.publication_id = Gene_Publication.publication_id JOIN Gene ON Gene_Publication.gene_id = Gene.gene_id WHERE Publication.journal_name LIKE '%Genome Research%' AND (Gene.gene_name LIKE '%receptor%' OR Gene.gene_name LIKE '%cytokine%');",
        "schema": "genetics",
        "processed_schema_content": {
            "Gene": [
                "end_position",
                "start_position",
                "chromosome_id",
                "gene_name",
                "gene_id",
                "tss_position",
                "chromosome",
                "entrez_gene_id",
                "hgnc_symbol",
                "chromosome_number",
                "disease_id",
                "associated_disease",
                "accession_number",
                "Name",
                "ID"
            ],
            "Gene_Publication": [
                "gene_id",
                "publication_id"
            ],
            "Publication": [
                "title",
                "publication_id",
                "publication_date",
                "journal_name"
            ]
        }
    },
    {
        "id": 229,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'email', 'password', 'created_at'], 'Projects': ['project_id', 'project_name', 'description', 'user_id', 'created_at'], 'Rooms': ['room_id', 'room_name', 'project_id'], 'RoomProducts': ['room_product_id', 'room_id', 'product_id', 'quantity', 'project_id', 'supplier_id', 'order_id'], 'Orders': ['order_id', 'user_id', 'order_date', 'total_amount', 'product_id']} and \n# the user question: Retrieve the project names and the usernames of users who have ordered products for those projects, sorted by project name and then by username in ascending order. Include only projects that have at least two users who have made orders:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the project names and the usernames of users who have ordered products for those projects, sorted by project name and then by username in ascending order. Include only projects that have at least two users who have made orders:",
        "output": "SELECT Projects.project_name, Users.username FROM Projects JOIN Rooms ON Projects.project_id = Rooms.project_id JOIN RoomProducts ON Rooms.room_id = RoomProducts.room_id JOIN Orders ON RoomProducts.product_id = Orders.product_id JOIN Users ON Orders.user_id = Users.user_id GROUP BY Projects.project_id, Users.user_id HAVING COUNT(DISTINCT Users.user_id) >= 2 ORDER BY Projects.project_name ASC, Users.username ASC;",
        "schema": "interior_design",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "email",
                "password",
                "created_at"
            ],
            "Projects": [
                "project_id",
                "project_name",
                "description",
                "user_id",
                "created_at"
            ],
            "Rooms": [
                "room_id",
                "room_name",
                "project_id"
            ],
            "RoomProducts": [
                "room_product_id",
                "room_id",
                "product_id",
                "quantity",
                "project_id",
                "supplier_id",
                "order_id"
            ],
            "Orders": [
                "order_id",
                "user_id",
                "order_date",
                "total_amount",
                "product_id"
            ]
        }
    },
    {
        "id": 232,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'User': ['user_id', 'username', 'email', 'password', 'role_id'], 'StopSchedule': ['stop_id', 'route_id', 'arrival_time', 'departure_time', 'stop_schedule_id', 'station_id', 'trip_id'], 'Trip': ['trip_id', 'user_id', 'vehicle_id', 'route_id', 'start_time', 'end_time', 'status', 'fare_id', 'is_cancelled', 'passenger_id', 'driver_id', 'driver_rating', 'check_in_time', 'check_out_time', 'fare', 'distance', 'fare_amount', '[start_date]', '[end_date]', '[driver_id]', '[year]', '[vehicle_id]', 'duration', 'date', 'fare_rate', 'start_city', 'end_location', 'start_location', 'destination_id', 'cost', 'origin_id', 'destination', 'source', 'tip_amount', 'customer_id'], 'Fare': ['fare_id', 'route_id', 'fare_amount', 'fare_type', 'discount_id', 'trip_id'], 'Payment': ['payment_id', 'user_id', 'fare_id', 'payment_time', 'amount_paid', 'trip_id', 'card_id', 'payment_type', 'payment_type_id', 'amount', 'payment_date', 'passenger_id', 'credit_card_number', 'payment_method', 'method'], 'Station': ['station_id', 'name', 'latitude', 'longitude', 'address'], 'StationSchedule': ['station_id', 'route_id', 'arrival_time', 'departure_time']} and \n# the user question: Retrieve the names and email addresses of all users who have traveled on Route 2 and have a scheduled stop at Station 4, and have made a payment for a fare amount greater than $10.00:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all users who have traveled on Route 2 and have a scheduled stop at Station 4, and have made a payment for a fare amount greater than $10.00:",
        "output": "SELECT DISTINCT User.username, User.email FROM User INNER JOIN Trip ON User.user_id = Trip.user_id INNER JOIN Payment ON Trip.trip_id = Payment.trip_id INNER JOIN Fare ON Payment.fare_id = Fare.fare_id INNER JOIN StopSchedule ON Trip.route_id = StopSchedule.route_id AND Trip.start_time = StopSchedule.departure_time INNER JOIN StationSchedule ON StopSchedule.route_id = StationSchedule.route_id AND StopSchedule.departure_time = StationSchedule.departure_time INNER JOIN Station ON StationSchedule.station_id = Station.station_id WHERE Trip.route_id = 2 AND Station.name = 'Station 4' AND Fare.fare_amount > 10.00;",
        "schema": "intelligent_transportation_systems",
        "processed_schema_content": {
            "User": [
                "user_id",
                "username",
                "email",
                "password",
                "role_id"
            ],
            "StopSchedule": [
                "stop_id",
                "route_id",
                "arrival_time",
                "departure_time",
                "stop_schedule_id",
                "station_id",
                "trip_id"
            ],
            "Trip": [
                "trip_id",
                "user_id",
                "vehicle_id",
                "route_id",
                "start_time",
                "end_time",
                "status",
                "fare_id",
                "is_cancelled",
                "passenger_id",
                "driver_id",
                "driver_rating",
                "check_in_time",
                "check_out_time",
                "fare",
                "distance",
                "fare_amount",
                "[start_date]",
                "[end_date]",
                "[driver_id]",
                "[year]",
                "[vehicle_id]",
                "duration",
                "date",
                "fare_rate",
                "start_city",
                "end_location",
                "start_location",
                "destination_id",
                "cost",
                "origin_id",
                "destination",
                "source",
                "tip_amount",
                "customer_id"
            ],
            "Fare": [
                "fare_id",
                "route_id",
                "fare_amount",
                "fare_type",
                "discount_id",
                "trip_id"
            ],
            "Payment": [
                "payment_id",
                "user_id",
                "fare_id",
                "payment_time",
                "amount_paid",
                "trip_id",
                "card_id",
                "payment_type",
                "payment_type_id",
                "amount",
                "payment_date",
                "passenger_id",
                "credit_card_number",
                "payment_method",
                "method"
            ],
            "Station": [
                "station_id",
                "name",
                "latitude",
                "longitude",
                "address"
            ],
            "StationSchedule": [
                "station_id",
                "route_id",
                "arrival_time",
                "departure_time"
            ]
        }
    },
    {
        "id": 233,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Company': ['company_id', 'company_name', 'country_id', 'num_employees'], 'CompanyIndustry': ['company_id', 'industry_id'], 'Industry': ['industry_id', 'industry_name'], 'Country': ['country_id', 'country_name', 'population']} and \n# the user question: Find the company names and their respective industry that have a headquarters in France and operate in the Aerospace industry.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the company names and their respective industry that have a headquarters in France and operate in the Aerospace industry.",
        "output": "SELECT Company.company_name, Industry.industry_name FROM Company INNER JOIN CompanyIndustry ON Company.company_id = CompanyIndustry.company_id INNER JOIN Industry ON CompanyIndustry.industry_id = Industry.industry_id INNER JOIN Country ON Company.country_id = Country.country_id WHERE Country.country_name = 'France' AND Industry.industry_name = 'Aerospace';",
        "schema": "economics",
        "processed_schema_content": {
            "Company": [
                "company_id",
                "company_name",
                "country_id",
                "num_employees"
            ],
            "CompanyIndustry": [
                "company_id",
                "industry_id"
            ],
            "Industry": [
                "industry_id",
                "industry_name"
            ],
            "Country": [
                "country_id",
                "country_name",
                "population"
            ]
        }
    },
    {
        "id": 234,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Authors': ['first_name', 'author_id', 'last_name', 'nationality', 'author_name', 'author_city', 'AuthorID', 'AuthorName'], 'Order_Items': ['price', 'quantity', 'order_id', 'book_id', 'customer_id', 'publisher_id', 'is_returned', 'product_id', 'is_delivered', 'total_price', 'order_date'], 'Orders': ['order_date', 'order_id', 'customer_id', 'coupon_code', 'total_cost', 'total_quantity', 'shipping_address_id', 'total_price', 'total_amount', 'salesperson_id', 'book_id', 'channel_id', 'Order_Date', 'Order_Total', 'Customer_Name']} and \n# the user question: Retrieve the titles and authors of books that have been ordered by customers who have not placed any order in the last 3 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the titles and authors of books that have been ordered by customers who have not placed any order in the last 3 months.",
        "output": "SELECT b.title, CONCAT(a.first_name, ' ', a.last_name) AS author FROM Books b JOIN Authors a ON b.author_id = a.author_id WHERE b.book_id IN ( SELECT oi.book_id FROM Order_Items oi WHERE oi.order_id IN ( SELECT o.order_id FROM Orders o WHERE o.customer_id NOT IN ( SELECT o2.customer_id FROM Orders o2 WHERE o2.order_date >= DATE('now', '-3 month') ) ) GROUP BY oi.book_id );",
        "schema": "marketing_books",
        "processed_schema_content": {
            "Books": [
                "book_id",
                "title",
                "publisher_id",
                "publication_date",
                "author_id",
                "price",
                "publication_year",
                "publisher",
                "stock",
                "genre",
                "series",
                "year_published",
                "release_date",
                "word_count",
                "avg_rating",
                "A001",
                "genre_id",
                "stock_count",
                "category_id",
                "book_title",
                "rating",
                "available_for_purchase",
                "BookID",
                "BookTitle",
                "PublicationYear",
                "PublisherID",
                "Price"
            ],
            "Authors": [
                "first_name",
                "author_id",
                "last_name",
                "nationality",
                "author_name",
                "author_city",
                "AuthorID",
                "AuthorName"
            ],
            "Order_Items": [
                "price",
                "quantity",
                "order_id",
                "book_id",
                "customer_id",
                "publisher_id",
                "is_returned",
                "product_id",
                "is_delivered",
                "total_price",
                "order_date"
            ],
            "Orders": [
                "order_date",
                "order_id",
                "customer_id",
                "coupon_code",
                "total_cost",
                "total_quantity",
                "shipping_address_id",
                "total_price",
                "total_amount",
                "salesperson_id",
                "book_id",
                "channel_id",
                "Order_Date",
                "Order_Total",
                "Customer_Name"
            ]
        }
    },
    {
        "id": 236,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'celestial_bodies': ['radius', 'mass', 'name', 'type', 'number_of_moons', 'distance_from_sun', 'id', 'distance_from_earth', 'orbital_period', 'diameter', 'orbiting_body_id', 'average_surface_temperature', 'surface_temperature', 'perihelion_distance', 'period', 'semimajor_axis', 'redshift', 'velocity', 'luminosity', 'schwarzschild_radius', 'eccentricity', 'aphelion_distance', 'spin_period', 'semi_major_axis', 'surface_gravity', 'temperature', 'magnitude', 'accretion_disk_temperature', 'rotation_period', 'obliquity', 'pulse_period', 'peak_absolute_magnitude', 'albedo', 'apparent_magnitude', 'absolute_magnitude', 'spectral_type', 'discovery_year', 'spectral_class', 'distance_from_star', 'discovery_method_id', 'equilibrium_temperature', 'metallicity', 'age', 'effective_temperature', 'atmospheric_composition', 'inclination', 'parallax', 'rotation_velocity', 'axial_tilt', 'orbital_inclination', 'density', 'rotational_velocity', 'magnetic_field_strength', 'composition', 'rotational_period', 'spin', 'distance_from_galactic_center', 'binary_system', 'constellation', 'stellar_evolution_stage', 'star_cluster_type', 'galaxy', 'orbital_eccentricity', 'star_spectral_type', 'orbital_period_unit', 'diameter_unit', 'discovery_method', 'pulse_period_unit', 'distance_unit', 'radius_unit', 'avg_temperature', 'temperature_unit', 'aphelion_unit', 'perihelion_unit', 'event_horizon_unit', 'event_horizon_radius', 'luminosity_distance', 'orbit_type', 'equatorial_diameter', 'gravity_unit', 'escape_velocity', 'angle_unit', 'surface_area', 'density_unit', 'parent_body_id', 'atmospheric_pressure', 'luminosity_class', 'inner_habitable_zone', 'outer_habitable_zone', 'period_unit', 'classification', 'pressure_unit', 'surface_pressure', 'orbiting', 'distance', 'proper_motion', 'proper_motion_unit', 'mean_radius', 'mass_unit', 'temperature_range', 'Gas', 'Giant', 'brightness_temperature', 'parallax_unit', 'metallicity_unit', 'magnetic_field_unit', 'spin_parameter', 'orbiting_id', 'stellar_mass', 'stage', 'radial_velocity', 'host_star', 'accretion_rate', 'core_type']} and \n# the user question: Retrieve the name and mass of all neutron stars that have a radius less than 15 kilometers and a magnetic field strength greater than 10^12 Gauss.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and mass of all neutron stars that have a radius less than 15 kilometers and a magnetic field strength greater than 10^12 Gauss.",
        "output": "SELECT name, mass FROM celestial_bodies WHERE type = 'Neutron Star' AND radius < 15 AND magnetic_field_strength > POWER(10, 12);",
        "schema": "astronomy",
        "processed_schema_content": {
            "celestial_bodies": [
                "radius",
                "mass",
                "name",
                "type",
                "number_of_moons",
                "distance_from_sun",
                "id",
                "distance_from_earth",
                "orbital_period",
                "diameter",
                "orbiting_body_id",
                "average_surface_temperature",
                "surface_temperature",
                "perihelion_distance",
                "period",
                "semimajor_axis",
                "redshift",
                "velocity",
                "luminosity",
                "schwarzschild_radius",
                "eccentricity",
                "aphelion_distance",
                "spin_period",
                "semi_major_axis",
                "surface_gravity",
                "temperature",
                "magnitude",
                "accretion_disk_temperature",
                "rotation_period",
                "obliquity",
                "pulse_period",
                "peak_absolute_magnitude",
                "albedo",
                "apparent_magnitude",
                "absolute_magnitude",
                "spectral_type",
                "discovery_year",
                "spectral_class",
                "distance_from_star",
                "discovery_method_id",
                "equilibrium_temperature",
                "metallicity",
                "age",
                "effective_temperature",
                "atmospheric_composition",
                "inclination",
                "parallax",
                "rotation_velocity",
                "axial_tilt",
                "orbital_inclination",
                "density",
                "rotational_velocity",
                "magnetic_field_strength",
                "composition",
                "rotational_period",
                "spin",
                "distance_from_galactic_center",
                "binary_system",
                "constellation",
                "stellar_evolution_stage",
                "star_cluster_type",
                "galaxy",
                "orbital_eccentricity",
                "star_spectral_type",
                "orbital_period_unit",
                "diameter_unit",
                "discovery_method",
                "pulse_period_unit",
                "distance_unit",
                "radius_unit",
                "avg_temperature",
                "temperature_unit",
                "aphelion_unit",
                "perihelion_unit",
                "event_horizon_unit",
                "event_horizon_radius",
                "luminosity_distance",
                "orbit_type",
                "equatorial_diameter",
                "gravity_unit",
                "escape_velocity",
                "angle_unit",
                "surface_area",
                "density_unit",
                "parent_body_id",
                "atmospheric_pressure",
                "luminosity_class",
                "inner_habitable_zone",
                "outer_habitable_zone",
                "period_unit",
                "classification",
                "pressure_unit",
                "surface_pressure",
                "orbiting",
                "distance",
                "proper_motion",
                "proper_motion_unit",
                "mean_radius",
                "mass_unit",
                "temperature_range",
                "Gas",
                "Giant",
                "brightness_temperature",
                "parallax_unit",
                "metallicity_unit",
                "magnetic_field_unit",
                "spin_parameter",
                "orbiting_id",
                "stellar_mass",
                "stage",
                "radial_velocity",
                "host_star",
                "accretion_rate",
                "core_type"
            ]
        }
    },
    {
        "id": 238,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Categories': ['category_name', 'category_id', 'description'], 'Sale_Items': ['product_id', 'sale_id', 'quantity', 'sale_item_id', 'customer_id', 'unit_price', 'discount_code', 'sale_date', 'price']} and \n# the user question: Retrieve the names and total sales of all products that have been sold more than 10 times, grouped by category and sorted by total sales in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and total sales of all products that have been sold more than 10 times, grouped by category and sorted by total sales in descending order.",
        "output": "SELECT Categories.category_name, SUM(Sale_Items.price * Sale_Items.quantity) AS total_sales FROM Products INNER JOIN Sale_Items ON Products.product_id = Sale_Items.product_id INNER JOIN Categories ON Products.category_id = Categories.category_id GROUP BY Categories.category_id HAVING COUNT(*) > 10 ORDER BY total_sales DESC;",
        "schema": "pharmacy",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "price",
                "description",
                "product_description",
                "supplier_id",
                "category_id",
                "units_in_stock",
                "expiration_date",
                "stock_quantity",
                "expiration_id",
                "discontinued",
                "cost_price",
                "quantity_in_stock",
                "unit_price",
                "unit_cost",
                "brand_name",
                "last_supplied_date",
                "manufacturer_name",
                "backorder"
            ],
            "Categories": [
                "category_name",
                "category_id",
                "description"
            ],
            "Sale_Items": [
                "product_id",
                "sale_id",
                "quantity",
                "sale_item_id",
                "customer_id",
                "unit_price",
                "discount_code",
                "sale_date",
                "price"
            ]
        }
    },
    {
        "id": 240,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['username', 'user_id', 'email', 'john_doe', 'jane_doe', 'sarah_smith', 'tom_wilson', 'robert_king', 'alice_smith', 'jack_smith', 'jane_smith', 'mary_jones', 'joe_brown', 'james_smith', 'jessica_wong', 'david_smith', 'first_name', 'last_name', 'james_wong', 'emily_smith', 'jennifer_wilson', 'subscription', 'date_of_birth'], 'Sales': ['Sales', 'Product', 'Region', 'State', 'product_id', 'dataset_id', 'quantity', 'sale_date', 'Unit_price', 'Sale_date', 'salesperson_id', 'sale_id', 'customer_id', 'company_id', 'unit_price', 'sales_id', 'model_id']} and \n# the user question: What is the total revenue generated by each user in the 'Sales' table in the month of May 2023, sorted in descending order of revenue?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What is the total revenue generated by each user in the 'Sales' table in the month of May 2023, sorted in descending order of revenue?",
        "output": "SELECT Users.username, SUM(Sales.quantity * Sales.Unit_price) AS total_revenue FROM Users INNER JOIN Sales ON Users.user_id = Sales.salesperson_id WHERE strftime('%Y%m', Sales.sale_date) = '202305' GROUP BY Users.username ORDER BY total_revenue DESC;",
        "schema": "data_mining",
        "processed_schema_content": {
            "Users": [
                "username",
                "user_id",
                "email",
                "john_doe",
                "jane_doe",
                "sarah_smith",
                "tom_wilson",
                "robert_king",
                "alice_smith",
                "jack_smith",
                "jane_smith",
                "mary_jones",
                "joe_brown",
                "james_smith",
                "jessica_wong",
                "david_smith",
                "first_name",
                "last_name",
                "james_wong",
                "emily_smith",
                "jennifer_wilson",
                "subscription",
                "date_of_birth"
            ],
            "Sales": [
                "Sales",
                "Product",
                "Region",
                "State",
                "product_id",
                "dataset_id",
                "quantity",
                "sale_date",
                "Unit_price",
                "Sale_date",
                "salesperson_id",
                "sale_id",
                "customer_id",
                "company_id",
                "unit_price",
                "sales_id",
                "model_id"
            ]
        }
    },
    {
        "id": 242,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'checking_account_transactions': ['transaction_id', 'transaction_amount', 'user_id', 'account_id', 'transaction_type', 'transaction_date', 'transaction_description', 'transaction_category']} and \n# the user question: Find the top 10 most common transaction categories for checking account transactions:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the top 10 most common transaction categories for checking account transactions:",
        "output": "SELECT transaction_category, COUNT(*) AS num_transactions FROM checking_account_transactions WHERE transaction_category IS NOT NULL GROUP BY transaction_category ORDER BY num_transactions DESC LIMIT 10",
        "schema": "finance",
        "processed_schema_content": {
            "checking_account_transactions": [
                "transaction_id",
                "transaction_amount",
                "user_id",
                "account_id",
                "transaction_type",
                "transaction_date",
                "transaction_description",
                "transaction_category"
            ]
        }
    },
    {
        "id": 244,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Cities': ['city_name', 'city_id', 'country_id', 'country_name', 'region_id', 'state_id', 'air_quality_index', 'year', 'state_name'], 'Emissions': ['emission_value', 'source_id', 'city_id', 'date', 'country_id', 'marine_area_id', 'facility_id', 'activity_id', 'emissions'], 'Pollution_Sources': ['source_id', 'emission_type']} and \n# the user question: Show the top 5 cities with the highest levels of volatile organic compound emissions in the fourth quarter of 2022, along with their respective levels.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Show the top 5 cities with the highest levels of volatile organic compound emissions in the fourth quarter of 2022, along with their respective levels.",
        "output": "SELECT c.city_name, e.emission_value FROM Cities c JOIN Emissions e ON c.city_id = e.city_id JOIN Pollution_Sources ps ON ps.source_id = e.source_id WHERE ps.emission_type = 'Volatile Organic Compounds' AND e.date BETWEEN '2022-10-01' AND '2022-12-31' ORDER BY e.emission_value DESC LIMIT 5;",
        "schema": "environment",
        "processed_schema_content": {
            "Cities": [
                "city_name",
                "city_id",
                "country_id",
                "country_name",
                "region_id",
                "state_id",
                "air_quality_index",
                "year",
                "state_name"
            ],
            "Emissions": [
                "emission_value",
                "source_id",
                "city_id",
                "date",
                "country_id",
                "marine_area_id",
                "facility_id",
                "activity_id",
                "emissions"
            ],
            "Pollution_Sources": [
                "source_id",
                "emission_type"
            ]
        }
    },
    {
        "id": 246,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'train_routes': ['route_id', 'start_station', 'end_station', 'distance', 'duration', 'train_id', 'departure_time', 'arrival_time', 'route_name', 'speed', 'departure_date', 'schedule_id']} and \n# the user question: Find the list of train routes with their corresponding departure and arrival times that have a duration of over 5 hours.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the list of train routes with their corresponding departure and arrival times that have a duration of over 5 hours.",
        "output": "SELECT train_routes.route_name, train_routes.departure_time, train_routes.arrival_time FROM train_routes WHERE TIME_TO_SEC(TIMEDIFF(train_routes.arrival_time, train_routes.departure_time)) >= 18000",
        "schema": "high-speed_trains",
        "processed_schema_content": {
            "train_routes": [
                "route_id",
                "start_station",
                "end_station",
                "distance",
                "duration",
                "train_id",
                "departure_time",
                "arrival_time",
                "route_name",
                "speed",
                "departure_date",
                "schedule_id"
            ]
        }
    },
    {
        "id": 248,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Documentary_Films': ['length', 'rating', 'title', 'film_id', 'release_date', 'director_id', 'runtime', 'production_company_id', 'duration', 'runtime_minutes', 'duration_minutes', 'tagline', 'release_year'], 'Directors': ['director_id', 'nationality', 'director_name', 'birthdate', 'birthplace', 'gender', 'gender_id', 'last_name', 'first_name'], 'Film_Directors_Map': ['director_id', 'film_id', 'director_role'], 'Film_Topics_Map': ['topic_id', 'film_id'], 'Topics': ['topic_id', 'topic_name']} and \n# the user question: Find the names and release dates of all documentary films that have a topic related to environment and a crew member with a role of \"Director\" who was born in Brazil.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and release dates of all documentary films that have a topic related to environment and a crew member with a role of \"Director\" who was born in Brazil.",
        "output": "SELECT DISTINCT Documentary_Films.title, Documentary_Films.release_date FROM Documentary_Films JOIN Film_Topics_Map ON Documentary_Films.film_id = Film_Topics_Map.film_id JOIN Topics ON Film_Topics_Map.topic_id = Topics.topic_id JOIN Film_Directors_Map ON Documentary_Films.film_id = Film_Directors_Map.film_id JOIN Directors ON Film_Directors_Map.director_id = Directors.director_id WHERE Topics.topic_name = 'Environment' AND Directors.birthplace = 'Brazil';",
        "schema": "documentary_films",
        "processed_schema_content": {
            "Documentary_Films": [
                "length",
                "rating",
                "title",
                "film_id",
                "release_date",
                "director_id",
                "runtime",
                "production_company_id",
                "duration",
                "runtime_minutes",
                "duration_minutes",
                "tagline",
                "release_year"
            ],
            "Directors": [
                "director_id",
                "nationality",
                "director_name",
                "birthdate",
                "birthplace",
                "gender",
                "gender_id",
                "last_name",
                "first_name"
            ],
            "Film_Directors_Map": [
                "director_id",
                "film_id",
                "director_role"
            ],
            "Film_Topics_Map": [
                "topic_id",
                "film_id"
            ],
            "Topics": [
                "topic_id",
                "topic_name"
            ]
        }
    },
    {
        "id": 249,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'created_by', 'completed_count', 'task_count', 'total_task_count', 'completed_task_count', 'status', 'category_id', 'start_date', 'deadline', 'budget', 'end_date', 'estimated_budget'], 'Categories': ['category_name', 'category_id', 'Marketing', 'CategoryName', 'CategoryID']} and \n# the user question: Find the categories that have no projects:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the categories that have no projects:",
        "output": "SELECT Categories.category_name FROM Categories LEFT JOIN Projects ON Categories.category_id = Projects.category_id WHERE Projects.project_id IS NULL;",
        "schema": "data_analysis",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "created_by",
                "completed_count",
                "task_count",
                "total_task_count",
                "completed_task_count",
                "status",
                "category_id",
                "start_date",
                "deadline",
                "budget",
                "end_date",
                "estimated_budget"
            ],
            "Categories": [
                "category_name",
                "category_id",
                "Marketing",
                "CategoryName",
                "CategoryID"
            ]
        }
    },
    {
        "id": 250,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'patient': ['email', 'phone_number', 'patient_id', 'name'], 'symptom': ['symptom_id', 'name'], 'patient_symptom': ['symptom_id', 'patient_id']} and \n# the user question: Find the names and contact information of all patients who have reported symptoms of skin rashes:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and contact information of all patients who have reported symptoms of skin rashes:",
        "output": "SELECT patient.name, patient.phone_number, patient.email FROM patient JOIN patient_symptom ON patient.patient_id = patient_symptom.patient_id JOIN symptom ON patient_symptom.symptom_id = symptom.symptom_id WHERE symptom.name = 'Skin rashes';",
        "schema": "homeopathy",
        "processed_schema_content": {
            "patient": [
                "email",
                "phone_number",
                "patient_id",
                "name"
            ],
            "symptom": [
                "symptom_id",
                "name"
            ],
            "patient_symptom": [
                "symptom_id",
                "patient_id"
            ]
        }
    },
    {
        "id": 252,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain containing the string \"news\" and have spent more than $1 million on advertising in the past week:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain containing the string \"news\" and have spent more than $1 million on advertising in the past week:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 1000000 AND Websites.domain LIKE '%news%' AND Ad_Statistics.date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        }
    },
    {
        "id": 253,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'tasks': ['created_at', 'project_id', 'task_id', 'user_id', 'due_date', 'completed', 'started_at', 'priority', 'completion_date', 'completed_date', 'start_date', 'created_date', 'creator_id', 'assignee_id', 'completed_at', 'name', 'tags', 'assigner_id', 'assigned_by_id', 'category'], 'users': ['user_id', 'name', 'email', 'last_login_attempt', 'total_tasks', 'completed_tasks', 'assignee_id', 'role', 'last_login', 'first_name', 'last_name', 'last_login_date', 'registration_date', 'password', 'job_title', 'hire_date']} and \n# the user question: Retrieve the names and email addresses of all users who have completed a task assigned by a user with the role of \"manager\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all users who have completed a task assigned by a user with the role of \"manager\":",
        "output": "SELECT name, email FROM users WHERE user_id IN ( SELECT assignee_id FROM tasks WHERE assigned_by_id IN ( SELECT user_id FROM users WHERE role = 'manager' ) AND completed = 1 );",
        "schema": "ui_ux_design",
        "processed_schema_content": {
            "tasks": [
                "created_at",
                "project_id",
                "task_id",
                "user_id",
                "due_date",
                "completed",
                "started_at",
                "priority",
                "completion_date",
                "completed_date",
                "start_date",
                "created_date",
                "creator_id",
                "assignee_id",
                "completed_at",
                "name",
                "tags",
                "assigner_id",
                "assigned_by_id",
                "category"
            ],
            "users": [
                "user_id",
                "name",
                "email",
                "last_login_attempt",
                "total_tasks",
                "completed_tasks",
                "assignee_id",
                "role",
                "last_login",
                "first_name",
                "last_name",
                "last_login_date",
                "registration_date",
                "password",
                "job_title",
                "hire_date"
            ]
        }
    },
    {
        "id": 254,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Websites': ['website_id', 'user_id', 'url', 'created_at', 'updated_at', 'name', 'domain_id', 'domain_authority_score', 'domain_created_at'], 'Pages': ['page_id', 'website_id', 'url', 'title', 'description', 'content', 'created_at', 'updated_at', 'meta_description', 'meta_keywords', 'meta_title', 'h1_tag', 'h2_tag', 'title_tag', 'canonical_url', 'description_tag', 'header_tag', 'meta_tag', 'meta_keyword', 'h1', 'heading', 'header', 'word_count', 'time_on_page', 'total_words', 'http_status_code', 'user_id', 'last_modified_date', '[website_id]']} and \n# the user question: Retrieve the names and URLs of all websites that have at least one page with a title containing the word \"contact\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and URLs of all websites that have at least one page with a title containing the word \"contact\":",
        "output": "SELECT DISTINCT Websites.name, Websites.url FROM Websites INNER JOIN Pages ON Websites.website_id = Pages.website_id WHERE Pages.title LIKE '%contact%';",
        "schema": "search_engine_optimization_(seo)",
        "processed_schema_content": {
            "Websites": [
                "website_id",
                "user_id",
                "url",
                "created_at",
                "updated_at",
                "name",
                "domain_id",
                "domain_authority_score",
                "domain_created_at"
            ],
            "Pages": [
                "page_id",
                "website_id",
                "url",
                "title",
                "description",
                "content",
                "created_at",
                "updated_at",
                "meta_description",
                "meta_keywords",
                "meta_title",
                "h1_tag",
                "h2_tag",
                "title_tag",
                "canonical_url",
                "description_tag",
                "header_tag",
                "meta_tag",
                "meta_keyword",
                "h1",
                "heading",
                "header",
                "word_count",
                "time_on_page",
                "total_words",
                "http_status_code",
                "user_id",
                "last_modified_date",
                "[website_id]"
            ]
        }
    },
    {
        "id": 255,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Cities': ['city_name', 'city_id', 'country_id', 'country_name', 'region_id', 'state_id', 'air_quality_index', 'year', 'state_name'], 'Countries': ['country_name', 'country_id', 'continent', 'region', 'forest_coverage'], 'Waste_Sources': ['source_id', 'city_id', 'waste_source', 'facility_id'], 'Plastic_Waste_Production': ['source_id', 'date', 'plastic_waste_production']} and \n# the user question: Display the amount of plastic waste production for each city in Asia in 2030, broken down by waste source.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Display the amount of plastic waste production for each city in Asia in 2030, broken down by waste source.",
        "output": "SELECT c.city_name, ws.waste_source, SUM(pwp.plastic_waste_production) as total_production FROM Countries co JOIN Cities c ON co.country_id = c.country_id JOIN Waste_Sources ws ON c.city_id = ws.city_id JOIN Plastic_Waste_Production pwp ON ws.source_id = pwp.source_id WHERE co.continent = 'Asia' AND pwp.date BETWEEN '2030-01-01' AND '2030-12-31' GROUP BY c.city_name, ws.waste_source;",
        "schema": "environment",
        "processed_schema_content": {
            "Cities": [
                "city_name",
                "city_id",
                "country_id",
                "country_name",
                "region_id",
                "state_id",
                "air_quality_index",
                "year",
                "state_name"
            ],
            "Countries": [
                "country_name",
                "country_id",
                "continent",
                "region",
                "forest_coverage"
            ],
            "Waste_Sources": [
                "source_id",
                "city_id",
                "waste_source",
                "facility_id"
            ],
            "Plastic_Waste_Production": [
                "source_id",
                "date",
                "plastic_waste_production"
            ]
        }
    },
    {
        "id": 256,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Shifts': ['start_time', 'end_time', 'employee_id', 'shift_id', 'duration', 'status', 'shift_date', 'machine_id', 'overtime_hours', 'performance_rating', 'shift_start', 'hours_worked'], 'Employees': ['first_name', 'employee_id', 'last_name', 'job_title', 'territory_id', 'department_id', 'manager_id', 'job_title_id', 'hire_date', 'address', 'birth_date', 'phone', 'title', 'reports_to', 'address_id', 'performance_evaluation_date', 'training_expiry_date', 'schedule_update_date', 'time_off_request_date', 'performance_bonus_date', 'promotion_date', 'overtime_pay_date', 'reassignment_date', 'training_date', 'annual_leave_balance', 'skills_upgrade_date', 'compensatory_time_off_date', 'shift_length', 'last_promotion_date', 'career_development_plan_date', 'last_break_date', 'salary', 'hourly_rate', 'hourly_wage', 'status', 'skill_set', 'ShiftStart', 'ShiftEnd', 'EmployeeID', 'EmployeeName', 'HireDate', 'LastName', 'Title', 'FirstName', 'BirthDate']} and \n# the user question: Find the employees who have not worked in the last month and their respective job titles.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the employees who have not worked in the last month and their respective job titles.",
        "output": "SELECT Employees.job_title, Employees.first_name, Employees.last_name FROM Employees LEFT JOIN Shifts ON Employees.employee_id = Shifts.employee_id WHERE Shifts.start_time IS NULL OR Shifts.start_time < DATE('now', '-1 month');",
        "schema": "operations_management",
        "processed_schema_content": {
            "Shifts": [
                "start_time",
                "end_time",
                "employee_id",
                "shift_id",
                "duration",
                "status",
                "shift_date",
                "machine_id",
                "overtime_hours",
                "performance_rating",
                "shift_start",
                "hours_worked"
            ],
            "Employees": [
                "first_name",
                "employee_id",
                "last_name",
                "job_title",
                "territory_id",
                "department_id",
                "manager_id",
                "job_title_id",
                "hire_date",
                "address",
                "birth_date",
                "phone",
                "title",
                "reports_to",
                "address_id",
                "performance_evaluation_date",
                "training_expiry_date",
                "schedule_update_date",
                "time_off_request_date",
                "performance_bonus_date",
                "promotion_date",
                "overtime_pay_date",
                "reassignment_date",
                "training_date",
                "annual_leave_balance",
                "skills_upgrade_date",
                "compensatory_time_off_date",
                "shift_length",
                "last_promotion_date",
                "career_development_plan_date",
                "last_break_date",
                "salary",
                "hourly_rate",
                "hourly_wage",
                "status",
                "skill_set",
                "ShiftStart",
                "ShiftEnd",
                "EmployeeID",
                "EmployeeName",
                "HireDate",
                "LastName",
                "Title",
                "FirstName",
                "BirthDate"
            ]
        }
    },
    {
        "id": 265,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Documentary_Films': ['length', 'rating', 'title', 'film_id', 'release_date', 'director_id', 'runtime', 'production_company_id', 'duration', 'runtime_minutes', 'duration_minutes', 'tagline', 'release_year'], 'Crew_Members': ['crew_name', 'crew_id', 'crew_role', 'birthdate', 'nationality', 'last_name', 'gender', 'fame_level', 'full_name', 'first_name'], 'Film_Crew_Map': ['film_id', 'crew_id', 'position_id'], 'Film_Topics_Map': ['topic_id', 'film_id'], 'Topics': ['topic_id', 'topic_name']} and \n# the user question: Find the names and release dates of all documentary films that have a topic related to history and a crew member with a role of \"Producer\" who was born in the United Kingdom.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and release dates of all documentary films that have a topic related to history and a crew member with a role of \"Producer\" who was born in the United Kingdom.",
        "output": "SELECT DISTINCT Documentary_Films.title, Documentary_Films.release_date FROM Documentary_Films JOIN Film_Topics_Map ON Documentary_Films.film_id = Film_Topics_Map.film_id JOIN Topics ON Film_Topics_Map.topic_id = Topics.topic_id JOIN Film_Crew_Map ON Documentary_Films.film_id = Film_Crew_Map.film_id JOIN Crew_Members ON Film_Crew_Map.crew_id = Crew_Members.crew_id WHERE Topics.topic_name = 'History' AND Crew_Members.crew_role = 'Producer' AND Crew_Members.nationality = 'United Kingdom';",
        "schema": "documentary_films",
        "processed_schema_content": {
            "Documentary_Films": [
                "length",
                "rating",
                "title",
                "film_id",
                "release_date",
                "director_id",
                "runtime",
                "production_company_id",
                "duration",
                "runtime_minutes",
                "duration_minutes",
                "tagline",
                "release_year"
            ],
            "Crew_Members": [
                "crew_name",
                "crew_id",
                "crew_role",
                "birthdate",
                "nationality",
                "last_name",
                "gender",
                "fame_level",
                "full_name",
                "first_name"
            ],
            "Film_Crew_Map": [
                "film_id",
                "crew_id",
                "position_id"
            ],
            "Film_Topics_Map": [
                "topic_id",
                "film_id"
            ],
            "Topics": [
                "topic_id",
                "topic_name"
            ]
        }
    },
    {
        "id": 267,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Show': ['show_name', 'host_id', 'air_date', 'show_id', 'Gourmet', 'Getaway', 'contestant_count'], 'Episode': ['air_date', 'rating', 'show_id', 'episode_id', 'episode_name', 'duration'], 'Competition': ['competition_name', 'competition_id', 'show_id', 'judge_id'], 'Judge': ['judge_id', 'judge_name', 'competition_id', 'chef_id']} and \n# the user question: \"Retrieve the names of all the judges who have judged competitions in shows aired in 2023.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Retrieve the names of all the judges who have judged competitions in shows aired in 2023.\"",
        "output": "SELECT DISTINCT j.judge_name FROM Judge j JOIN Competition c ON j.judge_id = c.judge_id JOIN Show s ON c.show_id = s.show_id JOIN Episode e ON s.show_id = e.show_id WHERE strftime('%Y', e.air_date) = '2023';",
        "schema": "cooking_shows",
        "processed_schema_content": {
            "Show": [
                "show_name",
                "host_id",
                "air_date",
                "show_id",
                "Gourmet",
                "Getaway",
                "contestant_count"
            ],
            "Episode": [
                "air_date",
                "rating",
                "show_id",
                "episode_id",
                "episode_name",
                "duration"
            ],
            "Competition": [
                "competition_name",
                "competition_id",
                "show_id",
                "judge_id"
            ],
            "Judge": [
                "judge_id",
                "judge_name",
                "competition_id",
                "chef_id"
            ]
        }
    },
    {
        "id": 268,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Tasks': ['start_date', 'task_name', 'due_date', 'end_date', 'task_id', 'priority', 'task_status', 'project_id', 'task_priority_id', 'task_status_id', 'task_start_date', 'task_end_date', 'task_expected_completion_date', 'task_completion_percentage', 'task_estimated_cost', 'task_due_date', 'actual_end_date', 'actual_start_date', 'task_lead_id', 'actual_cost', 'employee_i', 'task_description'], 'Task_Statuses': ['status_name', 'task_id', 'task_status_name', 'task_status_id'], 'Project_Statuses': ['project_status_name', 'project_status_id']} and \n# the user question: List all the projects that have a project status of \"In Progress\" and have at least one task with a task status of \"Overdue\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List all the projects that have a project status of \"In Progress\" and have at least one task with a task status of \"Overdue\".",
        "output": "SELECT DISTINCT p.project_name, ps.project_status_name FROM Projects p INNER JOIN Project_Statuses ps ON p.project_status_id = ps.project_status_id INNER JOIN Tasks t ON p.project_id = t.project_id INNER JOIN Task_Statuses ts ON t.task_status_id = ts.task_status_id WHERE ps.project_status_name = 'In Progress' AND ts.task_status_name = 'Overdue';",
        "schema": "civil_engineering",
        "processed_schema_content": {
            "Projects": [
                "project_name",
                "project_id",
                "end_date",
                "start_date",
                "square_footage",
                "status",
                "project_manager_id",
                "project_status_id",
                "project_completion_date",
                "project_start_date",
                "project_budget",
                "project_end_date",
                "project_deadline",
                "project_location",
                "supervisor_id",
                "completion_date",
                "Expansion",
                "Highway",
                "Construction",
                "Building",
                "Office",
                "budget",
                "actual_end_date",
                "actual_start_date",
                "State",
                "Project_ID",
                "Name",
                "Status",
                "Start_Date",
                "expected_completion_date",
                "Completion_Date",
                "Actual_Costs",
                "Project_Name",
                "Budget",
                "Client_ID",
                "cost",
                "name",
                "id"
            ],
            "Tasks": [
                "start_date",
                "task_name",
                "due_date",
                "end_date",
                "task_id",
                "priority",
                "task_status",
                "project_id",
                "task_priority_id",
                "task_status_id",
                "task_start_date",
                "task_end_date",
                "task_expected_completion_date",
                "task_completion_percentage",
                "task_estimated_cost",
                "task_due_date",
                "actual_end_date",
                "actual_start_date",
                "task_lead_id",
                "actual_cost",
                "employee_i",
                "task_description"
            ],
            "Task_Statuses": [
                "status_name",
                "task_id",
                "task_status_name",
                "task_status_id"
            ],
            "Project_Statuses": [
                "project_status_name",
                "project_status_id"
            ]
        }
    },
    {
        "id": 270,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue'], 'Review': ['rating', 'user_id', 'film_id', 'text', 'review_id'], 'Film_Genre': ['film_id', 'genre_id'], 'Genre': ['name', 'genre_id']} and \n# the user question: Find the genres that have the highest average rating among films released in 2020:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the genres that have the highest average rating among films released in 2020:",
        "output": "SELECT Genre.name, AVG(Review.rating) AS avg_rating FROM Genre INNER JOIN Film_Genre ON Genre.genre_id = Film_Genre.genre_id INNER JOIN Film ON Film_Genre.film_id = Film.film_id AND strftime('%Y', Film.release_date) = '2020' INNER JOIN Review ON Film.film_id = Review.film_id GROUP BY Genre.genre_id ORDER BY avg_rating DESC;",
        "schema": "action_films",
        "processed_schema_content": {
            "Film": [
                "film_id",
                "title",
                "rating",
                "release_date",
                "runtime",
                "box_office",
                "director_id",
                "duration_minutes",
                "budget",
                "release_year",
                "production_company_id",
                "country_id",
                "year",
                "length",
                "is_sequel",
                "runtime_minutes",
                "awards",
                "revenue"
            ],
            "Review": [
                "rating",
                "user_id",
                "film_id",
                "text",
                "review_id"
            ],
            "Film_Genre": [
                "film_id",
                "genre_id"
            ],
            "Genre": [
                "name",
                "genre_id"
            ]
        }
    },
    {
        "id": 272,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Participant': ['participant_id', 'age', 'gender', 'education_level', 'native_language'], 'Session': ['session_id', 'participant_id', 'date', 'time_start', 'time_end'], 'Task': ['task_id', 'task_name', 'description', 'experiment_id'], 'TaskResult': ['task_result_id', 'task_id', 'participant_id', 'accuracy', 'average_reaction_time', 'trial_id', 'session_id', 'task_name'], 'Experiment': ['experiment_name', 'experiment_id']} and \n# the user question: Retrieve the participant IDs and their corresponding average accuracy for trials in the \"Stroop Test\" experiment, where the average accuracy is above 0.8 and the participant's age is between 25 and 40 (inclusive).,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the participant IDs and their corresponding average accuracy for trials in the \"Stroop Test\" experiment, where the average accuracy is above 0.8 and the participant's age is between 25 and 40 (inclusive).",
        "output": "SELECT Participant.participant_id, AVG(TaskResult.accuracy) AS average_accuracy FROM Participant JOIN Session ON Participant.participant_id = Session.participant_id JOIN TaskResult ON TaskResult.session_id = Session.session_id JOIN Task ON Task.task_id = TaskResult.task_id JOIN Experiment ON Experiment.experiment_id = Task.experiment_id WHERE Experiment.experiment_name = 'Stroop Test' AND Participant.age BETWEEN 25 AND 40 GROUP BY Participant.participant_id HAVING average_accuracy > 0.8;",
        "schema": "cognitive_psychology",
        "processed_schema_content": {
            "Participant": [
                "participant_id",
                "age",
                "gender",
                "education_level",
                "native_language"
            ],
            "Session": [
                "session_id",
                "participant_id",
                "date",
                "time_start",
                "time_end"
            ],
            "Task": [
                "task_id",
                "task_name",
                "description",
                "experiment_id"
            ],
            "TaskResult": [
                "task_result_id",
                "task_id",
                "participant_id",
                "accuracy",
                "average_reaction_time",
                "trial_id",
                "session_id",
                "task_name"
            ],
            "Experiment": [
                "experiment_name",
                "experiment_id"
            ]
        }
    },
    {
        "id": 273,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Orders': ['order_time', 'user_id', 'order_date', 'total_price', 'order_id', 'event_id', 'order_status', 'order_total_amount', 'order_payment_method', 'attendee_id', 'order_name', 'order_email', 'order_total', 'session_id'], 'Tickets': ['ticket_price', 'ticket_description', 'ticket_name', 'event_id', 'ticket_id', 'ticket_capacity', 'session_id', 'ticket_type', 'ticket_quantity', 'ticket_max_quantity', 'ticket_start_date', 'ticket_max_num', 'ticket_availability', 'ticket_total_quantity', 'max_attendees'], 'Order_Items': ['order_id', 'ticket_id', 'ticket_quantity', 'quantity', 'attendee_id', 'event_id', 'order_item_id', 'order_item_price', 'ticket_price', 'item_price', 'session_id', 'ticket_type_id', 'order_item_quantity'], 'Attendees': ['attendee_email', 'attendee_name', 'attendee_id', 'attendee_password', 'event_id', 'attendee_company', 'ticket_id', 'attendee_phone', 'company_id', 'session_id', 'attendee_registration_date']} and \n# the user question: Retrieve the name and number of attendees who have purchased a ticket for each ticket type for the event with ID 1, ordered by ticket price in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and number of attendees who have purchased a ticket for each ticket type for the event with ID 1, ordered by ticket price in descending order.",
        "output": "SELECT Tickets.ticket_type, COUNT(DISTINCT Attendees.attendee_id) AS attendee_count FROM Tickets LEFT JOIN Order_Items ON Tickets.ticket_id = Order_Items.ticket_id LEFT JOIN Orders ON Order_Items.order_id = Orders.order_id LEFT JOIN Attendees ON Orders.attendee_id = Attendees.attendee_id WHERE Tickets.event_id = 1 GROUP BY Tickets.ticket_id ORDER BY Tickets.ticket_price DESC;",
        "schema": "virtual_event_planning",
        "processed_schema_content": {
            "Orders": [
                "order_time",
                "user_id",
                "order_date",
                "total_price",
                "order_id",
                "event_id",
                "order_status",
                "order_total_amount",
                "order_payment_method",
                "attendee_id",
                "order_name",
                "order_email",
                "order_total",
                "session_id"
            ],
            "Tickets": [
                "ticket_price",
                "ticket_description",
                "ticket_name",
                "event_id",
                "ticket_id",
                "ticket_capacity",
                "session_id",
                "ticket_type",
                "ticket_quantity",
                "ticket_max_quantity",
                "ticket_start_date",
                "ticket_max_num",
                "ticket_availability",
                "ticket_total_quantity",
                "max_attendees"
            ],
            "Order_Items": [
                "order_id",
                "ticket_id",
                "ticket_quantity",
                "quantity",
                "attendee_id",
                "event_id",
                "order_item_id",
                "order_item_price",
                "ticket_price",
                "item_price",
                "session_id",
                "ticket_type_id",
                "order_item_quantity"
            ],
            "Attendees": [
                "attendee_email",
                "attendee_name",
                "attendee_id",
                "attendee_password",
                "event_id",
                "attendee_company",
                "ticket_id",
                "attendee_phone",
                "company_id",
                "session_id",
                "attendee_registration_date"
            ]
        }
    },
    {
        "id": 274,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Protein': ['gene_id', 'molecular_weight', 'protein_name', 'isoelectric_point', 'protein_id', 'length', 'protein_length'], 'Pathway_Gene': ['gene_id', 'pathway_id'], 'Pathway': ['pathway_id', 'pathway_name', 'description']} and \n# the user question: Retrieve the names of all genes and their associated proteins that have a length greater than 1500 amino acids and are part of the \"p53 signaling pathway\" pathway.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all genes and their associated proteins that have a length greater than 1500 amino acids and are part of the \"p53 signaling pathway\" pathway.",
        "output": "SELECT Gene.gene_name, Protein.protein_name FROM Gene JOIN Protein ON Gene.gene_id = Protein.gene_id JOIN Pathway_Gene ON Gene.gene_id = Pathway_Gene.gene_id JOIN Pathway ON Pathway_Gene.pathway_id = Pathway.pathway_id WHERE Protein.length > 1500 AND Pathway.pathway_name = 'p53 signaling pathway';",
        "schema": "genetics",
        "processed_schema_content": {
            "Gene": [
                "end_position",
                "start_position",
                "chromosome_id",
                "gene_name",
                "gene_id",
                "tss_position",
                "chromosome",
                "entrez_gene_id",
                "hgnc_symbol",
                "chromosome_number",
                "disease_id",
                "associated_disease",
                "accession_number",
                "Name",
                "ID"
            ],
            "Protein": [
                "gene_id",
                "molecular_weight",
                "protein_name",
                "isoelectric_point",
                "protein_id",
                "length",
                "protein_length"
            ],
            "Pathway_Gene": [
                "gene_id",
                "pathway_id"
            ],
            "Pathway": [
                "pathway_id",
                "pathway_name",
                "description"
            ]
        }
    },
    {
        "id": 276,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Participants': ['first_name', 'last_name', 'participant_id', 'gender', 'age', 'birth_year', 'date_of_birth', 'ag', 'age_group_id', 'parental_edu_id', 'language_group_id'], 'Participant_Tasks': ['task_id', 'participant_id', 'completion_date', 'score', 'completed'], 'Tasks': ['task_id', 'task_name', 'study_id', 'difficulty_level', 'duration', 'difficulty', 'task_category', 'category', 'Tower', 'Hanoi', 'Digit', 'Span', 'Working', 'Spatial', 'Symbol', 'Picture', 'Concepts', 'Coding', 'Regulation', 'Emotional'], 'Participant_Questionnaires': ['participant_id', 'questionnaire_id', 'participant_questionnaire_id', 'completion_date', 'response_text', 'score', 'task_id', 'completion_time']} and \n# the user question: Retrieve the names and ages of all participants who have completed the \"Memory Game\" task and have achieved a score that is higher than the average score for that task, and have also completed a questionnaire with a score that is higher than 70:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and ages of all participants who have completed the \"Memory Game\" task and have achieved a score that is higher than the average score for that task, and have also completed a questionnaire with a score that is higher than 70:",
        "output": "SELECT Participants.first_name, Participants.last_name, Participants.age FROM Participants JOIN Participant_Tasks ON Participants.participant_id = Participant_Tasks.participant_id JOIN Tasks ON Participant_Tasks.task_id = Tasks.task_id JOIN Participant_Questionnaires ON Participants.participant_id = Participant_Questionnaires.participant_id WHERE Tasks.task_name = 'Memory Game' AND Participant_Tasks.score > ( SELECT AVG(score) FROM Participant_Tasks WHERE task_id = ( SELECT task_id FROM Tasks WHERE task_name = 'Memory Game' ) ) AND Participant_Questionnaires.score > 70;",
        "schema": "developmental_psychology",
        "processed_schema_content": {
            "Participants": [
                "first_name",
                "last_name",
                "participant_id",
                "gender",
                "age",
                "birth_year",
                "date_of_birth",
                "ag",
                "age_group_id",
                "parental_edu_id",
                "language_group_id"
            ],
            "Participant_Tasks": [
                "task_id",
                "participant_id",
                "completion_date",
                "score",
                "completed"
            ],
            "Tasks": [
                "task_id",
                "task_name",
                "study_id",
                "difficulty_level",
                "duration",
                "difficulty",
                "task_category",
                "category",
                "Tower",
                "Hanoi",
                "Digit",
                "Span",
                "Working",
                "Spatial",
                "Symbol",
                "Picture",
                "Concepts",
                "Coding",
                "Regulation",
                "Emotional"
            ],
            "Participant_Questionnaires": [
                "participant_id",
                "questionnaire_id",
                "participant_questionnaire_id",
                "completion_date",
                "response_text",
                "score",
                "task_id",
                "completion_time"
            ]
        }
    },
    {
        "id": 277,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Tracks': ['track_id', 'track_title', 'duration', 'album_id', 'track_name', 'genre_id', 'rating', 'artist_id', 'release_id'], 'UserFavorites': ['track_id', 'user_id', 'genre_id', 'favorite_date']} and \n# the user question: Retrieve the tracks that have been favorited by more than one user:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the tracks that have been favorited by more than one user:",
        "output": "SELECT Tracks.track_title FROM Tracks JOIN UserFavorites ON Tracks.track_id = UserFavorites.track_id GROUP BY Tracks.track_id HAVING COUNT(DISTINCT UserFavorites.user_id) > 1;",
        "schema": "electronic_music",
        "processed_schema_content": {
            "Tracks": [
                "track_id",
                "track_title",
                "duration",
                "album_id",
                "track_name",
                "genre_id",
                "rating",
                "artist_id",
                "release_id"
            ],
            "UserFavorites": [
                "track_id",
                "user_id",
                "genre_id",
                "favorite_date"
            ]
        }
    },
    {
        "id": 282,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Film': ['film_id', 'title', 'director_id', 'duration', 'release_date', 'genre', 'genre_id', 'language_id'], 'Director': ['director_id', 'name', 'nationality'], 'Actor': ['actor_id', 'name', 'nationality', 'birth_date'], 'Film_Actor': ['film_id', 'actor_id']} and \n# the user question: \"Retrieve the names of actors who have appeared in films directed by themselves.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Retrieve the names of actors who have appeared in films directed by themselves.\"",
        "output": "SELECT Actor.name FROM Actor INNER JOIN Film_Actor ON Actor.actor_id = Film_Actor.actor_id INNER JOIN Film ON Film_Actor.film_id = Film.film_id INNER JOIN Director ON Film.director_id = Director.director_id WHERE Actor.actor_id = Director.director_id;",
        "schema": "drama_films",
        "processed_schema_content": {
            "Film": [
                "film_id",
                "title",
                "director_id",
                "duration",
                "release_date",
                "genre",
                "genre_id",
                "language_id"
            ],
            "Director": [
                "director_id",
                "name",
                "nationality"
            ],
            "Actor": [
                "actor_id",
                "name",
                "nationality",
                "birth_date"
            ],
            "Film_Actor": [
                "film_id",
                "actor_id"
            ]
        }
    },
    {
        "id": 285,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'surgery': ['patient_id', 'surgeon_id', 'room_number', 'id', 'cost', 'surgery_type', 'surgery_date', 'operating_room_id', 'surgery_id', 'doctor_id', 'status', 'duration']} and \n# the user question: Get the number of surgeries performed by each surgeon.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the number of surgeries performed by each surgeon.",
        "output": "SELECT surgeon_id, COUNT(*) AS num_surgeries FROM surgery GROUP BY surgeon_id",
        "schema": "surgery",
        "processed_schema_content": {
            "surgery": [
                "patient_id",
                "surgeon_id",
                "room_number",
                "id",
                "cost",
                "surgery_type",
                "surgery_date",
                "operating_room_id",
                "surgery_id",
                "doctor_id",
                "status",
                "duration"
            ]
        }
    },
    {
        "id": 287,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Vehicles': ['type', 'user_id', 'model', 'vehicle_id', 'color'], 'Maintenance': ['vehicle_id', 'cost']} and \n# the user question: Find the average cost of maintenance per vehicle for vehicles owned by the user with user_id 3,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average cost of maintenance per vehicle for vehicles owned by the user with user_id 3",
        "output": "SELECT v.vehicle_id, AVG(m.cost) AS average_maintenance_cost FROM Vehicles v JOIN Maintenance m ON v.vehicle_id = m.vehicle_id WHERE v.user_id = 3 GROUP BY v.vehicle_id;",
        "schema": "smart_transportation",
        "processed_schema_content": {
            "Vehicles": [
                "type",
                "user_id",
                "model",
                "vehicle_id",
                "color"
            ],
            "Maintenance": [
                "vehicle_id",
                "cost"
            ]
        }
    },
    {
        "id": 289,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'patients': ['first_name', 'last_name', 'patient_id', 'phone_number', 'email', 'phone'], 'medical_history': ['patient_id', 'medical_condition', 'diagnosis'], 'prescription': ['patient_id', 'prescription_id', 'prescription_date', 'type', 'practitioner_id'], 'prescription_items': ['formula_id', 'prescription_id'], 'herbal_formulas': ['formula_id', 'formula_name', 'price', 'num_ingredients', 'ingredients', 'name']} and \n# the user question: Retrieve the names and email addresses of patients who have been prescribed herbal formulas that contain the ingredient \"Dang Gui\" and have also been diagnosed with a medical condition containing the word \"anemia\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of patients who have been prescribed herbal formulas that contain the ingredient \"Dang Gui\" and have also been diagnosed with a medical condition containing the word \"anemia\":",
        "output": "SELECT DISTINCT p.first_name, p.last_name, p.email FROM patients p JOIN prescription pr ON p.patient_id = pr.patient_id JOIN prescription_items pi ON pr.prescription_id = pi.prescription_id JOIN herbal_formulas hf ON pi.formula_id = hf.formula_id JOIN medical_history mh ON p.patient_id = mh.patient_id WHERE hf.ingredients LIKE '%Dang Gui%' AND mh.medical_condition LIKE '%anemia%';",
        "schema": "acupuncture",
        "processed_schema_content": {
            "patients": [
                "first_name",
                "last_name",
                "patient_id",
                "phone_number",
                "email",
                "phone"
            ],
            "medical_history": [
                "patient_id",
                "medical_condition",
                "diagnosis"
            ],
            "prescription": [
                "patient_id",
                "prescription_id",
                "prescription_date",
                "type",
                "practitioner_id"
            ],
            "prescription_items": [
                "formula_id",
                "prescription_id"
            ],
            "herbal_formulas": [
                "formula_id",
                "formula_name",
                "price",
                "num_ingredients",
                "ingredients",
                "name"
            ]
        }
    },
    {
        "id": 291,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Payments': ['amount', 'client_id', 'appointment_type_id', 'session_id', 'payment_date', 'appointment_id', 'service_id', 'session_type_id', 'payment_id', 'amount_due', 'amount_paid', 'payment_method'], 'Clients': ['client_id', 'email', 'date_of_birth', 'last_name', 'first_name', 'phone_number', 'age', 'primary_concern', 'phone', 'birth_date', 'state', 'health_condition']} and \n# the user question: Retrieve the name and email of clients who have not made any payments.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of clients who have not made any payments.",
        "output": "SELECT c.first_name, c.last_name, c.email FROM Clients c LEFT JOIN Payments p ON c.client_id = p.client_id WHERE p.payment_id IS NULL;",
        "schema": "hypnotherapy",
        "processed_schema_content": {
            "Payments": [
                "amount",
                "client_id",
                "appointment_type_id",
                "session_id",
                "payment_date",
                "appointment_id",
                "service_id",
                "session_type_id",
                "payment_id",
                "amount_due",
                "amount_paid",
                "payment_method"
            ],
            "Clients": [
                "client_id",
                "email",
                "date_of_birth",
                "last_name",
                "first_name",
                "phone_number",
                "age",
                "primary_concern",
                "phone",
                "birth_date",
                "state",
                "health_condition"
            ]
        }
    },
    {
        "id": 292,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['SegmentID', 'ProductName', 'ProductID', 'CompanyID', 'UnitsInStock', 'UnitPrice', 'Category', 'Price', 'Cost', 'CategoryID', 'CurrentInventoryLevel', 'UnitCost', 'Description', 'Discontinued', 'CategoryName', 'SupplierID', 'CostPrice', 'ReorderPoint', 'DiscontinuedDate', 'SubcategoryID', 'SalesPrice', 'QuantityOnHand', 'PromotionID'], 'SalesOrderLineItem': ['ProductID', 'UnitPrice', 'Quantity', 'OrderID', 'OrderDate', 'Price', 'OrderLineID']} and \n# the user question: Retrieve the list of products that have not been sold at all, including their name and category:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of products that have not been sold at all, including their name and category:",
        "output": "SELECT Product.ProductName, Product.CategoryName FROM Product LEFT JOIN SalesOrderLineItem ON Product.ProductID = SalesOrderLineItem.ProductID WHERE SalesOrderLineItem.OrderID IS NULL;",
        "schema": "business_strategy",
        "processed_schema_content": {
            "Product": [
                "SegmentID",
                "ProductName",
                "ProductID",
                "CompanyID",
                "UnitsInStock",
                "UnitPrice",
                "Category",
                "Price",
                "Cost",
                "CategoryID",
                "CurrentInventoryLevel",
                "UnitCost",
                "Description",
                "Discontinued",
                "CategoryName",
                "SupplierID",
                "CostPrice",
                "ReorderPoint",
                "DiscontinuedDate",
                "SubcategoryID",
                "SalesPrice",
                "QuantityOnHand",
                "PromotionID"
            ],
            "SalesOrderLineItem": [
                "ProductID",
                "UnitPrice",
                "Quantity",
                "OrderID",
                "OrderDate",
                "Price",
                "OrderLineID"
            ]
        }
    },
    {
        "id": 293,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'name', 'email', 'password', 'user_type', 'role', 'gender', 'state', 'country'], 'Carvings': ['carving_id', 'name', 'description', 'price', 'image_url', 'vendor_id', 'stock', 'size', 'last_sold_date', 'cost', 'material_id', 'creation_date', 'type_id', 'weight', 'date_sold', 'is_available', 'width', 'length', 'weight_kg', 'carving_type_id'], 'Orders': ['order_id', 'user_id', 'total_price', 'order_date', 'status', 'coupon_code', 'delivered', 'total_amount', 'shipping_country', 'date', 'country', 'customer_id', 'OrderDate', 'CustomerID', 'Amount'], 'Order_Items': ['order_item_id', 'order_id', 'carving_id', 'quantity', 'price', 'order_date']} and \n# the user question: Find the vendors who have sold carvings with the highest total revenue in the past year, including their names and the total revenue:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the vendors who have sold carvings with the highest total revenue in the past year, including their names and the total revenue:",
        "output": "SELECT u.name AS vendor_name, SUM(oi.price * oi.quantity) AS total_revenue FROM Users u JOIN Carvings c ON u.user_id = c.vendor_id JOIN Order_Items oi ON c.carving_id = oi.carving_id JOIN Orders o ON oi.order_id = o.order_id WHERE o.order_date BETWEEN DATE('now', '-1 year') AND DATE('now') GROUP BY u.user_id ORDER BY total_revenue DESC;",
        "schema": "soapstone_carving",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "name",
                "email",
                "password",
                "user_type",
                "role",
                "gender",
                "state",
                "country"
            ],
            "Carvings": [
                "carving_id",
                "name",
                "description",
                "price",
                "image_url",
                "vendor_id",
                "stock",
                "size",
                "last_sold_date",
                "cost",
                "material_id",
                "creation_date",
                "type_id",
                "weight",
                "date_sold",
                "is_available",
                "width",
                "length",
                "weight_kg",
                "carving_type_id"
            ],
            "Orders": [
                "order_id",
                "user_id",
                "total_price",
                "order_date",
                "status",
                "coupon_code",
                "delivered",
                "total_amount",
                "shipping_country",
                "date",
                "country",
                "customer_id",
                "OrderDate",
                "CustomerID",
                "Amount"
            ],
            "Order_Items": [
                "order_item_id",
                "order_id",
                "carving_id",
                "quantity",
                "price",
                "order_date"
            ]
        }
    },
    {
        "id": 294,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'injuries': ['description', 'training_session_id', 'id', 'athlete_id', 'injury_type', 'expected_recovery', 'injury_date', 'recovery_date']} and \n# the user question: Display the number of injuries and their types for athlete with ID 4567.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Display the number of injuries and their types for athlete with ID 4567.",
        "output": "SELECT COUNT(*) AS injury_count, injury_type FROM injuries WHERE athlete_id = 4567 GROUP BY injury_type;",
        "schema": "athletic_training",
        "processed_schema_content": {
            "injuries": [
                "description",
                "training_session_id",
                "id",
                "athlete_id",
                "injury_type",
                "expected_recovery",
                "injury_date",
                "recovery_date"
            ]
        }
    },
    {
        "id": 297,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Tracks': ['track_id', 'track_title', 'duration', 'album_id', 'track_name', 'genre_id', 'rating', 'artist_id', 'release_id']} and \n# the user question: Retrieve the tracks that are longer than the average duration of all tracks in the database:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the tracks that are longer than the average duration of all tracks in the database:",
        "output": "SELECT Tracks.track_name FROM Tracks WHERE Tracks.duration > ( SELECT AVG(duration) FROM Tracks );",
        "schema": "electronic_music",
        "processed_schema_content": {
            "Tracks": [
                "track_id",
                "track_title",
                "duration",
                "album_id",
                "track_name",
                "genre_id",
                "rating",
                "artist_id",
                "release_id"
            ]
        }
    },
    {
        "id": 298,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Film': ['director', 'release_year', 'film_id', 'title', 'box_office', 'language_id', 'runtime', 'budget', 'genre', 'based_on_true_story', 'film_title', 'film_gross', 'film_release_date', 'film_length', 'film_imdb_rating', 'film_director', 'film_runtime_minutes', 'film_release_year', 'film_worldwide_gross', 'film_budget', 'production_company_id', 'film_box_office_gross', 'film_user_rating', 'film_runtime', 'film_director_gender', 'film_box_office_rank', 'genre_id', 'film_duration', 'film_box_office_collection', 'film_running_time', 'film_country', 'film_rating', 'film_revenue', 'film_box_office', 'film_language', 'film_name', 'studio_id', 'film_production_budget'], 'Film_Director': ['director_id', 'film_id', 'director_name'], 'Director': ['director_id', 'director_name', 'gender', 'director_gender'], 'Battle': ['battle_name', 'year', 'battle_id', 'war_name', 'casualties', 'theater', 'war_id', 'date', 'countries_involved'], 'Film_Battle': ['battle_id', 'film_id']} and \n# the user question: Find all battles from the Spanish Civil War that are featured in war films directed by Pedro Almodóvar:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all battles from the Spanish Civil War that are featured in war films directed by Pedro Almodóvar:",
        "output": "SELECT Battle.battle_name, Director.director_name FROM Film INNER JOIN Film_Battle ON Film.film_id = Film_Battle.film_id INNER JOIN Battle ON Film_Battle.battle_id = Battle.battle_id INNER JOIN Film_Director ON Film.film_id = Film_Director.film_id INNER JOIN Director ON Film_Director.director_id = Director.director_id WHERE Director.director_name = 'Pedro Almodóvar' AND Battle.battle_name LIKE '%Spanish Civil War%';",
        "schema": "war_films",
        "processed_schema_content": {
            "Film": [
                "director",
                "release_year",
                "film_id",
                "title",
                "box_office",
                "language_id",
                "runtime",
                "budget",
                "genre",
                "based_on_true_story",
                "film_title",
                "film_gross",
                "film_release_date",
                "film_length",
                "film_imdb_rating",
                "film_director",
                "film_runtime_minutes",
                "film_release_year",
                "film_worldwide_gross",
                "film_budget",
                "production_company_id",
                "film_box_office_gross",
                "film_user_rating",
                "film_runtime",
                "film_director_gender",
                "film_box_office_rank",
                "genre_id",
                "film_duration",
                "film_box_office_collection",
                "film_running_time",
                "film_country",
                "film_rating",
                "film_revenue",
                "film_box_office",
                "film_language",
                "film_name",
                "studio_id",
                "film_production_budget"
            ],
            "Film_Director": [
                "director_id",
                "film_id",
                "director_name"
            ],
            "Director": [
                "director_id",
                "director_name",
                "gender",
                "director_gender"
            ],
            "Battle": [
                "battle_name",
                "year",
                "battle_id",
                "war_name",
                "casualties",
                "theater",
                "war_id",
                "date",
                "countries_involved"
            ],
            "Film_Battle": [
                "battle_id",
                "film_id"
            ]
        }
    },
    {
        "id": 301,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'AttendeeRegistration': ['event_id', 'attendee_name', 'attendee_id']} and \n# the user question: List all the registered attendees for the event with ID 1003.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List all the registered attendees for the event with ID 1003.",
        "output": "SELECT attendee_name FROM AttendeeRegistration WHERE event_id = 1003;",
        "schema": "event_management",
        "processed_schema_content": {
            "AttendeeRegistration": [
                "event_id",
                "attendee_name",
                "attendee_id"
            ]
        }
    },
    {
        "id": 303,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Screens': ['screen_description', 'screen_name', 'project_id', 'screen_id', 'template_id'], 'Components': ['New Component Name', 'component_name', 'component_id', 'component_type', 'screen_id', 'Label', 'component_label', 'screen_name'], 'Component_Properties': ['property_name', 'property_value', 'component_id', 'property_id']} and \n# the user question: Retrieve the component_id, component_name, and screen_name for all components that have a \"Font Size\" property with a value greater than or equal to 16.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the component_id, component_name, and screen_name for all components that have a \"Font Size\" property with a value greater than or equal to 16.",
        "output": "SELECT Components.component_id, Components.component_name, Screens.screen_name FROM Components INNER JOIN Component_Properties ON Components.component_id = Component_Properties.component_id INNER JOIN Screens ON Components.screen_id = Screens.screen_id WHERE Component_Properties.property_name = 'Font Size' AND Component_Properties.property_value >= 16;",
        "schema": "user_interface_design",
        "processed_schema_content": {
            "Screens": [
                "screen_description",
                "screen_name",
                "project_id",
                "screen_id",
                "template_id"
            ],
            "Components": [
                "New Component Name",
                "component_name",
                "component_id",
                "component_type",
                "screen_id",
                "Label",
                "component_label",
                "screen_name"
            ],
            "Component_Properties": [
                "property_name",
                "property_value",
                "component_id",
                "property_id"
            ]
        }
    },
    {
        "id": 304,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Documentary_Films': ['length', 'rating', 'title', 'film_id', 'release_date', 'director_id', 'runtime', 'production_company_id', 'duration', 'runtime_minutes', 'duration_minutes', 'tagline', 'release_year'], 'Crew_Members': ['crew_name', 'crew_id', 'crew_role', 'birthdate', 'nationality', 'last_name', 'gender', 'fame_level', 'full_name', 'first_name'], 'Film_Crew_Map': ['film_id', 'crew_id', 'position_id'], 'Film_Topics_Map': ['topic_id', 'film_id'], 'Topics': ['topic_id', 'topic_name']} and \n# the user question: Find the names and release dates of all documentary films that have a topic related to technology and a crew member with a role of \"Producer\" who was born in Japan.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and release dates of all documentary films that have a topic related to technology and a crew member with a role of \"Producer\" who was born in Japan.",
        "output": "SELECT DISTINCT Documentary_Films.title, Documentary_Films.release_date FROM Documentary_Films JOIN Film_Topics_Map ON Documentary_Films.film_id = Film_Topics_Map.film_id JOIN Topics ON Film_Topics_Map.topic_id = Topics.topic_id JOIN Film_Crew_Map ON Documentary_Films.film_id = Film_Crew_Map.film_id JOIN Crew_Members ON Film_Crew_Map.crew_id = Crew_Members.crew_id WHERE Topics.topic_name = 'Technology' AND Crew_Members.crew_role = 'Producer' AND Crew_Members.nationality = 'Japan';",
        "schema": "documentary_films",
        "processed_schema_content": {
            "Documentary_Films": [
                "length",
                "rating",
                "title",
                "film_id",
                "release_date",
                "director_id",
                "runtime",
                "production_company_id",
                "duration",
                "runtime_minutes",
                "duration_minutes",
                "tagline",
                "release_year"
            ],
            "Crew_Members": [
                "crew_name",
                "crew_id",
                "crew_role",
                "birthdate",
                "nationality",
                "last_name",
                "gender",
                "fame_level",
                "full_name",
                "first_name"
            ],
            "Film_Crew_Map": [
                "film_id",
                "crew_id",
                "position_id"
            ],
            "Film_Topics_Map": [
                "topic_id",
                "film_id"
            ],
            "Topics": [
                "topic_id",
                "topic_name"
            ]
        }
    },
    {
        "id": 305,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {} and \n# the user question: Find the average weight of all soapstone carvings.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average weight of all soapstone carvings.",
        "output": "SELECT AVG(weight) FROM carvings;",
        "schema": "soapstone_carving",
        "processed_schema_content": {}
    },
    {
        "id": 307,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Artists': ['artist_name', 'nationality', 'artist_id', 'birth_date', 'experience_years', 'country', 'birthdate'], 'Sculptures': ['width', 'depth', 'material', 'height', 'creation_date', 'sculpture_name', 'sculpture_id', 'artist_id', 'collection_id', 'material_id', 'rating']} and \n# the user question: Retrieve the names of sculptures that have a height greater than the average height of sculptures created by artists with more than 92 years of experience:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of sculptures that have a height greater than the average height of sculptures created by artists with more than 92 years of experience:",
        "output": "SELECT Sculptures.sculpture_name FROM Sculptures JOIN Artists ON Sculptures.artist_id = Artists.artist_id WHERE Sculptures.height > ( SELECT AVG(Sculptures.height) FROM Sculptures JOIN Artists ON Sculptures.artist_id = Artists.artist_id WHERE Artists.experience_years > 92 );",
        "schema": "sculpting",
        "processed_schema_content": {
            "Artists": [
                "artist_name",
                "nationality",
                "artist_id",
                "birth_date",
                "experience_years",
                "country",
                "birthdate"
            ],
            "Sculptures": [
                "width",
                "depth",
                "material",
                "height",
                "creation_date",
                "sculpture_name",
                "sculpture_id",
                "artist_id",
                "collection_id",
                "material_id",
                "rating"
            ]
        }
    },
    {
        "id": 308,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'mental_skills': ['skill_id', 'skill_name', 'skill_description', 'athlete_id', 'Focus', 'Visualization', 'skill_mastered', 'skill_level', 'Excellent', 'High', 'Low'], 'goals': ['goal_id', 'goal_name', 'goal_rating', 'skill_id'], 'athlete_goals': ['goal_id', 'athlete_id', 'goal_achieved', 'goal_date', 'date_achieved']} and \n# the user question: Get a list of all athletes who have a \"Strong\" level in the \"Visualization\" mental skill and a goal related to \"Agility\" that they have achieved, along with the date they achieved their goal.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get a list of all athletes who have a \"Strong\" level in the \"Visualization\" mental skill and a goal related to \"Agility\" that they have achieved, along with the date they achieved their goal.",
        "output": "SELECT athletes.name, athlete_goals.goal_date FROM athletes INNER JOIN athlete_goals ON athletes.athlete_id = athlete_goals.athlete_id INNER JOIN goals ON athlete_goals.goal_id = goals.goal_id INNER JOIN athlete_skills ON athletes.athlete_id = athlete_skills.athlete_id INNER JOIN mental_skills ON athlete_skills.skill_id = mental_skills.skill_id WHERE goals.goal_name = 'Agility' AND mental_skills.skill_name = 'Visualization' AND athlete_skills.skill_level = 'Strong' AND athlete_goals.goal_achieved = 1;",
        "schema": "sports_psychology",
        "processed_schema_content": {
            "athletes": [
                "name",
                "athlete_id",
                "team_id",
                "last_name",
                "athlete_name",
                "age"
            ],
            "athlete_skills": [
                "skill_id",
                "athlete_id",
                "skill_level",
                "skill_mastered",
                "self_talk",
                "mental_preparation",
                "imagery",
                "goal_setting",
                "anxiety",
                "focus",
                "mental_toughness",
                "confidence",
                "motivation"
            ],
            "mental_skills": [
                "skill_id",
                "skill_name",
                "skill_description",
                "athlete_id",
                "Focus",
                "Visualization",
                "skill_mastered",
                "skill_level",
                "Excellent",
                "High",
                "Low"
            ],
            "goals": [
                "goal_id",
                "goal_name",
                "goal_rating",
                "skill_id"
            ],
            "athlete_goals": [
                "goal_id",
                "athlete_id",
                "goal_achieved",
                "goal_date",
                "date_achieved"
            ]
        }
    },
    {
        "id": 309,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'employees': ['employee_id', 'department', 'job_title', 'age', 'salary', 'name', 'hire_date', 'employee_name'], 'program_attendance': ['certification', 'employee_id', 'program_id', 'satisfaction_score']} and \n# the user question: Get the average satisfaction score for all programs attended by employees in the \"Marketing\" department.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the average satisfaction score for all programs attended by employees in the \"Marketing\" department.",
        "output": "SELECT AVG(satisfaction_score) AS avg_satisfaction FROM program_attendance WHERE employee_id IN ( SELECT employee_id FROM employees WHERE department = 'Marketing' );",
        "schema": "health_and_wellness_programs",
        "processed_schema_content": {
            "employees": [
                "employee_id",
                "department",
                "job_title",
                "age",
                "salary",
                "name",
                "hire_date",
                "employee_name"
            ],
            "program_attendance": [
                "certification",
                "employee_id",
                "program_id",
                "satisfaction_score"
            ]
        }
    },
    {
        "id": 310,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Client': ['client_id', 'name', 'email', 'phone_number', 'industry_id', 'location_id', 'industry', 'budget', 'first_name', 'last_name', 'state', 'city', 'company_name', 'annual_revenue'], 'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months']} and \n# the user question: Retrieve the names and email addresses of all clients who have not sponsored any campaigns:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all clients who have not sponsored any campaigns:",
        "output": "SELECT DISTINCT Client.name, Client.email FROM Client LEFT JOIN Campaign ON Client.client_id = Campaign.client_id WHERE Campaign.campaign_id IS NULL;",
        "schema": "public_relations",
        "processed_schema_content": {
            "Client": [
                "client_id",
                "name",
                "email",
                "phone_number",
                "industry_id",
                "location_id",
                "industry",
                "budget",
                "first_name",
                "last_name",
                "state",
                "city",
                "company_name",
                "annual_revenue"
            ],
            "Campaign": [
                "campaign_id",
                "name",
                "start_date",
                "end_date",
                "client_id",
                "Charity",
                "Drive",
                "Launch",
                "Product",
                "Rebranding",
                "launch_date",
                "impressions",
                "completed",
                "create_date",
                "budget",
                "brand_id",
                "total_spending",
                "cost",
                "invoiced",
                "total_budget",
                "product_id",
                "duration_months"
            ]
        }
    },
    {
        "id": 312,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Order_Items': ['order_id', 'product_id', 'glassware_item_id', 'quantity', 'unit_price', 'order_item_id', 'price', 'item_cost', 'item_id', 'order_date', 'item_price'], 'Glassware_Items': ['glassware_type_id', 'quantity', 'glassware_item_id', 'product_id', 'glassware_item_name', 'glassware_item_description', 'etching_id', 'price', 'item_name', 'material', 'glassware_item_type_id', 'stock', 'design_id', 'discontinued', 'supplier_id', 'quantity_in_stock', 'unit_price', 'quantity_supplied']} and \n# the user question: Retrieve the list of glassware items along with their names and the total number of units sold for each item, where the number of units sold is greater than 50, sorted by number of units sold in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of glassware items along with their names and the total number of units sold for each item, where the number of units sold is greater than 50, sorted by number of units sold in descending order.",
        "output": "SELECT Glassware_Items.item_name, SUM(Order_Items.quantity) AS total_units FROM Glassware_Items INNER JOIN Order_Items ON Glassware_Items.glassware_item_id = Order_Items.glassware_item_id GROUP BY Glassware_Items.glassware_item_id HAVING total_units > 50 ORDER BY total_units DESC;",
        "schema": "glass_etching",
        "processed_schema_content": {
            "Order_Items": [
                "order_id",
                "product_id",
                "glassware_item_id",
                "quantity",
                "unit_price",
                "order_item_id",
                "price",
                "item_cost",
                "item_id",
                "order_date",
                "item_price"
            ],
            "Glassware_Items": [
                "glassware_type_id",
                "quantity",
                "glassware_item_id",
                "product_id",
                "glassware_item_name",
                "glassware_item_description",
                "etching_id",
                "price",
                "item_name",
                "material",
                "glassware_item_type_id",
                "stock",
                "design_id",
                "discontinued",
                "supplier_id",
                "quantity_in_stock",
                "unit_price",
                "quantity_supplied"
            ]
        }
    },
    {
        "id": 313,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'photographers': ['id', 'name', 'email', 'phone_number', 'city'], 'photos': ['taken_date', 'photographer_id', 'views', 'title', 'resolution_y', 'resolution_x', 'id', 'lens_id', 'location_id', 'camera_id', 'edit_date', 'rating', 'shutter_speed', 'aperture', 'width', 'height', 'date_taken', 'location', 'resolution_height', 'resolution_width', 'city', 'user_id', 'filename']} and \n# the user question: Retrieve the details of all the photographers who have not taken any photos in the last 90 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the details of all the photographers who have not taken any photos in the last 90 days.",
        "output": "SELECT photographers.name, photographers.email FROM photographers LEFT JOIN photos ON photos.photographer_id = photographers.id WHERE photos.taken_date IS NULL OR photos.taken_date < date('now', '-90 days');",
        "schema": "photography",
        "processed_schema_content": {
            "photographers": [
                "id",
                "name",
                "email",
                "phone_number",
                "city"
            ],
            "photos": [
                "taken_date",
                "photographer_id",
                "views",
                "title",
                "resolution_y",
                "resolution_x",
                "id",
                "lens_id",
                "location_id",
                "camera_id",
                "edit_date",
                "rating",
                "shutter_speed",
                "aperture",
                "width",
                "height",
                "date_taken",
                "location",
                "resolution_height",
                "resolution_width",
                "city",
                "user_id",
                "filename"
            ]
        }
    },
    {
        "id": 315,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Titanic': ['Age', 'Sex', 'Survived', 'Fare', 'Pclass', 'SibSp', 'Parch', 'Embarked', 'Cabin']} and \n# the user question: What is the maximum 'Fare' value for passengers who have a 'Pclass' value of 3 and have embarked at 'Q' or 'S' in the 'Titanic' dataset?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What is the maximum 'Fare' value for passengers who have a 'Pclass' value of 3 and have embarked at 'Q' or 'S' in the 'Titanic' dataset?",
        "output": "SELECT MAX(Fare) FROM Titanic WHERE Pclass = 3 AND Embarked IN ('Q', 'S');",
        "schema": "data_mining",
        "processed_schema_content": {
            "Titanic": [
                "Age",
                "Sex",
                "Survived",
                "Fare",
                "Pclass",
                "SibSp",
                "Parch",
                "Embarked",
                "Cabin"
            ]
        }
    },
    {
        "id": 318,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended classes at least once a week in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended classes at least once a week in the last month.",
        "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE ClassSessions.session_date >= date('now', '-1 month') GROUP BY Users.user_id HAVING COUNT(DISTINCT ClassSessions.session_date) >= 4;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        }
    },
    {
        "id": 319,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Events': ['event_name', 'event_date', 'event_id', 'severity', 'event_description', 'device_id', 'event_time', 'event_type'], 'Devices': ['manufacturer', 'device_id', 'device_type', 'device_name', 'screen_size', 'manufacture_date', 'battery_capacity', 'storage_capacity', 'camera_resolution', 'processor_speed', 'ram_capacity', 'biometric_authentication', 'ip_rating', 'screen_resolution', 'operating_system_version', 'added_date', 'ram_size', 'operating_system', 'os_version', 'ip_address', 'os_id', 'last_used_date', 'location_id', 'serial_number', 'network_id', 'last_access_date', 'is_online', 'last_patched_date', 'max_login_attempts', 'Flag_Status', 'Last_Update_Time', 'Last_Scan_Time', 'Device_Type', 'Last_Vulnerability_Scan', 'Last_Patch_Time', 'Vulnerability_Level', 'Device_Name', 'Certificate_Expiry_Date', 'Device_Status', 'Last_Checkin_Time', 'Last_Patch_Update', 'Last_Security_Update', 'IsConnected', 'ipAddress', 'name', 'id'], 'Device_Specs': ['screen_size', 'device_id', 'battery_life', 'warranty_expire_date', 'firmware_version', 'software_version', 'cpu_speed', 'memory_capacity', 'cpu_manufacturer', 'operating_system', 'memory_usage', 'disk_space_usage', 'cpu_usage', 'disk_usage', 'vulnerability_score', 'password_policy_id'], 'Device_Events': ['event_id', 'device_id']} and \n# the user question: Find all events that occurred within the last hour and have a severity of \"information\" and are related to a device that has a CPU usage greater than or equal to 90%.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all events that occurred within the last hour and have a severity of \"information\" and are related to a device that has a CPU usage greater than or equal to 90%.",
        "output": "SELECT Events.event_name FROM Events JOIN Device_Events ON Events.event_id = Device_Events.event_id JOIN Devices ON Device_Events.device_id = Devices.device_id JOIN Device_Specs ON Devices.device_id = Device_Specs.device_id WHERE Events.event_date >= datetime('now', '-1 hour') AND Events.severity = 'information' AND Device_Specs.cpu_usage >= 90;",
        "schema": "cybersecurity",
        "processed_schema_content": {
            "Events": [
                "event_name",
                "event_date",
                "event_id",
                "severity",
                "event_description",
                "device_id",
                "event_time",
                "event_type"
            ],
            "Devices": [
                "manufacturer",
                "device_id",
                "device_type",
                "device_name",
                "screen_size",
                "manufacture_date",
                "battery_capacity",
                "storage_capacity",
                "camera_resolution",
                "processor_speed",
                "ram_capacity",
                "biometric_authentication",
                "ip_rating",
                "screen_resolution",
                "operating_system_version",
                "added_date",
                "ram_size",
                "operating_system",
                "os_version",
                "ip_address",
                "os_id",
                "last_used_date",
                "location_id",
                "serial_number",
                "network_id",
                "last_access_date",
                "is_online",
                "last_patched_date",
                "max_login_attempts",
                "Flag_Status",
                "Last_Update_Time",
                "Last_Scan_Time",
                "Device_Type",
                "Last_Vulnerability_Scan",
                "Last_Patch_Time",
                "Vulnerability_Level",
                "Device_Name",
                "Certificate_Expiry_Date",
                "Device_Status",
                "Last_Checkin_Time",
                "Last_Patch_Update",
                "Last_Security_Update",
                "IsConnected",
                "ipAddress",
                "name",
                "id"
            ],
            "Device_Specs": [
                "screen_size",
                "device_id",
                "battery_life",
                "warranty_expire_date",
                "firmware_version",
                "software_version",
                "cpu_speed",
                "memory_capacity",
                "cpu_manufacturer",
                "operating_system",
                "memory_usage",
                "disk_space_usage",
                "cpu_usage",
                "disk_usage",
                "vulnerability_score",
                "password_policy_id"
            ],
            "Device_Events": [
                "event_id",
                "device_id"
            ]
        }
    },
    {
        "id": 320,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'email', 'registration_date', 'dataset_count', 'role'], 'Projects': ['user_id', 'project_id', 'project_name', 'dataset_count', 'dataset_id', 'creation_year', 'created_at'], 'Analyses': ['method_id', 'project_id', 'analysis_id', 'analysis_name', 'dataset_id', 'confidence_score'], 'DataSets': ['dataset_description', 'dataset_id', 'dataset_name', 'project_id', 'user_id', 'source_id'], 'Variables': ['dataset_id', 'variable_name', 'variable_type', 'variable_id', 'variable_count']} and \n# the user question: Retrieve the usernames of users who have created projects that contain datasets with more than 100 variables and have performed an analysis with a confidence score greater than 0.8:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the usernames of users who have created projects that contain datasets with more than 100 variables and have performed an analysis with a confidence score greater than 0.8:",
        "output": "SELECT Users.username FROM Users JOIN Projects ON Users.user_id = Projects.user_id JOIN DataSets ON Projects.project_id = DataSets.project_id JOIN Variables ON DataSets.dataset_id = Variables.dataset_id JOIN Analyses ON DataSets.dataset_id = Analyses.dataset_id WHERE Variables.variable_count > 100 AND Analyses.confidence_score > 0.8 GROUP BY Users.username;",
        "schema": "data_analytics",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "email",
                "registration_date",
                "dataset_count",
                "role"
            ],
            "Projects": [
                "user_id",
                "project_id",
                "project_name",
                "dataset_count",
                "dataset_id",
                "creation_year",
                "created_at"
            ],
            "Analyses": [
                "method_id",
                "project_id",
                "analysis_id",
                "analysis_name",
                "dataset_id",
                "confidence_score"
            ],
            "DataSets": [
                "dataset_description",
                "dataset_id",
                "dataset_name",
                "project_id",
                "user_id",
                "source_id"
            ],
            "Variables": [
                "dataset_id",
                "variable_name",
                "variable_type",
                "variable_id",
                "variable_count"
            ]
        }
    },
    {
        "id": 321,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Find the projects that have risks with a likelihood of 'High' and retrieve the project name and the total number of associated risks.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Find the projects that have risks with a likelihood of 'High' and retrieve the project name and the total number of associated risks.\"",
        "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS total_risks FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id WHERE Risks.likelihood = 'High' GROUP BY Projects.project_id;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ]
        }
    },
    {
        "id": 322,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customers': ['customer_id', 'first_name', 'last_name', 'country', 'city', 'state', 'address', 'zip', 'email', 'registration_date', 'customer_date_added', 'shipping_address', 'loyalty_status', 'billing_address', 'join_date', 'total_price', 'total_purchase', 'sales_rep_id', 'phone'], 'Orders': ['order_date', 'customer_id', 'order_id', 'payment_status', 'employee_id', 'coupon_id', 'gift_card_id', 'return_date', 'order_status', 'payment_method', 'coupon_code', 'discount_code', 'order_total', 'total_price', 'total'], 'Coupons': ['code', 'coupon_id', 'coupon_code', 'discount_amount', 'discount']} and \n# the user question: Retrieve the names and order dates of all customers who have placed an order with a coupon code, along with the discount amount:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and order dates of all customers who have placed an order with a coupon code, along with the discount amount:",
        "output": "SELECT Customers.first_name, Customers.last_name, Orders.order_date, Coupons.code, Coupons.discount_amount FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Coupons ON Orders.coupon_id = Coupons.coupon_id GROUP BY Customers.customer_id, Orders.order_id",
        "schema": "business",
        "processed_schema_content": {
            "Customers": [
                "customer_id",
                "first_name",
                "last_name",
                "country",
                "city",
                "state",
                "address",
                "zip",
                "email",
                "registration_date",
                "customer_date_added",
                "shipping_address",
                "loyalty_status",
                "billing_address",
                "join_date",
                "total_price",
                "total_purchase",
                "sales_rep_id",
                "phone"
            ],
            "Orders": [
                "order_date",
                "customer_id",
                "order_id",
                "payment_status",
                "employee_id",
                "coupon_id",
                "gift_card_id",
                "return_date",
                "order_status",
                "payment_method",
                "coupon_code",
                "discount_code",
                "order_total",
                "total_price",
                "total"
            ],
            "Coupons": [
                "code",
                "coupon_id",
                "coupon_code",
                "discount_amount",
                "discount"
            ]
        }
    },
    {
        "id": 323,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain containing the string \"sports\" and have spent more than $1 million on advertising in the past month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain containing the string \"sports\" and have spent more than $1 million on advertising in the past month:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 1000000 AND Websites.domain LIKE '%sports%' AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        }
    },
    {
        "id": 327,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'email', 'username', 'johnD'], 'Trips': ['vehicle_id', 'distance', 'user_id', 'end_time', 'start_time', 'end_location', 'duration', 'start_location', 'trip_id', 'end_location_id', 'timestamp', 'fuel_consumption'], 'Bookings': ['vehicle_id', 'user_id', 'trip_id', 'booking_id']} and \n# the user question: Retrieve the usernames and average distance per trip for users who have booked at least two trips,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the usernames and average distance per trip for users who have booked at least two trips",
        "output": "SELECT u.username, AVG(t.distance) AS average_distance_per_trip FROM Users u JOIN Bookings b ON u.user_id = b.user_id JOIN Trips t ON b.trip_id = t.trip_id GROUP BY u.user_id HAVING COUNT(b.trip_id) >= 2;",
        "schema": "smart_transportation",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "email",
                "username",
                "johnD"
            ],
            "Trips": [
                "vehicle_id",
                "distance",
                "user_id",
                "end_time",
                "start_time",
                "end_location",
                "duration",
                "start_location",
                "trip_id",
                "end_location_id",
                "timestamp",
                "fuel_consumption"
            ],
            "Bookings": [
                "vehicle_id",
                "user_id",
                "trip_id",
                "booking_id"
            ]
        }
    },
    {
        "id": 328,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Performances': ['rating', 'comedian_id', 'show_id', 'performance_id', 'special_id', 'venue_id', 'production_id', 'performance_date'], 'Shows': ['year', 'show_id', 'title', 'description', 'location', 'venue_id', 'duration', 'network', 'release_date', 'Sticks', 'date_recorded', 'name', 'duration_minutes', 'recorded_year', 'date'], 'Special_Networks': ['special_id', 'network_id'], 'Networks': ['network_id', 'name'], 'Tags': ['tag_id', 'tag'], 'Jokes': ['setup', 'punchline', 'comedian_id', 'joke_id'], 'Joke_Tags': ['tag_id', 'joke_id']} and \n# the user question: Retrieve the titles and release years of all shows that were released on Showtime and had at least one comedian who has a joke with the tag \"travel\" in the setup and the tag \"adventure\" in the punchline.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the titles and release years of all shows that were released on Showtime and had at least one comedian who has a joke with the tag \"travel\" in the setup and the tag \"adventure\" in the punchline.",
        "output": "SELECT DISTINCT s.title, s.year FROM Shows s JOIN Performances p ON p.show_id = s.show_id JOIN Jokes j ON j.comedian_id = p.comedian_id JOIN Joke_Tags jt ON jt.joke_id = j.joke_id JOIN Tags t ON t.tag_id = jt.tag_id JOIN Special_Networks sn ON sn.special_id = s.show_id JOIN Networks n ON n.network_id = sn.network_id WHERE t.tag = 'travel' OR t.tag = 'adventure' GROUP BY s.title, s.year;",
        "schema": "stand-up_comedy",
        "processed_schema_content": {
            "Performances": [
                "rating",
                "comedian_id",
                "show_id",
                "performance_id",
                "special_id",
                "venue_id",
                "production_id",
                "performance_date"
            ],
            "Shows": [
                "year",
                "show_id",
                "title",
                "description",
                "location",
                "venue_id",
                "duration",
                "network",
                "release_date",
                "Sticks",
                "date_recorded",
                "name",
                "duration_minutes",
                "recorded_year",
                "date"
            ],
            "Special_Networks": [
                "special_id",
                "network_id"
            ],
            "Networks": [
                "network_id",
                "name"
            ],
            "Tags": [
                "tag_id",
                "tag"
            ],
            "Jokes": [
                "setup",
                "punchline",
                "comedian_id",
                "joke_id"
            ],
            "Joke_Tags": [
                "tag_id",
                "joke_id"
            ]
        }
    },
    {
        "id": 329,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'snowboard': ['price', 'model_name', 'waist_width', 'rating', 'id', 'brand', 'gender', 'camber_profile', 'riding_style', 'name', 'brand_id']} and \n# the user question: Display the total number of snowboards that are available in the database and are designed for women.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Display the total number of snowboards that are available in the database and are designed for women.",
        "output": "SELECT COUNT(*) FROM snowboard WHERE gender = 'Women';",
        "schema": "snowboarding",
        "processed_schema_content": {
            "snowboard": [
                "price",
                "model_name",
                "waist_width",
                "rating",
                "id",
                "brand",
                "gender",
                "camber_profile",
                "riding_style",
                "name",
                "brand_id"
            ]
        }
    },
    {
        "id": 330,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Incidents': ['reported_by_user_id', 'location_id', 'created_at', 'incident_id', 'evacuation_status', 'severity_level', 'vehicle_id', 'status', 'reported_time', 'location', 'type', 'start_time', 'assigned_to_vehicle_id', 'incident_date', 'incident_type', 'category_id', 'reporting_agency_id', 'reported_at', 'date_id', 'description', 'date', 'time'], 'Users': ['user_id', 'email', 'username', 'phone_number', 'email_address', 'creation_date', 'current_city_id', 'current_state_id', 'state_id'], 'User_Role_Assignments': ['user_id', 'role_id'], 'User_Roles': ['role_name', 'role_id']} and \n# the user question: Retrieve the names and phone numbers of all users who have not reported any incidents and have a user role assigned to them that is not \"Supervisor\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and phone numbers of all users who have not reported any incidents and have a user role assigned to them that is not \"Supervisor\".",
        "output": "SELECT Users.username, Users.phone_number FROM Users LEFT JOIN Incidents ON Users.user_id = Incidents.reported_by_user_id INNER JOIN User_Role_Assignments ON Users.user_id = User_Role_Assignments.user_id INNER JOIN User_Roles ON User_Role_Assignments.role_id = User_Roles.role_id WHERE Incidents.reported_by_user_id IS NULL AND User_Roles.role_name != 'Supervisor'",
        "schema": "intelligent_public_safety",
        "processed_schema_content": {
            "Incidents": [
                "reported_by_user_id",
                "location_id",
                "created_at",
                "incident_id",
                "evacuation_status",
                "severity_level",
                "vehicle_id",
                "status",
                "reported_time",
                "location",
                "type",
                "start_time",
                "assigned_to_vehicle_id",
                "incident_date",
                "incident_type",
                "category_id",
                "reporting_agency_id",
                "reported_at",
                "date_id",
                "description",
                "date",
                "time"
            ],
            "Users": [
                "user_id",
                "email",
                "username",
                "phone_number",
                "email_address",
                "creation_date",
                "current_city_id",
                "current_state_id",
                "state_id"
            ],
            "User_Role_Assignments": [
                "user_id",
                "role_id"
            ],
            "User_Roles": [
                "role_name",
                "role_id"
            ]
        }
    },
    {
        "id": 331,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Show': ['rating', 'year', 'title', 'show_id', 'genre_id', 'studio_id', 'release_year', 'country_id', 'network_id', 'director_id', 'air_year', 'release_date', 'genre', 'status', 'production_type', 'producer_id', 'start_year', 'end_year'], 'Episode': ['show_id', 'episode_id', 'crew_id', 'director_id', 'writer_id', 'runtime', 'title', 'season_id', 'duration', 'episode_number', 'release_year', 'air_date', 'rating', 'id', 'tv_show_id', 'name'], 'User_Rating': ['show_id', 'user_id', 'episode_id', 'rating', 'country_id', 'genre_id', 'season_id', 'season_number', 'imdb_rating', 'rotten_tomatoes_rating'], 'Season': ['show_id', 'season_id', 'season_number', 'release_date', 'release_channel', 'episode_count', 'end_date', 'start_date', 'year_id']} and \n# the user question: List the TV shows that were first released after 2010 and have a user rating of at least 8.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the TV shows that were first released after 2010 and have a user rating of at least 8.",
        "output": "SELECT DISTINCT Show.title FROM Show JOIN Season ON Show.show_id = Season.show_id JOIN Episode ON Season.season_id = Episode.season_id JOIN User_Rating ON Episode.episode_id = User_Rating.episode_id WHERE ( SELECT MIN(Episode.release_year) FROM Episode WHERE Episode.season_id = Season.season_id ) >= 2010 AND ( SELECT AVG(User_Rating.rating) FROM User_Rating WHERE User_Rating.episode_id = Episode.episode_id ) >= 8",
        "schema": "tv_shows",
        "processed_schema_content": {
            "Show": [
                "rating",
                "year",
                "title",
                "show_id",
                "genre_id",
                "studio_id",
                "release_year",
                "country_id",
                "network_id",
                "director_id",
                "air_year",
                "release_date",
                "genre",
                "status",
                "production_type",
                "producer_id",
                "start_year",
                "end_year"
            ],
            "Episode": [
                "show_id",
                "episode_id",
                "crew_id",
                "director_id",
                "writer_id",
                "runtime",
                "title",
                "season_id",
                "duration",
                "episode_number",
                "release_year",
                "air_date",
                "rating",
                "id",
                "tv_show_id",
                "name"
            ],
            "User_Rating": [
                "show_id",
                "user_id",
                "episode_id",
                "rating",
                "country_id",
                "genre_id",
                "season_id",
                "season_number",
                "imdb_rating",
                "rotten_tomatoes_rating"
            ],
            "Season": [
                "show_id",
                "season_id",
                "season_number",
                "release_date",
                "release_channel",
                "episode_count",
                "end_date",
                "start_date",
                "year_id"
            ]
        }
    },
    {
        "id": 332,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customers': ['name', 'customer_id', 'email', 'address'], 'Orders': ['total_amount', 'customer_id', 'order_date', 'order_id', 'processing_time', 'delivery_date']} and \n# the user question: Retrieve the customers who have not placed any orders in the past six months,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the customers who have not placed any orders in the past six months",
        "output": "SELECT c.name, c.email FROM Customers c WHERE c.customer_id NOT IN ( SELECT DISTINCT o.customer_id FROM Orders o WHERE o.order_date >= DATE('now', '6 months') );",
        "schema": "shipping_and_logistics",
        "processed_schema_content": {
            "Customers": [
                "name",
                "customer_id",
                "email",
                "address"
            ],
            "Orders": [
                "total_amount",
                "customer_id",
                "order_date",
                "order_id",
                "processing_time",
                "delivery_date"
            ]
        }
    },
    {
        "id": 333,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Polymorphism': ['gene_id', 'position', 'reference_sequence', 'alternate_sequence', 'polymorphism_id', 'frequency']} and \n# the user question: Retrieve the names of all genes and their associated polymorphisms that have a frequency between 0.01% and 0.05% and are located on chromosome 44.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all genes and their associated polymorphisms that have a frequency between 0.01% and 0.05% and are located on chromosome 44.",
        "output": "SELECT Gene.gene_name, Polymorphism.polymorphism_id FROM Gene JOIN Polymorphism ON Gene.gene_id = Polymorphism.gene_id WHERE Polymorphism.frequency BETWEEN 0.0001 AND 0.0005 AND Gene.chromosome_id = 44;",
        "schema": "genetics",
        "processed_schema_content": {
            "Gene": [
                "end_position",
                "start_position",
                "chromosome_id",
                "gene_name",
                "gene_id",
                "tss_position",
                "chromosome",
                "entrez_gene_id",
                "hgnc_symbol",
                "chromosome_number",
                "disease_id",
                "associated_disease",
                "accession_number",
                "Name",
                "ID"
            ],
            "Polymorphism": [
                "gene_id",
                "position",
                "reference_sequence",
                "alternate_sequence",
                "polymorphism_id",
                "frequency"
            ]
        }
    },
    {
        "id": 334,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['UserName', 'UserID'], 'Albums': ['ReleaseYear', 'AlbumID', 'ArtistID', 'AlbumTitle', 'ReleaseDate', 'SongID', 'Language', 'LanguageID', 'GenreID', 'AlbumName'], 'Ratings': ['UserID', 'SongID', 'Rating', 'GenreID', 'AlbumID', 'RatingID']} and \n# the user question: \"Retrieve the names of users who have rated songs from all albums and have an average rating above 4.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Retrieve the names of users who have rated songs from all albums and have an average rating above 4.\"",
        "output": "SELECT Users.UserName FROM Users INNER JOIN Ratings ON Users.UserID = Ratings.UserID GROUP BY Users.UserID HAVING COUNT(DISTINCT Ratings.AlbumID) = ( SELECT COUNT(DISTINCT AlbumID) FROM Albums ) AND AVG(Ratings.Rating) > 4;",
        "schema": "music",
        "processed_schema_content": {
            "Users": [
                "UserName",
                "UserID"
            ],
            "Albums": [
                "ReleaseYear",
                "AlbumID",
                "ArtistID",
                "AlbumTitle",
                "ReleaseDate",
                "SongID",
                "Language",
                "LanguageID",
                "GenreID",
                "AlbumName"
            ],
            "Ratings": [
                "UserID",
                "SongID",
                "Rating",
                "GenreID",
                "AlbumID",
                "RatingID"
            ]
        }
    },
    {
        "id": 335,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Orders': ['customer_id', 'order_total', 'order_date', 'order_id', 'delivery_date', 'shipment_id', 'order_total_cost', 'date', 'total_price', 'total_amount', 'shipping_date'], 'Customers': ['customer_id', 'phone_number', 'email', 'customer_name', 'address', 'customer_email', 'customer_phone', 'customer_address', 'email_address', 'phone', 'registration_date', 'country', 'city', 'state', 'name', 'id', 'first_name', 'last_name'], 'Order_Items': ['order_id', 'product_id', 'glassware_item_id', 'quantity', 'unit_price', 'order_item_id', 'price', 'item_cost', 'item_id', 'order_date', 'item_price'], 'Glassware_Items': ['glassware_type_id', 'quantity', 'glassware_item_id', 'product_id', 'glassware_item_name', 'glassware_item_description', 'etching_id', 'price', 'item_name', 'material', 'glassware_item_type_id', 'stock', 'design_id', 'discontinued', 'supplier_id', 'quantity_in_stock', 'unit_price', 'quantity_supplied']} and \n# the user question: Retrieve the list of customers who have placed orders for more than 500 USD in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of customers who have placed orders for more than 500 USD in the last month.",
        "output": "SELECT Customers.customer_name, SUM(Order_Items.quantity * Glassware_Items.unit_price) AS total_spent FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Glassware_Items ON Order_Items.glassware_item_id = Glassware_Items.glassware_item_id WHERE Orders.order_date >= date('now', '-1 month') GROUP BY Customers.customer_id HAVING total_spent > 500;",
        "schema": "glass_etching",
        "processed_schema_content": {
            "Orders": [
                "customer_id",
                "order_total",
                "order_date",
                "order_id",
                "delivery_date",
                "shipment_id",
                "order_total_cost",
                "date",
                "total_price",
                "total_amount",
                "shipping_date"
            ],
            "Customers": [
                "customer_id",
                "phone_number",
                "email",
                "customer_name",
                "address",
                "customer_email",
                "customer_phone",
                "customer_address",
                "email_address",
                "phone",
                "registration_date",
                "country",
                "city",
                "state",
                "name",
                "id",
                "first_name",
                "last_name"
            ],
            "Order_Items": [
                "order_id",
                "product_id",
                "glassware_item_id",
                "quantity",
                "unit_price",
                "order_item_id",
                "price",
                "item_cost",
                "item_id",
                "order_date",
                "item_price"
            ],
            "Glassware_Items": [
                "glassware_type_id",
                "quantity",
                "glassware_item_id",
                "product_id",
                "glassware_item_name",
                "glassware_item_description",
                "etching_id",
                "price",
                "item_name",
                "material",
                "glassware_item_type_id",
                "stock",
                "design_id",
                "discontinued",
                "supplier_id",
                "quantity_in_stock",
                "unit_price",
                "quantity_supplied"
            ]
        }
    },
    {
        "id": 340,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Songs': ['song_title', 'song_id', 'duration', 'album_id', 'artist_id', 'release_date', 'genre_id'], 'Albums': ['album_title', 'artist_id', 'album_id', 'release_date', 'SUM###', 'label_id', 'release_year'], 'Songs_Charts': ['chart_id', 'song_id', 'position', 'artist_id']} and \n# the user question: Retrieve the albums that have at least three songs with chart positions in the top 5 on any chart and have a duration longer than 3 minutes, ordered by the album title:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the albums that have at least three songs with chart positions in the top 5 on any chart and have a duration longer than 3 minutes, ordered by the album title:",
        "output": "SELECT DISTINCT Albums.album_title FROM Albums JOIN Songs ON Albums.album_id = Songs.album_id JOIN Songs_Charts ON Songs.song_id = Songs_Charts.song_id WHERE Songs_Charts.position BETWEEN 1 AND 5 AND Songs.duration > '3:00' GROUP BY Albums.album_id HAVING COUNT(*) >= 3 ORDER BY Albums.album_title;",
        "schema": "country_music",
        "processed_schema_content": {
            "Songs": [
                "song_title",
                "song_id",
                "duration",
                "album_id",
                "artist_id",
                "release_date",
                "genre_id"
            ],
            "Albums": [
                "album_title",
                "artist_id",
                "album_id",
                "release_date",
                "SUM###",
                "label_id",
                "release_year"
            ],
            "Songs_Charts": [
                "chart_id",
                "song_id",
                "position",
                "artist_id"
            ]
        }
    },
    {
        "id": 341,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Clients': ['Client_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'City', 'Email_Address', 'Phone_Number', 'State', 'ClientName', 'ClientID', 'Name', 'ID', 'Status', 'Balance', 'pending_case', 'legal_fees'], 'Cases': ['Case_ID', 'Case_Name', 'Case_Description', 'Client_ID', 'Case_Status', 'Lawyer_ID', 'Last_Updated', 'Date_Opened', 'Date_Closed', 'Status', 'Case_Closed_Date', 'Practice_Area_ID', 'Case_Manager_ID', 'Open_Date', 'Closed', 'Case_End_Date', 'Case_Start_Date', 'Firm_ID', 'Office_ID', 'CaseStatus', 'CaseNumber', 'ClientID', 'CaseTitle', 'CaseTypeID', 'CaseType', 'CourtName', 'ClosedDate', 'Settlement', 'ID', 'HearingDate', 'ClosingDate', 'AppealStatus', 'LawyerID', 'OpeningDate', 'verdict', 'judge_id', 'defendant_state', 'plaintiff_state', 'lawyer_id'], 'Tasks': ['Task_ID', 'Task_Name', 'Task_Description', 'Task_Status', 'Case_ID', 'Due_Date', 'Lawyer_ID', 'Status', 'Completion_Date', 'Practice_Area_ID', 'Paralegal_ID', 'Last_Activity_Date', 'Budgeted_Hours', 'Budget', 'Task_Deadline', 'Hourly_Rate', 'Task_Date', 'Hours_Worked', 'Task_Due_Date', 'Hours_Billed', 'Hours'], 'Practice_Areas': ['Practice_Area_Name', 'Practice_Area_ID', 'Corporate', 'Law']} and \n# the user question: List all the clients who have open cases in both civil law and criminal law:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List all the clients who have open cases in both civil law and criminal law:",
        "output": "SELECT Clients.First_Name, Clients.Last_Name FROM Clients JOIN Cases ON Clients.Client_ID = Cases.Client_ID WHERE Cases.Case_ID IN ( SELECT Cases.Case_ID FROM Cases JOIN Tasks ON Cases.Case_ID = Tasks.Case_ID JOIN Practice_Areas ON Tasks.Practice_Area_ID = Practice_Areas.Practice_Area_ID WHERE Practice_Areas.Practice_Area_Name = 'Civil Law' AND Tasks.Status != 'Closed' ) AND Cases.Case_ID IN ( SELECT Cases.Case_ID FROM Cases JOIN Tasks ON Cases.Case_ID = Tasks.Case_ID JOIN Practice_Areas ON Tasks.Practice_Area_ID = Practice_Areas.Practice_Area_ID WHERE Practice_Areas.Practice_Area_Name = 'Criminal Law' AND Tasks.Status != 'Closed' );",
        "schema": "law",
        "processed_schema_content": {
            "Clients": [
                "Client_ID",
                "First_Name",
                "Last_Name",
                "Email",
                "Phone",
                "Address",
                "City",
                "Email_Address",
                "Phone_Number",
                "State",
                "ClientName",
                "ClientID",
                "Name",
                "ID",
                "Status",
                "Balance",
                "pending_case",
                "legal_fees"
            ],
            "Cases": [
                "Case_ID",
                "Case_Name",
                "Case_Description",
                "Client_ID",
                "Case_Status",
                "Lawyer_ID",
                "Last_Updated",
                "Date_Opened",
                "Date_Closed",
                "Status",
                "Case_Closed_Date",
                "Practice_Area_ID",
                "Case_Manager_ID",
                "Open_Date",
                "Closed",
                "Case_End_Date",
                "Case_Start_Date",
                "Firm_ID",
                "Office_ID",
                "CaseStatus",
                "CaseNumber",
                "ClientID",
                "CaseTitle",
                "CaseTypeID",
                "CaseType",
                "CourtName",
                "ClosedDate",
                "Settlement",
                "ID",
                "HearingDate",
                "ClosingDate",
                "AppealStatus",
                "LawyerID",
                "OpeningDate",
                "verdict",
                "judge_id",
                "defendant_state",
                "plaintiff_state",
                "lawyer_id"
            ],
            "Tasks": [
                "Task_ID",
                "Task_Name",
                "Task_Description",
                "Task_Status",
                "Case_ID",
                "Due_Date",
                "Lawyer_ID",
                "Status",
                "Completion_Date",
                "Practice_Area_ID",
                "Paralegal_ID",
                "Last_Activity_Date",
                "Budgeted_Hours",
                "Budget",
                "Task_Deadline",
                "Hourly_Rate",
                "Task_Date",
                "Hours_Worked",
                "Task_Due_Date",
                "Hours_Billed",
                "Hours"
            ],
            "Practice_Areas": [
                "Practice_Area_Name",
                "Practice_Area_ID",
                "Corporate",
                "Law"
            ]
        }
    },
    {
        "id": 344,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Documentary_Films': ['length', 'rating', 'title', 'film_id', 'release_date', 'director_id', 'runtime', 'production_company_id', 'duration', 'runtime_minutes', 'duration_minutes', 'tagline', 'release_year'], 'Crew_Members': ['crew_name', 'crew_id', 'crew_role', 'birthdate', 'nationality', 'last_name', 'gender', 'fame_level', 'full_name', 'first_name'], 'Film_Crew_Map': ['film_id', 'crew_id', 'position_id'], 'Film_Topics_Map': ['topic_id', 'film_id'], 'Topics': ['topic_id', 'topic_name']} and \n# the user question: Find the names and release dates of all documentary films that have a topic related to technology and were directed by a female director.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and release dates of all documentary films that have a topic related to technology and were directed by a female director.",
        "output": "SELECT DISTINCT Documentary_Films.title, Documentary_Films.release_date FROM Documentary_Films JOIN Film_Topics_Map ON Documentary_Films.film_id = Film_Topics_Map.film_id JOIN Topics ON Film_Topics_Map.topic_id = Topics.topic_id JOIN Film_Crew_Map ON Documentary_Films.film_id = Film_Crew_Map.film_id JOIN Crew_Members ON Film_Crew_Map.crew_id = Crew_Members.crew_id WHERE Topics.topic_name = 'Technology' AND Crew_Members.gender = 'Female' AND Crew_Members.crew_role = 'Director';",
        "schema": "documentary_films",
        "processed_schema_content": {
            "Documentary_Films": [
                "length",
                "rating",
                "title",
                "film_id",
                "release_date",
                "director_id",
                "runtime",
                "production_company_id",
                "duration",
                "runtime_minutes",
                "duration_minutes",
                "tagline",
                "release_year"
            ],
            "Crew_Members": [
                "crew_name",
                "crew_id",
                "crew_role",
                "birthdate",
                "nationality",
                "last_name",
                "gender",
                "fame_level",
                "full_name",
                "first_name"
            ],
            "Film_Crew_Map": [
                "film_id",
                "crew_id",
                "position_id"
            ],
            "Film_Topics_Map": [
                "topic_id",
                "film_id"
            ],
            "Topics": [
                "topic_id",
                "topic_name"
            ]
        }
    },
    {
        "id": 346,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Incidents': ['reported_by_user_id', 'location_id', 'created_at', 'incident_id', 'evacuation_status', 'severity_level', 'vehicle_id', 'status', 'reported_time', 'location', 'type', 'start_time', 'assigned_to_vehicle_id', 'incident_date', 'incident_type', 'category_id', 'reporting_agency_id', 'reported_at', 'date_id', 'description', 'date', 'time'], 'Users': ['user_id', 'email', 'username', 'phone_number', 'email_address', 'creation_date', 'current_city_id', 'current_state_id', 'state_id'], 'Alerts': ['alert_type', 'alert_id', 'agency_id', 'created_at', 'subscribed_by_user_id', 'alert_date', 'incident_id'], 'Locations': ['longitude', 'location_id', 'latitude', 'location_name', 'address', 'city', 'city_id', 'location', 'state_id'], 'Sensor_Readings': ['reading_value', 'sensor_id', 'sensor_type', 'reading', 'sensor'], 'Agencies': ['agency_id', 'agency_name', 'Department', 'Fire', 'address', 'Police', 'agency_location_id', 'location_id', 'phone_number', 'state_id', 'county_id'], 'Sensors': ['sensor_type', 'location_id', 'sensor_id', 'reading_value', 'Humidity', 'threshold_valu', 'Air', 'Quality', 'threshold_value', 'min_threshold_value', 'max_threshold_value', 'sensor_name'], 'Vehicles': ['vehicle_type', 'agency_id', 'status', 'vehicle_plate_number', 'location_id', 'vehicle_id', 'license_plate_number', 'vin', 'fuel_level', 'mileage', 'model', 'make', 'availability', 'assigned_to_agency_id', 'responded_to_incident_id', 'dispatched_time', 'num_vehicles_involved']} and \n# the user question: Retrieve the names and phone numbers of all users who have subscribed to alerts issued by an agency that has at least one vehicle that is currently assigned to an incident that occurred in a location where the air quality index sensor reading value was above the sensor's threshold value.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and phone numbers of all users who have subscribed to alerts issued by an agency that has at least one vehicle that is currently assigned to an incident that occurred in a location where the air quality index sensor reading value was above the sensor's threshold value.",
        "output": "SELECT Users.username, Users.phone_number FROM Users INNER JOIN Alerts ON Users.user_id = Alerts.subscribed_by_user_id INNER JOIN Agencies ON Alerts.agency_id = Agencies.agency_id INNER JOIN Vehicles ON Agencies.agency_id = Vehicles.assigned_to_agency_id INNER JOIN Incidents ON Vehicles.vehicle_id = Incidents.assigned_to_vehicle_id INNER JOIN Locations ON Incidents.location_id = Locations.location_id INNER JOIN Sensors ON Locations.location_id = Sensors.sensor_id INNER JOIN Sensor_Readings AS AQI ON Sensors.sensor_id = AQI.sensor_id AND AQI.sensor_type = 'Air Quality Index' WHERE AQI.reading_value > Sensors.threshold_value GROUP BY Users.username, Users.phone_number",
        "schema": "intelligent_public_safety",
        "processed_schema_content": {
            "Incidents": [
                "reported_by_user_id",
                "location_id",
                "created_at",
                "incident_id",
                "evacuation_status",
                "severity_level",
                "vehicle_id",
                "status",
                "reported_time",
                "location",
                "type",
                "start_time",
                "assigned_to_vehicle_id",
                "incident_date",
                "incident_type",
                "category_id",
                "reporting_agency_id",
                "reported_at",
                "date_id",
                "description",
                "date",
                "time"
            ],
            "Users": [
                "user_id",
                "email",
                "username",
                "phone_number",
                "email_address",
                "creation_date",
                "current_city_id",
                "current_state_id",
                "state_id"
            ],
            "Alerts": [
                "alert_type",
                "alert_id",
                "agency_id",
                "created_at",
                "subscribed_by_user_id",
                "alert_date",
                "incident_id"
            ],
            "Locations": [
                "longitude",
                "location_id",
                "latitude",
                "location_name",
                "address",
                "city",
                "city_id",
                "location",
                "state_id"
            ],
            "Sensor_Readings": [
                "reading_value",
                "sensor_id",
                "sensor_type",
                "reading",
                "sensor"
            ],
            "Agencies": [
                "agency_id",
                "agency_name",
                "Department",
                "Fire",
                "address",
                "Police",
                "agency_location_id",
                "location_id",
                "phone_number",
                "state_id",
                "county_id"
            ],
            "Sensors": [
                "sensor_type",
                "location_id",
                "sensor_id",
                "reading_value",
                "Humidity",
                "threshold_valu",
                "Air",
                "Quality",
                "threshold_value",
                "min_threshold_value",
                "max_threshold_value",
                "sensor_name"
            ],
            "Vehicles": [
                "vehicle_type",
                "agency_id",
                "status",
                "vehicle_plate_number",
                "location_id",
                "vehicle_id",
                "license_plate_number",
                "vin",
                "fuel_level",
                "mileage",
                "model",
                "make",
                "availability",
                "assigned_to_agency_id",
                "responded_to_incident_id",
                "dispatched_time",
                "num_vehicles_involved"
            ]
        }
    },
    {
        "id": 347,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Sites': ['site_id', 'name', 'location', 'date_discovered', 'excavated_by', 'culture_id', 'description'], 'Excavations': ['excavation_id', 'site_id', 'start_date', 'end_date', 'description', 'excavated_by'], 'HumanRemains': ['remains_id', 'excavation_id', 'location', 'age_estimate', 'sex', 'analysis_notes', 'culture_id', 'height', 'lifespan']} and \n# the user question: Retrieve the names and locations of sites where human remains of the same sex were found:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and locations of sites where human remains of the same sex were found:",
        "output": "SELECT Sites.name, Sites.location FROM Sites JOIN Excavations ON Sites.site_id = Excavations.site_id JOIN HumanRemains ON Excavations.excavation_id = HumanRemains.excavation_id GROUP BY Sites.name, Sites.location HAVING COUNT(DISTINCT HumanRemains.sex) = 1;",
        "schema": "anthropology",
        "processed_schema_content": {
            "Sites": [
                "site_id",
                "name",
                "location",
                "date_discovered",
                "excavated_by",
                "culture_id",
                "description"
            ],
            "Excavations": [
                "excavation_id",
                "site_id",
                "start_date",
                "end_date",
                "description",
                "excavated_by"
            ],
            "HumanRemains": [
                "remains_id",
                "excavation_id",
                "location",
                "age_estimate",
                "sex",
                "analysis_notes",
                "culture_id",
                "height",
                "lifespan"
            ]
        }
    },
    {
        "id": 348,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'specials': ['rating', 'release_year', 'name', 'duration', 'id', 'genre', 'release_date', 'title']} and \n# the user question: Retrieve the titles and release years of all specials that were released between 2015 and 2020, inclusive, and have a duration greater than 60 minutes.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the titles and release years of all specials that were released between 2015 and 2020, inclusive, and have a duration greater than 60 minutes.",
        "output": "SELECT title, release_year FROM specials WHERE release_year BETWEEN 2015 AND 2020 AND duration > 60;",
        "schema": "stand-up_comedy",
        "processed_schema_content": {
            "specials": [
                "rating",
                "release_year",
                "name",
                "duration",
                "id",
                "genre",
                "release_date",
                "title"
            ]
        }
    },
    {
        "id": 349,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Show': ['show_name', 'show_id', 'Night', 'Late', 'Talk', 'host_id', 'rating', 'end_time', 'start_time', 'language'], 'Advertisement': ['duration', 'ad_id'], 'Show_Advertisement': ['show_id', 'ad_id']} and \n# the user question: \"Find the total duration of all advertisements aired during the show 'The Morning Show'.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Find the total duration of all advertisements aired during the show 'The Morning Show'.\"",
        "output": "SELECT SUM(Advertisement.duration) AS total_duration FROM Advertisement INNER JOIN Show_Advertisement ON Advertisement.ad_id = Show_Advertisement.ad_id INNER JOIN Show ON Show_Advertisement.show_id = Show.show_id WHERE Show.show_name = 'The Morning Show';",
        "schema": "talk_shows",
        "processed_schema_content": {
            "Show": [
                "show_name",
                "show_id",
                "Night",
                "Late",
                "Talk",
                "host_id",
                "rating",
                "end_time",
                "start_time",
                "language"
            ],
            "Advertisement": [
                "duration",
                "ad_id"
            ],
            "Show_Advertisement": [
                "show_id",
                "ad_id"
            ]
        }
    },
    {
        "id": 0,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Doctors': ['doctor_id', 'first_name', 'last_name', 'specialty', 'medical_degree', 'graduation_date', 'Department', 'Name', 'Address', 'Doctor_ID', 'Phone_Number'], 'Medical_Records': ['doctor_id', 'diagnosis', 'patient_id', 'date_of_visit', 'admission_id', 'medical_record_id', 'treatment_description', 'surgery_id', 'procedure_id', 'nurse_id', 'notes', 'diagnosis_id', 'discharge_date', 'attending_physician_id']} and \n# the user question: Find the doctors who have treated patients with a diagnosis of cancer in the past month and have a specialization in oncology.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the doctors who have treated patients with a diagnosis of cancer in the past month and have a specialization in oncology.",
        "output": "SELECT Doctors.doctor_id, Doctors.first_name, Doctors.last_name, Doctors.specialty, Medical_Records.diagnosis, Medical_Records.date_of_visit FROM Doctors INNER JOIN Medical_Records ON Doctors.doctor_id = Medical_Records.doctor_id WHERE Medical_Records.date_of_visit >= date('now', '-1 month') AND Medical_Records.diagnosis LIKE '%Cancer%' AND Doctors.specialty = 'Oncology';",
        "schema": "nursing",
        "processed_schema_content": {
            "Doctors": [
                "doctor_id",
                "first_name",
                "last_name",
                "specialty",
                "medical_degree",
                "graduation_date",
                "Department",
                "Name",
                "Address",
                "Doctor_ID",
                "Phone_Number"
            ],
            "Medical_Records": [
                "doctor_id",
                "diagnosis",
                "patient_id",
                "date_of_visit",
                "admission_id",
                "medical_record_id",
                "treatment_description",
                "surgery_id",
                "procedure_id",
                "nurse_id",
                "notes",
                "diagnosis_id",
                "discharge_date",
                "attending_physician_id"
            ]
        }
    },
    {
        "id": 1,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Tracks': ['track_id', 'track_title', 'duration', 'album_id', 'track_name', 'genre_id', 'rating', 'artist_id', 'release_id'], 'UserFavorites': ['track_id', 'user_id', 'genre_id', 'favorite_date'], 'TrackRatings': ['track_id', 'rating', 'genre_id']} and \n# the user question: Retrieve the tracks that have been favorited by at least 5 users and have an average rating above 4.5:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the tracks that have been favorited by at least 5 users and have an average rating above 4.5:",
        "output": "SELECT Tracks.track_name, AVG(TrackRatings.rating) AS average_rating FROM Tracks JOIN UserFavorites ON Tracks.track_id = UserFavorites.track_id JOIN TrackRatings ON Tracks.track_id = TrackRatings.track_id GROUP BY Tracks.track_id HAVING COUNT(DISTINCT UserFavorites.user_id) >= 5 AND AVG(TrackRatings.rating) > 4.5;",
        "schema": "electronic_music",
        "processed_schema_content": {
            "Tracks": [
                "track_id",
                "track_title",
                "duration",
                "album_id",
                "track_name",
                "genre_id",
                "rating",
                "artist_id",
                "release_id"
            ],
            "UserFavorites": [
                "track_id",
                "user_id",
                "genre_id",
                "favorite_date"
            ],
            "TrackRatings": [
                "track_id",
                "rating",
                "genre_id"
            ]
        }
    },
    {
        "id": 2,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'books': ['book_id', 'title', 'isbn', 'publisher_id', 'description', 'publish_date', 'publication_date', 'price', 'publisher', 'publication_year', 'language', 'author_id', 'book_title', 'language_id', 'category', 'author', 'year_published', 'num_pages', 'rating'], 'reviews': ['review_id', 'book_id', 'user_id', 'rating', 'review_text', 'review_date', 'author_id', 'user_country', 'genre_id', 'language_id', 'product_id']} and \n# the user question: Find the top 5 books with the highest average rating, sorted by average rating in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the top 5 books with the highest average rating, sorted by average rating in descending order.",
        "output": "SELECT books.title, books.isbn, AVG(reviews.rating) as avg_rating FROM books JOIN reviews ON books.book_id = reviews.book_id GROUP BY books.book_id ORDER BY avg_rating DESC LIMIT 5;",
        "schema": "psychology_books",
        "processed_schema_content": {
            "books": [
                "book_id",
                "title",
                "isbn",
                "publisher_id",
                "description",
                "publish_date",
                "publication_date",
                "price",
                "publisher",
                "publication_year",
                "language",
                "author_id",
                "book_title",
                "language_id",
                "category",
                "author",
                "year_published",
                "num_pages",
                "rating"
            ],
            "reviews": [
                "review_id",
                "book_id",
                "user_id",
                "rating",
                "review_text",
                "review_date",
                "author_id",
                "user_country",
                "genre_id",
                "language_id",
                "product_id"
            ]
        }
    },
    {
        "id": 3,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Client': ['client_id', 'first_name', 'last_name', 'email', 'phone_number', 'date_of_birth', 'gender', 'address', 'age', 'weight', 'partner_id', 'zip_code', 'name', 'startingWeight', 'phone', 'clientId'], 'Meal_Log': ['log_date', 'meal_log_id', 'client_id', 'calories', 'meal_date', 'protein', 'meal_id', 'meal_plan_id']} and \n# the user question: Find the clients who have logged meals with more than 50 grams of protein in a day.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the clients who have logged meals with more than 50 grams of protein in a day.",
        "output": "SELECT DISTINCT Client.first_name, Client.last_name FROM Client JOIN Meal_Log ON Client.client_id = Meal_Log.client_id WHERE Meal_Log.protein > 50 GROUP BY Client.client_id",
        "schema": "personal_training",
        "processed_schema_content": {
            "Client": [
                "client_id",
                "first_name",
                "last_name",
                "email",
                "phone_number",
                "date_of_birth",
                "gender",
                "address",
                "age",
                "weight",
                "partner_id",
                "zip_code",
                "name",
                "startingWeight",
                "phone",
                "clientId"
            ],
            "Meal_Log": [
                "log_date",
                "meal_log_id",
                "client_id",
                "calories",
                "meal_date",
                "protein",
                "meal_id",
                "meal_plan_id"
            ]
        }
    },
    {
        "id": 4,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Organisms': ['organism_id', 'name', 'species', 'trophic_level_id', 'body_length', 'conservation_status_id', 'plant_id', 'nutrient_level', 'nutritional_value', 'nutrient_requirement', 'ecosystem_id', 'body_mass', 'biomass', 'population', 'common_name', 'is_plant', 'is_carnivorous', 'lifespan', 'diet_type']} and \n# the user question: Find the names of all organisms that have a trophic level greater than 3 and a lifespan greater than 10 years.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all organisms that have a trophic level greater than 3 and a lifespan greater than 10 years.",
        "output": "SELECT DISTINCT Organisms.name FROM Organisms WHERE Organisms.trophic_level_id > 3 AND Organisms.lifespan > 10;",
        "schema": "ecology",
        "processed_schema_content": {
            "Organisms": [
                "organism_id",
                "name",
                "species",
                "trophic_level_id",
                "body_length",
                "conservation_status_id",
                "plant_id",
                "nutrient_level",
                "nutritional_value",
                "nutrient_requirement",
                "ecosystem_id",
                "body_mass",
                "biomass",
                "population",
                "common_name",
                "is_plant",
                "is_carnivorous",
                "lifespan",
                "diet_type"
            ]
        }
    },
    {
        "id": 5,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['employee_id', 'first_name', 'last_name', 'email', 'phone_number', 'title', 'department_id', 'job_id', 'salary', 'address_id', 'Email', 'Hire_Date', 'Employee_Name', 'Department_ID'], 'Task': ['task_id', 'description', 'deadline', 'employee_id', 'campaign_id', 'completed', 'priority', 'completion_date', 'completed_date']} and \n# the user question: Retrieve the names and email addresses of all employees who have been assigned at least one task with a priority level of \"urgent\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all employees who have been assigned at least one task with a priority level of \"urgent\":",
        "output": "SELECT DISTINCT Employee.first_name, Employee.last_name, Employee.email FROM Employee INNER JOIN Task ON Employee.employee_id = Task.employee_id WHERE Task.priority = 'urgent';",
        "schema": "public_relations",
        "processed_schema_content": {
            "Employee": [
                "employee_id",
                "first_name",
                "last_name",
                "email",
                "phone_number",
                "title",
                "department_id",
                "job_id",
                "salary",
                "address_id",
                "Email",
                "Hire_Date",
                "Employee_Name",
                "Department_ID"
            ],
            "Task": [
                "task_id",
                "description",
                "deadline",
                "employee_id",
                "campaign_id",
                "completed",
                "priority",
                "completion_date",
                "completed_date"
            ]
        }
    },
    {
        "id": 8,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Patient': ['ID', 'Patient', 'Patient Last Name', 'Patient ID', 'Patient First Name', 'Patient BMI', 'Patient Age', 'Insurance ID', 'Patient Blood Type', 'Patient Primary Language', 'Patient DOB', 'Patient Weight', 'Patient Height', 'Patient Date of Birth', 'Patient Phone Number', 'Blood Type', 'Surgery_ID', 'Patient_Name', 'Patient_Discharge_Date', 'Patient_Admission_Date', 'Patient_ID', 'Patient_Date_of_Birth', 'Patient_Age', 'Blood_Type', 'Name', 'Address', 'Age', 'Gender', 'first_name', 'patient_id', 'last_name', 'PatientID'], 'Surgery': ['Patient', 'Surgery', 'Surgery ID', 'Operation Room ID', 'Surgery Type', 'Surgery Date', 'Patient ID', 'Surgery Cost', 'Body Part ID', 'Admission Date', 'Discharge Date', 'Diagnosis ID', 'Hospital ID', 'Surgery Name', 'Surgery Start Time', 'Surgery End Time', 'Surgery_Date', 'Surgery_Type', 'Surgery_ID', 'Surgeon_ID', 'Hospital_ID', 'Surgery_Cost', 'Patient_ID', 'Surgery_Duration', 'Surgery_Name', 'Medical_Condition_ID', 'Medical_Condition', 'DoctorID', 'PatientID', 'SurgeryDate', 'ID', 'ProcedureID', 'Diagnosis', 'procedure_id', 'room_id', 'surgery_date', 'patient_id', 'surgeon_id', 'Cost', 'Date']} and \n# the user question: Find all the patients who have undergone a surgery with a surgery cost greater than $10,000 and display their first and last name along with the surgery type and surgery cost:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all the patients who have undergone a surgery with a surgery cost greater than $10,000 and display their first and last name along with the surgery type and surgery cost:",
        "output": "SELECT p.`Patient First Name`, p.`Patient Last Name`, s.`Surgery Type`, s.`Surgery Cost` FROM Patient p INNER JOIN Surgery s ON p.`Patient ID` = s.`Patient ID` WHERE s.`Surgery Cost` > 10000;",
        "schema": "surgery",
        "processed_schema_content": {
            "Patient": [
                "ID",
                "Patient",
                "Patient Last Name",
                "Patient ID",
                "Patient First Name",
                "Patient BMI",
                "Patient Age",
                "Insurance ID",
                "Patient Blood Type",
                "Patient Primary Language",
                "Patient DOB",
                "Patient Weight",
                "Patient Height",
                "Patient Date of Birth",
                "Patient Phone Number",
                "Blood Type",
                "Surgery_ID",
                "Patient_Name",
                "Patient_Discharge_Date",
                "Patient_Admission_Date",
                "Patient_ID",
                "Patient_Date_of_Birth",
                "Patient_Age",
                "Blood_Type",
                "Name",
                "Address",
                "Age",
                "Gender",
                "first_name",
                "patient_id",
                "last_name",
                "PatientID"
            ],
            "Surgery": [
                "Patient",
                "Surgery",
                "Surgery ID",
                "Operation Room ID",
                "Surgery Type",
                "Surgery Date",
                "Patient ID",
                "Surgery Cost",
                "Body Part ID",
                "Admission Date",
                "Discharge Date",
                "Diagnosis ID",
                "Hospital ID",
                "Surgery Name",
                "Surgery Start Time",
                "Surgery End Time",
                "Surgery_Date",
                "Surgery_Type",
                "Surgery_ID",
                "Surgeon_ID",
                "Hospital_ID",
                "Surgery_Cost",
                "Patient_ID",
                "Surgery_Duration",
                "Surgery_Name",
                "Medical_Condition_ID",
                "Medical_Condition",
                "DoctorID",
                "PatientID",
                "SurgeryDate",
                "ID",
                "ProcedureID",
                "Diagnosis",
                "procedure_id",
                "room_id",
                "surgery_date",
                "patient_id",
                "surgeon_id",
                "Cost",
                "Date"
            ]
        }
    },
    {
        "id": 9,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Film': ['film_id', 'title', 'director_id', 'duration', 'release_date', 'genre', 'genre_id', 'language_id'], 'Review': ['rating', 'film_id', 'review_id']} and \n# the user question: \"List the film titles and their respective release dates for films with more than 5 reviews.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"List the film titles and their respective release dates for films with more than 5 reviews.\"",
        "output": "SELECT Film.title, Film.release_date FROM Film INNER JOIN Review ON Film.film_id = Review.film_id GROUP BY Film.title, Film.release_date HAVING COUNT(Review.review_id) > 5;",
        "schema": "drama_films",
        "processed_schema_content": {
            "Film": [
                "film_id",
                "title",
                "director_id",
                "duration",
                "release_date",
                "genre",
                "genre_id",
                "language_id"
            ],
            "Review": [
                "rating",
                "film_id",
                "review_id"
            ]
        }
    },
    {
        "id": 10,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Film': ['director', 'release_year', 'film_id', 'title', 'box_office', 'language_id', 'runtime', 'budget', 'genre', 'based_on_true_story', 'film_title', 'film_gross', 'film_release_date', 'film_length', 'film_imdb_rating', 'film_director', 'film_runtime_minutes', 'film_release_year', 'film_worldwide_gross', 'film_budget', 'production_company_id', 'film_box_office_gross', 'film_user_rating', 'film_runtime', 'film_director_gender', 'film_box_office_rank', 'genre_id', 'film_duration', 'film_box_office_collection', 'film_running_time', 'film_country', 'film_rating', 'film_revenue', 'film_box_office', 'film_language', 'film_name', 'studio_id', 'film_production_budget'], 'Award': ['award_id', 'award_name', 'award_type', 'award_organization', 'film_id'], 'Film_Award': ['award_id', 'film_id'], 'Film_Country': ['country_id', 'film_id', 'country_setting'], 'Country': ['country_id', 'country_name', 'country_rank']} and \n# the user question: Find all war films that feature a runtime of over 3 hours and were released in the United States and won at least one Academy Award:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all war films that feature a runtime of over 3 hours and were released in the United States and won at least one Academy Award:",
        "output": "SELECT Film.title, Film.release_year, Film.runtime, Award.award_name FROM Film INNER JOIN Film_Country ON Film.film_id = Film_Country.film_id INNER JOIN Country ON Film_Country.country_id = Country.country_id INNER JOIN Film_Award ON Film.film_id = Film_Award.film_id INNER JOIN Award ON Film_Award.award_id = Award.award_id WHERE Country.country_name = 'United States' AND Film.runtime > 180 AND Award.award_name LIKE '%Academy Award%';",
        "schema": "war_films",
        "processed_schema_content": {
            "Film": [
                "director",
                "release_year",
                "film_id",
                "title",
                "box_office",
                "language_id",
                "runtime",
                "budget",
                "genre",
                "based_on_true_story",
                "film_title",
                "film_gross",
                "film_release_date",
                "film_length",
                "film_imdb_rating",
                "film_director",
                "film_runtime_minutes",
                "film_release_year",
                "film_worldwide_gross",
                "film_budget",
                "production_company_id",
                "film_box_office_gross",
                "film_user_rating",
                "film_runtime",
                "film_director_gender",
                "film_box_office_rank",
                "genre_id",
                "film_duration",
                "film_box_office_collection",
                "film_running_time",
                "film_country",
                "film_rating",
                "film_revenue",
                "film_box_office",
                "film_language",
                "film_name",
                "studio_id",
                "film_production_budget"
            ],
            "Award": [
                "award_id",
                "award_name",
                "award_type",
                "award_organization",
                "film_id"
            ],
            "Film_Award": [
                "award_id",
                "film_id"
            ],
            "Film_Country": [
                "country_id",
                "film_id",
                "country_setting"
            ],
            "Country": [
                "country_id",
                "country_name",
                "country_rank"
            ]
        }
    },
    {
        "id": 12,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'name', 'email', 'password', 'role', 'department_id', 'role_id'], 'Comments': ['comment_id', 'task_id', 'user_id', 'comment', 'date_created', 'comment_text'], 'TaskAssignments': ['task_assignment_id', 'task_id', 'user_id']} and \n# the user question: Example 2: Retrieve the names and emails of users who are assigned to tasks that have no comments,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Example 2: Retrieve the names and emails of users who are assigned to tasks that have no comments",
        "output": "SELECT Users.name, Users.email FROM Users INNER JOIN TaskAssignments ON Users.user_id = TaskAssignments.user_id LEFT JOIN Comments ON TaskAssignments.task_id = Comments.task_id WHERE Comments.comment_id IS NULL;",
        "schema": "project_management",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "name",
                "email",
                "password",
                "role",
                "department_id",
                "role_id"
            ],
            "Comments": [
                "comment_id",
                "task_id",
                "user_id",
                "comment",
                "date_created",
                "comment_text"
            ],
            "TaskAssignments": [
                "task_assignment_id",
                "task_id",
                "user_id"
            ]
        }
    },
    {
        "id": 13,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Director': ['director_id', 'name', 'gender', 'has_won_academy_award', 'director_name', 'birth_year']} and \n# the user question: Retrieve the title of the movie, the name of the director, and the release year for all movies where the director's name contains the word \"Coen\" and the release year is after 1995.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the title of the movie, the name of the director, and the release year for all movies where the director's name contains the word \"Coen\" and the release year is after 1995.",
        "output": "SELECT Movie.title, Director.name, Movie.release_year FROM Movie JOIN Director ON Movie.director_id = Director.director_id WHERE Director.name LIKE '%Coen%' AND Movie.release_year > 1995;",
        "schema": "romance_films",
        "processed_schema_content": {
            "Movie": [
                "movie_id",
                "title",
                "release_year",
                "director_id",
                "runtime",
                "production_company_id",
                "budget",
                "release_date",
                "producer_id",
                "genre"
            ],
            "Director": [
                "director_id",
                "name",
                "gender",
                "has_won_academy_award",
                "director_name",
                "birth_year"
            ]
        }
    },
    {
        "id": 15,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Accounts': ['AccountBalance', 'AccountName', 'AccountType', 'AccountID', 'Category', 'AccountSubtype']} and \n# the user question: Generate a report of all income accounts and their corresponding balances, sorted by account balance in ascending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Generate a report of all income accounts and their corresponding balances, sorted by account balance in ascending order:",
        "output": "SELECT AccountName, AccountBalance FROM Accounts WHERE AccountType = 'Income' ORDER BY AccountBalance ASC;",
        "schema": "accounting",
        "processed_schema_content": {
            "Accounts": [
                "AccountBalance",
                "AccountName",
                "AccountType",
                "AccountID",
                "Category",
                "AccountSubtype"
            ]
        }
    },
    {
        "id": 16,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Designs': ['artist_id', 'design_name', 'design_id', 'design_description', 'Tree', 'designer_id', 'date_created'], 'Artists': ['artist_name', 'artist_email', 'artist_id', 'artist_phone_number', 'email', 'email_address'], 'Glassware_Items': ['glassware_type_id', 'quantity', 'glassware_item_id', 'product_id', 'glassware_item_name', 'glassware_item_description', 'etching_id', 'price', 'item_name', 'material', 'glassware_item_type_id', 'stock', 'design_id', 'discontinued', 'supplier_id', 'quantity_in_stock', 'unit_price', 'quantity_supplied'], 'Etchings': ['etching_id', 'etching_date', 'order_id', 'design_id', 'etching_description', 'etching_name', 'description', 'price', 'etching_image'], 'Etching_Glassware_Items': ['etching_id', 'quantity', 'glassware_item_id', 'etching_glassware_item_id']} and \n# the user question: Retrieve the list of etchings along with the names of the artists who created them and the names of the glassware items associated with each etching, where the glassware item is made of crystal and the artist name contains the word 'green', sorted by etching ID in ascending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of etchings along with the names of the artists who created them and the names of the glassware items associated with each etching, where the glassware item is made of crystal and the artist name contains the word 'green', sorted by etching ID in ascending order.",
        "output": "SELECT Etchings.etching_name, Artists.artist_name, Glassware_Items.item_name FROM Etchings INNER JOIN Designs ON Etchings.design_id = Designs.design_id INNER JOIN Artists ON Designs.artist_id = Artists.artist_id INNER JOIN Etching_Glassware_Items ON Etchings.etching_id = Etching_Glassware_Items.etching_id INNER JOIN Glassware_Items ON Etching_Glassware_Items.glassware_item_id = Glassware_Items.glassware_item_id WHERE Glassware_Items.material = 'crystal' AND Artists.artist_name LIKE '%green%' ORDER BY Etchings.etching_id ASC;",
        "schema": "glass_etching",
        "processed_schema_content": {
            "Designs": [
                "artist_id",
                "design_name",
                "design_id",
                "design_description",
                "Tree",
                "designer_id",
                "date_created"
            ],
            "Artists": [
                "artist_name",
                "artist_email",
                "artist_id",
                "artist_phone_number",
                "email",
                "email_address"
            ],
            "Glassware_Items": [
                "glassware_type_id",
                "quantity",
                "glassware_item_id",
                "product_id",
                "glassware_item_name",
                "glassware_item_description",
                "etching_id",
                "price",
                "item_name",
                "material",
                "glassware_item_type_id",
                "stock",
                "design_id",
                "discontinued",
                "supplier_id",
                "quantity_in_stock",
                "unit_price",
                "quantity_supplied"
            ],
            "Etchings": [
                "etching_id",
                "etching_date",
                "order_id",
                "design_id",
                "etching_description",
                "etching_name",
                "description",
                "price",
                "etching_image"
            ],
            "Etching_Glassware_Items": [
                "etching_id",
                "quantity",
                "glassware_item_id",
                "etching_glassware_item_id"
            ]
        }
    },
    {
        "id": 21,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Patients': ['patient_id', 'patient_name', 'age', 'city_id', 'admission_date', 'discharge_date', 'hospital_id', 'disease_id'], 'Diseases': ['disease_id', 'disease_name', 'description', 'num_symptoms', 'symptom_count'], 'Patient_Disease': ['patient_disease_id', 'patient_id', 'disease_id', 'symptom_id', 'doctor_id', 'hospital_id'], 'Adverse_Reactions': ['reaction_id', 'patient_id', 'vaccine_id', 'reaction_description', 'patient_disease_id', 'doctor_id']} and \n# the user question: Find the average age of patients who have been diagnosed with a specific disease (e.g., Depression) and have experienced adverse reactions:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average age of patients who have been diagnosed with a specific disease (e.g., Depression) and have experienced adverse reactions:",
        "output": "SELECT AVG(p.age) AS average_age FROM Patients AS p JOIN Patient_Disease AS pd ON p.patient_id = pd.patient_id JOIN Diseases AS d ON pd.disease_id = d.disease_id JOIN Adverse_Reactions AS ar ON p.patient_id = ar.patient_id WHERE d.disease_name = 'Depression';",
        "schema": "epidemiology",
        "processed_schema_content": {
            "Patients": [
                "patient_id",
                "patient_name",
                "age",
                "city_id",
                "admission_date",
                "discharge_date",
                "hospital_id",
                "disease_id"
            ],
            "Diseases": [
                "disease_id",
                "disease_name",
                "description",
                "num_symptoms",
                "symptom_count"
            ],
            "Patient_Disease": [
                "patient_disease_id",
                "patient_id",
                "disease_id",
                "symptom_id",
                "doctor_id",
                "hospital_id"
            ],
            "Adverse_Reactions": [
                "reaction_id",
                "patient_id",
                "vaccine_id",
                "reaction_description",
                "patient_disease_id",
                "doctor_id"
            ]
        }
    },
    {
        "id": 22,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Authors': ['AuthorID', 'Name'], 'Books': ['AuthorID', 'BookID', 'Title', 'PublicationYear'], 'Reviews': ['BookID', 'Rating', 'ReviewID', 'UserID', 'RecipeID', 'AuthorID'], 'Users': ['UserID', 'Username'], 'Favorites': ['UserID', 'BookID', 'RecipeID', 'Rating'], 'BookAuthors': ['BookID', 'AuthorID'], 'Recipes': ['RecipeID'], 'RecipeIngredients': ['RecipeID', 'IngredientID'], 'Ingredients': ['Name', 'IngredientID']} and \n# the user question: Retrieve the usernames of users who have reviewed books written by \"Jamie Oliver\" and have also favorited recipes containing \"garlic\" as an ingredient:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the usernames of users who have reviewed books written by \"Jamie Oliver\" and have also favorited recipes containing \"garlic\" as an ingredient:",
        "output": "SELECT DISTINCT Users.Username FROM Users JOIN Reviews ON Users.UserID = Reviews.UserID JOIN Books ON Reviews.BookID = Books.BookID JOIN BookAuthors ON Books.BookID = BookAuthors.BookID JOIN Authors ON BookAuthors.AuthorID = Authors.AuthorID JOIN Favorites ON Users.UserID = Favorites.UserID JOIN Recipes ON Favorites.RecipeID = Recipes.RecipeID JOIN RecipeIngredients ON Recipes.RecipeID = RecipeIngredients.RecipeID JOIN Ingredients ON RecipeIngredients.IngredientID = Ingredients.IngredientID WHERE Authors.Name = 'Jamie Oliver' AND Ingredients.Name LIKE '%garlic%';",
        "schema": "food_and_drink_books",
        "processed_schema_content": {
            "Authors": [
                "AuthorID",
                "Name"
            ],
            "Books": [
                "AuthorID",
                "BookID",
                "Title",
                "PublicationYear"
            ],
            "Reviews": [
                "BookID",
                "Rating",
                "ReviewID",
                "UserID",
                "RecipeID",
                "AuthorID"
            ],
            "Users": [
                "UserID",
                "Username"
            ],
            "Favorites": [
                "UserID",
                "BookID",
                "RecipeID",
                "Rating"
            ],
            "BookAuthors": [
                "BookID",
                "AuthorID"
            ],
            "Recipes": [
                "RecipeID"
            ],
            "RecipeIngredients": [
                "RecipeID",
                "IngredientID"
            ],
            "Ingredients": [
                "Name",
                "IngredientID"
            ]
        }
    },
    {
        "id": 23,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'name', 'description', 'start_date', 'end_date', 'status', 'org_id', 'min_donation', 'min_rating', 'location_id', 'funding_goal', 'total_funding_needed'], 'Donations': ['donation_id', 'user_id', 'project_id', 'amount', 'date', 'organization_id'], 'Volunteers': ['volunteer_id', 'user_id', 'project_id', 'start_date', 'end_date', 'date', 'hours', 'email', 'last_name', 'phone', 'first_name', 'role'], 'Causes': ['cause_id', 'name', 'description', 'Energy', 'Renewable', 'Clean', 'Water', 'Conservation', 'Ocean', 'Waste', 'Reduction', 'Buildings', 'Green', 'Materials', 'Sustainable', 'Climate', 'Agriculture', 'Transportation', 'Tourism', 'Building', 'Zero', 'Jobs', 'Reforestation', 'Plastic', 'Biodiversity', 'Food', 'Eco', 'Systems', 'Environmental', 'Education', 'Justice'], 'Projects_Causes': ['project_id', 'cause_id']} and \n# the user question: Retrieve the name and total number of volunteers for all projects associated with the \"Sustainable Transport\" cause that have a minimum donation amount of $20 and have received at least one donation, sorted by total number of volunteers in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total number of volunteers for all projects associated with the \"Sustainable Transport\" cause that have a minimum donation amount of $20 and have received at least one donation, sorted by total number of volunteers in descending order:",
        "output": "SELECT Projects.name, COUNT(DISTINCT Volunteers.user_id) AS total_volunteers FROM Projects INNER JOIN Projects_Causes ON Projects.project_id = Projects_Causes.project_id INNER JOIN Causes ON Projects_Causes.cause_id = Causes.cause_id AND Causes.name = 'Sustainable Transport' INNER JOIN Donations ON Projects.project_id = Donations.project_id AND Donations.amount >= 20 INNER JOIN Volunteers ON Projects.project_id = Volunteers.project_id GROUP BY Projects.name HAVING COUNT(DISTINCT Donations.user_id) >= 1 ORDER BY total_volunteers DESC;",
        "schema": "sustainability",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "name",
                "description",
                "start_date",
                "end_date",
                "status",
                "org_id",
                "min_donation",
                "min_rating",
                "location_id",
                "funding_goal",
                "total_funding_needed"
            ],
            "Donations": [
                "donation_id",
                "user_id",
                "project_id",
                "amount",
                "date",
                "organization_id"
            ],
            "Volunteers": [
                "volunteer_id",
                "user_id",
                "project_id",
                "start_date",
                "end_date",
                "date",
                "hours",
                "email",
                "last_name",
                "phone",
                "first_name",
                "role"
            ],
            "Causes": [
                "cause_id",
                "name",
                "description",
                "Energy",
                "Renewable",
                "Clean",
                "Water",
                "Conservation",
                "Ocean",
                "Waste",
                "Reduction",
                "Buildings",
                "Green",
                "Materials",
                "Sustainable",
                "Climate",
                "Agriculture",
                "Transportation",
                "Tourism",
                "Building",
                "Zero",
                "Jobs",
                "Reforestation",
                "Plastic",
                "Biodiversity",
                "Food",
                "Eco",
                "Systems",
                "Environmental",
                "Education",
                "Justice"
            ],
            "Projects_Causes": [
                "project_id",
                "cause_id"
            ]
        }
    },
    {
        "id": 24,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Patients': ['medical_history', 'patient_id', 'first_name', 'last_name', 'age_group', 'gender', 'Age', 'Contact_Info', 'Name', 'Diagnosis', 'Discharge_Date', 'Admission_Date', 'Address', 'Family_History', 'Patient_ID', 'Doctor_ID', 'Doctor_I', 'AdmissionDate', 'Therapy', 'date_of_birth', 'name'], 'Admissions': ['date_discharged', 'room_id', 'patient_id', 'admission_id', 'date_admitted', 'nurse_id', 'medical_record_id', 'admission_date', 'discharge_date', 'ward_id', 'num_medications', 'Unit_Type', 'Admission_Date', 'Diagnosis', 'Discharge_Date', 'Patient_ID']} and \n# the user question: Find the patients who have been admitted to the hospital for more than 7 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the patients who have been admitted to the hospital for more than 7 days.",
        "output": "SELECT DISTINCT Patients.patient_id, Patients.first_name, Patients.last_name, Admissions.date_admitted, Admissions.date_discharged FROM Patients INNER JOIN Admissions ON Patients.patient_id = Admissions.patient_id WHERE Admissions.date_discharged > date('now', '-7 days') OR Admissions.date_discharged IS NULL;",
        "schema": "nursing",
        "processed_schema_content": {
            "Patients": [
                "medical_history",
                "patient_id",
                "first_name",
                "last_name",
                "age_group",
                "gender",
                "Age",
                "Contact_Info",
                "Name",
                "Diagnosis",
                "Discharge_Date",
                "Admission_Date",
                "Address",
                "Family_History",
                "Patient_ID",
                "Doctor_ID",
                "Doctor_I",
                "AdmissionDate",
                "Therapy",
                "date_of_birth",
                "name"
            ],
            "Admissions": [
                "date_discharged",
                "room_id",
                "patient_id",
                "admission_id",
                "date_admitted",
                "nurse_id",
                "medical_record_id",
                "admission_date",
                "discharge_date",
                "ward_id",
                "num_medications",
                "Unit_Type",
                "Admission_Date",
                "Diagnosis",
                "Discharge_Date",
                "Patient_ID"
            ]
        }
    },
    {
        "id": 25,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Volume': ['series_id', 'id', 'title', 'publisher_id', 'issue_count', 'volume_id', 'publication_date', 'publication_year', 'release_date', 'price', 'format'], 'Series': ['publisher_id', 'title', 'id', 'universe', 'start_date', 'main_protagonist_id', 'rating'], 'Review': ['rating', 'issue_id', 'id', 'user_id'], 'User': ['username', 'id'], 'User_Review': ['user_id', 'review_id', 'id']} and \n# the user question: Find the names of all users who have written reviews for issues in the 'Watchmen' series and have also given a rating of 4 or higher to issues in the 'V for Vendetta' series.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all users who have written reviews for issues in the 'Watchmen' series and have also given a rating of 4 or higher to issues in the 'V for Vendetta' series.",
        "output": "SELECT DISTINCT User.username FROM User JOIN User_Review ur1 ON User.id = ur1.user_id JOIN Review r1 ON ur1.review_id = r1.id JOIN Issue i1 ON r1.issue_id = i1.id JOIN Volume v1 ON i1.volume_id = v1.id JOIN Series s1 ON v1.series_id = s1.id AND s1.title = 'Watchmen' WHERE User.id IN ( SELECT DISTINCT User.id FROM User JOIN User_Review ur2 ON User.id = ur2.user_id JOIN Review r2 ON ur2.review_id = r2.id JOIN Issue i2 ON r2.issue_id = i2.id JOIN Volume v2 ON i2.volume_id = v2.id JOIN Series s2 ON v2.series_id = s2.id AND s2.title = 'V for Vendetta' WHERE r2.rating >= 4 );",
        "schema": "graphic_novels",
        "processed_schema_content": {
            "Issue": [
                "volume_id",
                "id",
                "title",
                "number",
                "release_date",
                "published_year",
                "publication_date",
                "series_id",
                "publication_year",
                "page_count",
                "sales",
                "has_variant_cover",
                "cover_price",
                "cover_date",
                "cover_art_id",
                "variant_cover"
            ],
            "Volume": [
                "series_id",
                "id",
                "title",
                "publisher_id",
                "issue_count",
                "volume_id",
                "publication_date",
                "publication_year",
                "release_date",
                "price",
                "format"
            ],
            "Series": [
                "publisher_id",
                "title",
                "id",
                "universe",
                "start_date",
                "main_protagonist_id",
                "rating"
            ],
            "Review": [
                "rating",
                "issue_id",
                "id",
                "user_id"
            ],
            "User": [
                "username",
                "id"
            ],
            "User_Review": [
                "user_id",
                "review_id",
                "id"
            ]
        }
    },
    {
        "id": 26,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer']} and \n# the user question: Find the name of the publisher that has released the most games in the database.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name of the publisher that has released the most games in the database.",
        "output": "SELECT game_publisher FROM Games GROUP BY game_publisher ORDER BY COUNT(*) DESC LIMIT 1;",
        "schema": "game_design",
        "processed_schema_content": {
            "Games": [
                "game_id",
                "game_title",
                "game_publisher",
                "game_release_date",
                "game_developer"
            ]
        }
    },
    {
        "id": 27,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['name', 'product_id', 'price', 'manufacturer_id', 'release_date', 'category_id', 'avg_price', 'stock_quantity'], 'Manufacturers': ['manufacturer_id', 'name']} and \n# the user question: Find the total number of products in each manufacturer's portfolio:    \"Show me the total number of products for each manufacturer.\"   :,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total number of products in each manufacturer's portfolio:    \"Show me the total number of products for each manufacturer.\"   :",
        "output": "SELECT m.name AS manufacturer, COUNT(p.product_id) AS product_count FROM Manufacturers m LEFT JOIN Products p ON m.manufacturer_id = p.manufacturer_id GROUP BY m.name;",
        "schema": "computer_hardware",
        "processed_schema_content": {
            "Products": [
                "name",
                "product_id",
                "price",
                "manufacturer_id",
                "release_date",
                "category_id",
                "avg_price",
                "stock_quantity"
            ],
            "Manufacturers": [
                "manufacturer_id",
                "name"
            ]
        }
    },
    {
        "id": 29,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Injury': ['patient_id', 'injury_id', 'injury_type', 'body_part', 'injury_date', 'doctor_id', 'illness_id', 'diagnosis_id', 'is_recurring', 'requires_surgery', 'is_chronic', 'injury_body_part', 'severity', 'Patient_ID', 'Injury_Type', 'Status', 'Doctor_ID', 'recovery_status', 'player_name', 'Athlete_ID', 'Date', 'Type', 'Physician_ID', 'athlete_id', 'type', 'date', 'id', 'game_id', 'description', 'hospital_visit'], 'Diagnosis': ['diagnosis_type', 'doctor_id', 'diagnosis_id', 'diagnosis_date', 'illness_id', 'injury_id', 'patient_id', 'injury_body_part', 'diagnosis_name'], 'Surgery': ['injury_id', 'doctor_id', 'recovery_time', 'surgery_date', 'surgery_type', 'surgery_id', 'successful', 'patient_id', 'diagnosis_id', 'cost', 'surgery_name', 'Surgery_Date', 'Surgery_Type', 'Patient_ID', 'Hospital_ID', 'Surgeon_ID', 'Recovery_Time', 'Admission_Status', 'athlete_id', 'surgeon_id']} and \n# the user question: Find the number of patients who have undergone surgery for each injury type:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of patients who have undergone surgery for each injury type:",
        "output": "SELECT Injury.injury_type, COUNT(DISTINCT Surgery.patient_id) AS num_patients FROM Injury JOIN Diagnosis ON Diagnosis.injury_id = Injury.injury_id JOIN Surgery ON Surgery.diagnosis_id = Diagnosis.diagnosis_id GROUP BY Injury.injury_id;",
        "schema": "sports_medicine",
        "processed_schema_content": {
            "Injury": [
                "patient_id",
                "injury_id",
                "injury_type",
                "body_part",
                "injury_date",
                "doctor_id",
                "illness_id",
                "diagnosis_id",
                "is_recurring",
                "requires_surgery",
                "is_chronic",
                "injury_body_part",
                "severity",
                "Patient_ID",
                "Injury_Type",
                "Status",
                "Doctor_ID",
                "recovery_status",
                "player_name",
                "Athlete_ID",
                "Date",
                "Type",
                "Physician_ID",
                "athlete_id",
                "type",
                "date",
                "id",
                "game_id",
                "description",
                "hospital_visit"
            ],
            "Diagnosis": [
                "diagnosis_type",
                "doctor_id",
                "diagnosis_id",
                "diagnosis_date",
                "illness_id",
                "injury_id",
                "patient_id",
                "injury_body_part",
                "diagnosis_name"
            ],
            "Surgery": [
                "injury_id",
                "doctor_id",
                "recovery_time",
                "surgery_date",
                "surgery_type",
                "surgery_id",
                "successful",
                "patient_id",
                "diagnosis_id",
                "cost",
                "surgery_name",
                "Surgery_Date",
                "Surgery_Type",
                "Patient_ID",
                "Hospital_ID",
                "Surgeon_ID",
                "Recovery_Time",
                "Admission_Status",
                "athlete_id",
                "surgeon_id"
            ]
        }
    },
    {
        "id": 30,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Sculptures': ['width', 'depth', 'material', 'height', 'creation_date', 'sculpture_name', 'sculpture_id', 'artist_id', 'collection_id', 'material_id', 'rating'], 'Reviews': ['sculpture_id', 'rating', 'review_id', 'user_id'], 'Sculpture_Awards': ['award_id', 'sculpture_id'], 'Awards': ['award_id', 'award_name', 'year', 'category_id'], 'Categories': ['category_name', 'category_id']} and \n# the user question: Find the names of sculptures that have won awards in a specific category (e.g., \"Pop Art Sculpture\") and have a rating above 4.0:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of sculptures that have won awards in a specific category (e.g., \"Pop Art Sculpture\") and have a rating above 4.0:",
        "output": "SELECT Sculptures.sculpture_name FROM Sculptures JOIN Sculpture_Awards ON Sculptures.sculpture_id = Sculpture_Awards.sculpture_id JOIN Awards ON Sculpture_Awards.award_id = Awards.award_id JOIN Categories ON Awards.category_id = Categories.category_id JOIN Reviews ON Sculptures.sculpture_id = Reviews.sculpture_id WHERE Categories.category_name = 'Pop Art Sculpture' AND Reviews.rating > 4.0;",
        "schema": "sculpting",
        "processed_schema_content": {
            "Sculptures": [
                "width",
                "depth",
                "material",
                "height",
                "creation_date",
                "sculpture_name",
                "sculpture_id",
                "artist_id",
                "collection_id",
                "material_id",
                "rating"
            ],
            "Reviews": [
                "sculpture_id",
                "rating",
                "review_id",
                "user_id"
            ],
            "Sculpture_Awards": [
                "award_id",
                "sculpture_id"
            ],
            "Awards": [
                "award_id",
                "award_name",
                "year",
                "category_id"
            ],
            "Categories": [
                "category_name",
                "category_id"
            ]
        }
    },
    {
        "id": 31,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'transactions': ['timestamp', 'user_id', 'amount', 'specific_user_id', 'new_hash_value', 'hash', 'transaction_id', 'specific_transaction_id', 'value', 'receiver_address', 'sender_address']} and \n# the user question: Find all the users who made transactions in the last 24 hours.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all the users who made transactions in the last 24 hours.",
        "output": "SELECT DISTINCT t.user_id FROM transactions t WHERE t.timestamp >= datetime('now', '-1 day')",
        "schema": "blockchain_technology",
        "processed_schema_content": {
            "transactions": [
                "timestamp",
                "user_id",
                "amount",
                "specific_user_id",
                "new_hash_value",
                "hash",
                "transaction_id",
                "specific_transaction_id",
                "value",
                "receiver_address",
                "sender_address"
            ]
        }
    },
    {
        "id": 32,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Songs': ['song_title', 'song_id', 'duration', 'album_id', 'artist_id', 'release_date', 'genre_id'], 'Artists': ['artist_name', 'artist_id', 'country_id', 'birth_date'], 'Awards': ['year', 'award_name', 'artist_id', 'award_id', 'song_id', 'artist1_id', 'artist2_id', 'genre_id', 'category', 'award_date']} and \n# the user question: Retrieve the artists who have won awards in multiple categories and have songs with a duration longer than 4 minutes, ordered by the artist name:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the artists who have won awards in multiple categories and have songs with a duration longer than 4 minutes, ordered by the artist name:",
        "output": "SELECT DISTINCT Artists.artist_name FROM Artists JOIN Awards ON Artists.artist_id = Awards.artist_id JOIN Songs ON Artists.artist_id = Songs.artist_id WHERE (SELECT COUNT(DISTINCT category) FROM Awards WHERE artist_id = Artists.artist_id) > 1 AND Songs.duration > '4:00' ORDER BY Artists.artist_name;",
        "schema": "country_music",
        "processed_schema_content": {
            "Songs": [
                "song_title",
                "song_id",
                "duration",
                "album_id",
                "artist_id",
                "release_date",
                "genre_id"
            ],
            "Artists": [
                "artist_name",
                "artist_id",
                "country_id",
                "birth_date"
            ],
            "Awards": [
                "year",
                "award_name",
                "artist_id",
                "award_id",
                "song_id",
                "artist1_id",
                "artist2_id",
                "genre_id",
                "category",
                "award_date"
            ]
        }
    },
    {
        "id": 34,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'customers': ['customer_id', 'customer_address', 'customer_name', 'email', 'state', 'first_name', 'last_name', 'name', 'id', 'contact_name', 'country', 'address', 'city'], 'orders': ['customer_id', 'order_id', 'order_date', 'payment_status', 'total_amount', 'delivery_status', 'salesperson_id', 'shipping_state', 'employee_id', 'shipped_date', 'product_id', 'status']} and \n# the user question: Retrieve the names of all customers who have not made any orders in the last 6 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all customers who have not made any orders in the last 6 months.",
        "output": "SELECT c.customer_name FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date < DATE('now', '-6 month') OR o.order_date IS NULL;",
        "schema": "glass_etching",
        "processed_schema_content": {
            "customers": [
                "customer_id",
                "customer_address",
                "customer_name",
                "email",
                "state",
                "first_name",
                "last_name",
                "name",
                "id",
                "contact_name",
                "country",
                "address",
                "city"
            ],
            "orders": [
                "customer_id",
                "order_id",
                "order_date",
                "payment_status",
                "total_amount",
                "delivery_status",
                "salesperson_id",
                "shipping_state",
                "employee_id",
                "shipped_date",
                "product_id",
                "status"
            ]
        }
    },
    {
        "id": 37,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Recipes': ['cooking_time', 'recipe_id', 'title', 'category_id', 'preparation_time', 'difficulty_level_id', 'creation_date', 'cuisine_type_id'], 'Favorites': ['favorite_id', 'user_id', 'recipe_id', 'timestamp'], 'Reviews': ['recipe_id', 'review_id', 'user_id', 'rating']} and \n# the user question: Text Query: \"Get the recipes that have been favorited by at least two different users who have also reviewed the recipe with a rating of 5.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Get the recipes that have been favorited by at least two different users who have also reviewed the recipe with a rating of 5.\"",
        "output": "SELECT r.recipe_id, r.title FROM Recipes r JOIN Favorites f ON r.recipe_id = f.recipe_id JOIN Reviews rev ON r.recipe_id = rev.recipe_id WHERE rev.rating = 5 GROUP BY r.recipe_id, r.title HAVING COUNT(DISTINCT f.user_id) >= 2;",
        "schema": "cooking",
        "processed_schema_content": {
            "Recipes": [
                "cooking_time",
                "recipe_id",
                "title",
                "category_id",
                "preparation_time",
                "difficulty_level_id",
                "creation_date",
                "cuisine_type_id"
            ],
            "Favorites": [
                "favorite_id",
                "user_id",
                "recipe_id",
                "timestamp"
            ],
            "Reviews": [
                "recipe_id",
                "review_id",
                "user_id",
                "rating"
            ]
        }
    },
    {
        "id": 39,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'screens': ['project_id', 'screen_id', 'name', 'created_at', 'updated_at', 'description', 'priority', 'last_updated_by', 'last_modified', 'owner_id'], 'tasks': ['created_at', 'project_id', 'task_id', 'user_id', 'due_date', 'completed', 'started_at', 'priority', 'completion_date', 'completed_date', 'start_date', 'created_date', 'creator_id', 'assignee_id', 'completed_at', 'name', 'tags', 'assigner_id', 'assigned_by_id', 'category'], 'task_screens': ['screen_id', 'task_id', 'user_id']} and \n# the user question: Retrieve the names and descriptions of all screens that are associated with tasks that are currently in progress, along with the number of such tasks assigned to each screen, sorted by the number of tasks in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and descriptions of all screens that are associated with tasks that are currently in progress, along with the number of such tasks assigned to each screen, sorted by the number of tasks in descending order:",
        "output": "SELECT s.name, s.description, COUNT(ts.task_id) as in_progress_tasks FROM screens s JOIN task_screens ts ON s.screen_id = ts.screen_id AND ts.task_id IN ( SELECT task_id FROM tasks WHERE completed = 0 ) GROUP BY s.screen_id ORDER BY in_progress_tasks DESC;",
        "schema": "ui_ux_design",
        "processed_schema_content": {
            "screens": [
                "project_id",
                "screen_id",
                "name",
                "created_at",
                "updated_at",
                "description",
                "priority",
                "last_updated_by",
                "last_modified",
                "owner_id"
            ],
            "tasks": [
                "created_at",
                "project_id",
                "task_id",
                "user_id",
                "due_date",
                "completed",
                "started_at",
                "priority",
                "completion_date",
                "completed_date",
                "start_date",
                "created_date",
                "creator_id",
                "assignee_id",
                "completed_at",
                "name",
                "tags",
                "assigner_id",
                "assigned_by_id",
                "category"
            ],
            "task_screens": [
                "screen_id",
                "task_id",
                "user_id"
            ]
        }
    },
    {
        "id": 40,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Film': ['film_id', 'title', 'director_id', 'duration', 'release_date', 'genre', 'genre_id', 'language_id'], 'Review': ['rating', 'film_id', 'review_id']} and \n# the user question: \"List the film titles and the respective number of reviews for films released in the last two years, sorted by review count in descending order.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"List the film titles and the respective number of reviews for films released in the last two years, sorted by review count in descending order.\"",
        "output": "SELECT Film.title, COUNT(Review.review_id) AS review_count FROM Film LEFT JOIN Review ON Film.film_id = Review.film_id WHERE Film.release_date >= DATE('now', '-2 years') GROUP BY Film.film_id ORDER BY review_count DESC;",
        "schema": "drama_films",
        "processed_schema_content": {
            "Film": [
                "film_id",
                "title",
                "director_id",
                "duration",
                "release_date",
                "genre",
                "genre_id",
                "language_id"
            ],
            "Review": [
                "rating",
                "film_id",
                "review_id"
            ]
        }
    },
    {
        "id": 41,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'UserProfiles': ['profile_pic', 'user_id', 'full_name'], 'Likes': ['user_id', 'project_id', 'component_id', 'like_id'], 'Comments': ['component_id', 'comment_id', 'user_id', 'project_id', 'created_at']} and \n# the user question: \"Find the users who have not liked or commented on any project.\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Find the users who have not liked or commented on any project.\":",
        "output": "SELECT UserProfiles.full_name FROM UserProfiles LEFT JOIN Likes ON UserProfiles.user_id = Likes.user_id LEFT JOIN Comments ON UserProfiles.user_id = Comments.user_id WHERE Likes.like_id IS NULL AND Comments.comment_id IS NULL;",
        "schema": "mobile_app_design",
        "processed_schema_content": {
            "UserProfiles": [
                "profile_pic",
                "user_id",
                "full_name"
            ],
            "Likes": [
                "user_id",
                "project_id",
                "component_id",
                "like_id"
            ],
            "Comments": [
                "component_id",
                "comment_id",
                "user_id",
                "project_id",
                "created_at"
            ]
        }
    },
    {
        "id": 42,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Documentary_Films': ['length', 'rating', 'title', 'film_id', 'release_date', 'director_id', 'runtime', 'production_company_id', 'duration', 'runtime_minutes', 'duration_minutes', 'tagline', 'release_year'], 'Crew_Members': ['crew_name', 'crew_id', 'crew_role', 'birthdate', 'nationality', 'last_name', 'gender', 'fame_level', 'full_name', 'first_name'], 'Film_Crew_Map': ['film_id', 'crew_id', 'position_id'], 'Film_Topics_Map': ['topic_id', 'film_id'], 'Topics': ['topic_id', 'topic_name']} and \n# the user question: Find the names and release dates of all documentary films that have a topic related to music and a crew member with a role of \"Producer\" who was born in Canada.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and release dates of all documentary films that have a topic related to music and a crew member with a role of \"Producer\" who was born in Canada.",
        "output": "SELECT DISTINCT Documentary_Films.title, Documentary_Films.release_date FROM Documentary_Films JOIN Film_Topics_Map ON Documentary_Films.film_id = Film_Topics_Map.film_id JOIN Topics ON Film_Topics_Map.topic_id = Topics.topic_id JOIN Film_Crew_Map ON Documentary_Films.film_id = Film_Crew_Map.film_id JOIN Crew_Members ON Film_Crew_Map.crew_id = Crew_Members.crew_id WHERE Topics.topic_name = 'Music' AND Crew_Members.crew_role = 'Producer' AND Crew_Members.nationality = 'Canada';",
        "schema": "documentary_films",
        "processed_schema_content": {
            "Documentary_Films": [
                "length",
                "rating",
                "title",
                "film_id",
                "release_date",
                "director_id",
                "runtime",
                "production_company_id",
                "duration",
                "runtime_minutes",
                "duration_minutes",
                "tagline",
                "release_year"
            ],
            "Crew_Members": [
                "crew_name",
                "crew_id",
                "crew_role",
                "birthdate",
                "nationality",
                "last_name",
                "gender",
                "fame_level",
                "full_name",
                "first_name"
            ],
            "Film_Crew_Map": [
                "film_id",
                "crew_id",
                "position_id"
            ],
            "Film_Topics_Map": [
                "topic_id",
                "film_id"
            ],
            "Topics": [
                "topic_id",
                "topic_name"
            ]
        }
    },
    {
        "id": 44,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Author': ['author_id', 'first_name', 'last_name', 'email', 'gender', 'country_id', 'birth_year', 'has_pulitzer_prize', 'has_phd', 'has_booker_prize', 'birth_country', 'name', 'author_name', 'id'], 'Book': ['book_id', 'title', 'isbn', 'publisher_id', 'publication_date', 'rating', 'price', 'publication_year', 'author_id', 'publisher', 'author', 'weight', 'author_gender', 'language', 'author_name', 'book_title', 'format_id', 'page_count', 'id', 'num_pages'], 'Book_Author': ['book_id', 'author_id'], 'Category': ['category_id', 'name', 'category_name'], 'Book_Category': ['book_id', 'category_id'], 'Order': ['order_id', 'customer_id', 'order_date', 'status', 'store_id', 'date', 'total_amount', 'total_cost', 'total_price'], 'Order_Item': ['order_id', 'book_id', 'quantity', 'price', 'store_id', 'order_date', 'customer_id', 'unit_price', 'inventory_id', 'date', 'order_item_date'], 'Customer': ['customer_id', 'first_name', 'last_name', 'email', 'address', 'phone_number', 'zip_code', 'country_id'], 'Store_Inventory': ['store_id', 'book_id', 'quantity', 'inventory_id', 'quantity_available']} and \n# the user question: Find the name and email address of the customer who has purchased the most books written by authors who have published at least one book in the \"Science\" category and have also published at least one book with a rating higher than 4.5.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and email address of the customer who has purchased the most books written by authors who have published at least one book in the \"Science\" category and have also published at least one book with a rating higher than 4.5.",
        "output": "SELECT Customer.first_name || ' ' || Customer.last_name AS customer_name, Customer.email FROM Customer JOIN Order ON Customer.customer_id = Order.customer_id JOIN Order_Item ON Order.order_id = Order_Item.order_id JOIN Store_Inventory ON Order_Item.book_id = Store_Inventory.book_id JOIN Book ON Store_Inventory.book_id = Book.book_id JOIN Book_Author ON Book.book_id = Book_Author.book_id JOIN Author ON Book_Author.author_id = Author.author_id JOIN Book_Category ON Book.book_id = Book_Category.book_id JOIN Category ON Book_Category.category_id = Category.category_id WHERE Category.name = 'Science' AND Book.rating > 4.5 GROUP BY Customer.customer_id ORDER BY SUM(Order_Item.quantity) DESC LIMIT 1;",
        "schema": "business_books",
        "processed_schema_content": {
            "Author": [
                "author_id",
                "first_name",
                "last_name",
                "email",
                "gender",
                "country_id",
                "birth_year",
                "has_pulitzer_prize",
                "has_phd",
                "has_booker_prize",
                "birth_country",
                "name",
                "author_name",
                "id"
            ],
            "Book": [
                "book_id",
                "title",
                "isbn",
                "publisher_id",
                "publication_date",
                "rating",
                "price",
                "publication_year",
                "author_id",
                "publisher",
                "author",
                "weight",
                "author_gender",
                "language",
                "author_name",
                "book_title",
                "format_id",
                "page_count",
                "id",
                "num_pages"
            ],
            "Book_Author": [
                "book_id",
                "author_id"
            ],
            "Category": [
                "category_id",
                "name",
                "category_name"
            ],
            "Book_Category": [
                "book_id",
                "category_id"
            ],
            "Order": [
                "order_id",
                "customer_id",
                "order_date",
                "status",
                "store_id",
                "date",
                "total_amount",
                "total_cost",
                "total_price"
            ],
            "Order_Item": [
                "order_id",
                "book_id",
                "quantity",
                "price",
                "store_id",
                "order_date",
                "customer_id",
                "unit_price",
                "inventory_id",
                "date",
                "order_item_date"
            ],
            "Customer": [
                "customer_id",
                "first_name",
                "last_name",
                "email",
                "address",
                "phone_number",
                "zip_code",
                "country_id"
            ],
            "Store_Inventory": [
                "store_id",
                "book_id",
                "quantity",
                "inventory_id",
                "quantity_available"
            ]
        }
    },
    {
        "id": 47,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'UserMeditationCourses': ['user_id', 'completed', 'course_id'], 'MeditationEvents': ['event_name', 'event_id', 'location', 'start_date', 'end_date', 'event_date', 'event_datetime'], 'UserMeditationEvents': ['event_id', 'user_id', 'session_id']} and \n# the user question: Find the event names and the percentage of registered users who have also completed a meditation course for all meditation events:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the event names and the percentage of registered users who have also completed a meditation course for all meditation events:",
        "output": "SELECT MeditationEvents.event_name, (COUNT(UserMeditationEvents.user_id) * 100.0) / COUNT(UserMeditationCourses.user_id) AS completion_percentage FROM MeditationEvents JOIN UserMeditationEvents ON MeditationEvents.event_id = UserMeditationEvents.event_id JOIN UserMeditationCourses ON UserMeditationEvents.user_id = UserMeditationCourses.user_id GROUP BY MeditationEvents.event_id;",
        "schema": "meditation",
        "processed_schema_content": {
            "UserMeditationCourses": [
                "user_id",
                "completed",
                "course_id"
            ],
            "MeditationEvents": [
                "event_name",
                "event_id",
                "location",
                "start_date",
                "end_date",
                "event_date",
                "event_datetime"
            ],
            "UserMeditationEvents": [
                "event_id",
                "user_id",
                "session_id"
            ]
        }
    },
    {
        "id": 49,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'User_Permissions': ['project_id', 'can_view', 'user_id', 'can_edit', 'can_admin', 'screen_id'], 'Users': ['username', 'user_id', 'password', 'email', 'updated_at', 'created_at', 'last_active_date', 'user_name', 'user_password', 'last_login']} and \n# the user question: Retrieve the user_name and the count of projects for each user that has view permission for at least one project and can edit at least one screen in at least two projects and no admin permission for any project.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the user_name and the count of projects for each user that has view permission for at least one project and can edit at least one screen in at least two projects and no admin permission for any project.",
        "output": "SELECT Users.user_name, COUNT(DISTINCT User_Permissions.project_id) AS project_count FROM Users INNER JOIN User_Permissions ON Users.user_id = User_Permissions.user_id WHERE User_Permissions.project_id IN ( SELECT User_Permissions.project_id FROM User_Permissions GROUP BY User_Permissions.project_id HAVING COUNT(DISTINCT CASE WHEN User_Permissions.can_edit = true THEN User_Permissions.screen_id END) >= 2 ) AND User_Permissions.can_view = true AND Users.user_id NOT IN ( SELECT User_Permissions.user_id FROM User_Permissions WHERE User_Permissions.can_admin = true ) GROUP BY Users.user_id;",
        "schema": "user_interface_design",
        "processed_schema_content": {
            "User_Permissions": [
                "project_id",
                "can_view",
                "user_id",
                "can_edit",
                "can_admin",
                "screen_id"
            ],
            "Users": [
                "username",
                "user_id",
                "password",
                "email",
                "updated_at",
                "created_at",
                "last_active_date",
                "user_name",
                "user_password",
                "last_login"
            ]
        }
    },
    {
        "id": 50,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'PlantSpecies': ['id', 'name', 'genus_id', 'scientific_name'], 'PlantSpeciesUses': ['plant_species_id', 'plant_uses_id'], 'PlantUses': ['id', 'name'], 'PlantSpeciesGrowth': ['plant_species_id', 'plant_growth_id'], 'PlantGrowth': ['id', 'name'], 'PlantSpeciesLocation': ['plant_location_id', 'plant_species_id'], 'PlantLocation': ['id', 'name']} and \n# the user question: Find all plant species that have a location requirement of \"Moist soil\", a growth requirement for \"Sandy clay loam\", and at least one use for \"Fiber\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all plant species that have a location requirement of \"Moist soil\", a growth requirement for \"Sandy clay loam\", and at least one use for \"Fiber\":",
        "output": "SELECT PlantSpecies.name AS species, PlantLocation.name AS location, PlantGrowth.name AS growth, PlantUses.name AS use FROM PlantSpecies JOIN PlantSpeciesLocation ON PlantSpecies.id = PlantSpeciesLocation.plant_species_id JOIN PlantLocation ON PlantSpeciesLocation.plant_location_id = PlantLocation.id JOIN PlantSpeciesUses ON PlantSpecies.id = PlantSpeciesUses.plant_species_id JOIN PlantUses ON PlantSpeciesUses.plant_uses_id = PlantUses.id JOIN PlantSpeciesGrowth ON PlantSpecies.id = PlantSpeciesGrowth.plant_species_id JOIN PlantGrowth ON PlantSpeciesGrowth.plant_growth_id = PlantGrowth.id WHERE PlantLocation.name = 'Moist soil' AND PlantGrowth.name = 'Sandy clay loam' AND PlantUses.name = 'Fiber';",
        "schema": "botany",
        "processed_schema_content": {
            "PlantSpecies": [
                "id",
                "name",
                "genus_id",
                "scientific_name"
            ],
            "PlantSpeciesUses": [
                "plant_species_id",
                "plant_uses_id"
            ],
            "PlantUses": [
                "id",
                "name"
            ],
            "PlantSpeciesGrowth": [
                "plant_species_id",
                "plant_growth_id"
            ],
            "PlantGrowth": [
                "id",
                "name"
            ],
            "PlantSpeciesLocation": [
                "plant_location_id",
                "plant_species_id"
            ],
            "PlantLocation": [
                "id",
                "name"
            ]
        }
    },
    {
        "id": 51,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'User': ['user_id', 'username', 'email', 'password', 'role_id'], 'StopSchedule': ['stop_id', 'route_id', 'arrival_time', 'departure_time', 'stop_schedule_id', 'station_id', 'trip_id'], 'Trip': ['trip_id', 'user_id', 'vehicle_id', 'route_id', 'start_time', 'end_time', 'status', 'fare_id', 'is_cancelled', 'passenger_id', 'driver_id', 'driver_rating', 'check_in_time', 'check_out_time', 'fare', 'distance', 'fare_amount', '[start_date]', '[end_date]', '[driver_id]', '[year]', '[vehicle_id]', 'duration', 'date', 'fare_rate', 'start_city', 'end_location', 'start_location', 'destination_id', 'cost', 'origin_id', 'destination', 'source', 'tip_amount', 'customer_id'], 'Payment': ['payment_id', 'user_id', 'fare_id', 'payment_time', 'amount_paid', 'trip_id', 'card_id', 'payment_type', 'payment_type_id', 'amount', 'payment_date', 'passenger_id', 'credit_card_number', 'payment_method', 'method'], 'Station': ['station_id', 'name', 'latitude', 'longitude', 'address'], 'StationSchedule': ['station_id', 'route_id', 'arrival_time', 'departure_time'], 'CreditCard': ['card_number', 'card_id', 'card_type', 'exp_date', 'user_id', 'card_type_id', 'expiration_year', 'expiration_date', 'cardholder_name', 'limit', 'payment_id', 'issuer_bank_id'], 'CardType': ['card_type_id', 'card_type']} and \n# the user question: Retrieve the names and email addresses of all users who have traveled on Route 1 and have a scheduled stop at Station 2, and have paid using a credit card that has a card_type of 'Visa' or 'Mastercard':,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all users who have traveled on Route 1 and have a scheduled stop at Station 2, and have paid using a credit card that has a card_type of 'Visa' or 'Mastercard':",
        "output": "SELECT DISTINCT User.username, User.email FROM User INNER JOIN Trip ON User.user_id = Trip.user_id INNER JOIN Payment ON Trip.trip_id = Payment.trip_id INNER JOIN CreditCard ON Payment.card_id = CreditCard.card_id INNER JOIN CardType ON CreditCard.card_type_id = CardType.card_type_id INNER JOIN StopSchedule ON Trip.route_id = StopSchedule.route_id AND Trip.start_time = StopSchedule.departure_time INNER JOIN StationSchedule ON StopSchedule.route_id = StationSchedule.route_id AND StopSchedule.departure_time = StationSchedule.departure_time INNER JOIN Station ON StationSchedule.station_id = Station.station_id WHERE Trip.route_id = 1 AND Station.name = 'Station 2' AND (CardType.card_type = 'Visa' OR CardType.card_type = 'Mastercard');",
        "schema": "intelligent_transportation_systems",
        "processed_schema_content": {
            "User": [
                "user_id",
                "username",
                "email",
                "password",
                "role_id"
            ],
            "StopSchedule": [
                "stop_id",
                "route_id",
                "arrival_time",
                "departure_time",
                "stop_schedule_id",
                "station_id",
                "trip_id"
            ],
            "Trip": [
                "trip_id",
                "user_id",
                "vehicle_id",
                "route_id",
                "start_time",
                "end_time",
                "status",
                "fare_id",
                "is_cancelled",
                "passenger_id",
                "driver_id",
                "driver_rating",
                "check_in_time",
                "check_out_time",
                "fare",
                "distance",
                "fare_amount",
                "[start_date]",
                "[end_date]",
                "[driver_id]",
                "[year]",
                "[vehicle_id]",
                "duration",
                "date",
                "fare_rate",
                "start_city",
                "end_location",
                "start_location",
                "destination_id",
                "cost",
                "origin_id",
                "destination",
                "source",
                "tip_amount",
                "customer_id"
            ],
            "Payment": [
                "payment_id",
                "user_id",
                "fare_id",
                "payment_time",
                "amount_paid",
                "trip_id",
                "card_id",
                "payment_type",
                "payment_type_id",
                "amount",
                "payment_date",
                "passenger_id",
                "credit_card_number",
                "payment_method",
                "method"
            ],
            "Station": [
                "station_id",
                "name",
                "latitude",
                "longitude",
                "address"
            ],
            "StationSchedule": [
                "station_id",
                "route_id",
                "arrival_time",
                "departure_time"
            ],
            "CreditCard": [
                "card_number",
                "card_id",
                "card_type",
                "exp_date",
                "user_id",
                "card_type_id",
                "expiration_year",
                "expiration_date",
                "cardholder_name",
                "limit",
                "payment_id",
                "issuer_bank_id"
            ],
            "CardType": [
                "card_type_id",
                "card_type"
            ]
        }
    },
    {
        "id": 52,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'GeologicalFormations': ['geological_age', 'formation_id', 'formation_name', 'rock_type_id'], 'Fossils': ['fossil_name', 'fossil_id', 'geological_age', 'species_name'], 'RockFossils': ['rock_id', 'fossil_id']} and \n# the user question: Retrieve the names of all rock formations that contain fossils of trilobites.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all rock formations that contain fossils of trilobites.",
        "output": "SELECT gf.formation_name FROM GeologicalFormations gf JOIN RockFossils rf ON gf.formation_id = rf.rock_id JOIN Fossils f ON rf.fossil_id = f.fossil_id WHERE f.fossil_name = 'Trilobite';",
        "schema": "geology",
        "processed_schema_content": {
            "GeologicalFormations": [
                "geological_age",
                "formation_id",
                "formation_name",
                "rock_type_id"
            ],
            "Fossils": [
                "fossil_name",
                "fossil_id",
                "geological_age",
                "species_name"
            ],
            "RockFossils": [
                "rock_id",
                "fossil_id"
            ]
        }
    },
    {
        "id": 53,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['customer_id', 'email_address', 'customer_name', 'country_id', 'city_id', 'city', 'birth_date'], 'Purchase': ['purchase_date', 'customer_id', 'product_id', 'unit_price', 'quantity', 'city_id', 'country_id', 'amount', 'date', 'purchase_id', 'category_id', 'store_id', 'price']} and \n# the user question: Find the names of all customers who have made a purchase in every year from 2020 to 2023.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all customers who have made a purchase in every year from 2020 to 2023.",
        "output": "SELECT Customer.customer_name FROM Customer INNER JOIN Purchase ON Customer.customer_id = Purchase.customer_id WHERE Purchase.purchase_date BETWEEN '2020-01-01' AND '2023-12-31' GROUP BY Customer.customer_id HAVING COUNT(DISTINCT strftime('%Y', Purchase.purchase_date)) = 4;",
        "schema": "economics",
        "processed_schema_content": {
            "Customer": [
                "customer_id",
                "email_address",
                "customer_name",
                "country_id",
                "city_id",
                "city",
                "birth_date"
            ],
            "Purchase": [
                "purchase_date",
                "customer_id",
                "product_id",
                "unit_price",
                "quantity",
                "city_id",
                "country_id",
                "amount",
                "date",
                "purchase_id",
                "category_id",
                "store_id",
                "price"
            ]
        }
    },
    {
        "id": 54,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Websites': ['website_id', 'user_id', 'url', 'created_at', 'updated_at', 'name', 'domain_id', 'domain_authority_score', 'domain_created_at'], 'Pages': ['page_id', 'website_id', 'url', 'title', 'description', 'content', 'created_at', 'updated_at', 'meta_description', 'meta_keywords', 'meta_title', 'h1_tag', 'h2_tag', 'title_tag', 'canonical_url', 'description_tag', 'header_tag', 'meta_tag', 'meta_keyword', 'h1', 'heading', 'header', 'word_count', 'time_on_page', 'total_words', 'http_status_code', 'user_id', 'last_modified_date', '[website_id]'], 'Page_Stats': ['page_stat_id', 'page_id', 'visits', 'bounce_rate', 'time_on_page', 'created_at', 'updated_at', 'organic_traffic', 'load_time', 'page_speed_score', 'total_images', 'total_videos', 'page_authority_score', 'domain_authority_score', 'page_load_time', 'backlinks', 'search_query', 'search_volume']} and \n# the user question: Retrieve the names and URLs of all websites that have at least one page with a time on page greater than or equal to 4800 seconds and a bounce rate less than or equal to 0.0000000000000000000000000000001:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and URLs of all websites that have at least one page with a time on page greater than or equal to 4800 seconds and a bounce rate less than or equal to 0.0000000000000000000000000000001:",
        "output": "SELECT DISTINCT Websites.name, Websites.url FROM Websites INNER JOIN Pages ON Websites.website_id = Pages.website_id INNER JOIN Page_Stats ON Pages.page_id = Page_Stats.page_id WHERE Page_Stats.time_on_page >= 4800 AND Page_Stats.bounce_rate <= 0.0000000000000000000000000000001;",
        "schema": "search_engine_optimization_(seo)",
        "processed_schema_content": {
            "Websites": [
                "website_id",
                "user_id",
                "url",
                "created_at",
                "updated_at",
                "name",
                "domain_id",
                "domain_authority_score",
                "domain_created_at"
            ],
            "Pages": [
                "page_id",
                "website_id",
                "url",
                "title",
                "description",
                "content",
                "created_at",
                "updated_at",
                "meta_description",
                "meta_keywords",
                "meta_title",
                "h1_tag",
                "h2_tag",
                "title_tag",
                "canonical_url",
                "description_tag",
                "header_tag",
                "meta_tag",
                "meta_keyword",
                "h1",
                "heading",
                "header",
                "word_count",
                "time_on_page",
                "total_words",
                "http_status_code",
                "user_id",
                "last_modified_date",
                "[website_id]"
            ],
            "Page_Stats": [
                "page_stat_id",
                "page_id",
                "visits",
                "bounce_rate",
                "time_on_page",
                "created_at",
                "updated_at",
                "organic_traffic",
                "load_time",
                "page_speed_score",
                "total_images",
                "total_videos",
                "page_authority_score",
                "domain_authority_score",
                "page_load_time",
                "backlinks",
                "search_query",
                "search_volume"
            ]
        }
    },
    {
        "id": 55,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Teams': ['team_name', 'team_id', 'conference_id', 'division_id', 'last_season', 'first_season', 'city_id', 'division_name', 'conference_name', 'season_id', 'head_coach_id', 'city', 'start_date', 'wins', 'losse', 'home_team_id', 'State', 'Golden', 'Warriors', 'away_team_id', 'coach_id', 'conference', 'playoff_record', 'num_mvp', 'year_founded', 'arena_id', 'player_id', 'year_end', 'winning_team_id', 'end_date', 'num_wins', 'opponent_name', 'Name', 'ID', 'Abbreviation', 'City', 'Color', 'Coach', 'Team_ID', 'Team_Name'], 'Championships': ['team_id', 'season_id', 'championship_id', 'place', 'num_games', 'coach_id', 'playoff_record', 'championships', 'championship_year', 'player_id', 'conference', 'wins', 'win', 'round', 'year', 'finals_mvp_id', 'home_team_id', 'series_id', 'championship_series', 'away_team_id']} and \n# the user question: Find the teams that have won at least 5 championships.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the teams that have won at least 5 championships.",
        "output": "SELECT Teams.team_name, COUNT(DISTINCT Championships.season_id) AS num_championships FROM Teams JOIN Championships ON Teams.team_id = Championships.team_id GROUP BY Teams.team_id HAVING COUNT(DISTINCT Championships.season_id) >= 5;",
        "schema": "basketball",
        "processed_schema_content": {
            "Teams": [
                "team_name",
                "team_id",
                "conference_id",
                "division_id",
                "last_season",
                "first_season",
                "city_id",
                "division_name",
                "conference_name",
                "season_id",
                "head_coach_id",
                "city",
                "start_date",
                "wins",
                "losse",
                "home_team_id",
                "State",
                "Golden",
                "Warriors",
                "away_team_id",
                "coach_id",
                "conference",
                "playoff_record",
                "num_mvp",
                "year_founded",
                "arena_id",
                "player_id",
                "year_end",
                "winning_team_id",
                "end_date",
                "num_wins",
                "opponent_name",
                "Name",
                "ID",
                "Abbreviation",
                "City",
                "Color",
                "Coach",
                "Team_ID",
                "Team_Name"
            ],
            "Championships": [
                "team_id",
                "season_id",
                "championship_id",
                "place",
                "num_games",
                "coach_id",
                "playoff_record",
                "championships",
                "championship_year",
                "player_id",
                "conference",
                "wins",
                "win",
                "round",
                "year",
                "finals_mvp_id",
                "home_team_id",
                "series_id",
                "championship_series",
                "away_team_id"
            ]
        }
    },
    {
        "id": 56,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'injuries': ['injury_type', 'athlete_id', 'injury_id', 'injury_date', 'injury_duration'], 'athlete_injury_status': ['injury_id', 'status_id'], 'injury_status': ['status_name', 'status_id'], 'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'mental_skills': ['skill_id', 'skill_name', 'skill_description', 'athlete_id', 'Focus', 'Visualization', 'skill_mastered', 'skill_level', 'Excellent', 'High', 'Low']} and \n# the user question: Get a list of all athletes who have a \"High\" level in the \"Confidence\" mental skill and a \"Minor\" injury status, along with the date of their injury and their current injury status.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get a list of all athletes who have a \"High\" level in the \"Confidence\" mental skill and a \"Minor\" injury status, along with the date of their injury and their current injury status.",
        "output": "SELECT athletes.name, injuries.injury_date, injury_status.status_name FROM athletes INNER JOIN injuries ON athletes.athlete_id = injuries.athlete_id INNER JOIN athlete_injury_status ON injuries.injury_id = athlete_injury_status.injury_id INNER JOIN injury_status ON athlete_injury_status.status_id = injury_status.status_id INNER JOIN athlete_skills ON athletes.athlete_id = athlete_skills.athlete_id INNER JOIN mental_skills ON athlete_skills.skill_id = mental_skills.skill_id WHERE mental_skills.skill_name = 'Confidence' AND athlete_skills.skill_level = 'High' AND injury_status.status_name = 'Minor';",
        "schema": "sports_psychology",
        "processed_schema_content": {
            "athletes": [
                "name",
                "athlete_id",
                "team_id",
                "last_name",
                "athlete_name",
                "age"
            ],
            "injuries": [
                "injury_type",
                "athlete_id",
                "injury_id",
                "injury_date",
                "injury_duration"
            ],
            "athlete_injury_status": [
                "injury_id",
                "status_id"
            ],
            "injury_status": [
                "status_name",
                "status_id"
            ],
            "athlete_skills": [
                "skill_id",
                "athlete_id",
                "skill_level",
                "skill_mastered",
                "self_talk",
                "mental_preparation",
                "imagery",
                "goal_setting",
                "anxiety",
                "focus",
                "mental_toughness",
                "confidence",
                "motivation"
            ],
            "mental_skills": [
                "skill_id",
                "skill_name",
                "skill_description",
                "athlete_id",
                "Focus",
                "Visualization",
                "skill_mastered",
                "skill_level",
                "Excellent",
                "High",
                "Low"
            ]
        }
    },
    {
        "id": 57,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Participants': ['first_name', 'last_name', 'participant_id', 'gender', 'age', 'birth_year', 'date_of_birth', 'ag', 'age_group_id', 'parental_edu_id', 'language_group_id'], 'Participant_Tasks': ['task_id', 'participant_id', 'completion_date', 'score', 'completed'], 'Tasks': ['task_id', 'task_name', 'study_id', 'difficulty_level', 'duration', 'difficulty', 'task_category', 'category', 'Tower', 'Hanoi', 'Digit', 'Span', 'Working', 'Spatial', 'Symbol', 'Picture', 'Concepts', 'Coding', 'Regulation', 'Emotional'], 'Participant_Questionnaires': ['participant_id', 'questionnaire_id', 'participant_questionnaire_id', 'completion_date', 'response_text', 'score', 'task_id', 'completion_time']} and \n# the user question: Retrieve the names and ages of all participants who have completed the \"Memory Game\" task, have achieved a score that is higher than 75, and have also completed a questionnaire with a score that is higher than the score achieved in the \"Memory Game\" task:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and ages of all participants who have completed the \"Memory Game\" task, have achieved a score that is higher than 75, and have also completed a questionnaire with a score that is higher than the score achieved in the \"Memory Game\" task:",
        "output": "SELECT Participants.first_name, Participants.last_name, Participants.age FROM Participants JOIN Participant_Tasks pt1 ON Participants.participant_id = pt1.participant_id JOIN Participant_Questionnaires ON Participants.participant_id = Participant_Questionnaires.participant_id WHERE pt1.task_id = ( SELECT task_id FROM Tasks WHERE task_name = 'Memory Game' ) AND pt1.score > 75 AND Participant_Questionnaires.score > pt1.score;",
        "schema": "developmental_psychology",
        "processed_schema_content": {
            "Participants": [
                "first_name",
                "last_name",
                "participant_id",
                "gender",
                "age",
                "birth_year",
                "date_of_birth",
                "ag",
                "age_group_id",
                "parental_edu_id",
                "language_group_id"
            ],
            "Participant_Tasks": [
                "task_id",
                "participant_id",
                "completion_date",
                "score",
                "completed"
            ],
            "Tasks": [
                "task_id",
                "task_name",
                "study_id",
                "difficulty_level",
                "duration",
                "difficulty",
                "task_category",
                "category",
                "Tower",
                "Hanoi",
                "Digit",
                "Span",
                "Working",
                "Spatial",
                "Symbol",
                "Picture",
                "Concepts",
                "Coding",
                "Regulation",
                "Emotional"
            ],
            "Participant_Questionnaires": [
                "participant_id",
                "questionnaire_id",
                "participant_questionnaire_id",
                "completion_date",
                "response_text",
                "score",
                "task_id",
                "completion_time"
            ]
        }
    },
    {
        "id": 58,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['email', 'username', 'user_id'], 'MeditationSessions': ['duration_minutes', 'session_notes', 'session_id', 'user_id', 'session_date', 'technique_id', 'course_id', 'exercise_id', 'session_datetime'], 'MeditationTechniques': ['technique_id', 'description', 'technique_name'], 'UserMeditationTechniques': ['technique_id', 'user_id']} and \n# the user question: Retrieve the usernames and the average duration of meditation sessions for users who have practiced both the \"Breathing\" and \"Mindfulness\" techniques:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the usernames and the average duration of meditation sessions for users who have practiced both the \"Breathing\" and \"Mindfulness\" techniques:",
        "output": "SELECT Users.username, AVG(MeditationSessions.duration_minutes) AS average_duration FROM Users JOIN UserMeditationTechniques AS umt1 ON Users.user_id = umt1.user_id JOIN UserMeditationTechniques AS umt2 ON Users.user_id = umt2.user_id JOIN MeditationTechniques AS mt1 ON umt1.technique_id = mt1.technique_id JOIN MeditationTechniques AS mt2 ON umt2.technique_id = mt2.technique_id JOIN MeditationSessions ON Users.user_id = MeditationSessions.user_id WHERE mt1.technique_name = 'Breathing' AND mt2.technique_name = 'Mindfulness' GROUP BY Users.user_id;",
        "schema": "meditation",
        "processed_schema_content": {
            "Users": [
                "email",
                "username",
                "user_id"
            ],
            "MeditationSessions": [
                "duration_minutes",
                "session_notes",
                "session_id",
                "user_id",
                "session_date",
                "technique_id",
                "course_id",
                "exercise_id",
                "session_datetime"
            ],
            "MeditationTechniques": [
                "technique_id",
                "description",
                "technique_name"
            ],
            "UserMeditationTechniques": [
                "technique_id",
                "user_id"
            ]
        }
    },
    {
        "id": 59,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {} and \n# the user question: Get the average rating of all illustrations:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the average rating of all illustrations:",
        "output": "SELECT AVG(Illustration_ratings.rating) AS avg_rating FROM Illustration_ratings;",
        "schema": "illustration",
        "processed_schema_content": {}
    },
    {
        "id": 61,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Artisans': ['artisan_name', 'specialization', 'experience_years', 'artisan_id', 'artist_id']} and \n# the user question: Retrieve the names of artisans and their corresponding specialization, sorted alphabetically by the artisan name:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of artisans and their corresponding specialization, sorted alphabetically by the artisan name:",
        "output": "SELECT Artisans.artisan_name, Artisans.specialization FROM Artisans ORDER BY Artisans.artisan_name ASC;",
        "schema": "sculpting",
        "processed_schema_content": {
            "Artisans": [
                "artisan_name",
                "specialization",
                "experience_years",
                "artisan_id",
                "artist_id"
            ]
        }
    },
    {
        "id": 62,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'celestial_bodies': ['radius', 'mass', 'name', 'type', 'number_of_moons', 'distance_from_sun', 'id', 'distance_from_earth', 'orbital_period', 'diameter', 'orbiting_body_id', 'average_surface_temperature', 'surface_temperature', 'perihelion_distance', 'period', 'semimajor_axis', 'redshift', 'velocity', 'luminosity', 'schwarzschild_radius', 'eccentricity', 'aphelion_distance', 'spin_period', 'semi_major_axis', 'surface_gravity', 'temperature', 'magnitude', 'accretion_disk_temperature', 'rotation_period', 'obliquity', 'pulse_period', 'peak_absolute_magnitude', 'albedo', 'apparent_magnitude', 'absolute_magnitude', 'spectral_type', 'discovery_year', 'spectral_class', 'distance_from_star', 'discovery_method_id', 'equilibrium_temperature', 'metallicity', 'age', 'effective_temperature', 'atmospheric_composition', 'inclination', 'parallax', 'rotation_velocity', 'axial_tilt', 'orbital_inclination', 'density', 'rotational_velocity', 'magnetic_field_strength', 'composition', 'rotational_period', 'spin', 'distance_from_galactic_center', 'binary_system', 'constellation', 'stellar_evolution_stage', 'star_cluster_type', 'galaxy', 'orbital_eccentricity', 'star_spectral_type', 'orbital_period_unit', 'diameter_unit', 'discovery_method', 'pulse_period_unit', 'distance_unit', 'radius_unit', 'avg_temperature', 'temperature_unit', 'aphelion_unit', 'perihelion_unit', 'event_horizon_unit', 'event_horizon_radius', 'luminosity_distance', 'orbit_type', 'equatorial_diameter', 'gravity_unit', 'escape_velocity', 'angle_unit', 'surface_area', 'density_unit', 'parent_body_id', 'atmospheric_pressure', 'luminosity_class', 'inner_habitable_zone', 'outer_habitable_zone', 'period_unit', 'classification', 'pressure_unit', 'surface_pressure', 'orbiting', 'distance', 'proper_motion', 'proper_motion_unit', 'mean_radius', 'mass_unit', 'temperature_range', 'Gas', 'Giant', 'brightness_temperature', 'parallax_unit', 'metallicity_unit', 'magnetic_field_unit', 'spin_parameter', 'orbiting_id', 'stellar_mass', 'stage', 'radial_velocity', 'host_star', 'accretion_rate', 'core_type']} and \n# the user question: Retrieve the name and age of all white dwarfs that have a surface temperature less than 10,000 Kelvin and were discovered after 2000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and age of all white dwarfs that have a surface temperature less than 10,000 Kelvin and were discovered after 2000.",
        "output": "SELECT name, age FROM celestial_bodies WHERE type = 'White Dwarf' AND surface_temperature < 10000 AND discovery_year > 2000;",
        "schema": "astronomy",
        "processed_schema_content": {
            "celestial_bodies": [
                "radius",
                "mass",
                "name",
                "type",
                "number_of_moons",
                "distance_from_sun",
                "id",
                "distance_from_earth",
                "orbital_period",
                "diameter",
                "orbiting_body_id",
                "average_surface_temperature",
                "surface_temperature",
                "perihelion_distance",
                "period",
                "semimajor_axis",
                "redshift",
                "velocity",
                "luminosity",
                "schwarzschild_radius",
                "eccentricity",
                "aphelion_distance",
                "spin_period",
                "semi_major_axis",
                "surface_gravity",
                "temperature",
                "magnitude",
                "accretion_disk_temperature",
                "rotation_period",
                "obliquity",
                "pulse_period",
                "peak_absolute_magnitude",
                "albedo",
                "apparent_magnitude",
                "absolute_magnitude",
                "spectral_type",
                "discovery_year",
                "spectral_class",
                "distance_from_star",
                "discovery_method_id",
                "equilibrium_temperature",
                "metallicity",
                "age",
                "effective_temperature",
                "atmospheric_composition",
                "inclination",
                "parallax",
                "rotation_velocity",
                "axial_tilt",
                "orbital_inclination",
                "density",
                "rotational_velocity",
                "magnetic_field_strength",
                "composition",
                "rotational_period",
                "spin",
                "distance_from_galactic_center",
                "binary_system",
                "constellation",
                "stellar_evolution_stage",
                "star_cluster_type",
                "galaxy",
                "orbital_eccentricity",
                "star_spectral_type",
                "orbital_period_unit",
                "diameter_unit",
                "discovery_method",
                "pulse_period_unit",
                "distance_unit",
                "radius_unit",
                "avg_temperature",
                "temperature_unit",
                "aphelion_unit",
                "perihelion_unit",
                "event_horizon_unit",
                "event_horizon_radius",
                "luminosity_distance",
                "orbit_type",
                "equatorial_diameter",
                "gravity_unit",
                "escape_velocity",
                "angle_unit",
                "surface_area",
                "density_unit",
                "parent_body_id",
                "atmospheric_pressure",
                "luminosity_class",
                "inner_habitable_zone",
                "outer_habitable_zone",
                "period_unit",
                "classification",
                "pressure_unit",
                "surface_pressure",
                "orbiting",
                "distance",
                "proper_motion",
                "proper_motion_unit",
                "mean_radius",
                "mass_unit",
                "temperature_range",
                "Gas",
                "Giant",
                "brightness_temperature",
                "parallax_unit",
                "metallicity_unit",
                "magnetic_field_unit",
                "spin_parameter",
                "orbiting_id",
                "stellar_mass",
                "stage",
                "radial_velocity",
                "host_star",
                "accretion_rate",
                "core_type"
            ]
        }
    },
    {
        "id": 63,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'User_Activities': ['activity_value', 'activity_id', 'date_recorded', 'user_id', 'activity_units', 'activity_date', 'activity_duration', 'activity_intensity', 'activity_hr', 'activity_distance', 'activity_calories', 'activity_count', 'duration', 'distance', 'weight', 'heart_rate', 'date_completed', 'activity_name', 'calories_burned']} and \n# the user question: Find the name and email address of all users who have not completed any activities in the last 30 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and email address of all users who have not completed any activities in the last 30 days:",
        "output": "SELECT Users.first_name, Users.last_name, Users.email FROM Users WHERE Users.user_id NOT IN ( SELECT User_Activities.user_id FROM User_Activities WHERE User_Activities.activity_date BETWEEN date('now', '-30 days') AND date('now') ) GROUP BY Users.user_id;",
        "schema": "health_and_wellness_programs",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "first_name",
                "last_name",
                "email",
                "password",
                "phone_number",
                "address",
                "age",
                "gender",
                "bmi",
                "goal_id"
            ],
            "User_Activities": [
                "activity_value",
                "activity_id",
                "date_recorded",
                "user_id",
                "activity_units",
                "activity_date",
                "activity_duration",
                "activity_intensity",
                "activity_hr",
                "activity_distance",
                "activity_calories",
                "activity_count",
                "duration",
                "distance",
                "weight",
                "heart_rate",
                "date_completed",
                "activity_name",
                "calories_burned"
            ]
        }
    },
    {
        "id": 65,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Vendors': ['Phone', 'Email', 'VendorName', 'ContactName', 'VendorID', 'Address', 'State', 'ZipCode', 'City', 'VendorPhone', 'VendorAddress'], 'Purchases': ['PurchaseDate', 'VendorID', 'Amount', 'Product', 'Description', 'PurchaseID', 'Price', 'Quantity', 'ProductName', 'TransactionID', 'ProductID', 'EmployeeID']} and \n# the user question: Find the vendor with the highest total amount of purchases made:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the vendor with the highest total amount of purchases made:",
        "output": "SELECT Vendors.VendorName, SUM(Purchases.Amount) AS TotalPurchases FROM Vendors INNER JOIN Purchases ON Vendors.VendorID = Purchases.VendorID GROUP BY Vendors.VendorName ORDER BY TotalPurchases DESC LIMIT 1;",
        "schema": "accounting",
        "processed_schema_content": {
            "Vendors": [
                "Phone",
                "Email",
                "VendorName",
                "ContactName",
                "VendorID",
                "Address",
                "State",
                "ZipCode",
                "City",
                "VendorPhone",
                "VendorAddress"
            ],
            "Purchases": [
                "PurchaseDate",
                "VendorID",
                "Amount",
                "Product",
                "Description",
                "PurchaseID",
                "Price",
                "Quantity",
                "ProductName",
                "TransactionID",
                "ProductID",
                "EmployeeID"
            ]
        }
    },
    {
        "id": 66,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Therapist_Specialties': ['therapist_id', 'specialty', 'specialty_id'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id']} and \n# the user question: Retrieve the names of all clients who have attended a session with a therapist who has a specialty in either Mindfulness Therapy or Art Therapy, and the number of sessions they have attended:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all clients who have attended a session with a therapist who has a specialty in either Mindfulness Therapy or Art Therapy, and the number of sessions they have attended:",
        "output": "SELECT c.name, COUNT(DISTINCT s.id) AS sessions_attended FROM Clients c INNER JOIN Session_Attendees sa ON c.id = sa.client_id INNER JOIN Sessions s ON sa.session_id = s.id INNER JOIN Therapists t ON s.therapist_id = t.id INNER JOIN Therapist_Specialties ts ON t.id = ts.therapist_id WHERE ts.specialty IN ('Mindfulness Therapy', 'Art Therapy') GROUP BY c.id",
        "schema": "counseling",
        "processed_schema_content": {
            "Clients": [
                "email",
                "phone_number",
                "id",
                "name",
                "date_of_birth",
                "gender",
                "referral_source_id",
                "primary_care_physician_id",
                "substance_abuse_history",
                "depression_history",
                "trauma_history",
                "ptsd_diagnosis",
                "addiction_history",
                "personality_disorder_history",
                "eating_disorder_history",
                "bipolar_history",
                "schizophrenia_history",
                "self_harm_history",
                "anxiety_history",
                "eating_disorders_history",
                "alcoholism_history",
                "gambling_addiction_history",
                "smoking_addiction_history",
                "alcohol_addiction_history",
                "drug_addiction_history",
                "sex_addiction_history",
                "ptsd_history",
                "ocd_history",
                "suicidal_ideation_history",
                "age",
                "phone",
                "balance_owing",
                "contact_number"
            ],
            "Sessions": [
                "therapist_id",
                "client_id",
                "id",
                "date",
                "location",
                "name",
                "duration",
                "therapy_type_id",
                "cost",
                "start_time",
                "session_type",
                "rate",
                "",
                "SessionNotes",
                "SessionID",
                "SessionDate",
                "CounselorID"
            ],
            "Therapists": [
                "id",
                "name",
                "gender",
                "email",
                "phone",
                "license_state",
                "experience_years",
                "last_name",
                "is_active",
                "is_licensed",
                "rate_per_hour"
            ],
            "Therapist_Specialties": [
                "therapist_id",
                "specialty",
                "specialty_id"
            ],
            "Session_Attendees": [
                "session_id",
                "client_id",
                "attendee_type",
                "attended",
                "id"
            ]
        }
    },
    {
        "id": 67,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Patients': ['medical_history', 'patient_id', 'first_name', 'last_name', 'age_group', 'gender', 'Age', 'Contact_Info', 'Name', 'Diagnosis', 'Discharge_Date', 'Admission_Date', 'Address', 'Family_History', 'Patient_ID', 'Doctor_ID', 'Doctor_I', 'AdmissionDate', 'Therapy', 'date_of_birth', 'name'], 'Medical_Records': ['doctor_id', 'diagnosis', 'patient_id', 'date_of_visit', 'admission_id', 'medical_record_id', 'treatment_description', 'surgery_id', 'procedure_id', 'nurse_id', 'notes', 'diagnosis_id', 'discharge_date', 'attending_physician_id'], 'Prescriptions': ['medication_id', 'start_date', 'medical_record_id', 'dosage', 'frequency', 'Patient_ID', 'hypertension', 'Medication']} and \n# the user question: Find the patients who have not been discharged yet and have been prescribed a medication with a dosage greater than 500mg.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the patients who have not been discharged yet and have been prescribed a medication with a dosage greater than 500mg.",
        "output": "SELECT Patients.patient_id, Patients.first_name, Patients.last_name FROM Patients INNER JOIN Medical_Records ON Patients.patient_id = Medical_Records.patient_id INNER JOIN Prescriptions ON Medical_Records.medical_record_id = Prescriptions.medical_record_id WHERE Prescriptions.dosage > 500 AND Medical_Records.discharge_date IS NULL;",
        "schema": "nursing",
        "processed_schema_content": {
            "Patients": [
                "medical_history",
                "patient_id",
                "first_name",
                "last_name",
                "age_group",
                "gender",
                "Age",
                "Contact_Info",
                "Name",
                "Diagnosis",
                "Discharge_Date",
                "Admission_Date",
                "Address",
                "Family_History",
                "Patient_ID",
                "Doctor_ID",
                "Doctor_I",
                "AdmissionDate",
                "Therapy",
                "date_of_birth",
                "name"
            ],
            "Medical_Records": [
                "doctor_id",
                "diagnosis",
                "patient_id",
                "date_of_visit",
                "admission_id",
                "medical_record_id",
                "treatment_description",
                "surgery_id",
                "procedure_id",
                "nurse_id",
                "notes",
                "diagnosis_id",
                "discharge_date",
                "attending_physician_id"
            ],
            "Prescriptions": [
                "medication_id",
                "start_date",
                "medical_record_id",
                "dosage",
                "frequency",
                "Patient_ID",
                "hypertension",
                "Medication"
            ]
        }
    },
    {
        "id": 70,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'app_details': ['app_price', 'app_name', 'app_downloads', 'app_rating', 'app_category']} and \n# the user question: What is the average rating of all free apps in the database?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What is the average rating of all free apps in the database?",
        "output": "SELECT AVG(app_rating) FROM app_details WHERE app_price = 0;",
        "schema": "mobile_app_development",
        "processed_schema_content": {
            "app_details": [
                "app_price",
                "app_name",
                "app_downloads",
                "app_rating",
                "app_category"
            ]
        }
    },
    {
        "id": 71,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['user_id', 'project_id', 'project_name', 'dataset_count', 'dataset_id', 'creation_year', 'created_at'], 'DataSets': ['dataset_description', 'dataset_id', 'dataset_name', 'project_id', 'user_id', 'source_id'], 'Observations': ['dataset_id', 'observation_count', 'observation_id']} and \n# the user question: Get the average number of observations per dataset for each project:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the average number of observations per dataset for each project:",
        "output": "SELECT Projects.project_name, AVG(Observations.observation_count) AS avg_observations FROM Projects JOIN DataSets ON Projects.project_id = DataSets.project_id JOIN Observations ON DataSets.dataset_id = Observations.dataset_id GROUP BY Projects.project_id;",
        "schema": "data_analytics",
        "processed_schema_content": {
            "Projects": [
                "user_id",
                "project_id",
                "project_name",
                "dataset_count",
                "dataset_id",
                "creation_year",
                "created_at"
            ],
            "DataSets": [
                "dataset_description",
                "dataset_id",
                "dataset_name",
                "project_id",
                "user_id",
                "source_id"
            ],
            "Observations": [
                "dataset_id",
                "observation_count",
                "observation_id"
            ]
        }
    },
    {
        "id": 72,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'athlete_metrics': ['metric_name', 'athlete_id', 'value', 'metric_id'], 'performance_metrics': ['metric_name', 'metric_id'], 'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'mental_skills': ['skill_id', 'skill_name', 'skill_description', 'athlete_id', 'Focus', 'Visualization', 'skill_mastered', 'skill_level', 'Excellent', 'High', 'Low'], 'goals': ['goal_id', 'goal_name', 'goal_rating', 'skill_id'], 'athlete_goals': ['goal_id', 'athlete_id', 'goal_achieved', 'goal_date', 'date_achieved']} and \n# the user question: Find the athlete with the highest value for the \"Endurance\" performance metric who has a \"Strong\" level in the \"Visualization\" mental skill and a goal related to \"Endurance\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the athlete with the highest value for the \"Endurance\" performance metric who has a \"Strong\" level in the \"Visualization\" mental skill and a goal related to \"Endurance\".",
        "output": "SELECT athletes.name, athlete_metrics.value FROM athletes INNER JOIN athlete_metrics ON athletes.athlete_id = athlete_metrics.athlete_id INNER JOIN performance_metrics ON athlete_metrics.metric_id = performance_metrics.metric_id INNER JOIN athlete_goals ON athletes.athlete_id = athlete_goals.athlete_id INNER JOIN goals ON athlete_goals.goal_id = goals.goal_id INNER JOIN athlete_skills ON athletes.athlete_id = athlete_skills.athlete_id INNER JOIN mental_skills ON athlete_skills.skill_id = mental_skills.skill_id WHERE performance_metrics.metric_name = 'Endurance' AND mental_skills.skill_name = 'Visualization' AND athlete_skills.skill_level = 'Strong' AND goals.goal_name = 'Endurance' ORDER BY athlete_metrics.value DESC LIMIT 1;",
        "schema": "sports_psychology",
        "processed_schema_content": {
            "athletes": [
                "name",
                "athlete_id",
                "team_id",
                "last_name",
                "athlete_name",
                "age"
            ],
            "athlete_metrics": [
                "metric_name",
                "athlete_id",
                "value",
                "metric_id"
            ],
            "performance_metrics": [
                "metric_name",
                "metric_id"
            ],
            "athlete_skills": [
                "skill_id",
                "athlete_id",
                "skill_level",
                "skill_mastered",
                "self_talk",
                "mental_preparation",
                "imagery",
                "goal_setting",
                "anxiety",
                "focus",
                "mental_toughness",
                "confidence",
                "motivation"
            ],
            "mental_skills": [
                "skill_id",
                "skill_name",
                "skill_description",
                "athlete_id",
                "Focus",
                "Visualization",
                "skill_mastered",
                "skill_level",
                "Excellent",
                "High",
                "Low"
            ],
            "goals": [
                "goal_id",
                "goal_name",
                "goal_rating",
                "skill_id"
            ],
            "athlete_goals": [
                "goal_id",
                "athlete_id",
                "goal_achieved",
                "goal_date",
                "date_achieved"
            ]
        }
    },
    {
        "id": 75,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Teams': ['team_name', 'team_id', 'conference_id', 'division_id', 'last_season', 'first_season', 'city_id', 'division_name', 'conference_name', 'season_id', 'head_coach_id', 'city', 'start_date', 'wins', 'losse', 'home_team_id', 'State', 'Golden', 'Warriors', 'away_team_id', 'coach_id', 'conference', 'playoff_record', 'num_mvp', 'year_founded', 'arena_id', 'player_id', 'year_end', 'winning_team_id', 'end_date', 'num_wins', 'opponent_name', 'Name', 'ID', 'Abbreviation', 'City', 'Color', 'Coach', 'Team_ID', 'Team_Name'], 'Championships': ['team_id', 'season_id', 'championship_id', 'place', 'num_games', 'coach_id', 'playoff_record', 'championships', 'championship_year', 'player_id', 'conference', 'wins', 'win', 'round', 'year', 'finals_mvp_id', 'home_team_id', 'series_id', 'championship_series', 'away_team_id']} and \n# the user question: Find the teams that have played at least 10 NBA Finals games.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the teams that have played at least 10 NBA Finals games.",
        "output": "SELECT Teams.team_name, COUNT(*) AS finals_games FROM Teams JOIN Championships ON Teams.team_id = Championships.team_id WHERE Championships.round = 'NBA Finals' GROUP BY Teams.team_id HAVING COUNT(*) >= 10;",
        "schema": "basketball",
        "processed_schema_content": {
            "Teams": [
                "team_name",
                "team_id",
                "conference_id",
                "division_id",
                "last_season",
                "first_season",
                "city_id",
                "division_name",
                "conference_name",
                "season_id",
                "head_coach_id",
                "city",
                "start_date",
                "wins",
                "losse",
                "home_team_id",
                "State",
                "Golden",
                "Warriors",
                "away_team_id",
                "coach_id",
                "conference",
                "playoff_record",
                "num_mvp",
                "year_founded",
                "arena_id",
                "player_id",
                "year_end",
                "winning_team_id",
                "end_date",
                "num_wins",
                "opponent_name",
                "Name",
                "ID",
                "Abbreviation",
                "City",
                "Color",
                "Coach",
                "Team_ID",
                "Team_Name"
            ],
            "Championships": [
                "team_id",
                "season_id",
                "championship_id",
                "place",
                "num_games",
                "coach_id",
                "playoff_record",
                "championships",
                "championship_year",
                "player_id",
                "conference",
                "wins",
                "win",
                "round",
                "year",
                "finals_mvp_id",
                "home_team_id",
                "series_id",
                "championship_series",
                "away_team_id"
            ]
        }
    },
    {
        "id": 78,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Clients_Goals': ['goal_id', 'client_id'], 'Goals': ['id', 'name'], 'Billing': ['session_id', 'date', 'amount', 'id', 'start_time', 'end_time'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id']} and \n# the user question: Retrieve the names and total amount billed for all therapists who have billed for sessions with a client who has goals related to managing anxiety, sorted in descending order by total amount billed:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and total amount billed for all therapists who have billed for sessions with a client who has goals related to managing anxiety, sorted in descending order by total amount billed:",
        "output": "SELECT t.name, SUM(b.amount) AS total_billed FROM Therapists t INNER JOIN Sessions s ON t.id = s.therapist_id INNER JOIN Billing b ON s.id = b.session_id INNER JOIN Session_Attendees sa ON s.id = sa.session_id INNER JOIN Clients c ON sa.client_id = c.id INNER JOIN Clients_Goals cg ON c.id = cg.client_id INNER JOIN Goals g ON cg.goal_id = g.id WHERE g.name = 'Manage Anxiety' GROUP BY t.id ORDER BY total_billed DESC",
        "schema": "counseling",
        "processed_schema_content": {
            "Clients": [
                "email",
                "phone_number",
                "id",
                "name",
                "date_of_birth",
                "gender",
                "referral_source_id",
                "primary_care_physician_id",
                "substance_abuse_history",
                "depression_history",
                "trauma_history",
                "ptsd_diagnosis",
                "addiction_history",
                "personality_disorder_history",
                "eating_disorder_history",
                "bipolar_history",
                "schizophrenia_history",
                "self_harm_history",
                "anxiety_history",
                "eating_disorders_history",
                "alcoholism_history",
                "gambling_addiction_history",
                "smoking_addiction_history",
                "alcohol_addiction_history",
                "drug_addiction_history",
                "sex_addiction_history",
                "ptsd_history",
                "ocd_history",
                "suicidal_ideation_history",
                "age",
                "phone",
                "balance_owing",
                "contact_number"
            ],
            "Sessions": [
                "therapist_id",
                "client_id",
                "id",
                "date",
                "location",
                "name",
                "duration",
                "therapy_type_id",
                "cost",
                "start_time",
                "session_type",
                "rate",
                "",
                "SessionNotes",
                "SessionID",
                "SessionDate",
                "CounselorID"
            ],
            "Therapists": [
                "id",
                "name",
                "gender",
                "email",
                "phone",
                "license_state",
                "experience_years",
                "last_name",
                "is_active",
                "is_licensed",
                "rate_per_hour"
            ],
            "Clients_Goals": [
                "goal_id",
                "client_id"
            ],
            "Goals": [
                "id",
                "name"
            ],
            "Billing": [
                "session_id",
                "date",
                "amount",
                "id",
                "start_time",
                "end_time"
            ],
            "Session_Attendees": [
                "session_id",
                "client_id",
                "attendee_type",
                "attended",
                "id"
            ]
        }
    },
    {
        "id": 81,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Recipients': ['name', 'email', 'campaign_id', 'status', 'recipient_id', 'segment_id', 'list_id', 'last_opened_at', 'city', 'country', 'state', 'last_clicked_at', 'created_at', 'subscribed_at'], 'Campaigns': ['name', 'campaign_id', 'limited', 'Sale', 't', 'our', 'miss', 'content', 'subject', 'user_id', 'segment_id', 'list_id', 'workflow_id', 'email_template_id', 'scheduled_at', 'created_at', 'sent_at'], 'Unsubscribes': ['user_id', 'email', 'unsubscribed_at', 'recipient_id', 'list_id', 'created_at', 'campaign_id']} and \n# the user question: Retrieve the email and number of emails sent for all recipients who have been sent a campaign in the past week and have also unsubscribed from at least one campaign.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the email and number of emails sent for all recipients who have been sent a campaign in the past week and have also unsubscribed from at least one campaign.",
        "output": "SELECT r.email, COUNT(*) AS num_emails_sent FROM Recipients r JOIN Campaigns c ON r.campaign_id = c.campaign_id AND c.sent_at >= date('now', '-7 days') JOIN Unsubscribes u ON r.recipient_id = u.recipient_id GROUP BY r.recipient_id;",
        "schema": "email_marketing",
        "processed_schema_content": {
            "Recipients": [
                "name",
                "email",
                "campaign_id",
                "status",
                "recipient_id",
                "segment_id",
                "list_id",
                "last_opened_at",
                "city",
                "country",
                "state",
                "last_clicked_at",
                "created_at",
                "subscribed_at"
            ],
            "Campaigns": [
                "name",
                "campaign_id",
                "limited",
                "Sale",
                "t",
                "our",
                "miss",
                "content",
                "subject",
                "user_id",
                "segment_id",
                "list_id",
                "workflow_id",
                "email_template_id",
                "scheduled_at",
                "created_at",
                "sent_at"
            ],
            "Unsubscribes": [
                "user_id",
                "email",
                "unsubscribed_at",
                "recipient_id",
                "list_id",
                "created_at",
                "campaign_id"
            ]
        }
    },
    {
        "id": 82,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['username', 'user_id', 'address_id', 'work_address_id', 'last_active_date', 'home_address_id', 'last_activity_date', 'registration_date', 'email', 'total_purchase_amount', 'user_type_id', 'country', 'name'], 'Orders': ['order_date', 'order_id', 'address_id', 'user_id', 'order_total', 'shipping_status', 'shipping_address_id'], 'Addresses': ['state_id', 'address_id', 'city', 'street_address', 'city_id', 'country_id'], 'States': ['country_id', 'state_id', 'state_name', 'sales_tax_rate', 'population_density', 'time_zone', 'population', 'state_code'], 'Countries': ['country_name', 'country_id', 'population', 'continent', 'country_code', 'name', 'region_id'], 'Payment_details': ['order_id', 'payment_id'], 'Payment_methods': ['payment_type', 'payment_id']} and \n# the user question: Get the details of all orders that have been placed by users who have made at least one purchase using a payment method that has 'Amazon Pay' in its name and have been shipped to an address in a country that has a country code of 'IN':,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the details of all orders that have been placed by users who have made at least one purchase using a payment method that has 'Amazon Pay' in its name and have been shipped to an address in a country that has a country code of 'IN':",
        "output": "SELECT Orders.order_id, Users.username, Addresses.street_address, Addresses.city, States.state_name, Countries.country_name, Payment_methods.payment_type FROM Orders INNER JOIN Users ON Orders.user_id = Users.user_id INNER JOIN Addresses ON Orders.shipping_address_id = Addresses.address_id INNER JOIN States ON Addresses.state_id = States.state_id INNER JOIN Countries ON States.country_id = Countries.country_id INNER JOIN Payment_details ON Orders.order_id = Payment_details.order_id INNER JOIN Payment_methods ON Payment_details.payment_id = Payment_methods.payment_id WHERE Payment_methods.payment_type LIKE '%Amazon Pay%' AND Countries.country_code = 'IN';",
        "schema": "illustration",
        "processed_schema_content": {
            "Users": [
                "username",
                "user_id",
                "address_id",
                "work_address_id",
                "last_active_date",
                "home_address_id",
                "last_activity_date",
                "registration_date",
                "email",
                "total_purchase_amount",
                "user_type_id",
                "country",
                "name"
            ],
            "Orders": [
                "order_date",
                "order_id",
                "address_id",
                "user_id",
                "order_total",
                "shipping_status",
                "shipping_address_id"
            ],
            "Addresses": [
                "state_id",
                "address_id",
                "city",
                "street_address",
                "city_id",
                "country_id"
            ],
            "States": [
                "country_id",
                "state_id",
                "state_name",
                "sales_tax_rate",
                "population_density",
                "time_zone",
                "population",
                "state_code"
            ],
            "Countries": [
                "country_name",
                "country_id",
                "population",
                "continent",
                "country_code",
                "name",
                "region_id"
            ],
            "Payment_details": [
                "order_id",
                "payment_id"
            ],
            "Payment_methods": [
                "payment_type",
                "payment_id"
            ]
        }
    },
    {
        "id": 84,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EnergySources': ['source_id', 'source_name', 'last_active', 'Solar', 'Panels', 'supplier_id', 'start_date', 'end_date', 'product_id', 'source_type', 'capacity', 'source_capacity', 'user_id'], 'EnergyProduction': ['source_id', 'end_date', 'start_date', 'production_value', 'reading_id', 'meter_id', 'production_date']} and \n# the user question: Retrieve the names of all energy sources and their respective production values for the year 2080, where the source type is \"solar\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all energy sources and their respective production values for the year 2080, where the source type is \"solar\".",
        "output": "SELECT s.source_name, SUM(p.production_value) AS total_production FROM EnergySources s INNER JOIN EnergyProduction p ON s.source_id = p.source_id WHERE s.source_type = 'solar' AND p.production_date >= '2080-01-01' AND p.production_date <= '2080-12-31' GROUP BY s.source_id;",
        "schema": "energy",
        "processed_schema_content": {
            "EnergySources": [
                "source_id",
                "source_name",
                "last_active",
                "Solar",
                "Panels",
                "supplier_id",
                "start_date",
                "end_date",
                "product_id",
                "source_type",
                "capacity",
                "source_capacity",
                "user_id"
            ],
            "EnergyProduction": [
                "source_id",
                "end_date",
                "start_date",
                "production_value",
                "reading_id",
                "meter_id",
                "production_date"
            ]
        }
    },
    {
        "id": 85,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'price', 'manufacturer_id', 'avg_rating', 'color', 'category_id', 'review_count', 'quantity', 'max_rating', 'min_rating', 'max_review_count'], 'OrderItems': ['product_id', 'order_id', 'quantity', 'price', 'order_item_id', 'customer_id']} and \n# the user question: \"Retrieve the top 3 most purchased products along with the total quantity sold.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Retrieve the top 3 most purchased products along with the total quantity sold.\"",
        "output": "SELECT p.product_id, p.product_name, SUM(oi.quantity) AS total_quantity_sold FROM Products p JOIN OrderItems oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.product_name ORDER BY total_quantity_sold DESC LIMIT 3;",
        "schema": "technology",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "price",
                "manufacturer_id",
                "avg_rating",
                "color",
                "category_id",
                "review_count",
                "quantity",
                "max_rating",
                "min_rating",
                "max_review_count"
            ],
            "OrderItems": [
                "product_id",
                "order_id",
                "quantity",
                "price",
                "order_item_id",
                "customer_id"
            ]
        }
    },
    {
        "id": 87,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'status', 'location', 'deadline', 'name', 'description', 'id', 'budget', 'client_id', 'completion_date'], 'Tasks': ['task_id', 'task_name', 'project_id', 'start_date', 'end_date', 'status', 'assigned_to', 'created_by', 'created_date', 'due_date', 'completed_date', 'completed_by', 'department_id', 'priority', 'duration', 'Complete', 'completion_date', 'estimated_duration', 'completed_on', 'name', 'task_type', 'id', 'completed', 'actual_duration', 'budget', 'description', 'open_date']} and \n# the user question: Example 4: Retrieve the names and total duration of projects that have at least one task that is overdue,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Example 4: Retrieve the names and total duration of projects that have at least one task that is overdue",
        "output": "SELECT Projects.project_name, SUM(Tasks.duration) as total_duration FROM Projects INNER JOIN Tasks ON Projects.project_id = Tasks.project_id WHERE Tasks.due_date < DATE('now') AND Tasks.status != 'Complete' GROUP BY Projects.project_id;",
        "schema": "project_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "status",
                "location",
                "deadline",
                "name",
                "description",
                "id",
                "budget",
                "client_id",
                "completion_date"
            ],
            "Tasks": [
                "task_id",
                "task_name",
                "project_id",
                "start_date",
                "end_date",
                "status",
                "assigned_to",
                "created_by",
                "created_date",
                "due_date",
                "completed_date",
                "completed_by",
                "department_id",
                "priority",
                "duration",
                "Complete",
                "completion_date",
                "estimated_duration",
                "completed_on",
                "name",
                "task_type",
                "id",
                "completed",
                "actual_duration",
                "budget",
                "description",
                "open_date"
            ]
        }
    },
    {
        "id": 88,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Authors': ['first_name', 'author_id', 'last_name', 'nationality', 'author_name', 'author_city', 'AuthorID', 'AuthorName'], 'Customers': ['customer_id', 'email', 'first_name', 'last_name', 'country_id', 'address', 'city', 'country', 'state', 'loyalty_level', 'York', 'customer_name', 'customer_city', 'phone', 'subscribed_to_newsletter', 'has_ordered_online'], 'Order_Items': ['price', 'quantity', 'order_id', 'book_id', 'customer_id', 'publisher_id', 'is_returned', 'product_id', 'is_delivered', 'total_price', 'order_date'], 'Orders': ['order_date', 'order_id', 'customer_id', 'coupon_code', 'total_cost', 'total_quantity', 'shipping_address_id', 'total_price', 'total_amount', 'salesperson_id', 'book_id', 'channel_id', 'Order_Date', 'Order_Total', 'Customer_Name']} and \n# the user question: Retrieve the names and email addresses of customers who have placed orders for books written by authors who have received an average rating of at least 4.5.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of customers who have placed orders for books written by authors who have received an average rating of at least 4.5.",
        "output": "SELECT DISTINCT c.first_name, c.last_name, c.email FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Books b ON oi.book_id = b.book_id JOIN Authors a ON b.author_id = a.author_id WHERE a.author_id IN ( SELECT b.author_id FROM Books b GROUP BY b.author_id HAVING AVG(b.avg_rating) >= 4.5 );",
        "schema": "marketing_books",
        "processed_schema_content": {
            "Books": [
                "book_id",
                "title",
                "publisher_id",
                "publication_date",
                "author_id",
                "price",
                "publication_year",
                "publisher",
                "stock",
                "genre",
                "series",
                "year_published",
                "release_date",
                "word_count",
                "avg_rating",
                "A001",
                "genre_id",
                "stock_count",
                "category_id",
                "book_title",
                "rating",
                "available_for_purchase",
                "BookID",
                "BookTitle",
                "PublicationYear",
                "PublisherID",
                "Price"
            ],
            "Authors": [
                "first_name",
                "author_id",
                "last_name",
                "nationality",
                "author_name",
                "author_city",
                "AuthorID",
                "AuthorName"
            ],
            "Customers": [
                "customer_id",
                "email",
                "first_name",
                "last_name",
                "country_id",
                "address",
                "city",
                "country",
                "state",
                "loyalty_level",
                "York",
                "customer_name",
                "customer_city",
                "phone",
                "subscribed_to_newsletter",
                "has_ordered_online"
            ],
            "Order_Items": [
                "price",
                "quantity",
                "order_id",
                "book_id",
                "customer_id",
                "publisher_id",
                "is_returned",
                "product_id",
                "is_delivered",
                "total_price",
                "order_date"
            ],
            "Orders": [
                "order_date",
                "order_id",
                "customer_id",
                "coupon_code",
                "total_cost",
                "total_quantity",
                "shipping_address_id",
                "total_price",
                "total_amount",
                "salesperson_id",
                "book_id",
                "channel_id",
                "Order_Date",
                "Order_Total",
                "Customer_Name"
            ]
        }
    },
    {
        "id": 90,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Illustrations': ['user_id', 'illustration_id', 'upload_date', 'title', 'price', 'category_id', 'discount', 'creation_date', 'artist_id', 'description'], 'Users': ['username', 'user_id', 'address_id', 'work_address_id', 'last_active_date', 'home_address_id', 'last_activity_date', 'registration_date', 'email', 'total_purchase_amount', 'user_type_id', 'country', 'name'], 'Purchase': ['user_id', 'purchase_price', 'purchase_date', 'illustration_id', 'purchase_id', 'order_id', 'shipping_address_id', 'total_amount', 'COUNT###', 'price', 'quantity', 'category_id', 'amount', 'date'], 'Orders': ['order_date', 'order_id', 'address_id', 'user_id', 'order_total', 'shipping_status', 'shipping_address_id'], 'Addresses': ['state_id', 'address_id', 'city', 'street_address', 'city_id', 'country_id'], 'States': ['country_id', 'state_id', 'state_name', 'sales_tax_rate', 'population_density', 'time_zone', 'population', 'state_code'], 'Countries': ['country_name', 'country_id', 'population', 'continent', 'country_code', 'name', 'region_id']} and \n# the user question: Get the details of all illustrations that have been uploaded by users who live in the United States and have been purchased at least once:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the details of all illustrations that have been uploaded by users who live in the United States and have been purchased at least once:",
        "output": "SELECT Illustrations.title, Users.username, Illustrations.upload_date, Purchase.purchase_price FROM Illustrations INNER JOIN Users ON Illustrations.user_id = Users.user_id INNER JOIN Purchase ON Illustrations.illustration_id = Purchase.illustration_id INNER JOIN Orders ON Purchase.order_id = Orders.order_id INNER JOIN Addresses ON Orders.shipping_address_id = Addresses.address_id INNER JOIN States ON Addresses.state_id = States.state_id INNER JOIN Countries ON States.country_id = Countries.country_id WHERE Countries.country_name = 'United States';",
        "schema": "illustration",
        "processed_schema_content": {
            "Illustrations": [
                "user_id",
                "illustration_id",
                "upload_date",
                "title",
                "price",
                "category_id",
                "discount",
                "creation_date",
                "artist_id",
                "description"
            ],
            "Users": [
                "username",
                "user_id",
                "address_id",
                "work_address_id",
                "last_active_date",
                "home_address_id",
                "last_activity_date",
                "registration_date",
                "email",
                "total_purchase_amount",
                "user_type_id",
                "country",
                "name"
            ],
            "Purchase": [
                "user_id",
                "purchase_price",
                "purchase_date",
                "illustration_id",
                "purchase_id",
                "order_id",
                "shipping_address_id",
                "total_amount",
                "COUNT###",
                "price",
                "quantity",
                "category_id",
                "amount",
                "date"
            ],
            "Orders": [
                "order_date",
                "order_id",
                "address_id",
                "user_id",
                "order_total",
                "shipping_status",
                "shipping_address_id"
            ],
            "Addresses": [
                "state_id",
                "address_id",
                "city",
                "street_address",
                "city_id",
                "country_id"
            ],
            "States": [
                "country_id",
                "state_id",
                "state_name",
                "sales_tax_rate",
                "population_density",
                "time_zone",
                "population",
                "state_code"
            ],
            "Countries": [
                "country_name",
                "country_id",
                "population",
                "continent",
                "country_code",
                "name",
                "region_id"
            ]
        }
    },
    {
        "id": 91,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Automotive\" and have spent more than $500,000 on advertising in the past month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Automotive\" and have spent more than $500,000 on advertising in the past month:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 500000 AND Websites.category = 'Automotive' AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        }
    },
    {
        "id": 92,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'game': ['game_mode', 'price', 'name', 'publisher', 'num_players', 'rating', 'platform', 'genre', 'release_year', 'developer', 'platform_count', 'tag', 'game_name', 'release_date', 'multiplayer', 'copies_sold', 'playtime', 'year']} and \n# the user question: List the name, platform and release year of all games that were released in 2019 or earlier, have a genre of 'Role-Playing' and are compatible with 'PC'.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the name, platform and release year of all games that were released in 2019 or earlier, have a genre of 'Role-Playing' and are compatible with 'PC'.",
        "output": "SELECT name, platform, release_year FROM game WHERE release_year <= 2019 AND genre = 'Role-Playing' AND platform LIKE '%PC%';",
        "schema": "game_design",
        "processed_schema_content": {
            "game": [
                "game_mode",
                "price",
                "name",
                "publisher",
                "num_players",
                "rating",
                "platform",
                "genre",
                "release_year",
                "developer",
                "platform_count",
                "tag",
                "game_name",
                "release_date",
                "multiplayer",
                "copies_sold",
                "playtime",
                "year"
            ]
        }
    },
    {
        "id": 93,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'UserPlaylists': ['playlist_id', 'user_id', 'creation_date'], 'Users': ['username', 'user_id'], 'Artists': ['artist_name', 'artist_id', 'artist_genre', 'artist_country', 'country_id', 'genre_id'], 'Tracks': ['track_id', 'track_title', 'duration', 'album_id', 'track_name', 'genre_id', 'rating', 'artist_id', 'release_id'], 'UserFavorites': ['track_id', 'user_id', 'genre_id', 'favorite_date'], 'PlaylistTracks': ['track_id', 'playlist_id']} and \n# the user question: Find the users who have favorited tracks from all artists and have created playlists with a total duration exceeding 3 hours:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have favorited tracks from all artists and have created playlists with a total duration exceeding 3 hours:",
        "output": "SELECT Users.username FROM Users JOIN UserFavorites ON Users.user_id = UserFavorites.user_id JOIN Tracks ON UserFavorites.track_id = Tracks.track_id JOIN Artists ON Tracks.artist_id = Artists.artist_id JOIN UserPlaylists ON Users.user_id = UserPlaylists.user_id JOIN PlaylistTracks ON UserPlaylists.playlist_id = PlaylistTracks.playlist_id JOIN Tracks AS PlaylistTracksTracks ON PlaylistTracks.track_id = PlaylistTracksTracks.track_id GROUP BY Users.user_id HAVING COUNT(DISTINCT Artists.artist_id) = ( SELECT COUNT(DISTINCT artist_id) FROM Artists ) AND SUM(PlaylistTracksTracks.duration) > 10800; -- 10800 seconds = 3 hours",
        "schema": "electronic_music",
        "processed_schema_content": {
            "UserPlaylists": [
                "playlist_id",
                "user_id",
                "creation_date"
            ],
            "Users": [
                "username",
                "user_id"
            ],
            "Artists": [
                "artist_name",
                "artist_id",
                "artist_genre",
                "artist_country",
                "country_id",
                "genre_id"
            ],
            "Tracks": [
                "track_id",
                "track_title",
                "duration",
                "album_id",
                "track_name",
                "genre_id",
                "rating",
                "artist_id",
                "release_id"
            ],
            "UserFavorites": [
                "track_id",
                "user_id",
                "genre_id",
                "favorite_date"
            ],
            "PlaylistTracks": [
                "track_id",
                "playlist_id"
            ]
        }
    },
    {
        "id": 98,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Goals': ['goal_id', 'goal_name', 'goal_description', 'goal_due_date', 'user_id', 'program_id', 'goal_target', 'goal_type', 'goal_end_date', 'goal_target_date', 'goal_start_date', 'goal_status', 'goal_value'], 'Progress': ['progress_id', 'goal_id', 'user_id', 'progress_date', 'progress_value', 'date_recorded']} and \n# the user question: Find the name and email address of the user who has achieved the highest progress towards goals in the last 30 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and email address of the user who has achieved the highest progress towards goals in the last 30 days:",
        "output": "SELECT Users.first_name, Users.last_name, Users.email FROM Users JOIN Goals ON Users.user_id = Goals.user_id JOIN Progress ON Goals.goal_id = Progress.goal_id WHERE Progress.date_recorded BETWEEN DATE('now', '-30 day') AND DATE('now') GROUP BY Users.user_id ORDER BY SUM(Progress.progress_value) DESC LIMIT 1;",
        "schema": "health_and_wellness_programs",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "first_name",
                "last_name",
                "email",
                "password",
                "phone_number",
                "address",
                "age",
                "gender",
                "bmi",
                "goal_id"
            ],
            "Goals": [
                "goal_id",
                "goal_name",
                "goal_description",
                "goal_due_date",
                "user_id",
                "program_id",
                "goal_target",
                "goal_type",
                "goal_end_date",
                "goal_target_date",
                "goal_start_date",
                "goal_status",
                "goal_value"
            ],
            "Progress": [
                "progress_id",
                "goal_id",
                "user_id",
                "progress_date",
                "progress_value",
                "date_recorded"
            ]
        }
    },
    {
        "id": 100,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Tasks': ['start_date', 'task_name', 'due_date', 'end_date', 'task_id', 'priority', 'task_status', 'project_id', 'task_priority_id', 'task_status_id', 'task_start_date', 'task_end_date', 'task_expected_completion_date', 'task_completion_percentage', 'task_estimated_cost', 'task_due_date', 'actual_end_date', 'actual_start_date', 'task_lead_id', 'actual_cost', 'employee_i', 'task_description'], 'Task_Priorities': ['task_priority_id', 'task_priority_name']} and \n# the user question: List all the tasks that have been completed within the last 7 days and have a priority of \"High\" or \"Urgent\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List all the tasks that have been completed within the last 7 days and have a priority of \"High\" or \"Urgent\".",
        "output": "SELECT DISTINCT t.task_name FROM Tasks t INNER JOIN Task_Priorities tp ON t.task_priority_id = tp.task_priority_id WHERE t.task_status = 'Completed' AND tp.task_priority_name IN ('High', 'Urgent') AND (julianday('now') - julianday(t.end_date)) <= 7;",
        "schema": "civil_engineering",
        "processed_schema_content": {
            "Tasks": [
                "start_date",
                "task_name",
                "due_date",
                "end_date",
                "task_id",
                "priority",
                "task_status",
                "project_id",
                "task_priority_id",
                "task_status_id",
                "task_start_date",
                "task_end_date",
                "task_expected_completion_date",
                "task_completion_percentage",
                "task_estimated_cost",
                "task_due_date",
                "actual_end_date",
                "actual_start_date",
                "task_lead_id",
                "actual_cost",
                "employee_i",
                "task_description"
            ],
            "Task_Priorities": [
                "task_priority_id",
                "task_priority_name"
            ]
        }
    },
    {
        "id": 101,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Analyses': ['method_id', 'project_id', 'analysis_id', 'analysis_name', 'dataset_id', 'confidence_score'], 'Results': ['analysis_id', 'result_id', 'report_id', 'result_name']} and \n# the user question: Get the analysis names and the number of results generated for each analysis:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the analysis names and the number of results generated for each analysis:",
        "output": "SELECT Analyses.analysis_name, COUNT(Results.result_id) AS result_count FROM Analyses LEFT JOIN Results ON Analyses.analysis_id = Results.analysis_id GROUP BY Analyses.analysis_id;",
        "schema": "data_analytics",
        "processed_schema_content": {
            "Analyses": [
                "method_id",
                "project_id",
                "analysis_id",
                "analysis_name",
                "dataset_id",
                "confidence_score"
            ],
            "Results": [
                "analysis_id",
                "result_id",
                "report_id",
                "result_name"
            ]
        }
    },
    {
        "id": 102,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue'], 'Watchlist': ['date_added', 'user_id', 'film_id', 'timestamp'], 'Rating': ['user_id', 'film_id', 'score', 'rating', 'rating_id', 'genre_id']} and \n# the user question: Find the films that have been watched by at least 3 users and have a rating higher than 8.0:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the films that have been watched by at least 3 users and have a rating higher than 8.0:",
        "output": "SELECT Film.title FROM Film INNER JOIN Watchlist ON Film.film_id = Watchlist.film_id INNER JOIN Rating ON Film.film_id = Rating.film_id AND Rating.score > 8.0 GROUP BY Film.film_id HAVING COUNT(DISTINCT Watchlist.user_id) > 2;",
        "schema": "action_films",
        "processed_schema_content": {
            "Film": [
                "film_id",
                "title",
                "rating",
                "release_date",
                "runtime",
                "box_office",
                "director_id",
                "duration_minutes",
                "budget",
                "release_year",
                "production_company_id",
                "country_id",
                "year",
                "length",
                "is_sequel",
                "runtime_minutes",
                "awards",
                "revenue"
            ],
            "Watchlist": [
                "date_added",
                "user_id",
                "film_id",
                "timestamp"
            ],
            "Rating": [
                "user_id",
                "film_id",
                "score",
                "rating",
                "rating_id",
                "genre_id"
            ]
        }
    },
    {
        "id": 103,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['salary', 'employee_name', 'employee_id', 'manager_id', 'start_date', 'promotion_date', 'commission_rate', 'department_id', 'hire_date'], 'Sale': ['customer_id', 'employee_id', 'amount', 'sale_date', 'sale_amount', 'product_id', 'sale_id', 'salesperson_id']} and \n# the user question: Find the names of all employees who have made a sale in the current month and the total amount of their sales.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have made a sale in the current month and the total amount of their sales.",
        "output": "SELECT Employee.employee_name, SUM(Sale.amount) AS total_sales FROM Employee INNER JOIN Sale ON Employee.employee_id = Sale.employee_id WHERE strftime('%m', Sale.sale_date) = strftime('%m', 'now') GROUP BY Employee.employee_id;",
        "schema": "economics",
        "processed_schema_content": {
            "Employee": [
                "salary",
                "employee_name",
                "employee_id",
                "manager_id",
                "start_date",
                "promotion_date",
                "commission_rate",
                "department_id",
                "hire_date"
            ],
            "Sale": [
                "customer_id",
                "employee_id",
                "amount",
                "sale_date",
                "sale_amount",
                "product_id",
                "sale_id",
                "salesperson_id"
            ]
        }
    },
    {
        "id": 104,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Employees': ['first_name', 'employee_id', 'last_name', 'hire_date', 'salary', 'job_title_id', 'department_id', 'location_id', 'job_title', 'employee_status_id', 'employee_experience', 'certification_id', 'equipment_rental_cost', 'hourly_rate', 'Salary', 'Department'], 'Project_Employees': ['employee_id', 'project_id', 'end_date'], 'Project_Materials': ['project_id', 'material_id', 'quantity', 'total_quantity'], 'Materials': ['material_id', 'material_name', 'cost_per_unit', 'unit_of_measurement', 'unit_quantity', 'unit_cost', 'quantity', 'unit_price', 'material_type_id', 'quantity_in_stock', 'material_unit', 'quantity_available', 'reorder_level', 'stock_level'], 'Employees_Job_Titles': ['employee_id', 'job_title_id'], 'Job_Titles': ['job_title_name', 'job_title_id', 'Project', 'Manager', 'job_title']} and \n# the user question: List all the projects that involve at least one employee who has a job title of engineer and a salary greater than $70,000 and also involve more than 1000 units of concrete.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List all the projects that involve at least one employee who has a job title of engineer and a salary greater than $70,000 and also involve more than 1000 units of concrete.",
        "output": "SELECT DISTINCT p.project_name FROM Projects p INNER JOIN Project_Employees pe ON p.project_id = pe.project_id INNER JOIN Employees e ON pe.employee_id = e.employee_id INNER JOIN Employees_Job_Titles ejt ON e.employee_id = ejt.employee_id INNER JOIN Job_Titles jt ON ejt.job_title_id = jt.job_title_id INNER JOIN Project_Materials pm ON p.project_id = pm.project_id INNER JOIN Materials m ON pm.material_id = m.material_id WHERE m.material_name = 'Concrete' AND pm.quantity > 1000 AND jt.job_title_name = 'Engineer' AND e.salary > 70000 GROUP BY p.project_id;",
        "schema": "civil_engineering",
        "processed_schema_content": {
            "Projects": [
                "project_name",
                "project_id",
                "end_date",
                "start_date",
                "square_footage",
                "status",
                "project_manager_id",
                "project_status_id",
                "project_completion_date",
                "project_start_date",
                "project_budget",
                "project_end_date",
                "project_deadline",
                "project_location",
                "supervisor_id",
                "completion_date",
                "Expansion",
                "Highway",
                "Construction",
                "Building",
                "Office",
                "budget",
                "actual_end_date",
                "actual_start_date",
                "State",
                "Project_ID",
                "Name",
                "Status",
                "Start_Date",
                "expected_completion_date",
                "Completion_Date",
                "Actual_Costs",
                "Project_Name",
                "Budget",
                "Client_ID",
                "cost",
                "name",
                "id"
            ],
            "Employees": [
                "first_name",
                "employee_id",
                "last_name",
                "hire_date",
                "salary",
                "job_title_id",
                "department_id",
                "location_id",
                "job_title",
                "employee_status_id",
                "employee_experience",
                "certification_id",
                "equipment_rental_cost",
                "hourly_rate",
                "Salary",
                "Department"
            ],
            "Project_Employees": [
                "employee_id",
                "project_id",
                "end_date"
            ],
            "Project_Materials": [
                "project_id",
                "material_id",
                "quantity",
                "total_quantity"
            ],
            "Materials": [
                "material_id",
                "material_name",
                "cost_per_unit",
                "unit_of_measurement",
                "unit_quantity",
                "unit_cost",
                "quantity",
                "unit_price",
                "material_type_id",
                "quantity_in_stock",
                "material_unit",
                "quantity_available",
                "reorder_level",
                "stock_level"
            ],
            "Employees_Job_Titles": [
                "employee_id",
                "job_title_id"
            ],
            "Job_Titles": [
                "job_title_name",
                "job_title_id",
                "Project",
                "Manager",
                "job_title"
            ]
        }
    },
    {
        "id": 110,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'users': ['username', 'user_id'], 'students': ['student_id', 'user_id', 'city_id'], 'event_attendees': ['student_id', 'event_id', 'class_id'], 'rankings': ['student_id', 'rank', 'date_earned', 'rank_name']} and \n# the user question: Find the names of all students who have attended at least one event and earned a ranking of \"Black Belt\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all students who have attended at least one event and earned a ranking of \"Black Belt\":",
        "output": "SELECT users.username FROM users INNER JOIN students ON users.user_id = students.user_id INNER JOIN event_attendees ON students.student_id = event_attendees.student_id INNER JOIN rankings ON students.student_id = rankings.student_id WHERE rankings.rank = 'Black Belt' AND event_attendees.event_id IS NOT NULL;",
        "schema": "tai_chi",
        "processed_schema_content": {
            "users": [
                "username",
                "user_id"
            ],
            "students": [
                "student_id",
                "user_id",
                "city_id"
            ],
            "event_attendees": [
                "student_id",
                "event_id",
                "class_id"
            ],
            "rankings": [
                "student_id",
                "rank",
                "date_earned",
                "rank_name"
            ]
        }
    },
    {
        "id": 111,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'email', 'username', 'johnD'], 'Trips': ['vehicle_id', 'distance', 'user_id', 'end_time', 'start_time', 'end_location', 'duration', 'start_location', 'trip_id', 'end_location_id', 'timestamp', 'fuel_consumption'], 'Vehicles': ['type', 'user_id', 'model', 'vehicle_id', 'color']} and \n# the user question: Retrieve the usernames and the maximum duration of trips for each user who owns a vehicle of type 'Motorcycle',\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the usernames and the maximum duration of trips for each user who owns a vehicle of type 'Motorcycle'",
        "output": "SELECT u.username, MAX(t.duration) AS max_duration FROM Users u JOIN Vehicles v ON u.user_id = v.user_id JOIN Trips t ON v.vehicle_id = t.vehicle_id WHERE v.type = 'Motorcycle' GROUP BY u.username;",
        "schema": "smart_transportation",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "email",
                "username",
                "johnD"
            ],
            "Trips": [
                "vehicle_id",
                "distance",
                "user_id",
                "end_time",
                "start_time",
                "end_location",
                "duration",
                "start_location",
                "trip_id",
                "end_location_id",
                "timestamp",
                "fuel_consumption"
            ],
            "Vehicles": [
                "type",
                "user_id",
                "model",
                "vehicle_id",
                "color"
            ]
        }
    },
    {
        "id": 112,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Items': ['item_id', 'game_id'], 'Items': ['item_name', 'item_id', 'item_description', 'rarity_id'], 'Game_Levels': ['level_id', 'game_id'], 'Levels': ['level_name', 'level_id', 'difficulty_id', 'duration_id']} and \n# the user question: Find the names of all games that have a level with a name containing \"jungle\" and an item with a name containing \"sword\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all games that have a level with a name containing \"jungle\" and an item with a name containing \"sword\".",
        "output": "SELECT DISTINCT Games.game_title FROM Games INNER JOIN Game_Levels ON Games.game_id = Game_Levels.game_id INNER JOIN Levels ON Game_Levels.level_id = Levels.level_id INNER JOIN Game_Items ON Games.game_id = Game_Items.game_id INNER JOIN Items ON Game_Items.item_id = Items.item_id WHERE Levels.level_name LIKE '%jungle%' AND Items.item_name LIKE '%sword%';",
        "schema": "game_design",
        "processed_schema_content": {
            "Games": [
                "game_id",
                "game_title",
                "game_publisher",
                "game_release_date",
                "game_developer"
            ],
            "Game_Items": [
                "item_id",
                "game_id"
            ],
            "Items": [
                "item_name",
                "item_id",
                "item_description",
                "rarity_id"
            ],
            "Game_Levels": [
                "level_id",
                "game_id"
            ],
            "Levels": [
                "level_name",
                "level_id",
                "difficulty_id",
                "duration_id"
            ]
        }
    },
    {
        "id": 113,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Screens': ['screen_description', 'screen_name', 'project_id', 'screen_id', 'template_id'], 'Components': ['New Component Name', 'component_name', 'component_id', 'component_type', 'screen_id', 'Label', 'component_label', 'screen_name'], 'Component_Properties': ['property_name', 'property_value', 'component_id', 'property_id']} and \n# the user question: Retrieve the screen_name and number of \"Drop-down\" components for each screen in the database that have a \"Label\" property containing the word \"Category\" and a \"Default value\" property set to \"All\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the screen_name and number of \"Drop-down\" components for each screen in the database that have a \"Label\" property containing the word \"Category\" and a \"Default value\" property set to \"All\".",
        "output": "SELECT Screens.screen_name, COUNT(Components.component_id) AS num_drop_downs FROM Screens INNER JOIN Components ON Screens.screen_id = Components.screen_id INNER JOIN Component_Properties ON Components.component_id = Component_Properties.component_id WHERE Components.component_type = 'Drop-down' AND Component_Properties.property_name = 'Label' AND Component_Properties.property_value LIKE '%Category%' AND Component_Properties.property_name = 'Default value' AND Component_Properties.property_value = 'All' GROUP BY Screens.screen_id;",
        "schema": "user_interface_design",
        "processed_schema_content": {
            "Screens": [
                "screen_description",
                "screen_name",
                "project_id",
                "screen_id",
                "template_id"
            ],
            "Components": [
                "New Component Name",
                "component_name",
                "component_id",
                "component_type",
                "screen_id",
                "Label",
                "component_label",
                "screen_name"
            ],
            "Component_Properties": [
                "property_name",
                "property_value",
                "component_id",
                "property_id"
            ]
        }
    },
    {
        "id": 114,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Documentary_Films': ['length', 'rating', 'title', 'film_id', 'release_date', 'director_id', 'runtime', 'production_company_id', 'duration', 'runtime_minutes', 'duration_minutes', 'tagline', 'release_year'], 'Production_Companies': ['company_id', 'company_name', 'production_company_id', 'production_company_name', 'country', 'production_name', 'production_id', 'region', 'name'], 'Film_Topics_Map': ['topic_id', 'film_id'], 'Topics': ['topic_id', 'topic_name']} and \n# the user question: Find the names and release dates of all documentary films that have a topic related to sports and were produced by ESPN.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and release dates of all documentary films that have a topic related to sports and were produced by ESPN.",
        "output": "SELECT DISTINCT Documentary_Films.title, Documentary_Films.release_date FROM Documentary_Films JOIN Film_Topics_Map ON Documentary_Films.film_id = Film_Topics_Map.film_id JOIN Topics ON Film_Topics_Map.topic_id = Topics.topic_id JOIN Production_Companies ON Documentary_Films.production_company_id = Production_Companies.production_company_id WHERE Topics.topic_name = 'Sports' AND Production_Companies.production_company_name = 'ESPN';",
        "schema": "documentary_films",
        "processed_schema_content": {
            "Documentary_Films": [
                "length",
                "rating",
                "title",
                "film_id",
                "release_date",
                "director_id",
                "runtime",
                "production_company_id",
                "duration",
                "runtime_minutes",
                "duration_minutes",
                "tagline",
                "release_year"
            ],
            "Production_Companies": [
                "company_id",
                "company_name",
                "production_company_id",
                "production_company_name",
                "country",
                "production_name",
                "production_id",
                "region",
                "name"
            ],
            "Film_Topics_Map": [
                "topic_id",
                "film_id"
            ],
            "Topics": [
                "topic_id",
                "topic_name"
            ]
        }
    },
    {
        "id": 115,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'appointments': ['appointment_id', 'therapist_id', 'appointment_date', 'patient_id', 'end_time', 'start_time', 'session_duration_minutes', 'session_cost', 'satisfaction_rating', 'is_missed', 'sessions_per_week', 'session_length_minutes', 'start_date', 'attended', 'end_date', 'therapy_id'], 'sessions': ['session_date', 'appointment_id', 'session_length', 'session_id', 'duration_minutes', 'end_date', 'start_date'], 'patients': ['email', 'phone_number', 'last_name', 'patient_id', 'first_name', 'date_of_birth', 'gender', 'birthdate', 'start_date', 'session_count', 'age', 'therapy_start_date', 'birth_date'], 'payments': ['payment_id', 'payment_date', 'patient_id', 'payment_amount', 'appointment_count', 'therapist_id', 'appointment_id', 'price']} and \n# the user question: Retrieve the names of the patients who have not attended any sessions in the past month and have not made any payments in the past 2 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of the patients who have not attended any sessions in the past month and have not made any payments in the past 2 months.",
        "output": "SELECT DISTINCT p.first_name || ' ' || p.last_name AS patient_name FROM patients p LEFT JOIN appointments a ON a.patient_id = p.patient_id AND a.appointment_date >= DATE('now', '-1 month') LEFT JOIN sessions s ON s.appointment_id = a.appointment_id AND s.session_date >= DATE('now', '-1 month') LEFT JOIN payments py ON py.patient_id = p.patient_id AND py.payment_date >= DATE('now', '-2 month') WHERE s.session_id IS NULL AND py.payment_id IS NULL;",
        "schema": "psychotherapy",
        "processed_schema_content": {
            "appointments": [
                "appointment_id",
                "therapist_id",
                "appointment_date",
                "patient_id",
                "end_time",
                "start_time",
                "session_duration_minutes",
                "session_cost",
                "satisfaction_rating",
                "is_missed",
                "sessions_per_week",
                "session_length_minutes",
                "start_date",
                "attended",
                "end_date",
                "therapy_id"
            ],
            "sessions": [
                "session_date",
                "appointment_id",
                "session_length",
                "session_id",
                "duration_minutes",
                "end_date",
                "start_date"
            ],
            "patients": [
                "email",
                "phone_number",
                "last_name",
                "patient_id",
                "first_name",
                "date_of_birth",
                "gender",
                "birthdate",
                "start_date",
                "session_count",
                "age",
                "therapy_start_date",
                "birth_date"
            ],
            "payments": [
                "payment_id",
                "payment_date",
                "patient_id",
                "payment_amount",
                "appointment_count",
                "therapist_id",
                "appointment_id",
                "price"
            ]
        }
    },
    {
        "id": 116,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Sites': ['site_id', 'name', 'location', 'date_discovered', 'excavated_by', 'culture_id', 'description'], 'Excavations': ['excavation_id', 'site_id', 'start_date', 'end_date', 'description', 'excavated_by'], 'Artifacts': ['artifact_id', 'excavation_id', 'name', 'type', 'description', 'weight'], 'Cultures': ['culture_id', 'name', 'region', 'time_period']} and \n# the user question: Find the average weight of artifacts discovered at sites located in the region 'Central Asia':,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average weight of artifacts discovered at sites located in the region 'Central Asia':",
        "output": "SELECT AVG(Artifacts.weight) AS average_weight FROM Artifacts JOIN Excavations ON Artifacts.excavation_id = Excavations.excavation_id JOIN Sites ON Excavations.site_id = Sites.site_id JOIN Cultures ON Sites.site_id = Cultures.culture_id WHERE Cultures.region = 'Central Asia';",
        "schema": "anthropology",
        "processed_schema_content": {
            "Sites": [
                "site_id",
                "name",
                "location",
                "date_discovered",
                "excavated_by",
                "culture_id",
                "description"
            ],
            "Excavations": [
                "excavation_id",
                "site_id",
                "start_date",
                "end_date",
                "description",
                "excavated_by"
            ],
            "Artifacts": [
                "artifact_id",
                "excavation_id",
                "name",
                "type",
                "description",
                "weight"
            ],
            "Cultures": [
                "culture_id",
                "name",
                "region",
                "time_period"
            ]
        }
    },
    {
        "id": 118,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'books': ['book_id', 'title', 'isbn', 'publisher_id', 'description', 'publish_date', 'publication_date', 'price', 'publisher', 'publication_year', 'language', 'author_id', 'book_title', 'language_id', 'category', 'author', 'year_published', 'num_pages', 'rating'], 'reviews': ['review_id', 'book_id', 'user_id', 'rating', 'review_text', 'review_date', 'author_id', 'user_country', 'genre_id', 'language_id', 'product_id'], 'users': ['user_id', 'username', 'email', 'password_hash', 'state', 'first_name', 'last_name', 'country', 'city'], 'genres': ['genre', 'genre_id', 'genre_name', 'Psychology'], 'book_genres': ['book_id', 'genre_id']} and \n# the user question: Find the users who have written reviews for all of the books in the \"Cognitive Psychology\" genre, along with the average rating of their reviews.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have written reviews for all of the books in the \"Cognitive Psychology\" genre, along with the average rating of their reviews.",
        "output": "SELECT users.user_id, users.first_name, users.last_name, AVG(reviews.rating) AS avg_rating FROM users JOIN reviews ON users.user_id = reviews.user_id JOIN books ON reviews.book_id = books.book_id JOIN book_genres ON books.book_id = book_genres.book_id JOIN genres ON book_genres.genre_id = genres.genre_id WHERE genres.genre_name = 'Cognitive Psychology' GROUP BY users.user_id HAVING COUNT(DISTINCT reviews.book_id) = ( SELECT COUNT(books.book_id) FROM books JOIN book_genres ON books.book_id = book_genres.book_id JOIN genres ON book_genres.genre_id = genres.genre_id WHERE genres.genre_name = 'Cognitive Psychology' )",
        "schema": "psychology_books",
        "processed_schema_content": {
            "books": [
                "book_id",
                "title",
                "isbn",
                "publisher_id",
                "description",
                "publish_date",
                "publication_date",
                "price",
                "publisher",
                "publication_year",
                "language",
                "author_id",
                "book_title",
                "language_id",
                "category",
                "author",
                "year_published",
                "num_pages",
                "rating"
            ],
            "reviews": [
                "review_id",
                "book_id",
                "user_id",
                "rating",
                "review_text",
                "review_date",
                "author_id",
                "user_country",
                "genre_id",
                "language_id",
                "product_id"
            ],
            "users": [
                "user_id",
                "username",
                "email",
                "password_hash",
                "state",
                "first_name",
                "last_name",
                "country",
                "city"
            ],
            "genres": [
                "genre",
                "genre_id",
                "genre_name",
                "Psychology"
            ],
            "book_genres": [
                "book_id",
                "genre_id"
            ]
        }
    },
    {
        "id": 119,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Orders': ['customer_id', 'order_total', 'order_date', 'order_id', 'delivery_date', 'shipment_id', 'order_total_cost', 'date', 'total_price', 'total_amount', 'shipping_date'], 'Customers': ['customer_id', 'phone_number', 'email', 'customer_name', 'address', 'customer_email', 'customer_phone', 'customer_address', 'email_address', 'phone', 'registration_date', 'country', 'city', 'state', 'name', 'id', 'first_name', 'last_name'], 'Order_Items': ['order_id', 'product_id', 'glassware_item_id', 'quantity', 'unit_price', 'order_item_id', 'price', 'item_cost', 'item_id', 'order_date', 'item_price'], 'Glassware_Items': ['glassware_type_id', 'quantity', 'glassware_item_id', 'product_id', 'glassware_item_name', 'glassware_item_description', 'etching_id', 'price', 'item_name', 'material', 'glassware_item_type_id', 'stock', 'design_id', 'discontinued', 'supplier_id', 'quantity_in_stock', 'unit_price', 'quantity_supplied']} and \n# the user question: Retrieve the list of customers who have placed at least one order for glassware items, along with the number of orders they have placed.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of customers who have placed at least one order for glassware items, along with the number of orders they have placed.",
        "output": "SELECT Customers.customer_name, COUNT(Orders.order_id) AS num_orders FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Glassware_Items ON Order_Items.glassware_item_id = Glassware_Items.glassware_item_id GROUP BY Customers.customer_id HAVING COUNT(DISTINCT Orders.order_id) > 0;",
        "schema": "glass_etching",
        "processed_schema_content": {
            "Orders": [
                "customer_id",
                "order_total",
                "order_date",
                "order_id",
                "delivery_date",
                "shipment_id",
                "order_total_cost",
                "date",
                "total_price",
                "total_amount",
                "shipping_date"
            ],
            "Customers": [
                "customer_id",
                "phone_number",
                "email",
                "customer_name",
                "address",
                "customer_email",
                "customer_phone",
                "customer_address",
                "email_address",
                "phone",
                "registration_date",
                "country",
                "city",
                "state",
                "name",
                "id",
                "first_name",
                "last_name"
            ],
            "Order_Items": [
                "order_id",
                "product_id",
                "glassware_item_id",
                "quantity",
                "unit_price",
                "order_item_id",
                "price",
                "item_cost",
                "item_id",
                "order_date",
                "item_price"
            ],
            "Glassware_Items": [
                "glassware_type_id",
                "quantity",
                "glassware_item_id",
                "product_id",
                "glassware_item_name",
                "glassware_item_description",
                "etching_id",
                "price",
                "item_name",
                "material",
                "glassware_item_type_id",
                "stock",
                "design_id",
                "discontinued",
                "supplier_id",
                "quantity_in_stock",
                "unit_price",
                "quantity_supplied"
            ]
        }
    },
    {
        "id": 120,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Show': ['rating', 'year', 'title', 'show_id', 'genre_id', 'studio_id', 'release_year', 'country_id', 'network_id', 'director_id', 'air_year', 'release_date', 'genre', 'status', 'production_type', 'producer_id', 'start_year', 'end_year'], 'Streaming_Service': ['show_id', 'service_id'], 'Service': ['service_id', 'name']} and \n# the user question: List the TV shows that have a drama genre and are available on at least two streaming services.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the TV shows that have a drama genre and are available on at least two streaming services.",
        "output": "SELECT DISTINCT Show.title FROM Show JOIN Streaming_Service ON Show.show_id = Streaming_Service.show_id JOIN Service ON Streaming_Service.service_id = Service.service_id WHERE Service.name IN ( SELECT DISTINCT Service.name FROM Service JOIN Streaming_Service ON Service.service_id = Streaming_Service.service_id JOIN Show ON Streaming_Service.show_id = Show.show_id WHERE Show.genre = 'Drama' GROUP BY Service.name HAVING COUNT(DISTINCT Show.show_id) > 1 ) AND Show.genre = 'Drama'",
        "schema": "tv_shows",
        "processed_schema_content": {
            "Show": [
                "rating",
                "year",
                "title",
                "show_id",
                "genre_id",
                "studio_id",
                "release_year",
                "country_id",
                "network_id",
                "director_id",
                "air_year",
                "release_date",
                "genre",
                "status",
                "production_type",
                "producer_id",
                "start_year",
                "end_year"
            ],
            "Streaming_Service": [
                "show_id",
                "service_id"
            ],
            "Service": [
                "service_id",
                "name"
            ]
        }
    },
    {
        "id": 123,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Companies': ['company_name', 'revenue', 'industry', 'company_id', 'country', 'industry_category', 'headquarters', 'num_employees']} and \n# the user question: \"Get the initiatives and their respective average project budgets for each company headquartered in the United States.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Get the initiatives and their respective average project budgets for each company headquartered in the United States.\"",
        "output": "SELECT `CSR Initiatives`.initiative_name, Companies.company_name, AVG(`CSR Projects`.budget) AS average_project_budget FROM `CSR Initiatives` JOIN `CSR Projects` ON `CSR Initiatives`.initiative_id = `CSR Projects`.initiative_id JOIN Companies ON `CSR Initiatives`.company_id = Companies.company_id WHERE Companies.headquarters = 'United States' GROUP BY `CSR Initiatives`.initiative_id, Companies.company_id;",
        "schema": "corporate_social_responsibility",
        "processed_schema_content": {
            "Companies": [
                "company_name",
                "revenue",
                "industry",
                "company_id",
                "country",
                "industry_category",
                "headquarters",
                "num_employees"
            ]
        }
    },
    {
        "id": 125,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Actor': ['actor_id', 'name', 'actor_name'], 'Movie_Actor': ['movie_id', 'actor_id'], 'Box_Office': ['movie_id', 'revenue', 'budget'], 'Production_Company': ['name', 'company_id', 'production_company_id', 'movie_id']} and \n# the user question: Retrieve the title of the movie and the name of the lead actor for all movies that were produced by Universal Pictures and had a box office revenue greater than $200 million, sorted in ascending order by the lead actor's name.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the title of the movie and the name of the lead actor for all movies that were produced by Universal Pictures and had a box office revenue greater than $200 million, sorted in ascending order by the lead actor's name.",
        "output": "SELECT Movie.title, Actor.name AS lead_actor, Box_Office.revenue FROM Movie JOIN Movie_Actor ON Movie.movie_id = Movie_Actor.movie_id JOIN Actor ON Movie_Actor.actor_id = Actor.actor_id JOIN Production_Company ON Movie.production_company_id = Production_Company.production_company_id JOIN Box_Office ON Movie.movie_id = Box_Office.movie_id WHERE Production_Company.name = 'Universal Pictures' AND Box_Office.revenue > 200000000 ORDER BY lead_actor ASC;",
        "schema": "romance_films",
        "processed_schema_content": {
            "Movie": [
                "movie_id",
                "title",
                "release_year",
                "director_id",
                "runtime",
                "production_company_id",
                "budget",
                "release_date",
                "producer_id",
                "genre"
            ],
            "Actor": [
                "actor_id",
                "name",
                "actor_name"
            ],
            "Movie_Actor": [
                "movie_id",
                "actor_id"
            ],
            "Box_Office": [
                "movie_id",
                "revenue",
                "budget"
            ],
            "Production_Company": [
                "name",
                "company_id",
                "production_company_id",
                "movie_id"
            ]
        }
    },
    {
        "id": 126,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['UserName', 'UserID'], 'Songs': ['AlbumID', 'SongID', 'GenreID', 'SongTitle', 'Duration', 'SongName', 'ArtistID', 'ReleaseDate', 'ReleaseYear', 'Language', 'AvgDuration', 'AvgRating', 'CommentCount', 'Rating', 'PlayCount'], 'Ratings': ['UserID', 'SongID', 'Rating', 'GenreID', 'AlbumID', 'RatingID']} and \n# the user question: \"Retrieve the names of users who have rated all songs in the database.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Retrieve the names of users who have rated all songs in the database.\"",
        "output": "SELECT Users.UserName FROM Users INNER JOIN Ratings ON Users.UserID = Ratings.UserID GROUP BY Users.UserID HAVING COUNT(DISTINCT Ratings.SongID) = ( SELECT COUNT(DISTINCT Songs.SongID) FROM Songs );",
        "schema": "music",
        "processed_schema_content": {
            "Users": [
                "UserName",
                "UserID"
            ],
            "Songs": [
                "AlbumID",
                "SongID",
                "GenreID",
                "SongTitle",
                "Duration",
                "SongName",
                "ArtistID",
                "ReleaseDate",
                "ReleaseYear",
                "Language",
                "AvgDuration",
                "AvgRating",
                "CommentCount",
                "Rating",
                "PlayCount"
            ],
            "Ratings": [
                "UserID",
                "SongID",
                "Rating",
                "GenreID",
                "AlbumID",
                "RatingID"
            ]
        }
    },
    {
        "id": 127,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'plants': ['endangered', 'family_name', 'flower_color', 'height', 'plant_id', 'medicinal_use', 'native_region', 'plant_name', 'lifespan', 'edible', 'scientific_name', 'habitat', 'growth_habit', 'description', 'poisonous', 'origin_country', 'drought_tolerant', 'indoor_plant', 'bloom_time', 'edible_fruit', 'fruit_type', 'light_requirement', 'fruit_color', 'price', 'min_temp_tolerance', 'max_height', 'moisture_tolerance', 'growth_rate', 'flowering_time', 'ph_tolerance', 'spread', 'propagation', 'common_name', 'plant_type', 'bloom_period', 'bloom_color', 'hardiness_zone', 'in_stock', 'min_height', 'genus_id', 'min_temp', 'water_need', 'native_state', 'max_temp', 'light_need', 'name', 'species', 'conservation_status', 'family', 'genus', 'id', 'temperature', 'moisture', 'origin', 'mature_height', 'water_needed_per_week', 'medicinal_properties']} and \n# the user question: Count the number of plant species in each family.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Count the number of plant species in each family.",
        "output": "SELECT family, COUNT(*) AS species_count FROM plants GROUP BY family;",
        "schema": "botany",
        "processed_schema_content": {
            "plants": [
                "endangered",
                "family_name",
                "flower_color",
                "height",
                "plant_id",
                "medicinal_use",
                "native_region",
                "plant_name",
                "lifespan",
                "edible",
                "scientific_name",
                "habitat",
                "growth_habit",
                "description",
                "poisonous",
                "origin_country",
                "drought_tolerant",
                "indoor_plant",
                "bloom_time",
                "edible_fruit",
                "fruit_type",
                "light_requirement",
                "fruit_color",
                "price",
                "min_temp_tolerance",
                "max_height",
                "moisture_tolerance",
                "growth_rate",
                "flowering_time",
                "ph_tolerance",
                "spread",
                "propagation",
                "common_name",
                "plant_type",
                "bloom_period",
                "bloom_color",
                "hardiness_zone",
                "in_stock",
                "min_height",
                "genus_id",
                "min_temp",
                "water_need",
                "native_state",
                "max_temp",
                "light_need",
                "name",
                "species",
                "conservation_status",
                "family",
                "genus",
                "id",
                "temperature",
                "moisture",
                "origin",
                "mature_height",
                "water_needed_per_week",
                "medicinal_properties"
            ]
        }
    },
    {
        "id": 128,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Project_Materials': ['project_id', 'material_id', 'quantity', 'total_quantity'], 'Materials': ['material_id', 'material_name', 'cost_per_unit', 'unit_of_measurement', 'unit_quantity', 'unit_cost', 'quantity', 'unit_price', 'material_type_id', 'quantity_in_stock', 'material_unit', 'quantity_available', 'reorder_level', 'stock_level'], 'Project_Costs': ['project_id', 'total_cost', 'equipment_cost', 'labor_cost', 'material_cost', 'square_feet']} and \n# the user question: List all the materials that have been used in a project that has a total cost of more than $500,000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List all the materials that have been used in a project that has a total cost of more than $500,000.",
        "output": "SELECT DISTINCT m.material_name FROM Materials m INNER JOIN Project_Materials pm ON m.material_id = pm.material_id INNER JOIN Projects p ON pm.project_id = p.project_id INNER JOIN Project_Costs pc ON p.project_id = pc.project_id WHERE pc.total_cost > 500000;",
        "schema": "civil_engineering",
        "processed_schema_content": {
            "Projects": [
                "project_name",
                "project_id",
                "end_date",
                "start_date",
                "square_footage",
                "status",
                "project_manager_id",
                "project_status_id",
                "project_completion_date",
                "project_start_date",
                "project_budget",
                "project_end_date",
                "project_deadline",
                "project_location",
                "supervisor_id",
                "completion_date",
                "Expansion",
                "Highway",
                "Construction",
                "Building",
                "Office",
                "budget",
                "actual_end_date",
                "actual_start_date",
                "State",
                "Project_ID",
                "Name",
                "Status",
                "Start_Date",
                "expected_completion_date",
                "Completion_Date",
                "Actual_Costs",
                "Project_Name",
                "Budget",
                "Client_ID",
                "cost",
                "name",
                "id"
            ],
            "Project_Materials": [
                "project_id",
                "material_id",
                "quantity",
                "total_quantity"
            ],
            "Materials": [
                "material_id",
                "material_name",
                "cost_per_unit",
                "unit_of_measurement",
                "unit_quantity",
                "unit_cost",
                "quantity",
                "unit_price",
                "material_type_id",
                "quantity_in_stock",
                "material_unit",
                "quantity_available",
                "reorder_level",
                "stock_level"
            ],
            "Project_Costs": [
                "project_id",
                "total_cost",
                "equipment_cost",
                "labor_cost",
                "material_cost",
                "square_feet"
            ]
        }
    },
    {
        "id": 129,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Workout': ['WorkoutID', 'UserID', 'PlanID', 'Date', 'WorkoutType', 'StartTime', 'EndTime', 'Duration', 'TimeSeconds', 'CaloriesBurned', 'WorkoutTypeID', 'Distance', 'Type', 'TotalCalories', 'USERID', 'WorkoutName', 'Steps', 'HeartRate', 'ExerciseTypeID']} and \n# the user question: Find the total number of workouts completed by all users in the last week, grouped by workout type and sorted in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total number of workouts completed by all users in the last week, grouped by workout type and sorted in descending order:",
        "output": "SELECT Workout.WorkoutType, COUNT(*) AS TotalWorkoutsCompleted FROM Workout WHERE Workout.Date >= DATE('now', '-7 days') GROUP BY Workout.WorkoutType ORDER BY TotalWorkoutsCompleted DESC",
        "schema": "fitness",
        "processed_schema_content": {
            "Workout": [
                "WorkoutID",
                "UserID",
                "PlanID",
                "Date",
                "WorkoutType",
                "StartTime",
                "EndTime",
                "Duration",
                "TimeSeconds",
                "CaloriesBurned",
                "WorkoutTypeID",
                "Distance",
                "Type",
                "TotalCalories",
                "USERID",
                "WorkoutName",
                "Steps",
                "HeartRate",
                "ExerciseTypeID"
            ]
        }
    },
    {
        "id": 130,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Films': ['title', 'country', 'rating_id', 'director_id', 'film_id', 'synopsis', 'release_date', 'runtime', 'studio_id', 'composer_id', 'budget', 'box_office', 'imdb_rating', 'rotten_tomatoes_rating', 'mpaa_rating', 'production_company_id', 'oscar_wins', 'rating', 'rottentomatoes_rating', 'genre_id', 'runtime_minutes', 'release_year', 'The Conjuring', 'PG-13'], 'Films_Plots': ['film_id', 'plot_id', 'plot_description'], 'Plots': ['plot_type', 'plot_id'], 'Plot_Types': ['plot_type', 'supernatural', 'psychological', 'twist_ending', 'slasher', 'possession', 'found_footage', 'demonic_possession', 'serial_killer', 'zombie', 'haunted_house', 'ghost', 'vampire', 'werewolf', 'exorcism', 'creature_feature', 'paranormal', 'body_horror', 'cult', 'witch', 'psychological_horror', 'demon', 'virus', 'witchcraft', 'monster']} and \n# the user question: Query: Retrieve the names and release dates of all horror films in the database that have a \"zombie\" plot element, along with their runtime and IMDb ratings, ordered by release date in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Query: Retrieve the names and release dates of all horror films in the database that have a \"zombie\" plot element, along with their runtime and IMDb ratings, ordered by release date in descending order.",
        "output": "SELECT Films.title, Films.release_date, Films.runtime, Films.imdb_rating FROM Films JOIN Films_Plots ON Films.film_id = Films_Plots.film_id JOIN Plots ON Films_Plots.plot_id = Plots.plot_id JOIN Plot_Types ON Plots.plot_type = Plot_Types.plot_type WHERE Plot_Types.zombie = 1 GROUP BY Films.film_id ORDER BY Films.release_date DESC;",
        "schema": "horror_films",
        "processed_schema_content": {
            "Films": [
                "title",
                "country",
                "rating_id",
                "director_id",
                "film_id",
                "synopsis",
                "release_date",
                "runtime",
                "studio_id",
                "composer_id",
                "budget",
                "box_office",
                "imdb_rating",
                "rotten_tomatoes_rating",
                "mpaa_rating",
                "production_company_id",
                "oscar_wins",
                "rating",
                "rottentomatoes_rating",
                "genre_id",
                "runtime_minutes",
                "release_year",
                "The Conjuring",
                "PG-13"
            ],
            "Films_Plots": [
                "film_id",
                "plot_id",
                "plot_description"
            ],
            "Plots": [
                "plot_type",
                "plot_id"
            ],
            "Plot_Types": [
                "plot_type",
                "supernatural",
                "psychological",
                "twist_ending",
                "slasher",
                "possession",
                "found_footage",
                "demonic_possession",
                "serial_killer",
                "zombie",
                "haunted_house",
                "ghost",
                "vampire",
                "werewolf",
                "exorcism",
                "creature_feature",
                "paranormal",
                "body_horror",
                "cult",
                "witch",
                "psychological_horror",
                "demon",
                "virus",
                "witchcraft",
                "monster"
            ]
        }
    },
    {
        "id": 131,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'StopSchedule': ['stop_id', 'route_id', 'arrival_time', 'departure_time', 'stop_schedule_id', 'station_id', 'trip_id'], 'Trip': ['trip_id', 'user_id', 'vehicle_id', 'route_id', 'start_time', 'end_time', 'status', 'fare_id', 'is_cancelled', 'passenger_id', 'driver_id', 'driver_rating', 'check_in_time', 'check_out_time', 'fare', 'distance', 'fare_amount', '[start_date]', '[end_date]', '[driver_id]', '[year]', '[vehicle_id]', 'duration', 'date', 'fare_rate', 'start_city', 'end_location', 'start_location', 'destination_id', 'cost', 'origin_id', 'destination', 'source', 'tip_amount', 'customer_id'], 'Payment': ['payment_id', 'user_id', 'fare_id', 'payment_time', 'amount_paid', 'trip_id', 'card_id', 'payment_type', 'payment_type_id', 'amount', 'payment_date', 'passenger_id', 'credit_card_number', 'payment_method', 'method'], 'Station': ['station_id', 'name', 'latitude', 'longitude', 'address'], 'StationSchedule': ['station_id', 'route_id', 'arrival_time', 'departure_time'], 'CreditCard': ['card_number', 'card_id', 'card_type', 'exp_date', 'user_id', 'card_type_id', 'expiration_year', 'expiration_date', 'cardholder_name', 'limit', 'payment_id', 'issuer_bank_id'], 'Passenger': ['age', 'name', 'passenger_id', 'email', 'last_name', 'first_name'], 'PaymentType': ['payment_type_id', 'payment_type']} and \n# the user question: Retrieve the names and ages of all passengers who have traveled on Route 3 and have a scheduled stop at Station 2, and have made a payment using a credit card with a limit greater than 1000:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and ages of all passengers who have traveled on Route 3 and have a scheduled stop at Station 2, and have made a payment using a credit card with a limit greater than 1000:",
        "output": "SELECT Passenger.name, Passenger.age FROM Passenger INNER JOIN Trip ON Passenger.passenger_id = Trip.passenger_id INNER JOIN Payment ON Trip.trip_id = Payment.trip_id INNER JOIN PaymentType ON Payment.payment_type_id = PaymentType.payment_type_id INNER JOIN CreditCard ON Payment.card_id = CreditCard.card_id INNER JOIN StopSchedule ON Trip.route_id = StopSchedule.route_id AND Trip.start_time = StopSchedule.departure_time INNER JOIN StationSchedule ON StopSchedule.route_id = StationSchedule.route_id AND StopSchedule.departure_time = StationSchedule.departure_time INNER JOIN Station ON StationSchedule.station_id = Station.station_id WHERE Trip.route_id = 3 AND Station.name = 'Station 2' AND PaymentType.payment_type = 'CreditCard' AND CreditCard.limit > 1000;",
        "schema": "intelligent_transportation_systems",
        "processed_schema_content": {
            "StopSchedule": [
                "stop_id",
                "route_id",
                "arrival_time",
                "departure_time",
                "stop_schedule_id",
                "station_id",
                "trip_id"
            ],
            "Trip": [
                "trip_id",
                "user_id",
                "vehicle_id",
                "route_id",
                "start_time",
                "end_time",
                "status",
                "fare_id",
                "is_cancelled",
                "passenger_id",
                "driver_id",
                "driver_rating",
                "check_in_time",
                "check_out_time",
                "fare",
                "distance",
                "fare_amount",
                "[start_date]",
                "[end_date]",
                "[driver_id]",
                "[year]",
                "[vehicle_id]",
                "duration",
                "date",
                "fare_rate",
                "start_city",
                "end_location",
                "start_location",
                "destination_id",
                "cost",
                "origin_id",
                "destination",
                "source",
                "tip_amount",
                "customer_id"
            ],
            "Payment": [
                "payment_id",
                "user_id",
                "fare_id",
                "payment_time",
                "amount_paid",
                "trip_id",
                "card_id",
                "payment_type",
                "payment_type_id",
                "amount",
                "payment_date",
                "passenger_id",
                "credit_card_number",
                "payment_method",
                "method"
            ],
            "Station": [
                "station_id",
                "name",
                "latitude",
                "longitude",
                "address"
            ],
            "StationSchedule": [
                "station_id",
                "route_id",
                "arrival_time",
                "departure_time"
            ],
            "CreditCard": [
                "card_number",
                "card_id",
                "card_type",
                "exp_date",
                "user_id",
                "card_type_id",
                "expiration_year",
                "expiration_date",
                "cardholder_name",
                "limit",
                "payment_id",
                "issuer_bank_id"
            ],
            "Passenger": [
                "age",
                "name",
                "passenger_id",
                "email",
                "last_name",
                "first_name"
            ],
            "PaymentType": [
                "payment_type_id",
                "payment_type"
            ]
        }
    },
    {
        "id": 132,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Insects': ['insect_id', 'common_name', 'scientific_name', 'order_name', 'family_name', 'subfamily_name', 'description', 'Region', 'Family', 'SpeciesID', 'BodyLength'], 'Insect_Taxonomy': ['tax_id', 'insect_id', 'kingdom', 'phylum', 'class', 'order_name', 'family_name', 'subfamily_name', 'genus_name', 'species_name', 'suborder_name', 'superfamily_name', 'phylum_name'], 'Insect_Morphology': ['insect_id', 'wingspan_size', 'body_length', 'number_of_legs', 'weight', 'length', 'average_length', 'lifespan']} and \n# the user question: Find the average body length of all insects that belong to the \"Diptera\" order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average body length of all insects that belong to the \"Diptera\" order.",
        "output": "SELECT AVG(Insect_Morphology.body_length) as avg_body_length FROM Insects INNER JOIN Insect_Taxonomy ON Insects.insect_id = Insect_Taxonomy.insect_id INNER JOIN Insect_Morphology ON Insects.insect_id = Insect_Morphology.insect_id WHERE Insect_Taxonomy.order_name = 'Diptera';",
        "schema": "entomology",
        "processed_schema_content": {
            "Insects": [
                "insect_id",
                "common_name",
                "scientific_name",
                "order_name",
                "family_name",
                "subfamily_name",
                "description",
                "Region",
                "Family",
                "SpeciesID",
                "BodyLength"
            ],
            "Insect_Taxonomy": [
                "tax_id",
                "insect_id",
                "kingdom",
                "phylum",
                "class",
                "order_name",
                "family_name",
                "subfamily_name",
                "genus_name",
                "species_name",
                "suborder_name",
                "superfamily_name",
                "phylum_name"
            ],
            "Insect_Morphology": [
                "insect_id",
                "wingspan_size",
                "body_length",
                "number_of_legs",
                "weight",
                "length",
                "average_length",
                "lifespan"
            ]
        }
    },
    {
        "id": 133,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Orders': ['user_id', 'total_amount', 'supplier_id', 'project_id', 'order_id', 'total_amount_sum', 'order_count'], 'Users': ['user_id', 'john123', 'username', 'email']} and \n# the user question: \"Get the username and email of users who have placed orders with a total amount greater than $1000.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Get the username and email of users who have placed orders with a total amount greater than $1000.\"",
        "output": "SELECT U.username, U.email FROM Users U WHERE U.user_id IN ( SELECT O.user_id FROM Orders O WHERE O.total_amount > 1000.00 );",
        "schema": "home_improvement",
        "processed_schema_content": {
            "Orders": [
                "user_id",
                "total_amount",
                "supplier_id",
                "project_id",
                "order_id",
                "total_amount_sum",
                "order_count"
            ],
            "Users": [
                "user_id",
                "john123",
                "username",
                "email"
            ]
        }
    },
    {
        "id": 135,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Devices': ['device_location', 'device_name', 'device_id', 'location', 'device_type', 'time_diff', 'device_category', 'device_status', 'battery_level', 'last_data_timestamp', 'created_timestamp', 'notify_user', 'room_id', 'active', 'last_used', 'transmit_data'], 'DeviceData': ['device_location', 'data_value', 'data_timestamp', 'device_id', 'data_id', 'alert_threshold', 'data_unit', 'data_type', 'Temperature', 'Humidity', 'sensor_id'], 'Sensors': ['sensor_id', 'sensor_type', 'sensor_name', 'sensor_location', 'device_id', 'sensor_max_threshold', 'sensor_min_threshold', 'sensor_value', 'sensor_safe_threshold', 'sensor_battery_level']} and \n# the user question: Find all devices that have a battery level below 50% and a light sensor reading above 5000 lux in the past 2 hours, and sort them by the device ID.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all devices that have a battery level below 50% and a light sensor reading above 5000 lux in the past 2 hours, and sort them by the device ID.",
        "output": "SELECT Devices.device_id, Sensors.sensor_type, DeviceData.data_value, DeviceData.data_timestamp FROM Devices JOIN DeviceData ON Devices.device_id = DeviceData.device_id JOIN Sensors ON Devices.device_id = Sensors.sensor_id WHERE DeviceData.data_timestamp >= datetime('now', '-2 hours') AND DeviceData.data_value > 5000 AND Sensors.sensor_type = 'Light' AND Devices.battery_level < 50 ORDER BY Devices.device_id;",
        "schema": "internet_of_things_(iot)",
        "processed_schema_content": {
            "Devices": [
                "device_location",
                "device_name",
                "device_id",
                "location",
                "device_type",
                "time_diff",
                "device_category",
                "device_status",
                "battery_level",
                "last_data_timestamp",
                "created_timestamp",
                "notify_user",
                "room_id",
                "active",
                "last_used",
                "transmit_data"
            ],
            "DeviceData": [
                "device_location",
                "data_value",
                "data_timestamp",
                "device_id",
                "data_id",
                "alert_threshold",
                "data_unit",
                "data_type",
                "Temperature",
                "Humidity",
                "sensor_id"
            ],
            "Sensors": [
                "sensor_id",
                "sensor_type",
                "sensor_name",
                "sensor_location",
                "device_id",
                "sensor_max_threshold",
                "sensor_min_threshold",
                "sensor_value",
                "sensor_safe_threshold",
                "sensor_battery_level"
            ]
        }
    },
    {
        "id": 136,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $9 billion and have been updated in the last 28000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $9 billion and have been updated in the last 28000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 9000000000 AND Creatives.updated_at BETWEEN DATE('now', '-28000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        }
    },
    {
        "id": 137,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Network_Interfaces': ['interface_id', 'device_id', 'interface_name', 'ip_address', 'subnet_mask', 'mac_address', 'default_gateway', 'vlan_tag', 'interface_type', 'bandwidth', 'link_speed', 'ip_address_type', 'mtu', 'dns_server', 'ip_mode', 'vlan_id', 'link_status', 'speed', 'interface_speed', 'status', 'last_activity_time'], 'Firewall_Rules': ['rule_id', 'device_id', 'source_ip', 'destination_ip', 'protocol', 'action', 'destination_port', 'status', 'source_port', 'source_ip_address', 'destination_ip_address', 'rule_action'], 'Scans': ['scan_id', 'scanner_id', 'device_id', 'start_time', 'end_time']} and \n# the user question: Find all devices that have at least one open port on port range 5900-5901 (VNC) and have been scanned in the last 90 days, sorted by IP address in ascending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all devices that have at least one open port on port range 5900-5901 (VNC) and have been scanned in the last 90 days, sorted by IP address in ascending order.",
        "output": "SELECT DISTINCT ni.ip_address FROM Network_Interfaces ni INNER JOIN Firewall_Rules fr ON ni.ip_address = fr.destination_ip LEFT JOIN Scans s ON ni.device_id = s.device_id AND s.end_time >= date('now', '-90 days') WHERE fr.destination_port >= 5900 AND fr.destination_port <= 5901 AND fr.action = 'allow' AND s.scan_id IS NOT NULL ORDER BY ni.ip_address ASC;",
        "schema": "network_security",
        "processed_schema_content": {
            "Network_Interfaces": [
                "interface_id",
                "device_id",
                "interface_name",
                "ip_address",
                "subnet_mask",
                "mac_address",
                "default_gateway",
                "vlan_tag",
                "interface_type",
                "bandwidth",
                "link_speed",
                "ip_address_type",
                "mtu",
                "dns_server",
                "ip_mode",
                "vlan_id",
                "link_status",
                "speed",
                "interface_speed",
                "status",
                "last_activity_time"
            ],
            "Firewall_Rules": [
                "rule_id",
                "device_id",
                "source_ip",
                "destination_ip",
                "protocol",
                "action",
                "destination_port",
                "status",
                "source_port",
                "source_ip_address",
                "destination_ip_address",
                "rule_action"
            ],
            "Scans": [
                "scan_id",
                "scanner_id",
                "device_id",
                "start_time",
                "end_time"
            ]
        }
    },
    {
        "id": 138,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Songs': ['song_title', 'song_id', 'duration', 'album_id', 'artist_id', 'release_date', 'genre_id'], 'Artists': ['artist_name', 'artist_id', 'country_id', 'birth_date'], 'Collaborations': ['song_id', 'artist1_id', 'artist2_id', 'collaboration_id'], 'Awards': ['year', 'award_name', 'artist_id', 'award_id', 'song_id', 'artist1_id', 'artist2_id', 'genre_id', 'category', 'award_date']} and \n# the user question: Retrieve the artists who have collaborated on songs and have won awards, ordered by the artist name:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the artists who have collaborated on songs and have won awards, ordered by the artist name:",
        "output": "SELECT DISTINCT Artists.artist_name FROM Artists JOIN Collaborations ON Artists.artist_id = Collaborations.artist1_id OR Artists.artist_id = Collaborations.artist2_id JOIN Songs ON Collaborations.song_id = Songs.song_id JOIN Awards ON Songs.song_id = Awards.song_id ORDER BY Artists.artist_name;",
        "schema": "country_music",
        "processed_schema_content": {
            "Songs": [
                "song_title",
                "song_id",
                "duration",
                "album_id",
                "artist_id",
                "release_date",
                "genre_id"
            ],
            "Artists": [
                "artist_name",
                "artist_id",
                "country_id",
                "birth_date"
            ],
            "Collaborations": [
                "song_id",
                "artist1_id",
                "artist2_id",
                "collaboration_id"
            ],
            "Awards": [
                "year",
                "award_name",
                "artist_id",
                "award_id",
                "song_id",
                "artist1_id",
                "artist2_id",
                "genre_id",
                "category",
                "award_date"
            ]
        }
    },
    {
        "id": 142,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Ratings': ['rating_id', 'game_id'], 'Ratings': ['rating_name', 'rating_id', 'rating_value'], 'Game_Publishers': ['game_id', 'publisher_id'], 'Publishers': ['publisher_name', 'publisher_id']} and \n# the user question: Find the names of all publishers that have published at least 3 games with a rating of \"E (Everyone)\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all publishers that have published at least 3 games with a rating of \"E (Everyone)\".",
        "output": "SELECT Publishers.publisher_name, COUNT(DISTINCT Games.game_id) AS game_count FROM Publishers INNER JOIN Game_Publishers ON Publishers.publisher_id = Game_Publishers.publisher_id INNER JOIN Games ON Game_Publishers.game_id = Games.game_id INNER JOIN Game_Ratings ON Games.game_id = Game_Ratings.game_id INNER JOIN Ratings ON Game_Ratings.rating_id = Ratings.rating_id WHERE Ratings.rating_name = 'E (Everyone)' GROUP BY Publishers.publisher_id HAVING COUNT(DISTINCT Games.game_id) >= 3;",
        "schema": "game_design",
        "processed_schema_content": {
            "Games": [
                "game_id",
                "game_title",
                "game_publisher",
                "game_release_date",
                "game_developer"
            ],
            "Game_Ratings": [
                "rating_id",
                "game_id"
            ],
            "Ratings": [
                "rating_name",
                "rating_id",
                "rating_value"
            ],
            "Game_Publishers": [
                "game_id",
                "publisher_id"
            ],
            "Publishers": [
                "publisher_name",
                "publisher_id"
            ]
        }
    },
    {
        "id": 144,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Film': ['film_id', 'title', 'director_id', 'duration', 'release_date', 'genre', 'genre_id', 'language_id'], 'Film_Genre': ['film_id', 'genre_id'], 'Genre': ['genre_id', 'name', 'genre'], 'Director': ['director_id', 'name', 'nationality'], 'Review': ['rating', 'film_id', 'review_id']} and \n# the user question: \"Retrieve the film titles, directors, and average ratings of drama films released after 2010.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Retrieve the film titles, directors, and average ratings of drama films released after 2010.\"",
        "output": "SELECT Film.title, Director.name, AVG(Review.rating) AS average_rating FROM Film INNER JOIN Director ON Film.director_id = Director.director_id INNER JOIN Film_Genre ON Film.film_id = Film_Genre.film_id INNER JOIN Genre ON Film_Genre.genre_id = Genre.genre_id INNER JOIN Review ON Film.film_id = Review.film_id WHERE Genre.name = 'Drama' AND Film.release_date > '2010-01-01' GROUP BY Film.film_id;",
        "schema": "drama_films",
        "processed_schema_content": {
            "Film": [
                "film_id",
                "title",
                "director_id",
                "duration",
                "release_date",
                "genre",
                "genre_id",
                "language_id"
            ],
            "Film_Genre": [
                "film_id",
                "genre_id"
            ],
            "Genre": [
                "genre_id",
                "name",
                "genre"
            ],
            "Director": [
                "director_id",
                "name",
                "nationality"
            ],
            "Review": [
                "rating",
                "film_id",
                "review_id"
            ]
        }
    },
    {
        "id": 145,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Items': ['item_id', 'game_id'], 'Items': ['item_name', 'item_id', 'item_description', 'rarity_id'], 'Game_Levels': ['level_id', 'game_id'], 'Levels': ['level_name', 'level_id', 'difficulty_id', 'duration_id']} and \n# the user question: Find the names of all games that have a level with a name containing \"forest\" and an item with a name containing \"sword\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all games that have a level with a name containing \"forest\" and an item with a name containing \"sword\".",
        "output": "SELECT DISTINCT Games.game_title FROM Games INNER JOIN Game_Levels ON Games.game_id = Game_Levels.game_id INNER JOIN Levels ON Game_Levels.level_id = Levels.level_id INNER JOIN Game_Items ON Games.game_id = Game_Items.game_id INNER JOIN Items ON Game_Items.item_id = Items.item_id WHERE Levels.level_name LIKE '%forest%' AND Items.item_name LIKE '%sword%';",
        "schema": "game_design",
        "processed_schema_content": {
            "Games": [
                "game_id",
                "game_title",
                "game_publisher",
                "game_release_date",
                "game_developer"
            ],
            "Game_Items": [
                "item_id",
                "game_id"
            ],
            "Items": [
                "item_name",
                "item_id",
                "item_description",
                "rarity_id"
            ],
            "Game_Levels": [
                "level_id",
                "game_id"
            ],
            "Levels": [
                "level_name",
                "level_id",
                "difficulty_id",
                "duration_id"
            ]
        }
    },
    {
        "id": 148,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Shifts': ['start_time', 'end_time', 'employee_id', 'shift_id', 'duration', 'status', 'shift_date', 'machine_id', 'overtime_hours', 'performance_rating', 'shift_start', 'hours_worked'], 'Employees': ['first_name', 'employee_id', 'last_name', 'job_title', 'territory_id', 'department_id', 'manager_id', 'job_title_id', 'hire_date', 'address', 'birth_date', 'phone', 'title', 'reports_to', 'address_id', 'performance_evaluation_date', 'training_expiry_date', 'schedule_update_date', 'time_off_request_date', 'performance_bonus_date', 'promotion_date', 'overtime_pay_date', 'reassignment_date', 'training_date', 'annual_leave_balance', 'skills_upgrade_date', 'compensatory_time_off_date', 'shift_length', 'last_promotion_date', 'career_development_plan_date', 'last_break_date', 'salary', 'hourly_rate', 'hourly_wage', 'status', 'skill_set', 'ShiftStart', 'ShiftEnd', 'EmployeeID', 'EmployeeName', 'HireDate', 'LastName', 'Title', 'FirstName', 'BirthDate']} and \n# the user question: Find the employees who have not worked on any shifts in the last 2 weeks and require training.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the employees who have not worked on any shifts in the last 2 weeks and require training.",
        "output": "SELECT Employees.first_name, Employees.last_name FROM Employees LEFT JOIN Shifts ON Employees.employee_id = Shifts.employee_id WHERE Shifts.start_time IS NULL OR Shifts.start_time < DATE('now', '-2 weeks') AND Employees.training_expiry_date < DATE('now');",
        "schema": "operations_management",
        "processed_schema_content": {
            "Shifts": [
                "start_time",
                "end_time",
                "employee_id",
                "shift_id",
                "duration",
                "status",
                "shift_date",
                "machine_id",
                "overtime_hours",
                "performance_rating",
                "shift_start",
                "hours_worked"
            ],
            "Employees": [
                "first_name",
                "employee_id",
                "last_name",
                "job_title",
                "territory_id",
                "department_id",
                "manager_id",
                "job_title_id",
                "hire_date",
                "address",
                "birth_date",
                "phone",
                "title",
                "reports_to",
                "address_id",
                "performance_evaluation_date",
                "training_expiry_date",
                "schedule_update_date",
                "time_off_request_date",
                "performance_bonus_date",
                "promotion_date",
                "overtime_pay_date",
                "reassignment_date",
                "training_date",
                "annual_leave_balance",
                "skills_upgrade_date",
                "compensatory_time_off_date",
                "shift_length",
                "last_promotion_date",
                "career_development_plan_date",
                "last_break_date",
                "salary",
                "hourly_rate",
                "hourly_wage",
                "status",
                "skill_set",
                "ShiftStart",
                "ShiftEnd",
                "EmployeeID",
                "EmployeeName",
                "HireDate",
                "LastName",
                "Title",
                "FirstName",
                "BirthDate"
            ]
        }
    },
    {
        "id": 152,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Payments': ['amount', 'client_id', 'appointment_type_id', 'session_id', 'payment_date', 'appointment_id', 'service_id', 'session_type_id', 'payment_id', 'amount_due', 'amount_paid', 'payment_method'], 'Clients': ['client_id', 'email', 'date_of_birth', 'last_name', 'first_name', 'phone_number', 'age', 'primary_concern', 'phone', 'birth_date', 'state', 'health_condition']} and \n# the user question: Retrieve the name and total amount paid by each client who has paid for services in the year 2035, sorted by total amount in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total amount paid by each client who has paid for services in the year 2035, sorted by total amount in descending order.",
        "output": "SELECT c.first_name, c.last_name, SUM(p.amount) AS total_paid FROM Clients c INNER JOIN Payments p ON c.client_id = p.client_id WHERE p.payment_date BETWEEN '2035-01-01' AND '2035-12-31' GROUP BY c.client_id ORDER BY total_paid DESC;",
        "schema": "hypnotherapy",
        "processed_schema_content": {
            "Payments": [
                "amount",
                "client_id",
                "appointment_type_id",
                "session_id",
                "payment_date",
                "appointment_id",
                "service_id",
                "session_type_id",
                "payment_id",
                "amount_due",
                "amount_paid",
                "payment_method"
            ],
            "Clients": [
                "client_id",
                "email",
                "date_of_birth",
                "last_name",
                "first_name",
                "phone_number",
                "age",
                "primary_concern",
                "phone",
                "birth_date",
                "state",
                "health_condition"
            ]
        }
    },
    {
        "id": 154,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Sculptures': ['width', 'depth', 'material', 'height', 'creation_date', 'sculpture_name', 'sculpture_id', 'artist_id', 'collection_id', 'material_id', 'rating'], 'Artisans': ['artisan_name', 'specialization', 'experience_years', 'artisan_id', 'artist_id'], 'Exhibitions': ['exhibition_name', 'exhibition_id', 'museum_id', 'date', 'city', 'city_id', 'sculpture_id'], 'Sculpture_Exhibition': ['sculpture_id', 'exhibition_id', 'museum_id'], 'Sculptor_Artisan': ['artist_id', 'artisan_id', 'specialization', 'specialization_id'], 'Sculpture_Materials': ['sculpture_id', 'material_id'], 'Materials': ['material_name', 'material_id'], 'Cities': ['city_name', 'city_id']} and \n# the user question: Get the names of artisans who have worked on sculptures made of a specific material (e.g., \"Plaster\") and have sculptures exhibited in a specific city (e.g., \"London\"):,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the names of artisans who have worked on sculptures made of a specific material (e.g., \"Plaster\") and have sculptures exhibited in a specific city (e.g., \"London\"):",
        "output": "SELECT Artisans.artisan_name FROM Artisans JOIN Sculptor_Artisan ON Artisans.artisan_id = Sculptor_Artisan.artisan_id JOIN Sculptures ON Sculptor_Artisan.artist_id = Sculptures.artist_id JOIN Sculpture_Exhibition ON Sculptures.sculpture_id = Sculpture_Exhibition.sculpture_id JOIN Exhibitions ON Sculpture_Exhibition.exhibition_id = Exhibitions.exhibition_id JOIN Cities ON Exhibitions.city_id = Cities.city_id JOIN Sculpture_Materials ON Sculptures.sculpture_id = Sculpture_Materials.sculpture_id JOIN Materials ON Sculpture_Materials.material_id = Materials.material_id WHERE Materials.material_name = 'Plaster' AND Cities.city_name = 'London';",
        "schema": "sculpting",
        "processed_schema_content": {
            "Sculptures": [
                "width",
                "depth",
                "material",
                "height",
                "creation_date",
                "sculpture_name",
                "sculpture_id",
                "artist_id",
                "collection_id",
                "material_id",
                "rating"
            ],
            "Artisans": [
                "artisan_name",
                "specialization",
                "experience_years",
                "artisan_id",
                "artist_id"
            ],
            "Exhibitions": [
                "exhibition_name",
                "exhibition_id",
                "museum_id",
                "date",
                "city",
                "city_id",
                "sculpture_id"
            ],
            "Sculpture_Exhibition": [
                "sculpture_id",
                "exhibition_id",
                "museum_id"
            ],
            "Sculptor_Artisan": [
                "artist_id",
                "artisan_id",
                "specialization",
                "specialization_id"
            ],
            "Sculpture_Materials": [
                "sculpture_id",
                "material_id"
            ],
            "Materials": [
                "material_name",
                "material_id"
            ],
            "Cities": [
                "city_name",
                "city_id"
            ]
        }
    },
    {
        "id": 155,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Clients': ['Client_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'City', 'Email_Address', 'Phone_Number', 'State', 'ClientName', 'ClientID', 'Name', 'ID', 'Status', 'Balance', 'pending_case', 'legal_fees'], 'Cases': ['Case_ID', 'Case_Name', 'Case_Description', 'Client_ID', 'Case_Status', 'Lawyer_ID', 'Last_Updated', 'Date_Opened', 'Date_Closed', 'Status', 'Case_Closed_Date', 'Practice_Area_ID', 'Case_Manager_ID', 'Open_Date', 'Closed', 'Case_End_Date', 'Case_Start_Date', 'Firm_ID', 'Office_ID', 'CaseStatus', 'CaseNumber', 'ClientID', 'CaseTitle', 'CaseTypeID', 'CaseType', 'CourtName', 'ClosedDate', 'Settlement', 'ID', 'HearingDate', 'ClosingDate', 'AppealStatus', 'LawyerID', 'OpeningDate', 'verdict', 'judge_id', 'defendant_state', 'plaintiff_state', 'lawyer_id']} and \n# the user question: List all the clients and their associated cases, sorted by the number of open cases:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List all the clients and their associated cases, sorted by the number of open cases:",
        "output": "SELECT Clients.First_Name, Clients.Last_Name, COUNT(Cases.Case_ID) AS Open_Cases FROM Clients JOIN Cases ON Clients.Client_ID = Cases.Client_ID WHERE Cases.Status = 'Open' GROUP BY Clients.Client_ID ORDER BY Open_Cases DESC;",
        "schema": "law",
        "processed_schema_content": {
            "Clients": [
                "Client_ID",
                "First_Name",
                "Last_Name",
                "Email",
                "Phone",
                "Address",
                "City",
                "Email_Address",
                "Phone_Number",
                "State",
                "ClientName",
                "ClientID",
                "Name",
                "ID",
                "Status",
                "Balance",
                "pending_case",
                "legal_fees"
            ],
            "Cases": [
                "Case_ID",
                "Case_Name",
                "Case_Description",
                "Client_ID",
                "Case_Status",
                "Lawyer_ID",
                "Last_Updated",
                "Date_Opened",
                "Date_Closed",
                "Status",
                "Case_Closed_Date",
                "Practice_Area_ID",
                "Case_Manager_ID",
                "Open_Date",
                "Closed",
                "Case_End_Date",
                "Case_Start_Date",
                "Firm_ID",
                "Office_ID",
                "CaseStatus",
                "CaseNumber",
                "ClientID",
                "CaseTitle",
                "CaseTypeID",
                "CaseType",
                "CourtName",
                "ClosedDate",
                "Settlement",
                "ID",
                "HearingDate",
                "ClosingDate",
                "AppealStatus",
                "LawyerID",
                "OpeningDate",
                "verdict",
                "judge_id",
                "defendant_state",
                "plaintiff_state",
                "lawyer_id"
            ]
        }
    },
    {
        "id": 156,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'status', 'location', 'deadline', 'name', 'description', 'id', 'budget', 'client_id', 'completion_date'], 'Tasks': ['task_id', 'task_name', 'project_id', 'start_date', 'end_date', 'status', 'assigned_to', 'created_by', 'created_date', 'due_date', 'completed_date', 'completed_by', 'department_id', 'priority', 'duration', 'Complete', 'completion_date', 'estimated_duration', 'completed_on', 'name', 'task_type', 'id', 'completed', 'actual_duration', 'budget', 'description', 'open_date']} and \n# the user question: Example 3: Retrieve the name and description of all projects that have at least one completed task with an actual duration greater than 8 hours,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Example 3: Retrieve the name and description of all projects that have at least one completed task with an actual duration greater than 8 hours",
        "output": "SELECT DISTINCT Projects.name, Projects.description FROM Projects INNER JOIN Tasks ON Projects.id = Tasks.project_id WHERE Tasks.completed = 1 AND Tasks.actual_duration > 8;",
        "schema": "project_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "status",
                "location",
                "deadline",
                "name",
                "description",
                "id",
                "budget",
                "client_id",
                "completion_date"
            ],
            "Tasks": [
                "task_id",
                "task_name",
                "project_id",
                "start_date",
                "end_date",
                "status",
                "assigned_to",
                "created_by",
                "created_date",
                "due_date",
                "completed_date",
                "completed_by",
                "department_id",
                "priority",
                "duration",
                "Complete",
                "completion_date",
                "estimated_duration",
                "completed_on",
                "name",
                "task_type",
                "id",
                "completed",
                "actual_duration",
                "budget",
                "description",
                "open_date"
            ]
        }
    },
    {
        "id": 158,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['employee_id', 'first_name', 'last_name', 'email', 'phone_number', 'title', 'department_id', 'job_id', 'salary', 'address_id', 'Email', 'Hire_Date', 'Employee_Name', 'Department_ID'], 'Task': ['task_id', 'description', 'deadline', 'employee_id', 'campaign_id', 'completed', 'priority', 'completion_date', 'completed_date']} and \n# the user question: Retrieve the names and email addresses of all employees who have been assigned tasks with a priority level of \"low\" and have not been completed yet:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all employees who have been assigned tasks with a priority level of \"low\" and have not been completed yet:",
        "output": "SELECT DISTINCT Employee.first_name, Employee.last_name, Employee.email FROM Employee INNER JOIN Task ON Employee.employee_id = Task.employee_id WHERE Task.priority = 'low' AND Task.completed = 0;",
        "schema": "public_relations",
        "processed_schema_content": {
            "Employee": [
                "employee_id",
                "first_name",
                "last_name",
                "email",
                "phone_number",
                "title",
                "department_id",
                "job_id",
                "salary",
                "address_id",
                "Email",
                "Hire_Date",
                "Employee_Name",
                "Department_ID"
            ],
            "Task": [
                "task_id",
                "description",
                "deadline",
                "employee_id",
                "campaign_id",
                "completed",
                "priority",
                "completion_date",
                "completed_date"
            ]
        }
    },
    {
        "id": 162,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'stocks': ['stock_price', 'stock_name', 'shares', 'user_id', 'stock_id', 'stock_quantity', 'stock_symbol', 'company_name', 'stock_type_id', 'current_price', 'dividend_yield', 'stock_value', 'quantity', 'price', 'previous_value', 'current_value', 'stock_date', 'price_to_earnings', 'name', 'XYZ']} and \n# the user question: Show the name and current value of all stocks that have increased in value by at least 10% over the past month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Show the name and current value of all stocks that have increased in value by at least 10% over the past month.",
        "output": "SELECT stock_name, current_value FROM stocks WHERE (current_value - previous_value) / previous_value >= 0.1 AND stock_date BETWEEN DATE('now','-1 month') AND DATE('now');",
        "schema": "finance",
        "processed_schema_content": {
            "stocks": [
                "stock_price",
                "stock_name",
                "shares",
                "user_id",
                "stock_id",
                "stock_quantity",
                "stock_symbol",
                "company_name",
                "stock_type_id",
                "current_price",
                "dividend_yield",
                "stock_value",
                "quantity",
                "price",
                "previous_value",
                "current_value",
                "stock_date",
                "price_to_earnings",
                "name",
                "XYZ"
            ]
        }
    },
    {
        "id": 163,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'graphic_novels': ['publish_date', 'name', 'author', 'publisher', 'pages', 'price', 'id', 'rating', 'sale_price', 'series_id', 'in_stock', 'format', 'page_count', 'trilogy_number', 'series', 'protagonist', 'genre', 'publication_date', 'writer', 'release_date', 'awards']} and \n# the user question: Get the name and release year of all graphic novels that are part of a series with more than 10 volumes.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the name and release year of all graphic novels that are part of a series with more than 10 volumes.",
        "output": "SELECT name, strftime('%Y', publish_date) as release_year FROM graphic_novels WHERE series_id IN (SELECT series_id FROM graphic_novels GROUP BY series_id HAVING COUNT(*) > 10);",
        "schema": "graphic_novels",
        "processed_schema_content": {
            "graphic_novels": [
                "publish_date",
                "name",
                "author",
                "publisher",
                "pages",
                "price",
                "id",
                "rating",
                "sale_price",
                "series_id",
                "in_stock",
                "format",
                "page_count",
                "trilogy_number",
                "series",
                "protagonist",
                "genre",
                "publication_date",
                "writer",
                "release_date",
                "awards"
            ]
        }
    },
    {
        "id": 164,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Carvings': ['carving_id', 'name', 'description', 'price', 'image_url', 'vendor_id', 'stock', 'size', 'last_sold_date', 'cost', 'material_id', 'creation_date', 'type_id', 'weight', 'date_sold', 'is_available', 'width', 'length', 'weight_kg', 'carving_type_id'], 'Materials': ['material_id', 'name', 'description', 'price', 'color', 'cost'], 'Carving_Materials': ['carving_id', 'material_id'], 'Orders': ['order_id', 'user_id', 'total_price', 'order_date', 'status', 'coupon_code', 'delivered', 'total_amount', 'shipping_country', 'date', 'country', 'customer_id', 'OrderDate', 'CustomerID', 'Amount'], 'Order_Items': ['order_item_id', 'order_id', 'carving_id', 'quantity', 'price', 'order_date']} and \n# the user question: Find the total revenue generated by carvings made of each material in the past 6 months, including the number of carvings sold and the average price per carving, sorted by total revenue in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total revenue generated by carvings made of each material in the past 6 months, including the number of carvings sold and the average price per carving, sorted by total revenue in descending order:",
        "output": "SELECT m.name AS material_name, COUNT(*) AS num_carvings_sold, AVG(oi.price) AS avg_price, SUM(oi.price * oi.quantity) AS total_revenue FROM Materials m JOIN Carving_Materials cm ON m.material_id = cm.material_id JOIN Carvings c ON cm.carving_id = c.carving_id JOIN Order_Items oi ON c.carving_id = oi.carving_id JOIN Orders o ON oi.order_id = o.order_id WHERE o.order_date BETWEEN DATE('now', '-6 months') AND DATE('now') GROUP BY m.material_id ORDER BY total_revenue DESC;",
        "schema": "soapstone_carving",
        "processed_schema_content": {
            "Carvings": [
                "carving_id",
                "name",
                "description",
                "price",
                "image_url",
                "vendor_id",
                "stock",
                "size",
                "last_sold_date",
                "cost",
                "material_id",
                "creation_date",
                "type_id",
                "weight",
                "date_sold",
                "is_available",
                "width",
                "length",
                "weight_kg",
                "carving_type_id"
            ],
            "Materials": [
                "material_id",
                "name",
                "description",
                "price",
                "color",
                "cost"
            ],
            "Carving_Materials": [
                "carving_id",
                "material_id"
            ],
            "Orders": [
                "order_id",
                "user_id",
                "total_price",
                "order_date",
                "status",
                "coupon_code",
                "delivered",
                "total_amount",
                "shipping_country",
                "date",
                "country",
                "customer_id",
                "OrderDate",
                "CustomerID",
                "Amount"
            ],
            "Order_Items": [
                "order_item_id",
                "order_id",
                "carving_id",
                "quantity",
                "price",
                "order_date"
            ]
        }
    },
    {
        "id": 165,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Show': ['rating', 'year', 'title', 'show_id', 'genre_id', 'studio_id', 'release_year', 'country_id', 'network_id', 'director_id', 'air_year', 'release_date', 'genre', 'status', 'production_type', 'producer_id', 'start_year', 'end_year'], 'Streaming_Service': ['show_id', 'service_id'], 'Service': ['service_id', 'name']} and \n# the user question: List the TV shows that have a sci-fi genre and have been released on Netflix, Hulu, or Amazon Prime Video.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the TV shows that have a sci-fi genre and have been released on Netflix, Hulu, or Amazon Prime Video.",
        "output": "SELECT DISTINCT Show.title FROM Show JOIN Streaming_Service ON Show.show_id = Streaming_Service.show_id JOIN Service ON Streaming_Service.service_id = Service.service_id WHERE Show.genre = 'Sci-Fi' AND (Service.name = 'Netflix' OR Service.name = 'Hulu' OR Service.name = 'Amazon Prime Video')",
        "schema": "tv_shows",
        "processed_schema_content": {
            "Show": [
                "rating",
                "year",
                "title",
                "show_id",
                "genre_id",
                "studio_id",
                "release_year",
                "country_id",
                "network_id",
                "director_id",
                "air_year",
                "release_date",
                "genre",
                "status",
                "production_type",
                "producer_id",
                "start_year",
                "end_year"
            ],
            "Streaming_Service": [
                "show_id",
                "service_id"
            ],
            "Service": [
                "service_id",
                "name"
            ]
        }
    },
    {
        "id": 166,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'tasks': ['created_at', 'project_id', 'task_id', 'user_id', 'due_date', 'completed', 'started_at', 'priority', 'completion_date', 'completed_date', 'start_date', 'created_date', 'creator_id', 'assignee_id', 'completed_at', 'name', 'tags', 'assigner_id', 'assigned_by_id', 'category'], 'users': ['user_id', 'name', 'email', 'last_login_attempt', 'total_tasks', 'completed_tasks', 'assignee_id', 'role', 'last_login', 'first_name', 'last_name', 'last_login_date', 'registration_date', 'password', 'job_title', 'hire_date']} and \n# the user question: Retrieve the names and email addresses of all users who have been assigned to tasks in project 1 and have also been assigned to tasks in project 2:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all users who have been assigned to tasks in project 1 and have also been assigned to tasks in project 2:",
        "output": "SELECT DISTINCT u.name, u.email FROM users u JOIN ( SELECT DISTINCT user_id FROM tasks WHERE project_id = 1 ) t1 ON u.user_id = t1.user_id JOIN ( SELECT DISTINCT user_id FROM tasks WHERE project_id = 2 ) t2 ON u.user_id = t2.user_id;",
        "schema": "ui_ux_design",
        "processed_schema_content": {
            "tasks": [
                "created_at",
                "project_id",
                "task_id",
                "user_id",
                "due_date",
                "completed",
                "started_at",
                "priority",
                "completion_date",
                "completed_date",
                "start_date",
                "created_date",
                "creator_id",
                "assignee_id",
                "completed_at",
                "name",
                "tags",
                "assigner_id",
                "assigned_by_id",
                "category"
            ],
            "users": [
                "user_id",
                "name",
                "email",
                "last_login_attempt",
                "total_tasks",
                "completed_tasks",
                "assignee_id",
                "role",
                "last_login",
                "first_name",
                "last_name",
                "last_login_date",
                "registration_date",
                "password",
                "job_title",
                "hire_date"
            ]
        }
    },
    {
        "id": 167,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'loan': ['return_date', 'loan_date', 'artwork_id', 'lender_id', 'location_id', 'start_date', 'artwork_location_id'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']} and \n# the user question: Find the titles and mediums of all artwork in the \"The British Museum\" that were created by \"Leonardo da Vinci\" and are not currently on loan.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the titles and mediums of all artwork in the \"The British Museum\" that were created by \"Leonardo da Vinci\" and are not currently on loan.",
        "output": "SELECT a.title, a.medium FROM artwork AS a INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS l ON al.location_id = l.location_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id WHERE ar.first_name = 'Leonardo' AND ar.last_name = 'da Vinci' AND l.name = 'The British Museum' AND al.end_date IS NULL AND a.artwork_id NOT IN (SELECT artwork_id FROM loan WHERE return_date IS NULL);",
        "schema": "painting",
        "processed_schema_content": {
            "artwork": [
                "artwork_id",
                "title",
                "year_created",
                "artist_id",
                "dimensions",
                "medium",
                "lender_id",
                "year",
                "estimated_value",
                "creation_date"
            ],
            "loan": [
                "return_date",
                "loan_date",
                "artwork_id",
                "lender_id",
                "location_id",
                "start_date",
                "artwork_location_id"
            ],
            "location": [
                "name",
                "start_date",
                "end_date",
                "location_id",
                "return_date",
                "Gallery",
                "Art",
                "Uffizi",
                "Gogh",
                "Museum",
                "Van",
                "State",
                "Hermitage",
                "Paul",
                "Getty",
                "Fine",
                "Houston",
                "Arts",
                "Boston",
                "Institute",
                "Chicago",
                "Bilbao",
                "Guggenheim",
                "Solomon",
                "Rijksmuseum",
                "type",
                "city",
                "founded_date",
                "country",
                "continent"
            ],
            "artwork_location": [
                "start_date",
                "end_date",
                "artwork_id",
                "location_id",
                "on_display",
                "on_loan",
                "artwork_location_id",
                "museum_id"
            ],
            "artist": [
                "first_name",
                "date_of_birth",
                "last_name",
                "artist_id",
                "Kandinsky",
                "van",
                "Gogh",
                "birth_date",
                "birth_country",
                "year_born",
                "country_of_birth",
                "birth_year",
                "country_of_origin",
                "gender"
            ]
        }
    },
    {
        "id": 168,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'price', 'manufacturer_id', 'avg_rating', 'color', 'category_id', 'review_count', 'quantity', 'max_rating', 'min_rating', 'max_review_count'], 'Manufacturers': ['manufacturer_id', 'manufacturer_name']} and \n# the user question: \"Retrieve the manufacturers with more than 5 products.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Retrieve the manufacturers with more than 5 products.\"",
        "output": "SELECT m.manufacturer_id, m.manufacturer_name FROM Manufacturers m JOIN Products p ON m.manufacturer_id = p.manufacturer_id GROUP BY m.manufacturer_id, m.manufacturer_name HAVING COUNT(p.product_id) > 5;",
        "schema": "technology",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "price",
                "manufacturer_id",
                "avg_rating",
                "color",
                "category_id",
                "review_count",
                "quantity",
                "max_rating",
                "min_rating",
                "max_review_count"
            ],
            "Manufacturers": [
                "manufacturer_id",
                "manufacturer_name"
            ]
        }
    },
    {
        "id": 169,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Client': ['client_id', 'name', 'email', 'phone_number', 'industry_id', 'location_id', 'industry', 'budget', 'first_name', 'last_name', 'state', 'city', 'company_name', 'annual_revenue'], 'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months'], 'Story': ['story_id', 'headline', 'content', 'date_published', 'outlet_id', 'campaign_id', 'date', 'journalist_id', 'sentiment_score', 'body', 'views', 'shares', 'likes', 'clicks', 'impressions', 'comments', 'text', 'publication_date', 'word_count'], 'MediaContact': ['outlet_id', 'first_name', 'phone_number', 'last_name', 'email', 'phone']} and \n# the user question: Retrieve the names and email addresses of all media contacts who have published a story that was featured in a campaign associated with a client with the name \"Acme Corporation\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all media contacts who have published a story that was featured in a campaign associated with a client with the name \"Acme Corporation\":",
        "output": "SELECT DISTINCT MediaContact.first_name, MediaContact.last_name, MediaContact.email FROM MediaContact INNER JOIN Story ON MediaContact.outlet_id = Story.outlet_id INNER JOIN Campaign ON Story.campaign_id = Campaign.campaign_id INNER JOIN Client ON Campaign.client_id = Client.client_id WHERE Client.name = 'Acme Corporation';",
        "schema": "public_relations",
        "processed_schema_content": {
            "Client": [
                "client_id",
                "name",
                "email",
                "phone_number",
                "industry_id",
                "location_id",
                "industry",
                "budget",
                "first_name",
                "last_name",
                "state",
                "city",
                "company_name",
                "annual_revenue"
            ],
            "Campaign": [
                "campaign_id",
                "name",
                "start_date",
                "end_date",
                "client_id",
                "Charity",
                "Drive",
                "Launch",
                "Product",
                "Rebranding",
                "launch_date",
                "impressions",
                "completed",
                "create_date",
                "budget",
                "brand_id",
                "total_spending",
                "cost",
                "invoiced",
                "total_budget",
                "product_id",
                "duration_months"
            ],
            "Story": [
                "story_id",
                "headline",
                "content",
                "date_published",
                "outlet_id",
                "campaign_id",
                "date",
                "journalist_id",
                "sentiment_score",
                "body",
                "views",
                "shares",
                "likes",
                "clicks",
                "impressions",
                "comments",
                "text",
                "publication_date",
                "word_count"
            ],
            "MediaContact": [
                "outlet_id",
                "first_name",
                "phone_number",
                "last_name",
                "email",
                "phone"
            ]
        }
    },
    {
        "id": 170,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID'], 'SalesOrderLineItem': ['ProductID', 'UnitPrice', 'Quantity', 'OrderID', 'OrderDate', 'Price', 'OrderLineID'], 'Customer': ['CustomerName', 'CustomerID', 'Country', 'SegmentID', 'Continent', 'PhoneNumber', 'Email', 'CreditLimit', 'State', 'AddressID', 'EmailAddress', 'LoyaltyLevelID', 'FirstName', 'LastName', 'City', 'StateCode', 'CountryCode', 'RegistrationDate']} and \n# the user question: Retrieve the list of customers who have spent more than $500 in total, but have not placed any orders in the past 6 months, including their name and total spent:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of customers who have spent more than $500 in total, but have not placed any orders in the past 6 months, including their name and total spent:",
        "output": "SELECT Customer.FirstName, Customer.LastName, SUM(SalesOrderLineItem.Quantity * SalesOrderLineItem.UnitPrice) AS TotalSpent FROM Customer JOIN SalesOrder ON Customer.CustomerID = SalesOrder.CustomerID JOIN SalesOrderLineItem ON SalesOrder.OrderID = SalesOrderLineItem.OrderID WHERE SalesOrder.OrderDate < DATE('now', '-6 month') GROUP BY Customer.CustomerID HAVING TotalSpent > 500;",
        "schema": "business_strategy",
        "processed_schema_content": {
            "SalesOrder": [
                "OrderID",
                "Year",
                "CustomerID",
                "OrderDate",
                "TotalAmount",
                "TotalPrice",
                "QuarterID",
                "ExpectedDeliveryDate",
                "ShippedDate",
                "EmployeeID",
                "CountryCode",
                "ReturnID",
                "OfficeID",
                "Discount",
                "OrderNumber",
                "Status",
                "RegionID"
            ],
            "SalesOrderLineItem": [
                "ProductID",
                "UnitPrice",
                "Quantity",
                "OrderID",
                "OrderDate",
                "Price",
                "OrderLineID"
            ],
            "Customer": [
                "CustomerName",
                "CustomerID",
                "Country",
                "SegmentID",
                "Continent",
                "PhoneNumber",
                "Email",
                "CreditLimit",
                "State",
                "AddressID",
                "EmailAddress",
                "LoyaltyLevelID",
                "FirstName",
                "LastName",
                "City",
                "StateCode",
                "CountryCode",
                "RegistrationDate"
            ]
        }
    },
    {
        "id": 172,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['order_date', 'customer_id', 'order_id', 'unit_price', 'quantity', 'sales_rep_id', 'id', 'total_amount', 'date', 'total_price', 'payment_date', 'shipping_method', 'shipped_date', 'salesperson_id', 'customer_name', 'shipping_state', 'order_total', 'status'], 'products': ['discount', 'price', 'category', 'id', 'stock_quantity', 'name', 'discontinued', 'category_id', 'product_id', 'product_name'], 'order_items': ['product_id', 'order_id', 'price', 'quantity']} and \n# the user question: Retrieve the total revenue generated by each product for the month of May 2023.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the total revenue generated by each product for the month of May 2023.",
        "output": "SELECT products.name, SUM(order_items.quantity * order_items.price) AS revenue FROM products JOIN order_items ON products.id = order_items.product_id JOIN orders ON order_items.order_id = orders.id WHERE orders.date BETWEEN '20230501' AND '20230531' GROUP BY products.name;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "orders": [
                "order_date",
                "customer_id",
                "order_id",
                "unit_price",
                "quantity",
                "sales_rep_id",
                "id",
                "total_amount",
                "date",
                "total_price",
                "payment_date",
                "shipping_method",
                "shipped_date",
                "salesperson_id",
                "customer_name",
                "shipping_state",
                "order_total",
                "status"
            ],
            "products": [
                "discount",
                "price",
                "category",
                "id",
                "stock_quantity",
                "name",
                "discontinued",
                "category_id",
                "product_id",
                "product_name"
            ],
            "order_items": [
                "product_id",
                "order_id",
                "price",
                "quantity"
            ]
        }
    },
    {
        "id": 173,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Client': ['client_id', 'name', 'email', 'phone_number', 'industry_id', 'location_id', 'industry', 'budget', 'first_name', 'last_name', 'state', 'city', 'company_name', 'annual_revenue'], 'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months'], 'Story': ['story_id', 'headline', 'content', 'date_published', 'outlet_id', 'campaign_id', 'date', 'journalist_id', 'sentiment_score', 'body', 'views', 'shares', 'likes', 'clicks', 'impressions', 'comments', 'text', 'publication_date', 'word_count'], 'MediaOutlet': ['outlet_id', 'name', 'outlet_type', 'state', 'city', 'contact_info', 'rating_id', 'language', 'location_id', 'email', 'circulation']} and \n# the user question: Retrieve the names and email addresses of all clients who have at least one campaign that has been featured in a story that was published in the last 30 days and has a sentiment score greater than 0.8 and has been featured in a story that had more than 10000 views and was published in a media outlet with a type of \"TV\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all clients who have at least one campaign that has been featured in a story that was published in the last 30 days and has a sentiment score greater than 0.8 and has been featured in a story that had more than 10000 views and was published in a media outlet with a type of \"TV\":",
        "output": "SELECT DISTINCT Client.name, Client.email FROM Client INNER JOIN Campaign ON Client.client_id = Campaign.client_id INNER JOIN Story ON Campaign.campaign_id = Story.campaign_id INNER JOIN MediaOutlet ON Story.outlet_id = MediaOutlet.outlet_id WHERE Story.date BETWEEN date('now', '-30 days') AND date('now') AND Story.sentiment_score > 0.8 AND Story.views > 10000 AND MediaOutlet.outlet_type = 'TV';",
        "schema": "public_relations",
        "processed_schema_content": {
            "Client": [
                "client_id",
                "name",
                "email",
                "phone_number",
                "industry_id",
                "location_id",
                "industry",
                "budget",
                "first_name",
                "last_name",
                "state",
                "city",
                "company_name",
                "annual_revenue"
            ],
            "Campaign": [
                "campaign_id",
                "name",
                "start_date",
                "end_date",
                "client_id",
                "Charity",
                "Drive",
                "Launch",
                "Product",
                "Rebranding",
                "launch_date",
                "impressions",
                "completed",
                "create_date",
                "budget",
                "brand_id",
                "total_spending",
                "cost",
                "invoiced",
                "total_budget",
                "product_id",
                "duration_months"
            ],
            "Story": [
                "story_id",
                "headline",
                "content",
                "date_published",
                "outlet_id",
                "campaign_id",
                "date",
                "journalist_id",
                "sentiment_score",
                "body",
                "views",
                "shares",
                "likes",
                "clicks",
                "impressions",
                "comments",
                "text",
                "publication_date",
                "word_count"
            ],
            "MediaOutlet": [
                "outlet_id",
                "name",
                "outlet_type",
                "state",
                "city",
                "contact_info",
                "rating_id",
                "language",
                "location_id",
                "email",
                "circulation"
            ]
        }
    },
    {
        "id": 174,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['customer_id', 'email_address', 'customer_name', 'country_id', 'city_id', 'city', 'birth_date'], 'Purchase': ['purchase_date', 'customer_id', 'product_id', 'unit_price', 'quantity', 'city_id', 'country_id', 'amount', 'date', 'purchase_id', 'category_id', 'store_id', 'price']} and \n# the user question: Find the names of all customers who have purchased at least one product in every product category.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all customers who have purchased at least one product in every product category.",
        "output": "SELECT customer_name FROM Customer WHERE customer_id IN ( SELECT customer_id FROM Purchase GROUP BY customer_id HAVING COUNT(DISTINCT category_id) = (SELECT COUNT(*) FROM Category) );",
        "schema": "economics",
        "processed_schema_content": {
            "Customer": [
                "customer_id",
                "email_address",
                "customer_name",
                "country_id",
                "city_id",
                "city",
                "birth_date"
            ],
            "Purchase": [
                "purchase_date",
                "customer_id",
                "product_id",
                "unit_price",
                "quantity",
                "city_id",
                "country_id",
                "amount",
                "date",
                "purchase_id",
                "category_id",
                "store_id",
                "price"
            ]
        }
    },
    {
        "id": 176,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Match': ['team1_id', 'match_id', 'team2_id', 'venue_id', 'date', 'venue', 'winning_team_id', 'tournament_id', 'attendance', 'team', 'winning_team'], 'Referee': ['referee_name', 'referee_id'], 'Referee_Assignment': ['match_id', 'referee_id'], 'Venue': ['venue_name', 'venue_id', 'country', 'city'], 'Tournament': ['tournament_id', 'country', 'tournament_name', 'start_date', 'venue_id']} and \n# the user question: Find the referees who have officiated matches in tournaments held in at least fifteen different cities and fifteen different years,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the referees who have officiated matches in tournaments held in at least fifteen different cities and fifteen different years",
        "output": "SELECT Referee.referee_name FROM Referee JOIN Referee_Assignment ON Referee.referee_id = Referee_Assignment.referee_id JOIN Match ON Referee_Assignment.match_id = Match.match_id JOIN Tournament ON Match.tournament_id = Tournament.tournament_id JOIN Venue ON Tournament.venue_id = Venue.venue_id GROUP BY Referee.referee_name HAVING COUNT(DISTINCT Venue.city) >= 15 AND COUNT(DISTINCT strftime('%Y', Tournament.start_date)) >= 15;",
        "schema": "volleyball",
        "processed_schema_content": {
            "Match": [
                "team1_id",
                "match_id",
                "team2_id",
                "venue_id",
                "date",
                "venue",
                "winning_team_id",
                "tournament_id",
                "attendance",
                "team",
                "winning_team"
            ],
            "Referee": [
                "referee_name",
                "referee_id"
            ],
            "Referee_Assignment": [
                "match_id",
                "referee_id"
            ],
            "Venue": [
                "venue_name",
                "venue_id",
                "country",
                "city"
            ],
            "Tournament": [
                "tournament_id",
                "country",
                "tournament_name",
                "start_date",
                "venue_id"
            ]
        }
    },
    {
        "id": 178,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Suppliers': ['supplier_name', 'supplier_id', 'phone_number', 'address', 'email', 'country', 'contact_name', 'state', 'city', 'phone', 'company_name', 'Canada', 'USA', 'supplier_rating', 'zip'], 'Sale_Items': ['product_id', 'sale_id', 'quantity', 'sale_item_id', 'customer_id', 'unit_price', 'discount_code', 'sale_date', 'price']} and \n# the user question: Retrieve the names and total revenue of all suppliers, sorted by total revenue in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and total revenue of all suppliers, sorted by total revenue in descending order.",
        "output": "SELECT Suppliers.supplier_name, SUM(Sale_Items.price * Sale_Items.quantity) AS total_revenue FROM Suppliers INNER JOIN Products ON Suppliers.supplier_id = Products.supplier_id INNER JOIN Sale_Items ON Products.product_id = Sale_Items.product_id GROUP BY Suppliers.supplier_id ORDER BY total_revenue DESC;",
        "schema": "pharmacy",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "price",
                "description",
                "product_description",
                "supplier_id",
                "category_id",
                "units_in_stock",
                "expiration_date",
                "stock_quantity",
                "expiration_id",
                "discontinued",
                "cost_price",
                "quantity_in_stock",
                "unit_price",
                "unit_cost",
                "brand_name",
                "last_supplied_date",
                "manufacturer_name",
                "backorder"
            ],
            "Suppliers": [
                "supplier_name",
                "supplier_id",
                "phone_number",
                "address",
                "email",
                "country",
                "contact_name",
                "state",
                "city",
                "phone",
                "company_name",
                "Canada",
                "USA",
                "supplier_rating",
                "zip"
            ],
            "Sale_Items": [
                "product_id",
                "sale_id",
                "quantity",
                "sale_item_id",
                "customer_id",
                "unit_price",
                "discount_code",
                "sale_date",
                "price"
            ]
        }
    },
    {
        "id": 179,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Patients': ['medical_history', 'patient_id', 'first_name', 'last_name', 'age_group', 'gender', 'Age', 'Contact_Info', 'Name', 'Diagnosis', 'Discharge_Date', 'Admission_Date', 'Address', 'Family_History', 'Patient_ID', 'Doctor_ID', 'Doctor_I', 'AdmissionDate', 'Therapy', 'date_of_birth', 'name'], 'Rooms': ['room_id', 'room_number', 'bed_number', 'room_type'], 'Admissions': ['date_discharged', 'room_id', 'patient_id', 'admission_id', 'date_admitted', 'nurse_id', 'medical_record_id', 'admission_date', 'discharge_date', 'ward_id', 'num_medications', 'Unit_Type', 'Admission_Date', 'Diagnosis', 'Discharge_Date', 'Patient_ID']} and \n# the user question: Find the patients who have been admitted to a room and have a medical history of high blood pressure.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the patients who have been admitted to a room and have a medical history of high blood pressure.",
        "output": "SELECT DISTINCT Patients.patient_id, Patients.first_name, Patients.last_name, Rooms.room_number, Patients.medical_history FROM Patients INNER JOIN Admissions ON Patients.patient_id = Admissions.patient_id INNER JOIN Rooms ON Admissions.room_id = Rooms.room_id WHERE Patients.medical_history LIKE '%High Blood Pressure%';",
        "schema": "nursing",
        "processed_schema_content": {
            "Patients": [
                "medical_history",
                "patient_id",
                "first_name",
                "last_name",
                "age_group",
                "gender",
                "Age",
                "Contact_Info",
                "Name",
                "Diagnosis",
                "Discharge_Date",
                "Admission_Date",
                "Address",
                "Family_History",
                "Patient_ID",
                "Doctor_ID",
                "Doctor_I",
                "AdmissionDate",
                "Therapy",
                "date_of_birth",
                "name"
            ],
            "Rooms": [
                "room_id",
                "room_number",
                "bed_number",
                "room_type"
            ],
            "Admissions": [
                "date_discharged",
                "room_id",
                "patient_id",
                "admission_id",
                "date_admitted",
                "nurse_id",
                "medical_record_id",
                "admission_date",
                "discharge_date",
                "ward_id",
                "num_medications",
                "Unit_Type",
                "Admission_Date",
                "Diagnosis",
                "Discharge_Date",
                "Patient_ID"
            ]
        }
    },
    {
        "id": 181,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'appointments': ['appointment_id', 'date_time', 'client_id', 'artist_id', 'invoice_id', 'total_cost', 'appointment_date', 'discount_percentage', 'photoshoot_id', 'duration', 'price', 'avg_rating', 'quantity', 'status', 'reschedule_id', 'location_id', 'appointment_start_time', 'appointment_end_time', 'order_id', 'makeup_artist_id'], 'appointment_services': ['appointment_service_id', 'appointment_id', 'service_id', 'quantity', 'service_name', 'artist_id', 'price', 'location_id', 'duration', 'rating'], 'makeup_artists': ['name', 'makeup_artist_id', 'hourly_rate', 'rate', 'artist_id', 'hire_date', 'email']} and \n# the user question: Find the total revenue generated by each makeup artist in the past quarter:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total revenue generated by each makeup artist in the past quarter:",
        "output": "SELECT makeup_artists.name, SUM(appointment_services.price) AS total_revenue FROM makeup_artists INNER JOIN appointments ON makeup_artists.artist_id = appointments.makeup_artist_id INNER JOIN appointment_services ON appointments.appointment_id = appointment_services.appointment_id WHERE appointments.appointment_date BETWEEN DATE('now', '-3 months') AND DATE('now') GROUP BY makeup_artists.artist_id;",
        "schema": "makeup_artistry",
        "processed_schema_content": {
            "appointments": [
                "appointment_id",
                "date_time",
                "client_id",
                "artist_id",
                "invoice_id",
                "total_cost",
                "appointment_date",
                "discount_percentage",
                "photoshoot_id",
                "duration",
                "price",
                "avg_rating",
                "quantity",
                "status",
                "reschedule_id",
                "location_id",
                "appointment_start_time",
                "appointment_end_time",
                "order_id",
                "makeup_artist_id"
            ],
            "appointment_services": [
                "appointment_service_id",
                "appointment_id",
                "service_id",
                "quantity",
                "service_name",
                "artist_id",
                "price",
                "location_id",
                "duration",
                "rating"
            ],
            "makeup_artists": [
                "name",
                "makeup_artist_id",
                "hourly_rate",
                "rate",
                "artist_id",
                "hire_date",
                "email"
            ]
        }
    },
    {
        "id": 183,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Logged_Meal': ['meal_id', 'plan_id', 'log_date', 'client_id', 'calories', 'meal_category', 'food_id']} and \n# the user question: Find the clients who have logged at least one meal in each category (breakfast, lunch, dinner) in the current week.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the clients who have logged at least one meal in each category (breakfast, lunch, dinner) in the current week.",
        "output": "SELECT Logged_Meal.client_id FROM Logged_Meal WHERE Logged_Meal.log_date >= DATE('now', 'weekday 0', '-6 days') AND Logged_Meal.log_date < DATE('now', 'weekday 0', '+1 days') GROUP BY Logged_Meal.client_id, Logged_Meal.meal_category HAVING COUNT(DISTINCT Logged_Meal.meal_category) = 3",
        "schema": "personal_training",
        "processed_schema_content": {
            "Logged_Meal": [
                "meal_id",
                "plan_id",
                "log_date",
                "client_id",
                "calories",
                "meal_category",
                "food_id"
            ]
        }
    },
    {
        "id": 188,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'status', 'location', 'deadline', 'name', 'description', 'id', 'budget', 'client_id', 'completion_date'], 'Tasks': ['task_id', 'task_name', 'project_id', 'start_date', 'end_date', 'status', 'assigned_to', 'created_by', 'created_date', 'due_date', 'completed_date', 'completed_by', 'department_id', 'priority', 'duration', 'Complete', 'completion_date', 'estimated_duration', 'completed_on', 'name', 'task_type', 'id', 'completed', 'actual_duration', 'budget', 'description', 'open_date'], 'Users': ['user_id', 'name', 'email', 'password', 'role', 'department_id', 'role_id']} and \n# the user question: Example 3: Retrieve the name and email address of all users who have been assigned tasks in a project that has a status of \"In Progress\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Example 3: Retrieve the name and email address of all users who have been assigned tasks in a project that has a status of \"In Progress\"",
        "output": "SELECT DISTINCT Users.name, Users.email FROM Users INNER JOIN Tasks ON Users.name = Tasks.assigned_to INNER JOIN Projects ON Tasks.project_id = Projects.id WHERE Projects.status = 'In Progress';",
        "schema": "project_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "status",
                "location",
                "deadline",
                "name",
                "description",
                "id",
                "budget",
                "client_id",
                "completion_date"
            ],
            "Tasks": [
                "task_id",
                "task_name",
                "project_id",
                "start_date",
                "end_date",
                "status",
                "assigned_to",
                "created_by",
                "created_date",
                "due_date",
                "completed_date",
                "completed_by",
                "department_id",
                "priority",
                "duration",
                "Complete",
                "completion_date",
                "estimated_duration",
                "completed_on",
                "name",
                "task_type",
                "id",
                "completed",
                "actual_duration",
                "budget",
                "description",
                "open_date"
            ],
            "Users": [
                "user_id",
                "name",
                "email",
                "password",
                "role",
                "department_id",
                "role_id"
            ]
        }
    },
    {
        "id": 189,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'soapstone_carving': ['in_stock', 'name', 'price', 'last_sold_date', 'country_of_origin', 'description', 'quantity_sold', 'id', 'units_sold', 'year_of_production', 'discount', 'carving_id', 'weight', 'Canada', 'Zimbabwe', 'units_in_stock', 'rating', 'Kenya', 'Lion', 'China', 'Giraffe']} and \n# the user question: Retrieve the name and price of all soapstone carvings that are currently out of stock and have a discount of at least 10%.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all soapstone carvings that are currently out of stock and have a discount of at least 10%.",
        "output": "SELECT name, price FROM soapstone_carving WHERE in_stock = 0 AND discount >= 0.1;",
        "schema": "soapstone_carving",
        "processed_schema_content": {
            "soapstone_carving": [
                "in_stock",
                "name",
                "price",
                "last_sold_date",
                "country_of_origin",
                "description",
                "quantity_sold",
                "id",
                "units_sold",
                "year_of_production",
                "discount",
                "carving_id",
                "weight",
                "Canada",
                "Zimbabwe",
                "units_in_stock",
                "rating",
                "Kenya",
                "Lion",
                "China",
                "Giraffe"
            ]
        }
    },
    {
        "id": 191,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'mental_skills': ['skill_id', 'skill_name', 'skill_description', 'athlete_id', 'Focus', 'Visualization', 'skill_mastered', 'skill_level', 'Excellent', 'High', 'Low'], 'goals': ['goal_id', 'goal_name', 'goal_rating', 'skill_id'], 'athlete_goals': ['goal_id', 'athlete_id', 'goal_achieved', 'goal_date', 'date_achieved']} and \n# the user question: Get a list of all athletes who have a \"High\" level in the \"Motivation\" mental skill and have achieved their goal related to \"Endurance\" within the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get a list of all athletes who have a \"High\" level in the \"Motivation\" mental skill and have achieved their goal related to \"Endurance\" within the last month.",
        "output": "SELECT athletes.name, goals.goal_name FROM athletes INNER JOIN athlete_goals ON athletes.athlete_id = athlete_goals.athlete_id INNER JOIN goals ON athlete_goals.goal_id = goals.goal_id INNER JOIN athlete_skills ON athletes.athlete_id = athlete_skills.athlete_id INNER JOIN mental_skills ON athlete_skills.skill_id = mental_skills.skill_id WHERE goals.goal_name = 'Endurance' AND mental_skills.skill_name = 'Motivation' AND athlete_skills.skill_level = 'High' AND athlete_goals.goal_achieved = 1 AND athlete_goals.goal_date >= date('now', '-1 month');",
        "schema": "sports_psychology",
        "processed_schema_content": {
            "athletes": [
                "name",
                "athlete_id",
                "team_id",
                "last_name",
                "athlete_name",
                "age"
            ],
            "athlete_skills": [
                "skill_id",
                "athlete_id",
                "skill_level",
                "skill_mastered",
                "self_talk",
                "mental_preparation",
                "imagery",
                "goal_setting",
                "anxiety",
                "focus",
                "mental_toughness",
                "confidence",
                "motivation"
            ],
            "mental_skills": [
                "skill_id",
                "skill_name",
                "skill_description",
                "athlete_id",
                "Focus",
                "Visualization",
                "skill_mastered",
                "skill_level",
                "Excellent",
                "High",
                "Low"
            ],
            "goals": [
                "goal_id",
                "goal_name",
                "goal_rating",
                "skill_id"
            ],
            "athlete_goals": [
                "goal_id",
                "athlete_id",
                "goal_achieved",
                "goal_date",
                "date_achieved"
            ]
        }
    },
    {
        "id": 192,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Websites': ['website_id', 'user_id', 'url', 'created_at', 'updated_at', 'name', 'domain_id', 'domain_authority_score', 'domain_created_at'], 'Pages': ['page_id', 'website_id', 'url', 'title', 'description', 'content', 'created_at', 'updated_at', 'meta_description', 'meta_keywords', 'meta_title', 'h1_tag', 'h2_tag', 'title_tag', 'canonical_url', 'description_tag', 'header_tag', 'meta_tag', 'meta_keyword', 'h1', 'heading', 'header', 'word_count', 'time_on_page', 'total_words', 'http_status_code', 'user_id', 'last_modified_date', '[website_id]'], 'Page_Stats': ['page_stat_id', 'page_id', 'visits', 'bounce_rate', 'time_on_page', 'created_at', 'updated_at', 'organic_traffic', 'load_time', 'page_speed_score', 'total_images', 'total_videos', 'page_authority_score', 'domain_authority_score', 'page_load_time', 'backlinks', 'search_query', 'search_volume']} and \n# the user question: Retrieve the names and URLs of all websites that have at least one page with a meta description containing the word \"services\" and a page speed score greater than or equal to 70:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and URLs of all websites that have at least one page with a meta description containing the word \"services\" and a page speed score greater than or equal to 70:",
        "output": "SELECT DISTINCT Websites.name, Websites.url FROM Websites INNER JOIN Pages ON Websites.website_id = Pages.website_id INNER JOIN Page_Stats ON Pages.page_id = Page_Stats.page_id WHERE Pages.meta_description LIKE '%services%' AND Page_Stats.page_speed_score >= 70;",
        "schema": "search_engine_optimization_(seo)",
        "processed_schema_content": {
            "Websites": [
                "website_id",
                "user_id",
                "url",
                "created_at",
                "updated_at",
                "name",
                "domain_id",
                "domain_authority_score",
                "domain_created_at"
            ],
            "Pages": [
                "page_id",
                "website_id",
                "url",
                "title",
                "description",
                "content",
                "created_at",
                "updated_at",
                "meta_description",
                "meta_keywords",
                "meta_title",
                "h1_tag",
                "h2_tag",
                "title_tag",
                "canonical_url",
                "description_tag",
                "header_tag",
                "meta_tag",
                "meta_keyword",
                "h1",
                "heading",
                "header",
                "word_count",
                "time_on_page",
                "total_words",
                "http_status_code",
                "user_id",
                "last_modified_date",
                "[website_id]"
            ],
            "Page_Stats": [
                "page_stat_id",
                "page_id",
                "visits",
                "bounce_rate",
                "time_on_page",
                "created_at",
                "updated_at",
                "organic_traffic",
                "load_time",
                "page_speed_score",
                "total_images",
                "total_videos",
                "page_authority_score",
                "domain_authority_score",
                "page_load_time",
                "backlinks",
                "search_query",
                "search_volume"
            ]
        }
    },
    {
        "id": 193,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Carvings': ['carving_id', 'name', 'description', 'price', 'image_url', 'vendor_id', 'stock', 'size', 'last_sold_date', 'cost', 'material_id', 'creation_date', 'type_id', 'weight', 'date_sold', 'is_available', 'width', 'length', 'weight_kg', 'carving_type_id'], 'Materials': ['material_id', 'name', 'description', 'price', 'color', 'cost'], 'Carving_Materials': ['carving_id', 'material_id'], 'Reviews': ['review_id', 'carving_id', 'user_id', 'rating', 'comment', 'review_date'], 'Order_Items': ['order_item_id', 'order_id', 'carving_id', 'quantity', 'price', 'order_date']} and \n# the user question: Find the top 5 highest rated carvings made of soapstone that have been reviewed at least 10 times and have an average price of less than $50:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the top 5 highest rated carvings made of soapstone that have been reviewed at least 10 times and have an average price of less than $50:",
        "output": "SELECT c.name AS carving_name, AVG(r.rating) AS avg_rating, COUNT(*) AS num_reviews, AVG(oi.price) AS avg_price FROM Carvings c JOIN Carving_Materials cm ON c.carving_id = cm.carving_id JOIN Materials m ON cm.material_id = m.material_id JOIN Order_Items oi ON c.carving_id = oi.carving_id JOIN Reviews r ON c.carving_id = r.carving_id WHERE m.name = 'Soapstone' AND COUNT(*) >= 10 AND AVG(oi.price) < 50 GROUP BY c.carving_id ORDER BY avg_rating DESC LIMIT 5;",
        "schema": "soapstone_carving",
        "processed_schema_content": {
            "Carvings": [
                "carving_id",
                "name",
                "description",
                "price",
                "image_url",
                "vendor_id",
                "stock",
                "size",
                "last_sold_date",
                "cost",
                "material_id",
                "creation_date",
                "type_id",
                "weight",
                "date_sold",
                "is_available",
                "width",
                "length",
                "weight_kg",
                "carving_type_id"
            ],
            "Materials": [
                "material_id",
                "name",
                "description",
                "price",
                "color",
                "cost"
            ],
            "Carving_Materials": [
                "carving_id",
                "material_id"
            ],
            "Reviews": [
                "review_id",
                "carving_id",
                "user_id",
                "rating",
                "comment",
                "review_date"
            ],
            "Order_Items": [
                "order_item_id",
                "order_id",
                "carving_id",
                "quantity",
                "price",
                "order_date"
            ]
        }
    },
    {
        "id": 194,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Attendee': ['attendee_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'date_of_birth', 'job_title', 'city', 'age', 'email'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID'], 'Payment': ['payment_id', 'registration_id', 'payment_date', 'amount', 'credit_card_id', 'payment_method_id', 'payment_type'], 'Credit_Card': ['card_type', 'credit_card_id']} and \n# the user question: What is the name and email address of the attendee who has made the largest payment overall using a Discover card?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What is the name and email address of the attendee who has made the largest payment overall using a Discover card?",
        "output": "SELECT Attendee.first_name, Attendee.last_name, Attendee.email_address, MAX(Payment.amount) AS largest_payment FROM Attendee INNER JOIN Registration ON Attendee.attendee_id = Registration.attendee_id INNER JOIN Payment ON Registration.registration_id = Payment.registration_id INNER JOIN Credit_Card ON Payment.credit_card_id = Credit_Card.credit_card_id WHERE Credit_Card.card_type = 'Discover' GROUP BY Attendee.attendee_id ORDER BY largest_payment DESC LIMIT 1;",
        "schema": "event_management",
        "processed_schema_content": {
            "Attendee": [
                "attendee_id",
                "first_name",
                "last_name",
                "email_address",
                "phone_number",
                "date_of_birth",
                "job_title",
                "city",
                "age",
                "email"
            ],
            "Registration": [
                "registration_id",
                "attendee_id",
                "event_id",
                "registration_date",
                "num_tickets",
                "attended",
                "fee",
                "registration_status",
                "payment_status",
                "payment_method",
                "num_attendees",
                "EventName",
                "AttendeeID"
            ],
            "Payment": [
                "payment_id",
                "registration_id",
                "payment_date",
                "amount",
                "credit_card_id",
                "payment_method_id",
                "payment_type"
            ],
            "Credit_Card": [
                "card_type",
                "credit_card_id"
            ]
        }
    },
    {
        "id": 197,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'customer': ['customer_id', 'customer_name', 'address', 'phone_number'], 'purchase': ['customer_id', 'purchase_date', 'amount', 'drug_id']} and \n# the user question: Find the names and addresses of all the customers who have made a purchase at least once a month for the past 6 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and addresses of all the customers who have made a purchase at least once a month for the past 6 months.",
        "output": "SELECT customer_name, address FROM customer WHERE customer_id IN (SELECT customer_id FROM purchase WHERE purchase_date >= date('now', '-6 months') GROUP BY customer_id HAVING COUNT(DISTINCT strftime('%Y-%m', purchase_date)) >= 6);",
        "schema": "pharmacy",
        "processed_schema_content": {
            "customer": [
                "customer_id",
                "customer_name",
                "address",
                "phone_number"
            ],
            "purchase": [
                "customer_id",
                "purchase_date",
                "amount",
                "drug_id"
            ]
        }
    },
    {
        "id": 198,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender'], 'collector': ['first_name', 'collector_id', 'last_name', 'email', 'country', 'state', 'country_of_origin'], 'artwork_acquisition': ['artwork_id', 'location_id', 'acquisition_type', 'acquisition_id', 'acquisition_date', 'collector_id', 'date_acquired']} and \n# the user question: Find the names of all collectors who have acquired artwork created by an artist who was born in the same country as them.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all collectors who have acquired artwork created by an artist who was born in the same country as them.",
        "output": "SELECT DISTINCT c.first_name, c.last_name FROM collector AS c INNER JOIN artwork_acquisition AS aa ON c.collector_id = aa.collector_id INNER JOIN artwork AS a ON aa.artwork_id = a.artwork_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id WHERE c.country_of_origin = ar.country_of_origin;",
        "schema": "painting",
        "processed_schema_content": {
            "artwork": [
                "artwork_id",
                "title",
                "year_created",
                "artist_id",
                "dimensions",
                "medium",
                "lender_id",
                "year",
                "estimated_value",
                "creation_date"
            ],
            "artist": [
                "first_name",
                "date_of_birth",
                "last_name",
                "artist_id",
                "Kandinsky",
                "van",
                "Gogh",
                "birth_date",
                "birth_country",
                "year_born",
                "country_of_birth",
                "birth_year",
                "country_of_origin",
                "gender"
            ],
            "collector": [
                "first_name",
                "collector_id",
                "last_name",
                "email",
                "country",
                "state",
                "country_of_origin"
            ],
            "artwork_acquisition": [
                "artwork_id",
                "location_id",
                "acquisition_type",
                "acquisition_id",
                "acquisition_date",
                "collector_id",
                "date_acquired"
            ]
        }
    },
    {
        "id": 201,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Orders': ['customer_id', 'order_total', 'order_date', 'order_id', 'delivery_date', 'shipment_id', 'order_total_cost', 'date', 'total_price', 'total_amount', 'shipping_date'], 'Customers': ['customer_id', 'phone_number', 'email', 'customer_name', 'address', 'customer_email', 'customer_phone', 'customer_address', 'email_address', 'phone', 'registration_date', 'country', 'city', 'state', 'name', 'id', 'first_name', 'last_name']} and \n# the user question: Retrieve the list of customers who have not placed any orders in the last 6 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of customers who have not placed any orders in the last 6 months.",
        "output": "SELECT Customers.customer_name, Customers.email, Customers.phone_number FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.order_date < DATE('now', '-6 months') OR Orders.order_date IS NULL;",
        "schema": "glass_etching",
        "processed_schema_content": {
            "Orders": [
                "customer_id",
                "order_total",
                "order_date",
                "order_id",
                "delivery_date",
                "shipment_id",
                "order_total_cost",
                "date",
                "total_price",
                "total_amount",
                "shipping_date"
            ],
            "Customers": [
                "customer_id",
                "phone_number",
                "email",
                "customer_name",
                "address",
                "customer_email",
                "customer_phone",
                "customer_address",
                "email_address",
                "phone",
                "registration_date",
                "country",
                "city",
                "state",
                "name",
                "id",
                "first_name",
                "last_name"
            ]
        }
    },
    {
        "id": 202,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EnergySuppliers': ['supplier_name', 'supplier_id', 'contact_name', 'phone_number', 'supplier_state', 'supplier_city', 'supplier_address', 'supplier_zip', 'supplier_location'], 'EnergySources': ['source_id', 'source_name', 'last_active', 'Solar', 'Panels', 'supplier_id', 'start_date', 'end_date', 'product_id', 'source_type', 'capacity', 'source_capacity', 'user_id'], 'EnergyProduction': ['source_id', 'end_date', 'start_date', 'production_value', 'reading_id', 'meter_id', 'production_date']} and \n# the user question: Retrieve the names of all energy suppliers and their respective sources, and the total energy production for each source for the year 2043, where the source type is \"hydro\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all energy suppliers and their respective sources, and the total energy production for each source for the year 2043, where the source type is \"hydro\".",
        "output": "SELECT s.supplier_name, src.source_name, SUM(pr.production_value) AS total_production FROM EnergySuppliers s INNER JOIN EnergySources src ON s.supplier_id = src.supplier_id INNER JOIN EnergyProduction pr ON src.source_id = pr.source_id WHERE src.source_type = 'hydro' AND pr.start_date >= '2043-01-01' AND pr.end_date <= '2043-12-31' GROUP BY s.supplier_id, src.source_id;",
        "schema": "energy",
        "processed_schema_content": {
            "EnergySuppliers": [
                "supplier_name",
                "supplier_id",
                "contact_name",
                "phone_number",
                "supplier_state",
                "supplier_city",
                "supplier_address",
                "supplier_zip",
                "supplier_location"
            ],
            "EnergySources": [
                "source_id",
                "source_name",
                "last_active",
                "Solar",
                "Panels",
                "supplier_id",
                "start_date",
                "end_date",
                "product_id",
                "source_type",
                "capacity",
                "source_capacity",
                "user_id"
            ],
            "EnergyProduction": [
                "source_id",
                "end_date",
                "start_date",
                "production_value",
                "reading_id",
                "meter_id",
                "production_date"
            ]
        }
    },
    {
        "id": 203,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Carvings': ['carving_id', 'name', 'description', 'price', 'image_url', 'vendor_id', 'stock', 'size', 'last_sold_date', 'cost', 'material_id', 'creation_date', 'type_id', 'weight', 'date_sold', 'is_available', 'width', 'length', 'weight_kg', 'carving_type_id'], 'Materials': ['material_id', 'name', 'description', 'price', 'color', 'cost'], 'Carving_Materials': ['carving_id', 'material_id'], 'Reviews': ['review_id', 'carving_id', 'user_id', 'rating', 'comment', 'review_date'], 'Order_Items': ['order_item_id', 'order_id', 'carving_id', 'quantity', 'price', 'order_date']} and \n# the user question: Find the top 3 most popular carvings made of soapstone that have not been reviewed in the past 6 months and have been ordered at least 3 times, sorted by the number of orders in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the top 3 most popular carvings made of soapstone that have not been reviewed in the past 6 months and have been ordered at least 3 times, sorted by the number of orders in descending order:",
        "output": "SELECT c.name AS carving_name, COUNT(DISTINCT oi.order_id) AS num_orders FROM Carvings c JOIN Carving_Materials cm ON c.carving_id = cm.carving_id JOIN Materials m ON cm.material_id = m.material_id JOIN Order_Items oi ON c.carving_id = oi.carving_id LEFT JOIN Reviews r ON c.carving_id = r.carving_id WHERE m.name = 'Soapstone' AND r.review_date < DATE('now', '-6 months') AND oi.quantity >= 3 AND r.review_id IS NULL GROUP BY c.carving_id ORDER BY num_orders DESC LIMIT 3;",
        "schema": "soapstone_carving",
        "processed_schema_content": {
            "Carvings": [
                "carving_id",
                "name",
                "description",
                "price",
                "image_url",
                "vendor_id",
                "stock",
                "size",
                "last_sold_date",
                "cost",
                "material_id",
                "creation_date",
                "type_id",
                "weight",
                "date_sold",
                "is_available",
                "width",
                "length",
                "weight_kg",
                "carving_type_id"
            ],
            "Materials": [
                "material_id",
                "name",
                "description",
                "price",
                "color",
                "cost"
            ],
            "Carving_Materials": [
                "carving_id",
                "material_id"
            ],
            "Reviews": [
                "review_id",
                "carving_id",
                "user_id",
                "rating",
                "comment",
                "review_date"
            ],
            "Order_Items": [
                "order_item_id",
                "order_id",
                "carving_id",
                "quantity",
                "price",
                "order_date"
            ]
        }
    },
    {
        "id": 205,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID'], 'Customer': ['CustomerName', 'CustomerID', 'Country', 'SegmentID', 'Continent', 'PhoneNumber', 'Email', 'CreditLimit', 'State', 'AddressID', 'EmailAddress', 'LoyaltyLevelID', 'FirstName', 'LastName', 'City', 'StateCode', 'CountryCode', 'RegistrationDate']} and \n# the user question: Retrieve the list of top 10 customers who have made the largest purchases, including their name, email address, and total amount spent:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of top 10 customers who have made the largest purchases, including their name, email address, and total amount spent:",
        "output": "SELECT Customer.FirstName, Customer.LastName, Customer.EmailAddress, SUM(SalesOrder.TotalAmount) AS TotalAmountSpent FROM Customer JOIN SalesOrder ON Customer.CustomerID = SalesOrder.CustomerID GROUP BY Customer.CustomerID ORDER BY TotalAmountSpent DESC LIMIT 10;",
        "schema": "business_strategy",
        "processed_schema_content": {
            "SalesOrder": [
                "OrderID",
                "Year",
                "CustomerID",
                "OrderDate",
                "TotalAmount",
                "TotalPrice",
                "QuarterID",
                "ExpectedDeliveryDate",
                "ShippedDate",
                "EmployeeID",
                "CountryCode",
                "ReturnID",
                "OfficeID",
                "Discount",
                "OrderNumber",
                "Status",
                "RegionID"
            ],
            "Customer": [
                "CustomerName",
                "CustomerID",
                "Country",
                "SegmentID",
                "Continent",
                "PhoneNumber",
                "Email",
                "CreditLimit",
                "State",
                "AddressID",
                "EmailAddress",
                "LoyaltyLevelID",
                "FirstName",
                "LastName",
                "City",
                "StateCode",
                "CountryCode",
                "RegistrationDate"
            ]
        }
    },
    {
        "id": 206,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['review_id', 'book_id', 'user_id', 'rating', 'review_text', 'review_date', 'author_id', 'user_country', 'genre_id', 'language_id', 'product_id'], 'users': ['user_id', 'username', 'email', 'password_hash', 'state', 'first_name', 'last_name', 'country', 'city']} and \n# the user question: Find all users who have not reviewed any books.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all users who have not reviewed any books.",
        "output": "SELECT users.user_id, users.first_name, users.last_name FROM users LEFT JOIN reviews ON users.user_id = reviews.user_id WHERE reviews.review_id IS NULL;",
        "schema": "psychology_books",
        "processed_schema_content": {
            "reviews": [
                "review_id",
                "book_id",
                "user_id",
                "rating",
                "review_text",
                "review_date",
                "author_id",
                "user_country",
                "genre_id",
                "language_id",
                "product_id"
            ],
            "users": [
                "user_id",
                "username",
                "email",
                "password_hash",
                "state",
                "first_name",
                "last_name",
                "country",
                "city"
            ]
        }
    },
    {
        "id": 208,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'books': ['book_id', 'title', 'isbn', 'publisher_id', 'description', 'publish_date', 'publication_date', 'price', 'publisher', 'publication_year', 'language', 'author_id', 'book_title', 'language_id', 'category', 'author', 'year_published', 'num_pages', 'rating'], 'reviews': ['review_id', 'book_id', 'user_id', 'rating', 'review_text', 'review_date', 'author_id', 'user_country', 'genre_id', 'language_id', 'product_id'], 'users': ['user_id', 'username', 'email', 'password_hash', 'state', 'first_name', 'last_name', 'country', 'city']} and \n# the user question: Find all books that have been reviewed by users who live in California.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all books that have been reviewed by users who live in California.",
        "output": "SELECT DISTINCT books.title, books.isbn FROM books JOIN reviews ON books.book_id = reviews.book_id JOIN users ON reviews.user_id = users.user_id WHERE users.state = 'CA';",
        "schema": "psychology_books",
        "processed_schema_content": {
            "books": [
                "book_id",
                "title",
                "isbn",
                "publisher_id",
                "description",
                "publish_date",
                "publication_date",
                "price",
                "publisher",
                "publication_year",
                "language",
                "author_id",
                "book_title",
                "language_id",
                "category",
                "author",
                "year_published",
                "num_pages",
                "rating"
            ],
            "reviews": [
                "review_id",
                "book_id",
                "user_id",
                "rating",
                "review_text",
                "review_date",
                "author_id",
                "user_country",
                "genre_id",
                "language_id",
                "product_id"
            ],
            "users": [
                "user_id",
                "username",
                "email",
                "password_hash",
                "state",
                "first_name",
                "last_name",
                "country",
                "city"
            ]
        }
    },
    {
        "id": 209,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Devices': ['manufacturer', 'device_id', 'device_type', 'device_name', 'screen_size', 'manufacture_date', 'battery_capacity', 'storage_capacity', 'camera_resolution', 'processor_speed', 'ram_capacity', 'biometric_authentication', 'ip_rating', 'screen_resolution', 'operating_system_version', 'added_date', 'ram_size', 'operating_system', 'os_version', 'ip_address', 'os_id', 'last_used_date', 'location_id', 'serial_number', 'network_id', 'last_access_date', 'is_online', 'last_patched_date', 'max_login_attempts', 'Flag_Status', 'Last_Update_Time', 'Last_Scan_Time', 'Device_Type', 'Last_Vulnerability_Scan', 'Last_Patch_Time', 'Vulnerability_Level', 'Device_Name', 'Certificate_Expiry_Date', 'Device_Status', 'Last_Checkin_Time', 'Last_Patch_Update', 'Last_Security_Update', 'IsConnected', 'ipAddress', 'name', 'id'], 'Device_Specs': ['screen_size', 'device_id', 'battery_life', 'warranty_expire_date', 'firmware_version', 'software_version', 'cpu_speed', 'memory_capacity', 'cpu_manufacturer', 'operating_system', 'memory_usage', 'disk_space_usage', 'cpu_usage', 'disk_usage', 'vulnerability_score', 'password_policy_id']} and \n# the user question: Find all devices that have a CPU speed greater than or equal to 2.0 GHz and a memory capacity greater than or equal to 8 GB.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all devices that have a CPU speed greater than or equal to 2.0 GHz and a memory capacity greater than or equal to 8 GB.",
        "output": "SELECT Devices.device_name FROM Devices JOIN Device_Specs ON Devices.device_id = Device_Specs.device_id WHERE Device_Specs.cpu_speed >= 2.0 AND Device_Specs.memory_capacity >= 8;",
        "schema": "cybersecurity",
        "processed_schema_content": {
            "Devices": [
                "manufacturer",
                "device_id",
                "device_type",
                "device_name",
                "screen_size",
                "manufacture_date",
                "battery_capacity",
                "storage_capacity",
                "camera_resolution",
                "processor_speed",
                "ram_capacity",
                "biometric_authentication",
                "ip_rating",
                "screen_resolution",
                "operating_system_version",
                "added_date",
                "ram_size",
                "operating_system",
                "os_version",
                "ip_address",
                "os_id",
                "last_used_date",
                "location_id",
                "serial_number",
                "network_id",
                "last_access_date",
                "is_online",
                "last_patched_date",
                "max_login_attempts",
                "Flag_Status",
                "Last_Update_Time",
                "Last_Scan_Time",
                "Device_Type",
                "Last_Vulnerability_Scan",
                "Last_Patch_Time",
                "Vulnerability_Level",
                "Device_Name",
                "Certificate_Expiry_Date",
                "Device_Status",
                "Last_Checkin_Time",
                "Last_Patch_Update",
                "Last_Security_Update",
                "IsConnected",
                "ipAddress",
                "name",
                "id"
            ],
            "Device_Specs": [
                "screen_size",
                "device_id",
                "battery_life",
                "warranty_expire_date",
                "firmware_version",
                "software_version",
                "cpu_speed",
                "memory_capacity",
                "cpu_manufacturer",
                "operating_system",
                "memory_usage",
                "disk_space_usage",
                "cpu_usage",
                "disk_usage",
                "vulnerability_score",
                "password_policy_id"
            ]
        }
    },
    {
        "id": 210,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Sale_Items': ['product_id', 'sale_id', 'quantity', 'sale_item_id', 'customer_id', 'unit_price', 'discount_code', 'sale_date', 'price'], 'Sales': ['employee_id', 'sale_id', 'sale_date', 'customer_id', 'total', 'total_amount', 'payment_method', 'total_price', 'total_spent', 'location_id', 'coupon_code', 'start_date', 'discount_percentage', 'end_date', 'product_id'], 'Product_Ratings': ['rating', 'product_id']} and \n# the user question: Retrieve the names and total revenue for all products that have been sold at least 1000 times and have a rating of 5, and were sold in the month of December in any year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and total revenue for all products that have been sold at least 1000 times and have a rating of 5, and were sold in the month of December in any year.",
        "output": "SELECT Products.product_name, SUM(Sale_Items.quantity * Products.price) AS total_revenue FROM Products INNER JOIN Sale_Items ON Products.product_id = Sale_Items.product_id INNER JOIN Product_Ratings ON Products.product_id = Product_Ratings.product_id INNER JOIN Sales ON Sale_Items.sale_id = Sales.sale_id WHERE Product_Ratings.rating = 5 AND (SELECT COUNT(Sale_Items.sale_item_id) FROM Sale_Items WHERE Sale_Items.product_id = Products.product_id) >= 1000 AND strftime('%m', Sales.sale_date) = '12' GROUP BY Products.product_id ORDER BY total_revenue DESC;",
        "schema": "pharmacy",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "price",
                "description",
                "product_description",
                "supplier_id",
                "category_id",
                "units_in_stock",
                "expiration_date",
                "stock_quantity",
                "expiration_id",
                "discontinued",
                "cost_price",
                "quantity_in_stock",
                "unit_price",
                "unit_cost",
                "brand_name",
                "last_supplied_date",
                "manufacturer_name",
                "backorder"
            ],
            "Sale_Items": [
                "product_id",
                "sale_id",
                "quantity",
                "sale_item_id",
                "customer_id",
                "unit_price",
                "discount_code",
                "sale_date",
                "price"
            ],
            "Sales": [
                "employee_id",
                "sale_id",
                "sale_date",
                "customer_id",
                "total",
                "total_amount",
                "payment_method",
                "total_price",
                "total_spent",
                "location_id",
                "coupon_code",
                "start_date",
                "discount_percentage",
                "end_date",
                "product_id"
            ],
            "Product_Ratings": [
                "rating",
                "product_id"
            ]
        }
    },
    {
        "id": 211,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'surgeries': ['patient_id', 'surgery_date', 'surgeon_id', 'surgery_cost', 'surgery_type', 'length_of_stay', 'cost', 'discharge_date', 'surgery_id', 'doctor_id', 'surgery_name', 'id', 'diagnosis', 'surgeon_name', 'admission_date'], 'surgeons': ['surgeon_name', 'surgeon_id', 'surgeon_last_name', 'specialty_id', 'name', 'id', 'Williams']} and \n# the user question: Find the average cost of surgeries performed by each surgeon.:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average cost of surgeries performed by each surgeon.:",
        "output": "SELECT surgeons.surgeon_id, AVG(surgeries.surgery_cost) as avg_surgery_cost FROM surgeries INNER JOIN surgeons ON surgeries.surgeon_id = surgeons.surgeon_id GROUP BY surgeons.surgeon_id",
        "schema": "surgery",
        "processed_schema_content": {
            "surgeries": [
                "patient_id",
                "surgery_date",
                "surgeon_id",
                "surgery_cost",
                "surgery_type",
                "length_of_stay",
                "cost",
                "discharge_date",
                "surgery_id",
                "doctor_id",
                "surgery_name",
                "id",
                "diagnosis",
                "surgeon_name",
                "admission_date"
            ],
            "surgeons": [
                "surgeon_name",
                "surgeon_id",
                "surgeon_last_name",
                "specialty_id",
                "name",
                "id",
                "Williams"
            ]
        }
    },
    {
        "id": 212,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EnergyMeters': ['meter_id', 'installation_date', 'meter_type', 'user_id', 'meter_number', 'starting_reading', 'meter_location', 'meter_name', 'product_id', 'meter_serial', 'created_date', 'avg_consumption', 'source_id'], 'EnergyMeterReadings': ['meter_id', 'reading_date', 'reading_value', 'reading_id', 'reading_hour']} and \n# the user question: Retrieve the names and types of all energy meters that have had no readings for the past 30 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and types of all energy meters that have had no readings for the past 30 days.",
        "output": "SELECT m.meter_name, m.meter_type FROM EnergyMeters m LEFT JOIN EnergyMeterReadings r ON m.meter_id = r.meter_id WHERE r.reading_value IS NULL OR r.reading_date < date('now', '-30 days');",
        "schema": "energy",
        "processed_schema_content": {
            "EnergyMeters": [
                "meter_id",
                "installation_date",
                "meter_type",
                "user_id",
                "meter_number",
                "starting_reading",
                "meter_location",
                "meter_name",
                "product_id",
                "meter_serial",
                "created_date",
                "avg_consumption",
                "source_id"
            ],
            "EnergyMeterReadings": [
                "meter_id",
                "reading_date",
                "reading_value",
                "reading_id",
                "reading_hour"
            ]
        }
    },
    {
        "id": 213,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Films': ['title', 'country', 'rating_id', 'director_id', 'film_id', 'synopsis', 'release_date', 'runtime', 'studio_id', 'composer_id', 'budget', 'box_office', 'imdb_rating', 'rotten_tomatoes_rating', 'mpaa_rating', 'production_company_id', 'oscar_wins', 'rating', 'rottentomatoes_rating', 'genre_id', 'runtime_minutes', 'release_year', 'The Conjuring', 'PG-13'], 'Characters': ['character_id', 'name', 'description', 'category', 'main_actor_id', 'plot_id', 'role', 'gender'], 'Films_Characters': ['character_id', 'film_id'], 'Films_Genres': ['film_id', 'genre_id'], 'Genres': ['genre_id', 'name', 'description']} and \n# the user question: Query: Retrieve the names and descriptions of all characters that have appeared in at least two different horror films that were released in the same year, along with the number of such films they have appeared in and the names of the films, ordered by the number of films in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Query: Retrieve the names and descriptions of all characters that have appeared in at least two different horror films that were released in the same year, along with the number of such films they have appeared in and the names of the films, ordered by the number of films in descending order.",
        "output": "SELECT Characters.name, Characters.description, COUNT(DISTINCT Films.film_id) AS num_films, GROUP_CONCAT(DISTINCT Films.title, ', ') AS films FROM Characters JOIN Films_Characters ON Characters.character_id = Films_Characters.character_id JOIN Films ON Films_Characters.film_id = Films.film_id JOIN Films_Genres ON Films.film_id = Films_Genres.film_id JOIN Genres ON Films_Genres.genre_id = Genres.genre_id WHERE Genres.name = 'Horror' GROUP BY Characters.character_id HAVING COUNT(DISTINCT Films.film_id) > 1 AND COUNT(DISTINCT strftime('%Y', Films.release_date)) = 1 ORDER BY num_films DESC;",
        "schema": "horror_films",
        "processed_schema_content": {
            "Films": [
                "title",
                "country",
                "rating_id",
                "director_id",
                "film_id",
                "synopsis",
                "release_date",
                "runtime",
                "studio_id",
                "composer_id",
                "budget",
                "box_office",
                "imdb_rating",
                "rotten_tomatoes_rating",
                "mpaa_rating",
                "production_company_id",
                "oscar_wins",
                "rating",
                "rottentomatoes_rating",
                "genre_id",
                "runtime_minutes",
                "release_year",
                "The Conjuring",
                "PG-13"
            ],
            "Characters": [
                "character_id",
                "name",
                "description",
                "category",
                "main_actor_id",
                "plot_id",
                "role",
                "gender"
            ],
            "Films_Characters": [
                "character_id",
                "film_id"
            ],
            "Films_Genres": [
                "film_id",
                "genre_id"
            ],
            "Genres": [
                "genre_id",
                "name",
                "description"
            ]
        }
    },
    {
        "id": 215,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Project_Contractors': ['project_id', 'contractor_id', 'end_date', 'project_contractor_id', 'contract_date'], 'Project_Materials': ['project_id', 'material_id', 'quantity', 'total_quantity'], 'Materials': ['material_id', 'material_name', 'cost_per_unit', 'unit_of_measurement', 'unit_quantity', 'unit_cost', 'quantity', 'unit_price', 'material_type_id', 'quantity_in_stock', 'material_unit', 'quantity_available', 'reorder_level', 'stock_level'], 'Contractors': ['contractor_name', 'contractor_id', 'rating']} and \n# the user question: List all the materials that have been used on a project that involves a contractor with a rating of less than 7.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List all the materials that have been used on a project that involves a contractor with a rating of less than 7.",
        "output": "SELECT DISTINCT m.material_name FROM Materials m INNER JOIN Project_Materials pm ON m.material_id = pm.material_id INNER JOIN Projects p ON pm.project_id = p.project_id INNER JOIN Project_Contractors pc ON p.project_id = pc.project_id INNER JOIN Contractors c ON pc.contractor_id = c.contractor_id WHERE c.rating < 7;",
        "schema": "civil_engineering",
        "processed_schema_content": {
            "Projects": [
                "project_name",
                "project_id",
                "end_date",
                "start_date",
                "square_footage",
                "status",
                "project_manager_id",
                "project_status_id",
                "project_completion_date",
                "project_start_date",
                "project_budget",
                "project_end_date",
                "project_deadline",
                "project_location",
                "supervisor_id",
                "completion_date",
                "Expansion",
                "Highway",
                "Construction",
                "Building",
                "Office",
                "budget",
                "actual_end_date",
                "actual_start_date",
                "State",
                "Project_ID",
                "Name",
                "Status",
                "Start_Date",
                "expected_completion_date",
                "Completion_Date",
                "Actual_Costs",
                "Project_Name",
                "Budget",
                "Client_ID",
                "cost",
                "name",
                "id"
            ],
            "Project_Contractors": [
                "project_id",
                "contractor_id",
                "end_date",
                "project_contractor_id",
                "contract_date"
            ],
            "Project_Materials": [
                "project_id",
                "material_id",
                "quantity",
                "total_quantity"
            ],
            "Materials": [
                "material_id",
                "material_name",
                "cost_per_unit",
                "unit_of_measurement",
                "unit_quantity",
                "unit_cost",
                "quantity",
                "unit_price",
                "material_type_id",
                "quantity_in_stock",
                "material_unit",
                "quantity_available",
                "reorder_level",
                "stock_level"
            ],
            "Contractors": [
                "contractor_name",
                "contractor_id",
                "rating"
            ]
        }
    },
    {
        "id": 216,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['total', 'customer_id', 'date', 'id', 'status', 'canceled', 'order_date', 'order_id', 'product_id', 'total_amount', 'employee_id'], 'customers': ['name', 'email', 'id', 'age', 'customer_id', 'address', 'phone', 'customer_name', 'phone_number', 'balance', 'purchase_date', 'last_name', 'first_name']} and \n# the user question: Find the name and email of all customers who have placed an order in the last 30 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and email of all customers who have placed an order in the last 30 days.",
        "output": "SELECT customer_name, email FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE order_date >= date('now', '-30 days'));",
        "schema": "industrial_design",
        "processed_schema_content": {
            "orders": [
                "total",
                "customer_id",
                "date",
                "id",
                "status",
                "canceled",
                "order_date",
                "order_id",
                "product_id",
                "total_amount",
                "employee_id"
            ],
            "customers": [
                "name",
                "email",
                "id",
                "age",
                "customer_id",
                "address",
                "phone",
                "customer_name",
                "phone_number",
                "balance",
                "purchase_date",
                "last_name",
                "first_name"
            ]
        }
    },
    {
        "id": 217,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employees': ['first_name', 'last_name', 'employee_id', 'department_id', 'job_title', 'hire_date', 'salary', 'department', 'birth_date', 'team', 'manager_id', 'email_address', 'phone_number', 'compliance_training_due_date', 'salary_amount', 'job_id', 'address', 'city', 'state', 'email', 'supervisor_id', 'num_projects', 'hourly_rate'], 'Projects': ['project_id', 'project_name', 'project_type', 'budget', 'end_date', 'due_date', 'deadline', 'completion_date', 'start_date', 'department_id'], 'Hours_Worked': ['employee_id', 'project_id', 'hours_worked', 'date_worked', 'hourly_rate', 'start_time', 'end_time']} and \n# the user question: List the names of all employees who have worked on a project with a budget of over $100,000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all employees who have worked on a project with a budget of over $100,000.",
        "output": "SELECT e.first_name, e.last_name FROM Employees e INNER JOIN Hours_Worked hw ON e.employee_id = hw.employee_id INNER JOIN Projects p ON hw.project_id = p.project_id WHERE p.budget > 100000 GROUP BY e.employee_id;",
        "schema": "human_resources_management",
        "processed_schema_content": {
            "Employees": [
                "first_name",
                "last_name",
                "employee_id",
                "department_id",
                "job_title",
                "hire_date",
                "salary",
                "department",
                "birth_date",
                "team",
                "manager_id",
                "email_address",
                "phone_number",
                "compliance_training_due_date",
                "salary_amount",
                "job_id",
                "address",
                "city",
                "state",
                "email",
                "supervisor_id",
                "num_projects",
                "hourly_rate"
            ],
            "Projects": [
                "project_id",
                "project_name",
                "project_type",
                "budget",
                "end_date",
                "due_date",
                "deadline",
                "completion_date",
                "start_date",
                "department_id"
            ],
            "Hours_Worked": [
                "employee_id",
                "project_id",
                "hours_worked",
                "date_worked",
                "hourly_rate",
                "start_time",
                "end_time"
            ]
        }
    },
    {
        "id": 218,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'User': ['user_id', 'username', 'email', 'snowboarding_level', 'weight', 'shoe_size'], 'Board': ['model', 'flex', 'brand', 'board_id', 'camber_profile', 'length', 'width', 'camber', 'shape', 'stiffness_rating', 'flex_rating', 'rocker', 'model_name'], 'Board_Ride': ['user_id', 'board_id', 'ride_id', 'completed'], 'Ride': ['user_id', 'distance', 'run_id', 'ride_id', 'vertical_drop', 'time_start', 'time_end', 'completed', 'ride_date', 'rating', 'vertical_feet'], 'Run': ['run_id', 'vertical_drop', 'difficulty_level', 'mountain_id', 'length', 'run_type', 'run_name', 'lift_id', 'difficulty', 'region_id']} and \n# the user question: Retrieve the names and total number of times each user has attempted a run with a difficulty level of 4 or above on a board with a length of 160 cm or greater and a camber profile of \"rocker\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and total number of times each user has attempted a run with a difficulty level of 4 or above on a board with a length of 160 cm or greater and a camber profile of \"rocker\".",
        "output": "SELECT User.username, COUNT(*) FROM User JOIN Board_Ride ON User.user_id = Board_Ride.user_id JOIN Board ON Board_Ride.board_id = Board.board_id JOIN Ride ON Board_Ride.ride_id = Ride.ride_id JOIN Run ON Ride.run_id = Run.run_id WHERE Board.length >= 160 AND Board.camber = 'rocker' AND Run.difficulty_level >= 4 AND Board_Ride.completed = 0 GROUP BY User.username;",
        "schema": "snowboarding",
        "processed_schema_content": {
            "User": [
                "user_id",
                "username",
                "email",
                "snowboarding_level",
                "weight",
                "shoe_size"
            ],
            "Board": [
                "model",
                "flex",
                "brand",
                "board_id",
                "camber_profile",
                "length",
                "width",
                "camber",
                "shape",
                "stiffness_rating",
                "flex_rating",
                "rocker",
                "model_name"
            ],
            "Board_Ride": [
                "user_id",
                "board_id",
                "ride_id",
                "completed"
            ],
            "Ride": [
                "user_id",
                "distance",
                "run_id",
                "ride_id",
                "vertical_drop",
                "time_start",
                "time_end",
                "completed",
                "ride_date",
                "rating",
                "vertical_feet"
            ],
            "Run": [
                "run_id",
                "vertical_drop",
                "difficulty_level",
                "mountain_id",
                "length",
                "run_type",
                "run_name",
                "lift_id",
                "difficulty",
                "region_id"
            ]
        }
    },
    {
        "id": 219,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Artists': ['artist_name', 'artist_id', 'country_id', 'birth_date'], 'Collaborations': ['song_id', 'artist1_id', 'artist2_id', 'collaboration_id']} and \n# the user question: Retrieve the artists who have collaborated on songs, along with the number of collaborations they have, ordered by the number of collaborations in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the artists who have collaborated on songs, along with the number of collaborations they have, ordered by the number of collaborations in descending order:",
        "output": "SELECT Artists.artist_name, COUNT(Collaborations.collaboration_id) AS collaboration_count FROM Artists JOIN Collaborations ON Artists.artist_id = Collaborations.artist1_id OR Artists.artist_id = Collaborations.artist2_id GROUP BY Artists.artist_id ORDER BY collaboration_count DESC;",
        "schema": "country_music",
        "processed_schema_content": {
            "Artists": [
                "artist_name",
                "artist_id",
                "country_id",
                "birth_date"
            ],
            "Collaborations": [
                "song_id",
                "artist1_id",
                "artist2_id",
                "collaboration_id"
            ]
        }
    },
    {
        "id": 220,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'screens': ['project_id', 'screen_id', 'name', 'created_at', 'updated_at', 'description', 'priority', 'last_updated_by', 'last_modified', 'owner_id'], 'tasks': ['created_at', 'project_id', 'task_id', 'user_id', 'due_date', 'completed', 'started_at', 'priority', 'completion_date', 'completed_date', 'start_date', 'created_date', 'creator_id', 'assignee_id', 'completed_at', 'name', 'tags', 'assigner_id', 'assigned_by_id', 'category'], 'task_screens': ['screen_id', 'task_id', 'user_id']} and \n# the user question: Retrieve the names and descriptions of all screens that have been assigned to tasks with a due date in the next 7 days and have not been completed yet, along with the number of tasks assigned to each screen, sorted by number of tasks in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and descriptions of all screens that have been assigned to tasks with a due date in the next 7 days and have not been completed yet, along with the number of tasks assigned to each screen, sorted by number of tasks in descending order:",
        "output": "SELECT s.name, s.description, COUNT(ts.task_id) as assigned_tasks FROM screens s JOIN task_screens ts ON s.screen_id = ts.screen_id AND ts.task_id IN ( SELECT task_id FROM tasks WHERE due_date BETWEEN DATE('now') AND DATE('now', '+7 days') AND completed = 0 ) GROUP BY s.screen_id ORDER BY assigned_tasks DESC;",
        "schema": "ui_ux_design",
        "processed_schema_content": {
            "screens": [
                "project_id",
                "screen_id",
                "name",
                "created_at",
                "updated_at",
                "description",
                "priority",
                "last_updated_by",
                "last_modified",
                "owner_id"
            ],
            "tasks": [
                "created_at",
                "project_id",
                "task_id",
                "user_id",
                "due_date",
                "completed",
                "started_at",
                "priority",
                "completion_date",
                "completed_date",
                "start_date",
                "created_date",
                "creator_id",
                "assignee_id",
                "completed_at",
                "name",
                "tags",
                "assigner_id",
                "assigned_by_id",
                "category"
            ],
            "task_screens": [
                "screen_id",
                "task_id",
                "user_id"
            ]
        }
    },
    {
        "id": 222,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'appointments': ['appointment_id', 'therapist_id', 'appointment_date', 'patient_id', 'end_time', 'start_time', 'session_duration_minutes', 'session_cost', 'satisfaction_rating', 'is_missed', 'sessions_per_week', 'session_length_minutes', 'start_date', 'attended', 'end_date', 'therapy_id'], 'sessions': ['session_date', 'appointment_id', 'session_length', 'session_id', 'duration_minutes', 'end_date', 'start_date'], 'patients': ['email', 'phone_number', 'last_name', 'patient_id', 'first_name', 'date_of_birth', 'gender', 'birthdate', 'start_date', 'session_count', 'age', 'therapy_start_date', 'birth_date'], 'patient_diagnoses': ['diagnosis_id', 'patient_id', 'patient_diagnosis_id', 'severity'], 'diagnoses': ['diagnosis_id', 'diagnosis_name', 'session_count']} and \n# the user question: Retrieve the names of the patients who have been diagnosed with both anxiety and depression and have attended at least 3 sessions.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of the patients who have been diagnosed with both anxiety and depression and have attended at least 3 sessions.",
        "output": "SELECT p.first_name || ' ' || p.last_name AS patient_name FROM patients p JOIN patient_diagnoses pd1 ON pd1.patient_id = p.patient_id JOIN diagnoses d1 ON d1.diagnosis_id = pd1.diagnosis_id AND d1.diagnosis_name = 'Anxiety' JOIN patient_diagnoses pd2 ON pd2.patient_id = p.patient_id JOIN diagnoses d2 ON d2.diagnosis_id = pd2.diagnosis_id AND d2.diagnosis_name = 'Major depression' JOIN appointments a ON a.patient_id = p.patient_id JOIN sessions s ON s.appointment_id = a.appointment_id GROUP BY patient_name HAVING COUNT(DISTINCT s.session_id) >= 3;",
        "schema": "psychotherapy",
        "processed_schema_content": {
            "appointments": [
                "appointment_id",
                "therapist_id",
                "appointment_date",
                "patient_id",
                "end_time",
                "start_time",
                "session_duration_minutes",
                "session_cost",
                "satisfaction_rating",
                "is_missed",
                "sessions_per_week",
                "session_length_minutes",
                "start_date",
                "attended",
                "end_date",
                "therapy_id"
            ],
            "sessions": [
                "session_date",
                "appointment_id",
                "session_length",
                "session_id",
                "duration_minutes",
                "end_date",
                "start_date"
            ],
            "patients": [
                "email",
                "phone_number",
                "last_name",
                "patient_id",
                "first_name",
                "date_of_birth",
                "gender",
                "birthdate",
                "start_date",
                "session_count",
                "age",
                "therapy_start_date",
                "birth_date"
            ],
            "patient_diagnoses": [
                "diagnosis_id",
                "patient_id",
                "patient_diagnosis_id",
                "severity"
            ],
            "diagnoses": [
                "diagnosis_id",
                "diagnosis_name",
                "session_count"
            ]
        }
    },
    {
        "id": 223,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Titanic': ['Age', 'Sex', 'Survived', 'Fare', 'Pclass', 'SibSp', 'Parch', 'Embarked', 'Cabin']} and \n# the user question: What is the average value of the 'Fare' column in the 'Titanic' dataset for each 'Sex' value?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What is the average value of the 'Fare' column in the 'Titanic' dataset for each 'Sex' value?",
        "output": "SELECT Sex, AVG(Fare) FROM Titanic GROUP BY Sex;",
        "schema": "data_mining",
        "processed_schema_content": {
            "Titanic": [
                "Age",
                "Sex",
                "Survived",
                "Fare",
                "Pclass",
                "SibSp",
                "Parch",
                "Embarked",
                "Cabin"
            ]
        }
    },
    {
        "id": 225,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['name', 'customer_id', 'email', 'membership_level', 'city', 'country', 'membership_start_date'], 'Beer': ['brewery_id', 'abv', 'beer_id', 'name', 'style', 'description', 'Stout', 'IPA', 'Hoppy'], 'Review': ['rating', 'beer_id', 'review_id', 'customer_id']} and \n# the user question: Retrieve the names of customers who have reviewed all beers of a specific style, such as \"Stout\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of customers who have reviewed all beers of a specific style, such as \"Stout\".",
        "output": "SELECT DISTINCT Customer.name FROM Customer JOIN Review ON Customer.customer_id = Review.customer_id JOIN Beer ON Review.beer_id = Beer.beer_id WHERE Beer.style = 'Stout' GROUP BY Customer.name HAVING COUNT(DISTINCT Beer.beer_id) = (SELECT COUNT(*) FROM Beer WHERE style = 'Stout');",
        "schema": "craft_beer_brewing",
        "processed_schema_content": {
            "Customer": [
                "name",
                "customer_id",
                "email",
                "membership_level",
                "city",
                "country",
                "membership_start_date"
            ],
            "Beer": [
                "brewery_id",
                "abv",
                "beer_id",
                "name",
                "style",
                "description",
                "Stout",
                "IPA",
                "Hoppy"
            ],
            "Review": [
                "rating",
                "beer_id",
                "review_id",
                "customer_id"
            ]
        }
    },
    {
        "id": 226,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'plants': ['name', 'id', 'category_id', 'updated_at', 'created_at', 'description', 'min_temp', 'max_temp', 'water_requirement', 'light_requirement', 'watering_schedule', 'width', 'height', 'flowering', 'min_temp_tolerance', 'max_temp_tolerance', 'category', 'spacing_requirement', 'bloomed', 'water_usage', 'last_watered', 'sun_exposure', 'price', 'plant_date', 'harvest_date', 'bed_id', 'suitable_exposure', 'Rosemary', 'is_edible', 'species', 'plant_name', 'soil_type', 'bloom_time', 'max_height', 'flowering_season', 'plant_type', 'sunlight', 'garden_id', 'soil_ph'], 'plant_varieties': ['variety', 'id', 'Tomato', 'Roma', 'plant_id', 'updated_at', 'created_at', 'description', 'name', 'price'], 'garden_plants': ['garden_id', 'plant_id', 'variety_id', 'id', 'updated_at', 'quantity', 'created_at', 'description', 'name', 'plant_variety_id', 'planted_on', 'plant_density', 'garden_bed_id', 'last_watered'], 'task_assignments': ['updated_at', 'task_id', 'created_at', 'assigned_to', 'due_date', 'garden_id', 'completed_at', 'id', 'garden_plant_id', 'status', 'task_type', 'plant_variety_id'], 'tasks': ['name', 'id', 'updated_at', 'description', 'created_at', 'garden_id', 'due_date', 'type', 'priority']} and \n# the user question: Retrieve the names of all the plants that have a variety containing the word \"rose\" and have a task assignment with a status of \"Completed\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all the plants that have a variety containing the word \"rose\" and have a task assignment with a status of \"Completed\".",
        "output": "SELECT DISTINCT plants.name FROM plants JOIN garden_plants ON plants.id = garden_plants.plant_id JOIN task_assignments ON garden_plants.id = task_assignments.garden_plant_id JOIN tasks ON task_assignments.task_id = tasks.id JOIN plant_varieties ON plants.id = plant_varieties.plant_id WHERE plant_varieties.variety LIKE '%Rose%' AND task_assignments.status = 'Completed';",
        "schema": "gardening",
        "processed_schema_content": {
            "plants": [
                "name",
                "id",
                "category_id",
                "updated_at",
                "created_at",
                "description",
                "min_temp",
                "max_temp",
                "water_requirement",
                "light_requirement",
                "watering_schedule",
                "width",
                "height",
                "flowering",
                "min_temp_tolerance",
                "max_temp_tolerance",
                "category",
                "spacing_requirement",
                "bloomed",
                "water_usage",
                "last_watered",
                "sun_exposure",
                "price",
                "plant_date",
                "harvest_date",
                "bed_id",
                "suitable_exposure",
                "Rosemary",
                "is_edible",
                "species",
                "plant_name",
                "soil_type",
                "bloom_time",
                "max_height",
                "flowering_season",
                "plant_type",
                "sunlight",
                "garden_id",
                "soil_ph"
            ],
            "plant_varieties": [
                "variety",
                "id",
                "Tomato",
                "Roma",
                "plant_id",
                "updated_at",
                "created_at",
                "description",
                "name",
                "price"
            ],
            "garden_plants": [
                "garden_id",
                "plant_id",
                "variety_id",
                "id",
                "updated_at",
                "quantity",
                "created_at",
                "description",
                "name",
                "plant_variety_id",
                "planted_on",
                "plant_density",
                "garden_bed_id",
                "last_watered"
            ],
            "task_assignments": [
                "updated_at",
                "task_id",
                "created_at",
                "assigned_to",
                "due_date",
                "garden_id",
                "completed_at",
                "id",
                "garden_plant_id",
                "status",
                "task_type",
                "plant_variety_id"
            ],
            "tasks": [
                "name",
                "id",
                "updated_at",
                "description",
                "created_at",
                "garden_id",
                "due_date",
                "type",
                "priority"
            ]
        }
    },
    {
        "id": 227,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Goal': ['goal_id', 'due_date', 'is_completed', 'client_id', 'description', 'coach_id', 'status', 'package_id', 'category', 'target_completion_date', 'completion_date', 'is_cancelled', 'name', 'cancelled', 'completed', 'started', 'progress', 'start_date'], 'Client': ['name', 'email', 'coach_id', 'package_id', 'client_id', 'address', 'birthdate', 'occupation', 'phone', 'preferred_coach', 'last_activity_time'], 'GoalTag': ['goal_id', 'tag', 'tag_id']} and \n# the user question: Retrieve the names and email addresses of all clients who have at least one completed goal with the tag 'Leadership Development', and where the goal due date was in the past 6 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all clients who have at least one completed goal with the tag 'Leadership Development', and where the goal due date was in the past 6 months.",
        "output": "SELECT DISTINCT Client.name, Client.email FROM Client INNER JOIN Goal ON Client.client_id = Goal.client_id INNER JOIN GoalTag ON Goal.goal_id = GoalTag.goal_id WHERE Goal.is_completed = 1 AND GoalTag.tag = 'Leadership Development' AND Goal.due_date BETWEEN date('now', '-6 months') AND date('now');",
        "schema": "coaching",
        "processed_schema_content": {
            "Goal": [
                "goal_id",
                "due_date",
                "is_completed",
                "client_id",
                "description",
                "coach_id",
                "status",
                "package_id",
                "category",
                "target_completion_date",
                "completion_date",
                "is_cancelled",
                "name",
                "cancelled",
                "completed",
                "started",
                "progress",
                "start_date"
            ],
            "Client": [
                "name",
                "email",
                "coach_id",
                "package_id",
                "client_id",
                "address",
                "birthdate",
                "occupation",
                "phone",
                "preferred_coach",
                "last_activity_time"
            ],
            "GoalTag": [
                "goal_id",
                "tag",
                "tag_id"
            ]
        }
    },
    {
        "id": 228,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Show': ['rating', 'year', 'title', 'show_id', 'genre_id', 'studio_id', 'release_year', 'country_id', 'network_id', 'director_id', 'air_year', 'release_date', 'genre', 'status', 'production_type', 'producer_id', 'start_year', 'end_year'], 'Episode': ['show_id', 'episode_id', 'crew_id', 'director_id', 'writer_id', 'runtime', 'title', 'season_id', 'duration', 'episode_number', 'release_year', 'air_date', 'rating', 'id', 'tv_show_id', 'name'], 'User_Rating': ['show_id', 'user_id', 'episode_id', 'rating', 'country_id', 'genre_id', 'season_id', 'season_number', 'imdb_rating', 'rotten_tomatoes_rating'], 'Show_Country': ['show_id', 'country_id']} and \n# the user question: Find the TV shows that have been rated by users from at least four different countries and have an average rating above 8.0.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the TV shows that have been rated by users from at least four different countries and have an average rating above 8.0.",
        "output": "SELECT DISTINCT Show.title FROM Show JOIN Episode ON Show.show_id = Episode.show_id JOIN User_Rating ON Episode.show_id = User_Rating.show_id AND Episode.episode_id = User_Rating.episode_id WHERE Show.show_id IN ( SELECT Show.show_id FROM Show JOIN Show_Country ON Show.show_id = Show_Country.show_id GROUP BY Show.show_id HAVING COUNT(DISTINCT Show_Country.country_id) >= 4 ) AND AVG(User_Rating.rating) > 8.0;",
        "schema": "tv_shows",
        "processed_schema_content": {
            "Show": [
                "rating",
                "year",
                "title",
                "show_id",
                "genre_id",
                "studio_id",
                "release_year",
                "country_id",
                "network_id",
                "director_id",
                "air_year",
                "release_date",
                "genre",
                "status",
                "production_type",
                "producer_id",
                "start_year",
                "end_year"
            ],
            "Episode": [
                "show_id",
                "episode_id",
                "crew_id",
                "director_id",
                "writer_id",
                "runtime",
                "title",
                "season_id",
                "duration",
                "episode_number",
                "release_year",
                "air_date",
                "rating",
                "id",
                "tv_show_id",
                "name"
            ],
            "User_Rating": [
                "show_id",
                "user_id",
                "episode_id",
                "rating",
                "country_id",
                "genre_id",
                "season_id",
                "season_number",
                "imdb_rating",
                "rotten_tomatoes_rating"
            ],
            "Show_Country": [
                "show_id",
                "country_id"
            ]
        }
    },
    {
        "id": 229,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employees': ['first_name', 'last_name', 'employee_id', 'department_id', 'job_title', 'hire_date', 'salary', 'department', 'birth_date', 'team', 'manager_id', 'email_address', 'phone_number', 'compliance_training_due_date', 'salary_amount', 'job_id', 'address', 'city', 'state', 'email', 'supervisor_id', 'num_projects', 'hourly_rate'], 'Salaries': ['employee_id', 'salary_amount', 'department_id', 'effective_date']} and \n# the user question: List the names and salaries of all employees who make more than the average salary of their department.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names and salaries of all employees who make more than the average salary of their department.",
        "output": "SELECT e.first_name, e.last_name, s.salary_amount FROM Employees e INNER JOIN Salaries s ON e.employee_id = s.employee_id WHERE s.salary_amount > (SELECT AVG(salary_amount) FROM Salaries WHERE department_id = e.department_id) ORDER BY e.last_name;",
        "schema": "human_resources_management",
        "processed_schema_content": {
            "Employees": [
                "first_name",
                "last_name",
                "employee_id",
                "department_id",
                "job_title",
                "hire_date",
                "salary",
                "department",
                "birth_date",
                "team",
                "manager_id",
                "email_address",
                "phone_number",
                "compliance_training_due_date",
                "salary_amount",
                "job_id",
                "address",
                "city",
                "state",
                "email",
                "supervisor_id",
                "num_projects",
                "hourly_rate"
            ],
            "Salaries": [
                "employee_id",
                "salary_amount",
                "department_id",
                "effective_date"
            ]
        }
    },
    {
        "id": 230,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']} and \n# the user question: Find the titles and mediums of all artwork in the \"Museum of Fine Arts, Boston\" that were created by \"Edgar Degas\" and are currently on display.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the titles and mediums of all artwork in the \"Museum of Fine Arts, Boston\" that were created by \"Edgar Degas\" and are currently on display.",
        "output": "SELECT a.title, a.medium FROM artwork AS a INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS l ON al.location_id = l.location_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id WHERE ar.last_name = 'Degas' AND l.name = 'Museum of Fine Arts, Boston' AND al.end_date IS NULL AND al.on_display = 1;",
        "schema": "painting",
        "processed_schema_content": {
            "artwork": [
                "artwork_id",
                "title",
                "year_created",
                "artist_id",
                "dimensions",
                "medium",
                "lender_id",
                "year",
                "estimated_value",
                "creation_date"
            ],
            "location": [
                "name",
                "start_date",
                "end_date",
                "location_id",
                "return_date",
                "Gallery",
                "Art",
                "Uffizi",
                "Gogh",
                "Museum",
                "Van",
                "State",
                "Hermitage",
                "Paul",
                "Getty",
                "Fine",
                "Houston",
                "Arts",
                "Boston",
                "Institute",
                "Chicago",
                "Bilbao",
                "Guggenheim",
                "Solomon",
                "Rijksmuseum",
                "type",
                "city",
                "founded_date",
                "country",
                "continent"
            ],
            "artwork_location": [
                "start_date",
                "end_date",
                "artwork_id",
                "location_id",
                "on_display",
                "on_loan",
                "artwork_location_id",
                "museum_id"
            ],
            "artist": [
                "first_name",
                "date_of_birth",
                "last_name",
                "artist_id",
                "Kandinsky",
                "van",
                "Gogh",
                "birth_date",
                "birth_country",
                "year_born",
                "country_of_birth",
                "birth_year",
                "country_of_origin",
                "gender"
            ]
        }
    },
    {
        "id": 231,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Playlists': ['playlist_id', 'playlist_name'], 'Artists': ['artist_name', 'artist_id', 'artist_genre', 'artist_country', 'country_id', 'genre_id'], 'Tracks': ['track_id', 'track_title', 'duration', 'album_id', 'track_name', 'genre_id', 'rating', 'artist_id', 'release_id'], 'Albums': ['artist_id', 'release_date', 'album_title', 'album_id', 'label_id', 'release_year', 'album_name', 'genre_id'], 'PlaylistTracks': ['track_id', 'playlist_id'], 'Labels': ['label_country', 'label_name', 'label_id']} and \n# the user question: Find the playlists that contain tracks from all artists who have released albums under the same label as \"Discovery\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the playlists that contain tracks from all artists who have released albums under the same label as \"Discovery\":",
        "output": "SELECT Playlists.playlist_name FROM Playlists JOIN PlaylistTracks ON Playlists.playlist_id = PlaylistTracks.playlist_id JOIN Tracks ON PlaylistTracks.track_id = Tracks.track_id JOIN Albums ON Tracks.album_id = Albums.album_id JOIN Artists ON Albums.artist_id = Artists.artist_id JOIN Labels ON Albums.label_id = Labels.label_id WHERE Labels.label_id = ( SELECT Labels.label_id FROM Labels JOIN Albums ON Labels.label_id = Albums.label_id WHERE Albums.album_title = 'Discovery' ) GROUP BY Playlists.playlist_id HAVING COUNT(DISTINCT Artists.artist_id) = ( SELECT COUNT(DISTINCT Artists.artist_id) FROM Artists JOIN Albums ON Artists.artist_id = Albums.artist_id JOIN Labels ON Albums.label_id = Labels.label_id WHERE Labels.label_id = ( SELECT Labels.label_id FROM Labels JOIN Albums ON Labels.label_id = Albums.label_id WHERE Albums.album_title = 'Discovery' ) );",
        "schema": "electronic_music",
        "processed_schema_content": {
            "Playlists": [
                "playlist_id",
                "playlist_name"
            ],
            "Artists": [
                "artist_name",
                "artist_id",
                "artist_genre",
                "artist_country",
                "country_id",
                "genre_id"
            ],
            "Tracks": [
                "track_id",
                "track_title",
                "duration",
                "album_id",
                "track_name",
                "genre_id",
                "rating",
                "artist_id",
                "release_id"
            ],
            "Albums": [
                "artist_id",
                "release_date",
                "album_title",
                "album_id",
                "label_id",
                "release_year",
                "album_name",
                "genre_id"
            ],
            "PlaylistTracks": [
                "track_id",
                "playlist_id"
            ],
            "Labels": [
                "label_country",
                "label_name",
                "label_id"
            ]
        }
    },
    {
        "id": 233,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Authors': ['first_name', 'author_id', 'last_name', 'nationality', 'author_name', 'author_city', 'AuthorID', 'AuthorName'], 'Order_Items': ['price', 'quantity', 'order_id', 'book_id', 'customer_id', 'publisher_id', 'is_returned', 'product_id', 'is_delivered', 'total_price', 'order_date']} and \n# the user question: Retrieve the titles and authors of books that have been ordered together more than 3 times.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the titles and authors of books that have been ordered together more than 3 times.",
        "output": "SELECT b1.title, CONCAT(a1.first_name, ' ', a1.last_name) AS author1, b2.title, CONCAT(a2.first_name, ' ', a2.last_name) AS author2 FROM Order_Items oi1 JOIN Order_Items oi2 ON oi1.order_id = oi2.order_id AND oi1.book_id < oi2.book_id JOIN Books b1 ON oi1.book_id = b1.book_id JOIN Books b2 ON oi2.book_id = b2.book_id JOIN Authors a1 ON b1.author_id = a1.author_id JOIN Authors a2 ON b2.author_id = a2.author_id GROUP BY b1.book_id, b2.book_id HAVING COUNT(*) > 3;",
        "schema": "marketing_books",
        "processed_schema_content": {
            "Books": [
                "book_id",
                "title",
                "publisher_id",
                "publication_date",
                "author_id",
                "price",
                "publication_year",
                "publisher",
                "stock",
                "genre",
                "series",
                "year_published",
                "release_date",
                "word_count",
                "avg_rating",
                "A001",
                "genre_id",
                "stock_count",
                "category_id",
                "book_title",
                "rating",
                "available_for_purchase",
                "BookID",
                "BookTitle",
                "PublicationYear",
                "PublisherID",
                "Price"
            ],
            "Authors": [
                "first_name",
                "author_id",
                "last_name",
                "nationality",
                "author_name",
                "author_city",
                "AuthorID",
                "AuthorName"
            ],
            "Order_Items": [
                "price",
                "quantity",
                "order_id",
                "book_id",
                "customer_id",
                "publisher_id",
                "is_returned",
                "product_id",
                "is_delivered",
                "total_price",
                "order_date"
            ]
        }
    },
    {
        "id": 234,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Sessions': ['session_start_time', 'session_end_time', 'session_id', 'event_id', 'session_description', 'session_name', 'attendee_id', 'ticket_id', 'speaker_id', 'session_location', 'session_max_capacity', 'session_speaker', 'session_capacity', 'session_type', 'session_price', 'room_number', 'start_time', 'end_time', 'speaker_name', 'session_time', 'session_date', 'session_attendees', 'session_title'], 'Attendees': ['attendee_email', 'attendee_name', 'attendee_id', 'attendee_password', 'event_id', 'attendee_company', 'ticket_id', 'attendee_phone', 'company_id', 'session_id', 'attendee_registration_date']} and \n# the user question: Retrieve the total number of attendees registered for each session at the event with ID 800, ordered by the session title.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the total number of attendees registered for each session at the event with ID 800, ordered by the session title.",
        "output": "SELECT Sessions.session_title, COUNT(Attendees.attendee_id) AS total_attendees FROM Sessions LEFT JOIN Attendees ON Sessions.session_id = Attendees.session_id WHERE Sessions.event_id = 800 GROUP BY Sessions.session_id ORDER BY Sessions.session_title ASC;",
        "schema": "virtual_event_planning",
        "processed_schema_content": {
            "Sessions": [
                "session_start_time",
                "session_end_time",
                "session_id",
                "event_id",
                "session_description",
                "session_name",
                "attendee_id",
                "ticket_id",
                "speaker_id",
                "session_location",
                "session_max_capacity",
                "session_speaker",
                "session_capacity",
                "session_type",
                "session_price",
                "room_number",
                "start_time",
                "end_time",
                "speaker_name",
                "session_time",
                "session_date",
                "session_attendees",
                "session_title"
            ],
            "Attendees": [
                "attendee_email",
                "attendee_name",
                "attendee_id",
                "attendee_password",
                "event_id",
                "attendee_company",
                "ticket_id",
                "attendee_phone",
                "company_id",
                "session_id",
                "attendee_registration_date"
            ]
        }
    },
    {
        "id": 235,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Participants': ['first_name', 'last_name', 'participant_id', 'gender', 'age', 'birth_year', 'date_of_birth', 'ag', 'age_group_id', 'parental_edu_id', 'language_group_id'], 'Participant_Tasks': ['task_id', 'participant_id', 'completion_date', 'score', 'completed']} and \n# the user question: Retrieve the names of participants who completed at least 3 tasks with a score greater than or equal to 80:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of participants who completed at least 3 tasks with a score greater than or equal to 80:",
        "output": "SELECT Participants.first_name, Participants.last_name FROM Participants JOIN Participant_Tasks ON Participants.participant_id = Participant_Tasks.participant_id WHERE Participant_Tasks.score >= 80 GROUP BY Participants.participant_id HAVING COUNT(DISTINCT Participant_Tasks.task_id) >= 3;",
        "schema": "developmental_psychology",
        "processed_schema_content": {
            "Participants": [
                "first_name",
                "last_name",
                "participant_id",
                "gender",
                "age",
                "birth_year",
                "date_of_birth",
                "ag",
                "age_group_id",
                "parental_edu_id",
                "language_group_id"
            ],
            "Participant_Tasks": [
                "task_id",
                "participant_id",
                "completion_date",
                "score",
                "completed"
            ]
        }
    },
    {
        "id": 236,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Patients': ['medical_history', 'patient_id', 'first_name', 'last_name', 'age_group', 'gender', 'Age', 'Contact_Info', 'Name', 'Diagnosis', 'Discharge_Date', 'Admission_Date', 'Address', 'Family_History', 'Patient_ID', 'Doctor_ID', 'Doctor_I', 'AdmissionDate', 'Therapy', 'date_of_birth', 'name'], 'Medications': ['medication_name', 'patient_id', 'start_date', 'end_date', 'medical_record_id', 'admission_id', 'dosage', 'quantity', 'frequency', 'duration', 'medication_id', 'drug_class', 'medication_type', 'dosage_amount', 'TimeToAdminister']} and \n# the user question: Find the patients who have been prescribed a medication with a frequency of three times a day and a dosage greater than 25mg.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the patients who have been prescribed a medication with a frequency of three times a day and a dosage greater than 25mg.",
        "output": "SELECT DISTINCT Patients.patient_id, Patients.first_name, Patients.last_name, Medications.medication_name, Medications.frequency, Medications.dosage FROM Patients INNER JOIN Medications ON Patients.patient_id = Medications.patient_id WHERE Medications.frequency = 'three times a day' AND Medications.dosage > 25;",
        "schema": "nursing",
        "processed_schema_content": {
            "Patients": [
                "medical_history",
                "patient_id",
                "first_name",
                "last_name",
                "age_group",
                "gender",
                "Age",
                "Contact_Info",
                "Name",
                "Diagnosis",
                "Discharge_Date",
                "Admission_Date",
                "Address",
                "Family_History",
                "Patient_ID",
                "Doctor_ID",
                "Doctor_I",
                "AdmissionDate",
                "Therapy",
                "date_of_birth",
                "name"
            ],
            "Medications": [
                "medication_name",
                "patient_id",
                "start_date",
                "end_date",
                "medical_record_id",
                "admission_id",
                "dosage",
                "quantity",
                "frequency",
                "duration",
                "medication_id",
                "drug_class",
                "medication_type",
                "dosage_amount",
                "TimeToAdminister"
            ]
        }
    },
    {
        "id": 237,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Sales': ['CustomerID', 'Amount', 'SaleDate', 'SaleID', 'Product', 'Description', 'ProductID', 'TransactionID', 'SalespersonID', 'Commission', 'OrderID', 'SalesRepID', 'ProductCategory', 'Product_ID', 'Quantity', 'Date', 'Customer_ID'], 'Products': ['Price', 'ProductName', 'Category', 'ProductID', 'Cost', 'CategoryID', 'SubcategoryID', 'UnitPrice', 'LastOrderDate', 'UnitsInStock', 'SupplierID', 'UnitCost', 'Discontinued', 'ReorderLevel']} and \n# the user question: List all products that have been sold more than 10 times:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List all products that have been sold more than 10 times:",
        "output": "SELECT Products.ProductName, COUNT(*) AS TotalSales FROM Sales INNER JOIN Products ON Sales.ProductID = Products.ProductID GROUP BY Products.ProductID HAVING TotalSales > 10;",
        "schema": "accounting",
        "processed_schema_content": {
            "Sales": [
                "CustomerID",
                "Amount",
                "SaleDate",
                "SaleID",
                "Product",
                "Description",
                "ProductID",
                "TransactionID",
                "SalespersonID",
                "Commission",
                "OrderID",
                "SalesRepID",
                "ProductCategory",
                "Product_ID",
                "Quantity",
                "Date",
                "Customer_ID"
            ],
            "Products": [
                "Price",
                "ProductName",
                "Category",
                "ProductID",
                "Cost",
                "CategoryID",
                "SubcategoryID",
                "UnitPrice",
                "LastOrderDate",
                "UnitsInStock",
                "SupplierID",
                "UnitCost",
                "Discontinued",
                "ReorderLevel"
            ]
        }
    },
    {
        "id": 238,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Participants': ['first_name', 'last_name', 'participant_id', 'gender', 'age', 'birth_year', 'date_of_birth', 'ag', 'age_group_id', 'parental_edu_id', 'language_group_id'], 'Participant_Tasks': ['task_id', 'participant_id', 'completion_date', 'score', 'completed'], 'Researchers': ['first_name', 'last_name', 'researcher_id', 'email', 'title'], 'Observations': ['task_id', 'participant_id', 'observer_id', 'observation_notes', 'researcher_id', 'observation_id']} and \n# the user question: Retrieve the names and ages of all participants who have completed at least one task and have also been observed by a researcher with the last name \"Smith\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and ages of all participants who have completed at least one task and have also been observed by a researcher with the last name \"Smith\":",
        "output": "SELECT Participants.first_name, Participants.last_name, Participants.age FROM Participants JOIN Participant_Tasks ON Participants.participant_id = Participant_Tasks.participant_id JOIN Observations ON Participants.participant_id = Observations.participant_id JOIN Researchers ON Observations.researcher_id = Researchers.researcher_id WHERE Researchers.last_name = 'Smith';",
        "schema": "developmental_psychology",
        "processed_schema_content": {
            "Participants": [
                "first_name",
                "last_name",
                "participant_id",
                "gender",
                "age",
                "birth_year",
                "date_of_birth",
                "ag",
                "age_group_id",
                "parental_edu_id",
                "language_group_id"
            ],
            "Participant_Tasks": [
                "task_id",
                "participant_id",
                "completion_date",
                "score",
                "completed"
            ],
            "Researchers": [
                "first_name",
                "last_name",
                "researcher_id",
                "email",
                "title"
            ],
            "Observations": [
                "task_id",
                "participant_id",
                "observer_id",
                "observation_notes",
                "researcher_id",
                "observation_id"
            ]
        }
    },
    {
        "id": 239,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['price', 'product_name', 'product_id', 'product_category', 'glassware_item_id', 'name', 'id', 'description'], 'Order_Items': ['order_id', 'product_id', 'glassware_item_id', 'quantity', 'unit_price', 'order_item_id', 'price', 'item_cost', 'item_id', 'order_date', 'item_price'], 'Glassware_Items': ['glassware_type_id', 'quantity', 'glassware_item_id', 'product_id', 'glassware_item_name', 'glassware_item_description', 'etching_id', 'price', 'item_name', 'material', 'glassware_item_type_id', 'stock', 'design_id', 'discontinued', 'supplier_id', 'quantity_in_stock', 'unit_price', 'quantity_supplied']} and \n# the user question: Retrieve the list of products along with the total quantity of glassware items sold for each product, sorted by quantity in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of products along with the total quantity of glassware items sold for each product, sorted by quantity in descending order.",
        "output": "SELECT Products.product_name, SUM(Order_Items.quantity) AS total_items_sold FROM Products INNER JOIN Glassware_Items ON Products.product_id = Glassware_Items.product_id INNER JOIN Order_Items ON Glassware_Items.glassware_item_id = Order_Items.glassware_item_id GROUP BY Products.product_id ORDER BY total_items_sold DESC;",
        "schema": "glass_etching",
        "processed_schema_content": {
            "Products": [
                "price",
                "product_name",
                "product_id",
                "product_category",
                "glassware_item_id",
                "name",
                "id",
                "description"
            ],
            "Order_Items": [
                "order_id",
                "product_id",
                "glassware_item_id",
                "quantity",
                "unit_price",
                "order_item_id",
                "price",
                "item_cost",
                "item_id",
                "order_date",
                "item_price"
            ],
            "Glassware_Items": [
                "glassware_type_id",
                "quantity",
                "glassware_item_id",
                "product_id",
                "glassware_item_name",
                "glassware_item_description",
                "etching_id",
                "price",
                "item_name",
                "material",
                "glassware_item_type_id",
                "stock",
                "design_id",
                "discontinued",
                "supplier_id",
                "quantity_in_stock",
                "unit_price",
                "quantity_supplied"
            ]
        }
    },
    {
        "id": 240,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Players': ['last_name', 'player_id', 'team_id', 'first_name', 'birth_date', 'height', 'nationality', 'avg_assists', 'avg_points', 'avg_rebounds', 'ppg', 'rpg', 'apg', 'seasons_played', 'total_points', 'total_threes', 'three_pt_pct', 'games_played', 'fg_pct', 'total_fga', 'ast_per_game', 'total_3pt_att', 'total_3pt', 'country_code', 'last_year', 'first_year', 'Name', 'Age', 'Salary', 'ID', 'Position', 'Number', 'TeamID', 'IsInjured', 'JerseyNumber', 'Height', 'Weight', \"6'10''\", 'Player_ID', 'Player_Name'], 'Stats': ['total_rebounds', 'player_id', 'points', 'game_id', 'field_goals_made', 'field_goals_attempted', 'season_id', 'three_pointers_made', 'rebounds', 'assists', 'steals', 'blocks', 'three_pointers_attempted', 'per', 'season_type', 'free_throws_attempted', 'free_throws_made', 'opponent_points', 'three_pointers', 'wins', 'date', 'games_played', 'team_id', 'field_goals', 'field_goal_attempts', 'free_throw_percentage', 'minutes_played', 'fg3m', 'Points', 'PlayerID', 'FieldGoalAttempts', 'Assists', 'FieldGoalsMade', 'FGPercentage', 'GameID', 'Rebounds', 'FieldGoalsAttempted']} and \n# the user question: Find the players who have scored at least 10,000 career points and have a career points per game average of at least 20.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the players who have scored at least 10,000 career points and have a career points per game average of at least 20.",
        "output": "SELECT Players.first_name, Players.last_name, SUM(Stats.points) AS total_points, ROUND(AVG(Stats.points) , 2) AS points_per_game FROM Players JOIN Stats ON Players.player_id = Stats.player_id GROUP BY Players.player_id HAVING total_points >= 10000 AND points_per_game >= 20 ORDER BY total_points DESC;",
        "schema": "basketball",
        "processed_schema_content": {
            "Players": [
                "last_name",
                "player_id",
                "team_id",
                "first_name",
                "birth_date",
                "height",
                "nationality",
                "avg_assists",
                "avg_points",
                "avg_rebounds",
                "ppg",
                "rpg",
                "apg",
                "seasons_played",
                "total_points",
                "total_threes",
                "three_pt_pct",
                "games_played",
                "fg_pct",
                "total_fga",
                "ast_per_game",
                "total_3pt_att",
                "total_3pt",
                "country_code",
                "last_year",
                "first_year",
                "Name",
                "Age",
                "Salary",
                "ID",
                "Position",
                "Number",
                "TeamID",
                "IsInjured",
                "JerseyNumber",
                "Height",
                "Weight",
                "6'10''",
                "Player_ID",
                "Player_Name"
            ],
            "Stats": [
                "total_rebounds",
                "player_id",
                "points",
                "game_id",
                "field_goals_made",
                "field_goals_attempted",
                "season_id",
                "three_pointers_made",
                "rebounds",
                "assists",
                "steals",
                "blocks",
                "three_pointers_attempted",
                "per",
                "season_type",
                "free_throws_attempted",
                "free_throws_made",
                "opponent_points",
                "three_pointers",
                "wins",
                "date",
                "games_played",
                "team_id",
                "field_goals",
                "field_goal_attempts",
                "free_throw_percentage",
                "minutes_played",
                "fg3m",
                "Points",
                "PlayerID",
                "FieldGoalAttempts",
                "Assists",
                "FieldGoalsMade",
                "FGPercentage",
                "GameID",
                "Rebounds",
                "FieldGoalsAttempted"
            ]
        }
    },
    {
        "id": 241,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Devices': ['device_location', 'device_name', 'device_id', 'location', 'device_type', 'time_diff', 'device_category', 'device_status', 'battery_level', 'last_data_timestamp', 'created_timestamp', 'notify_user', 'room_id', 'active', 'last_used', 'transmit_data'], 'DeviceData': ['device_location', 'data_value', 'data_timestamp', 'device_id', 'data_id', 'alert_threshold', 'data_unit', 'data_type', 'Temperature', 'Humidity', 'sensor_id'], 'Users': ['user_id', 'username', 'user_name'], 'UserDevices': ['user_id', 'device_id']} and \n# the user question: Find the user ID and user name for all users who have devices that have a light sensor and a temperature sensor, and have had a temperature reading that is more than 5 degrees higher than the highest temperature reading across all devices in the last hour.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the user ID and user name for all users who have devices that have a light sensor and a temperature sensor, and have had a temperature reading that is more than 5 degrees higher than the highest temperature reading across all devices in the last hour.",
        "output": "SELECT DISTINCT Users.user_id, Users.user_name FROM Users JOIN UserDevices ON Users.user_id = UserDevices.user_id JOIN Devices ON UserDevices.device_id = Devices.device_id JOIN DeviceData DT1 ON Devices.device_id = DT1.device_id AND DT1.data_type = 'Temperature' JOIN DeviceData DT2 ON Devices.device_id = DT2.device_id AND DT2.data_type = 'Light' WHERE DT1.data_timestamp >= datetime('now', '-1 hour') AND DT2.data_timestamp >= datetime('now', '-1 hour') AND DT1.data_value > (SELECT MAX(data_value)+5 FROM DeviceData WHERE data_type = 'Temperature');",
        "schema": "internet_of_things_(iot)",
        "processed_schema_content": {
            "Devices": [
                "device_location",
                "device_name",
                "device_id",
                "location",
                "device_type",
                "time_diff",
                "device_category",
                "device_status",
                "battery_level",
                "last_data_timestamp",
                "created_timestamp",
                "notify_user",
                "room_id",
                "active",
                "last_used",
                "transmit_data"
            ],
            "DeviceData": [
                "device_location",
                "data_value",
                "data_timestamp",
                "device_id",
                "data_id",
                "alert_threshold",
                "data_unit",
                "data_type",
                "Temperature",
                "Humidity",
                "sensor_id"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name"
            ],
            "UserDevices": [
                "user_id",
                "device_id"
            ]
        }
    },
    {
        "id": 243,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Attendee': ['attendee_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'date_of_birth', 'job_title', 'city', 'age', 'email'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID']} and \n# the user question: What is the name of the attendee who has spent the most amount of money on registration fees?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "What is the name of the attendee who has spent the most amount of money on registration fees?",
        "output": "SELECT Attendee.first_name, Attendee.last_name FROM Attendee INNER JOIN Registration ON Attendee.attendee_id = Registration.attendee_id WHERE Registration.fee IS NOT NULL GROUP BY Attendee.attendee_id ORDER BY SUM(Registration.fee) DESC LIMIT 1;",
        "schema": "event_management",
        "processed_schema_content": {
            "Attendee": [
                "attendee_id",
                "first_name",
                "last_name",
                "email_address",
                "phone_number",
                "date_of_birth",
                "job_title",
                "city",
                "age",
                "email"
            ],
            "Registration": [
                "registration_id",
                "attendee_id",
                "event_id",
                "registration_date",
                "num_tickets",
                "attended",
                "fee",
                "registration_status",
                "payment_status",
                "payment_method",
                "num_attendees",
                "EventName",
                "AttendeeID"
            ]
        }
    },
    {
        "id": 246,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'category_id', 'ProductName', 'ProductID', 'UnitPrice', 'CategoryID', 'Product_Name', 'Product_ID'], 'OrderDetails': ['ProductID', 'UnitPrice', 'Quantity', 'OrderID']} and \n# the user question: Show the top 5 products with the highest total revenue generated.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Show the top 5 products with the highest total revenue generated.",
        "output": "SELECT Products.ProductName, SUM(OrderDetails.Quantity * OrderDetails.UnitPrice) AS Total_Revenue FROM Products JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID GROUP BY Products.ProductID ORDER BY Total_Revenue DESC LIMIT 5",
        "schema": "data_analysis",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "category_id",
                "ProductName",
                "ProductID",
                "UnitPrice",
                "CategoryID",
                "Product_Name",
                "Product_ID"
            ],
            "OrderDetails": [
                "ProductID",
                "UnitPrice",
                "Quantity",
                "OrderID"
            ]
        }
    },
    {
        "id": 247,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['username', 'role', 'user_id'], 'Tasks': ['priority', 'status', 'opportunity_id', 'duration', 'user_id', 'task_id']} and \n# the user question: Retrieve the usernames and roles of users who have not been assigned any tasks.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the usernames and roles of users who have not been assigned any tasks.",
        "output": "SELECT u.username, u.role FROM Users u LEFT JOIN Tasks t ON u.user_id = t.user_id WHERE t.task_id IS NULL;",
        "schema": "business_development",
        "processed_schema_content": {
            "Users": [
                "username",
                "role",
                "user_id"
            ],
            "Tasks": [
                "priority",
                "status",
                "opportunity_id",
                "duration",
                "user_id",
                "task_id"
            ]
        }
    },
    {
        "id": 248,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Customers': ['customer_id', 'first_name', 'phone_number', 'last_name', 'email', 'loyalty_status', 'city', 'customer_email', 'customer_name', 'country', 'loyalty_level', 'sale_date', 'third_sale_date', 'zip', 'state', 'address', 'loyalty_number', 'default_location_id', 'loyalty_discount', 'phone'], 'Inventory': ['product_id', 'supplier_id', 'quantity', 'inventory_id', 'units_in_stock', 'quantity_on_hand', 'expiration_date', 'expected_arrival_date', 'quantity_on_order'], 'Suppliers': ['supplier_name', 'supplier_id', 'phone_number', 'address', 'email', 'country', 'contact_name', 'state', 'city', 'phone', 'company_name', 'Canada', 'USA', 'supplier_rating', 'zip'], 'Sale_Items': ['product_id', 'sale_id', 'quantity', 'sale_item_id', 'customer_id', 'unit_price', 'discount_code', 'sale_date', 'price'], 'Sales': ['employee_id', 'sale_id', 'sale_date', 'customer_id', 'total', 'total_amount', 'payment_method', 'total_price', 'total_spent', 'location_id', 'coupon_code', 'start_date', 'discount_percentage', 'end_date', 'product_id'], 'Product_Ratings': ['rating', 'product_id']} and \n# the user question: Retrieve the names and total revenue for all products that have been sold to customers located in the USA and have a rating of 4 or higher, and have not been supplied by a company based in the USA or Canada.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and total revenue for all products that have been sold to customers located in the USA and have a rating of 4 or higher, and have not been supplied by a company based in the USA or Canada.",
        "output": "SELECT Products.product_name, SUM(Sale_Items.quantity * Products.price) AS total_revenue FROM Products INNER JOIN Sale_Items ON Products.product_id = Sale_Items.product_id INNER JOIN Sales ON Sale_Items.sale_id = Sales.sale_id INNER JOIN Customers ON Sales.customer_id = Customers.customer_id INNER JOIN Inventory ON Products.product_id = Inventory.product_id INNER JOIN Suppliers ON Inventory.supplier_id = Suppliers.supplier_id INNER JOIN Product_Ratings ON Products.product_id = Product_Ratings.product_id WHERE Customers.country = 'USA' AND Product_Ratings.rating >= 4 AND (Suppliers.country <> 'USA' AND Suppliers.country <> 'Canada') GROUP BY Products.product_id ORDER BY total_revenue DESC;",
        "schema": "pharmacy",
        "processed_schema_content": {
            "Products": [
                "product_id",
                "product_name",
                "price",
                "description",
                "product_description",
                "supplier_id",
                "category_id",
                "units_in_stock",
                "expiration_date",
                "stock_quantity",
                "expiration_id",
                "discontinued",
                "cost_price",
                "quantity_in_stock",
                "unit_price",
                "unit_cost",
                "brand_name",
                "last_supplied_date",
                "manufacturer_name",
                "backorder"
            ],
            "Customers": [
                "customer_id",
                "first_name",
                "phone_number",
                "last_name",
                "email",
                "loyalty_status",
                "city",
                "customer_email",
                "customer_name",
                "country",
                "loyalty_level",
                "sale_date",
                "third_sale_date",
                "zip",
                "state",
                "address",
                "loyalty_number",
                "default_location_id",
                "loyalty_discount",
                "phone"
            ],
            "Inventory": [
                "product_id",
                "supplier_id",
                "quantity",
                "inventory_id",
                "units_in_stock",
                "quantity_on_hand",
                "expiration_date",
                "expected_arrival_date",
                "quantity_on_order"
            ],
            "Suppliers": [
                "supplier_name",
                "supplier_id",
                "phone_number",
                "address",
                "email",
                "country",
                "contact_name",
                "state",
                "city",
                "phone",
                "company_name",
                "Canada",
                "USA",
                "supplier_rating",
                "zip"
            ],
            "Sale_Items": [
                "product_id",
                "sale_id",
                "quantity",
                "sale_item_id",
                "customer_id",
                "unit_price",
                "discount_code",
                "sale_date",
                "price"
            ],
            "Sales": [
                "employee_id",
                "sale_id",
                "sale_date",
                "customer_id",
                "total",
                "total_amount",
                "payment_method",
                "total_price",
                "total_spent",
                "location_id",
                "coupon_code",
                "start_date",
                "discount_percentage",
                "end_date",
                "product_id"
            ],
            "Product_Ratings": [
                "rating",
                "product_id"
            ]
        }
    },
    {
        "id": 249,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customers': ['customer_id', 'first_name', 'last_name', 'country', 'city', 'state', 'address', 'zip', 'email', 'registration_date', 'customer_date_added', 'shipping_address', 'loyalty_status', 'billing_address', 'join_date', 'total_price', 'total_purchase', 'sales_rep_id', 'phone'], 'Orders': ['order_date', 'customer_id', 'order_id', 'payment_status', 'employee_id', 'coupon_id', 'gift_card_id', 'return_date', 'order_status', 'payment_method', 'coupon_code', 'discount_code', 'order_total', 'total_price', 'total']} and \n# the user question: Retrieve the names and email addresses of all customers who have not placed an order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all customers who have not placed an order:",
        "output": "SELECT Customers.first_name, Customers.last_name, Customers.email FROM Customers LEFT JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.order_id IS NULL",
        "schema": "business",
        "processed_schema_content": {
            "Customers": [
                "customer_id",
                "first_name",
                "last_name",
                "country",
                "city",
                "state",
                "address",
                "zip",
                "email",
                "registration_date",
                "customer_date_added",
                "shipping_address",
                "loyalty_status",
                "billing_address",
                "join_date",
                "total_price",
                "total_purchase",
                "sales_rep_id",
                "phone"
            ],
            "Orders": [
                "order_date",
                "customer_id",
                "order_id",
                "payment_status",
                "employee_id",
                "coupon_id",
                "gift_card_id",
                "return_date",
                "order_status",
                "payment_method",
                "coupon_code",
                "discount_code",
                "order_total",
                "total_price",
                "total"
            ]
        }
    },
    {
        "id": 250,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Platforms': ['platform_id', 'game_id', 'online_players'], 'Platforms': ['platform_id', 'platform_name', 'platform_release_date', 'platform_manufacturer', 'platform_publisher', 'platform_release_year', 'manufacturer_id'], 'Game_Modes': ['mode_id', 'game_id'], 'Modes': ['mode_id', 'mode_name', 'mode_type']} and \n# the user question: Find the names of all games that have been released on the \"PlayStation 5\" platform and have a \"First-Person Shooter\" or \"Third-Person Shooter\" game mode.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all games that have been released on the \"PlayStation 5\" platform and have a \"First-Person Shooter\" or \"Third-Person Shooter\" game mode.",
        "output": "SELECT DISTINCT Games.game_title FROM Games INNER JOIN Game_Modes ON Games.game_id = Game_Modes.game_id INNER JOIN Modes ON Game_Modes.mode_id = Modes.mode_id INNER JOIN Game_Platforms ON Games.game_id = Game_Platforms.game_id INNER JOIN Platforms ON Game_Platforms.platform_id = Platforms.platform_id WHERE (Modes.mode_name = 'First-Person Shooter' OR Modes.mode_name = 'Third-Person Shooter') AND Platforms.platform_name = 'PlayStation 5';",
        "schema": "game_design",
        "processed_schema_content": {
            "Games": [
                "game_id",
                "game_title",
                "game_publisher",
                "game_release_date",
                "game_developer"
            ],
            "Game_Platforms": [
                "platform_id",
                "game_id",
                "online_players"
            ],
            "Platforms": [
                "platform_id",
                "platform_name",
                "platform_release_date",
                "platform_manufacturer",
                "platform_publisher",
                "platform_release_year",
                "manufacturer_id"
            ],
            "Game_Modes": [
                "mode_id",
                "game_id"
            ],
            "Modes": [
                "mode_id",
                "mode_name",
                "mode_type"
            ]
        }
    },
    {
        "id": 252,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Character': ['name', 'id', 'gender'], 'Issue_Character': ['issue_id', 'character_id']} and \n# the user question: Find the names of all characters who have appeared in issues that were released in the year 2005 and have a total of at least 5 appearances across all issues they have appeared in.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all characters who have appeared in issues that were released in the year 2005 and have a total of at least 5 appearances across all issues they have appeared in.",
        "output": "SELECT c.name FROM Character c JOIN Issue_Character ic ON c.id = ic.character_id JOIN Issue i ON ic.issue_id = i.id AND i.cover_date BETWEEN '2005-01-01' AND '2005-12-31' GROUP BY c.id HAVING COUNT(ic.issue_id) >= 5;",
        "schema": "graphic_novels",
        "processed_schema_content": {
            "Issue": [
                "volume_id",
                "id",
                "title",
                "number",
                "release_date",
                "published_year",
                "publication_date",
                "series_id",
                "publication_year",
                "page_count",
                "sales",
                "has_variant_cover",
                "cover_price",
                "cover_date",
                "cover_art_id",
                "variant_cover"
            ],
            "Character": [
                "name",
                "id",
                "gender"
            ],
            "Issue_Character": [
                "issue_id",
                "character_id"
            ]
        }
    },
    {
        "id": 253,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'email', 'registration_date', 'dataset_count', 'role'], 'Projects': ['user_id', 'project_id', 'project_name', 'dataset_count', 'dataset_id', 'creation_year', 'created_at'], 'DataSets': ['dataset_description', 'dataset_id', 'dataset_name', 'project_id', 'user_id', 'source_id'], 'Variables': ['dataset_id', 'variable_name', 'variable_type', 'variable_id', 'variable_count'], 'Observations': ['dataset_id', 'observation_count', 'observation_id']} and \n# the user question: Retrieve the project names and the count of variables for projects that have at least one dataset with more than 1000 observations and were created by users with the role 'Manager':,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the project names and the count of variables for projects that have at least one dataset with more than 1000 observations and were created by users with the role 'Manager':",
        "output": "SELECT Projects.project_name, COUNT(Variables.variable_id) AS variable_count FROM Projects JOIN Users ON Projects.user_id = Users.user_id JOIN DataSets ON Projects.project_id = DataSets.project_id JOIN Observations ON DataSets.dataset_id = Observations.dataset_id JOIN Variables ON DataSets.dataset_id = Variables.dataset_id WHERE Observations.observation_count > 1000 AND Users.role = 'Manager' GROUP BY Projects.project_name;",
        "schema": "data_analytics",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "email",
                "registration_date",
                "dataset_count",
                "role"
            ],
            "Projects": [
                "user_id",
                "project_id",
                "project_name",
                "dataset_count",
                "dataset_id",
                "creation_year",
                "created_at"
            ],
            "DataSets": [
                "dataset_description",
                "dataset_id",
                "dataset_name",
                "project_id",
                "user_id",
                "source_id"
            ],
            "Variables": [
                "dataset_id",
                "variable_name",
                "variable_type",
                "variable_id",
                "variable_count"
            ],
            "Observations": [
                "dataset_id",
                "observation_count",
                "observation_id"
            ]
        }
    },
    {
        "id": 254,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {} and \n# the user question: Retrieve the names and email addresses of all coaches.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of all coaches.",
        "output": "SELECT name, email FROM Coach;",
        "schema": "coaching",
        "processed_schema_content": {}
    },
    {
        "id": 255,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'films': ['runtime', 'release_date', 'genre_id', 'title', 'id', 'genre', 'director_id', 'release_year', 'rating', 'director', 'country']} and \n# the user question: Show the total number of films in the database that were released before 2000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Show the total number of films in the database that were released before 2000.",
        "output": "SELECT COUNT(*) FROM films WHERE release_year < 2000;",
        "schema": "documentary_films",
        "processed_schema_content": {
            "films": [
                "runtime",
                "release_date",
                "genre_id",
                "title",
                "id",
                "genre",
                "director_id",
                "release_year",
                "rating",
                "director",
                "country"
            ]
        }
    },
    {
        "id": 256,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Stock': ['Stock_Quantity', 'Product_I', 'Product_ID', 'Last_Restocked_Date']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently out of stock but has been restocked within the last 3 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is currently out of stock but has been restocked within the last 3 days.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' LEFT JOIN Stock s ON oi.Product_ID = s.Product_ID AND (julianday('now') - julianday(s.Last_Restocked_Date)) <= 3;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Stock": [
                "Stock_Quantity",
                "Product_I",
                "Product_ID",
                "Last_Restocked_Date"
            ]
        }
    },
    {
        "id": 257,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Cases': ['status', 'user_id', 'title', 'date_closed', 'case_id', 'description', 'date_opened', 'verdict', 'crime_type', 'closed_date', 'open_date', 'CaseID', 'Verdict', 'Type', 'SentenceLength'], 'Suspects': ['case_id', 'suspect_id', 'status', 'last_name', 'first_name', 'age', 'false_identity_used'], 'Victims': ['victim_id', 'case_id', 'status', 'closed', 'crime_type', 'age', 'relationship', 'physical_injury', 'injury_type', 'victim_type', 'restraining_order', 'Address', 'VictimID', 'VictimName'], 'Victim_Statements': ['victim_id', 'statement', 'case_id', 'statement_type']} and \n# the user question: Get the number of cases that have at least one suspect and one victim, and the percentage of those cases that resulted in a closed status, where the victim has reported being sexually assaulted.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the number of cases that have at least one suspect and one victim, and the percentage of those cases that resulted in a closed status, where the victim has reported being sexually assaulted.",
        "output": "SELECT CAST(COUNT(DISTINCT CASE WHEN c.status = 'closed' THEN c.case_id END) as float) / COUNT(DISTINCT c.case_id) as closed_percentage, COUNT(DISTINCT c.case_id) as cases_count FROM Cases c INNER JOIN Suspects s ON c.case_id = s.case_id INNER JOIN Victims v ON c.case_id = v.case_id INNER JOIN Victim_Statements vs ON v.victim_id = vs.victim_id WHERE vs.statement LIKE '%sexually assaulted%';",
        "schema": "forensic_psychology",
        "processed_schema_content": {
            "Cases": [
                "status",
                "user_id",
                "title",
                "date_closed",
                "case_id",
                "description",
                "date_opened",
                "verdict",
                "crime_type",
                "closed_date",
                "open_date",
                "CaseID",
                "Verdict",
                "Type",
                "SentenceLength"
            ],
            "Suspects": [
                "case_id",
                "suspect_id",
                "status",
                "last_name",
                "first_name",
                "age",
                "false_identity_used"
            ],
            "Victims": [
                "victim_id",
                "case_id",
                "status",
                "closed",
                "crime_type",
                "age",
                "relationship",
                "physical_injury",
                "injury_type",
                "victim_type",
                "restraining_order",
                "Address",
                "VictimID",
                "VictimName"
            ],
            "Victim_Statements": [
                "victim_id",
                "statement",
                "case_id",
                "statement_type"
            ]
        }
    },
    {
        "id": 258,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'News_Live_Event': ['user_id', 'title', 'location', 'id', 'start_time', 'end_time', 'topic']} and \n# the user question: Retrieve the titles and start times of all live events that have not yet ended, sorted by start time in ascending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the titles and start times of all live events that have not yet ended, sorted by start time in ascending order.",
        "output": "SELECT title, start_time FROM News_Live_Event WHERE end_time > datetime('now') ORDER BY start_time ASC;",
        "schema": "news_programs",
        "processed_schema_content": {
            "News_Live_Event": [
                "user_id",
                "title",
                "location",
                "id",
                "start_time",
                "end_time",
                "topic"
            ]
        }
    },
    {
        "id": 259,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Programs': ['program_id', 'program_name', 'program_description', 'start_date', 'end_date', 'status', 'Program'], 'Enrollments': ['enrollment_id', 'user_id', 'program_id', 'enrollment_date', 'enrollment_status'], 'Program_Workouts': ['workout_id', 'program_id'], 'User_Workouts': ['workout_id', 'date_completed', 'user_id', 'calories_burned', 'program_id', 'duration', 'date_scheduled', 'avg_heart_rate', 'workout_date', 'workout_status', 'workout_duration']} and \n# the user question: Find the names and email addresses of all users who have not completed any workouts in the program with ID 3:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and email addresses of all users who have not completed any workouts in the program with ID 3:",
        "output": "SELECT Users.first_name, Users.last_name, Users.email FROM Users JOIN Enrollments ON Users.user_id = Enrollments.user_id JOIN Programs ON Enrollments.program_id = Programs.program_id LEFT JOIN Program_Workouts ON Programs.program_id = Program_Workouts.program_id LEFT JOIN User_Workouts ON Program_Workouts.workout_id = User_Workouts.workout_id AND Users.user_id = User_Workouts.user_id WHERE Programs.program_id = 3 AND User_Workouts.date_completed IS NULL;",
        "schema": "health_and_wellness_programs",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "first_name",
                "last_name",
                "email",
                "password",
                "phone_number",
                "address",
                "age",
                "gender",
                "bmi",
                "goal_id"
            ],
            "Programs": [
                "program_id",
                "program_name",
                "program_description",
                "start_date",
                "end_date",
                "status",
                "Program"
            ],
            "Enrollments": [
                "enrollment_id",
                "user_id",
                "program_id",
                "enrollment_date",
                "enrollment_status"
            ],
            "Program_Workouts": [
                "workout_id",
                "program_id"
            ],
            "User_Workouts": [
                "workout_id",
                "date_completed",
                "user_id",
                "calories_burned",
                "program_id",
                "duration",
                "date_scheduled",
                "avg_heart_rate",
                "workout_date",
                "workout_status",
                "workout_duration"
            ]
        }
    },
    {
        "id": 260,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Film': ['film_id', 'title', 'director_id', 'duration', 'release_date', 'genre', 'genre_id', 'language_id'], 'Review': ['rating', 'film_id', 'review_id']} and \n# the user question: \"Retrieve the film titles and their respective ratings for films released in the last 4 years.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Retrieve the film titles and their respective ratings for films released in the last 4 years.\"",
        "output": "SELECT Film.title, Review.rating FROM Film INNER JOIN Review ON Film.film_id = Review.film_id WHERE Film.release_date >= DATE('now', '-4 years');",
        "schema": "drama_films",
        "processed_schema_content": {
            "Film": [
                "film_id",
                "title",
                "director_id",
                "duration",
                "release_date",
                "genre",
                "genre_id",
                "language_id"
            ],
            "Review": [
                "rating",
                "film_id",
                "review_id"
            ]
        }
    },
    {
        "id": 262,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Patients': ['medical_history', 'patient_id', 'first_name', 'last_name', 'age_group', 'gender', 'Age', 'Contact_Info', 'Name', 'Diagnosis', 'Discharge_Date', 'Admission_Date', 'Address', 'Family_History', 'Patient_ID', 'Doctor_ID', 'Doctor_I', 'AdmissionDate', 'Therapy', 'date_of_birth', 'name'], 'Medical_Records': ['doctor_id', 'diagnosis', 'patient_id', 'date_of_visit', 'admission_id', 'medical_record_id', 'treatment_description', 'surgery_id', 'procedure_id', 'nurse_id', 'notes', 'diagnosis_id', 'discharge_date', 'attending_physician_id'], 'Rooms': ['room_id', 'room_number', 'bed_number', 'room_type'], 'Admissions': ['date_discharged', 'room_id', 'patient_id', 'admission_id', 'date_admitted', 'nurse_id', 'medical_record_id', 'admission_date', 'discharge_date', 'ward_id', 'num_medications', 'Unit_Type', 'Admission_Date', 'Diagnosis', 'Discharge_Date', 'Patient_ID'], 'Imaging_Tests': ['test_name', 'medical_record_id', 'scan', 'CT', 'MRI', 'ray', 'X', 'result', 'Ultrasound', 'Mammogram', 'EKG']} and \n# the user question: Find the patients who have been admitted to a room and have undergone at least one imaging test.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the patients who have been admitted to a room and have undergone at least one imaging test.",
        "output": "SELECT DISTINCT Patients.patient_id, Patients.first_name, Patients.last_name, Rooms.room_number, Imaging_Tests.test_name FROM Patients INNER JOIN Admissions ON Patients.patient_id = Admissions.patient_id INNER JOIN Rooms ON Admissions.room_id = Rooms.room_id INNER JOIN Medical_Records ON Admissions.admission_id = Medical_Records.admission_id INNER JOIN Imaging_Tests ON Medical_Records.medical_record_id = Imaging_Tests.medical_record_id;",
        "schema": "nursing",
        "processed_schema_content": {
            "Patients": [
                "medical_history",
                "patient_id",
                "first_name",
                "last_name",
                "age_group",
                "gender",
                "Age",
                "Contact_Info",
                "Name",
                "Diagnosis",
                "Discharge_Date",
                "Admission_Date",
                "Address",
                "Family_History",
                "Patient_ID",
                "Doctor_ID",
                "Doctor_I",
                "AdmissionDate",
                "Therapy",
                "date_of_birth",
                "name"
            ],
            "Medical_Records": [
                "doctor_id",
                "diagnosis",
                "patient_id",
                "date_of_visit",
                "admission_id",
                "medical_record_id",
                "treatment_description",
                "surgery_id",
                "procedure_id",
                "nurse_id",
                "notes",
                "diagnosis_id",
                "discharge_date",
                "attending_physician_id"
            ],
            "Rooms": [
                "room_id",
                "room_number",
                "bed_number",
                "room_type"
            ],
            "Admissions": [
                "date_discharged",
                "room_id",
                "patient_id",
                "admission_id",
                "date_admitted",
                "nurse_id",
                "medical_record_id",
                "admission_date",
                "discharge_date",
                "ward_id",
                "num_medications",
                "Unit_Type",
                "Admission_Date",
                "Diagnosis",
                "Discharge_Date",
                "Patient_ID"
            ],
            "Imaging_Tests": [
                "test_name",
                "medical_record_id",
                "scan",
                "CT",
                "MRI",
                "ray",
                "X",
                "result",
                "Ultrasound",
                "Mammogram",
                "EKG"
            ]
        }
    },
    {
        "id": 263,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Songs': ['AlbumID', 'SongID', 'GenreID', 'SongTitle', 'Duration', 'SongName', 'ArtistID', 'ReleaseDate', 'ReleaseYear', 'Language', 'AvgDuration', 'AvgRating', 'CommentCount', 'Rating', 'PlayCount'], 'Albums': ['ReleaseYear', 'AlbumID', 'ArtistID', 'AlbumTitle', 'ReleaseDate', 'SongID', 'Language', 'LanguageID', 'GenreID', 'AlbumName'], 'Ratings': ['UserID', 'SongID', 'Rating', 'GenreID', 'AlbumID', 'RatingID']} and \n# the user question: \"Retrieve the names of albums that have songs with ratings higher than the average rating of all songs.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "\"Retrieve the names of albums that have songs with ratings higher than the average rating of all songs.\"",
        "output": "SELECT Albums.AlbumName FROM Albums INNER JOIN Songs ON Albums.AlbumID = Songs.AlbumID INNER JOIN Ratings ON Songs.SongID = Ratings.SongID WHERE Ratings.Rating > ( SELECT AVG(Rating) FROM Ratings ) GROUP BY Albums.AlbumID;",
        "schema": "music",
        "processed_schema_content": {
            "Songs": [
                "AlbumID",
                "SongID",
                "GenreID",
                "SongTitle",
                "Duration",
                "SongName",
                "ArtistID",
                "ReleaseDate",
                "ReleaseYear",
                "Language",
                "AvgDuration",
                "AvgRating",
                "CommentCount",
                "Rating",
                "PlayCount"
            ],
            "Albums": [
                "ReleaseYear",
                "AlbumID",
                "ArtistID",
                "AlbumTitle",
                "ReleaseDate",
                "SongID",
                "Language",
                "LanguageID",
                "GenreID",
                "AlbumName"
            ],
            "Ratings": [
                "UserID",
                "SongID",
                "Rating",
                "GenreID",
                "AlbumID",
                "RatingID"
            ]
        }
    },
    {
        "id": 265,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Sessions': ['session_start_time', 'session_end_time', 'session_id', 'event_id', 'session_description', 'session_name', 'attendee_id', 'ticket_id', 'speaker_id', 'session_location', 'session_max_capacity', 'session_speaker', 'session_capacity', 'session_type', 'session_price', 'room_number', 'start_time', 'end_time', 'speaker_name', 'session_time', 'session_date', 'session_attendees', 'session_title'], 'Attendees': ['attendee_email', 'attendee_name', 'attendee_id', 'attendee_password', 'event_id', 'attendee_company', 'ticket_id', 'attendee_phone', 'company_id', 'session_id', 'attendee_registration_date'], 'Session_Attendees': ['session_id', 'attendee_id', 'session_attendee_id', 'event_id']} and \n# the user question: Retrieve the name and capacity of all sessions for the event with ID 4 that have not yet reached capacity.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and capacity of all sessions for the event with ID 4 that have not yet reached capacity.",
        "output": "SELECT session_name, session_capacity FROM Sessions WHERE event_id = 4 AND session_capacity > ( SELECT COUNT(att.attendee_id) FROM Session_Attendees sa INNER JOIN Attendees att ON sa.attendee_id = att.attendee_id WHERE sa.session_id = Sessions.session_id AND att.event_id = Sessions.event_id );",
        "schema": "virtual_event_planning",
        "processed_schema_content": {
            "Sessions": [
                "session_start_time",
                "session_end_time",
                "session_id",
                "event_id",
                "session_description",
                "session_name",
                "attendee_id",
                "ticket_id",
                "speaker_id",
                "session_location",
                "session_max_capacity",
                "session_speaker",
                "session_capacity",
                "session_type",
                "session_price",
                "room_number",
                "start_time",
                "end_time",
                "speaker_name",
                "session_time",
                "session_date",
                "session_attendees",
                "session_title"
            ],
            "Attendees": [
                "attendee_email",
                "attendee_name",
                "attendee_id",
                "attendee_password",
                "event_id",
                "attendee_company",
                "ticket_id",
                "attendee_phone",
                "company_id",
                "session_id",
                "attendee_registration_date"
            ],
            "Session_Attendees": [
                "session_id",
                "attendee_id",
                "session_attendee_id",
                "event_id"
            ]
        }
    },
    {
        "id": 266,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Order': ['order_id', 'customer_id', 'order_date', 'status', 'store_id', 'date', 'total_amount', 'total_cost', 'total_price'], 'Store': ['store_id', 'name', 'address', 'phone_number', 'state', 'store_name', 'city_id']} and \n# the user question: Find the name and address of the store that has the highest revenue generated in the last year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and address of the store that has the highest revenue generated in the last year.",
        "output": "SELECT Store.name, Store.address FROM Store JOIN Order ON Store.store_id = Order.store_id WHERE Order.date >= DATE('now', '-1 year') GROUP BY Store.store_id ORDER BY SUM(Order.total_cost) DESC LIMIT 1;",
        "schema": "business_books",
        "processed_schema_content": {
            "Order": [
                "order_id",
                "customer_id",
                "order_date",
                "status",
                "store_id",
                "date",
                "total_amount",
                "total_cost",
                "total_price"
            ],
            "Store": [
                "store_id",
                "name",
                "address",
                "phone_number",
                "state",
                "store_name",
                "city_id"
            ]
        }
    },
    {
        "id": 268,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Devices': ['device_location', 'device_name', 'device_id', 'location', 'device_type', 'time_diff', 'device_category', 'device_status', 'battery_level', 'last_data_timestamp', 'created_timestamp', 'notify_user', 'room_id', 'active', 'last_used', 'transmit_data']} and \n# the user question: Find the number of devices in each location.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of devices in each location.",
        "output": "SELECT location, COUNT(*) AS device_count FROM Devices GROUP BY location;",
        "schema": "internet_of_things_(iot)",
        "processed_schema_content": {
            "Devices": [
                "device_location",
                "device_name",
                "device_id",
                "location",
                "device_type",
                "time_diff",
                "device_category",
                "device_status",
                "battery_level",
                "last_data_timestamp",
                "created_timestamp",
                "notify_user",
                "room_id",
                "active",
                "last_used",
                "transmit_data"
            ]
        }
    },
    {
        "id": 269,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']} and \n# the user question: Find the names and birthdates of all artists who have artwork in the \"Uffizi Gallery\" and were born in the 17th century.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and birthdates of all artists who have artwork in the \"Uffizi Gallery\" and were born in the 17th century.",
        "output": "SELECT DISTINCT ar.first_name, ar.last_name, ar.date_of_birth FROM artist AS ar INNER JOIN artwork AS a ON ar.artist_id = a.artist_id INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS lo ON al.location_id = lo.location_id WHERE ar.date_of_birth BETWEEN '1600-01-01' AND '1699-12-31' AND lo.name = 'Uffizi Gallery' AND al.end_date IS NULL;",
        "schema": "painting",
        "processed_schema_content": {
            "artwork": [
                "artwork_id",
                "title",
                "year_created",
                "artist_id",
                "dimensions",
                "medium",
                "lender_id",
                "year",
                "estimated_value",
                "creation_date"
            ],
            "location": [
                "name",
                "start_date",
                "end_date",
                "location_id",
                "return_date",
                "Gallery",
                "Art",
                "Uffizi",
                "Gogh",
                "Museum",
                "Van",
                "State",
                "Hermitage",
                "Paul",
                "Getty",
                "Fine",
                "Houston",
                "Arts",
                "Boston",
                "Institute",
                "Chicago",
                "Bilbao",
                "Guggenheim",
                "Solomon",
                "Rijksmuseum",
                "type",
                "city",
                "founded_date",
                "country",
                "continent"
            ],
            "artwork_location": [
                "start_date",
                "end_date",
                "artwork_id",
                "location_id",
                "on_display",
                "on_loan",
                "artwork_location_id",
                "museum_id"
            ],
            "artist": [
                "first_name",
                "date_of_birth",
                "last_name",
                "artist_id",
                "Kandinsky",
                "van",
                "Gogh",
                "birth_date",
                "birth_country",
                "year_born",
                "country_of_birth",
                "birth_year",
                "country_of_origin",
                "gender"
            ]
        }
    },
    {
        "id": 272,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'celestial_bodies': ['radius', 'mass', 'name', 'type', 'number_of_moons', 'distance_from_sun', 'id', 'distance_from_earth', 'orbital_period', 'diameter', 'orbiting_body_id', 'average_surface_temperature', 'surface_temperature', 'perihelion_distance', 'period', 'semimajor_axis', 'redshift', 'velocity', 'luminosity', 'schwarzschild_radius', 'eccentricity', 'aphelion_distance', 'spin_period', 'semi_major_axis', 'surface_gravity', 'temperature', 'magnitude', 'accretion_disk_temperature', 'rotation_period', 'obliquity', 'pulse_period', 'peak_absolute_magnitude', 'albedo', 'apparent_magnitude', 'absolute_magnitude', 'spectral_type', 'discovery_year', 'spectral_class', 'distance_from_star', 'discovery_method_id', 'equilibrium_temperature', 'metallicity', 'age', 'effective_temperature', 'atmospheric_composition', 'inclination', 'parallax', 'rotation_velocity', 'axial_tilt', 'orbital_inclination', 'density', 'rotational_velocity', 'magnetic_field_strength', 'composition', 'rotational_period', 'spin', 'distance_from_galactic_center', 'binary_system', 'constellation', 'stellar_evolution_stage', 'star_cluster_type', 'galaxy', 'orbital_eccentricity', 'star_spectral_type', 'orbital_period_unit', 'diameter_unit', 'discovery_method', 'pulse_period_unit', 'distance_unit', 'radius_unit', 'avg_temperature', 'temperature_unit', 'aphelion_unit', 'perihelion_unit', 'event_horizon_unit', 'event_horizon_radius', 'luminosity_distance', 'orbit_type', 'equatorial_diameter', 'gravity_unit', 'escape_velocity', 'angle_unit', 'surface_area', 'density_unit', 'parent_body_id', 'atmospheric_pressure', 'luminosity_class', 'inner_habitable_zone', 'outer_habitable_zone', 'period_unit', 'classification', 'pressure_unit', 'surface_pressure', 'orbiting', 'distance', 'proper_motion', 'proper_motion_unit', 'mean_radius', 'mass_unit', 'temperature_range', 'Gas', 'Giant', 'brightness_temperature', 'parallax_unit', 'metallicity_unit', 'magnetic_field_unit', 'spin_parameter', 'orbiting_id', 'stellar_mass', 'stage', 'radial_velocity', 'host_star', 'accretion_rate', 'core_type']} and \n# the user question: Retrieve the name and type of all celestial bodies that have a type of 'Black hole' and a mass greater than 5 solar masses.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all celestial bodies that have a type of 'Black hole' and a mass greater than 5 solar masses.",
        "output": "SELECT name, type FROM celestial_bodies WHERE type = 'Black hole' AND mass > 5 * (SELECT mass FROM celestial_bodies WHERE name = 'Sun');",
        "schema": "astronomy",
        "processed_schema_content": {
            "celestial_bodies": [
                "radius",
                "mass",
                "name",
                "type",
                "number_of_moons",
                "distance_from_sun",
                "id",
                "distance_from_earth",
                "orbital_period",
                "diameter",
                "orbiting_body_id",
                "average_surface_temperature",
                "surface_temperature",
                "perihelion_distance",
                "period",
                "semimajor_axis",
                "redshift",
                "velocity",
                "luminosity",
                "schwarzschild_radius",
                "eccentricity",
                "aphelion_distance",
                "spin_period",
                "semi_major_axis",
                "surface_gravity",
                "temperature",
                "magnitude",
                "accretion_disk_temperature",
                "rotation_period",
                "obliquity",
                "pulse_period",
                "peak_absolute_magnitude",
                "albedo",
                "apparent_magnitude",
                "absolute_magnitude",
                "spectral_type",
                "discovery_year",
                "spectral_class",
                "distance_from_star",
                "discovery_method_id",
                "equilibrium_temperature",
                "metallicity",
                "age",
                "effective_temperature",
                "atmospheric_composition",
                "inclination",
                "parallax",
                "rotation_velocity",
                "axial_tilt",
                "orbital_inclination",
                "density",
                "rotational_velocity",
                "magnetic_field_strength",
                "composition",
                "rotational_period",
                "spin",
                "distance_from_galactic_center",
                "binary_system",
                "constellation",
                "stellar_evolution_stage",
                "star_cluster_type",
                "galaxy",
                "orbital_eccentricity",
                "star_spectral_type",
                "orbital_period_unit",
                "diameter_unit",
                "discovery_method",
                "pulse_period_unit",
                "distance_unit",
                "radius_unit",
                "avg_temperature",
                "temperature_unit",
                "aphelion_unit",
                "perihelion_unit",
                "event_horizon_unit",
                "event_horizon_radius",
                "luminosity_distance",
                "orbit_type",
                "equatorial_diameter",
                "gravity_unit",
                "escape_velocity",
                "angle_unit",
                "surface_area",
                "density_unit",
                "parent_body_id",
                "atmospheric_pressure",
                "luminosity_class",
                "inner_habitable_zone",
                "outer_habitable_zone",
                "period_unit",
                "classification",
                "pressure_unit",
                "surface_pressure",
                "orbiting",
                "distance",
                "proper_motion",
                "proper_motion_unit",
                "mean_radius",
                "mass_unit",
                "temperature_range",
                "Gas",
                "Giant",
                "brightness_temperature",
                "parallax_unit",
                "metallicity_unit",
                "magnetic_field_unit",
                "spin_parameter",
                "orbiting_id",
                "stellar_mass",
                "stage",
                "radial_velocity",
                "host_star",
                "accretion_rate",
                "core_type"
            ]
        }
    },
    {
        "id": 273,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'users': ['password', 'email', 'name', 'created_at', 'id', 'country', 'age', 'region', 'email_verified', 'username', 'date_of_birth', 'countr', 'phone_number', 'device_type', 'user_id', 'last_login'], 'app_reviews': ['app_id', 'rating', 'user_id', 'comment', 'created_at', 'status', 'id', 'updated_at', 'posted_at', 'num_reviews'], 'apps': ['name', 'id', 'price', 'created_at', 'category_id', 'updated_at', 'description', 'developer_id', 'rating', 'app_id', 'developer', 'release_date', 'downloads', 'version', 'price_type', 'status', 'creation_date', 'app_name', 'XYZ', 'category']} and \n# the user question: Retrieve the name and email of all users who have left a review for an app with a name containing the word \"Travel\", and have left a comment shorter than 10 characters:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all users who have left a review for an app with a name containing the word \"Travel\", and have left a comment shorter than 10 characters:",
        "output": "SELECT u.name, u.email FROM users u INNER JOIN app_reviews ar ON u.id = ar.user_id INNER JOIN apps a ON ar.app_id = a.id WHERE a.name LIKE '%Travel%' AND LENGTH(ar.comment) < 10;",
        "schema": "mobile_app_development",
        "processed_schema_content": {
            "users": [
                "password",
                "email",
                "name",
                "created_at",
                "id",
                "country",
                "age",
                "region",
                "email_verified",
                "username",
                "date_of_birth",
                "countr",
                "phone_number",
                "device_type",
                "user_id",
                "last_login"
            ],
            "app_reviews": [
                "app_id",
                "rating",
                "user_id",
                "comment",
                "created_at",
                "status",
                "id",
                "updated_at",
                "posted_at",
                "num_reviews"
            ],
            "apps": [
                "name",
                "id",
                "price",
                "created_at",
                "category_id",
                "updated_at",
                "description",
                "developer_id",
                "rating",
                "app_id",
                "developer",
                "release_date",
                "downloads",
                "version",
                "price_type",
                "status",
                "creation_date",
                "app_name",
                "XYZ",
                "category"
            ]
        }
    },
    {
        "id": 274,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'documentary': ['release_date', 'studio_id', 'title', 'director_id', 'rating', 'documentary_id', 'genre', 'name', 'release_year', 'producer_id']} and \n# the user question: List the names of all the documentaries that have a runtime greater than 2 hours and were released before the year 2000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all the documentaries that have a runtime greater than 2 hours and were released before the year 2000.",
        "output": "SELECT name FROM documentary WHERE length > 120 AND release_year < 2000;",
        "schema": "documentary_films",
        "processed_schema_content": {
            "documentary": [
                "release_date",
                "studio_id",
                "title",
                "director_id",
                "rating",
                "documentary_id",
                "genre",
                "name",
                "release_year",
                "producer_id"
            ]
        }
    },
    {
        "id": 275,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Films': ['title', 'country', 'rating_id', 'director_id', 'film_id', 'synopsis', 'release_date', 'runtime', 'studio_id', 'composer_id', 'budget', 'box_office', 'imdb_rating', 'rotten_tomatoes_rating', 'mpaa_rating', 'production_company_id', 'oscar_wins', 'rating', 'rottentomatoes_rating', 'genre_id', 'runtime_minutes', 'release_year', 'The Conjuring', 'PG-13']} and \n# the user question: Query: Retrieve the names and descriptions of all films in the database that have a runtime of at least 90 minutes and a rating of at least 7.5 on IMDb, and that were released in the last 5 years, along with their release dates and box office revenue, ordered by release date in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Query: Retrieve the names and descriptions of all films in the database that have a runtime of at least 90 minutes and a rating of at least 7.5 on IMDb, and that were released in the last 5 years, along with their release dates and box office revenue, ordered by release date in descending order.",
        "output": "SELECT Films.title, Films.release_date, Films.box_office, Films.imdb_rating FROM Films WHERE Films.runtime >= 90 AND Films.imdb_rating >= 7.5 AND Films.release_date BETWEEN DATE('now', '-5 years') AND DATE('now') ORDER BY Films.release_date DESC;",
        "schema": "horror_films",
        "processed_schema_content": {
            "Films": [
                "title",
                "country",
                "rating_id",
                "director_id",
                "film_id",
                "synopsis",
                "release_date",
                "runtime",
                "studio_id",
                "composer_id",
                "budget",
                "box_office",
                "imdb_rating",
                "rotten_tomatoes_rating",
                "mpaa_rating",
                "production_company_id",
                "oscar_wins",
                "rating",
                "rottentomatoes_rating",
                "genre_id",
                "runtime_minutes",
                "release_year",
                "The Conjuring",
                "PG-13"
            ]
        }
    },
    {
        "id": 276,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Author': ['author_id', 'first_name', 'last_name', 'email', 'gender', 'country_id', 'birth_year', 'has_pulitzer_prize', 'has_phd', 'has_booker_prize', 'birth_country', 'name', 'author_name', 'id'], 'Book': ['book_id', 'title', 'isbn', 'publisher_id', 'publication_date', 'rating', 'price', 'publication_year', 'author_id', 'publisher', 'author', 'weight', 'author_gender', 'language', 'author_name', 'book_title', 'format_id', 'page_count', 'id', 'num_pages'], 'Book_Author': ['book_id', 'author_id'], 'Order': ['order_id', 'customer_id', 'order_date', 'status', 'store_id', 'date', 'total_amount', 'total_cost', 'total_price'], 'Order_Item': ['order_id', 'book_id', 'quantity', 'price', 'store_id', 'order_date', 'customer_id', 'unit_price', 'inventory_id', 'date', 'order_item_date'], 'Customer': ['customer_id', 'first_name', 'last_name', 'email', 'address', 'phone_number', 'zip_code', 'country_id'], 'Store_Inventory': ['store_id', 'book_id', 'quantity', 'inventory_id', 'quantity_available']} and \n# the user question: Find the name and email address of the customer who has spent the most money on books written by authors with the last name \"King\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and email address of the customer who has spent the most money on books written by authors with the last name \"King\".",
        "output": "SELECT Customer.first_name || ' ' || Customer.last_name AS customer_name, Customer.email FROM Customer JOIN Order ON Customer.customer_id = Order.customer_id JOIN Order_Item ON Order.order_id = Order_Item.order_id JOIN Store_Inventory ON Order_Item.book_id = Store_Inventory.book_id JOIN Book ON Store_Inventory.book_id = Book.book_id JOIN Book_Author ON Book.book_id = Book_Author.book_id JOIN Author ON Book_Author.author_id = Author.author_id WHERE Author.last_name = 'King' GROUP BY Customer.customer_id ORDER BY SUM(Order_Item.quantity * Order_Item.price) DESC LIMIT 1;",
        "schema": "business_books",
        "processed_schema_content": {
            "Author": [
                "author_id",
                "first_name",
                "last_name",
                "email",
                "gender",
                "country_id",
                "birth_year",
                "has_pulitzer_prize",
                "has_phd",
                "has_booker_prize",
                "birth_country",
                "name",
                "author_name",
                "id"
            ],
            "Book": [
                "book_id",
                "title",
                "isbn",
                "publisher_id",
                "publication_date",
                "rating",
                "price",
                "publication_year",
                "author_id",
                "publisher",
                "author",
                "weight",
                "author_gender",
                "language",
                "author_name",
                "book_title",
                "format_id",
                "page_count",
                "id",
                "num_pages"
            ],
            "Book_Author": [
                "book_id",
                "author_id"
            ],
            "Order": [
                "order_id",
                "customer_id",
                "order_date",
                "status",
                "store_id",
                "date",
                "total_amount",
                "total_cost",
                "total_price"
            ],
            "Order_Item": [
                "order_id",
                "book_id",
                "quantity",
                "price",
                "store_id",
                "order_date",
                "customer_id",
                "unit_price",
                "inventory_id",
                "date",
                "order_item_date"
            ],
            "Customer": [
                "customer_id",
                "first_name",
                "last_name",
                "email",
                "address",
                "phone_number",
                "zip_code",
                "country_id"
            ],
            "Store_Inventory": [
                "store_id",
                "book_id",
                "quantity",
                "inventory_id",
                "quantity_available"
            ]
        }
    },
    {
        "id": 277,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'name', 'description', 'start_date', 'end_date', 'status', 'org_id', 'min_donation', 'min_rating', 'location_id', 'funding_goal', 'total_funding_needed'], 'Volunteers': ['volunteer_id', 'user_id', 'project_id', 'start_date', 'end_date', 'date', 'hours', 'email', 'last_name', 'phone', 'first_name', 'role'], 'Events': ['event_id', 'name', 'description', 'start_date', 'end_date', 'location', 'min_age_requirement', 'project_id', 'is_free', 'date', 'location_id', 'capacity'], 'Causes': ['cause_id', 'name', 'description', 'Energy', 'Renewable', 'Clean', 'Water', 'Conservation', 'Ocean', 'Waste', 'Reduction', 'Buildings', 'Green', 'Materials', 'Sustainable', 'Climate', 'Agriculture', 'Transportation', 'Tourism', 'Building', 'Zero', 'Jobs', 'Reforestation', 'Plastic', 'Biodiversity', 'Food', 'Eco', 'Systems', 'Environmental', 'Education', 'Justice'], 'Projects_Causes': ['project_id', 'cause_id']} and \n# the user question: Retrieve the name and total number of volunteers for all projects associated with the \"Biodiversity\" cause that have a status of \"in progress\" and have at least one event scheduled within the next two weeks, grouped by project name and sorted by total number of volunteers in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total number of volunteers for all projects associated with the \"Biodiversity\" cause that have a status of \"in progress\" and have at least one event scheduled within the next two weeks, grouped by project name and sorted by total number of volunteers in descending order:",
        "output": "SELECT Projects.name, COUNT(DISTINCT Volunteers.user_id) AS total_volunteers FROM Projects INNER JOIN Projects_Causes ON Projects.project_id = Projects_Causes.project_id INNER JOIN Causes ON Projects_Causes.cause_id = Causes.cause_id AND Causes.name = 'Biodiversity' INNER JOIN Events ON Projects.project_id = Events.project_id AND Events.date >= DATE('now') AND Events.date <= DATE('now', '+2 weeks') INNER JOIN Volunteers ON Projects.project_id = Volunteers.project_id WHERE Projects.status = 'in progress' GROUP BY Projects.name ORDER BY total_volunteers DESC;",
        "schema": "sustainability",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "name",
                "description",
                "start_date",
                "end_date",
                "status",
                "org_id",
                "min_donation",
                "min_rating",
                "location_id",
                "funding_goal",
                "total_funding_needed"
            ],
            "Volunteers": [
                "volunteer_id",
                "user_id",
                "project_id",
                "start_date",
                "end_date",
                "date",
                "hours",
                "email",
                "last_name",
                "phone",
                "first_name",
                "role"
            ],
            "Events": [
                "event_id",
                "name",
                "description",
                "start_date",
                "end_date",
                "location",
                "min_age_requirement",
                "project_id",
                "is_free",
                "date",
                "location_id",
                "capacity"
            ],
            "Causes": [
                "cause_id",
                "name",
                "description",
                "Energy",
                "Renewable",
                "Clean",
                "Water",
                "Conservation",
                "Ocean",
                "Waste",
                "Reduction",
                "Buildings",
                "Green",
                "Materials",
                "Sustainable",
                "Climate",
                "Agriculture",
                "Transportation",
                "Tourism",
                "Building",
                "Zero",
                "Jobs",
                "Reforestation",
                "Plastic",
                "Biodiversity",
                "Food",
                "Eco",
                "Systems",
                "Environmental",
                "Education",
                "Justice"
            ],
            "Projects_Causes": [
                "project_id",
                "cause_id"
            ]
        }
    },
    {
        "id": 278,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Documentary_Films': ['length', 'rating', 'title', 'film_id', 'release_date', 'director_id', 'runtime', 'production_company_id', 'duration', 'runtime_minutes', 'duration_minutes', 'tagline', 'release_year'], 'Directors': ['director_id', 'nationality', 'director_name', 'birthdate', 'birthplace', 'gender', 'gender_id', 'last_name', 'first_name'], 'Film_Directors_Map': ['director_id', 'film_id', 'director_role'], 'Film_Topics_Map': ['topic_id', 'film_id'], 'Topics': ['topic_id', 'topic_name']} and \n# the user question: Find the names and release dates of all documentary films that have a topic related to nature and a crew member with a role of \"Director\" who was born in Spain.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and release dates of all documentary films that have a topic related to nature and a crew member with a role of \"Director\" who was born in Spain.",
        "output": "SELECT DISTINCT Documentary_Films.title, Documentary_Films.release_date FROM Documentary_Films JOIN Film_Topics_Map ON Documentary_Films.film_id = Film_Topics_Map.film_id JOIN Topics ON Film_Topics_Map.topic_id = Topics.topic_id JOIN Film_Directors_Map ON Documentary_Films.film_id = Film_Directors_Map.film_id JOIN Directors ON Film_Directors_Map.director_id = Directors.director_id WHERE Topics.topic_name = 'Nature' AND Directors.birthplace = 'Spain';",
        "schema": "documentary_films",
        "processed_schema_content": {
            "Documentary_Films": [
                "length",
                "rating",
                "title",
                "film_id",
                "release_date",
                "director_id",
                "runtime",
                "production_company_id",
                "duration",
                "runtime_minutes",
                "duration_minutes",
                "tagline",
                "release_year"
            ],
            "Directors": [
                "director_id",
                "nationality",
                "director_name",
                "birthdate",
                "birthplace",
                "gender",
                "gender_id",
                "last_name",
                "first_name"
            ],
            "Film_Directors_Map": [
                "director_id",
                "film_id",
                "director_role"
            ],
            "Film_Topics_Map": [
                "topic_id",
                "film_id"
            ],
            "Topics": [
                "topic_id",
                "topic_name"
            ]
        }
    },
    {
        "id": 280,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'personal_trainers': ['name', 'nutrition_certified', 'experience_years', 'trainer_id', 'hourly_rate'], 'clients': ['program_completed', 'trainer_id', 'client_id', 'routine_id', 'program_id', 'phone_number', 'name', 'email', 'medical_condition_id', 'status', 'date_of_birth', 'phone', 'id', 'weight', 'height', 'date_joined', 'contact_number', 'gender']} and \n# the user question: Find the name of the personal trainer with the most clients.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name of the personal trainer with the most clients.",
        "output": "SELECT personal_trainers.name FROM personal_trainers JOIN clients ON personal_trainers.trainer_id = clients.trainer_id GROUP BY personal_trainers.name ORDER BY COUNT(*) DESC LIMIT 1;",
        "schema": "personal_training",
        "processed_schema_content": {
            "personal_trainers": [
                "name",
                "nutrition_certified",
                "experience_years",
                "trainer_id",
                "hourly_rate"
            ],
            "clients": [
                "program_completed",
                "trainer_id",
                "client_id",
                "routine_id",
                "program_id",
                "phone_number",
                "name",
                "email",
                "medical_condition_id",
                "status",
                "date_of_birth",
                "phone",
                "id",
                "weight",
                "height",
                "date_joined",
                "contact_number",
                "gender"
            ]
        }
    },
    {
        "id": 282,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Company': ['company_id', 'company_name', 'country_id', 'num_employees'], 'Country': ['country_id', 'country_name', 'population'], 'Financials': ['company_id', 'revenue', 'pe_ratio', 'market_cap', 'net_income', 'price_earnings_ratio', 'debt_to_equity_ratio', 'return_on_assets', 'current_ratio', 'quick_ratio', 'net_profit_margin', 'return_on_equity', 'price_to_earnings_ratio', 'year']} and \n# the user question: Find the names of all companies that have a market capitalization greater than 500 billion dollars and are headquartered in China.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all companies that have a market capitalization greater than 500 billion dollars and are headquartered in China.",
        "output": "SELECT Company.company_name FROM Company INNER JOIN Financials ON Company.company_id = Financials.company_id INNER JOIN Country ON Company.country_id = Country.country_id WHERE Country.country_name = 'China' AND Financials.market_cap > 500000000000;",
        "schema": "economics",
        "processed_schema_content": {
            "Company": [
                "company_id",
                "company_name",
                "country_id",
                "num_employees"
            ],
            "Country": [
                "country_id",
                "country_name",
                "population"
            ],
            "Financials": [
                "company_id",
                "revenue",
                "pe_ratio",
                "market_cap",
                "net_income",
                "price_earnings_ratio",
                "debt_to_equity_ratio",
                "return_on_assets",
                "current_ratio",
                "quick_ratio",
                "net_profit_margin",
                "return_on_equity",
                "price_to_earnings_ratio",
                "year"
            ]
        }
    },
    {
        "id": 284,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Shows': ['year', 'show_id', 'title', 'description', 'location', 'venue_id', 'duration', 'network', 'release_date', 'Sticks', 'date_recorded', 'name', 'duration_minutes', 'recorded_year', 'date'], 'Users': ['email', 'user_id', 'username'], 'User_Reviews': ['user_id', 'review_id'], 'Reviews': ['review_id', 'performance_id', 'rating', 'special_id', 'show_id']} and \n# the user question: Retrieve the usernames of all users who have reviewed at least one show that had a duration of more than 1 hour and a rating of at least 8.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the usernames of all users who have reviewed at least one show that had a duration of more than 1 hour and a rating of at least 8.",
        "output": "SELECT DISTINCT u.username FROM Users u JOIN User_Reviews ur ON ur.user_id = u.user_id JOIN Reviews r ON r.review_id = ur.review_id JOIN Shows s ON s.show_id = r.show_id WHERE s.duration > '01:00:00' AND r.rating >= 8;",
        "schema": "stand-up_comedy",
        "processed_schema_content": {
            "Shows": [
                "year",
                "show_id",
                "title",
                "description",
                "location",
                "venue_id",
                "duration",
                "network",
                "release_date",
                "Sticks",
                "date_recorded",
                "name",
                "duration_minutes",
                "recorded_year",
                "date"
            ],
            "Users": [
                "email",
                "user_id",
                "username"
            ],
            "User_Reviews": [
                "user_id",
                "review_id"
            ],
            "Reviews": [
                "review_id",
                "performance_id",
                "rating",
                "special_id",
                "show_id"
            ]
        }
    },
    {
        "id": 285,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Teams': ['team_name', 'team_id', 'conference_id', 'division_id', 'last_season', 'first_season', 'city_id', 'division_name', 'conference_name', 'season_id', 'head_coach_id', 'city', 'start_date', 'wins', 'losse', 'home_team_id', 'State', 'Golden', 'Warriors', 'away_team_id', 'coach_id', 'conference', 'playoff_record', 'num_mvp', 'year_founded', 'arena_id', 'player_id', 'year_end', 'winning_team_id', 'end_date', 'num_wins', 'opponent_name', 'Name', 'ID', 'Abbreviation', 'City', 'Color', 'Coach', 'Team_ID', 'Team_Name'], 'Championships': ['team_id', 'season_id', 'championship_id', 'place', 'num_games', 'coach_id', 'playoff_record', 'championships', 'championship_year', 'player_id', 'conference', 'wins', 'win', 'round', 'year', 'finals_mvp_id', 'home_team_id', 'series_id', 'championship_series', 'away_team_id']} and \n# the user question: Find the teams that have made the NBA Finals at least 3 times in a row.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the teams that have made the NBA Finals at least 3 times in a row.",
        "output": "SELECT Teams.team_name FROM Teams JOIN Championships C1 ON Teams.team_id = C1.team_id AND C1.championships = 1 JOIN Championships C2 ON Teams.team_id = C2.team_id AND C2.championships = 1 AND C2.season_id = C1.season_id + 1 JOIN Championships C3 ON Teams.team_id = C3.team_id AND C3.championships = 1 AND C3.season_id = C1.season_id + 2;",
        "schema": "basketball",
        "processed_schema_content": {
            "Teams": [
                "team_name",
                "team_id",
                "conference_id",
                "division_id",
                "last_season",
                "first_season",
                "city_id",
                "division_name",
                "conference_name",
                "season_id",
                "head_coach_id",
                "city",
                "start_date",
                "wins",
                "losse",
                "home_team_id",
                "State",
                "Golden",
                "Warriors",
                "away_team_id",
                "coach_id",
                "conference",
                "playoff_record",
                "num_mvp",
                "year_founded",
                "arena_id",
                "player_id",
                "year_end",
                "winning_team_id",
                "end_date",
                "num_wins",
                "opponent_name",
                "Name",
                "ID",
                "Abbreviation",
                "City",
                "Color",
                "Coach",
                "Team_ID",
                "Team_Name"
            ],
            "Championships": [
                "team_id",
                "season_id",
                "championship_id",
                "place",
                "num_games",
                "coach_id",
                "playoff_record",
                "championships",
                "championship_year",
                "player_id",
                "conference",
                "wins",
                "win",
                "round",
                "year",
                "finals_mvp_id",
                "home_team_id",
                "series_id",
                "championship_series",
                "away_team_id"
            ]
        }
    },
    {
        "id": 286,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['SegmentID', 'ProductName', 'ProductID', 'CompanyID', 'UnitsInStock', 'UnitPrice', 'Category', 'Price', 'Cost', 'CategoryID', 'CurrentInventoryLevel', 'UnitCost', 'Description', 'Discontinued', 'CategoryName', 'SupplierID', 'CostPrice', 'ReorderPoint', 'DiscontinuedDate', 'SubcategoryID', 'SalesPrice', 'QuantityOnHand', 'PromotionID']} and \n# the user question: Retrieve the list of products and their prices, where the product price is greater than the average price of all products, sorted by product price in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the list of products and their prices, where the product price is greater than the average price of all products, sorted by product price in descending order:",
        "output": "SELECT Product.ProductName, Product.Price FROM Product WHERE Product.Price > (SELECT AVG(Price) FROM Product) ORDER BY Product.Price DESC;",
        "schema": "business_strategy",
        "processed_schema_content": {
            "Product": [
                "SegmentID",
                "ProductName",
                "ProductID",
                "CompanyID",
                "UnitsInStock",
                "UnitPrice",
                "Category",
                "Price",
                "Cost",
                "CategoryID",
                "CurrentInventoryLevel",
                "UnitCost",
                "Description",
                "Discontinued",
                "CategoryName",
                "SupplierID",
                "CostPrice",
                "ReorderPoint",
                "DiscontinuedDate",
                "SubcategoryID",
                "SalesPrice",
                "QuantityOnHand",
                "PromotionID"
            ]
        }
    },
    {
        "id": 287,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Volume': ['series_id', 'id', 'title', 'publisher_id', 'issue_count', 'volume_id', 'publication_date', 'publication_year', 'release_date', 'price', 'format'], 'Series': ['publisher_id', 'title', 'id', 'universe', 'start_date', 'main_protagonist_id', 'rating'], 'Publisher': ['name', 'id', 'country', 'Image', 'Comics'], 'Creator': ['name', 'id', 'Lee', 'Jim', 'Fabry', 'Glenn', 'McKean'], 'Creator_Appearance': ['creator_id', 'issue_id', 'series_id', 'role', 'volume_id']} and \n# the user question: Find the names of all publishers that have published issues that have been illustrated by Frank Frazetta.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all publishers that have published issues that have been illustrated by Frank Frazetta.",
        "output": "SELECT DISTINCT p.name FROM Publisher p JOIN Series s ON p.id = s.publisher_id JOIN Volume v ON s.id = v.series_id JOIN Issue i ON v.id = i.volume_id JOIN Creator_Appearance ca ON i.id = ca.issue_id JOIN Creator c ON ca.creator_id = c.id AND c.name = 'Frank Frazetta';",
        "schema": "graphic_novels",
        "processed_schema_content": {
            "Issue": [
                "volume_id",
                "id",
                "title",
                "number",
                "release_date",
                "published_year",
                "publication_date",
                "series_id",
                "publication_year",
                "page_count",
                "sales",
                "has_variant_cover",
                "cover_price",
                "cover_date",
                "cover_art_id",
                "variant_cover"
            ],
            "Volume": [
                "series_id",
                "id",
                "title",
                "publisher_id",
                "issue_count",
                "volume_id",
                "publication_date",
                "publication_year",
                "release_date",
                "price",
                "format"
            ],
            "Series": [
                "publisher_id",
                "title",
                "id",
                "universe",
                "start_date",
                "main_protagonist_id",
                "rating"
            ],
            "Publisher": [
                "name",
                "id",
                "country",
                "Image",
                "Comics"
            ],
            "Creator": [
                "name",
                "id",
                "Lee",
                "Jim",
                "Fabry",
                "Glenn",
                "McKean"
            ],
            "Creator_Appearance": [
                "creator_id",
                "issue_id",
                "series_id",
                "role",
                "volume_id"
            ]
        }
    },
    {
        "id": 288,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'classes': ['class_id', 'day', 'instructor_id', 'name', 'location', 'date', 'start_time', 'student_id', 'location_id'], 'techniques': ['technique_id', 'name', 'difficulty_level'], 'technique_training_sessions': ['technique_id', 'repetitions', 'training_session_id', 'class_id', 'instructor_id', 'duration_minutes'], 'class_attendance': ['num_enrolled', 'class_id', 'num_attended', 'last_attendance_date', 'student_id']} and \n# the user question: Find the names of all classes that have been taught using a technique with the word \"Chen\" in the name and have had an attendance rate of at least 80%:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all classes that have been taught using a technique with the word \"Chen\" in the name and have had an attendance rate of at least 80%:",
        "output": "SELECT DISTINCT classes.name FROM classes INNER JOIN class_attendance ON classes.class_id = class_attendance.class_id AND (class_attendance.num_attended / class_attendance.num_enrolled) >= 0.8 INNER JOIN technique_training_sessions ON classes.class_id = technique_training_sessions.class_id INNER JOIN techniques ON technique_training_sessions.technique_id = techniques.technique_id AND techniques.name LIKE '%Chen%';",
        "schema": "tai_chi",
        "processed_schema_content": {
            "classes": [
                "class_id",
                "day",
                "instructor_id",
                "name",
                "location",
                "date",
                "start_time",
                "student_id",
                "location_id"
            ],
            "techniques": [
                "technique_id",
                "name",
                "difficulty_level"
            ],
            "technique_training_sessions": [
                "technique_id",
                "repetitions",
                "training_session_id",
                "class_id",
                "instructor_id",
                "duration_minutes"
            ],
            "class_attendance": [
                "num_enrolled",
                "class_id",
                "num_attended",
                "last_attendance_date",
                "student_id"
            ]
        }
    },
    {
        "id": 290,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Authors': ['first_name', 'author_id', 'last_name', 'nationality', 'author_name', 'author_city', 'AuthorID', 'AuthorName'], 'Order_Items': ['price', 'quantity', 'order_id', 'book_id', 'customer_id', 'publisher_id', 'is_returned', 'product_id', 'is_delivered', 'total_price', 'order_date']} and \n# the user question: Retrieve the titles and authors of books that have been ordered at least 3 times.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the titles and authors of books that have been ordered at least 3 times.",
        "output": "SELECT b.title, CONCAT(a.first_name, ' ', a.last_name) AS author FROM Books b JOIN Authors a ON b.author_id = a.author_id WHERE b.book_id IN ( SELECT oi.book_id FROM Order_Items oi GROUP BY oi.book_id HAVING COUNT(*) >= 3 ) GROUP BY b.book_id;",
        "schema": "marketing_books",
        "processed_schema_content": {
            "Books": [
                "book_id",
                "title",
                "publisher_id",
                "publication_date",
                "author_id",
                "price",
                "publication_year",
                "publisher",
                "stock",
                "genre",
                "series",
                "year_published",
                "release_date",
                "word_count",
                "avg_rating",
                "A001",
                "genre_id",
                "stock_count",
                "category_id",
                "book_title",
                "rating",
                "available_for_purchase",
                "BookID",
                "BookTitle",
                "PublicationYear",
                "PublisherID",
                "Price"
            ],
            "Authors": [
                "first_name",
                "author_id",
                "last_name",
                "nationality",
                "author_name",
                "author_city",
                "AuthorID",
                "AuthorName"
            ],
            "Order_Items": [
                "price",
                "quantity",
                "order_id",
                "book_id",
                "customer_id",
                "publisher_id",
                "is_returned",
                "product_id",
                "is_delivered",
                "total_price",
                "order_date"
            ]
        }
    },
    {
        "id": 291,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Volume': ['series_id', 'id', 'title', 'publisher_id', 'issue_count', 'volume_id', 'publication_date', 'publication_year', 'release_date', 'price', 'format'], 'Series': ['publisher_id', 'title', 'id', 'universe', 'start_date', 'main_protagonist_id', 'rating'], 'Publisher': ['name', 'id', 'country', 'Image', 'Comics'], 'Review': ['rating', 'issue_id', 'id', 'user_id'], 'User': ['username', 'id'], 'User_Review': ['user_id', 'review_id', 'id']} and \n# the user question: Find the names of all users who have written reviews for issues that have been published by publishers based in the United Kingdom and have also given a rating of 4 or higher to issues that have been published by publishers based in the United States.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all users who have written reviews for issues that have been published by publishers based in the United Kingdom and have also given a rating of 4 or higher to issues that have been published by publishers based in the United States.",
        "output": "SELECT DISTINCT User.username FROM User JOIN User_Review ON User.id = User_Review.user_id JOIN Review ON User_Review.review_id = Review.id JOIN Issue i1 ON Review.issue_id = i1.id JOIN Volume v1 ON i1.volume_id = v1.id JOIN Series s1 ON v1.series_id = s1.id JOIN Publisher p1 ON s1.publisher_id = p1.id AND p1.country = 'United Kingdom' WHERE User.id IN ( SELECT DISTINCT User.id FROM User JOIN User_Review ON User.id = User_Review.user_id JOIN Review ON User_Review.review_id = Review.id JOIN Issue i2 ON Review.issue_id = i2.id JOIN Volume v2 ON i2.volume_id = v2.id JOIN Series s2 ON v2.series_id = s2.id JOIN Publisher p2 ON s2.publisher_id = p2.id AND p2.country = 'United States' WHERE Review.rating >= 4 );",
        "schema": "graphic_novels",
        "processed_schema_content": {
            "Issue": [
                "volume_id",
                "id",
                "title",
                "number",
                "release_date",
                "published_year",
                "publication_date",
                "series_id",
                "publication_year",
                "page_count",
                "sales",
                "has_variant_cover",
                "cover_price",
                "cover_date",
                "cover_art_id",
                "variant_cover"
            ],
            "Volume": [
                "series_id",
                "id",
                "title",
                "publisher_id",
                "issue_count",
                "volume_id",
                "publication_date",
                "publication_year",
                "release_date",
                "price",
                "format"
            ],
            "Series": [
                "publisher_id",
                "title",
                "id",
                "universe",
                "start_date",
                "main_protagonist_id",
                "rating"
            ],
            "Publisher": [
                "name",
                "id",
                "country",
                "Image",
                "Comics"
            ],
            "Review": [
                "rating",
                "issue_id",
                "id",
                "user_id"
            ],
            "User": [
                "username",
                "id"
            ],
            "User_Review": [
                "user_id",
                "review_id",
                "id"
            ]
        }
    },
    {
        "id": 292,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Platforms': ['platform_id', 'game_id', 'online_players'], 'Platforms': ['platform_id', 'platform_name', 'platform_release_date', 'platform_manufacturer', 'platform_publisher', 'platform_release_year', 'manufacturer_id'], 'Game_Ratings': ['rating_id', 'game_id'], 'Ratings': ['rating_name', 'rating_id', 'rating_value']} and \n# the user question: Find the names of all games that have a rating higher than \"M (Mature)\" and have a platform with a name containing \"PlayStation\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all games that have a rating higher than \"M (Mature)\" and have a platform with a name containing \"PlayStation\".",
        "output": "SELECT DISTINCT Games.game_title FROM Games INNER JOIN Game_Ratings ON Games.game_id = Game_Ratings.game_id INNER JOIN Ratings ON Game_Ratings.rating_id = Ratings.rating_id INNER JOIN Game_Platforms ON Games.game_id = Game_Platforms.game_id INNER JOIN Platforms ON Game_Platforms.platform_id = Platforms.platform_id WHERE Ratings.rating_name > 'M (Mature)' AND Platforms.platform_name LIKE '%PlayStation%';",
        "schema": "game_design",
        "processed_schema_content": {
            "Games": [
                "game_id",
                "game_title",
                "game_publisher",
                "game_release_date",
                "game_developer"
            ],
            "Game_Platforms": [
                "platform_id",
                "game_id",
                "online_players"
            ],
            "Platforms": [
                "platform_id",
                "platform_name",
                "platform_release_date",
                "platform_manufacturer",
                "platform_publisher",
                "platform_release_year",
                "manufacturer_id"
            ],
            "Game_Ratings": [
                "rating_id",
                "game_id"
            ],
            "Ratings": [
                "rating_name",
                "rating_id",
                "rating_value"
            ]
        }
    },
    {
        "id": 293,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Coaches': ['coach_id', 'last_name', 'first_name', 'hire_date', 'email']} and \n# the user question: Show the name and email of all coaches who were hired before 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Show the name and email of all coaches who were hired before 2022.",
        "output": "SELECT first_name, last_name, email FROM Coaches WHERE hire_date < '2022-01-01';",
        "schema": "athletic_training",
        "processed_schema_content": {
            "Coaches": [
                "coach_id",
                "last_name",
                "first_name",
                "hire_date",
                "email"
            ]
        }
    },
    {
        "id": 295,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 largest countries in the \"North America\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and area of the 5 largest countries in the \"North America\" region:",
        "output": "SELECT name, area FROM Country WHERE region = 'North America' ORDER BY area DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        }
    },
    {
        "id": 296,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_price', 'product_name', 'product_id', 'category_id', 'unit_price', 'quantity_in_stock', 'supplier_id', 'stock_quantity', 'category', 'unit_cost', 'reorder_level', 'etching_method', 'name', 'in_stock', 'price', 'discount', 'Product', 'last_reorder_date', 'collection_id', 'id']} and \n# the user question: Return the name and price of the most expensive product in the \"Home Decor\" category.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Return the name and price of the most expensive product in the \"Home Decor\" category.",
        "output": "SELECT name, price FROM products WHERE category = 'Home Decor' ORDER BY price DESC LIMIT 1;",
        "schema": "glass_etching",
        "processed_schema_content": {
            "products": [
                "product_price",
                "product_name",
                "product_id",
                "category_id",
                "unit_price",
                "quantity_in_stock",
                "supplier_id",
                "stock_quantity",
                "category",
                "unit_cost",
                "reorder_level",
                "etching_method",
                "name",
                "in_stock",
                "price",
                "discount",
                "Product",
                "last_reorder_date",
                "collection_id",
                "id"
            ]
        }
    },
    {
        "id": 298,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Publisher': ['publisher_id', 'name', 'address', 'phone_number', 'publisher_name', 'HarperCollins', 'id'], 'Book': ['book_id', 'title', 'isbn', 'publisher_id', 'publication_date', 'rating', 'price', 'publication_year', 'author_id', 'publisher', 'author', 'weight', 'author_gender', 'language', 'author_name', 'book_title', 'format_id', 'page_count', 'id', 'num_pages'], 'Review': ['review_id', 'book_id', 'reviewer_id', 'rating', 'review_text', 'customer_id', 'date'], 'Customer': ['customer_id', 'first_name', 'last_name', 'email', 'address', 'phone_number', 'zip_code', 'country_id']} and \n# the user question: Find the name and email address of the customer who has written the most reviews for books published by Vintage Books.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and email address of the customer who has written the most reviews for books published by Vintage Books.",
        "output": "SELECT Customer.first_name || ' ' || Customer.last_name AS customer_name, Customer.email FROM Customer JOIN Review ON Customer.customer_id = Review.customer_id JOIN Book ON Review.book_id = Book.book_id JOIN Publisher ON Book.publisher_id = Publisher.publisher_id WHERE Publisher.name = 'Vintage Books' GROUP BY Customer.customer_id ORDER BY COUNT(Review.review_id) DESC LIMIT 1;",
        "schema": "business_books",
        "processed_schema_content": {
            "Publisher": [
                "publisher_id",
                "name",
                "address",
                "phone_number",
                "publisher_name",
                "HarperCollins",
                "id"
            ],
            "Book": [
                "book_id",
                "title",
                "isbn",
                "publisher_id",
                "publication_date",
                "rating",
                "price",
                "publication_year",
                "author_id",
                "publisher",
                "author",
                "weight",
                "author_gender",
                "language",
                "author_name",
                "book_title",
                "format_id",
                "page_count",
                "id",
                "num_pages"
            ],
            "Review": [
                "review_id",
                "book_id",
                "reviewer_id",
                "rating",
                "review_text",
                "customer_id",
                "date"
            ],
            "Customer": [
                "customer_id",
                "first_name",
                "last_name",
                "email",
                "address",
                "phone_number",
                "zip_code",
                "country_id"
            ]
        }
    }
]