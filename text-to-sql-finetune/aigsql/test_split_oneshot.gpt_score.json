{
    "id": 33055,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'patient': ['email', 'phone_number', 'patient_id', 'name'], 'symptom': ['symptom_id', 'name'], 'patient_symptom': ['symptom_id', 'patient_id']}. \n# the user question is: Find the names and contact information of all patients who have reported symptoms of irritable bowel syndrome:. \n#SQL query: SELECT patient.name, patient.phone_number, patient.email FROM patient JOIN patient_symptom ON patient.patient_id = patient_symptom.patient_id JOIN symptom ON patient_symptom.symptom_id = symptom.symptom_id WHERE symptom.name = 'Irritable bowel syndrome';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'product_specs': ['weight', 'product_id', 'height', 'width', 'length', 'depth', 'Leather', 'material', 'color'], 'product_inventory': ['product_id', 'quantity_in_stock']} and \n# the user question: Retrieve the name and quantity in stock of all products that have a material of wood:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and quantity in stock of all products that have a material of wood:",
    "output": "SELECT p.name, pi.quantity_in_stock FROM products p JOIN product_inventory pi ON p.product_id = pi.product_id JOIN product_specs ps ON p.product_id = ps.product_id WHERE ps.material = 'wood';",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "product_specs": [
            "weight",
            "product_id",
            "height",
            "width",
            "length",
            "depth",
            "Leather",
            "material",
            "color"
        ],
        "product_inventory": [
            "product_id",
            "quantity_in_stock"
        ]
    },
    "response_text": "SELECT products.name, product_inventory.quantity_in_stock \nFROM products \nJOIN product_specs \nON products.product_id = product_specs.product_id \nJOIN product_inventory \nON products.product_id = product_inventory.product_id \nWHERE product_specs.material = 'wood';",
    "prompt_token_number": 351,
    "response_token_number": 49
},
{
    "id": 33056,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Patient': ['patient_id', 'last_name', 'first_name', 'date_of_birth'], 'Insurance': ['insurance_provider', 'patient_id', 'policy_number', 'insurance_id', 'insurance_provider_id', 'coverage_type_id'], 'Appointment': ['chiropractor_id', 'patient_id', 'appointment_date_time', 'appointment_id', 'insurance_id'], 'Chiropractor': ['first_name', 'last_name', 'chiropractor_id'], 'Prescriptions': ['prescription_name', 'appointment_id', 'prescription_category', 'patient_id', 'medication_id']}. \n# the user question is: Find the names of all chiropractors who have had appointments with patients who have an insurance policy number starting with '78' and have also prescribed an anti-inflammatory drug:. \n#SQL query: SELECT DISTINCT c.first_name, c.last_name FROM Chiropractor c INNER JOIN Appointment a ON c.chiropractor_id = a.chiropractor_id INNER JOIN Patient p ON a.patient_id = p.patient_id INNER JOIN Insurance i ON p.patient_id = i.patient_id INNER JOIN Prescriptions pr ON a.appointment_id = pr.appointment_id WHERE i.policy_number LIKE '78%' AND pr.prescription_category = 'Anti-Inflammatory';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products that have been reviewed at least once, sorted by average rating in descending order:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and average rating of all products that have been reviewed at least once, sorted by average rating in descending order:",
    "output": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id HAVING COUNT(r.review_id) > 0 ORDER BY avg_rating DESC;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT p.name, AVG(r.rating) as average_rating \nFROM products p \nINNER JOIN reviews r ON p.product_id = r.product_id \nGROUP BY p.name \nHAVING COUNT(r.review_id) >= 1 \nORDER BY average_rating DESC;",
    "prompt_token_number": 472,
    "response_token_number": 51
},
{
    "id": 33057,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'appointments': ['appointment_id', 'date_time', 'client_id', 'artist_id', 'invoice_id', 'total_cost', 'appointment_date', 'discount_percentage', 'photoshoot_id', 'duration', 'price', 'avg_rating', 'quantity', 'status', 'reschedule_id', 'location_id', 'appointment_start_time', 'appointment_end_time', 'order_id', 'makeup_artist_id'], 'artists': ['artist_id', 'first_name', 'last_name', 'email', 'phone_number', 'user_id', 'city', 'quantity', 'price', 'artist_name', 'location_lat', 'location_lng', 'name', 'brand_id', 'experience_years', 'id', 'phone'], 'appointment_services': ['appointment_service_id', 'appointment_id', 'service_id', 'quantity', 'service_name', 'artist_id', 'price', 'location_id', 'duration', 'rating'], 'reviews': ['rating', 'appointment_id', 'review_id', 'product_id']}. \n# the user question is: Find the artists who have received the highest ratings across all services:. \n#SQL query: SELECT artists.name, AVG(reviews.rating) AS avg_rating FROM artists INNER JOIN appointment_services ON artists.artist_id = appointment_services.artist_id INNER JOIN appointments ON appointment_services.appointment_id = appointments.appointment_id AND appointments.status = 'completed' INNER JOIN reviews ON appointments.appointment_id = reviews.appointment_id GROUP BY artists.artist_id ORDER BY avg_rating DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of all products that have been added to the catalog in the past month:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of all products that have been added to the catalog in the past month:",
    "output": "SELECT p.name, p.price FROM products p WHERE p.added_to_catalog >= DATE('now', '-1 month');",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT name, price FROM products WHERE added_to_catalog >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);",
    "prompt_token_number": 492,
    "response_token_number": 22
},
{
    "id": 33059,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'celestial_bodies': ['radius', 'mass', 'name', 'type', 'number_of_moons', 'distance_from_sun', 'id', 'distance_from_earth', 'orbital_period', 'diameter', 'orbiting_body_id', 'average_surface_temperature', 'surface_temperature', 'perihelion_distance', 'period', 'semimajor_axis', 'redshift', 'velocity', 'luminosity', 'schwarzschild_radius', 'eccentricity', 'aphelion_distance', 'spin_period', 'semi_major_axis', 'surface_gravity', 'temperature', 'magnitude', 'accretion_disk_temperature', 'rotation_period', 'obliquity', 'pulse_period', 'peak_absolute_magnitude', 'albedo', 'apparent_magnitude', 'absolute_magnitude', 'spectral_type', 'discovery_year', 'spectral_class', 'distance_from_star', 'discovery_method_id', 'equilibrium_temperature', 'metallicity', 'age', 'effective_temperature', 'atmospheric_composition', 'inclination', 'parallax', 'rotation_velocity', 'axial_tilt', 'orbital_inclination', 'density', 'rotational_velocity', 'magnetic_field_strength', 'composition', 'rotational_period', 'spin', 'distance_from_galactic_center', 'binary_system', 'constellation', 'stellar_evolution_stage', 'star_cluster_type', 'galaxy', 'orbital_eccentricity', 'star_spectral_type', 'orbital_period_unit', 'diameter_unit', 'discovery_method', 'pulse_period_unit', 'distance_unit', 'radius_unit', 'avg_temperature', 'temperature_unit', 'aphelion_unit', 'perihelion_unit', 'event_horizon_unit', 'event_horizon_radius', 'luminosity_distance', 'orbit_type', 'equatorial_diameter', 'gravity_unit', 'escape_velocity', 'angle_unit', 'surface_area', 'density_unit', 'parent_body_id', 'atmospheric_pressure', 'luminosity_class', 'inner_habitable_zone', 'outer_habitable_zone', 'period_unit', 'classification', 'pressure_unit', 'surface_pressure', 'orbiting', 'distance', 'proper_motion', 'proper_motion_unit', 'mean_radius', 'mass_unit', 'temperature_range', 'Gas', 'Giant', 'brightness_temperature', 'parallax_unit', 'metallicity_unit', 'magnetic_field_unit', 'spin_parameter', 'orbiting_id', 'stellar_mass', 'stage', 'radial_velocity', 'host_star', 'accretion_rate', 'core_type']}. \n# the user question is: Retrieve the name and mass of all celestial bodies that have a type of 'Neutron star' and a radius less than 20 km.. \n#SQL query: SELECT name, mass FROM celestial_bodies WHERE type = 'Neutron star' AND radius < 20;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of the most expensive product in the catalog:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of the most expensive product in the catalog:",
    "output": "SELECT name, price FROM products WHERE price = (SELECT MAX(price) FROM products);",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT name, price FROM products ORDER BY price DESC LIMIT 1;",
    "prompt_token_number": 784,
    "response_token_number": 14
},
{
    "id": 33061,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Attendee': ['attendee_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'date_of_birth', 'job_title', 'city', 'age', 'email'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID'], 'Payment': ['payment_id', 'registration_id', 'payment_date', 'amount', 'credit_card_id', 'payment_method_id', 'payment_type'], 'Event_Session': ['session_type_id', 'event_id', 'session_id', 'speaker_id', 'rating', 'price'], 'Session_Type': ['session_type_name', 'session_type_id'], 'Event_Session_Attendee': ['registration_id', 'session_id', 'event_id', 'attendee_id', 'rating'], 'Credit_Card': ['card_type', 'credit_card_id']}. \n# the user question is: What are the names and email addresses of attendees who have registered for events with a \"Case Study Presentation\" session type and have also made a payment using a Visa card or a Mastercard card?. \n#SQL query: SELECT Attendee.first_name, Attendee.last_name, Attendee.email_address FROM Attendee INNER JOIN Registration ON Attendee.attendee_id = Registration.attendee_id INNER JOIN Payment ON Registration.registration_id = Payment.registration_id INNER JOIN Credit_Card ON Payment.credit_card_id = Credit_Card.credit_card_id INNER JOIN Event_Session_Attendee ON Registration.registration_id = Event_Session_Attendee.registration_id INNER JOIN Event_Session ON Event_Session_Attendee.session_id = Event_Session.session_id INNER JOIN Session_Type ON Event_Session.session_type_id = Session_Type.session_type_id WHERE Session_Type.session_type_name = 'Case Study Presentation' AND (Credit_Card.card_type = 'Visa' OR Credit_Card.card_type = 'Mastercard') GROUP BY Attendee.first_name, Attendee.last_name, Attendee.email_address;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products that have an average rating of at least 4.5:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and average rating of all products that have an average rating of at least 4.5:",
    "output": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id HAVING AVG(r.rating) >= 4.5;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT products.name, AVG(reviews.rating) as average_rating FROM products INNER JOIN reviews on products.product_id = reviews.product_id GROUP BY products.name HAVING AVG(reviews.rating) >= 4.5;",
    "prompt_token_number": 646,
    "response_token_number": 42
},
{
    "id": 33062,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'tasks': ['created_at', 'project_id', 'task_id', 'user_id', 'due_date', 'completed', 'started_at', 'priority', 'completion_date', 'completed_date', 'start_date', 'created_date', 'creator_id', 'assignee_id', 'completed_at', 'name', 'tags', 'assigner_id', 'assigned_by_id', 'category'], 'users': ['user_id', 'name', 'email', 'last_login_attempt', 'total_tasks', 'completed_tasks', 'assignee_id', 'role', 'last_login', 'first_name', 'last_name', 'last_login_date', 'registration_date', 'password', 'job_title', 'hire_date'], 'settings': ['name', 'en', 'user_id', 'value', 'setting_id']}. \n# the user question is: Retrieve the name and email of all users who have not set their theme preference and have completed at least one task in project 2:. \n#SQL query: SELECT u.name, u.email FROM users u JOIN tasks t ON u.user_id = t.user_id AND t.project_id = 2 AND t.completed = 1 LEFT JOIN settings s ON u.user_id = s.user_id AND s.name = 'theme' WHERE s.setting_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'product_inventory': ['product_id', 'quantity_in_stock']} and \n# the user question: Retrieve the name and quantity in stock of all products that have a quantity in stock of less than 10:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and quantity in stock of all products that have a quantity in stock of less than 10:",
    "output": "SELECT p.name, pi.quantity_in_stock FROM products p JOIN product_inventory pi ON p.product_id = pi.product_id WHERE pi.quantity_in_stock < 10;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "product_inventory": [
            "product_id",
            "quantity_in_stock"
        ]
    },
    "response_text": "SELECT p.name, p.quantity_in_stock FROM products p WHERE p.quantity_in_stock < 10;",
    "prompt_token_number": 463,
    "response_token_number": 20
},
{
    "id": 33063,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'loan': ['return_date', 'loan_date', 'artwork_id', 'lender_id', 'location_id', 'start_date', 'artwork_location_id'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']}. \n# the user question is: Find the titles and mediums of all artwork in the \"Museum of Fine Arts, Houston\" that were created by \"Vincent van Gogh\" and are not currently on loan.. \n#SQL query: SELECT a.title, a.medium FROM artwork AS a INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS l ON al.location_id = l.location_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id WHERE ar.first_name = 'Vincent' AND ar.last_name = 'van Gogh' AND l.name = 'Museum of Fine Arts, Houston' AND al.end_date IS NULL AND a.artwork_id NOT IN (SELECT artwork_id FROM loan WHERE return_date IS NULL);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and total sales of all products that have been sold in the past month, sorted by total sales in descending order:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total sales of all products that have been sold in the past month, sorted by total sales in descending order:",
    "output": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_sales FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date >= DATE('now', '-1 month') GROUP BY p.product_id ORDER BY total_sales DESC;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_sales\nFROM products AS p\nJOIN order_items AS oi ON p.product_id = oi.product_id\nJOIN orders AS o ON oi.order_id = o.order_id\nWHERE o.date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)\nGROUP BY p.product_id\nORDER BY total_sales DESC;",
    "prompt_token_number": 729,
    "response_token_number": 75
},
{
    "id": 33064,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Player': ['player_id', 'player_name', 'height', 'team_id', 'position_id', 'age'], 'Player_Statistics': ['player_id', 'assists', 'kills', 'match_id', 'blocks', 'aces', 'digs', 'set_number', 'team2_score', 'team1_score', 'total_blocks', 'total_attempts']}. \n# the user question is: Find the players who have achieved a 'Triple Triple' (triple digits in kills, assists, and digs) in a single match. \n#SQL query: SELECT Player.player_name FROM Player JOIN Player_Statistics ON Player.player_id = Player_Statistics.player_id WHERE Player_Statistics.kills >= 100 AND Player_Statistics.assists >= 100 AND Player_Statistics.digs >= 100;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of the 5 cheapest products in the catalog:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of the 5 cheapest products in the catalog:",
    "output": "SELECT name, price FROM products ORDER BY price ASC LIMIT 5;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT name, price FROM products ORDER BY price ASC LIMIT 5;",
    "prompt_token_number": 344,
    "response_token_number": 14
},
{
    "id": 33065,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'trains': ['train_id', 'train_name', 'operator_id', 'max_speed', 'capacity', 'train_type', 'train_number', 'min_speed', 'avg_speed', 'coach_count', 'departure_time', 'ticket_price', 'route_id', 'departure_station', 'seats_available', 'arrival_station', 'arrival_time', 'start_station', 'end_station', 'speed', 'Speed', 'High', 'price', 'first_class_seats', 'num_passengers', 'departure_date', 'journey_time'], 'train_routes': ['route_id', 'start_station', 'end_station', 'distance', 'duration', 'train_id', 'departure_time', 'arrival_time', 'route_name', 'speed', 'departure_date', 'schedule_id'], 'tickets': ['ticket_id', 'train_id', 'route_id', 'departure_station_id', 'arrival_station_id', 'passenger_name', 'seat_number', 'fare_amount', 'departure_time', 'user_id', 'arrival_time', 'ticket_price', 'cancel_date', 'seat_id', 'price', 'ticket_price_euros', 'purchase_date', 'ticket_name', 'dep_station', 'dep_date', 'passengers', 'arr_station']}. \n# the user question is: Find the total revenue generated by the high-speed train from Tokyo to Osaka in the last month.. \n#SQL query: SELECT SUM(tickets.ticket_price) AS total_revenue FROM tickets INNER JOIN train_routes ON tickets.route_id = train_routes.route_id INNER JOIN trains ON train_routes.train_id = trains.train_id WHERE train_routes.start_station = 'Tokyo' AND train_routes.end_station = 'Osaka' AND trains.train_type = 'High Speed' AND DATE(tickets.departure_time) BETWEEN DATE('now', '-1 month') AND DATE('now')\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and total sales of all products that have been sold more than 500 times, sorted by total sales in descending order:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total sales of all products that have been sold more than 500 times, sorted by total sales in descending order:",
    "output": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_sales FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.order_item_id) > 500 ORDER BY total_sales DESC;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT products.name, SUM(order_items.quantity * order_items.price) AS total_sales FROM products INNER JOIN order_items ON products.product_id = order_items.product_id GROUP BY products.name HAVING SUM(order_items.quantity) > 500 ORDER BY total_sales DESC",
    "prompt_token_number": 597,
    "response_token_number": 50
},
{
    "id": 33066,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'clients': ['client_id', 'first_name', 'last_name', 'email', 'phone_number', 'user_id', 'total_price', 'total_spent', 'item_price', 'quantity', 'city', 'budget', 'state', 'price', 'location', 'name', 'client_name', 'date_of_birth', 'age', 'loyalty_program', 'skin_type'], 'appointments': ['appointment_id', 'date_time', 'client_id', 'artist_id', 'invoice_id', 'total_cost', 'appointment_date', 'discount_percentage', 'photoshoot_id', 'duration', 'price', 'avg_rating', 'quantity', 'status', 'reschedule_id', 'location_id', 'appointment_start_time', 'appointment_end_time', 'order_id', 'makeup_artist_id']}. \n# the user question is: Find the total number of appointments booked by each client:. \n#SQL query: SELECT clients.client_id, clients.first_name, clients.last_name, COUNT(appointments.appointment_id) AS total_appointments FROM clients LEFT JOIN appointments ON clients.client_id = appointments.client_id GROUP BY clients.client_id ORDER BY total_appointments DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products that have been reviewed at least 10 times, sorted by average rating in descending order:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and average rating of all products that have been reviewed at least 10 times, sorted by average rating in descending order:",
    "output": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id HAVING COUNT(r.review_id) >= 10 ORDER BY avg_rating DESC;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT products.name, AVG(reviews.rating) as Average_Rating \nFROM products \nJOIN reviews ON products.product_id = reviews.product_id \nGROUP BY products.product_id, products.name \nHAVING COUNT(reviews.review_id) >= 10 \nORDER BY Average_Rating DESC;",
    "prompt_token_number": 459,
    "response_token_number": 56
},
{
    "id": 33067,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'appointments': ['appointment_id', 'therapist_id', 'appointment_date', 'patient_id', 'end_time', 'start_time', 'session_duration_minutes', 'session_cost', 'satisfaction_rating', 'is_missed', 'sessions_per_week', 'session_length_minutes', 'start_date', 'attended', 'end_date', 'therapy_id'], 'patients': ['email', 'phone_number', 'last_name', 'patient_id', 'first_name', 'date_of_birth', 'gender', 'birthdate', 'start_date', 'session_count', 'age', 'therapy_start_date', 'birth_date']}. \n# the user question is: Find the patients who have missed the most appointments.. \n#SQL query: SELECT p.first_name || ' ' || p.last_name AS patient_name, COUNT(*) AS num_missed_appointments FROM patients p JOIN appointments a ON a.patient_id = p.patient_id WHERE a.attended = 0 GROUP BY p.patient_id ORDER BY num_missed_appointments DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'product_inventory': ['product_id', 'quantity_in_stock']} and \n# the user question: Retrieve the name and quantity in stock of all products that have a quantity in stock of more than 100:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and quantity in stock of all products that have a quantity in stock of more than 100:",
    "output": "SELECT p.name, pi.quantity_in_stock FROM products p JOIN product_inventory pi ON p.product_id = pi.product_id WHERE pi.quantity_in_stock > 100;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "product_inventory": [
            "product_id",
            "quantity_in_stock"
        ]
    },
    "response_text": "SELECT p.name, pi.quantity_in_stock FROM products p JOIN product_inventory pi ON p.product_id = pi.product_id WHERE pi.quantity_in_stock > 100;",
    "prompt_token_number": 407,
    "response_token_number": 32
},
{
    "id": 33068,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Tasks': ['start_date', 'task_name', 'due_date', 'end_date', 'task_id', 'priority', 'task_status', 'project_id', 'task_priority_id', 'task_status_id', 'task_start_date', 'task_end_date', 'task_expected_completion_date', 'task_completion_percentage', 'task_estimated_cost', 'task_due_date', 'actual_end_date', 'actual_start_date', 'task_lead_id', 'actual_cost', 'employee_i', 'task_description'], 'Task_Priorities': ['task_priority_id', 'task_priority_name']}. \n# the user question is: List all the tasks that have a start date within the next 7 days and have a priority of \"Urgent\".. \n#SQL query: SELECT DISTINCT t.task_name FROM Tasks t INNER JOIN Task_Priorities tp ON t.task_priority_id = tp.task_priority_id WHERE tp.task_priority_name = 'Urgent' AND (julianday(t.start_date) - julianday('now')) <= 7;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and total sales of all products that have been sold in the past 3 months, sorted by total sales in descending order:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total sales of all products that have been sold in the past 3 months, sorted by total sales in descending order:",
    "output": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_sales FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date >= DATE('now', '-3 months') GROUP BY p.product_id ORDER BY total_sales DESC;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_sales FROM products p\nINNER JOIN order_items oi ON p.product_id = oi.product_id\nINNER JOIN orders o ON oi.order_id = o.order_id\nWHERE o.order_date >= DATE('now', '-3 month')\nGROUP BY p.product_id\nORDER BY total_sales DESC;",
    "prompt_token_number": 491,
    "response_token_number": 71
},
{
    "id": 33071,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Race_Result': ['athlete_id', 'swim_time', 'race_id', 'finish_time', 'rank', 'bike_time', 'run_time'], 'Race': ['race_name', 'race_id', 'Ironman', 'athlete_id', 'event_name', 'distance_run', 'event_id', 'distance_bike', 'distance_swim']}. \n# the user question is: Retrieve the average finish time for each race, along with the event name and race name.. \n#SQL query: SELECT r.event_name, r.race_name, AVG(rr.finish_time) AS avg_finish_time FROM Race_Result rr JOIN Race r ON rr.race_id = r.race_id GROUP BY r.race_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products that have been reviewed at least once, but have an average rating of less than 3.0:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and average rating of all products that have been reviewed at least once, but have an average rating of less than 3.0:",
    "output": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id HAVING COUNT(r.review_id) >= 1 AND AVG(r.rating) < 3.0;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT p.name, AVG(r.rating) AS avg_rating \nFROM reviews r \nJOIN products p ON r.product_id = p.product_id \nGROUP BY p.product_id \nHAVING COUNT(r.review_id) > 0 AND AVG(r.rating) < 3.0;",
    "prompt_token_number": 369,
    "response_token_number": 55
},
{
    "id": 33072,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Groups': ['group_id', 'group_name', 'creation_date', 'focus_area', 'interest_id'], 'Group_Members': ['member_id', 'group_id', 'user_id', 'membership_status'], 'Interests': ['interest_id', 'interest_name', 'Social', 'Political', 'Science'], 'Events': ['event_id', 'event_name', 'event_date', 'location', 'num_participants', 'group_id'], 'Event_Participants': ['participant_id', 'event_id', 'user_id', 'group_id'], 'Group_Interests': ['interest_id', 'group_id']}. \n# the user question is: Retrieve the event names and the number of participants for events organized by groups with interests in 'Sociology of Gender' and 'Sociology of Education' that have more than 500 members. \n#SQL query: SELECT Events.event_name, COUNT(Event_Participants.user_id) AS num_participants FROM Events INNER JOIN Groups ON Events.group_id = Groups.group_id INNER JOIN Group_Interests ON Groups.group_id = Group_Interests.group_id INNER JOIN Interests ON Group_Interests.interest_id = Interests.interest_id INNER JOIN Group_Members ON Groups.group_id = Group_Members.group_id INNER JOIN Event_Participants ON Events.event_id = Event_Participants.event_id WHERE Interests.interest_name IN ('Sociology of Gender', 'Sociology of Education') AND Groups.group_id IN (SELECT group_id FROM Group_Members GROUP BY group_id HAVING COUNT(user_id) > 500) GROUP BY Events.event_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'product_inventory': ['product_id', 'quantity_in_stock']} and \n# the user question: Retrieve the name and quantity in stock of all products that have a quantity in stock of exactly 0:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and quantity in stock of all products that have a quantity in stock of exactly 0:",
    "output": "SELECT p.name, pi.quantity_in_stock FROM products p JOIN product_inventory pi ON p.product_id = pi.product_id WHERE pi.quantity_in_stock = 0;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "product_inventory": [
            "product_id",
            "quantity_in_stock"
        ]
    },
    "response_text": "SELECT products.name, product_inventory.quantity_in_stock FROM products INNER JOIN product_inventory ON products.product_id = product_inventory.product_id WHERE product_inventory.quantity_in_stock = 0;",
    "prompt_token_number": 520,
    "response_token_number": 34
},
{
    "id": 33073,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Modes': ['mode_id', 'game_id'], 'Modes': ['mode_id', 'mode_name', 'mode_type'], 'Game_Developers': ['developer_id', 'game_id'], 'Developers': ['developer_id', 'developer_name']}. \n# the user question is: Find the names of all games that have been developed by \"Blizzard Entertainment\" and have a \"Strategy\" game mode.. \n#SQL query: SELECT DISTINCT Games.game_title FROM Games INNER JOIN Game_Modes ON Games.game_id = Game_Modes.game_id INNER JOIN Modes ON Game_Modes.mode_id = Modes.mode_id INNER JOIN Game_Developers ON Games.game_id = Game_Developers.game_id INNER JOIN Developers ON Game_Developers.developer_id = Developers.developer_id WHERE Developers.developer_name = 'Blizzard Entertainment' AND Modes.mode_name = 'Strategy';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and total sales of all products that have been sold in the past week, sorted by name:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total sales of all products that have been sold in the past week, sorted by name:",
    "output": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_sales FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date >= DATE('now', '-7 days') GROUP BY p.product_id ORDER BY p.name ASC;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT products.name, SUM(order_items.quantity * order_items.price) AS total_sales\nFROM products \nINNER JOIN order_items ON products.product_id = order_items.product_id \nINNER JOIN orders ON order_items.order_id = orders.order_id\nWHERE orders.order_date BETWEEN DATE_SUB(NOW(), INTERVAL 7 DAY) AND NOW()\nGROUP BY products.product_id\nORDER BY products.name;",
    "prompt_token_number": 474,
    "response_token_number": 76
},
{
    "id": 33074,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Polymorphism': ['gene_id', 'position', 'reference_sequence', 'alternate_sequence', 'polymorphism_id', 'frequency'], 'Variation': ['gene_id', 'position', 'variation_type', 'frequency', 'variant_frequency', 'variant_id', 'variant_name', 'Type', 'Gene_ID', 'Frequency', 'ID']}. \n# the user question is: Retrieve the names of all genes that have a polymorphism or variation located between positions 43100000 and 43150000.. \n#SQL query: SELECT Gene.gene_name FROM Gene JOIN Polymorphism ON Gene.gene_id = Polymorphism.gene_id JOIN Variation ON Gene.gene_id = Variation.gene_id WHERE (Polymorphism.position BETWEEN 43100000 AND 43150000) OR (Variation.position BETWEEN 43100000 AND 43150000);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name, description, and price of all products that have a description containing the word \"luxury\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name, description, and price of all products that have a description containing the word \"luxury\":",
    "output": "SELECT name, description, price FROM products WHERE description LIKE '%luxury%';",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT name, description, price FROM products WHERE description LIKE '%luxury%';",
    "prompt_token_number": 433,
    "response_token_number": 16
},
{
    "id": 33076,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Orders': ['order_total', 'customer_id', 'order_date', 'order_id', 'employee_id', 'shipper_id', 'supplier_id', 'shipped_date', 'required_date', 'shipping_cost', 'shipping_refunded', 'quantity', 'unit_price', 'product_id', 'total_amount', 'refund_issued', 'cancelled_date', 'returned_date', 'shipping_date', 'status', 'OrderDate', 'OrderStatus', 'ShippedDate', 'OrderID', 'CustomerID']}. \n# the user question is: Find the number of orders placed each year, grouped by year.. \n#SQL query: SELECT strftime('%Y', order_date) AS year, COUNT(*) AS num_orders FROM Orders GROUP BY year;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'product_inventory': ['product_id', 'quantity_in_stock']} and \n# the user question: Retrieve the name and quantity in stock of all products that have a quantity in stock between 5 and 10, sorted by quantity in stock in ascending order:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and quantity in stock of all products that have a quantity in stock between 5 and 10, sorted by quantity in stock in ascending order:",
    "output": "SELECT p.name, pi.quantity_in_stock FROM products p JOIN product_inventory pi ON p.product_id = pi.product_id WHERE pi.quantity_in_stock BETWEEN 5 AND 10 ORDER BY pi.quantity_in_stock ASC;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "product_inventory": [
            "product_id",
            "quantity_in_stock"
        ]
    },
    "response_text": "SELECT name, quantity_in_stock FROM products WHERE quantity_in_stock BETWEEN 5 AND 10 ORDER BY quantity_in_stock ASC;",
    "prompt_token_number": 361,
    "response_token_number": 25
},
{
    "id": 33077,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Volume': ['series_id', 'id', 'title', 'publisher_id', 'issue_count', 'volume_id', 'publication_date', 'publication_year', 'release_date', 'price', 'format'], 'Series': ['publisher_id', 'title', 'id', 'universe', 'start_date', 'main_protagonist_id', 'rating'], 'Review': ['rating', 'issue_id', 'id', 'user_id'], 'User': ['username', 'id'], 'User_Review': ['user_id', 'review_id', 'id']}. \n# the user question is: Find the names of all users who have given a rating of 4 or higher to at least one issue in both the 'The Walking Dead' and 'Saga' series.. \n#SQL query: SELECT DISTINCT User.username FROM User JOIN User_Review ur1 ON User.id = ur1.user_id JOIN Review r1 ON ur1.review_id = r1.id JOIN Issue i1 ON r1.issue_id = i1.id JOIN Volume v1 ON i1.volume_id = v1.id JOIN Series s1 ON v1.series_id = s1.id WHERE s1.title IN ('The Walking Dead', 'Saga') AND r1.rating >= 4 GROUP BY User.id HAVING COUNT(DISTINCT s1.title) = 2;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products that have an average rating of at least 4.0:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and average rating of all products that have an average rating of at least 4.0:",
    "output": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id HAVING AVG(r.rating) >= 4.0;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT products.name, AVG(reviews.rating) as average_rating\nFROM products\nJOIN reviews ON products.product_id = reviews.product_id\nGROUP BY products.product_id\nHAVING AVG(reviews.rating) >= 4.0;",
    "prompt_token_number": 554,
    "response_token_number": 46
},
{
    "id": 33078,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'name', 'email', 'password', 'created_at', 'project_id', 'role', 'updated_at', 'last_login', 'doe', 'johndoe'], 'Projects': ['project_id', 'name', 'description', 'user_id', 'created_at', 'updated_at', 'Portfolio', 'Website', 'App', 'Social', 'Media', 'Campaign', 'Marketing', 'commerce', 'E', 'status', 'Mobile', 'Redesign', 'Blog', 'Site', 'Graphic', 'Design', 'Development', 'Software', 'Web', 'Brand', 'Strategy', 'end_date', 'start_date', 'Corporate', 'Accounting', 'creator_id', 'category_id', 'completed_at', 'Refresh', 'Launch', 'Product', 'category'], 'Tasks': ['task_id', 'name', 'description', 'project_id', 'user_id', 'created_at', 'priority', 'updated_at', 'status', 'Completed', 'assigned_at', 'completed_at', 'due_date', 'time_spent', 'last_updated', 'category_id']}. \n# the user question is: Get the name and email of all users who have worked on projects in the \"Marketing\" category and have completed at least one task:. \n#SQL query: SELECT DISTINCT Users.name, Users.email FROM Users INNER JOIN Tasks ON Users.user_id = Tasks.user_id INNER JOIN Projects ON Tasks.project_id = Projects.project_id WHERE Projects.category = 'Marketing' AND Tasks.status = 'Completed';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of the cheapest product in each category:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of the cheapest product in each category:",
    "output": "SELECT p.category_id, p.name, p.price FROM products p WHERE p.price = ( SELECT MIN(price) FROM products WHERE category_id = p.category_id );",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT product_name, MIN(product_price) AS minimum_price, category FROM products GROUP BY category;",
    "prompt_token_number": 496,
    "response_token_number": 19
},
{
    "id": 33079,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'mental_skills': ['skill_id', 'skill_name', 'skill_description', 'athlete_id', 'Focus', 'Visualization', 'skill_mastered', 'skill_level', 'Excellent', 'High', 'Low']}. \n# the user question is: Get the name and description of all mental skills that have been mastered by more than 5 athletes.. \n#SQL query: SELECT mental_skills.skill_name, mental_skills.skill_description FROM mental_skills WHERE mental_skills.skill_id IN (SELECT skill_id FROM athlete_skills WHERE skill_mastered = 1 GROUP BY skill_id HAVING COUNT(DISTINCT athlete_id) > 5);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'categories': ['category_name', 'category_id', 'id', 'Bedroom', 'name']} and \n# the user question: Retrieve the name and average rating of all products in the \"Living Room\" category that have at least one review:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and average rating of all products in the \"Living Room\" category that have at least one review:",
    "output": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN categories c ON p.category_id = c.category_id JOIN reviews r ON p.product_id = r.product_id WHERE c.category_name = 'Living Room' GROUP BY p.product_id;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "categories": [
            "category_name",
            "category_id",
            "id",
            "Bedroom",
            "name"
        ]
    },
    "response_text": "SELECT products.name, AVG(reviews.rating) \nFROM products \nJOIN reviews ON products.product_id = reviews.product_id\nJOIN categories ON products.category_id = categories.category_id\nWHERE categories.category_name = \"Living Room\" \nGROUP BY products.product_id \nHAVING COUNT(reviews.review_id) >= 1;",
    "prompt_token_number": 422,
    "response_token_number": 63
},
{
    "id": 33080,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'customers': ['customer_id', 'customer_address', 'customer_name', 'email', 'state', 'first_name', 'last_name', 'name', 'id', 'contact_name', 'country', 'address', 'city'], 'orders': ['customer_id', 'order_id', 'order_date', 'payment_status', 'total_amount', 'delivery_status', 'salesperson_id', 'shipping_state', 'employee_id', 'shipped_date', 'product_id', 'status'], 'order_details': ['product_name', 'order_id', 'product_price', 'quantity', 'order_date', 'product_id', 'unit_price'], 'products': ['product_price', 'product_name', 'product_id', 'category_id', 'unit_price', 'quantity_in_stock', 'supplier_id', 'stock_quantity', 'category', 'unit_cost', 'reorder_level', 'etching_method', 'name', 'in_stock', 'price', 'discount', 'Product', 'last_reorder_date', 'collection_id', 'id']}. \n# the user question is: Retrieve the name and email of all customers who have placed an order with a product that has \"organic\" in its name.. \n#SQL query: SELECT c.customer_name, c.email FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_details od ON o.order_id = od.order_id INNER JOIN products p ON od.product_id = p.product_id WHERE p.product_name LIKE '%organic%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of all products that have a price higher than the average price of all products:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of all products that have a price higher than the average price of all products:",
    "output": "SELECT name, price FROM products WHERE price > (SELECT AVG(price) FROM products);",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT name, price FROM products WHERE price > (SELECT AVG(price) FROM products);",
    "prompt_token_number": 490,
    "response_token_number": 17
},
{
    "id": 33081,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Books': ['AuthorID', 'BookID', 'Title', 'PublicationYear'], 'Users': ['UserID', 'Username'], 'Favorites': ['UserID', 'BookID', 'RecipeID', 'Rating']}. \n# the user question is: Retrieve the titles of books that have been favorited by users with the username 'alex123':. \n#SQL query: SELECT DISTINCT Books.Title FROM Books JOIN Favorites ON Books.BookID = Favorites.BookID JOIN Users ON Favorites.UserID = Users.UserID WHERE Users.Username = 'alex123';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'product_inventory': ['product_id', 'quantity_in_stock'], 'categories': ['category_name', 'category_id', 'id', 'Bedroom', 'name']} and \n# the user question: Retrieve the name, category name, and quantity in stock of all products that have a quantity in stock less than 5, sorted by quantity in stock in ascending order:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name, category name, and quantity in stock of all products that have a quantity in stock less than 5, sorted by quantity in stock in ascending order:",
    "output": "SELECT p.name, c.category_name, pi.quantity_in_stock FROM products p JOIN categories c ON p.category_id = c.category_id JOIN product_inventory pi ON p.product_id = pi.product_id WHERE pi.quantity_in_stock < 5 ORDER BY pi.quantity_in_stock ASC;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "product_inventory": [
            "product_id",
            "quantity_in_stock"
        ],
        "categories": [
            "category_name",
            "category_id",
            "id",
            "Bedroom",
            "name"
        ]
    },
    "response_text": "SELECT products.name, categories.category_name, product_inventory.quantity_in_stock \nFROM products \nJOIN product_inventory ON products.product_id = product_inventory.product_id \nJOIN categories ON products.category_id = categories.category_id \nWHERE product_inventory.quantity_in_stock < 5 \nORDER BY product_inventory.quantity_in_stock ASC;",
    "prompt_token_number": 339,
    "response_token_number": 60
},
{
    "id": 33084,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'PlantSpecies': ['id', 'name', 'genus_id', 'scientific_name'], 'PlantSpeciesUses': ['plant_species_id', 'plant_uses_id'], 'PlantUses': ['id', 'name'], 'PlantSpeciesGrowth': ['plant_species_id', 'plant_growth_id'], 'PlantGrowth': ['id', 'name'], 'PlantSpeciesLocation': ['plant_location_id', 'plant_species_id'], 'PlantLocation': ['id', 'name']}. \n# the user question is: Find all plant species that have a location requirement of \"Outdoors\", a growth requirement for \"Full sun\", and at least one use for \"Landscaping\":. \n#SQL query: SELECT PlantSpecies.name AS species, PlantLocation.name AS location, PlantGrowth.name AS growth, PlantUses.name AS use FROM PlantSpecies JOIN PlantSpeciesLocation ON PlantSpecies.id = PlantSpeciesLocation.plant_species_id JOIN PlantLocation ON PlantSpeciesLocation.plant_location_id = PlantLocation.id JOIN PlantSpeciesUses ON PlantSpecies.id = PlantSpeciesUses.plant_species_id JOIN PlantUses ON PlantSpeciesUses.plant_uses_id = PlantUses.id JOIN PlantSpeciesGrowth ON PlantSpecies.id = PlantSpeciesGrowth.plant_species_id JOIN PlantGrowth ON PlantSpeciesGrowth.plant_growth_id = PlantGrowth.id WHERE PlantLocation.name = 'Outdoors' AND PlantGrowth.name = 'Full sun' AND PlantUses.name = 'Landscaping';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'categories': ['category_name', 'category_id', 'id', 'Bedroom', 'name']} and \n# the user question: Retrieve the name and price of all products that have a price between $50 and $100, and that are in the \"Bedroom\" or \"Bathroom\" category:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of all products that have a price between $50 and $100, and that are in the \"Bedroom\" or \"Bathroom\" category:",
    "output": "SELECT p.name, p.price FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.price BETWEEN 50 AND 100 AND c.category_name IN ('Bedroom', 'Bathroom');",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "categories": [
            "category_name",
            "category_id",
            "id",
            "Bedroom",
            "name"
        ]
    },
    "response_text": "SELECT products.name AS product_name, products.price AS product_price\nFROM products \nJOIN categories ON products.category_id = categories.category_id \nWHERE (products.price BETWEEN 50 AND 100) \nAND (categories.category_name IN ('Bedroom', 'Bathroom'));",
    "prompt_token_number": 518,
    "response_token_number": 53
},
{
    "id": 33085,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Book': ['series_id', 'publication_year', 'title', 'id', 'author_id', 'publisher_id', 'published_year', 'word_count', 'publication_date', 'value', 'pages', 'year', 'language_id', 'publish_date', 'price', 'genre_id'], 'Review': ['book_id', 'rating', 'reviewer_name', 'name', 'id', 'reader_id']}. \n# the user question is: Find the top 5 most reviewed books.. \n#SQL query: SELECT Book.title, COUNT(Review.id) AS review_count FROM Book LEFT JOIN Review ON Book.id = Review.book_id GROUP BY Book.id ORDER BY review_count DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and total sales of all products that have been sold at least once, sorted by total sales in descending order:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total sales of all products that have been sold at least once, sorted by total sales in descending order:",
    "output": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_sales FROM products p LEFT JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id ORDER BY total_sales DESC;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT products.name, SUM(order_items.quantity * order_items.price) AS total_sales \nFROM products \nJOIN order_items ON products.product_id = order_items.product_id \nGROUP BY products.product_id \nHAVING total_sales > 0 \nORDER BY total_sales DESC;",
    "prompt_token_number": 363,
    "response_token_number": 53
},
{
    "id": 33088,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Protein': ['gene_id', 'molecular_weight', 'protein_name', 'isoelectric_point', 'protein_id', 'length', 'protein_length'], 'Pathway_Gene': ['gene_id', 'pathway_id'], 'Pathway': ['pathway_id', 'pathway_name', 'description']}. \n# the user question is: Retrieve the names of all genes and their associated proteins that have a length greater than 500 amino acids and are part of the \"MAPK signaling pathway\" pathway.. \n#SQL query: SELECT Gene.gene_name, Protein.protein_name FROM Gene JOIN Protein ON Gene.gene_id = Protein.gene_id JOIN Pathway_Gene ON Gene.gene_id = Pathway_Gene.gene_id JOIN Pathway ON Pathway_Gene.pathway_id = Pathway.pathway_id WHERE Protein.length > 500 AND Pathway.pathway_name = 'MAPK signaling pathway';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'categories': ['category_name', 'category_id', 'id', 'Bedroom', 'name']} and \n# the user question: Retrieve the name and average price of all products in the \"Kitchen\" category:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and average price of all products in the \"Kitchen\" category:",
    "output": "SELECT p.name, AVG(p.price) AS avg_price FROM products p JOIN categories c ON p.category_id = c.category_id WHERE c.category_name = 'Kitchen' GROUP BY p.product_id;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "categories": [
            "category_name",
            "category_id",
            "id",
            "Bedroom",
            "name"
        ]
    },
    "response_text": "SELECT products.name, AVG(products.price) \nFROM products \nJOIN categories ON products.category_id = categories.category_id \nWHERE categories.category_name = 'Kitchen';",
    "prompt_token_number": 459,
    "response_token_number": 31
},
{
    "id": 33089,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'remedy': ['remedy_id', 'dosage', 'name', 'description'], 'remedy_symptom': ['remedy_id', 'symptom_id', 'age_group_id', 'gender_id'], 'symptom': ['symptom_id', 'name'], 'medicine': ['medicine_id', 'dosage', 'name', 'description'], 'medicine_symptom': ['symptom_id', 'medicine_id', 'age_group_id', 'gender_id']}. \n# the user question is: Find the names and dosages of all remedies and medicines that are recommended for migraine headaches:. \n#SQL query: SELECT remedy.name, remedy.dosage FROM remedy JOIN remedy_symptom ON remedy.remedy_id = remedy_symptom.remedy_id JOIN symptom ON remedy_symptom.symptom_id = symptom.symptom_id WHERE symptom.name = 'Migraine headache' UNION SELECT medicine.name, medicine.dosage FROM medicine JOIN medicine_symptom ON medicine.medicine_id = medicine_symptom.medicine_id JOIN symptom ON medicine_symptom.symptom_id = symptom.symptom_id WHERE symptom.name = 'Migraine headache';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of all products that have a rating of at least 4.5 stars, sorted by rating in descending order:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of all products that have a rating of at least 4.5 stars, sorted by rating in descending order:",
    "output": "SELECT p.name, p.price, AVG(r.rating) AS avg_rating FROM products p LEFT JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id HAVING avg_rating >= 4.5 ORDER BY avg_rating DESC;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT products.name, products.price FROM products JOIN reviews ON products.product_id = reviews.product_id WHERE reviews.rating >= 4.5 ORDER BY reviews.rating DESC;",
    "prompt_token_number": 450,
    "response_token_number": 32
},
{
    "id": 33090,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Network_Interfaces': ['interface_id', 'device_id', 'interface_name', 'ip_address', 'subnet_mask', 'mac_address', 'default_gateway', 'vlan_tag', 'interface_type', 'bandwidth', 'link_speed', 'ip_address_type', 'mtu', 'dns_server', 'ip_mode', 'vlan_id', 'link_status', 'speed', 'interface_speed', 'status', 'last_activity_time'], 'Firewall_Rules': ['rule_id', 'device_id', 'source_ip', 'destination_ip', 'protocol', 'action', 'destination_port', 'status', 'source_port', 'source_ip_address', 'destination_ip_address', 'rule_action'], 'Scans': ['scan_id', 'scanner_id', 'device_id', 'start_time', 'end_time']}. \n# the user question is: Find all devices that have at least one open port on port range 69-70 (TFTP) and have not been scanned in the last 1000 days, sorted by IP address in ascending order.. \n#SQL query: SELECT DISTINCT ni.ip_address FROM Network_Interfaces ni INNER JOIN Firewall_Rules fr ON ni.ip_address = fr.destination_ip LEFT JOIN Scans s ON ni.device_id = s.device_id AND s.end_time >= date('now', '-1000 days') WHERE fr.destination_port >= 69 AND fr.destination_port <= 70 AND fr.action = 'allow' AND s.scan_id IS NULL ORDER BY ni.ip_address ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and total quantity of all products that have been ordered at least once, sorted by total quantity in descending order:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total quantity of all products that have been ordered at least once, sorted by total quantity in descending order:",
    "output": "SELECT p.name, SUM(oi.quantity) AS total_quantity FROM products p LEFT JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id ORDER BY total_quantity DESC;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT p.name, SUM(oi.quantity) AS total_quantity \nFROM products p \nINNER JOIN order_items oi ON p.product_id = oi.product_id \nGROUP BY p.name \nHAVING total_quantity >= 1 \nORDER BY total_quantity DESC;",
    "prompt_token_number": 524,
    "response_token_number": 50
},
{
    "id": 33092,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Films': ['title', 'country', 'rating_id', 'director_id', 'film_id', 'synopsis', 'release_date', 'runtime', 'studio_id', 'composer_id', 'budget', 'box_office', 'imdb_rating', 'rotten_tomatoes_rating', 'mpaa_rating', 'production_company_id', 'oscar_wins', 'rating', 'rottentomatoes_rating', 'genre_id', 'runtime_minutes', 'release_year', 'The Conjuring', 'PG-13'], 'Ratings': ['rating_id', 'name', 'description', 'rating', 'UserID', 'MovieID', 'Rating'], 'Films_Genres': ['film_id', 'genre_id'], 'Genres': ['genre_id', 'name', 'description']}. \n# the user question is: Query: Retrieve the names and descriptions of all ratings in the database that are used for horror films and have a description, ordered by rating name in ascending order.. \n#SQL query: SELECT Ratings.name, Ratings.description FROM Ratings JOIN Films ON Ratings.rating_id = Films.rating_id JOIN Films_Genres ON Films.film_id = Films_Genres.film_id JOIN Genres ON Films_Genres.genre_id = Genres.genre_id WHERE Genres.name = 'Horror' AND Ratings.description IS NOT NULL GROUP BY Ratings.rating_id ORDER BY Ratings.name ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products that have at least one review, sorted by average rating in descending order:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and average rating of all products that have at least one review, sorted by average rating in descending order:",
    "output": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id ORDER BY avg_rating DESC;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT products.name, AVG(reviews.rating) as average_rating\nFROM products\nJOIN reviews ON products.product_id = reviews.product_id\nGROUP BY products.product_id\nHAVING COUNT(reviews.review_id) >= 1\nORDER BY average_rating DESC;",
    "prompt_token_number": 502,
    "response_token_number": 51
},
{
    "id": 33093,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Designs': ['artist_id', 'design_name', 'design_id', 'design_description', 'Tree', 'designer_id', 'date_created'], 'Etchings': ['etching_id', 'etching_date', 'order_id', 'design_id', 'etching_description', 'etching_name', 'description', 'price', 'etching_image'], 'Designers': ['designer_name', 'designer_id']}. \n# the user question is: Retrieve the list of designs that have not been etched on any glassware item, along with the name of the designer.. \n#SQL query: SELECT Designs.design_name, Designers.designer_name FROM Designs INNER JOIN Designers ON Designs.designer_id = Designers.designer_id WHERE Designs.design_id NOT IN ( SELECT design_id FROM Etchings );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of all products that are currently out of stock:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of all products that are currently out of stock:",
    "output": "SELECT name, price FROM products WHERE stock = 0;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT name, price FROM products WHERE quantity_in_stock = 0;",
    "prompt_token_number": 347,
    "response_token_number": 14
},
{
    "id": 33094,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Client': ['client_id', 'name', 'email', 'phone_number', 'industry_id', 'location_id', 'industry', 'budget', 'first_name', 'last_name', 'state', 'city', 'company_name', 'annual_revenue'], 'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months'], 'Story': ['story_id', 'headline', 'content', 'date_published', 'outlet_id', 'campaign_id', 'date', 'journalist_id', 'sentiment_score', 'body', 'views', 'shares', 'likes', 'clicks', 'impressions', 'comments', 'text', 'publication_date', 'word_count'], 'MediaContact': ['outlet_id', 'first_name', 'phone_number', 'last_name', 'email', 'phone']}. \n# the user question is: Retrieve the names and email addresses of all media contacts who have published a story that was featured in a campaign associated with a client with the name \"XYZ Corp\" and have a phone number starting with \"888-\":. \n#SQL query: SELECT DISTINCT MediaContact.first_name, MediaContact.last_name, MediaContact.email FROM MediaContact INNER JOIN Story ON MediaContact.outlet_id = Story.outlet_id INNER JOIN Campaign ON Story.campaign_id = Campaign.campaign_id INNER JOIN Client ON Campaign.client_id = Client.client_id WHERE Client.name = 'XYZ Corp' AND MediaContact.phone LIKE '888-%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'categories': ['category_name', 'category_id', 'id', 'Bedroom', 'name']} and \n# the user question: Retrieve the name and average rating of all products in the \"Bedroom\" category that have at least one review, sorted by average rating in descending order:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and average rating of all products in the \"Bedroom\" category that have at least one review, sorted by average rating in descending order:",
    "output": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN reviews r ON p.product_id = r.product_id JOIN categories c ON p.category_id = c.category_id WHERE c.category_name = 'Bedroom' GROUP BY p.product_id ORDER BY avg_rating DESC;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "categories": [
            "category_name",
            "category_id",
            "id",
            "Bedroom",
            "name"
        ]
    },
    "response_text": "SELECT products.name, AVG(reviews.rating) as average_rating\nFROM products\nINNER JOIN reviews ON products.product_id = reviews.product_id\nINNER JOIN categories ON products.category_id = categories.category_id\nWHERE categories.category_name = 'Bedroom' AND reviews.review_id IS NOT NULL\nGROUP BY products.name\nORDER BY average_rating DESC;",
    "prompt_token_number": 615,
    "response_token_number": 68
},
{
    "id": 33095,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_release_date', 'product_description', 'product_name', 'product_price', 'product_id', 'product_stock', 'product_length', 'product_weight', 'category_id', 'ProductName', 'Price', 'ProductID', 'CategoryID'], 'Tasks': ['task_completion_date', 'task_description', 'task_name', 'task_completion_time', 'product_id', 'task_id'], 'Designers': ['designer_name', 'designer_id', 'designer_bio', 'designer_email'], 'Task_Assignments': ['designer_id', 'task_id']}. \n# the user question is: Retrieve the name and email address of each designer who has designed at least one product that is currently out of stock:. \n#SQL query: SELECT DISTINCT Designers.designer_name, Designers.designer_email FROM Designers JOIN Task_Assignments ON Designers.designer_id = Task_Assignments.designer_id JOIN Tasks ON Task_Assignments.task_id = Tasks.task_id JOIN Products ON Tasks.product_id = Products.product_id WHERE Products.product_stock = 0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of all products that cost less than $100 and that have a stock greater than 0:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of all products that cost less than $100 and that have a stock greater than 0:",
    "output": "SELECT name, price FROM products WHERE price < 100 AND stock > 0;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT name, price FROM products WHERE price < 100 AND stock > 0;",
    "prompt_token_number": 410,
    "response_token_number": 17
},
{
    "id": 33098,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Players': ['last_name', 'player_id', 'team_id', 'first_name', 'birth_date', 'height', 'nationality', 'avg_assists', 'avg_points', 'avg_rebounds', 'ppg', 'rpg', 'apg', 'seasons_played', 'total_points', 'total_threes', 'three_pt_pct', 'games_played', 'fg_pct', 'total_fga', 'ast_per_game', 'total_3pt_att', 'total_3pt', 'country_code', 'last_year', 'first_year', 'Name', 'Age', 'Salary', 'ID', 'Position', 'Number', 'TeamID', 'IsInjured', 'JerseyNumber', 'Height', 'Weight', \"6'10''\", 'Player_ID', 'Player_Name'], 'Teams': ['team_name', 'team_id', 'conference_id', 'division_id', 'last_season', 'first_season', 'city_id', 'division_name', 'conference_name', 'season_id', 'head_coach_id', 'city', 'start_date', 'wins', 'losse', 'home_team_id', 'State', 'Golden', 'Warriors', 'away_team_id', 'coach_id', 'conference', 'playoff_record', 'num_mvp', 'year_founded', 'arena_id', 'player_id', 'year_end', 'winning_team_id', 'end_date', 'num_wins', 'opponent_name', 'Name', 'ID', 'Abbreviation', 'City', 'Color', 'Coach', 'Team_ID', 'Team_Name'], 'Awards': ['award_name', 'award_id', 'coach_id', 'season_id', 'player_id', 'Valuable', 'Player', 'Most', 'Rookie', 'the', 'Improved', 'Defensive', 'award', 'season_type', 'award_season']}. \n# the user question is: Find the teams that have a player who has won the Rookie of the Year award and the MVP award in their career.. \n#SQL query: SELECT Teams.team_name FROM Teams JOIN Players ON Teams.team_id = Players.team_id JOIN Awards ON Players.player_id = Awards.player_id WHERE Awards.award_name = 'Most Valuable Player' AND Players.player_id IN (SELECT player_id FROM Awards WHERE award_name = 'Rookie of the Year');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and price of all products that have been ordered at least once, but have not been reviewed:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of all products that have been ordered at least once, but have not been reviewed:",
    "output": "SELECT p.name, p.price FROM products p LEFT JOIN order_items oi ON p.product_id = oi.product_id LEFT JOIN reviews r ON p.product_id = r.product_id WHERE oi.order_item_id IS NOT NULL AND r.review_id IS NULL;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT products.name, products.price FROM products JOIN order_items ON products.product_id = order_items.product_id LEFT JOIN reviews ON products.product_id = reviews.product_id WHERE reviews.review_id IS NULL;",
    "prompt_token_number": 737,
    "response_token_number": 38
},
{
    "id": 33099,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'tasks': ['created_at', 'project_id', 'task_id', 'user_id', 'due_date', 'completed', 'started_at', 'priority', 'completion_date', 'completed_date', 'start_date', 'created_date', 'creator_id', 'assignee_id', 'completed_at', 'name', 'tags', 'assigner_id', 'assigned_by_id', 'category'], 'users': ['user_id', 'name', 'email', 'last_login_attempt', 'total_tasks', 'completed_tasks', 'assignee_id', 'role', 'last_login', 'first_name', 'last_name', 'last_login_date', 'registration_date', 'password', 'job_title', 'hire_date'], 'settings': ['name', 'en', 'user_id', 'value', 'setting_id']}. \n# the user question is: Retrieve the name and email of all users who have not completed any tasks in project 1 or project 2 and have not set their language preference:. \n#SQL query: SELECT DISTINCT u.name, u.email FROM users u LEFT JOIN tasks t ON u.user_id = t.user_id AND (t.project_id = 1 OR t.project_id = 2) AND t.completed = 1 LEFT JOIN settings s ON u.user_id = s.user_id AND s.name = 'language' WHERE t.task_id IS NULL AND s.setting_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of all products that have a discount greater than 10%:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of all products that have a discount greater than 10%:",
    "output": "SELECT name, price FROM products WHERE discount > 0.1;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT name, price FROM products WHERE discount > 10;",
    "prompt_token_number": 466,
    "response_token_number": 12
},
{
    "id": 33101,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Programs': ['program_id', 'program_name', 'program_description', 'start_date', 'end_date', 'status', 'Program'], 'Assessments': ['assessment_id', 'assessment_name', 'assessment_description', 'assessment_date', 'program_id', 'user_id', 'date_recorded', 'weight_current', 'weight_initial']}. \n# the user question is: Find the name and description of the program with the highest average number of assessments completed per user:. \n#SQL query: SELECT Programs.program_name, Programs.program_description FROM Programs JOIN Assessments ON Programs.program_id = Assessments.program_id GROUP BY Programs.program_id ORDER BY COUNT(*) / COUNT(DISTINCT Assessments.user_id) DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and price of all products that have been ordered more than 5 times in total:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of all products that have been ordered more than 5 times in total:",
    "output": "SELECT p.name, p.price FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING SUM(oi.quantity) > 5;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT products.name, products.price FROM products JOIN order_items ON products.product_id = order_items.product_id GROUP BY products.product_id HAVING COUNT(*) > 5;",
    "prompt_token_number": 363,
    "response_token_number": 33
},
{
    "id": 33102,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Employees': ['first_name', 'employee_id', 'last_name', 'hire_date', 'salary', 'job_title_id', 'department_id', 'location_id', 'job_title', 'employee_status_id', 'employee_experience', 'certification_id', 'equipment_rental_cost', 'hourly_rate', 'Salary', 'Department'], 'Task_Employees': ['employee_id', 'task_id', 'hours_worked', 'project_id', 'task_employee_id', 'task_employee_role', 'task_employee_cost', 'task_hours', 'rental_id', 'end_date'], 'Tasks': ['start_date', 'task_name', 'due_date', 'end_date', 'task_id', 'priority', 'task_status', 'project_id', 'task_priority_id', 'task_status_id', 'task_start_date', 'task_end_date', 'task_expected_completion_date', 'task_completion_percentage', 'task_estimated_cost', 'task_due_date', 'actual_end_date', 'actual_start_date', 'task_lead_id', 'actual_cost', 'employee_i', 'task_description'], 'Project_Statuses': ['project_status_name', 'project_status_id']}. \n# the user question is: List all the employees who have worked on at least one project that has a project status of \"In Progress\" and have worked for more than 50 hours.. \n#SQL query: SELECT e.first_name, e.last_name, COUNT(DISTINCT t.project_id) AS total_projects_in_progress, SUM(te.hours_worked) AS total_hours_worked FROM Employees e INNER JOIN Task_Employees te ON e.employee_id = te.employee_id INNER JOIN Tasks t ON te.task_id = t.task_id INNER JOIN Projects p ON t.project_id = p.project_id INNER JOIN Project_Statuses ps ON p.project_status_id = ps.project_status_id WHERE ps.project_status_name = 'In Progress' GROUP BY e.employee_id HAVING total_hours_worked > 50;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products that have been reviewed, sorted by average rating in descending order:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and average rating of all products that have been reviewed, sorted by average rating in descending order:",
    "output": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id ORDER BY avg_rating DESC;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT p.name, AVG(r.rating) AS average_rating \nFROM products p \nINNER JOIN reviews r ON p.product_id = r.product_id \nGROUP BY p.product_id \nORDER BY average_rating DESC;",
    "prompt_token_number": 770,
    "response_token_number": 41
},
{
    "id": 33103,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Events': ['event_id', 'event_name', 'event_date', 'location', 'num_participants', 'group_id'], 'Event_Participants': ['participant_id', 'event_id', 'user_id', 'group_id']}. \n# the user question is: Retrieve the event names and the number of participants for events happening in the last week. \n#SQL query: SELECT Events.event_name, COUNT(Event_Participants.user_id) AS num_participants FROM Events INNER JOIN Event_Participants ON Events.event_id = Event_Participants.event_id WHERE Events.event_date >= DATE('now', '-7 days') GROUP BY Events.event_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and price of all products that have not been ordered in the last 60 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of all products that have not been ordered in the last 60 days:",
    "output": "SELECT name, price FROM products WHERE product_id NOT IN ( SELECT oi.product_id FROM order_items oi JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date >= DATE('now', '-60 days') );",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT products.name, products.price \nFROM products \nLEFT JOIN order_items ON products.product_id = order_items.product_id\nWHERE order_items.order_date < DATE('now', '-60 days') \nOR order_items.order_id IS NULL;",
    "prompt_token_number": 398,
    "response_token_number": 47
},
{
    "id": 33104,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Therapist_Specialties': ['therapist_id', 'specialty', 'specialty_id'], 'Billing': ['session_id', 'date', 'amount', 'id', 'start_time', 'end_time'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id'], 'Client_Diagnoses': ['client_id', 'diagnosis_id'], 'Diagnoses': ['id', 'name']}. \n# the user question is: Retrieve the names and ages of all clients who have attended at least one session with a therapist who has a specialty in Dialectical Behavior Therapy, have been diagnosed with depression, and have not yet been billed for that session:. \n#SQL query: SELECT DISTINCT c.name, c.age FROM Clients c INNER JOIN Session_Attendees sa ON c.id = sa.client_id INNER JOIN Sessions s ON sa.session_id = s.id INNER JOIN Therapists t ON s.therapist_id = t.id INNER JOIN Therapist_Specialties ts ON t.id = ts.therapist_id INNER JOIN Client_Diagnoses cd ON c.id = cd.client_id INNER JOIN Diagnoses d ON cd.diagnosis_id = d.id LEFT JOIN Billing b ON s.id = b.session_id WHERE ts.specialty = 'Dialectical Behavior Therapy' AND d.name = 'Depression' AND b.id IS NULL\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and address of all customers who have placed an order in the last 30 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and address of all customers who have placed an order in the last 30 days:",
    "output": "SELECT c.name, c.address FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATE('now', '-30 days');",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ],
        "customers": [
            "customer_id",
            "name",
            "state",
            "customer_group",
            "address",
            "email",
            "total_value",
            "first_name",
            "last_name",
            "phone",
            "id",
            "customer_name"
        ]
    },
    "response_text": "SELECT DISTINCT c.name, c.address \nFROM customers c \nINNER JOIN orders o ON c.customer_id = o.customer_id \nWHERE o.order_date >= DATE(NOW()) - INTERVAL 30 DAY",
    "prompt_token_number": 787,
    "response_token_number": 39
},
{
    "id": 33107,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'patient': ['email', 'phone_number', 'patient_id', 'name'], 'symptom': ['symptom_id', 'name'], 'patient_symptom': ['symptom_id', 'patient_id']}. \n# the user question is: Find the names and contact information of all patients who have reported symptoms of asthma:. \n#SQL query: SELECT patient.name, patient.phone_number, patient.email FROM patient JOIN patient_symptom ON patient.patient_id = patient_symptom.patient_id JOIN symptom ON patient_symptom.symptom_id = symptom.symptom_id WHERE symptom.name = 'Asthma';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and price of all products that have not been ordered by any customer:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of all products that have not been ordered by any customer:",
    "output": "SELECT name, price FROM products WHERE product_id NOT IN ( SELECT DISTINCT oi.product_id FROM order_items oi );",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT products.name, products.price FROM products LEFT JOIN order_items ON products.product_id = order_items.product_id WHERE order_items.product_id IS NULL;",
    "prompt_token_number": 331,
    "response_token_number": 29
},
{
    "id": 33109,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'order_details': ['product_name', 'order_id', 'product_price', 'quantity', 'order_date', 'product_id', 'unit_price'], 'products': ['product_price', 'product_name', 'product_id', 'category_id', 'unit_price', 'quantity_in_stock', 'supplier_id', 'stock_quantity', 'category', 'unit_cost', 'reorder_level', 'etching_method', 'name', 'in_stock', 'price', 'discount', 'Product', 'last_reorder_date', 'collection_id', 'id']}. \n# the user question is: Retrieve the name and revenue of the top 10 best-selling products, ordered by revenue in descending order.. \n#SQL query: SELECT p.product_name, SUM(od.quantity * od.unit_price) AS revenue FROM products p INNER JOIN order_details od ON p.product_id = od.product_id GROUP BY p.product_id ORDER BY revenue DESC LIMIT 10;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and quantity of all products that have been ordered by more than 10 customers:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and quantity of all products that have been ordered by more than 10 customers:",
    "output": "SELECT p.name, SUM(oi.quantity) AS total_quantity FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id GROUP BY p.product_id HAVING COUNT(DISTINCT o.customer_id) > 10;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT p.name, SUM(oi.quantity) as total_quantity\nFROM products p \nINNER JOIN order_items oi ON p.product_id = oi.product_id \nINNER JOIN orders o ON oi.order_id = o.order_id \nGROUP BY p.product_id \nHAVING COUNT(DISTINCT o.user_id) > 10;",
    "prompt_token_number": 458,
    "response_token_number": 64
},
{
    "id": 33110,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Trip': ['trip_id', 'user_id', 'vehicle_id', 'route_id', 'start_time', 'end_time', 'status', 'fare_id', 'is_cancelled', 'passenger_id', 'driver_id', 'driver_rating', 'check_in_time', 'check_out_time', 'fare', 'distance', 'fare_amount', '[start_date]', '[end_date]', '[driver_id]', '[year]', '[vehicle_id]', 'duration', 'date', 'fare_rate', 'start_city', 'end_location', 'start_location', 'destination_id', 'cost', 'origin_id', 'destination', 'source', 'tip_amount', 'customer_id'], 'Driver': ['phone', 'name', 'driver_id', 'gender', 'last_name', 'first_name'], 'Passenger': ['age', 'name', 'passenger_id', 'email', 'last_name', 'first_name']}. \n# the user question is: Retrieve the name of the passenger who has traveled the most times with the driver named \"John Smith\":. \n#SQL query: SELECT Passenger.name FROM Passenger INNER JOIN Trip ON Passenger.passenger_id = Trip.passenger_id INNER JOIN Driver ON Trip.driver_id = Driver.driver_id WHERE Driver.name = 'John Smith' GROUP BY Passenger.passenger_id ORDER BY COUNT(*) DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products that have at least one review:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and average rating of all products that have at least one review:",
    "output": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT products.name, AVG(reviews.rating) as average_rating \nFROM products \nINNER JOIN reviews ON products.product_id = reviews.product_id \nGROUP BY products.product_id \nHAVING COUNT(reviews.review_id) >= 1;",
    "prompt_token_number": 482,
    "response_token_number": 46
},
{
    "id": 33113,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Artist': ['artist_id', 'birth_date', 'name', 'nationality', 'New York City', 'birth_city', 'birth_country', 'country', 'birth_year', 'gender', '[artist_name]', 'Vincent', 'Gogh', 'Van', 'Michelangelo', 'id'], 'Artwork': ['The Persistence of Memory', 'artist_id', 'title', 'artwork_id', 'collection_id', 'dimensions', 'acquisition_date', 'date_created', 'value', '1999', '1900', 'date_acquired', 'medium', 'year_created', 'description', 'creation_year', 'type_id', 'price', 'creation_date', '[medium_name]', '[artist_id]', 'genre', 'id', 'name', 'style', 'abstract'], 'Loan': ['borrower_id', 'lender_id', 'artwork_id', 'end_date', 'return_date', 'loan_date', 'loan_id', 'requested_return_date', 'loan_start_date', 'due_date', 'exhibition_id', 'collector_id']}. \n# the user question is: List the names of all artists who have created artworks that are currently on loan.. \n#SQL query: SELECT DISTINCT Artist.name FROM Artist INNER JOIN Artwork ON Artist.artist_id = Artwork.artist_id INNER JOIN Loan ON Artwork.artwork_id = Loan.artwork_id WHERE Loan.return_date IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and email of all customers who have placed orders in the past month:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all customers who have placed orders in the past month:",
    "output": "SELECT c.name, c.email FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATE('now', '-1 month') GROUP BY c.customer_id;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ],
        "customers": [
            "customer_id",
            "name",
            "state",
            "customer_group",
            "address",
            "email",
            "total_value",
            "first_name",
            "last_name",
            "phone",
            "id",
            "customer_name"
        ]
    },
    "response_text": "SELECT DISTINCT customers.name, customers.email \nFROM customers \nINNER JOIN orders \nON customers.customer_id = orders.customer_id \nWHERE orders.order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
    "prompt_token_number": 494,
    "response_token_number": 40
},
{
    "id": 33115,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Project_Materials': ['project_id', 'material_id', 'quantity', 'total_quantity'], 'Materials': ['material_id', 'material_name', 'cost_per_unit', 'unit_of_measurement', 'unit_quantity', 'unit_cost', 'quantity', 'unit_price', 'material_type_id', 'quantity_in_stock', 'material_unit', 'quantity_available', 'reorder_level', 'stock_level'], 'Project_Costs': ['project_id', 'total_cost', 'equipment_cost', 'labor_cost', 'material_cost', 'square_feet']}. \n# the user question is: List all the materials that have been used on a project with a project cost of more than $10,000,000 and have a unit price of more than $10.00.. \n#SQL query: SELECT DISTINCT m.material_name FROM Materials m INNER JOIN Project_Materials pm ON m.material_id = pm.material_id INNER JOIN Projects p ON pm.project_id = p.project_id INNER JOIN Project_Costs pc ON p.project_id = pc.project_id WHERE pc.total_cost > 10000000 AND m.unit_price > 10.00;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and rating of all products that have an average rating of 4 stars or higher:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and rating of all products that have an average rating of 4 stars or higher:",
    "output": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id HAVING AVG(r.rating) >= 4.0;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT p.name, AVG(r.rating) as Average_Rating FROM products p INNER JOIN reviews r ON p.product_id = r.product_id GROUP BY p.name HAVING AVG(r.rating) >= 4;",
    "prompt_token_number": 602,
    "response_token_number": 41
},
{
    "id": 33116,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']}. \n# the user question is: Find the names of all employees who have worked on a task that is related to product development.. \n#SQL query: SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID AND tk.Task_Name LIKE '%Product Development%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of the 3 most expensive products:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of the 3 most expensive products:",
    "output": "SELECT name, price FROM products ORDER BY price DESC LIMIT 3;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT name, price FROM products ORDER BY price DESC LIMIT 3;",
    "prompt_token_number": 427,
    "response_token_number": 14
},
{
    "id": 33118,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Series': ['publisher_id', 'title', 'id', 'universe', 'start_date', 'main_protagonist_id', 'rating'], 'Publisher': ['name', 'id', 'country', 'Image', 'Comics'], 'Series_Award': ['series_id', 'award_id', 'issue_id'], 'Award': ['name', 'id']}. \n# the user question is: Find the titles of all series that have been published by Marvel Comics and have won a Harvey Award, sorted alphabetically.. \n#SQL query: SELECT DISTINCT s.title FROM Series s JOIN Publisher p ON s.publisher_id = p.id AND p.name = 'Marvel Comics' JOIN Series_Award sa ON s.id = sa.series_id JOIN Award a ON sa.award_id = a.id AND a.name LIKE '%Harvey Award%' ORDER BY s.title ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and quantity of all products that have been ordered at least 10 times:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and quantity of all products that have been ordered at least 10 times:",
    "output": "SELECT p.name, SUM(oi.quantity) AS total_quantity FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING SUM(oi.quantity) >= 10;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT p.name, SUM(oi.quantity) FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.name HAVING SUM(oi.quantity) >= 10;",
    "prompt_token_number": 388,
    "response_token_number": 39
},
{
    "id": 33119,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Books': ['AuthorID', 'BookID', 'Title', 'PublicationYear'], 'Reviews': ['BookID', 'Rating', 'ReviewID', 'UserID', 'RecipeID', 'AuthorID'], 'Categories': ['CategoryID', 'Name'], 'Users': ['UserID', 'Username'], 'Favorites': ['UserID', 'BookID', 'RecipeID', 'Rating'], 'Recipes': ['RecipeID'], 'RecipeCategories': ['CategoryID', 'RecipeID']}. \n# the user question is: Find the titles of books that have been reviewed by users who have also favorited recipes in the \"Desserts\" category:. \n#SQL query: SELECT DISTINCT Books.Title FROM Books JOIN Reviews ON Books.BookID = Reviews.BookID JOIN Users ON Reviews.UserID = Users.UserID JOIN Favorites ON Users.UserID = Favorites.UserID JOIN Recipes ON Favorites.RecipeID = Recipes.RecipeID JOIN RecipeCategories ON Recipes.RecipeID = RecipeCategories.RecipeID JOIN Categories ON RecipeCategories.CategoryID = Categories.CategoryID WHERE Categories.Name = 'Desserts';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and rating of the product with the highest average rating:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and rating of the product with the highest average rating:",
    "output": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id ORDER BY AVG(r.rating) DESC LIMIT 1;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT products.name, MAX(avg_rating)\nFROM products \nJOIN (\n    SELECT product_id, AVG(rating) as avg_rating \n    FROM reviews \n    GROUP BY product_id\n) reviews\nON products.product_id = reviews.product_id;",
    "prompt_token_number": 421,
    "response_token_number": 48
},
{
    "id": 33120,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id']}. \n# the user question is: Retrieve the names and contact numbers of clients who have attended sessions on Tuesdays:. \n#SQL query: SELECT c.name, c.contact_number FROM Clients c INNER JOIN Session_Attendees sa ON c.id = sa.client_id INNER JOIN Sessions s ON sa.session_id = s.id WHERE strftime('%w', s.start_time) = '2'\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and address of all customers who live in California and have ordered at least once:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and address of all customers who live in California and have ordered at least once:",
    "output": "SELECT c.name, c.address FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.state = 'California' GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_id) >= 1;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ],
        "customers": [
            "customer_id",
            "name",
            "state",
            "customer_group",
            "address",
            "email",
            "total_value",
            "first_name",
            "last_name",
            "phone",
            "id",
            "customer_name"
        ]
    },
    "response_text": "SELECT c.name, c.address FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id WHERE c.state = 'California' GROUP BY c.customer_id HAVING COUNT(o.order_id) >= 1",
    "prompt_token_number": 552,
    "response_token_number": 43
},
{
    "id": 33121,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'News_Live_Event': ['user_id', 'title', 'location', 'id', 'start_time', 'end_time', 'topic']}. \n# the user question is: Retrieve the titles and start times of all live events that have not yet started, sorted by start time in ascending order.. \n#SQL query: SELECT title, start_time FROM News_Live_Event WHERE start_time > datetime('now') ORDER BY start_time ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and quantity of all products that have been ordered but not shipped:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and quantity of all products that have been ordered but not shipped:",
    "output": "SELECT p.name, SUM(oi.quantity) AS total_quantity FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id WHERE o.shipped_date IS NULL GROUP BY p.product_id;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT products.name, order_items.quantity \nFROM products \nJOIN order_items ON products.product_id = order_items.product_id \nJOIN orders ON order_items.order_id = orders.order_id \nWHERE orders.shipped_date IS NULL;",
    "prompt_token_number": 355,
    "response_token_number": 44
},
{
    "id": 33123,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'gardens': ['location', 'description', 'created_at', 'name', 'id', 'owner_id', 'updated_at', 'size', 'user_id', 'soil_type']}. \n# the user question is: Retrieve the names of all the gardens that have a created_at date before 2022-01-01.. \n#SQL query: SELECT DISTINCT name FROM gardens WHERE created_at < '2022-01-01';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products that have at least 5 reviews:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and average rating of all products that have at least 5 reviews:",
    "output": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id HAVING COUNT(*) >= 5;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT products.name, AVG(reviews.rating) \nFROM products\nJOIN reviews ON products.product_id = reviews.product_id\nGROUP BY products.name \nHAVING COUNT(reviews.review_id) >= 5;",
    "prompt_token_number": 301,
    "response_token_number": 41
},
{
    "id": 33125,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'patients': ['email', 'phone_number', 'last_name', 'patient_id', 'first_name', 'date_of_birth', 'gender', 'birthdate', 'start_date', 'session_count', 'age', 'therapy_start_date', 'birth_date'], 'patient_diagnoses': ['diagnosis_id', 'patient_id', 'patient_diagnosis_id', 'severity'], 'diagnoses': ['diagnosis_id', 'diagnosis_name', 'session_count'], 'payments': ['payment_id', 'payment_date', 'patient_id', 'payment_amount', 'appointment_count', 'therapist_id', 'appointment_id', 'price']}. \n# the user question is: Retrieve the names of the patients who have made payments in the past month and have been diagnosed with depression or anxiety.. \n#SQL query: SELECT DISTINCT p.first_name || ' ' || p.last_name AS patient_name FROM patients p JOIN payments py ON py.patient_id = p.patient_id AND py.payment_date >= DATE('now', '-1 month') JOIN patient_diagnoses pd ON pd.patient_id = p.patient_id JOIN diagnoses d ON d.diagnosis_id = pd.diagnosis_id AND (d.diagnosis_name = 'Major depression' OR d.diagnosis_name = 'Anxiety');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and email of all customers who have not placed any orders yet:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all customers who have not placed any orders yet:",
    "output": "SELECT c.name, c.email FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ],
        "customers": [
            "customer_id",
            "name",
            "state",
            "customer_group",
            "address",
            "email",
            "total_value",
            "first_name",
            "last_name",
            "phone",
            "id",
            "customer_name"
        ]
    },
    "response_text": "SELECT c.name, c.email FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;",
    "prompt_token_number": 458,
    "response_token_number": 28
},
{
    "id": 33126,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Publishers': ['PublisherID', 'PublisherName', 'SeriesID'], 'Series': ['SeriesID', 'SeriesTitle', 'PublisherID', 'AverageCoverPrice', 'AverageIssueRating', 'SeriesName'], 'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate']}. \n# the user question is: Find all series that have been published by Image Comics and have not had any issues with a cover price over $10.00:. \n#SQL query: SELECT DISTINCT Series.SeriesTitle FROM Series JOIN Issues ON Series.SeriesID = Issues.SeriesID JOIN Publishers ON Series.PublisherID = Publishers.PublisherID AND Publishers.PublisherName = 'Image Comics' WHERE Issues.CoverPrice <= 10.00 AND Series.SeriesID NOT IN ( SELECT DISTINCT Series.SeriesID FROM Series JOIN Issues ON Series.SeriesID = Issues.SeriesID JOIN Publishers ON Series.PublisherID = Publishers.PublisherID AND Publishers.PublisherName = 'Image Comics' WHERE Issues.CoverPrice > 10.00 );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and total revenue of all products that have been sold at least once:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total revenue of all products that have been sold at least once:",
    "output": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_revenue FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT products.product_name, SUM(order_items.quantity * order_items.price) AS total_revenue\nFROM products \nJOIN order_items ON products.product_id = order_items.product_id\nGROUP BY products.product_id\nHAVING COUNT(order_items.order_id) >= 1;",
    "prompt_token_number": 490,
    "response_token_number": 53
},
{
    "id": 33127,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'password', 'email', 'date_registered'], 'EnergyProduction': ['source_id', 'end_date', 'start_date', 'production_value', 'reading_id', 'meter_id', 'production_date']}. \n# the user question is: Retrieve the username and total energy production for each user for the month of January 2022.. \n#SQL query: SELECT u.username, SUM(p.production_value) AS total_production FROM Users u INNER JOIN EnergyProduction p ON u.user_id = p.source_id WHERE p.start_date >= '2022-01-01' AND p.end_date <= '2022-01-31' GROUP BY u.user_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and address of all customers who have placed orders that were shipped more than 10 days after the order date:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and address of all customers who have placed orders that were shipped more than 10 days after the order date:",
    "output": "SELECT c.name, c.address FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.shipped_date > o.order_date + 10 GROUP BY c.customer_id;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ],
        "customers": [
            "customer_id",
            "name",
            "state",
            "customer_group",
            "address",
            "email",
            "total_value",
            "first_name",
            "last_name",
            "phone",
            "id",
            "customer_name"
        ]
    },
    "response_text": "SELECT c.name, c.address FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id WHERE o.shipped_date > o.order_date + INTERVAL '10 day';",
    "prompt_token_number": 354,
    "response_token_number": 36
},
{
    "id": 33128,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate'], 'Customers': ['CustomerID', 'CustomerName', 'Email', 'CustomerState', 'State', 'JoinDate', 'BillingAddress', 'BillingState', 'ShippingAddress', 'LastName', 'ShippingState', 'Country', 'ShippingCountry'], 'Orders': ['OrderID', 'CustomerID', 'OrderDate', 'TotalCost', 'ShippedDate', 'ShipDate'], 'OrderItems': ['OrderItemID', 'OrderID', 'IssueID', 'Quantity', 'ShippedDate']}. \n# the user question is: Find all issues that have been ordered by a customer with the last name \"Smith\":. \n#SQL query: SELECT Issues.IssueTitle, Orders.OrderDate, Customers.CustomerName, Customers.ShippingAddress FROM Issues JOIN OrderItems ON Issues.IssueID = OrderItems.IssueID JOIN Orders ON OrderItems.OrderID = Orders.OrderID JOIN Customers ON Orders.CustomerID = Customers.CustomerID WHERE Customers.LastName = 'Smith';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and average rating of all products that have been reviewed by customers from California:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and average rating of all products that have been reviewed by customers from California:",
    "output": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id JOIN customers c ON r.customer_id = c.customer_id WHERE c.state = 'California' GROUP BY p.product_id;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "customers": [
            "customer_id",
            "name",
            "state",
            "customer_group",
            "address",
            "email",
            "total_value",
            "first_name",
            "last_name",
            "phone",
            "id",
            "customer_name"
        ]
    },
    "response_text": "SELECT products.name, AVG(reviews.rating) \nFROM products \nJOIN reviews ON products.product_id = reviews.product_id \nJOIN customers ON reviews.customer_id = customers.customer_id \nWHERE customers.state = 'California' \nGROUP BY products.name;",
    "prompt_token_number": 542,
    "response_token_number": 48
},
{
    "id": 33129,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Tasks': ['status', 'assigned_to', 'task_id', 'project_id', 'due_date', 'user_id', 'completed', 'task_name', 'created_at', 'completed_at', 'assigned_t', 'assigned', 'date_completed', 'data_table_id', 'completion_time', 'task_description', 'category', 'completion_date', 'open_date', 'priority', 'completed_date', 'start_date', 'estimated_time', 'end_date', 'created_by', 'estimated_duration', 'cost', 'deadline', 'completed_on', 'started_on', 'duration', 'assigned_on', 'date_assigned', 'date_created'], 'Users': ['username', 'email', 'user_id', 'assigned_to', 'completed_tasks', 'total_tasks', 'user_name', 'doe', 'salary', 'num_completed_tasks'], 'Task_Logs': ['started_at', 'duration', 'task_id', 'log_id', 'start_time', 'logged_by', 'date_logged', 'date_updated', 'cost', 'user_id']}. \n# the user question is: Find the top 3 users with the highest average task completion time:. \n#SQL query: SELECT Users.user_name, AVG(Task_Logs.duration) AS avg_completion_time FROM Users LEFT JOIN Tasks ON Users.user_id = Tasks.assigned_to LEFT JOIN Task_Logs ON Tasks.task_id = Task_Logs.task_id WHERE Tasks.status = 'completed' GROUP BY Users.user_id ORDER BY avg_completion_time DESC LIMIT 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and total revenue of all completed orders in the past year, grouped by month:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total revenue of all completed orders in the past year, grouped by month:",
    "output": "SELECT strftime('%Y-%m', o.order_date) AS month, SUM(oi.quantity * oi.price) AS total_revenue FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE o.shipped_date IS NOT NULL AND o.order_date >= DATE('now', '-12 months') GROUP BY month;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT DATE_FORMAT(orders.order_date, '%Y-%m') as month, SUM(order_items.quantity * order_items.item_price) as revenue \nFROM orders \nJOIN order_items ON orders.order_id = order_items.order_id\nWHERE YEAR(orders.order_date) = YEAR(CURRENT_DATE - INTERVAL 1 YEAR) \nAND orders.shipped_date IS NOT NULL \nGROUP BY month;",
    "prompt_token_number": 499,
    "response_token_number": 77
},
{
    "id": 33130,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Recipients': ['name', 'email', 'campaign_id', 'status', 'recipient_id', 'segment_id', 'list_id', 'last_opened_at', 'city', 'country', 'state', 'last_clicked_at', 'created_at', 'subscribed_at'], 'Campaigns': ['name', 'campaign_id', 'limited', 'Sale', 't', 'our', 'miss', 'content', 'subject', 'user_id', 'segment_id', 'list_id', 'workflow_id', 'email_template_id', 'scheduled_at', 'created_at', 'sent_at'], 'Purchases': ['email', 'category', 'purchase_date', 'purchase_amount', 'created_at', 'recipient_id', 'amount', 'campaign_id', 'price']}. \n# the user question is: Retrieve the email and total revenue generated for all recipients who have made a purchase through any campaign sent by User ID 1 in the past month, sorted by total revenue in descending order.. \n#SQL query: SELECT r.email, SUM(p.amount) AS total_revenue FROM Recipients r JOIN Campaigns c ON r.campaign_id = c.campaign_id JOIN Purchases p ON r.recipient_id = p.recipient_id AND p.campaign_id = c.campaign_id WHERE c.user_id = 1 AND p.created_at >= date('now', '-1 month') GROUP BY r.recipient_id ORDER BY total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and address of all customers who have purchased a product that costs more than $500:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and address of all customers who have purchased a product that costs more than $500:",
    "output": "SELECT c.name, c.address FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE p.price > 500 GROUP BY c.customer_id;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ],
        "customers": [
            "customer_id",
            "name",
            "state",
            "customer_group",
            "address",
            "email",
            "total_value",
            "first_name",
            "last_name",
            "phone",
            "id",
            "customer_name"
        ]
    },
    "response_text": "SELECT c.name, c.address FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id WHERE oi.price > 500;",
    "prompt_token_number": 609,
    "response_token_number": 39
},
{
    "id": 33131,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Gene_Publication': ['gene_id', 'publication_id'], 'Publication': ['title', 'publication_id', 'publication_date', 'journal_name']}. \n# the user question is: Retrieve the names of all publications and their associated genes that have been published in a journal with the word \"Science\" in the name and have a gene name that contains the word \"transcription\" or \"regulation\".. \n#SQL query: SELECT Publication.title, Gene.gene_name FROM Publication JOIN Gene_Publication ON Publication.publication_id = Gene_Publication.publication_id JOIN Gene ON Gene_Publication.gene_id = Gene.gene_id WHERE Publication.journal_name LIKE '%Science%' AND (Gene.gene_name LIKE '%transcription%' OR Gene.gene_name LIKE '%regulation%');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and total revenue of all products that have been sold more than 50 times:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total revenue of all products that have been sold more than 50 times:",
    "output": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_revenue FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING SUM(oi.quantity) > 50;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT products.name, SUM(order_items.price * order_items.quantity) AS total_revenue\nFROM products\nJOIN order_items ON products.product_id = order_items.product_id\nGROUP BY products.name\nHAVING SUM(order_items.quantity) > 50;",
    "prompt_token_number": 441,
    "response_token_number": 50
},
{
    "id": 33132,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Event': ['event_id', 'event_name', 'event_date', 'location_id', 'event_category_id', 'event_type_id', 'location', 'venue_id', 'start_date', 'end_date', 'category', 'event_code', 'EVT', 'organizer_id', 'duration', 'name', 'Expo', 'Tech', 'country', 'category_id', 'city', 'ticket_price', 'date', 'start_time', 'end_time', 'min_age_requirement', 'event_type', 'capacity', 'registration_deadline', 'num_attendees', 'min_age', 'duration_hours', 'registration_fee', 'price'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID']}. \n# the user question is: What is the name of the event that has the highest total revenue from registration fees?. \n#SQL query: SELECT Event.event_name, SUM(Registration.fee) AS total_revenue FROM Event INNER JOIN Registration ON Event.event_id = Registration.event_id GROUP BY Event.event_id ORDER BY total_revenue DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and average rating of all products that have been reviewed by customers with a rating of 5:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and average rating of all products that have been reviewed by customers with a rating of 5:",
    "output": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id JOIN customers c ON r.customer_id = c.customer_id WHERE r.rating = 5 GROUP BY p.product_id;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "customers": [
            "customer_id",
            "name",
            "state",
            "customer_group",
            "address",
            "email",
            "total_value",
            "first_name",
            "last_name",
            "phone",
            "id",
            "customer_name"
        ]
    },
    "response_text": "SELECT products.name, AVG(reviews.rating) as average_rating\nFROM products\nINNER JOIN reviews ON products.product_id = reviews.product_id\nWHERE reviews.rating = 5\nGROUP BY products.product_id;",
    "prompt_token_number": 526,
    "response_token_number": 41
},
{
    "id": 33133,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Titanic': ['Age', 'Sex', 'Survived', 'Fare', 'Pclass', 'SibSp', 'Parch', 'Embarked', 'Cabin']}. \n# the user question is: What is the number of passengers in the 'Titanic' dataset who have an 'Age' value between 20 and 30 (inclusive), have a 'Pclass' of 2 or 3, and have survived?. \n#SQL query: SELECT COUNT(*) FROM Titanic WHERE Age BETWEEN 20 AND 30 AND Pclass IN (2,3) AND Survived = 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and total revenue of all completed orders in the past year, grouped by customer:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total revenue of all completed orders in the past year, grouped by customer:",
    "output": "SELECT c.name, SUM(oi.quantity * oi.price) AS total_revenue FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id WHERE o.shipped_date IS NOT NULL AND o.order_date >= DATE('now', '-12 months') GROUP BY c.customer_id;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ],
        "customers": [
            "customer_id",
            "name",
            "state",
            "customer_group",
            "address",
            "email",
            "total_value",
            "first_name",
            "last_name",
            "phone",
            "id",
            "customer_name"
        ]
    },
    "response_text": "SELECT customers.name, SUM(order_items.quantity * order_items.price) as Total_Revenue\nFROM customers \nJOIN orders ON customers.customer_id = orders.customer_id \nJOIN order_items ON orders.order_id = order_items.order_id \nWHERE orders.date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() \nGROUP BY customers.name;",
    "prompt_token_number": 362,
    "response_token_number": 70
},
{
    "id": 33135,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Courses': ['course_name', 'course_id', 'teacher_id', 'department_id', 'subject_id', 'level', 'type', 'program_id'], 'Teachers': ['teacher_id', 'last_name', 'first_name', 'date_of_birth', 'teacher_name']}. \n# the user question is: \"Retrieve the list of courses taught by a teacher named 'Emily Anderson'.\". \n#SQL query: SELECT Courses.course_name FROM Courses INNER JOIN Teachers ON Courses.teacher_id = Teachers.teacher_id WHERE Teachers.first_name = 'Emily' AND Teachers.last_name = 'Anderson';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average price of all products that are currently out of stock:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and average price of all products that are currently out of stock:",
    "output": "SELECT p.name, AVG(p.price) AS average_price FROM products p WHERE p.quantity_in_stock = 0 GROUP BY p.product_id;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT products.name, AVG(products.price) FROM products WHERE products.quantity_in_stock = 0;",
    "prompt_token_number": 297,
    "response_token_number": 19
},
{
    "id": 33136,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Event': ['event_id', 'name', 'date', 'location', 'description', 'campaign_id', 'state', 'city', 'venue_id', 'start_date', 'price', 'capacity', 'start_time', 'status', 'location_id', 'host_organization', 'Event_Name', 'Event_ID', 'Date_Held'], 'Attendee': ['attendee_id', 'first_name', 'last_name', 'email', 'phone_number'], 'Attendance': ['attendance_id', 'event_id', 'attendee_id'], 'Venue': ['venue_id', 'capacity', 'city', 'city_pop', 'zip', 'city_name', 'name', 'state_id', 'city_id', 'state', 'country_id']}. \n# the user question is: Retrieve the names and email addresses of all attendees who have registered for events that take place in a city with a population greater than 1 million:. \n#SQL query: SELECT DISTINCT Attendee.first_name, Attendee.last_name, Attendee.email FROM Attendee INNER JOIN Attendance ON Attendee.attendee_id = Attendance.attendee_id INNER JOIN Event ON Attendance.event_id = Event.event_id INNER JOIN Venue ON Event.venue_id = Venue.venue_id WHERE Venue.city_pop > 1000000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and email of all customers who have reviewed a product in the past month:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all customers who have reviewed a product in the past month:",
    "output": "SELECT c.name, c.email FROM customers c JOIN reviews r ON c.customer_id = r.customer_id WHERE r.review_date >= DATE('now', '-1 month') GROUP BY c.customer_id;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "customers": [
            "customer_id",
            "name",
            "state",
            "customer_group",
            "address",
            "email",
            "total_value",
            "first_name",
            "last_name",
            "phone",
            "id",
            "customer_name"
        ]
    },
    "response_text": "SELECT DISTINCT customers.name, customers.email \nFROM customers \nINNER JOIN reviews ON customers.customer_id = reviews.customer_id \nWHERE reviews.review_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
    "prompt_token_number": 441,
    "response_token_number": 39
},
{
    "id": 33138,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'name', 'Product', 'price', 'category_id', 'rating', 'quantity_in_stock'], 'Categories': ['category_id', 'category_name']}. \n# the user question is: Get the count of products in each category, sorted in descending order. \n#SQL query: SELECT c.category_name, COUNT(*) AS product_count FROM Categories c JOIN Products p ON c.category_id = p.category_id GROUP BY c.category_name ORDER BY product_count DESC;  These examples cover different query scenarios such as multiple condition filtering, negation, date manipulation, and ordering results. Adapt the queries to match your specific database structure and naming conventions as needed.\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of the 5 most expensive products:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of the 5 most expensive products:",
    "output": "SELECT name, price FROM products ORDER BY price DESC LIMIT 5;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT name, price FROM products ORDER BY price DESC LIMIT 5;",
    "prompt_token_number": 314,
    "response_token_number": 14
},
{
    "id": 33140,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Programs': ['program_id', 'program_name', 'program_description', 'start_date', 'end_date', 'status', 'Program'], 'Goals': ['goal_id', 'goal_name', 'goal_description', 'goal_due_date', 'user_id', 'program_id', 'goal_target', 'goal_type', 'goal_end_date', 'goal_target_date', 'goal_start_date', 'goal_status', 'goal_value']}. \n# the user question is: Find the name and email address of the user who has the most completed goals in the program with ID 2:. \n#SQL query: SELECT Users.first_name, Users.last_name, Users.email, COUNT(Goals.goal_id) AS num_completed_goals FROM Users JOIN Goals ON Users.user_id = Goals.user_id JOIN Programs ON Goals.program_id = Programs.program_id WHERE Programs.program_id = 2 AND Goals.goal_status = 'Completed' GROUP BY Users.user_id ORDER BY num_completed_goals DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of all products that are currently in stock and have not been sold in the past month:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of all products that are currently in stock and have not been sold in the past month:",
    "output": "SELECT name, price FROM products WHERE quantity_in_stock > 0 AND last_sold_date < DATE('now', '-1 month');",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT products.name, products.price FROM products WHERE products.quantity_in_stock > 0 AND products.last_sold_date < DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
    "prompt_token_number": 427,
    "response_token_number": 33
},
{
    "id": 33141,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Companies': ['industry', 'company_name', 'revenue', 'company_id', 'employee_count'], 'Opportunities': ['closing_date', 'opportunity_id', 'company_id', 'stage', 'name', 'value', 'Negotiation', 'Closed', 'Won', 'Prospect', 'Qualified']}. \n# the user question is: List the companies and their total revenue for companies that have at least one opportunity in the 'Qualified' stage and one opportunity in the 'Closed-Won' stage.. \n#SQL query: SELECT c.company_name, c.revenue FROM Companies c INNER JOIN Opportunities o ON c.company_id = o.company_id WHERE o.stage IN ('Qualified', 'Closed-Won') GROUP BY c.company_name, c.revenue HAVING COUNT(DISTINCT o.stage) > 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and number of reviews for all products, sorted by the number of reviews in descending order:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and number of reviews for all products, sorted by the number of reviews in descending order:",
    "output": "SELECT p.name, COUNT(r.review_id) AS review_count FROM products p LEFT JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id ORDER BY review_count DESC;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT p.name, COUNT(r.review_id) as review_count \nFROM products p\nINNER JOIN reviews r ON p.product_id = r.product_id\nGROUP BY p.name\nORDER BY review_count DESC;",
    "prompt_token_number": 383,
    "response_token_number": 41
},
{
    "id": 33142,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Book': ['series_id', 'publication_year', 'title', 'id', 'author_id', 'publisher_id', 'published_year', 'word_count', 'publication_date', 'value', 'pages', 'year', 'language_id', 'publish_date', 'price', 'genre_id'], 'Book_Plot_Twist': ['plot_twist_id', 'book_id'], 'Plot_Twist': ['id', 'description'], 'Author': ['id', 'birth_year', 'name', 'gender', 'first_name', 'last_name', 'nationality', 'author_id'], 'Review': ['book_id', 'rating', 'reviewer_name', 'name', 'id', 'reader_id'], 'Book_Genre': ['book_id', 'genre_id'], 'Genre': ['id', 'name']}. \n# the user question is: Find all authors who have written books that have a plot twist involving a mistaken identity and have been reviewed by at least 4 reviewers with an average rating of 4 stars or higher, but exclude books that have a genre of \"Thriller\".. \n#SQL query: SELECT DISTINCT Author.name FROM Author INNER JOIN Book ON Author.id = Book.author_id INNER JOIN Book_Plot_Twist AS bpt ON Book.id = bpt.book_id INNER JOIN Plot_Twist ON bpt.plot_twist_id = Plot_Twist.id AND Plot_Twist.description LIKE '%mistaken identity%' INNER JOIN Review ON Book.id = Review.book_id INNER JOIN Book_Genre AS bg ON Book.id = bg.book_id INNER JOIN Genre ON bg.genre_id = Genre.id AND Genre.name != 'Thriller' GROUP BY Author.name HAVING COUNT(DISTINCT Review.reviewer_name) >= 4 AND AVG(Review.rating) >= 4;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and total revenue of all orders in the past year, grouped by customer and sorted by total revenue in descending order:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total revenue of all orders in the past year, grouped by customer and sorted by total revenue in descending order:",
    "output": "SELECT c.name, SUM(oi.quantity * oi.price) AS total_revenue FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id WHERE o.shipped_date IS NOT NULL AND o.order_date >= DATE('now', '-12 months') GROUP BY c.customer_id ORDER BY total_revenue DESC;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ],
        "customers": [
            "customer_id",
            "name",
            "state",
            "customer_group",
            "address",
            "email",
            "total_value",
            "first_name",
            "last_name",
            "phone",
            "id",
            "customer_name"
        ]
    },
    "response_text": "SELECT customers.name, SUM(order_items.quantity * order_items.price) AS total_revenue \nFROM customers \nINNER JOIN orders ON customers.customer_id = orders.customer_id \nINNER JOIN order_items ON orders.order_id = order_items.order_id \nWHERE orders.order_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) AND CURRENT_DATE \nGROUP BY customers.name \nORDER BY total_revenue DESC;",
    "prompt_token_number": 612,
    "response_token_number": 79
},
{
    "id": 33143,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'price', 'manufacturer_id', 'avg_rating', 'color', 'category_id', 'review_count', 'quantity', 'max_rating', 'min_rating', 'max_review_count'], 'Manufacturers': ['manufacturer_id', 'manufacturer_name']}. \n# the user question is: \"Find the manufacturers with the most products.\". \n#SQL query: SELECT m.manufacturer_id, m.manufacturer_name, COUNT(p.product_id) AS total_products FROM Manufacturers m JOIN Products p ON m.manufacturer_id = p.manufacturer_id GROUP BY m.manufacturer_id, m.manufacturer_name ORDER BY total_products DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and email of all customers who have not placed an order in the past 3 months:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all customers who have not placed an order in the past 3 months:",
    "output": "SELECT name, email FROM customers WHERE customer_id NOT IN ( SELECT DISTINCT customer_id FROM orders WHERE order_date >= DATE('now', '-3 months') );",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ],
        "customers": [
            "customer_id",
            "name",
            "state",
            "customer_group",
            "address",
            "email",
            "total_value",
            "first_name",
            "last_name",
            "phone",
            "id",
            "customer_name"
        ]
    },
    "response_text": "SELECT c.name, c.email FROM customers c WHERE c.customer_id NOT IN (SELECT o.customer_id FROM orders o WHERE o.date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH));",
    "prompt_token_number": 341,
    "response_token_number": 38
},
{
    "id": 33144,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Episode': ['rating', 'show_id', 'guest_id', 'episode_number', 'episode_id', 'air_date', 'host_id', 'year', 'month', 'max_rating']}. \n# the user question is: \"Find the episodes with the highest rating in each month of the year, along with the corresponding air dates.\". \n#SQL query: SELECT Episode.episode_id, Episode.air_date, Episode.rating FROM Episode WHERE (MONTH(Episode.air_date), YEAR(Episode.air_date), Episode.rating) IN (SELECT MONTH(Episode.air_date), YEAR(Episode.air_date), MAX(Episode.rating) FROM Episode GROUP BY MONTH(Episode.air_date), YEAR(Episode.air_date)) ORDER BY Episode.air_date ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name, email, and total number of products purchased by each customer, sorted by the total number of products in descending order:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name, email, and total number of products purchased by each customer, sorted by the total number of products in descending order:",
    "output": "SELECT c.name, c.email, SUM(oi.quantity) AS total_products_purchased FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id GROUP BY c.customer_id ORDER BY total_products_purchased DESC;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ],
        "customers": [
            "customer_id",
            "name",
            "state",
            "customer_group",
            "address",
            "email",
            "total_value",
            "first_name",
            "last_name",
            "phone",
            "id",
            "customer_name"
        ]
    },
    "response_text": "SELECT customers.name, customers.email, SUM(order_items.quantity) as total_products_purchased\nFROM customers\nJOIN orders ON customers.customer_id = orders.customer_id\nJOIN order_items ON orders.order_id = order_items.order_id\nGROUP BY customers.customer_id\nORDER BY total_products_purchased DESC;",
    "prompt_token_number": 399,
    "response_token_number": 59
},
{
    "id": 33145,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'price', 'manufacturer_id', 'avg_rating', 'color', 'category_id', 'review_count', 'quantity', 'max_rating', 'min_rating', 'max_review_count'], 'ProductReviews': ['rating', 'product_id', 'review_id', 'user_id', 'customer_id', 'category_id']}. \n# the user question is: \"Retrieve the products that have not received any reviews with a rating below a certain threshold.\". \n#SQL query: SELECT p.product_id, p.product_name FROM Products p LEFT JOIN ProductReviews pr ON p.product_id = pr.product_id WHERE pr.review_id IS NULL OR pr.rating >= 4.0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products with an average rating of 4.5 or higher:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and average rating of all products with an average rating of 4.5 or higher:",
    "output": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id HAVING AVG(r.rating) >= 4.5;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "reviews": [
            "rating",
            "product_id",
            "review_id",
            "project_id",
            "user_id",
            "review_date",
            "customer_id"
        ],
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT p.name, AVG(r.rating) as average_rating\nFROM products p \nJOIN reviews r \nON p.product_id = r.product_id \nGROUP BY p.name \nHAVING AVG(r.rating) >= 4.5;",
    "prompt_token_number": 359,
    "response_token_number": 46
},
{
    "id": 33146,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['price', 'product_name', 'product_id', 'product_category', 'glassware_item_id', 'name', 'id', 'description'], 'Glassware_Items': ['glassware_type_id', 'quantity', 'glassware_item_id', 'product_id', 'glassware_item_name', 'glassware_item_description', 'etching_id', 'price', 'item_name', 'material', 'glassware_item_type_id', 'stock', 'design_id', 'discontinued', 'supplier_id', 'quantity_in_stock', 'unit_price', 'quantity_supplied'], 'Shipment': ['shipment_date', 'shipment_method', 'shipment_id', 'order_id', 'date'], 'Shipment_Items': ['quantity', 'shipment_id', 'etching_glassware_item_id', 'glassware_item_id', 'shipment_item_id']}. \n# the user question is: Retrieve the list of shipments along with the date of the shipment and the total revenue generated from sales of glassware items in each shipment, where the revenue is greater than $2000 and the shipment method is 'USPS', sorted by revenue in descending order.. \n#SQL query: SELECT Shipment.shipment_id, Shipment.date, SUM(Shipment_Items.quantity * Products.price) AS total_revenue FROM Shipment INNER JOIN Shipment_Items ON Shipment.shipment_id = Shipment_Items.shipment_id INNER JOIN Glassware_Items ON Shipment_Items.glassware_item_id = Glassware_Items.glassware_item_id INNER JOIN Products ON Glassware_Items.product_id = Products.product_id WHERE Shipment.shipment_method = 'USPS' GROUP BY Shipment.shipment_id HAVING total_revenue > 2000.00 ORDER BY total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and price of all products that have been ordered more than 100 times:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of all products that have been ordered more than 100 times:",
    "output": "SELECT p.name, p.price FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING SUM(oi.quantity) > 100;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT products.name, products.price FROM products INNER JOIN order_items ON products.product_id = order_items.product_id GROUP BY products.product_id HAVING SUM(order_items.quantity) > 100;",
    "prompt_token_number": 569,
    "response_token_number": 37
},
{
    "id": 33147,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'team_id', 'completed_by', 'skill_id', 'first_name', 'manager_id', 'last_name', 'job_title', 'office_location', 'role', 'years_of_experience', 'department_id', 'salary'], 'Tasks': ['assigned_to', 'deadline', 'project_id', 'task_id', 'priority_level', 'status', 'completed_by', 'created_at', 'completed_at', 'priority', 'created_by', 'due_date', 'user_id', 'assigned_team', 'team_id', 'started_at', 'assigned_skill', 'requested_by', 'assigned_at', 'assigned_by', 'completion_date', 'assignment_date', 'skill_name', 'task_status', 'department_name', 'task_assigned_date', 'task_completion_date'], 'User_Roles': ['user_id', 'role_id'], 'Roles': ['role_id', 'role_name']}. \n# the user question is: Find the user who has completed the most tasks in the last 7 days and has the role of \"Team Leader\":. \n#SQL query: SELECT Users.username, COUNT(Tasks.task_id) AS completed_task_count FROM Users JOIN Tasks ON Users.user_id = Tasks.completed_by JOIN User_Roles ON Users.user_id = User_Roles.user_id JOIN Roles ON User_Roles.role_id = Roles.role_id WHERE Tasks.completed_at >= DATE('now', '-7 day') AND Roles.role_name = 'Team Leader' GROUP BY Users.user_id ORDER BY completed_task_count DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and price of all products that have not been ordered in the past 6 months:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of all products that have not been ordered in the past 6 months:",
    "output": "SELECT name, price FROM products WHERE product_id NOT IN ( SELECT DISTINCT product_id FROM order_items JOIN orders ON order_items.order_id = orders.order_id WHERE orders.order_date >= DATE('now', '-6 months') );",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ],
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT products.name, products.price FROM products WHERE products.product_id NOT IN (SELECT order_items.product_id FROM order_items WHERE order_items.order_date > DATE('now', '-6 month'));",
    "prompt_token_number": 586,
    "response_token_number": 37
},
{
    "id": 33154,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Species': ['species_id', 'name', 'common_name', 'classification_id', 'genus', 'family_id', 'scientific_name', 'class_id', 'taxonomy', 'category', 'conservation_status', 'population_trend', 'habitat', 'migration_pattern', 'min_depth_range', 'max_depth_range', 'body_size', 'body_temperature_range', 'migratory_behavior', 'species_name', 'discovery_year', 'class_name', 'is_venomous', 'order_name'], 'SamplingLocations': ['location_id', 'location_name', 'latitude', 'longitude', 'depth', 'habitat_id', 'temperature_range', 'ocean_id', 'ocean', 'Reef', 'Great', 'Barrier'], 'Samples': ['sample_id', 'location_id', 'species_id', 'abundance', 'biomass', 'sample_date', 'depth'], 'MorphologyData': ['morphology_id', 'species_id', 'measurement_type', 'measurement_value', 'measurement_unit', 'measurement_date', 'value', 'unit']}. \n# the user question is: Retrieve the location name, species name, and measurement type and value of all morphology data records with a measurement value greater than 10:. \n#SQL query: SELECT SamplingLocations.location_name, Species.name, MorphologyData.measurement_type, MorphologyData.measurement_value FROM SamplingLocations INNER JOIN Samples ON SamplingLocations.location_id = Samples.location_id INNER JOIN Species ON Samples.species_id = Species.species_id INNER JOIN MorphologyData ON Species.species_id = MorphologyData.species_id WHERE MorphologyData.measurement_value > 10;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Find the top 3 most expensive products in the database.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the top 3 most expensive products in the database.",
    "output": "SELECT name, price FROM products ORDER BY price DESC LIMIT 3;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT name, price FROM products ORDER BY price DESC LIMIT 3;",
    "prompt_token_number": 511,
    "response_token_number": 14
},
{
    "id": 33156,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Patient': ['patient_id', 'last_name', 'first_name', 'date_of_birth'], 'Insurance': ['insurance_provider', 'patient_id', 'policy_number', 'insurance_id', 'insurance_provider_id', 'coverage_type_id'], 'Appointment': ['chiropractor_id', 'patient_id', 'appointment_date_time', 'appointment_id', 'insurance_id'], 'Chiropractor': ['first_name', 'last_name', 'chiropractor_id'], 'Prescriptions': ['prescription_name', 'appointment_id', 'prescription_category', 'patient_id', 'medication_id']}. \n# the user question is: Find the names of all chiropractors who have had appointments with patients who have an insurance policy number starting with '99' and have also prescribed a painkiller:. \n#SQL query: SELECT DISTINCT c.first_name, c.last_name FROM Chiropractor c INNER JOIN Appointment a ON c.chiropractor_id = a.chiropractor_id INNER JOIN Patient p ON a.patient_id = p.patient_id INNER JOIN Insurance i ON p.patient_id = i.patient_id INNER JOIN Prescriptions pr ON a.appointment_id = pr.appointment_id WHERE i.policy_number LIKE '99%' AND pr.prescription_category = 'Painkillers';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product']} and \n# the user question: Find all the products that were ordered more than 10 times in total.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find all the products that were ordered more than 10 times in total.",
    "output": "SELECT products.name, SUM(orders.quantity) as total_orders FROM products JOIN orders ON products.id = orders.product_id GROUP BY products.id HAVING total_orders > 10;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ],
        "orders": [
            "order_id",
            "user_id",
            "created_at",
            "date",
            "order_date",
            "customer_id",
            "shipped_date",
            "id",
            "rating",
            "quantity",
            "product_id",
            "total_amount",
            "ship_country",
            "product"
        ]
    },
    "response_text": "SELECT p.product_name \nFROM products p \nINNER JOIN orders o ON p.product_id = o.product_id \nGROUP BY p.product_name \nHAVING COUNT(o.order_id) > 10;",
    "prompt_token_number": 486,
    "response_token_number": 39
},
{
    "id": 33158,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Items': ['item_id', 'game_id'], 'Items': ['item_name', 'item_id', 'item_description', 'rarity_id'], 'Game_Levels': ['level_id', 'game_id'], 'Levels': ['level_name', 'level_id', 'difficulty_id', 'duration_id']}. \n# the user question is: Find the names of all games that have a level with a name containing \"New York\" and an item with a name containing \"sniper rifle\".. \n#SQL query: SELECT DISTINCT Games.game_title FROM Games INNER JOIN Game_Levels ON Games.game_id = Game_Levels.game_id INNER JOIN Levels ON Game_Levels.level_id = Levels.level_id INNER JOIN Game_Items ON Games.game_id = Game_Items.game_id INNER JOIN Items ON Game_Items.item_id = Items.item_id WHERE Levels.level_name LIKE '%New York%' AND Items.item_name LIKE '%sniper rifle%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the product ID, name, and price for all available products with a price greater than 500.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the product ID, name, and price for all available products with a price greater than 500.",
    "output": "SELECT product_id, product_name, product_price FROM products WHERE product_price > 500;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT product_id, name, price FROM products WHERE price > 500 AND quantity_in_stock > 0;",
    "prompt_token_number": 394,
    "response_token_number": 22
},
{
    "id": 33159,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Cases': ['Case_ID', 'Case_Name', 'Case_Description', 'Client_ID', 'Case_Status', 'Lawyer_ID', 'Last_Updated', 'Date_Opened', 'Date_Closed', 'Status', 'Case_Closed_Date', 'Practice_Area_ID', 'Case_Manager_ID', 'Open_Date', 'Closed', 'Case_End_Date', 'Case_Start_Date', 'Firm_ID', 'Office_ID', 'CaseStatus', 'CaseNumber', 'ClientID', 'CaseTitle', 'CaseTypeID', 'CaseType', 'CourtName', 'ClosedDate', 'Settlement', 'ID', 'HearingDate', 'ClosingDate', 'AppealStatus', 'LawyerID', 'OpeningDate', 'verdict', 'judge_id', 'defendant_state', 'plaintiff_state', 'lawyer_id'], 'Lawyers': ['Lawyer_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'Specialization', 'Department_ID', 'City', 'Email_Address', 'Phone_Number', 'Hourly_Rate', 'Practice_Area_ID', 'Billing_Rate_ID', 'Firm_ID', 'FirmID', 'LawSchoolID', 'HourlyRate', 'Name', 'ID', 'ExperienceYears', 'years_of_experience', 'state', 'lawyer_id'], 'Case_Categories': ['Category_ID', 'Case_ID', 'Category_Name']}. \n# the user question is: List the names of lawyers who have worked on cases in at least two different categories:. \n#SQL query: SELECT Lawyers.First_Name, Lawyers.Last_Name FROM Lawyers JOIN Cases ON Lawyers.Lawyer_ID = Cases.Lawyer_ID JOIN Case_Categories ON Cases.Case_ID = Case_Categories.Case_ID GROUP BY Lawyers.Lawyer_ID HAVING COUNT(DISTINCT Case_Categories.Category_ID) >= 2;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the total revenue generated by each product in descending order.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the total revenue generated by each product in descending order.",
    "output": "SELECT product_id, SUM(quantity * item_price) AS revenue FROM order_items GROUP BY product_id ORDER BY revenue DESC;",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "order_items": [
            "order_id",
            "product_id",
            "quantity",
            "price",
            "order_item_id",
            "order_date",
            "item_price"
        ]
    },
    "response_text": "SELECT product_id, SUM(quantity * price) AS total_revenue FROM order_items GROUP BY product_id ORDER BY total_revenue DESC;",
    "prompt_token_number": 517,
    "response_token_number": 27
},
{
    "id": 33160,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Customers': ['CustomerName', 'CustomerID', 'Phone', 'Email', 'Country', 'Address', 'City', 'ContactName', 'ContactTitle', 'Name', 'ID'], 'Orders': ['CustomerID', 'OrderDate', 'OrderID', 'TotalAmount', 'ShippedDate', 'PaidAmount', 'ShipperID', 'ShipCity', 'DeliveredDate', 'EmployeeID', 'ShipVia', 'Amount']}. \n# the user question is: List all customers who have placed an order in the year 2021 and also in the year 2022, ordered by customer name in ascending order:. \n#SQL query: SELECT Customers.CustomerID, Customers.CustomerName FROM Customers INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID WHERE strftime('%Y', Orders.OrderDate) IN ('2021', '2022') GROUP BY Customers.CustomerID, Customers.CustomerName HAVING COUNT(DISTINCT strftime('%Y', Orders.OrderDate)) = 2 ORDER BY Customers.CustomerName ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the number of products whose price is greater than 50 and whose category is \"Electronics\".,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the number of products whose price is greater than 50 and whose category is \"Electronics\".",
    "output": "SELECT COUNT(*) FROM products WHERE price > 50 AND category = 'Electronics';",
    "schema": "interior_decorating",
    "processed_schema_content": {
        "products": [
            "product_id",
            "price",
            "description",
            "name",
            "width",
            "color",
            "Brown",
            "Black",
            "added_to_catalog",
            "category_id",
            "stock",
            "discount",
            "quantity_in_stock",
            "last_sold_date",
            "id",
            "rating",
            "product_price",
            "product_name",
            "category",
            "quantity",
            "supplier_id"
        ]
    },
    "response_text": "SELECT COUNT(*) FROM products WHERE price > 50 AND category = 'Electronics';",
    "prompt_token_number": 391,
    "response_token_number": 17
},
{
    "id": 33165,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Order_Items': ['order_id', 'product_id', 'glassware_item_id', 'quantity', 'unit_price', 'order_item_id', 'price', 'item_cost', 'item_id', 'order_date', 'item_price'], 'Glassware_Items': ['glassware_type_id', 'quantity', 'glassware_item_id', 'product_id', 'glassware_item_name', 'glassware_item_description', 'etching_id', 'price', 'item_name', 'material', 'glassware_item_type_id', 'stock', 'design_id', 'discontinued', 'supplier_id', 'quantity_in_stock', 'unit_price', 'quantity_supplied']}. \n# the user question is: Retrieve the list of glassware items that have been ordered the most, along with their names and the number of times they have been ordered.. \n#SQL query: SELECT Glassware_Items.item_name, COUNT(Order_Items.order_id) AS num_orders FROM Glassware_Items INNER JOIN Order_Items ON Glassware_Items.glassware_item_id = Order_Items.glassware_item_id GROUP BY Glassware_Items.glassware_item_id ORDER BY num_orders DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID']} and \n# the user question: Retrieve the names of all advertisers whose contact phone numbers contain the digits \"555\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the names of all advertisers whose contact phone numbers contain the digits \"555\":",
    "output": "SELECT name FROM Advertisers WHERE contact_phone LIKE '%555%';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ]
    },
    "response_text": "SELECT name FROM Advertisers WHERE contact_phone LIKE '%555%';",
    "prompt_token_number": 363,
    "response_token_number": 14
},
{
    "id": 33166,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film_Genre': ['film_id', 'genre_id'], 'Genre': ['name', 'genre_id'], 'Rating': ['user_id', 'film_id', 'score', 'rating', 'rating_id', 'genre_id']}. \n# the user question is: Find the genres that have not been rated by any user:. \n#SQL query: SELECT Genre.name FROM Genre WHERE Genre.genre_id NOT IN ( SELECT DISTINCT Film_Genre.genre_id FROM Film_Genre INNER JOIN Rating ON Film_Genre.film_id = Rating.film_id ) ;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate']} and \n# the user question: Retrieve the name, start date, and end date of all active campaigns with a budget greater than $1 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name, start date, and end date of all active campaigns with a budget greater than $1 million:",
    "output": "SELECT name, start_date, end_date FROM Campaigns WHERE status = 'active' AND budget > 1000000;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ]
    },
    "response_text": "SELECT name, start_date, end_date FROM Campaigns WHERE status = 'active' AND budget > 1000000;",
    "prompt_token_number": 284,
    "response_token_number": 25
},
{
    "id": 33167,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'employees': ['salary', 'name', 'hire_date', 'title', 'employee_name', 'department', 'email', 'last_name', 'employee_id', 'first_name']}. \n# the user question is: Display the names and salaries of all employees who work in the marketing department.. \n#SQL query: SELECT employee_name, salary FROM employees WHERE department = 'Marketing';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and type of all creatives belonging to campaigns that target users interested in \"Running\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives belonging to campaigns that target users interested in \"Running\":",
    "output": "SELECT name, type FROM Creatives WHERE campaign_id IN ( SELECT campaign_id FROM Targeting_Options WHERE targeting_type = 'interests' AND option_value = 'Running' );",
    "schema": "advertising",
    "processed_schema_content": {
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT name, type FROM Creatives WHERE campaign_id IN (SELECT campaign_id FROM Targeting_Options WHERE targeting_type = 'Running');",
    "prompt_token_number": 224,
    "response_token_number": 26
},
{
    "id": 33168,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months'], 'Story': ['story_id', 'headline', 'content', 'date_published', 'outlet_id', 'campaign_id', 'date', 'journalist_id', 'sentiment_score', 'body', 'views', 'shares', 'likes', 'clicks', 'impressions', 'comments', 'text', 'publication_date', 'word_count'], 'Influencer': ['influencer_id', 'first_name', 'last_name', 'email', 'phone_number', 'followers', 'profile', 'age'], 'Endorsement': ['endorsement_id', 'influencer_id', 'product_name', 'date_posted', 'campaign_id', 'fee'], 'MediaOutlet': ['outlet_id', 'name', 'outlet_type', 'state', 'city', 'contact_info', 'rating_id', 'language', 'location_id', 'email', 'circulation']}. \n# the user question is: Retrieve the names and types of all media outlets that have been featured in a story associated with a campaign that has at least one endorsement from an influencer with the keyword \"fitness\" in their profile and the campaign has been featured in a story with the sentiment score less than 0.4:. \n#SQL query: SELECT DISTINCT MediaOutlet.name, MediaOutlet.outlet_type FROM MediaOutlet INNER JOIN Story ON MediaOutlet.outlet_id = Story.outlet_id INNER JOIN Campaign ON Story.campaign_id = Campaign.campaign_id INNER JOIN Endorsement ON Campaign.campaign_id = Endorsement.campaign_id INNER JOIN Influencer ON Endorsement.influencer_id = Influencer.influencer_id WHERE Influencer.profile LIKE '%fitness%' AND Story.sentiment_score < 0.4;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region']} and \n# the user question: Retrieve the name and category of all websites with more than 100,000 visitors per month:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites with more than 100,000 visitors per month:",
    "output": "SELECT name, category FROM Websites WHERE traffic > 100000;",
    "schema": "advertising",
    "processed_schema_content": {
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ]
    },
    "response_text": "SELECT name, category FROM Websites WHERE traffic > 100000;",
    "prompt_token_number": 574,
    "response_token_number": 13
},
{
    "id": 33170,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Contractors': ['contractor_id', 'Builders', 'contractor_name', 'Pro'], 'Projects': ['status', 'end_date', 'start_date', 'project_name', 'contractor_id', 'project_id', 'user_id', 'category_id'], 'Project_Services': ['service_id', 'project_id', 'contractor_id', 'status', 'price', 'service_count', 'rating', 'avg_rating']}. \n# the user question is: \"Get the project names and the corresponding contractors for projects that have completed services by a contractor named 'Home Renovators'.\". \n#SQL query: SELECT P.project_name, C.contractor_name FROM Projects P JOIN Project_Services PS ON P.project_id = PS.project_id JOIN Contractors C ON PS.contractor_id = C.contractor_id WHERE PS.status = 'Completed' AND C.contractor_name = 'Home Renovators';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate']} and \n# the user question: Retrieve the names and email addresses of advertisers who have campaigns that ended in the first quarter of 2022:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the names and email addresses of advertisers who have campaigns that ended in the first quarter of 2022:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id WHERE Campaigns.end_date BETWEEN '2022-01-01' AND '2022-03-31';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ]
    },
    "response_text": "SELECT A.name, A.contact_email FROM Advertisers A JOIN Campaigns C ON A.advertiser_id = C.advertiser_id WHERE C.end_date BETWEEN '2022-01-01' AND '2022-03-31';",
    "prompt_token_number": 377,
    "response_token_number": 48
},
{
    "id": 33173,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'loan': ['return_date', 'loan_date', 'artwork_id', 'lender_id', 'location_id', 'start_date', 'artwork_location_id'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']}. \n# the user question is: Find the titles and mediums of all artwork in the \"The Uffizi Gallery\" that were created by \"Raphael\" and are not currently on loan.. \n#SQL query: SELECT a.title, a.medium FROM artwork AS a INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS l ON al.location_id = l.location_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id WHERE ar.last_name = 'Raphael' AND l.name = 'The Uffizi Gallery' AND al.end_date IS NULL AND a.artwork_id NOT IN (SELECT artwork_id FROM loan WHERE return_date IS NULL);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at']} and \n# the user question: Retrieve the name and platform of all apps that have been downloaded more than 500,000 times and have a category of \"Sports\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and platform of all apps that have been downloaded more than 500,000 times and have a category of \"Sports\":",
    "output": "SELECT name, platform FROM Apps WHERE downloads > 500000 AND category = 'Sports';",
    "schema": "advertising",
    "processed_schema_content": {
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ]
    },
    "response_text": "SELECT name, platform FROM Apps WHERE downloads > 500000 AND category = 'Sports';",
    "prompt_token_number": 573,
    "response_token_number": 18
},
{
    "id": 33174,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Project_Materials': ['project_id', 'material_id', 'quantity', 'total_quantity'], 'Materials': ['material_id', 'material_name', 'cost_per_unit', 'unit_of_measurement', 'unit_quantity', 'unit_cost', 'quantity', 'unit_price', 'material_type_id', 'quantity_in_stock', 'material_unit', 'quantity_available', 'reorder_level', 'stock_level'], 'Project_Statuses': ['project_status_name', 'project_status_id']}. \n# the user question is: List all the materials that have been used on a project with a project status of \"Completed\" and have a total quantity of more than 1000.. \n#SQL query: SELECT DISTINCT m.material_name FROM Materials m INNER JOIN Project_Materials pm ON m.material_id = pm.material_id INNER JOIN Projects p ON pm.project_id = p.project_id INNER JOIN Project_Statuses ps ON p.project_status_id = ps.project_status_id WHERE pm.total_quantity > 1000 AND ps.project_status_name = 'Completed';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with \"news\" in its category:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with \"news\" in its category:",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id WHERE Websites.category LIKE '%news%' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT c.name, c.budget \nFROM Campaigns c \nINNER JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id \nINNER JOIN Websites w ON ap.website_id = w.website_id \nWHERE w.category LIKE '%news%';",
    "prompt_token_number": 622,
    "response_token_number": 52
},
{
    "id": 33175,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'products': ['product_name', 'product_id', 'price', 'category_id', 'rating', 'category', 'name']}. \n# the user question is: Count the number of products with a price greater than $100.. \n#SQL query: SELECT COUNT(*) FROM products WHERE price > 100\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate']} and \n# the user question: Retrieve the name, email, and phone number of all advertisers who have at least one campaign that is still active:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name, email, and phone number of all advertisers who have at least one campaign that is still active:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email, Advertisers.contact_phone FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id WHERE Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ]
    },
    "response_text": "SELECT DISTINCT Advertisers.name, Advertisers.contact_email, Advertisers.contact_phone \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nWHERE Campaigns.status = 'active'",
    "prompt_token_number": 256,
    "response_token_number": 49
},
{
    "id": 33177,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Event': ['event_id', 'event_name', 'event_date', 'location_id', 'event_category_id', 'event_type_id', 'location', 'venue_id', 'start_date', 'end_date', 'category', 'event_code', 'EVT', 'organizer_id', 'duration', 'name', 'Expo', 'Tech', 'country', 'category_id', 'city', 'ticket_price', 'date', 'start_time', 'end_time', 'min_age_requirement', 'event_type', 'capacity', 'registration_deadline', 'num_attendees', 'min_age', 'duration_hours', 'registration_fee', 'price'], 'Attendee': ['attendee_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'date_of_birth', 'job_title', 'city', 'age', 'email'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID'], 'Speaker': ['speaker_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'speaker_type', 'department', 'speaker_name'], 'Event_Speaker': ['event_speaker_id', 'event_id', 'speaker_id']}. \n# the user question is: What are the names and email addresses of all attendees who have registered for events with a keynote speaker?. \n#SQL query: SELECT Attendee.first_name, Attendee.last_name, Attendee.email_address FROM Attendee INNER JOIN Registration ON Attendee.attendee_id = Registration.attendee_id INNER JOIN Event ON Registration.event_id = Event.event_id INNER JOIN Event_Speaker ON Event.event_id = Event_Speaker.event_id INNER JOIN Speaker ON Event_Speaker.speaker_id = Speaker.speaker_id WHERE Speaker.speaker_type = 'Keynote';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at']} and \n# the user question: Retrieve the name and number of downloads of all apps that have been updated in the last month:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and number of downloads of all apps that have been updated in the last month:",
    "output": "SELECT name, downloads FROM Apps WHERE updated_at BETWEEN DATE('now', '-1 month') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.downloads FROM Apps WHERE Apps.updated_at > DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);",
    "prompt_token_number": 535,
    "response_token_number": 25
},
{
    "id": 33178,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']}. \n# the user question is: Find the classes with the highest revenue in the last month.. \n#SQL query: SELECT Classes.class_name, COUNT(DISTINCT Enrollments.user_id) * Classes.price AS revenue FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Classes.class_id ORDER BY revenue DESC LIMIT 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and budget of all campaigns that target users interested in \"Fitness\" and have at least one ad placement on an app:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and budget of all campaigns that target users interested in \"Fitness\" and have at least one ad placement on an app:",
    "output": "SELECT Campaigns.name, Campaigns.budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Apps ON Ad_Placements.app_id = Apps.app_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Ad_Placements.app_id IS NOT NULL;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget \nFROM Campaigns \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nINNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nWHERE Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Fitness' AND Ad_Placements.app_id IS NOT NULL;",
    "prompt_token_number": 649,
    "response_token_number": 83
},
{
    "id": 33180,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Employees': ['first_name', 'employee_id', 'last_name', 'hire_date', 'salary', 'job_title_id', 'department_id', 'location_id', 'job_title', 'employee_status_id', 'employee_experience', 'certification_id', 'equipment_rental_cost', 'hourly_rate', 'Salary', 'Department'], 'Task_Employees': ['employee_id', 'task_id', 'hours_worked', 'project_id', 'task_employee_id', 'task_employee_role', 'task_employee_cost', 'task_hours', 'rental_id', 'end_date'], 'Tasks': ['start_date', 'task_name', 'due_date', 'end_date', 'task_id', 'priority', 'task_status', 'project_id', 'task_priority_id', 'task_status_id', 'task_start_date', 'task_end_date', 'task_expected_completion_date', 'task_completion_percentage', 'task_estimated_cost', 'task_due_date', 'actual_end_date', 'actual_start_date', 'task_lead_id', 'actual_cost', 'employee_i', 'task_description']}. \n# the user question is: List all the tasks that have been assigned to an employee who has a salary of more than $80,000.. \n#SQL query: SELECT DISTINCT t.task_name FROM Tasks t INNER JOIN Task_Employees te ON t.task_id = te.task_id INNER JOIN Employees e ON te.employee_id = e.employee_id WHERE e.salary > 80000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Demographics': ['name']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on an app in the \"Food\" category and target users aged 25-45:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on an app in the \"Food\" category and target users aged 25-45:",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Apps ON Ad_Placements.app_id = Apps.app_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id JOIN Demographics ON Targeting_Options.option_value = Demographics.name WHERE Apps.category = 'Food' AND Demographics.name = 'Age: 25-45' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Demographics": [
            "name"
        ]
    },
    "response_text": "SELECT DISTINCT c.name, c.budget \nFROM Campaigns c \nINNER JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id \nINNER JOIN Apps a ON ap.app_id = a.app_id \nINNER JOIN Targeting_Options to ON c.campaign_id = to.campaign_id \nWHERE a.category = 'Food' \nAND to.targeting_type = 'Age' \nAND to.option_value >= 25 \nAND to.option_value <= 45;",
    "prompt_token_number": 585,
    "response_token_number": 95
},
{
    "id": 33181,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Cases': ['Case_ID', 'Case_Name', 'Case_Description', 'Client_ID', 'Case_Status', 'Lawyer_ID', 'Last_Updated', 'Date_Opened', 'Date_Closed', 'Status', 'Case_Closed_Date', 'Practice_Area_ID', 'Case_Manager_ID', 'Open_Date', 'Closed', 'Case_End_Date', 'Case_Start_Date', 'Firm_ID', 'Office_ID', 'CaseStatus', 'CaseNumber', 'ClientID', 'CaseTitle', 'CaseTypeID', 'CaseType', 'CourtName', 'ClosedDate', 'Settlement', 'ID', 'HearingDate', 'ClosingDate', 'AppealStatus', 'LawyerID', 'OpeningDate', 'verdict', 'judge_id', 'defendant_state', 'plaintiff_state', 'lawyer_id'], 'Lawyers': ['Lawyer_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'Specialization', 'Department_ID', 'City', 'Email_Address', 'Phone_Number', 'Hourly_Rate', 'Practice_Area_ID', 'Billing_Rate_ID', 'Firm_ID', 'FirmID', 'LawSchoolID', 'HourlyRate', 'Name', 'ID', 'ExperienceYears', 'years_of_experience', 'state', 'lawyer_id'], 'Invoices': ['Invoice_ID', 'Client_ID', 'Date', 'Amount', 'Case_ID', 'Paid_Date', 'Due_Date', 'Invoice_Date', 'Time_Entry_ID', 'Paid', 'Billed', 'Task_ID', 'Issue_Date', 'Total_Amount', 'Invoice_Number', 'Amount_Billed', 'Invoice_Status', 'Billing_Date', 'Billing_Rate_ID', 'Hours_Billed', 'Amount_Paid', 'Amount_Due', 'Bill_Date', 'ClientID', 'Status', 'Unpaid', 'IssueDate']}. \n# the user question is: List all the invoices issued in the month of January, along with the amount and the name of the lawyer handling the case:. \n#SQL query: SELECT Invoices.Invoice_Number, Invoices.Amount, Lawyers.First_Name || ' ' || Lawyers.Last_Name AS Lawyer_Name FROM Invoices JOIN Cases ON Invoices.Case_ID = Cases.Case_ID JOIN Lawyers ON Cases.Lawyer_ID = Lawyers.Lawyer_ID WHERE strftime('%m', Invoices.Issue_Date) = '01';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name, category, and number of monthly visitors of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name, category, and number of monthly visitors of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\":",
    "output": "SELECT Websites.name, Websites.category, Websites.traffic FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category, Websites.traffic \nFROM Websites \nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Technology';",
    "prompt_token_number": 782,
    "response_token_number": 93
},
{
    "id": 33183,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Customers': ['name', 'customer_id', 'email', 'address'], 'Orders': ['total_amount', 'customer_id', 'order_date', 'order_id', 'processing_time', 'delivery_date']}. \n# the user question is: Get the total revenue generated for each customer, including those who have not placed any orders. \n#SQL query: SELECT c.name, IFNULL(SUM(o.total_amount), 0) AS total_revenue FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id;  These examples cover different query scenarios such as conditional filtering, subqueries, date comparison, and handling of null values. Adapt the queries to match your specific database structure and naming conventions as needed.\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at']} and \n# the user question: Retrieve the name and number of downloads of all apps that have been updated in the last week and have a category of \"Sports\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and number of downloads of all apps that have been updated in the last week and have a category of \"Sports\":",
    "output": "SELECT name, downloads FROM Apps WHERE updated_at BETWEEN DATE('now', '-1 week') AND DATE('now') AND category = 'Sports';",
    "schema": "advertising",
    "processed_schema_content": {
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ]
    },
    "response_text": "SELECT name, downloads FROM Apps WHERE category = 'Sports' AND updated_at >= DATE_SUB(NOW(), INTERVAL 1 WEEK);",
    "prompt_token_number": 287,
    "response_token_number": 26
},
{
    "id": 33184,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['username', 'user_id'], 'Followers': ['user_id', 'follower_user_id', 'follower_id'], 'Orders': ['order_id', 'total_amount', 'user_id', 'coupon_id', 'order_date'], 'Products': ['name', 'product_id', 'price', 'product_name', 'category_id'], 'Order_Items': ['order_id', 'product_id', 'unit_price', 'quantity'], 'Reviews': ['product_id', 'rating', 'review_id', 'post_id', 'user_id']}. \n# the user question is: Show the users who have placed orders for products that have been reviewed by users they follow with a rating higher than 4.. \n#SQL query: SELECT DISTINCT Users.username FROM Users INNER JOIN Orders ON Users.user_id = Orders.user_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Products ON Order_Items.product_id = Products.product_id INNER JOIN Reviews ON Products.product_id = Reviews.product_id INNER JOIN Followers ON Users.user_id = Followers.follower_user_id WHERE Reviews.rating > 4 AND Reviews.user_id = Followers.user_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites and apps that have at least one active ad placement for a campaign that ended in the first quarter of 2022:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites and apps that have at least one active ad placement for a campaign that ended in the first quarter of 2022:",
    "output": "SELECT CASE WHEN Ad_Placements.website_id IS NOT NULL THEN Websites.name ELSE Apps.name END AS placement_name, CASE WHEN Ad_Placements.website_id IS NOT NULL THEN Websites.category ELSE Apps.category END AS placement_category FROM Ad_Placements LEFT JOIN Websites ON Ad_Placements.website_id = Websites.website_id LEFT JOIN Apps ON Ad_Placements.app_id = Apps.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id WHERE Campaigns.end_date BETWEEN '2022-01-01' AND '2022-03-31' AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Websites.name, Websites.category \nFROM Websites \nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nWHERE Campaigns.status = 'active' AND Campaigns.end_date >= '2022-01-01' AND Campaigns.end_date <= '2022-03-31'\nUNION \nSELECT DISTINCT Apps.name, Apps.category \nFROM Apps \nINNER JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nWHERE Campaigns.status = 'active' AND Campaigns.end_date >= '2022-01-01' AND Campaigns.end_date <= '2022-03-31';",
    "prompt_token_number": 515,
    "response_token_number": 165
},
{
    "id": 33185,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Creator': ['name', 'id', 'Lee', 'Jim', 'Fabry', 'Glenn', 'McKean'], 'Review': ['rating', 'issue_id', 'id', 'user_id'], 'Creator_Appearance': ['creator_id', 'issue_id', 'series_id', 'role', 'volume_id']}. \n# the user question is: Find the titles of all issues that have been written by Warren Ellis and have a rating of 5.. \n#SQL query: SELECT DISTINCT i.title FROM Issue i JOIN Creator_Appearance ca ON i.id = ca.issue_id JOIN Creator c ON ca.creator_id = c.id AND c.name = 'Warren Ellis' JOIN Review r ON i.id = r.issue_id AND r.rating = 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name, category, and traffic of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" or \"Travel\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name, category, and traffic of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" or \"Travel\":",
    "output": "SELECT Websites.name, Websites.category, Websites.traffic FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value IN ('Food', 'Travel') AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT w.name, w.category, w.traffic \nFROM Websites w \nJOIN Ad_Placements ap ON w.website_id = ap.website_id \nJOIN Campaigns c ON ap.campaign_id = c.campaign_id AND c.status = 'active' \nJOIN Targeting_Options to ON c.campaign_id = to.campaign_id \nWHERE to.option_value IN ('Food', 'Travel');",
    "prompt_token_number": 505,
    "response_token_number": 79
},
{
    "id": 33186,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Creator': ['name', 'id', 'Lee', 'Jim', 'Fabry', 'Glenn', 'McKean'], 'Review': ['rating', 'issue_id', 'id', 'user_id'], 'User': ['username', 'id'], 'User_Review': ['user_id', 'review_id', 'id'], 'Creator_Appearance': ['creator_id', 'issue_id', 'series_id', 'role', 'volume_id']}. \n# the user question is: Find the names of all users who have written a review for an issue that has been written by Grant Morrison and have given a rating of 5.. \n#SQL query: SELECT DISTINCT u.username FROM User u JOIN User_Review ur ON u.id = ur.user_id JOIN Review r ON ur.review_id = r.id JOIN Issue i ON r.issue_id = i.id JOIN Creator_Appearance ca ON i.id = ca.issue_id JOIN Creator c ON ca.creator_id = c.id AND c.name = 'Grant Morrison' WHERE r.rating = 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Demographics': ['name']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with more than 1 million downloads and target users aged 18-35:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with more than 1 million downloads and target users aged 18-35:",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Apps ON Ad_Placements.app_id = Apps.app_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id JOIN Demographics ON Targeting_Options.option_value = Demographics.name WHERE Apps.downloads > 1000000 AND Demographics.name = 'Age: 18-35' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Demographics": [
            "name"
        ]
    },
    "response_text": "SELECT DISTINCT c.name, c.budget \nFROM Campaigns c \nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id \nJOIN Apps a ON ap.app_id = a.app_id \nJOIN Targeting_Options to ON c.campaign_id = to.campaign_id \nWHERE a.downloads > 1000000 AND to.option_value = '18-35';",
    "prompt_token_number": 563,
    "response_token_number": 77
},
{
    "id": 33188,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'task_assignments': ['updated_at', 'task_id', 'created_at', 'assigned_to', 'due_date', 'garden_id', 'completed_at', 'id', 'garden_plant_id', 'status', 'task_type', 'plant_variety_id'], 'users': ['email', 'username', 'id', 'updated_at', 'name', 'created_at', 'role_id'], 'tasks': ['name', 'id', 'updated_at', 'description', 'created_at', 'garden_id', 'due_date', 'type', 'priority']}. \n# the user question is: Retrieve the names of all the users who have been assigned a task with \"water\" in the name and have completed it in the past 7 days.. \n#SQL query: SELECT DISTINCT users.name FROM users JOIN task_assignments ON users.id = task_assignments.assigned_to JOIN tasks ON task_assignments.task_id = tasks.id WHERE task_assignments.completed_at BETWEEN DATE('now', '-7 days') AND DATE('now') AND tasks.name LIKE '%Water%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign with a budget greater than $500,000 and target users interested in \"Fitness\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign with a budget greater than $500,000 and target users interested in \"Fitness\":",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'Active' AND Campaigns.budget > 500000 AND Targeting_Options.targeting_type = 'Interest' AND Targeting_Options.option_value = 'Fitness';",
    "prompt_token_number": 506,
    "response_token_number": 94
},
{
    "id": 33189,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Marine_Birds': ['bird_id', 'bird_name', 'species', 'habitat', 'conservation_status']}. \n# the user question is: Which marine birds in the Marine_Birds table have a habitat of Open Oceans and are classified as Least Concern or Near Threatened?. \n#SQL query: SELECT bird_name FROM Marine_Birds WHERE habitat = 'Open Oceans' AND conservation_status IN ('Least Concern', 'Near Threatened');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate']} and \n# the user question: Retrieve the name and email of all advertisers who have campaigns that have been active for more than 6 months:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have campaigns that have been active for more than 6 months:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id WHERE Campaigns.start_date <= DATE('now', '-6 month') AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns \nON Advertisers.advertiser_id = Campaigns.advertiser_id \nWHERE Campaigns.start_date <= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);",
    "prompt_token_number": 288,
    "response_token_number": 52
},
{
    "id": 33190,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Show': ['rating', 'year', 'title', 'show_id', 'genre_id', 'studio_id', 'release_year', 'country_id', 'network_id', 'director_id', 'air_year', 'release_date', 'genre', 'status', 'production_type', 'producer_id', 'start_year', 'end_year'], 'Genre': ['genre_name', 'genre_id', 'name', 'Drama', 'Fiction', 'Science', 'TV', 'Reality', 'show_id', 'genre']}. \n# the user question is: Find the average rating for each genre of TV show in the database.. \n#SQL query: SELECT Genre.genre_name, AVG(Show.rating) AS avg_rating FROM Genre LEFT JOIN Show ON Genre.genre_id = Show.genre_id GROUP BY Genre.genre_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a traffic volume greater than 1 million per month and target users interested in \"Technology\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a traffic volume greater than 1 million per month and target users interested in \"Technology\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.traffic > 1000000 AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget\nFROM Campaigns\nINNER JOIN Ad_Placements ON Campaigns.campaign_id=Ad_Placements.campaign_id\nINNER JOIN Websites ON Ad_Placements.website_id=Websites.website_id\nINNER JOIN Targeting_Options ON Campaigns.campaign_id=Targeting_Options.campaign_id\nWHERE Websites.traffic > 1000000 AND Targeting_Options.option_value = 'Technology';\n",
    "prompt_token_number": 452,
    "response_token_number": 86
},
{
    "id": 33191,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director', 'runtime', 'budget', 'box_office', 'rating', 'release_date', 'imdb_rating', 'director_id', 'production_company_id', 'box_office_gross'], 'Genre': ['genre_id', 'name'], 'MovieGenre': ['movie_id', 'genre_id']}. \n# the user question is: Show the title, director, and rating of all movies that are classified as \"Action\" movies.. \n#SQL query: SELECT Movie.title, Movie.director, Movie.rating FROM Movie JOIN MovieGenre ON Movie.movie_id = MovieGenre.movie_id JOIN Genre ON MovieGenre.genre_id = Genre.genre_id WHERE Genre.name = 'Action';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one ad placement for a campaign that ended in the last 30 days and have been downloaded more than 1 million times:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one ad placement for a campaign that ended in the last 30 days and have been downloaded more than 1 million times:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id WHERE Campaigns.end_date BETWEEN DATE('now', '-30 days') AND DATE('now') AND Apps.downloads > 1000000;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements \nON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns \nON Ad_Placements.campaign_id = Campaigns.campaign_id \nWHERE Campaigns.end_date >= DATE(NOW()) - INTERVAL 30 DAY \nAND Apps.downloads > 1000000;",
    "prompt_token_number": 411,
    "response_token_number": 70
},
{
    "id": 33192,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Incidents': ['reported_by_user_id', 'location_id', 'created_at', 'incident_id', 'evacuation_status', 'severity_level', 'vehicle_id', 'status', 'reported_time', 'location', 'type', 'start_time', 'assigned_to_vehicle_id', 'incident_date', 'incident_type', 'category_id', 'reporting_agency_id', 'reported_at', 'date_id', 'description', 'date', 'time'], 'Agencies': ['agency_id', 'agency_name', 'Department', 'Fire', 'address', 'Police', 'agency_location_id', 'location_id', 'phone_number', 'state_id', 'county_id']}. \n# the user question is: Find the total number of incidents reported by each agency, sorted in descending order of the number of incidents.. \n#SQL query: SELECT Agencies.agency_name, COUNT(*) AS total_incidents FROM Agencies INNER JOIN Incidents ON Agencies.agency_id = Incidents.reporting_agency_id GROUP BY Agencies.agency_name ORDER BY total_incidents DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate']} and \n# the user question: Retrieve the name and email of all advertisers who have campaigns that are active and have a budget greater than $500,000:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have campaigns that are active and have a budget greater than $500,000:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id WHERE Campaigns.status = 'active' AND Campaigns.budget > 500000;",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers INNER JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id WHERE Campaigns.status = 'active' AND Campaigns.budget > 500000",
    "prompt_token_number": 411,
    "response_token_number": 49
},
{
    "id": 33194,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Event': ['event_id', 'event_name', 'event_date', 'location_id', 'event_category_id', 'event_type_id', 'location', 'venue_id', 'start_date', 'end_date', 'category', 'event_code', 'EVT', 'organizer_id', 'duration', 'name', 'Expo', 'Tech', 'country', 'category_id', 'city', 'ticket_price', 'date', 'start_time', 'end_time', 'min_age_requirement', 'event_type', 'capacity', 'registration_deadline', 'num_attendees', 'min_age', 'duration_hours', 'registration_fee', 'price'], 'Attendee': ['attendee_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'date_of_birth', 'job_title', 'city', 'age', 'email'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID']}. \n# the user question is: Which attendees have not registered for any events in the past year?. \n#SQL query: SELECT Attendee.first_name, Attendee.last_name FROM Attendee LEFT JOIN ( SELECT Registration.attendee_id FROM Registration INNER JOIN Event ON Registration.event_id = Event.event_id WHERE Event.start_date BETWEEN DATE('now', '-1 year') AND DATE('now') GROUP BY Registration.attendee_id ) AS registered_attendees ON Attendee.attendee_id = registered_attendees.attendee_id WHERE registered_attendees.attendee_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and traffic of all websites that have at least one active ad placement for a campaign that targets users interested in \"Fashion\" and have a budget greater than $500,000:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and traffic of all websites that have at least one active ad placement for a campaign that targets users interested in \"Fashion\" and have a budget greater than $500,000:",
    "output": "SELECT Websites.name, Websites.traffic FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.traffic\nFROM Websites\nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id\nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.status = 'active' AND Campaigns.budget > 500000 AND Targeting_Options.targeting_type = 'Fashion' \nGROUP BY Websites.website_id\nHAVING COUNT(Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 642,
    "response_token_number": 114
},
{
    "id": 33195,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Actor': ['actor_id', 'name', 'actor_name'], 'Movie_Actor': ['movie_id', 'actor_id'], 'Rating': ['rating_id', 'movie_id', 'source', 'rating_value', 'rating'], 'Box_Office': ['movie_id', 'revenue', 'budget']}. \n# the user question is: Retrieve the name of the actor, the title of the movie, and the revenue for all movies where the actor's name contains the word \"Lawrence\" and the revenue is greater than $200 million and the rating value is greater than 7.5.. \n#SQL query: SELECT Actor.name, Movie.title, Box_Office.revenue FROM Movie JOIN Movie_Actor ON Movie.movie_id = Movie_Actor.movie_id JOIN Actor ON Movie_Actor.actor_id = Actor.actor_id JOIN Box_Office ON Movie.movie_id = Box_Office.movie_id JOIN Rating ON Movie.movie_id = Rating.movie_id WHERE Actor.name LIKE '%Lawrence%' AND Box_Office.revenue > 200000000 AND Rating.rating_value > 7.5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $1 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $1 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 1000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 1000000;",
    "prompt_token_number": 481,
    "response_token_number": 77
},
{
    "id": 33197,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Programs': ['program_id', 'program_name', 'program_description', 'start_date', 'end_date', 'status', 'Program'], 'Goals': ['goal_id', 'goal_name', 'goal_description', 'goal_due_date', 'user_id', 'program_id', 'goal_target', 'goal_type', 'goal_end_date', 'goal_target_date', 'goal_start_date', 'goal_status', 'goal_value'], 'Progress': ['progress_id', 'goal_id', 'user_id', 'progress_date', 'progress_value', 'date_recorded']}. \n# the user question is: Find the name and email address of the user who has the highest progress value in the program with name \"Strength Training Program\":. \n#SQL query: SELECT Users.first_name, Users.last_name, Users.email FROM Users JOIN Goals ON Users.user_id = Goals.user_id JOIN Programs ON Goals.program_id = Programs.program_id JOIN Progress ON Goals.goal_id = Progress.goal_id WHERE Programs.program_name = 'Strength Training Program' AND Goals.goal_target IS NOT NULL ORDER BY Progress.progress_value DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Entertainment\" and have been active for more than 3 months:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Entertainment\" and have been active for more than 3 months:",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id WHERE Websites.category = 'Entertainment' AND Campaigns.start_date <= DATE('now', '-3 month') AND Campaigns.status = 'active' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget \nFROM Campaigns \nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nJOIN Websites ON Ad_Placements.website_id = Websites.website_id \nWHERE Websites.category = 'Entertainment' AND Campaigns.status = 'Active' AND DATEDIFF(CURRENT_DATE, Campaigns.start_date) > 90;",
    "prompt_token_number": 535,
    "response_token_number": 78
},
{
    "id": 33199,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Sales': ['product_id', 'price', 'quantity', 'salesperson_id', 'sale_date', 'open_date', 'task_id', 'SaleDate']}. \n# the user question is: Show the total number of sales per month for the year 2022.. \n#SQL query: SELECT strftime('%m', SaleDate) as Month, count(*) as TotalSales FROM Sales WHERE SaleDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Month;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and traffic of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $500,000:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and traffic of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $500,000:",
    "output": "SELECT Websites.name, Websites.traffic FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.traffic \nFROM Websites \nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.targeting_type = 'Technology' AND Campaigns.budget > 500000 AND Campaigns.status = 'active' \nGROUP BY Websites.website_id \nHAVING COUNT(Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 389,
    "response_token_number": 111
},
{
    "id": 33201,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Films': ['release_date', 'director_id', 'genre_id', 'title', 'film_id', 'duration'], 'Genres': ['name', 'genre_id'], 'Directors': ['name', 'director_id'], 'Ratings': ['user_id', 'rating_value', 'film_id', 'review_id']}. \n# the user question is: Retrieve the film titles and average ratings for comedy films released in the last 3 years, directed by either Adam McKay or Taika Waititi, and have an average rating above 4.0:. \n#SQL query: SELECT Films.title, AVG(Ratings.rating_value) AS average_rating FROM Films JOIN Directors ON Films.director_id = Directors.director_id JOIN Ratings ON Films.film_id = Ratings.film_id WHERE Films.genre_id = ( SELECT genre_id FROM Genres WHERE name = 'Comedy' ) AND Films.release_date >= DATE('now', '-3 years') AND (Directors.name = 'Adam McKay' OR Directors.name = 'Taika Waititi') GROUP BY Films.film_id HAVING AVG(Ratings.rating_value) > 4.0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and email of all advertisers who have campaigns that are active and have at least one ad placement on a website with a category of \"News\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have campaigns that are active and have at least one ad placement on a website with a category of \"News\":",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id WHERE Websites.category = 'News' AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id WHERE Campaigns.status = 'active' AND Websites.category = 'News' GROUP BY Advertisers.advertiser_id HAVING COUNT(Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 517,
    "response_token_number": 98
},
{
    "id": 33203,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']}. \n# the user question is: List the names of all suppliers who have not received any purchases for a product that has a price less than $50 and a discount of 10% or more.. \n#SQL query: SELECT DISTINCT s.Supplier_Name FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID LEFT JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID LEFT JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price < 50 AND pr.Product_Discount >= 0.1 WHERE pi.Product_ID IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $1 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $1 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 1000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id AND c.status = 'active' AND c.budget > 1000000\nJOIN Targeting_Options to ON c.campaign_id = to.campaign_id AND to.targeting_type = 'Interest' AND to.option_value = 'Travel';",
    "prompt_token_number": 596,
    "response_token_number": 89
},
{
    "id": 33204,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Transaction': ['BlockID', 'Recipient', 'Sender', 'PublicAddress', 'TransactionID', 'Amount', 'Fee', 'Timestamp', 'GasFee', 'GasUsed', 'GasLimit', 'GasPrice', 'EtherAmount', 'IsSuccess', 'Value', 'Currency', 'NodeID', 'SmartContractInstanceID', 'SenderWalletID', 'RecipientWalletID', 'ReceiverWalletID', 'ConfirmationTime', 'TokenID', 'FromWalletID', 'ToWalletID', 'Status', 'Type', 'ReceiverID', 'SenderID'], 'Wallet': ['BlockID', 'Balance', 'UserID', 'WalletID', 'PublicAddress', 'Currency']}. \n# the user question is: Find the wallets with the most outgoing transactions:. \n#SQL query: SELECT Wallet.PublicAddress, COUNT(Transaction.TransactionID) AS NumOutgoingTransactions FROM Wallet JOIN Transaction ON Wallet.WalletID = Transaction.SenderWalletID GROUP BY Wallet.PublicAddress ORDER BY NumOutgoingTransactions DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $2 million and have been updated in the last 14 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $2 million and have been updated in the last 14 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 2000000 AND Creatives.updated_at BETWEEN DATE('now', '-14 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type \nFROM Creatives \nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 2000000 AND Creatives.updated_at >= NOW() - INTERVAL 14 DAY",
    "prompt_token_number": 404,
    "response_token_number": 52
},
{
    "id": 33205,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Illustration': ['user_id', 'file_size', 'date_created', 'name', 'id', 'artist_id', 'category', 'price', 'created_year', 'sold', 'created_date', 'description', 'total_sold'], 'Artist': ['email', 'country', 'name', 'id', 'Dali', 'Salvador', 'monet', 'Vincent', 'Gogh', 'van', 'last_login', 'rating']}. \n# the user question is: Retrieve the name and email of all artists who have sold at least one illustration and have not logged in for more than 6 months.. \n#SQL query: SELECT Artist.name, Artist.email FROM Artist JOIN Illustration ON Artist.id = Illustration.artist_id WHERE Illustration.sold = 1 AND Artist.last_login < DATE('now', '-6 months');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and traffic of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $500,000:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and traffic of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $500,000:",
    "output": "SELECT Websites.name, Websites.traffic FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.traffic \nFROM Websites \nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = \"active\" AND Campaigns.budget > 500000 AND Targeting_Options.option_value = \"Food\";",
    "prompt_token_number": 460,
    "response_token_number": 88
},
{
    "id": 33206,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Employees': ['first_name', 'last_name', 'employee_id', 'department_id', 'job_title', 'hire_date', 'salary', 'department', 'birth_date', 'team', 'manager_id', 'email_address', 'phone_number', 'compliance_training_due_date', 'salary_amount', 'job_id', 'address', 'city', 'state', 'email', 'supervisor_id', 'num_projects', 'hourly_rate'], 'Orders': ['employee_id', 'total_price', 'order_date'], 'Salaries': ['employee_id', 'salary_amount', 'department_id', 'effective_date']}. \n# the user question is: List the names and total sales revenue of all employees who have made at least one sale in the past month and have a salary less than $30,000 and work in the \"Customer Service\" department.. \n#SQL query: SELECT e.first_name, e.last_name, SUM(o.total_price) AS total_sales_revenue FROM Employees e INNER JOIN Orders o ON e.employee_id = o.employee_id INNER JOIN Salaries s ON e.employee_id = s.employee_id WHERE strftime('%Y-%m', o.order_date) = strftime('%Y-%m', date('now')) AND s.salary_amount < 30000 AND e.department = 'Customer Service' GROUP BY e.employee_id ORDER BY total_sales_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and email of all advertisers who have campaigns that are active and have at least one ad placement on an app with a category of \"Business\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have campaigns that are active and have at least one ad placement on an app with a category of \"Business\":",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Apps ON Ad_Placements.app_id = Apps.app_id WHERE Apps.category = 'Business' AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT a.name, a.contact_email FROM Advertisers a INNER JOIN Campaigns c ON a.advertiser_id = c.advertiser_id INNER JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id INNER JOIN Apps app ON ap.app_id = app.app_id WHERE c.status = 'active' AND app.category = 'Business' GROUP BY a.advertiser_id;",
    "prompt_token_number": 559,
    "response_token_number": 76
},
{
    "id": 33208,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Athlete': ['first_name', 'last_name', 'athlete_id', 'email', 'gender'], 'Race_Result': ['athlete_id', 'swim_time', 'race_id', 'finish_time', 'rank', 'bike_time', 'run_time']}. \n# the user question is: Retrieve the athlete's full name and the average finish time for all races they have participated in, sorted in descending order by the average finish time.. \n#SQL query: SELECT a.first_name, a.last_name, AVG(rr.finish_time) AS avg_finish_time FROM Athlete a JOIN Race_Result rr ON a.athlete_id = rr.athlete_id GROUP BY a.athlete_id ORDER BY avg_finish_time DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have been downloaded more than 1 million times:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have been downloaded more than 1 million times:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Apps.downloads > 1000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'Technology' AND a.downloads > 1000000 AND c.status = 'active' GROUP BY a.app_id;",
    "prompt_token_number": 423,
    "response_token_number": 82
},
{
    "id": 33210,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'garden_plants': ['garden_id', 'plant_id', 'variety_id', 'id', 'updated_at', 'quantity', 'created_at', 'description', 'name', 'plant_variety_id', 'planted_on', 'plant_density', 'garden_bed_id', 'last_watered'], 'gardens': ['location', 'description', 'created_at', 'name', 'id', 'owner_id', 'updated_at', 'size', 'user_id', 'soil_type']}. \n# the user question is: Retrieve the names of all the garden plants that are located in the garden with ID 3.. \n#SQL query: SELECT DISTINCT garden_plants.name FROM garden_plants JOIN gardens ON garden_plants.garden_id = gardens.id WHERE gardens.id = 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $1 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $1 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 1000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.option_value = 'Fashion' \nAND Campaigns.status = 'Active' \nAND Campaigns.budget > 1000000;",
    "prompt_token_number": 445,
    "response_token_number": 92
},
{
    "id": 33212,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'comic_books': ['rating', 'series_name', 'issue_number', 'name', 'cover_artist', 'release_date', 'writer', 'artist', 'id', 'variant_cover', 'cover_price', 'series', 'publisher', 'price', 'genre', 'crossover_event', 'publication_date']}. \n# the user question is: Retrieve the name, issue number, and publisher of all comic books that have a crossover event with other series and were released in the last 2 years.. \n#SQL query: SELECT name, issue_number, publisher FROM comic_books WHERE crossover_event IS NOT NULL AND release_date >= date('now', '-2 years');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with a category of \"Education\" and target users interested in \"Science\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with a category of \"Education\" and target users interested in \"Science\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Apps ON Ad_Placements.app_id = Apps.app_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Apps.category = 'Education' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Science' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget \nFROM Campaigns \nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nJOIN Apps ON Ad_Placements.app_id = Apps.app_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Apps.category = 'Education' AND Targeting_Options.option_value = 'Science';",
    "prompt_token_number": 411,
    "response_token_number": 80
},
{
    "id": 33213,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Series': ['SeriesID', 'SeriesTitle', 'PublisherID', 'AverageCoverPrice', 'AverageIssueRating', 'SeriesName'], 'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate'], 'Characters': ['CharacterID', 'CharacterName', 'CharacterGender'], 'IssueCharacters': ['IssueCharacterID', 'IssueID', 'CharacterID']}. \n# the user question is: Find all characters that have appeared in issues from more than one series:. \n#SQL query: SELECT Characters.CharacterName, COUNT(DISTINCT Series.SeriesID) AS SeriesCount FROM Characters JOIN IssueCharacters ON Characters.CharacterID = IssueCharacters.CharacterID JOIN Issues ON IssueCharacters.IssueID = Issues.IssueID JOIN Series ON Issues.SeriesID = Series.SeriesID GROUP BY Characters.CharacterID HAVING COUNT(DISTINCT Series.SeriesID) > 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $500,000:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $500,000:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Health' AND Campaigns.budget > 500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.targeting_type = 'interest' \nAND Targeting_Options.option_value = 'Health' \nAND Campaigns.budget > 500000 \nGROUP BY Websites.name, Websites.category \nHAVING COUNT(Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 534,
    "response_token_number": 125
},
{
    "id": 33214,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Sales': ['Sales', 'Product', 'Region', 'State', 'product_id', 'dataset_id', 'quantity', 'sale_date', 'Unit_price', 'Sale_date', 'salesperson_id', 'sale_id', 'customer_id', 'company_id', 'unit_price', 'sales_id', 'model_id'], 'Products': ['Product_name', 'Unit_price', 'product_id', 'category_id', 'product_name', 'unit_price', 'origin_state', 'manufacturer_id', 'brand_id', 'stock'], 'Categories': ['category_id', 'Category_name', 'category_name']}. \n# the user question is: What is the total revenue generated by each category in the 'Sales' table, along with the number of sales and the average sale price per unit, sorted in descending order of total revenue?. \n#SQL query: SELECT Categories.category_name, COUNT(Sales.sale_id) AS num_sales, AVG(Sales.Unit_price) AS avg_price, SUM(Sales.quantity * Sales.Unit_price) AS total_revenue FROM Categories INNER JOIN Products ON Categories.category_id = Products.category_id INNER JOIN Sales ON Products.product_id = Sales.product_id GROUP BY Categories.category_name ORDER BY total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $3 million and have been updated in the last 21 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $3 million and have been updated in the last 21 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 3000000 AND Creatives.updated_at BETWEEN DATE('now', '-21 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 3000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 21 DAY);",
    "prompt_token_number": 447,
    "response_token_number": 54
},
{
    "id": 33215,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Attendee': ['attendee_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'date_of_birth', 'job_title', 'city', 'age', 'email'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID'], 'Payment': ['payment_id', 'registration_id', 'payment_date', 'amount', 'credit_card_id', 'payment_method_id', 'payment_type'], 'Event_Session': ['session_type_id', 'event_id', 'session_id', 'speaker_id', 'rating', 'price'], 'Session_Type': ['session_type_name', 'session_type_id'], 'Event_Session_Attendee': ['registration_id', 'session_id', 'event_id', 'attendee_id', 'rating'], 'Credit_Card': ['card_type', 'credit_card_id']}. \n# the user question is: What are the names and email addresses of attendees who have registered for events with a \"Panel Discussion\" session type and have also made a payment using an American Express card?. \n#SQL query: SELECT Attendee.first_name, Attendee.last_name, Attendee.email_address FROM Attendee INNER JOIN Registration ON Attendee.attendee_id = Registration.attendee_id INNER JOIN Payment ON Registration.registration_id = Payment.registration_id INNER JOIN Credit_Card ON Payment.credit_card_id = Credit_Card.credit_card_id INNER JOIN Event_Session_Attendee ON Registration.registration_id = Event_Session_Attendee.registration_id INNER JOIN Event_Session ON Event_Session_Attendee.session_id = Event_Session.session_id INNER JOIN Session_Type ON Event_Session.session_type_id = Session_Type.session_type_id WHERE Session_Type.session_type_name = 'Panel Discussion' AND Credit_Card.card_type = 'American Express' GROUP BY Attendee.first_name, Attendee.last_name, Attendee.email_address;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and traffic of all websites that have at least one active ad placement for a campaign targeting users interested in \"Pets\" and have a budget greater than $1 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and traffic of all websites that have at least one active ad placement for a campaign targeting users interested in \"Pets\" and have a budget greater than $1 million:",
    "output": "SELECT Websites.name, Websites.traffic FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Pets' AND Campaigns.budget > 1000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.traffic FROM Websites INNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id INNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id INNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.option_value = 'Pets' AND Campaigns.status = 'active' AND Campaigns.budget > 1000000 GROUP BY Websites.name, Websites.traffic;",
    "prompt_token_number": 697,
    "response_token_number": 96
},
{
    "id": 33217,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Director': ['director_id', 'name', 'gender', 'has_won_academy_award', 'director_name', 'birth_year'], 'Budget': ['movie_id', 'budget']}. \n# the user question is: Retrieve the title of the movie, the name of the director, and the budget for all movies where the director's name contains the word \"Scorsese\" and the budget is greater than 50 million.. \n#SQL query: SELECT Movie.title, Director.name, Budget.budget FROM Movie JOIN Director ON Movie.director_id = Director.director_id JOIN Budget ON Movie.movie_id = Budget.movie_id WHERE Director.name LIKE '%Scorsese%' AND Budget.budget > 50000000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Music\" and have been active for more than 6 months:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Music\" and have been active for more than 6 months:",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id WHERE Websites.category = 'Music' AND Campaigns.start_date <= DATE('now', '-6 month') AND Campaigns.status = 'active' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget \nFROM Campaigns \nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id\nJOIN Websites ON Ad_Placements.website_id = Websites.website_id \nWHERE Websites.category = 'Music' \nAND (Campaigns.end_date - Campaigns.start_date) > INTERVAL '6 months';",
    "prompt_token_number": 455,
    "response_token_number": 71
},
{
    "id": 33218,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'name', 'email', 'password', 'created_at', 'project_id', 'role', 'updated_at', 'last_login', 'doe', 'johndoe'], 'Projects': ['project_id', 'name', 'description', 'user_id', 'created_at', 'updated_at', 'Portfolio', 'Website', 'App', 'Social', 'Media', 'Campaign', 'Marketing', 'commerce', 'E', 'status', 'Mobile', 'Redesign', 'Blog', 'Site', 'Graphic', 'Design', 'Development', 'Software', 'Web', 'Brand', 'Strategy', 'end_date', 'start_date', 'Corporate', 'Accounting', 'creator_id', 'category_id', 'completed_at', 'Refresh', 'Launch', 'Product', 'category'], 'Tasks': ['task_id', 'name', 'description', 'project_id', 'user_id', 'created_at', 'priority', 'updated_at', 'status', 'Completed', 'assigned_at', 'completed_at', 'due_date', 'time_spent', 'last_updated', 'category_id'], 'Categories': ['name', 'created_at', 'updated_at', 'Electronics', 'category_id', 'description', 'Personal', 'Shopping']}. \n# the user question is: Get the name and email of all users who have completed tasks in projects with the category \"Design\" and the status \"Completed\" in the last 30 days:. \n#SQL query: SELECT DISTINCT Users.name, Users.email FROM Users INNER JOIN Tasks ON Users.user_id = Tasks.user_id INNER JOIN Projects ON Tasks.project_id = Projects.project_id INNER JOIN Categories ON Projects.category_id = Categories.category_id WHERE Categories.name = 'Design' AND Tasks.status = 'Completed' AND Tasks.completed_at BETWEEN date('now', '-30 days') AND date('now') GROUP BY Users.user_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have been downloaded more than 500,000 times:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have been downloaded more than 500,000 times:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Apps.downloads > 500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Apps.name, Apps.category \nFROM Apps \nINNER JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.targeting_type = 'Food' \nAND Campaigns.status = 'Active' \nAND Apps.downloads > 500000;",
    "prompt_token_number": 672,
    "response_token_number": 94
},
{
    "id": 33220,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Incidents': ['reported_by_user_id', 'location_id', 'created_at', 'incident_id', 'evacuation_status', 'severity_level', 'vehicle_id', 'status', 'reported_time', 'location', 'type', 'start_time', 'assigned_to_vehicle_id', 'incident_date', 'incident_type', 'category_id', 'reporting_agency_id', 'reported_at', 'date_id', 'description', 'date', 'time'], 'Involves': ['involving_incident_id', 'involving_suspect_id', 'involving_weapon_id', 'num_users_injured', 'involving_vehicle_id', 'involving_hazard_id', 'involving_crime_id', 'involving_incident', 'involving'], 'Suspects': ['suspect_id', 'suspect_name', 'age', 'first_name', 'race', 'last_name', 'hair_color', 'bail_status', 'eye_color', 'occupation', 'height', 'clothing_description', 'shoe_size'], 'Witnesses': ['witness_name', 'phone_number', 'witness_id'], 'Provides': ['provided_in_incident_id', 'provided_by_witness_id']}. \n# the user question is: Retrieve the names and corresponding phone numbers of all witnesses who provided information related to incidents where more than two suspects were involved.. \n#SQL query: SELECT DISTINCT Witnesses.witness_name, Witnesses.phone_number FROM Witnesses INNER JOIN Provides ON Witnesses.witness_id = Provides.provided_by_witness_id INNER JOIN Incidents ON Provides.provided_in_incident_id = Incidents.incident_id INNER JOIN Involves ON Incidents.incident_id = Involves.involving_incident_id INNER JOIN Suspects ON Involves.involving_suspect_id = Suspects.suspect_id GROUP BY Witnesses.witness_id HAVING COUNT(DISTINCT Suspects.suspect_id) > 2\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $500,000:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $500,000:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Apps.name, Apps.category FROM Apps\nINNER JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id\nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 500000 AND Campaigns.status = 'Active'",
    "prompt_token_number": 685,
    "response_token_number": 91
},
{
    "id": 33221,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'User': ['UserID', 'FirstName', 'LastName', 'Email', 'Password', 'Birthdate', 'Gender', 'Age', 'Height', 'BMI', 'Weight'], 'Exercise': ['ExerciseID', 'ExerciseName', 'Description', 'Image', 'CaloriesBurned', 'Distance', 'TargetMuscle', 'Category', 'ExerciseType', 'Name', 'CaloriesPerRep', 'CaloriesPerMinute', 'MuscleGroupID', 'ExerciseTypeID'], 'Workout': ['WorkoutID', 'UserID', 'PlanID', 'Date', 'WorkoutType', 'StartTime', 'EndTime', 'Duration', 'TimeSeconds', 'CaloriesBurned', 'WorkoutTypeID', 'Distance', 'Type', 'TotalCalories', 'USERID', 'WorkoutName', 'Steps', 'HeartRate', 'ExerciseTypeID'], 'WorkoutExercise': ['WorkoutID', 'ExerciseID', 'Sets', 'Reps', 'Weight', 'Duration', 'CaloriesBurned', 'NumSets', 'NumReps']}. \n# the user question is: Find the names of all users who have completed a workout in the last week that included at least one exercise that targets the abs:. \n#SQL query: SELECT DISTINCT User.FirstName, User.LastName FROM User INNER JOIN Workout ON User.UserID = Workout.UserID INNER JOIN WorkoutExercise ON Workout.WorkoutID = WorkoutExercise.WorkoutID INNER JOIN Exercise ON WorkoutExercise.ExerciseID = Exercise.ExerciseID WHERE Workout.Date >= DATE('now', '-7 days') AND Exercise.TargetMuscle = 'Abs' GROUP BY User.UserID\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $3 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $3 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 3000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT Advertisers.name, Advertisers.contact_email FROM Advertisers INNER JOIN Campaigns ON Advertisers.AdvertiserID = Campaigns.AdvertiserID INNER JOIN Targeting_Options ON Campaigns.CampaignID = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'interested in' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 3000000",
    "prompt_token_number": 552,
    "response_token_number": 91
},
{
    "id": 33223,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Book': ['series_id', 'publication_year', 'title', 'id', 'author_id', 'publisher_id', 'published_year', 'word_count', 'publication_date', 'value', 'pages', 'year', 'language_id', 'publish_date', 'price', 'genre_id'], 'Review': ['book_id', 'rating', 'reviewer_name', 'name', 'id', 'reader_id']}. \n# the user question is: Find the top 5 most reviewed books, along with the number of reviews they have received.. \n#SQL query: SELECT Book.title, COUNT(*) AS review_count FROM Book INNER JOIN Review ON Book.id = Review.book_id GROUP BY Book.id ORDER BY review_count DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $1 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $1 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 1000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Websites.name, Websites.category \nFROM Websites \nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.targeting_type = 'Technology' \nAND Campaigns.budget > 1000000",
    "prompt_token_number": 435,
    "response_token_number": 95
},
{
    "id": 33225,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['user_id', 'Project', 'project_name', 'project_id', 'created_date'], 'Instances': ['project_id', 'instance_name', 'launch_date', 'storage_id', 'user_id', 'instance_id', 'instance_type', 'region_id', 'zone_id', 'cpu_usage', 'memory_usage', 'availability_zone', 'storage_usage', 'network_bandwidth', 'status', 'cpu_count']}. \n# the user question is: Text Query: Retrieve the project names and associated instance names for instances launched in the last 7 days.. \n#SQL query: SELECT Projects.project_name, Instances.instance_name FROM Projects INNER JOIN Instances ON Projects.project_id = Instances.project_id WHERE Instances.launch_date >= DATE('now', '-7 days');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have been downloaded more than 1 million times:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have been downloaded more than 1 million times:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Apps.downloads > 1000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nINNER JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'Fitness' AND Apps.downloads > 1000000;",
    "prompt_token_number": 435,
    "response_token_number": 92
},
{
    "id": 33226,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Devices': ['device_id', 'device_name', 'device_type', 'os', 'webserver', 'user_id', 'office_id', 'model', 'manufacturer', 'last_scanned', 'status', 'added_time', 'last_communication_time', 'os_version', 'snmp_community_string', 'hardware_status', 'firmware_version', 'last_reboot_time', 'last_seen_online_time', 'online_status', 'last_active_timestamp', 'ram_capacity', 'processor_speed', 'free_storage_space', 'location', 'operating_system'], 'Network_Interfaces': ['interface_id', 'device_id', 'interface_name', 'ip_address', 'subnet_mask', 'mac_address', 'default_gateway', 'vlan_tag', 'interface_type', 'bandwidth', 'link_speed', 'ip_address_type', 'mtu', 'dns_server', 'ip_mode', 'vlan_id', 'link_status', 'speed', 'interface_speed', 'status', 'last_activity_time'], 'Firewall_Rules': ['rule_id', 'device_id', 'source_ip', 'destination_ip', 'protocol', 'action', 'destination_port', 'status', 'source_port', 'source_ip_address', 'destination_ip_address', 'rule_action'], 'Scans': ['scan_id', 'scanner_id', 'device_id', 'start_time', 'end_time']}. \n# the user question is: Find all devices that have at least one open port on port range 161-162 (SNMP) and have been scanned in the last 1050 days, sorted by device name in descending order.. \n#SQL query: SELECT DISTINCT d.device_name FROM Devices d INNER JOIN Network_Interfaces ni ON d.device_id = ni.device_id INNER JOIN Firewall_Rules fr ON ni.ip_address = fr.destination_ip LEFT JOIN Scans s ON d.device_id = s.device_id AND s.end_time >= date('now', '-1050 days') WHERE fr.destination_port >= 161 AND fr.destination_port <= 162 AND fr.action = 'allow' AND s.scan_id IS NOT NULL ORDER BY d.device_name DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Politics\" and have a budget greater than $5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Politics\" and have a budget greater than $5 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Politics' AND Campaigns.budget > 5000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a INNER JOIN Campaigns c ON a.advertiser_id = c.advertiser_id INNER JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'Politics' AND c.status = 'active' AND c.budget > 5000000;",
    "prompt_token_number": 652,
    "response_token_number": 70
},
{
    "id": 33228,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Sessions': ['psychologist_id', 'patient_id', 'date', 'location', 'therapist', 'therapist_id', 'session_date', 'session_id', 'duration_minutes', 'missed', 'remote_session'], 'Patients': ['name', 'patient_id', 'birthdate', 'case_id', 'age', 'date_of_birth', 'last_name', 'first_name'], 'Therapists': ['last_name', 'therapist_id', 'first_name', 'count', 'experience_years', 'license_number'], 'Specializations': ['specialization_name', 'therapist_id'], 'Diagnoses': ['disorder', 'patient_id', 'diagnosis_name']}. \n# the user question is: List all therapists who have treated patients with substance abuse disorders and have a specialization in motivational interviewing.. \n#SQL query: SELECT DISTINCT t.first_name, t.last_name FROM Therapists t INNER JOIN Sessions s ON t.therapist_id = s.therapist_id INNER JOIN Patients p ON s.patient_id = p.patient_id INNER JOIN Diagnoses d ON p.patient_id = d.patient_id INNER JOIN Specializations sp ON t.therapist_id = sp.therapist_id WHERE d.disorder LIKE '%substance abuse%' AND sp.specialization_name LIKE '%motivational interviewing%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $2 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $2 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 2000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT w.name, w.category \nFROM Websites w \nINNER JOIN Ad_Placements ap ON w.website_id = ap.website_id \nINNER JOIN Campaigns c ON ap.campaign_id = c.campaign_id \nINNER JOIN Targeting_Options t ON c.campaign_id = t.campaign_id \nWHERE c.status = 'Active' AND t.targeting_type = 'Interest' AND t.option_value = 'Sports' AND c.budget > 2000000;",
    "prompt_token_number": 553,
    "response_token_number": 94
},
{
    "id": 33229,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Shifts': ['start_time', 'end_time', 'employee_id', 'shift_id', 'duration', 'status', 'shift_date', 'machine_id', 'overtime_hours', 'performance_rating', 'shift_start', 'hours_worked'], 'Employees': ['first_name', 'employee_id', 'last_name', 'job_title', 'territory_id', 'department_id', 'manager_id', 'job_title_id', 'hire_date', 'address', 'birth_date', 'phone', 'title', 'reports_to', 'address_id', 'performance_evaluation_date', 'training_expiry_date', 'schedule_update_date', 'time_off_request_date', 'performance_bonus_date', 'promotion_date', 'overtime_pay_date', 'reassignment_date', 'training_date', 'annual_leave_balance', 'skills_upgrade_date', 'compensatory_time_off_date', 'shift_length', 'last_promotion_date', 'career_development_plan_date', 'last_break_date', 'salary', 'hourly_rate', 'hourly_wage', 'status', 'skill_set', 'ShiftStart', 'ShiftEnd', 'EmployeeID', 'EmployeeName', 'HireDate', 'LastName', 'Title', 'FirstName', 'BirthDate']}. \n# the user question is: Find the employees who have worked the most hours in the last month and need a break.. \n#SQL query: SELECT Employees.first_name, Employees.last_name, SUM(Shifts.duration) AS total_hours_worked FROM Employees INNER JOIN Shifts ON Employees.employee_id = Shifts.employee_id WHERE Shifts.start_time BETWEEN DATE('now', '-1 month') AND DATE('now') AND Employees.last_break_date < DATE('now') GROUP BY Employees.employee_id ORDER BY total_hours_worked DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $6 million and have been updated in the last 60 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $6 million and have been updated in the last 60 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 6000000 AND Creatives.updated_at BETWEEN DATE('now', '-60 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 6000000 AND Creatives.updated_at BETWEEN DATE('now', '-60 days') AND DATE('now');",
    "prompt_token_number": 563,
    "response_token_number": 56
},
{
    "id": 33230,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Employees': ['first_name', 'last_name', 'employee_id', 'department_id', 'job_title', 'hire_date', 'salary', 'department', 'birth_date', 'team', 'manager_id', 'email_address', 'phone_number', 'compliance_training_due_date', 'salary_amount', 'job_id', 'address', 'city', 'state', 'email', 'supervisor_id', 'num_projects', 'hourly_rate']}. \n# the user question is: List the names and job titles of all employees who have a job title containing the word \"Manager\" and work in the \"Sales\" or \"Marketing\" department.. \n#SQL query: SELECT first_name, last_name, job_title FROM Employees WHERE (job_title LIKE '%Manager%' AND department = 'Sales') OR (job_title LIKE '%Manager%' AND department = 'Marketing');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $1 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $1 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' AND Campaigns.budget > 1000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category FROM Apps\nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id\nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Targeting_Options.option_value = 'Movies' AND Campaigns.status = 'active' AND Campaigns.budget > 1000000;",
    "prompt_token_number": 455,
    "response_token_number": 88
},
{
    "id": 33231,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Programs': ['program_id', 'program_name', 'program_description', 'start_date', 'end_date', 'status', 'Program'], 'Goals': ['goal_id', 'goal_name', 'goal_description', 'goal_due_date', 'user_id', 'program_id', 'goal_target', 'goal_type', 'goal_end_date', 'goal_target_date', 'goal_start_date', 'goal_status', 'goal_value'], 'Progress': ['progress_id', 'goal_id', 'user_id', 'progress_date', 'progress_value', 'date_recorded'], 'User_Workouts': ['workout_id', 'date_completed', 'user_id', 'calories_burned', 'program_id', 'duration', 'date_scheduled', 'avg_heart_rate', 'workout_date', 'workout_status', 'workout_duration']}. \n# the user question is: Find the names and email addresses of all users who have achieved their mindfulness goals in the program with ID 6 but have not completed any workouts in the past week:. \n#SQL query: SELECT Users.first_name, Users.last_name, Users.email FROM Users JOIN Goals ON Users.user_id = Goals.user_id JOIN Programs ON Goals.program_id = Programs.program_id JOIN Progress ON Goals.goal_id = Progress.goal_id LEFT JOIN User_Workouts ON Users.user_id = User_Workouts.user_id AND User_Workouts.date_completed BETWEEN date('now', '-7 days') AND date('now') WHERE Programs.program_id = 6 AND Goals.goal_type = 'Mindfulness' AND Progress.progress_value >= Goals.goal_target AND User_Workouts.workout_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $3 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $3 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 3000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'Active' AND Targeting_Options.targeting_type = 'Music' AND Campaigns.budget > 3000000;",
    "prompt_token_number": 594,
    "response_token_number": 78
},
{
    "id": 33232,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Titanic': ['Age', 'Sex', 'Survived', 'Fare', 'Pclass', 'SibSp', 'Parch', 'Embarked', 'Cabin']}. \n# the user question is: What is the number of passengers in the 'Titanic' dataset who have a 'SibSp' value of 1, have a 'Pclass' of 2 or 3, and have survived?. \n#SQL query: SELECT COUNT(*) FROM Titanic WHERE SibSp = 1 AND (Pclass = 2 OR Pclass = 3) AND Survived = 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with a category of \"Sports\" and target users interested in \"Fitness\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with a category of \"Sports\" and target users interested in \"Fitness\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Apps ON Ad_Placements.app_id = Apps.app_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Apps.category = 'Sports' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget\nFROM Campaigns\nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id\nJOIN Apps ON Ad_Placements.app_id = Apps.app_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Apps.category = 'Sports' AND Targeting_Options.option_value = 'Fitness'\nGROUP BY Campaigns.name, Campaigns.budget\nHAVING COUNT(Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 403,
    "response_token_number": 106
},
{
    "id": 33233,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['director', 'release_year', 'film_id', 'title', 'box_office', 'language_id', 'runtime', 'budget', 'genre', 'based_on_true_story', 'film_title', 'film_gross', 'film_release_date', 'film_length', 'film_imdb_rating', 'film_director', 'film_runtime_minutes', 'film_release_year', 'film_worldwide_gross', 'film_budget', 'production_company_id', 'film_box_office_gross', 'film_user_rating', 'film_runtime', 'film_director_gender', 'film_box_office_rank', 'genre_id', 'film_duration', 'film_box_office_collection', 'film_running_time', 'film_country', 'film_rating', 'film_revenue', 'film_box_office', 'film_language', 'film_name', 'studio_id', 'film_production_budget'], 'Film_Director': ['director_id', 'film_id', 'director_name'], 'Director': ['director_id', 'director_name', 'gender', 'director_gender'], 'Battle': ['battle_name', 'year', 'battle_id', 'war_name', 'casualties', 'theater', 'war_id', 'date', 'countries_involved'], 'Film_Battle': ['battle_id', 'film_id']}. \n# the user question is: Find all battles from the Battle of Waterloo that are featured in war films directed by Sergei Eisenstein:. \n#SQL query: SELECT Battle.battle_name, Director.director_name FROM Film INNER JOIN Film_Battle ON Film.film_id = Film_Battle.film_id INNER JOIN Battle ON Film_Battle.battle_id = Battle.battle_id INNER JOIN Film_Director ON Film.film_id = Film_Director.film_id INNER JOIN Director ON Film_Director.director_id = Director.director_id WHERE Director.director_name = 'Sergei Eisenstein' AND Battle.battle_name LIKE '%Battle of Waterloo%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $3 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $3 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 3000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category FROM Websites INNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id INNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id INNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.option_value = 'Food' AND Campaigns.status = 'active' AND Campaigns.budget > 3000000;",
    "prompt_token_number": 681,
    "response_token_number": 87
},
{
    "id": 33234,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['email', 'username', 'user_id'], 'UserMeditationEvents': ['event_id', 'user_id', 'session_id']}. \n# the user question is: Find the usernames and the number of meditation events attended by each user, sorted in descending order of the number of events:. \n#SQL query: SELECT Users.username, COUNT(UserMeditationEvents.event_id) AS attended_events_count FROM Users JOIN UserMeditationEvents ON Users.user_id = UserMeditationEvents.user_id GROUP BY Users.user_id ORDER BY attended_events_count DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $2 million and have been updated in the last 90 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $2 million and have been updated in the last 90 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 2000000 AND Creatives.updated_at BETWEEN DATE('now', '-90 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 2000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 90 DAY);",
    "prompt_token_number": 316,
    "response_token_number": 53
},
{
    "id": 33235,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Tasks': ['status', 'assigned_to', 'task_id', 'project_id', 'due_date', 'user_id', 'completed', 'task_name', 'created_at', 'completed_at', 'assigned_t', 'assigned', 'date_completed', 'data_table_id', 'completion_time', 'task_description', 'category', 'completion_date', 'open_date', 'priority', 'completed_date', 'start_date', 'estimated_time', 'end_date', 'created_by', 'estimated_duration', 'cost', 'deadline', 'completed_on', 'started_on', 'duration', 'assigned_on', 'date_assigned', 'date_created'], 'Users': ['username', 'email', 'user_id', 'assigned_to', 'completed_tasks', 'total_tasks', 'user_name', 'doe', 'salary', 'num_completed_tasks'], 'Task_Logs': ['started_at', 'duration', 'task_id', 'log_id', 'start_time', 'logged_by', 'date_logged', 'date_updated', 'cost', 'user_id']}. \n# the user question is: Find the users who have logged more than 10 hours on a single task:. \n#SQL query: SELECT Users.user_name, Task_Logs.task_id, SUM(Task_Logs.duration) AS total_duration FROM Users LEFT JOIN Tasks ON Users.user_id = Tasks.assigned_to LEFT JOIN Task_Logs ON Tasks.task_id = Task_Logs.task_id GROUP BY Task_Logs.task_id, Users.user_id HAVING total_duration > 10;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $2 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $2 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 2000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps\nINNER JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id  = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'Technology' AND Campaigns.budget > 2000000\nGROUP BY Apps.name, Apps.category \nHAVING COUNT(Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 590,
    "response_token_number": 117
},
{
    "id": 33236,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Genres': ['genre_id', 'game_id'], 'Genres': ['genre_id', 'genre_name'], 'Game_Ratings': ['rating_id', 'game_id'], 'Ratings': ['rating_name', 'rating_id', 'rating_value']}. \n# the user question is: Find the names of all games that have a genre with a name containing \"strategy\" and a rating of \"T (Teen)\" or \"M (Mature)\".. \n#SQL query: SELECT DISTINCT Games.game_title FROM Games INNER JOIN Game_Genres ON Games.game_id = Game_Genres.game_id INNER JOIN Genres ON Game_Genres.genre_id = Genres.genre_id INNER JOIN Game_Ratings ON Games.game_id = Game_Ratings.game_id INNER JOIN Ratings ON Game_Ratings.rating_id = Ratings.rating_id WHERE Genres.genre_name LIKE '%strategy%' AND Ratings.rating_name IN ('T (Teen)', 'M (Mature)');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $4 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $4 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 4000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nINNER JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.option_value = 'Travel' \nAND Campaigns.budget > 4000000;",
    "prompt_token_number": 438,
    "response_token_number": 86
},
{
    "id": 33237,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Publishers': ['PublisherID', 'PublisherName', 'SeriesID'], 'Series': ['SeriesID', 'SeriesTitle', 'PublisherID', 'AverageCoverPrice', 'AverageIssueRating', 'SeriesName'], 'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate'], 'Creators': ['CreatorID', 'CreatorName'], 'IssueCredits': ['IssueID', 'CreditID', 'CreatorID'], 'Credits': ['CreditName', 'CreditID']}. \n# the user question is: Find the top 5 most common colorists of issues published by DC Comics in 2024:. \n#SQL query: SELECT Creators.CreatorName, COUNT(*) as NumIssues FROM Creators JOIN IssueCredits ON Creators.CreatorID = IssueCredits.CreatorID JOIN Issues ON IssueCredits.IssueID = Issues.IssueID JOIN Series ON Issues.SeriesID = Series.SeriesID JOIN Publishers ON Series.PublisherID = Publishers.PublisherID JOIN Credits ON IssueCredits.CreditID = Credits.CreditID AND Credits.CreditName = 'Colorist' WHERE Publishers.PublisherName = 'DC Comics' AND Issues.CoverDate BETWEEN '2024-01-01' AND '2024-12-31' GROUP BY Creators.CreatorID ORDER BY NumIssues DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and target users interested in \"Beauty\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and target users interested in \"Beauty\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Fashion' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Beauty' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Fashion' AND Targeting_Options.option_value = 'Beauty' GROUP BY Campaigns.name HAVING COUNT(*) >= 1;",
    "prompt_token_number": 620,
    "response_token_number": 88
},
{
    "id": 33238,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Employees': ['first_name', 'last_name', 'employee_id', 'department_id', 'job_title', 'hire_date', 'salary', 'department', 'birth_date', 'team', 'manager_id', 'email_address', 'phone_number', 'compliance_training_due_date', 'salary_amount', 'job_id', 'address', 'city', 'state', 'email', 'supervisor_id', 'num_projects', 'hourly_rate'], 'Attendance': ['employee_id', 'start_time', 'attendance_date', 'end_time', 'leave_type', 'status'], 'Salaries': ['employee_id', 'salary_amount', 'department_id', 'effective_date']}. \n# the user question is: List the names and total number of hours worked by all employees who have worked on a weekend in the past month and have a salary greater than $60,000.. \n#SQL query: SELECT e.first_name, e.last_name, SUM(strftime('%s', a.end_time) - strftime('%s', a.start_time))/3600 AS total_hours_worked FROM Employees e INNER JOIN Attendance a ON e.employee_id = a.employee_id INNER JOIN Salaries s ON e.employee_id = s.employee_id WHERE strftime('%Y-%m', a.attendance_date) = strftime('%Y-%m', date('now')) AND s.salary_amount > 60000 AND strftime('%w', a.attendance_date) IN ('0', '6') GROUP BY e.employee_id ORDER BY total_hours_worked DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $1 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $1 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Health' AND Campaigns.budget > 1000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT w.name, w.category FROM Websites w INNER JOIN Ad_Placements ap ON w.website_id = ap.website_id INNER JOIN Campaigns c ON ap.campaign_id = c.campaign_id INNER JOIN Targeting_Options to ON c.campaign_id = to.campaign_id WHERE to.targeting_type = 'interest' AND to.option_value = 'Health' AND c.budget > 1000000 AND c.status = 'active' GROUP BY w.website_id",
    "prompt_token_number": 592,
    "response_token_number": 92
},
{
    "id": 33239,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Tasks': ['assigned_to', 'deadline', 'project_id', 'task_id', 'priority_level', 'status', 'completed_by', 'created_at', 'completed_at', 'priority', 'created_by', 'due_date', 'user_id', 'assigned_team', 'team_id', 'started_at', 'assigned_skill', 'requested_by', 'assigned_at', 'assigned_by', 'completion_date', 'assignment_date', 'skill_name', 'task_status', 'department_name', 'task_assigned_date', 'task_completion_date'], 'Projects': ['project_id', 'project_name', 'budget', 'status', 'start_date', 'end_date', 'completion_date']}. \n# the user question is: Find the project with the highest number of incomplete tasks:. \n#SQL query: SELECT Projects.project_name, COUNT(Tasks.task_id) AS incomplete_task_count FROM Projects JOIN Tasks ON Projects.project_id = Tasks.project_id WHERE Tasks.status != 'Completed' GROUP BY Projects.project_id ORDER BY incomplete_task_count DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $3 million and have been updated in the last 120 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $3 million and have been updated in the last 120 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 3000000 AND Creatives.updated_at BETWEEN DATE('now', '-120 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 3000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 120 DAY);",
    "prompt_token_number": 410,
    "response_token_number": 53
},
{
    "id": 33240,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'checking_accounts': ['account_balance', 'user_id', 'account_id', 'current_balance', 'checking_account_name', 'account_name', 'account_holder_id', 'balance'], 'users': ['user_id', 'email', 'last_name', 'first_name', 'password', 'total_balance', 'credit_score', 'phone_number', 'username'], 'savings_accounts': ['user_id', 'interest_rate', 'account_id', 'account_balance', 'interest_earned', 'account_open_date', 'last_interest_calculation_date', 'current_balance', 'savings_account_id', 'savings_account_name', 'account_name', 'balance']}. \n# the user question is: Retrieve the user ID, first name, last name, and email for all users who have a checking account balance greater than $5000.00 or a savings account balance greater than $10000.00:. \n#SQL query: SELECT users.user_id, first_name, last_name, email FROM users WHERE EXISTS ( SELECT 1 FROM checking_accounts WHERE checking_accounts.user_id = users.user_id AND account_balance > 5000.00 ) OR EXISTS ( SELECT 1 FROM savings_accounts WHERE savings_accounts.user_id = users.user_id AND account_balance > 10000.00 );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Books\" and have a budget greater than $1.5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Books\" and have a budget greater than $1.5 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Books' AND Campaigns.budget > 1500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category FROM Apps WHERE EXISTS ( SELECT 1 FROM Ad_Placements, Campaigns, Targeting_Options WHERE Ad_Placements.app_id = Apps.app_id AND Campaigns.campaign_id = Ad_Placements.campaign_id AND Targeting_Options.campaign_id = Campaigns.campaign_id AND Campaigns.status = 'Active' AND Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Books' AND Campaigns.budget > 1500000 );",
    "prompt_token_number": 538,
    "response_token_number": 101
},
{
    "id": 33241,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Courses': ['course_name', 'course_id', 'teacher_id', 'department_id', 'subject_id', 'level', 'type', 'program_id'], 'Teachers': ['teacher_id', 'last_name', 'first_name', 'date_of_birth', 'teacher_name']}. \n# the user question is: \"Retrieve the list of courses that have not been assigned to any teacher.\". \n#SQL query: SELECT Courses.course_name FROM Courses LEFT JOIN Teachers ON Courses.teacher_id = Teachers.teacher_id WHERE Teachers.teacher_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Education\" and have a budget greater than $2 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Education\" and have a budget greater than $2 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Education' AND Campaigns.budget > 2000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Budget > 2000000 AND Targeting_Options.targeting_type = 'Education';",
    "prompt_token_number": 328,
    "response_token_number": 78
},
{
    "id": 33242,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Playlists': ['playlist_id', 'playlist_name'], 'Users': ['username', 'user_id'], 'Tracks': ['track_id', 'track_title', 'duration', 'album_id', 'track_name', 'genre_id', 'rating', 'artist_id', 'release_id'], 'UserFavorites': ['track_id', 'user_id', 'genre_id', 'favorite_date'], 'PlaylistTracks': ['track_id', 'playlist_id']}. \n# the user question is: Find the users who have favorited all tracks from the \"Chillout Vibes\" playlist:. \n#SQL query: SELECT Users.username FROM Users JOIN UserFavorites ON Users.user_id = UserFavorites.user_id JOIN Tracks ON UserFavorites.track_id = Tracks.track_id JOIN PlaylistTracks ON Tracks.track_id = PlaylistTracks.track_id JOIN Playlists ON PlaylistTracks.playlist_id = Playlists.playlist_id WHERE Playlists.playlist_name = 'Chillout Vibes' GROUP BY Users.user_id HAVING COUNT(DISTINCT Tracks.track_id) = ( SELECT COUNT(*) FROM PlaylistTracks WHERE playlist_id = ( SELECT playlist_id FROM Playlists WHERE playlist_name = 'Chillout Vibes' ) );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with a category of \"Music\" and target users interested in \"Dance\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with a category of \"Music\" and target users interested in \"Dance\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Apps ON Ad_Placements.app_id = Apps.app_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Apps.category = 'Music' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Dance' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget\nFROM Campaigns\nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id\nJOIN Apps ON Ad_Placements.app_id = Apps.app_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Apps.category = 'Music' AND Targeting_Options.targeting_type = 'Dance'\nGROUP BY Campaigns.name, Campaigns.budget\nHAVING COUNT(DISTINCT Ad_Placements.ad_placement_id) >= 1",
    "prompt_token_number": 513,
    "response_token_number": 109
},
{
    "id": 33243,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Species': ['species_id', 'name', 'common_name', 'classification_id', 'genus', 'family_id', 'scientific_name', 'class_id', 'taxonomy', 'category', 'conservation_status', 'population_trend', 'habitat', 'migration_pattern', 'min_depth_range', 'max_depth_range', 'body_size', 'body_temperature_range', 'migratory_behavior', 'species_name', 'discovery_year', 'class_name', 'is_venomous', 'order_name']}. \n# the user question is: Show all the species in the \"Fish\" class that were discovered after 2000.. \n#SQL query: SELECT species_name FROM Species WHERE class_name = 'Fish' AND discovery_year > 2000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Business\" and have a budget greater than $2.5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Business\" and have a budget greater than $2.5 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Business' AND Campaigns.budget > 2500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Business' AND Campaigns.budget > 2500000;",
    "prompt_token_number": 443,
    "response_token_number": 89
},
{
    "id": 33244,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['username', 'email', 'user_id', 'assigned_to', 'completed_tasks', 'total_tasks', 'user_name', 'doe', 'salary', 'num_completed_tasks'], 'Data_Tables': ['data_source_id', 'data_table_name', 'data_table_id', 'created_by', 'column_count', 'row_count', 'customers', 'employees', 'orders', 'products']}. \n# the user question is: Find the users who have created the most number of data tables across all data sources:. \n#SQL query: SELECT Users.username, COUNT(Data_Tables.data_table_id) AS table_count FROM Users INNER JOIN Data_Tables ON Users.user_id = Data_Tables.created_by GROUP BY Users.user_id ORDER BY table_count DESC LIMIT 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $5 million and have been updated in the last 180 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $5 million and have been updated in the last 180 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 5000000 AND Creatives.updated_at BETWEEN DATE('now', '-180 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 5000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 180 DAY);",
    "prompt_token_number": 359,
    "response_token_number": 54
},
{
    "id": 33245,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'News_Article': ['category_id', 'content', 'created_at', 'title', 'user_id', 'id', 'article_id', 'date', 'published_date', 'word_count', 'updated_date', 'author_id', 'publish_date'], 'User': ['id', 'name', 'email', 'janesmith', 'user_id', 'category_id', 'city_id', 'country_name', 'country'], 'News_Article_Topic': ['topic_id', 'article_id'], 'News_Topic': ['id', 'name']}. \n# the user question is: Retrieve the names and email addresses of all users who have not written any articles on topics related to \"Science\" in the year 2023.. \n#SQL query: SELECT DISTINCT User.name, User.email FROM User WHERE User.id NOT IN ( SELECT User.id FROM User JOIN News_Article ON User.id = News_Article.user_id JOIN News_Article_Topic ON News_Article.id = News_Article_Topic.article_id JOIN News_Topic ON News_Article_Topic.topic_id = News_Topic.id WHERE News_Topic.name = 'Science' AND strftime('%Y', News_Article.date) = '2023' );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $1 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $1 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 1000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'Active' AND Campaigns.budget > 1000000 AND Targeting_Options.option_value = 'Art';\n",
    "prompt_token_number": 537,
    "response_token_number": 89
},
{
    "id": 33246,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'game': ['game_mode', 'price', 'name', 'publisher', 'num_players', 'rating', 'platform', 'genre', 'release_year', 'developer', 'platform_count', 'tag', 'game_name', 'release_date', 'multiplayer', 'copies_sold', 'playtime', 'year']}. \n# the user question is: List the name and platform of all games that were released in the year 2022.. \n#SQL query: SELECT name, platform FROM game WHERE release_year = 2022;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Gaming\" and have a budget greater than $3.5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Gaming\" and have a budget greater than $3.5 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 3500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'Gaming' AND Campaigns.budget > 3500000;",
    "prompt_token_number": 333,
    "response_token_number": 83
},
{
    "id": 33247,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Creator': ['name', 'id', 'Lee', 'Jim', 'Fabry', 'Glenn', 'McKean'], 'Creator_Appearance': ['creator_id', 'issue_id', 'series_id', 'role', 'volume_id']}. \n# the user question is: Find the titles of all issues that have been published in the year 2022 and have been written by Brian Michael Bendis.. \n#SQL query: SELECT DISTINCT i.title FROM Issue i JOIN Creator_Appearance ca ON i.id = ca.issue_id JOIN Creator c ON ca.creator_id = c.id AND c.name = 'Brian Michael Bendis' WHERE i.publication_year = 2022;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Fitness\" or \"Yoga\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Fitness\" or \"Yoga\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Sports' AND Targeting_Options.targeting_type = 'interests' AND (Targeting_Options.option_value = 'Fitness' OR Targeting_Options.option_value = 'Yoga') GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT c.name, c.budget \nFROM Campaigns c \nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id \nJOIN Websites w ON ap.website_id = w.website_id AND w.category = 'Sports' \nJOIN Targeting_Options to ON c.campaign_id = to.campaign_id \nWHERE to.option_value IN ('Fitness', 'Yoga');",
    "prompt_token_number": 493,
    "response_token_number": 77
},
{
    "id": 33248,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']}. \n# the user question is: Find the names of all employees who have worked on a project that has a project budget of at least $2,000,000 and has a project duration of at least 2 years.. \n#SQL query: SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget >= 2000000 AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) >= 63072000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $1.5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $1.5 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 1500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT w.name, w.category \nFROM Websites w \nINNER JOIN Ad_Placements ap ON w.website_id = ap.website_id \nINNER JOIN Campaigns c ON ap.campaign_id = c.campaign_id \nINNER JOIN Targeting_Options to ON c.campaign_id = to.campaign_id \nWHERE c.status = 'active' AND c.budget > 1500000 AND to.targeting_type = 'interest' AND to.option_value = 'Fashion';",
    "prompt_token_number": 652,
    "response_token_number": 93
},
{
    "id": 33249,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Transaction': ['BlockID', 'Recipient', 'Sender', 'PublicAddress', 'TransactionID', 'Amount', 'Fee', 'Timestamp', 'GasFee', 'GasUsed', 'GasLimit', 'GasPrice', 'EtherAmount', 'IsSuccess', 'Value', 'Currency', 'NodeID', 'SmartContractInstanceID', 'SenderWalletID', 'RecipientWalletID', 'ReceiverWalletID', 'ConfirmationTime', 'TokenID', 'FromWalletID', 'ToWalletID', 'Status', 'Type', 'ReceiverID', 'SenderID'], 'Wallet': ['BlockID', 'Balance', 'UserID', 'WalletID', 'PublicAddress', 'Currency']}. \n# the user question is: Find the wallets that have received the highest total amount of ether:. \n#SQL query: SELECT Wallet.PublicAddress, SUM(Transaction.Amount) AS TotalEtherReceived FROM Wallet JOIN Transaction ON Wallet.WalletID = Transaction.RecipientWalletID GROUP BY Wallet.PublicAddress ORDER BY TotalEtherReceived DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $2.5 million and have been updated in the last 150 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $2.5 million and have been updated in the last 150 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 2500000 AND Creatives.updated_at BETWEEN DATE('now', '-150 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 2500000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 150 DAY)",
    "prompt_token_number": 407,
    "response_token_number": 53
},
{
    "id": 33250,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Illustrations': ['user_id', 'illustration_id', 'upload_date', 'title', 'price', 'category_id', 'discount', 'creation_date', 'artist_id', 'description'], 'Users': ['username', 'user_id', 'address_id', 'work_address_id', 'last_active_date', 'home_address_id', 'last_activity_date', 'registration_date', 'email', 'total_purchase_amount', 'user_type_id', 'country', 'name'], 'Purchase': ['user_id', 'purchase_price', 'purchase_date', 'illustration_id', 'purchase_id', 'order_id', 'shipping_address_id', 'total_amount', 'COUNT###', 'price', 'quantity', 'category_id', 'amount', 'date'], 'Illustration_ratings': ['illustration_id', 'rating_value', 'user_id', 'rating', 'purchase_id', 'rating_id', 'category_id'], 'Illustration_categories': ['category_name', 'category_id', 'name']}. \n# the user question is: Get the details of all users who have purchased at least one illustration in the category 'abstract' and have not yet rated any of their purchases:. \n#SQL query: SELECT DISTINCT Users.username FROM Users INNER JOIN Purchase ON Users.user_id = Purchase.user_id INNER JOIN Illustrations ON Purchase.illustration_id = Illustrations.illustration_id INNER JOIN Illustration_categories ON Illustrations.category_id = Illustration_categories.category_id WHERE Illustration_categories.category_name = 'abstract' AND Purchase.purchase_id NOT IN ( SELECT Illustration_ratings.purchase_id FROM Illustration_ratings WHERE Illustration_ratings.user_id = Purchase.user_id );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Cooking\" and have a budget greater than $2 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Cooking\" and have a budget greater than $2 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Cooking' AND Campaigns.budget > 2000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Apps.name, Apps.category \nFROM Apps \nINNER JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.targeting_type = 'Cooking' \nAND Campaigns.status = 'active' \nAND Campaigns.budget > 2000000;",
    "prompt_token_number": 612,
    "response_token_number": 97
},
{
    "id": 33251,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'password_hash', 'is_admin', 'name', 'last_login_at', 'last_login', 'created_at', 'verified', 'activated'], 'Pages': ['page_id', 'website_id', 'url', 'title', 'description', 'content', 'created_at', 'updated_at', 'meta_description', 'meta_keywords', 'meta_title', 'h1_tag', 'h2_tag', 'title_tag', 'canonical_url', 'description_tag', 'header_tag', 'meta_tag', 'meta_keyword', 'h1', 'heading', 'header', 'word_count', 'time_on_page', 'total_words', 'http_status_code', 'user_id', 'last_modified_date', '[website_id]'], 'Billing_Records': ['billing_record_id', 'user_id', 'amount', 'description', 'created_at', 'payment_status', 'total_amount'], 'Page_Content': ['h1_content', 'page_id', 'title', 'h2_tag', 'meta_description', 'meta_robots', 'image_alt', 'canonical_url', 'h1_tag', 'meta_keyword', 'word_count', 'keyword_density', 'title_tag', 'body_text', 'image_alt_tag']}. \n# the user question is: Retrieve the names and email addresses of all users who have created at least one page with a title containing the word \"optimization\" and have a billing record with a total amount greater than $100, sorted by the total amount:. \n#SQL query: SELECT DISTINCT Users.name, Users.email, SUM(Billing_Records.total_amount) as total_amount FROM Users INNER JOIN Pages ON Users.user_id = Pages.user_id INNER JOIN Page_Content ON Pages.page_id = Page_Content.page_id INNER JOIN Billing_Records ON Users.user_id = Billing_Records.user_id WHERE Page_Content.title LIKE '%optimization%' AND Billing_Records.total_amount > 100 GROUP BY Users.user_id ORDER BY total_amount DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Pets\" and have a budget greater than $4.5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Pets\" and have a budget greater than $4.5 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Pets' AND Campaigns.budget > 4500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nINNER JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.option_value = 'Pets' AND Campaigns.budget > 4500000 AND Campaigns.status = 'active';",
    "prompt_token_number": 631,
    "response_token_number": 83
},
{
    "id": 33252,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'screens': ['project_id', 'screen_id', 'name', 'created_at', 'updated_at', 'description', 'priority', 'last_updated_by', 'last_modified', 'owner_id'], 'task_screens': ['screen_id', 'task_id', 'user_id']}. \n# the user question is: Retrieve the names and descriptions of all screens that have not been assigned to any tasks yet:. \n#SQL query: SELECT name, description FROM screens WHERE screen_id NOT IN ( SELECT DISTINCT screen_id FROM task_screens );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with a category of \"News\" and target users interested in \"Politics\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with a category of \"News\" and target users interested in \"Politics\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Apps ON Ad_Placements.app_id = Apps.app_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Apps.category = 'News' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Politics' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget\nFROM Campaigns\nINNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id\nINNER JOIN Apps ON Ad_Placements.app_id = Apps.app_id\nINNER JOIN Targeting_Options ON Targeting_Options.campaign_id = Campaigns.campaign_id\nWHERE Apps.category = 'News' AND Targeting_Options.option_value = 'Politics'\nGROUP BY Campaigns.name, Campaigns.budget\nHAVING COUNT(Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 385,
    "response_token_number": 109
},
{
    "id": 33253,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Workout': ['WorkoutID', 'UserID', 'PlanID', 'Date', 'WorkoutType', 'StartTime', 'EndTime', 'Duration', 'TimeSeconds', 'CaloriesBurned', 'WorkoutTypeID', 'Distance', 'Type', 'TotalCalories', 'USERID', 'WorkoutName', 'Steps', 'HeartRate', 'ExerciseTypeID'], 'WorkoutExercise': ['WorkoutID', 'ExerciseID', 'Sets', 'Reps', 'Weight', 'Duration', 'CaloriesBurned', 'NumSets', 'NumReps']}. \n# the user question is: Find the total weight lifted by a user in all workouts completed in the last week:. \n#SQL query: SELECT SUM(WorkoutExercise.Sets * WorkoutExercise.Reps * WorkoutExercise.Weight) AS TotalWeightLifted FROM Workout INNER JOIN WorkoutExercise ON Workout.WorkoutID = WorkoutExercise.WorkoutID WHERE Workout.UserID = 1 AND Workout.Date >= DATE('now', '-7 days')\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Home Decor\" and have a budget greater than $2 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Home Decor\" and have a budget greater than $2 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Home Decor' AND Campaigns.budget > 2000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites\nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.targeting_type = 'interest' \nAND Targeting_Options.option_value = 'Home Decor' \nAND Campaigns.budget > 2000000;",
    "prompt_token_number": 494,
    "response_token_number": 104
},
{
    "id": 33254,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Artists': ['artist_id', 'artist_name', 'country', 'birth_date'], 'Artists_Instruments': ['instrument_id', 'artist_id'], 'Instruments': ['instrument_id', 'instrument_name'], 'Artists_Awards': ['artist_id', 'award_id', 'album_id']}. \n# the user question is: \"Retrieve the names of artists who have won an award and also perform vocals.\". \n#SQL query: SELECT artist_name FROM Artists WHERE artist_id IN ( SELECT artist_id FROM Artists_Awards ) AND artist_id IN ( SELECT artist_id FROM Artists_Instruments WHERE instrument_id = ( SELECT instrument_id FROM Instruments WHERE instrument_name = 'Vocals' ) );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $3 million and have been updated in the last 200 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $3 million and have been updated in the last 200 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 3000000 AND Creatives.updated_at BETWEEN DATE('now', '-200 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT name, type FROM Creatives WHERE campaign_id IN (SELECT campaign_id FROM Campaigns WHERE budget > 3000000) AND DATEDIFF(CURDATE(), updated_at) <= 200;",
    "prompt_token_number": 341,
    "response_token_number": 41
},
{
    "id": 33255,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'menu_items': ['description', 'item_name', 'price', 'category', 'menu_item_id', 'menu_item_name', 'is_vegetarian', 'rating', 'name', 'vegetarian', 'id', 'calories', 'restaurant_id', 'vegan']}. \n# the user question is: Calculate the total number of menu items in each category.. \n#SQL query: SELECT category, COUNT(*) FROM menu_items GROUP BY category;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $3 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $3 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 3000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.option_value = 'Travel' \nAND Campaigns.status = 'active' \nAND Campaigns.budget > 3000000\nGROUP BY Apps.name, Apps.category;",
    "prompt_token_number": 371,
    "response_token_number": 99
},
{
    "id": 33257,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Comedians': ['first_name', 'last_name', 'comedian_id', 'nationality', 'birthplace', 'country_id', 'birth_year', 'gender', 'name', 'city_id', 'school_id', 'birth_state', 'netflix_special', 'youtube_subscribers', 'experience'], 'Specials': ['title', 'special_id', 'description', 'year', 'duration', 'release_year', 'show_id', 'production_id', 'release_date'], 'Special_Comedians': ['special_id', 'comedian_id'], 'Special_Networks': ['special_id', 'network_id'], 'Networks': ['network_id', 'name']}. \n# the user question is: Retrieve the titles and release years of all specials that were released on Comedy Central and had at least one comedian who was born in New York.. \n#SQL query: SELECT DISTINCT s.title, s.year FROM Specials s JOIN Special_Comedians sc ON sc.special_id = s.special_id JOIN Comedians c ON c.comedian_id = sc.comedian_id JOIN Special_Networks sn ON sn.special_id = s.special_id JOIN Networks n ON n.network_id = sn.network_id WHERE n.name = 'Comedy Central' AND c.birthplace LIKE '%New York%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Beauty\" and target users interested in \"Skincare\" or \"Makeup\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Beauty\" and target users interested in \"Skincare\" or \"Makeup\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Beauty' AND Targeting_Options.targeting_type = 'interests' AND (Targeting_Options.option_value = 'Skincare' OR Targeting_Options.option_value = 'Makeup') GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT c.name, c.budget \nFROM Campaigns c \nJOIN Ad_Placements ap ON ap.campaign_id = c.campaign_id \nJOIN Websites w ON w.website_id = ap.website_id \nJOIN Targeting_Options to ON to.campaign_id = c.campaign_id \nWHERE w.category = 'Beauty' AND (to.option_value = 'Skincare' OR to.option_value = 'Makeup');",
    "prompt_token_number": 553,
    "response_token_number": 84
},
{
    "id": 33258,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'therapists': ['first_name', 'last_name', 'therapist_id', 'cnt', 'gender', 'is_available', 'specialty', 'last_login_date', 'session_count'], 'appointments': ['appointment_id', 'therapist_id', 'appointment_date', 'patient_id', 'end_time', 'start_time', 'session_duration_minutes', 'session_cost', 'satisfaction_rating', 'is_missed', 'sessions_per_week', 'session_length_minutes', 'start_date', 'attended', 'end_date', 'therapy_id'], 'sessions': ['session_date', 'appointment_id', 'session_length', 'session_id', 'duration_minutes', 'end_date', 'start_date']}. \n# the user question is: Find the total number of sessions for each therapist in the past month.. \n#SQL query: SELECT t.first_name || ' ' || t.last_name AS therapist_name, COUNT(*) AS session_count FROM therapists t JOIN appointments a ON a.therapist_id = t.therapist_id JOIN sessions s ON s.appointment_id = a.appointment_id AND s.session_date >= DATE('now', '-1 month') GROUP BY therapist_name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $2.5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $2.5 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 2500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON ap.website_id = w.website_id JOIN Campaigns c ON c.campaign_id = ap.campaign_id JOIN Targeting_Options to ON to.campaign_id = c.campaign_id WHERE c.status = 'active' AND c.budget > 2500000 AND to.targeting_type = 'interest' AND to.option_value = 'Food' GROUP BY w.name, w.category HAVING COUNT(ap.ad_placement_id) > 0;",
    "prompt_token_number": 526,
    "response_token_number": 103
},
{
    "id": 33260,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director', 'runtime', 'budget', 'box_office', 'rating', 'release_date', 'imdb_rating', 'director_id', 'production_company_id', 'box_office_gross'], 'Genre': ['genre_id', 'name'], 'MovieGenre': ['movie_id', 'genre_id'], 'MovieDirector': ['movie_id', 'director_id', 'last_name', 'first_name'], 'Director': ['last_name', 'director_id', 'first_name', 'birthplace', 'gender', 'name']}. \n# the user question is: Show the top 5 Western movies with the highest box office revenue, along with their release dates and directors, sorted by box office revenue in descending order.. \n#SQL query: SELECT Movie.title, Movie.release_date, Director.first_name || ' ' || Director.last_name AS director_name, Movie.box_office FROM Movie JOIN MovieDirector ON Movie.movie_id = MovieDirector.movie_id JOIN Director ON MovieDirector.director_id = Director.director_id JOIN MovieGenre ON Movie.movie_id = MovieGenre.movie_id JOIN Genre ON MovieGenre.genre_id = Genre.genre_id WHERE Genre.name = 'Western' ORDER BY Movie.box_office DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $2.5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $2.5 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 2500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.targeting_type = 'Fitness' \nAND Campaigns.status = 'active' \nAND Campaigns.budget > 2500000;",
    "prompt_token_number": 536,
    "response_token_number": 92
},
{
    "id": 33261,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Minerals': ['mineral_name', 'hardness', 'mineral_id', 'color', 'streak_color', 'crystal_system', 'luster', 'specific_gravity', 'cleavage', 'fracture', 'economic_value', 'transparency', 'fracture_type', 'refractive_index', 'density', 'habit', 'group', 'mohs_hardness', 'origin', 'magnetism', 'radioactivity', 'fluorescence', 'luminescence', 'reactivity', 'toxicity', 'magnetic_property', 'pleochroism', 'birefringence', 'diaphaneity', 'melting_point', 'occurrence', 'habitat', 'classification', 'use', 'optical_properties'], 'RockCompositions': ['mineral_id', 'percentage', 'rock_id']}. \n# the user question is: Find the average percentage composition of each mineral in all rock formations.. \n#SQL query: SELECT m.mineral_name, AVG(rc.percentage) AS average_percentage FROM Minerals m JOIN RockCompositions rc ON m.mineral_id = rc.mineral_id GROUP BY m.mineral_name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $6 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $6 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 6000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT a.name, a.contact_email \nFROM Advertisers a \nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id \nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id \nWHERE t.targeting_type = 'Music' AND c.status = 'active' AND c.budget > 6000000 \nGROUP BY a.name, a.contact_email HAVING COUNT(c.campaign_id) >= 1;",
    "prompt_token_number": 466,
    "response_token_number": 91
},
{
    "id": 33262,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']}. \n# the user question is: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $500 million:. \n#SQL query: SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 500000000 AND Campaigns.status = 'active';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and target users interested in \"Shoes\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and target users interested in \"Shoes\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Fashion' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Shoes' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget \nFROM Campaigns \nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nJOIN Websites ON Ad_Placements.website_id = Websites.website_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Websites.category = 'Fashion' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Shoes';",
    "prompt_token_number": 517,
    "response_token_number": 93
},
{
    "id": 33263,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']}. \n# the user question is: Find the instructors who have taught at least 5 different classes in the last month.. \n#SQL query: SELECT Instructors.instructor_name FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE Enrollments.enrollment_date >= date('now', '-1 month') GROUP BY Instructors.instructor_id HAVING COUNT(DISTINCT ClassSessions.class_id) >= 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $3 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $3 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 3000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.option_value = 'Technology' \nAND Campaigns.status = 'active' \nAND Campaigns.budget > 3000000 \nGROUP BY Websites.website_id \nHAVING COUNT(Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 583,
    "response_token_number": 115
},
{
    "id": 33264,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Inventory': ['product_id', 'supplier_id', 'quantity', 'inventory_id', 'units_in_stock', 'quantity_on_hand', 'expiration_date', 'expected_arrival_date', 'quantity_on_order'], 'Suppliers': ['supplier_name', 'supplier_id', 'phone_number', 'address', 'email', 'country', 'contact_name', 'state', 'city', 'phone', 'company_name', 'Canada', 'USA', 'supplier_rating', 'zip'], 'Sale_Items': ['product_id', 'sale_id', 'quantity', 'sale_item_id', 'customer_id', 'unit_price', 'discount_code', 'sale_date', 'price'], 'Sales': ['employee_id', 'sale_id', 'sale_date', 'customer_id', 'total', 'total_amount', 'payment_method', 'total_price', 'total_spent', 'location_id', 'coupon_code', 'start_date', 'discount_percentage', 'end_date', 'product_id'], 'Product_Ratings': ['rating', 'product_id']}. \n# the user question is: Retrieve the names and total revenue for all products that have not been sold in the last 6 months and have a rating of 2 or lower, and were supplied by a company based in the US.. \n#SQL query: SELECT Products.product_name, SUM(Inventory.quantity * Products.price) AS total_revenue FROM Products INNER JOIN Inventory ON Products.product_id = Inventory.product_id LEFT JOIN Sale_Items ON Products.product_id = Sale_Items.product_id INNER JOIN Product_Ratings ON Products.product_id = Product_Ratings.product_id INNER JOIN Suppliers ON Inventory.supplier_id = Suppliers.supplier_id WHERE Product_Ratings.rating <= 2 AND (Sale_Items.sale_item_id IS NULL OR Sale_Items.sale_id NOT IN ( SELECT DISTINCT Sales.sale_id FROM Sales WHERE Sales.sale_date > DATE('now', '-6 months') )) AND Suppliers.country = 'US' GROUP BY Products.product_id ORDER BY total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $5 million and have been updated in the last 300 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $5 million and have been updated in the last 300 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 5000000 AND Creatives.updated_at BETWEEN DATE('now', '-300 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 5000000 AND Creatives.updated_at > DATE('now', '-300 days');",
    "prompt_token_number": 685,
    "response_token_number": 51
},
{
    "id": 33265,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['director', 'release_year', 'film_id', 'title', 'box_office', 'language_id', 'runtime', 'budget', 'genre', 'based_on_true_story', 'film_title', 'film_gross', 'film_release_date', 'film_length', 'film_imdb_rating', 'film_director', 'film_runtime_minutes', 'film_release_year', 'film_worldwide_gross', 'film_budget', 'production_company_id', 'film_box_office_gross', 'film_user_rating', 'film_runtime', 'film_director_gender', 'film_box_office_rank', 'genre_id', 'film_duration', 'film_box_office_collection', 'film_running_time', 'film_country', 'film_rating', 'film_revenue', 'film_box_office', 'film_language', 'film_name', 'studio_id', 'film_production_budget'], 'Film_Director': ['director_id', 'film_id', 'director_name'], 'Director': ['director_id', 'director_name', 'gender', 'director_gender'], 'War': ['war_id', 'war_name', 'war_start_year'], 'Film_War': ['war_id', 'film_id', 'battle_id']}. \n# the user question is: Find the average box office gross of war films directed by Francis Ford Coppola, grouped by war:. \n#SQL query: SELECT War.war_name, AVG(Film.film_box_office_gross) AS avg_gross FROM Film INNER JOIN Film_Director ON Film.film_id = Film_Director.film_id INNER JOIN Director ON Film_Director.director_name = Director.director_name INNER JOIN Film_War ON Film.film_id = Film_War.film_id INNER JOIN War ON Film_War.war_id = War.war_id WHERE Director.director_name = 'Francis Ford Coppola' AND War.war_name != 'Non-War Film' GROUP BY War.war_name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $3.5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $3.5 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 3500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category FROM Apps INNER JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id INNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id INNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Campaigns.budget > 3500000 AND Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Sports';",
    "prompt_token_number": 675,
    "response_token_number": 97
},
{
    "id": 33266,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']}. \n# the user question is: Retrieve the name, email, and total number of products purchased by each customer, sorted by the total number of products in descending order:. \n#SQL query: SELECT c.name, c.email, SUM(oi.quantity) AS total_products_purchased FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id GROUP BY c.customer_id ORDER BY total_products_purchased DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Education\" and have a budget greater than $5.5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Education\" and have a budget greater than $5.5 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Education' AND Campaigns.budget > 5500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT a.name, a.contact_email\nFROM Advertisers a \nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id \nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id \nWHERE t.targeting_type = 'Education' \nAND c.status = 'active' \nAND c.budget > 5500000\nGROUP BY a.advertiser_id\nHAVING COUNT(c.campaign_id) >= 1;",
    "prompt_token_number": 448,
    "response_token_number": 92
},
{
    "id": 33267,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Employees': ['first_name', 'employee_id', 'last_name', 'hire_date', 'salary', 'job_title_id', 'department_id', 'location_id', 'job_title', 'employee_status_id', 'employee_experience', 'certification_id', 'equipment_rental_cost', 'hourly_rate', 'Salary', 'Department'], 'Project_Employees': ['employee_id', 'project_id', 'end_date'], 'Employees_Job_Titles': ['employee_id', 'job_title_id'], 'Job_Titles': ['job_title_name', 'job_title_id', 'Project', 'Manager', 'job_title']}. \n# the user question is: List all the employees who have a job title of \"Architect\" and have worked on at least 2 projects that have a status of \"Completed\".. \n#SQL query: SELECT DISTINCT e.first_name, e.last_name FROM Employees e INNER JOIN Employees_Job_Titles ejt ON e.employee_id = ejt.employee_id INNER JOIN Job_Titles jt ON ejt.job_title_id = jt.job_title_id INNER JOIN Project_Employees pe ON e.employee_id = pe.employee_id INNER JOIN Projects p ON pe.project_id = p.project_id WHERE jt.job_title_name = 'Architect' AND p.status = 'Completed' GROUP BY e.employee_id HAVING COUNT(DISTINCT p.project_id) >= 2;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Health\" and target users interested in \"Nutrition\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Health\" and target users interested in \"Nutrition\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Health' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Nutrition' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT c.name, c.budget FROM Campaigns c INNER JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id INNER JOIN Websites w ON ap.website_id = w.website_id INNER JOIN Targeting_Options to ON c.campaign_id = to.campaign_id WHERE w.category = 'Health' AND to.option_value = 'Nutrition';",
    "prompt_token_number": 720,
    "response_token_number": 72
},
{
    "id": 33268,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months'], 'Story': ['story_id', 'headline', 'content', 'date_published', 'outlet_id', 'campaign_id', 'date', 'journalist_id', 'sentiment_score', 'body', 'views', 'shares', 'likes', 'clicks', 'impressions', 'comments', 'text', 'publication_date', 'word_count'], 'Event': ['event_id', 'name', 'date', 'location', 'description', 'campaign_id', 'state', 'city', 'venue_id', 'start_date', 'price', 'capacity', 'start_time', 'status', 'location_id', 'host_organization', 'Event_Name', 'Event_ID', 'Date_Held'], 'Influencer': ['influencer_id', 'first_name', 'last_name', 'email', 'phone_number', 'followers', 'profile', 'age'], 'Endorsement': ['endorsement_id', 'influencer_id', 'product_name', 'date_posted', 'campaign_id', 'fee']}. \n# the user question is: Retrieve the names and dates of all events that have been featured in a story associated with a campaign that has at least one endorsement from an influencer with the last name \"Garcia\":. \n#SQL query: SELECT DISTINCT Event.name, Event.date FROM Event INNER JOIN Campaign ON Event.campaign_id = Campaign.campaign_id INNER JOIN Endorsement ON Campaign.campaign_id = Endorsement.campaign_id INNER JOIN Influencer ON Endorsement.influencer_id = Influencer.influencer_id INNER JOIN Story ON Campaign.campaign_id = Story.campaign_id WHERE Influencer.last_name = 'Garcia';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $4 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $4 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 4000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Websites.name, Websites.category FROM Websites INNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id INNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id INNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.option_value = 'Travel' AND Campaigns.status = 'active' AND Campaigns.budget > 4000000;",
    "prompt_token_number": 716,
    "response_token_number": 88
},
{
    "id": 33269,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Customers': ['customer_id', 'email', 'first_name', 'last_name', 'country_id', 'address', 'city', 'country', 'state', 'loyalty_level', 'York', 'customer_name', 'customer_city', 'phone', 'subscribed_to_newsletter', 'has_ordered_online'], 'Order_Items': ['price', 'quantity', 'order_id', 'book_id', 'customer_id', 'publisher_id', 'is_returned', 'product_id', 'is_delivered', 'total_price', 'order_date'], 'Orders': ['order_date', 'order_id', 'customer_id', 'coupon_code', 'total_cost', 'total_quantity', 'shipping_address_id', 'total_price', 'total_amount', 'salesperson_id', 'book_id', 'channel_id', 'Order_Date', 'Order_Total', 'Customer_Name']}. \n# the user question is: Retrieve the names and email addresses of customers who have placed at least one order for a book with a price greater than $50.. \n#SQL query: SELECT c.first_name, c.last_name, c.email FROM Customers c WHERE c.customer_id IN ( SELECT o.customer_id FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Books b ON oi.book_id = b.book_id WHERE b.price > 50 );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $6 million and have been updated in the last 350 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $6 million and have been updated in the last 350 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 6000000 AND Creatives.updated_at BETWEEN DATE('now', '-350 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Cr.name, Cr.type FROM Creatives Cr WHERE Cr.campaign_id IN ( SELECT C.campaign_id FROM Campaigns C WHERE C.budget > 6000000 ) AND Cr.updated_at > CURRENT_DATE - INTERVAL '350 day';",
    "prompt_token_number": 576,
    "response_token_number": 49
},
{
    "id": 33270,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Volume': ['series_id', 'id', 'title', 'publisher_id', 'issue_count', 'volume_id', 'publication_date', 'publication_year', 'release_date', 'price', 'format'], 'Series': ['publisher_id', 'title', 'id', 'universe', 'start_date', 'main_protagonist_id', 'rating'], 'Publisher': ['name', 'id', 'country', 'Image', 'Comics'], 'Creator': ['name', 'id', 'Lee', 'Jim', 'Fabry', 'Glenn', 'McKean'], 'Creator_Appearance': ['creator_id', 'issue_id', 'series_id', 'role', 'volume_id']}. \n# the user question is: Find the names of all publishers that have published issues that have been written by Alan Moore.. \n#SQL query: SELECT DISTINCT p.name FROM Publisher p JOIN Series s ON p.id = s.publisher_id JOIN Volume v ON s.id = v.series_id JOIN Issue i ON v.id = i.volume_id JOIN Creator_Appearance ca ON i.id = ca.issue_id JOIN Creator c ON ca.creator_id = c.id AND c.name = 'Alan Moore';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $4 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $4 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 4000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT a.name, a.category \nFROM Apps a \nJOIN Ad_Placements ap ON a.app_id = ap.app_id \nJOIN Campaigns c ON ap.campaign_id = c.campaign_id \nJOIN Targeting_Options to ON c.campaign_id = to.campaign_id \nWHERE c.status = 'active' AND to.targeting_type = 'interest' AND to.option_value = 'Gaming' AND c.budget > 4000000",
    "prompt_token_number": 589,
    "response_token_number": 91
},
{
    "id": 33271,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']}. \n# the user question is: List the names of all customers who have placed an order for a product that has a rating of 4 or higher and has been returned.. \n#SQL query: SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Rating >= 4 INNER JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Books\" and have a budget greater than $6.5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Books\" and have a budget greater than $6.5 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Books' AND Campaigns.budget > 6500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT a.name, a.contact_email \nFROM Advertisers a \nINNER JOIN Campaigns c ON a.advertiser_id = c.advertiser_id AND c.status = 'active' AND c.budget > 6500000\nINNER JOIN Targeting_Options t ON c.campaign_id = t.campaign_id AND t.targeting_type = 'interest' AND t.option_value = 'Books';",
    "prompt_token_number": 566,
    "response_token_number": 80
},
{
    "id": 33272,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Comedians': ['first_name', 'last_name', 'comedian_id', 'nationality', 'birthplace', 'country_id', 'birth_year', 'gender', 'name', 'city_id', 'school_id', 'birth_state', 'netflix_special', 'youtube_subscribers', 'experience'], 'Jokes': ['setup', 'punchline', 'comedian_id', 'joke_id']}. \n# the user question is: Retrieve the names of all comedians who have a joke with the word \"love\" in the setup and the word \"laugh\" in the punchline.. \n#SQL query: SELECT DISTINCT c.first_name, c.last_name FROM Comedians c JOIN Jokes j ON j.comedian_id = c.comedian_id WHERE j.setup LIKE '%' || 'love' || '%' AND j.punchline LIKE '%' || 'laugh' || '%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Entertainment\" and target users interested in \"Movies\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Entertainment\" and target users interested in \"Movies\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Entertainment' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON ap.campaign_id = c.campaign_id JOIN Websites w ON w.website_id = ap.website_id JOIN Targeting_Options to ON to.campaign_id = c.campaign_id WHERE w.category = 'Entertainment' AND to.option_value = 'Movies';",
    "prompt_token_number": 468,
    "response_token_number": 69
},
{
    "id": 33273,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'password_hash', 'is_admin', 'name', 'last_login_at', 'last_login', 'created_at', 'verified', 'activated'], 'Billing_Records': ['billing_record_id', 'user_id', 'amount', 'description', 'created_at', 'payment_status', 'total_amount'], 'Support_Tickets': ['support_ticket_id', 'user_id', 'subject', 'message', 'status', 'created_at', 'updated_at', 'priority', 'ticket_id', 'is_resolved', 'closed_at', 'is_viewed', 'category', 'resolved_at']}. \n# the user question is: Retrieve the names and emails of all users who have created a support ticket in the last 30 days and have not created a billing record, and whose last login was more than 90 days ago, sorted by email in ascending order:. \n#SQL query: SELECT name, email FROM Users WHERE user_id IN ( SELECT DISTINCT user_id FROM Support_Tickets WHERE created_at >= date('now', '-30 days') ) AND user_id NOT IN ( SELECT DISTINCT user_id FROM Billing_Records ) AND last_login <= date('now', '-90 days') ORDER BY email ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $3.5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $3.5 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 3500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT name, category FROM Websites WHERE website_id IN (\n    SELECT DISTINCT website_id from Ad_Placements WHERE campaign_id IN (\n        SELECT campaign_id from Campaigns WHERE budget > 3500000 AND status = 'active' AND campaign_id IN (\n            SELECT campaign_id from Targeting_Options WHERE targeting_type = 'interest' AND option_value = 'Art'\n        )\n    )\n);",
    "prompt_token_number": 543,
    "response_token_number": 77
},
{
    "id": 33274,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Product': ['SegmentID', 'ProductName', 'ProductID', 'CompanyID', 'UnitsInStock', 'UnitPrice', 'Category', 'Price', 'Cost', 'CategoryID', 'CurrentInventoryLevel', 'UnitCost', 'Description', 'Discontinued', 'CategoryName', 'SupplierID', 'CostPrice', 'ReorderPoint', 'DiscontinuedDate', 'SubcategoryID', 'SalesPrice', 'QuantityOnHand', 'PromotionID'], 'SalesOrderLineItem': ['ProductID', 'UnitPrice', 'Quantity', 'OrderID', 'OrderDate', 'Price', 'OrderLineID']}. \n# the user question is: Retrieve the list of products that have never been sold, including their name, category, and price:. \n#SQL query: SELECT Product.ProductName, Product.CategoryName, Product.Price FROM Product LEFT JOIN SalesOrderLineItem ON Product.ProductID = SalesOrderLineItem.ProductID WHERE SalesOrderLineItem.ProductID IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $7 million and have been updated in the last 400 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $7 million and have been updated in the last 400 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 7000000 AND Creatives.updated_at BETWEEN DATE('now', '-400 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 7000000 AND Creatives.updated_at > CURDATE() - INTERVAL 400 DAY;",
    "prompt_token_number": 401,
    "response_token_number": 52
},
{
    "id": 33275,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Activities': ['activity_id', 'program_id', 'activity_type', 'goal_id', 'activity_category', 'activity_intensity_factor', 'activity_name', 'Strength', 'Training'], 'User_Activities': ['activity_value', 'activity_id', 'date_recorded', 'user_id', 'activity_units', 'activity_date', 'activity_duration', 'activity_intensity', 'activity_hr', 'activity_distance', 'activity_calories', 'activity_count', 'duration', 'distance', 'weight', 'heart_rate', 'date_completed', 'activity_name', 'calories_burned']}. \n# the user question is: Find the users who have completed both \"Cycling\" and \"Running\" activities in the last 7 days:. \n#SQL query: SELECT Users.first_name, Users.last_name, Users.email FROM Users WHERE Users.user_id IN ( SELECT user_id FROM User_Activities WHERE activity_id IN ( SELECT activity_id FROM Activities WHERE activity_type = 'Cycling' OR activity_type = 'Running' ) AND activity_date BETWEEN date('now', '-7 days') AND date('now') GROUP BY user_id HAVING COUNT(DISTINCT activity_id) = 2 );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $4.5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $4.5 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 4500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.targeting_type = 'Food' \nAND Campaigns.status = 'Active'\nAND Campaigns.budget > 4500000 \nGROUP BY Apps.app_id \nHAVING COUNT(DISTINCT Ad_Placements.ad_placement_id) > 0;",
    "prompt_token_number": 564,
    "response_token_number": 114
},
{
    "id": 33276,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Employee': ['FirstName', 'EmployeeID', 'LastName', 'JobTitle', 'SupervisorID', 'State', 'Country', 'Region', 'EndYear', 'StartYear', 'Continent', 'Title', 'QuarterlySalesTarget', 'EmailAddress', 'HireDate', 'City'], 'EmployeeManager': ['EmployeeID', 'ManagerID', 'EmployeeCount']}. \n# the user question is: Retrieve the list of managers and the average number of employees they manage, sorted by average number of employees managed in descending order:. \n#SQL query: SELECT Manager.FirstName, Manager.LastName, AVG(EmployeeManager.EmployeeCount) as AverageNumberOfEmployeesManaged FROM Employee JOIN EmployeeManager ON Employee.EmployeeID = EmployeeManager.EmployeeID JOIN Employee as Manager ON EmployeeManager.ManagerID = Manager.EmployeeID GROUP BY Manager.EmployeeID ORDER BY AverageNumberOfEmployeesManaged DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Pets\" and have a budget greater than $7 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Pets\" and have a budget greater than $7 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Pets' AND Campaigns.budget > 7000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.status = 'active'\nAND Targeting_Options.targeting_type = 'Pets'\nAND Campaigns.budget > 7000000\nGROUP BY Advertisers.advertiser_id\nHAVING COUNT(Campaigns.campaign_id) >= 1;",
    "prompt_token_number": 394,
    "response_token_number": 105
},
{
    "id": 33277,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Coral_Reefs': ['reef_id', 'reef_name', 'location', 'depth', 'coral_species', 'area', 'conservation_status', 'biodiversity_index', 'age']}. \n# the user question is: Which coral reefs in the Coral_Reefs table are located in the Atlantic Ocean and have a depth of less than 50 meters?. \n#SQL query: SELECT reef_name FROM Coral_Reefs WHERE location LIKE '%Atlantic Ocean%' AND depth < 50;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Finance\" and target users interested in \"Investing\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Finance\" and target users interested in \"Investing\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Finance' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Investing' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget \nFROM Campaigns\nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id\nJOIN Websites ON Ad_Placements.website_id = Websites.website_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Websites.category = 'Finance' AND Targeting_Options.option_value = 'Investing';",
    "prompt_token_number": 385,
    "response_token_number": 81
},
{
    "id": 33278,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'director_id', 'duration', 'release_date', 'genre', 'genre_id', 'language_id'], 'Review': ['rating', 'film_id', 'review_id']}. \n# the user question is: \"List the film titles and the respective number of reviews for films released in the year 2022.\". \n#SQL query: SELECT Film.title, COUNT(Review.review_id) AS review_count FROM Film LEFT JOIN Review ON Film.film_id = Review.film_id WHERE strftime('%Y', Film.release_date) = '2022' GROUP BY Film.film_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Beauty\" and have a budget greater than $4.5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Beauty\" and have a budget greater than $4.5 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Beauty' AND Campaigns.budget > 4500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category FROM Websites\nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id\nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Targeting_Options.targeting_type = 'Beauty'\nAND Campaigns.status = 'active'\nAND Campaigns.budget > 4500000\nGROUP BY Websites.website_id\nHAVING COUNT(Ad_Placements.ad_placement_id) > 0;",
    "prompt_token_number": 414,
    "response_token_number": 113
},
{
    "id": 33279,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Show': ['rating', 'year', 'title', 'show_id', 'genre_id', 'studio_id', 'release_year', 'country_id', 'network_id', 'director_id', 'air_year', 'release_date', 'genre', 'status', 'production_type', 'producer_id', 'start_year', 'end_year'], 'User': ['user_id', 'username'], 'User_Review': ['show_id', 'user_id', 'review_text', 'episode_id', 'country_id', 'rating', 'network_id', 'genre_id', 'num_shows_with_same_network']}. \n# the user question is: Find the users who have reviewed every TV show in the database.. \n#SQL query: SELECT User.username FROM User JOIN User_Review ON User.user_id = User_Review.user_id GROUP BY User.user_id HAVING COUNT(DISTINCT User_Review.show_id) = ( SELECT COUNT(*) FROM Show );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $8 million and have been updated in the last 450 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $8 million and have been updated in the last 450 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 8000000 AND Creatives.updated_at BETWEEN DATE('now', '-450 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type \nFROM Creatives \nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id \nWHERE Campaigns.budget > 8000000 AND DATEDIFF(CURRENT_DATE, Creatives.updated_at) <= 450;",
    "prompt_token_number": 392,
    "response_token_number": 56
},
{
    "id": 33280,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']}. \n# the user question is: Find the name and HDI (Human Development Index) of the 5 countries with the highest HDI and a population greater than 20 million:. \n#SQL query: SELECT name, hdi FROM Country WHERE population > 20000000 ORDER BY hdi DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $6 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $6 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 6000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'Fashion' AND Campaigns.budget > 6000000;",
    "prompt_token_number": 553,
    "response_token_number": 90
},
{
    "id": 33281,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Cast': ['name', 'cast_id', 'show_id', 'actor_id', 'role', 'episode_id', 'is_guest_star', 'tv_show_id'], 'Actor': ['name', 'actor_id', 'oscar_wins', 'gender', 'age', 'id']}. \n# the user question is: List the actors who have appeared in more than one TV show.. \n#SQL query: SELECT Actor.name FROM Actor JOIN Cast ON Actor.actor_id = Cast.actor_id GROUP BY Actor.actor_id HAVING COUNT(DISTINCT Cast.show_id) > 1\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fitness\" and have a budget greater than $9 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fitness\" and have a budget greater than $9 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 9000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.option_value = 'Fitness' AND Campaigns.status = 'active' AND Campaigns.budget > 9000000 \nGROUP BY Advertisers.advertiser_id HAVING COUNT(Campaigns.campaign_id) >= 1",
    "prompt_token_number": 339,
    "response_token_number": 102
},
{
    "id": 33282,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Episode': ['rating', 'show_id', 'guest_id', 'episode_number', 'episode_id', 'air_date', 'host_id', 'year', 'month', 'max_rating'], 'Show': ['show_name', 'show_id', 'Night', 'Late', 'Talk', 'host_id', 'rating', 'end_time', 'start_time', 'language'], 'Viewership': ['episode_id', 'viewer_id', 'rating', 'show_id', 'air_date'], 'Viewer': ['location', 'email', 'viewer_id', 'viewer_name', 'age_range', 'occupation', 'gender']}. \n# the user question is: \"Retrieve the names of viewers who have watched every episode of the show 'The Talk Show' and rated it above 8.\". \n#SQL query: SELECT Viewer.viewer_name FROM Viewer INNER JOIN Viewership ON Viewer.viewer_id = Viewership.viewer_id INNER JOIN Episode ON Viewership.episode_id = Episode.episode_id INNER JOIN Show ON Episode.show_id = Show.show_id WHERE Show.show_name = 'The Talk Show' AND Viewership.rating > 8 GROUP BY Viewer.viewer_name HAVING COUNT(DISTINCT Episode.episode_id) = ( SELECT COUNT(*) FROM Episode WHERE Episode.show_id = Show.show_id );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Technology\" and target users interested in \"Gadgets\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Technology\" and target users interested in \"Gadgets\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Technology' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gadgets' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget \nFROM Campaigns \nINNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id\nINNER JOIN Websites ON Ad_Placements.website_id = Websites.website_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Websites.category = 'Technology' AND Targeting_Options.option_value = 'Gadgets'\nGROUP BY Campaigns.name, Campaigns.budget\nHAVING COUNT(DISTINCT Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 548,
    "response_token_number": 113
},
{
    "id": 33283,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'plant': ['common_name', 'family', 'image', 'scientific_name', 'traditional_use', 'max_height', 'native_to', 'fruit_edible', 'family_name', 'plant_type', 'water_need', 'species_id', 'plant_id', 'growth_form']}. \n# the user question is: List the names of all plants that have edible fruits and are native to South America.. \n#SQL query: SELECT common_name FROM plant WHERE fruit_edible = 1 AND native_to LIKE '%South America%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Home Decor\" and have a budget greater than $5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Home Decor\" and have a budget greater than $5 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Home Decor' AND Campaigns.budget > 5000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.targeting_type = 'interest' \nAND Targeting_Options.option_value = 'Home Decor' \nAND Campaigns.budget > 5000000;",
    "prompt_token_number": 393,
    "response_token_number": 104
},
{
    "id": 33286,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'stocks': ['stock_price', 'stock_name', 'shares', 'user_id', 'stock_id', 'stock_quantity', 'stock_symbol', 'company_name', 'stock_type_id', 'current_price', 'dividend_yield', 'stock_value', 'quantity', 'price', 'previous_value', 'current_value', 'stock_date', 'price_to_earnings', 'name', 'XYZ']}. \n# the user question is: Calculate the total value of all stocks with a stock price greater than $200.00:. \n#SQL query: SELECT SUM(stock_price * stock_quantity) FROM stocks WHERE stock_price > 200.00;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $8 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $8 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 8000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 8000000;",
    "prompt_token_number": 352,
    "response_token_number": 81
},
{
    "id": 33287,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'john_doe', 'jane_smith', 'mike_jones'], 'Projects': ['user_id', 'Project', 'project_name', 'project_id', 'created_date'], 'LoadBalancers': ['project_id', 'balancer_name', 'balancer_id'], 'Databases': ['project_id', 'db_id', 'database_id']}. \n# the user question is: Text Query: Retrieve the username and email of users who have both load balancers and databases in their projects.. \n#SQL query: SELECT Users.username, Users.email FROM Users INNER JOIN Projects ON Users.user_id = Projects.user_id WHERE EXISTS ( SELECT 1 FROM LoadBalancers WHERE LoadBalancers.project_id = Projects.project_id ) AND EXISTS ( SELECT 1 FROM Databases WHERE Databases.project_id = Projects.project_id );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"News\" and target users interested in \"Politics\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"News\" and target users interested in \"Politics\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'News' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Politics' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget\nFROM Campaigns\nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id\nJOIN Websites ON Ad_Placements.website_id = Websites.website_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Websites.category = 'News' AND Targeting_Options.option_value = 'Politics';",
    "prompt_token_number": 462,
    "response_token_number": 80
},
{
    "id": 33288,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Devices': ['device_id', 'device_name', 'device_type', 'os', 'webserver', 'user_id', 'office_id', 'model', 'manufacturer', 'last_scanned', 'status', 'added_time', 'last_communication_time', 'os_version', 'snmp_community_string', 'hardware_status', 'firmware_version', 'last_reboot_time', 'last_seen_online_time', 'online_status', 'last_active_timestamp', 'ram_capacity', 'processor_speed', 'free_storage_space', 'location', 'operating_system'], 'Network_Interfaces': ['interface_id', 'device_id', 'interface_name', 'ip_address', 'subnet_mask', 'mac_address', 'default_gateway', 'vlan_tag', 'interface_type', 'bandwidth', 'link_speed', 'ip_address_type', 'mtu', 'dns_server', 'ip_mode', 'vlan_id', 'link_status', 'speed', 'interface_speed', 'status', 'last_activity_time']}. \n# the user question is: Show all network interfaces that have an IP address assigned and are not currently in use, and list the associated interface name, device name, IP address, and status for each interface.. \n#SQL query: SELECT ni.interface_name, d.device_name, ni.ip_address, ni.status FROM Network_Interfaces ni INNER JOIN Devices d ON ni.device_id = d.device_id WHERE ni.ip_address IS NOT NULL AND ni.status = 'Not in use';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $6 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $6 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 6000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT w.name, w.category \nFROM Websites w \nINNER JOIN Ad_Placements ap ON w.website_id = ap.website_id \nINNER JOIN Campaigns c ON ap.campaign_id = c.campaign_id \nINNER JOIN Targeting_Options to ON c.campaign_id = to.campaign_id \nWHERE to.targeting_type = 'Sports' AND c.status = 'Active' AND c.budget > 6000000;",
    "prompt_token_number": 584,
    "response_token_number": 85
},
{
    "id": 33289,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Genres': ['genre_id', 'game_id'], 'Genres': ['genre_id', 'genre_name'], 'Game_Ratings': ['rating_id', 'game_id'], 'Ratings': ['rating_name', 'rating_id', 'rating_value']}. \n# the user question is: Find the names of all games that have a genre with a name containing \"puzzle\" and a rating of \"E (Everyone)\".. \n#SQL query: SELECT DISTINCT Games.game_title FROM Games INNER JOIN Game_Genres ON Games.game_id = Game_Genres.game_id INNER JOIN Genres ON Game_Genres.genre_id = Genres.genre_id INNER JOIN Game_Ratings ON Games.game_id = Game_Ratings.game_id INNER JOIN Ratings ON Game_Ratings.rating_id = Ratings.rating_id WHERE Genres.genre_name LIKE '%puzzle%' AND Ratings.rating_name = 'E (Everyone)';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $12 million and have been updated in the last 550 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $12 million and have been updated in the last 550 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 12000000 AND Creatives.updated_at BETWEEN DATE('now', '-550 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 12000000 AND Creatives.updated_at >= DATE_SUB(NOW(), INTERVAL 550 DAY);",
    "prompt_token_number": 406,
    "response_token_number": 53
},
{
    "id": 33291,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'garden_plants': ['garden_id', 'plant_id', 'variety_id', 'id', 'updated_at', 'quantity', 'created_at', 'description', 'name', 'plant_variety_id', 'planted_on', 'plant_density', 'garden_bed_id', 'last_watered'], 'task_assignments': ['updated_at', 'task_id', 'created_at', 'assigned_to', 'due_date', 'garden_id', 'completed_at', 'id', 'garden_plant_id', 'status', 'task_type', 'plant_variety_id']}. \n# the user question is: Retrieve the names of all the garden plants that have not been assigned to any task.. \n#SQL query: SELECT DISTINCT garden_plants.name FROM garden_plants LEFT JOIN task_assignments ON garden_plants.id = task_assignments.garden_plant_id WHERE task_assignments.id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Art\" and have a budget greater than $10 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Art\" and have a budget greater than $10 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 10000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.option_value = 'Art' AND Campaigns.status = 'active' AND Campaigns.budget > 10000000;",
    "prompt_token_number": 411,
    "response_token_number": 82
},
{
    "id": 33292,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Comedians': ['first_name', 'last_name', 'comedian_id', 'nationality', 'birthplace', 'country_id', 'birth_year', 'gender', 'name', 'city_id', 'school_id', 'birth_state', 'netflix_special', 'youtube_subscribers', 'experience'], 'Performances': ['rating', 'comedian_id', 'show_id', 'performance_id', 'special_id', 'venue_id', 'production_id', 'performance_date'], 'Specials': ['title', 'special_id', 'description', 'year', 'duration', 'release_year', 'show_id', 'production_id', 'release_date'], 'Special_Networks': ['special_id', 'network_id'], 'Networks': ['network_id', 'name'], 'Tags': ['tag_id', 'tag'], 'Special_Tags': ['special_id', 'tag_id']}. \n# the user question is: Retrieve the names of all comedians who have performed in a show that was released on HBO and had the tag \"stand-up comedy\".. \n#SQL query: SELECT DISTINCT c.first_name, c.last_name FROM Comedians c JOIN Performances p ON p.comedian_id = c.comedian_id JOIN Specials s ON s.special_id = p.special_id JOIN Special_Tags st ON st.special_id = s.special_id JOIN Tags t ON t.tag_id = st.tag_id JOIN Special_Networks sn ON sn.special_id = s.special_id JOIN Networks n ON n.network_id = sn.network_id WHERE n.name = 'HBO' AND t.tag = 'stand-up comedy';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Fitness\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Fitness\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Sports' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON ap.campaign_id = c.campaign_id JOIN Websites w ON w.website_id = ap.website_id JOIN Targeting_Options to ON to.campaign_id = c.campaign_id WHERE w.category = 'Sports' AND to.option_value = 'Fitness';",
    "prompt_token_number": 612,
    "response_token_number": 68
},
{
    "id": 33293,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Platforms': ['platform_id', 'game_id', 'online_players'], 'Platforms': ['platform_id', 'platform_name', 'platform_release_date', 'platform_manufacturer', 'platform_publisher', 'platform_release_year', 'manufacturer_id'], 'Game_Characters': ['character_id', 'game_id'], 'Characters': ['character_name', 'character_id', 'character_description']}. \n# the user question is: Find the names of all games that have a character with a name containing \"Ezio\" and a platform that was released after 2010.. \n#SQL query: SELECT Games.game_title FROM Games INNER JOIN Game_Characters ON Games.game_id = Game_Characters.game_id INNER JOIN Characters ON Game_Characters.character_id = Characters.character_id INNER JOIN Game_Platforms ON Games.game_id = Game_Platforms.game_id INNER JOIN Platforms ON Game_Platforms.platform_id = Platforms.platform_id WHERE Characters.character_name LIKE '%Ezio%' AND strftime('%Y', Platforms.platform_release_date) > '2010';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $8 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $8 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 8000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 8000000;",
    "prompt_token_number": 521,
    "response_token_number": 92
},
{
    "id": 33294,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Rides': ['end_time', 'bike_id', 'duration_minutes', 'user_id', 'ride_type', 'cost', 'start_location_id', 'ride_id', 'location_id', 'start_time', 'distance_miles', 'end_location_id', 'distance', 'rental_price', 'start_station_id', 'end_station_id', 'duration', 'fare', 'end_location', 'start_location', 'price', 'distance_km']}. \n# the user question is: Which locations have the highest number of rides started in the past month?. \n#SQL query: SELECT start_location_id, COUNT(*) AS total_rides FROM Rides WHERE start_time >= date('now', '-1 month') GROUP BY start_location_id ORDER BY total_rides DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $15 million and have been updated in the last 600 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $15 million and have been updated in the last 600 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 15000000 AND Creatives.updated_at BETWEEN DATE('now', '-600 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type \nFROM Creatives \nJOIN Campaigns \nON Creatives.campaign_id = Campaigns.campaign_id \nWHERE Campaigns.budget > 15000000 AND Creatives.updated_at >= date('now', '-600 day');",
    "prompt_token_number": 359,
    "response_token_number": 54
},
{
    "id": 33295,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Sessions': ['psychologist_id', 'patient_id', 'date', 'location', 'therapist', 'therapist_id', 'session_date', 'session_id', 'duration_minutes', 'missed', 'remote_session'], 'Patients': ['name', 'patient_id', 'birthdate', 'case_id', 'age', 'date_of_birth', 'last_name', 'first_name'], 'Diagnosis': ['suspect_id', 'patient_id', 'disorder', 'disorder_subtype', 'recommendation', 'disorder_id', 'criminal_id'], 'Therapists': ['last_name', 'therapist_id', 'first_name', 'count', 'experience_years', 'license_number'], 'Specializations': ['specialization_name', 'therapist_id']}. \n# the user question is: List all therapists who have treated patients with bipolar disorder and have a specialization in cognitive-behavioral therapy.. \n#SQL query: SELECT DISTINCT t.first_name, t.last_name FROM Therapists t INNER JOIN Sessions s ON t.therapist_id = s.therapist_id INNER JOIN Patients p ON s.patient_id = p.patient_id INNER JOIN Diagnosis d ON p.patient_id = d.patient_id INNER JOIN Specializations sp ON t.therapist_id = sp.therapist_id WHERE d.disorder LIKE '%bipolar disorder%' AND sp.specialization_name LIKE '%cognitive-behavioral therapy%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $4 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $4 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 4000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT a.name, a.category FROM Apps a INNER JOIN Ad_Placements ap ON a.app_id = ap.app_id INNER JOIN Campaigns c ON ap.campaign_id = c.campaign_id INNER JOIN Targeting_Options to ON c.campaign_id = to.campaign_id WHERE to.targeting_type LIKE '%Food%' AND c.budget > 4000000 AND c.status = 'active';",
    "prompt_token_number": 569,
    "response_token_number": 80
},
{
    "id": 33296,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Author': ['author_id', 'first_name', 'last_name', 'email', 'gender', 'country_id', 'birth_year', 'has_pulitzer_prize', 'has_phd', 'has_booker_prize', 'birth_country', 'name', 'author_name', 'id'], 'Book': ['book_id', 'title', 'isbn', 'publisher_id', 'publication_date', 'rating', 'price', 'publication_year', 'author_id', 'publisher', 'author', 'weight', 'author_gender', 'language', 'author_name', 'book_title', 'format_id', 'page_count', 'id', 'num_pages'], 'Book_Author': ['book_id', 'author_id']}. \n# the user question is: Find all authors who have written books with a rating lower than 2.0 and a price higher than $25.. \n#SQL query: SELECT DISTINCT Author.first_name, Author.last_name FROM Author JOIN Book_Author ON Author.author_id = Book_Author.author_id JOIN Book ON Book_Author.book_id = Book.book_id WHERE Book.rating < 2.0 AND Book.price > 25;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Movies\" and have a budget greater than $12 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Movies\" and have a budget greater than $12 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' AND Campaigns.budget > 12000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.targeting_type = 'Movies' \nAND Campaigns.budget > 12000000;",
    "prompt_token_number": 458,
    "response_token_number": 85
},
{
    "id": 33297,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Participants': ['first_name', 'last_name', 'participant_id', 'gender', 'age', 'birth_year', 'date_of_birth', 'ag', 'age_group_id', 'parental_edu_id', 'language_group_id'], 'Participant_Questionnaires': ['participant_id', 'questionnaire_id', 'participant_questionnaire_id', 'completion_date', 'response_text', 'score', 'task_id', 'completion_time']}. \n# the user question is: Retrieve the number of completed questionnaires for each participant, broken down by month:. \n#SQL query: SELECT Participants.first_name, Participants.last_name, STRFTIME('%Y-%m', Participant_Questionnaires.completion_date) AS month, COUNT(DISTINCT Participant_Questionnaires.questionnaire_id) AS num_questionnaires FROM Participants JOIN Participant_Questionnaires ON Participants.participant_id = Participant_Questionnaires.participant_id GROUP BY Participants.participant_id, month;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Business\" and target users interested in \"Finance\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Business\" and target users interested in \"Finance\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Business' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Finance' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget \nFROM Campaigns \nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nJOIN Websites ON Ad_Placements.website_id = Websites.website_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Websites.category = 'Business' \nAND Targeting_Options.targeting_type = 'Finance'\nGROUP BY Campaigns.campaign_id\nHAVING COUNT(DISTINCT Ad_Placements.ad_placement_id) > 0;",
    "prompt_token_number": 473,
    "response_token_number": 107
},
{
    "id": 33298,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['director', 'release_year', 'film_id', 'title', 'box_office', 'language_id', 'runtime', 'budget', 'genre', 'based_on_true_story', 'film_title', 'film_gross', 'film_release_date', 'film_length', 'film_imdb_rating', 'film_director', 'film_runtime_minutes', 'film_release_year', 'film_worldwide_gross', 'film_budget', 'production_company_id', 'film_box_office_gross', 'film_user_rating', 'film_runtime', 'film_director_gender', 'film_box_office_rank', 'genre_id', 'film_duration', 'film_box_office_collection', 'film_running_time', 'film_country', 'film_rating', 'film_revenue', 'film_box_office', 'film_language', 'film_name', 'studio_id', 'film_production_budget'], 'War': ['war_id', 'war_name', 'war_start_year'], 'Film_War': ['war_id', 'film_id', 'battle_id']}. \n# the user question is: Find the name and release year of the war film with the highest production budget:. \n#SQL query: SELECT Film.film_name, Film.film_release_year FROM Film INNER JOIN Film_War ON Film.film_id = Film_War.film_id INNER JOIN War ON Film_War.war_id = War.war_id WHERE War.war_name != 'Non-War Film' ORDER BY Film.film_production_budget DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $9 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $9 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 9000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.targeting_type = 'Travel' \nAND Campaigns.status = 'Active' \nAND Campaigns.budget > 9000000;",
    "prompt_token_number": 591,
    "response_token_number": 95
},
{
    "id": 33299,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['username', 'user_id', 'address_id', 'work_address_id', 'last_active_date', 'home_address_id', 'last_activity_date', 'registration_date', 'email', 'total_purchase_amount', 'user_type_id', 'country', 'name'], 'Orders': ['order_date', 'order_id', 'address_id', 'user_id', 'order_total', 'shipping_status', 'shipping_address_id'], 'Addresses': ['state_id', 'address_id', 'city', 'street_address', 'city_id', 'country_id'], 'States': ['country_id', 'state_id', 'state_name', 'sales_tax_rate', 'population_density', 'time_zone', 'population', 'state_code'], 'Countries': ['country_name', 'country_id', 'population', 'continent', 'country_code', 'name', 'region_id']}. \n# the user question is: Get the details of all orders that were shipped to a city in the United States:. \n#SQL query: SELECT Orders.order_id, Users.username, Addresses.street_address, Addresses.city, States.state_name, Countries.country_name FROM Orders INNER JOIN Users ON Orders.user_id = Users.user_id INNER JOIN Addresses ON Orders.address_id = Addresses.address_id INNER JOIN States ON Addresses.state_id = States.state_id INNER JOIN Countries ON States.country_id = Countries.country_id WHERE Countries.country_name = 'United States';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $20 million and have been updated in the last 700 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $20 million and have been updated in the last 700 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 20000000 AND Creatives.updated_at BETWEEN DATE('now', '-700 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 20000000 AND Creatives.updated_at > DATE_SUB(CURRENT_DATE, INTERVAL 700 DAY);",
    "prompt_token_number": 483,
    "response_token_number": 54
},
{
    "id": 33300,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'injuries': ['injury_type', 'athlete_id', 'injury_id', 'injury_date', 'injury_duration'], 'athlete_injury_status': ['injury_id', 'status_id'], 'injury_status': ['status_name', 'status_id'], 'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'mental_skills': ['skill_id', 'skill_name', 'skill_description', 'athlete_id', 'Focus', 'Visualization', 'skill_mastered', 'skill_level', 'Excellent', 'High', 'Low']}. \n# the user question is: Get a list of all athletes who have a \"Beginner\" level in the \"Visualization\" mental skill and a \"Career-Ending\" injury status within the last 3 months.. \n#SQL query: SELECT athletes.name, injury_status.status_name FROM athletes INNER JOIN injuries ON athletes.athlete_id = injuries.athlete_id INNER JOIN athlete_injury_status ON injuries.injury_id = athlete_injury_status.injury_id INNER JOIN injury_status ON athlete_injury_status.status_id = injury_status.status_id INNER JOIN athlete_skills ON athletes.athlete_id = athlete_skills.athlete_id INNER JOIN mental_skills ON athlete_skills.skill_id = mental_skills.skill_id WHERE injury_status.status_name = 'Career-Ending' AND mental_skills.skill_name = 'Visualization' AND athlete_skills.skill_level = 'Beginner' AND injuries.injury_date >= date('now', '-3 month');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Gaming\" and have a budget greater than $15 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Gaming\" and have a budget greater than $15 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 15000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nINNER JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 15000000;",
    "prompt_token_number": 586,
    "response_token_number": 84
},
{
    "id": 33301,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'password_hash', 'is_admin', 'name', 'last_login_at', 'last_login', 'created_at', 'verified', 'activated'], 'Support_Tickets': ['support_ticket_id', 'user_id', 'subject', 'message', 'status', 'created_at', 'updated_at', 'priority', 'ticket_id', 'is_resolved', 'closed_at', 'is_viewed', 'category', 'resolved_at']}. \n# the user question is: Retrieve the names and emails of all users who have created a support ticket in the last 14 days and have not logged in in the last 60 days, sorted by email in ascending order:. \n#SQL query: SELECT name, email FROM Users WHERE user_id IN ( SELECT DISTINCT user_id FROM Support_Tickets WHERE created_at >= date('now', '-14 days') ) AND last_login <= date('now', '-60 days') ORDER BY email ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Entertainment\" and target users interested in \"Celebrities\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Entertainment\" and target users interested in \"Celebrities\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Entertainment' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Celebrities' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT name, budget FROM Campaigns WHERE campaign_id IN ( SELECT DISTINCT campaign_id FROM Ad_Placements WHERE website_id IN ( SELECT website_id FROM Websites WHERE category = 'Entertainment' ) ) AND campaign_id IN ( SELECT campaign_id FROM Targeting_Options WHERE targeting_type = 'Celebrities' )",
    "prompt_token_number": 486,
    "response_token_number": 60
},
{
    "id": 33302,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Event': ['event_id', 'event_name', 'event_date', 'location_id', 'event_category_id', 'event_type_id', 'location', 'venue_id', 'start_date', 'end_date', 'category', 'event_code', 'EVT', 'organizer_id', 'duration', 'name', 'Expo', 'Tech', 'country', 'category_id', 'city', 'ticket_price', 'date', 'start_time', 'end_time', 'min_age_requirement', 'event_type', 'capacity', 'registration_deadline', 'num_attendees', 'min_age', 'duration_hours', 'registration_fee', 'price'], 'Attendee': ['attendee_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'date_of_birth', 'job_title', 'city', 'age', 'email'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID'], 'Event_Session': ['session_type_id', 'event_id', 'session_id', 'speaker_id', 'rating', 'price'], 'Session_Type': ['session_type_name', 'session_type_id'], 'Event_Session_Attendee': ['registration_id', 'session_id', 'event_id', 'attendee_id', 'rating']}. \n# the user question is: What are the names and email addresses of attendees who have registered for events with a \"Speaker Series\" session type and have also attended at least one event in the year 2023?. \n#SQL query: SELECT Attendee.first_name, Attendee.last_name, Attendee.email_address FROM Attendee INNER JOIN Registration ON Attendee.attendee_id = Registration.attendee_id INNER JOIN Event ON Registration.event_id = Event.event_id INNER JOIN Event_Session_Attendee ON Registration.registration_id = Event_Session_Attendee.registration_id INNER JOIN Event_Session ON Event_Session_Attendee.session_id = Event_Session.session_id INNER JOIN Session_Type ON Event_Session.session_type_id = Session_Type.session_type_id WHERE Session_Type.session_type_name = 'Speaker Series' AND strftime('%Y', Event.event_date) = '2023' AND Registration.attended = 1 GROUP BY Attendee.first_name, Attendee.last_name, Attendee.email_address;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $10 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $10 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Health' AND Campaigns.budget > 10000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category FROM Websites INNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id INNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id INNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Health' AND Campaigns.budget > 10000000 GROUP BY Websites.name, Websites.category;",
    "prompt_token_number": 784,
    "response_token_number": 105
},
{
    "id": 33303,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Websites': ['website_id', 'user_id', 'url', 'created_at', 'updated_at', 'name', 'domain_id', 'domain_authority_score', 'domain_created_at'], 'Pages': ['page_id', 'website_id', 'url', 'title', 'description', 'content', 'created_at', 'updated_at', 'meta_description', 'meta_keywords', 'meta_title', 'h1_tag', 'h2_tag', 'title_tag', 'canonical_url', 'description_tag', 'header_tag', 'meta_tag', 'meta_keyword', 'h1', 'heading', 'header', 'word_count', 'time_on_page', 'total_words', 'http_status_code', 'user_id', 'last_modified_date', '[website_id]'], 'Page_Stats': ['page_stat_id', 'page_id', 'visits', 'bounce_rate', 'time_on_page', 'created_at', 'updated_at', 'organic_traffic', 'load_time', 'page_speed_score', 'total_images', 'total_videos', 'page_authority_score', 'domain_authority_score', 'page_load_time', 'backlinks', 'search_query', 'search_volume']}. \n# the user question is: Retrieve the names and URLs of all websites that have at least one page with a time on page greater than or equal to 360 seconds and a bounce rate less than or equal to 0.02:. \n#SQL query: SELECT DISTINCT Websites.name, Websites.url FROM Websites INNER JOIN Pages ON Websites.website_id = Pages.website_id INNER JOIN Page_Stats ON Pages.page_id = Page_Stats.page_id WHERE Page_Stats.time_on_page >= 360 AND Page_Stats.bounce_rate <= 0.02;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $25 million and have been updated in the last 800 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $25 million and have been updated in the last 800 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 25000000 AND Creatives.updated_at BETWEEN DATE('now', '-800 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 25000000 AND DATEDIFF(day, Creatives.updated_at, GETDATE()) <= 800;",
    "prompt_token_number": 555,
    "response_token_number": 55
},
{
    "id": 33304,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Machines': ['machine_name', 'machine_id', 'machine_type', 'last_maintenance_date', 'manufacture_date', 'last_use', 'estimated_repair_cost', 'maintenance_status', 'machine_type_id', 'last_maintenance'], 'Production_Details': ['production_order_id', 'start_time', 'end_time', 'machine_id', 'shift_id', 'product_id', 'duration']}. \n# the user question is: Find the machines that have been used in production in the last week.. \n#SQL query: SELECT DISTINCT Machines.machine_name FROM Machines INNER JOIN Production_Details ON Machines.machine_id = Production_Details.machine_id WHERE Production_Details.start_time BETWEEN DATE('now', '-1 week') AND DATE('now');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $5 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 5000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Apps.name, Apps.category \nFROM Apps \nINNER JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.targeting_type = 'Sports' \nAND Campaigns.status = 'active' \nAND Campaigns.budget > 5000000;",
    "prompt_token_number": 426,
    "response_token_number": 96
},
{
    "id": 33305,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Activities': ['activity_id', 'program_id', 'activity_type', 'goal_id', 'activity_category', 'activity_intensity_factor', 'activity_name', 'Strength', 'Training'], 'User_Activities': ['activity_value', 'activity_id', 'date_recorded', 'user_id', 'activity_units', 'activity_date', 'activity_duration', 'activity_intensity', 'activity_hr', 'activity_distance', 'activity_calories', 'activity_count', 'duration', 'distance', 'weight', 'heart_rate', 'date_completed', 'activity_name', 'calories_burned']}. \n# the user question is: Find the average distance of all \"Walking\" activities completed by each user in the last 30 days:. \n#SQL query: SELECT Users.first_name, Users.last_name, AVG(User_Activities.distance) AS Average_Walking_Distance FROM Users JOIN User_Activities ON Users.user_id = User_Activities.user_id JOIN Activities ON User_Activities.activity_id = Activities.activity_id WHERE Activities.activity_type = 'Walking' AND User_Activities.activity_date BETWEEN date('now', '-30 days') AND date('now') GROUP BY Users.user_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $18 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $18 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 18000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email\nFROM Advertisers\nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.status = 'Active' \nAND Targeting_Options.targeting_type = 'Music' \nAND Campaigns.budget > 18000000\nGROUP BY Advertisers.advertiser_id\nHAVING COUNT(Campaigns.campaign_id) >= 1;",
    "prompt_token_number": 499,
    "response_token_number": 107
},
{
    "id": 33306,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'password_hash', 'is_admin', 'name', 'last_login_at', 'last_login', 'created_at', 'verified', 'activated'], 'Billing_Records': ['billing_record_id', 'user_id', 'amount', 'description', 'created_at', 'payment_status', 'total_amount'], 'Support_Tickets': ['support_ticket_id', 'user_id', 'subject', 'message', 'status', 'created_at', 'updated_at', 'priority', 'ticket_id', 'is_resolved', 'closed_at', 'is_viewed', 'category', 'resolved_at']}. \n# the user question is: Retrieve the names and emails of all users who have created a billing record in the last 30 days and have not created a support ticket, sorted by email in ascending order:. \n#SQL query: SELECT name, email FROM Users WHERE user_id IN ( SELECT DISTINCT user_id FROM Billing_Records WHERE created_at >= date('now', '-30 days') ) AND user_id NOT IN ( SELECT DISTINCT user_id FROM Support_Tickets ) ORDER BY email ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Home\" and have a budget greater than $7 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Home\" and have a budget greater than $7 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Home' AND Campaigns.budget > 7000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT name, category FROM Websites WHERE website_id IN (SELECT DISTINCT website_id FROM Ad_Placements WHERE campaign_id IN (SELECT campaign_id FROM Campaigns WHERE budget > 7000000 AND status = 'active' AND campaign_id IN (SELECT campaign_id FROM Targeting_Options WHERE targeting_type = 'Interest' AND option_value = 'Home')))",
    "prompt_token_number": 517,
    "response_token_number": 69
},
{
    "id": 33307,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue'], 'Director': ['last_name', 'director_id', 'first_name', 'country_id', 'production_company_id', 'gender'], 'Film_Director': ['film_id', 'director_id']}. \n# the user question is: Find the directors who have directed films with a box office earning of over 500 million:. \n#SQL query: SELECT DISTINCT Director.first_name, Director.last_name FROM Director INNER JOIN Film_Director ON Director.director_id = Film_Director.director_id INNER JOIN Film ON Film_Director.film_id = Film.film_id AND Film.box_office > 500000000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $30 million and have been updated in the last 900 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $30 million and have been updated in the last 900 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 30000000 AND Creatives.updated_at BETWEEN DATE('now', '-900 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type \nFROM Creatives \nINNER JOIN Campaigns \nON Creatives.campaign_id = Campaigns.campaign_id \nAND Campaigns.budget > 30000000\nAND DATEDIFF(CURRENT_DATE, Creatives.updated_at) <= 900;",
    "prompt_token_number": 393,
    "response_token_number": 59
},
{
    "id": 33308,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'News_Article': ['category_id', 'content', 'created_at', 'title', 'user_id', 'id', 'article_id', 'date', 'published_date', 'word_count', 'updated_date', 'author_id', 'publish_date'], 'User': ['id', 'name', 'email', 'janesmith', 'user_id', 'category_id', 'city_id', 'country_name', 'country'], 'Comment': ['user_id', 'article_id', 'date', 'id'], 'News_Article_Topic': ['topic_id', 'article_id'], 'News_Topic': ['id', 'name']}. \n# the user question is: Retrieve the names and email addresses of all users who have written at least one comment on an article written by a user who has also written an article related to \"Education\".. \n#SQL query: SELECT DISTINCT User.name, User.email FROM User JOIN Comment ON User.id = Comment.user_id JOIN News_Article ON Comment.article_id = News_Article.id WHERE News_Article.user_id IN ( SELECT News_Article.user_id FROM News_Article JOIN News_Article_Topic ON News_Article.id = News_Article_Topic.article_id JOIN News_Topic ON News_Article_Topic.topic_id = News_Topic.id WHERE News_Topic.name = 'Education' );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Beauty\" and have a budget greater than $4.5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Beauty\" and have a budget greater than $4.5 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Beauty' AND Campaigns.budget > 4500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.option_value = 'Beauty' AND Campaigns.status = 'active' AND Campaigns.budget > 4500000;",
    "prompt_token_number": 564,
    "response_token_number": 85
},
{
    "id": 33309,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Recipes': ['cooking_time', 'recipe_id', 'title', 'category_id', 'preparation_time', 'difficulty_level_id', 'creation_date', 'cuisine_type_id'], 'Favorites': ['favorite_id', 'user_id', 'recipe_id', 'timestamp'], 'Categories': ['name', 'category_id']}. \n# the user question is: Text Query: \"Get the names of the categories that have recipes favorited by all users.\". \n#SQL query: SELECT c.name FROM Categories c JOIN Recipes r ON c.category_id = r.category_id LEFT JOIN Favorites f ON r.recipe_id = f.recipe_id GROUP BY c.name HAVING COUNT(DISTINCT f.user_id) = (SELECT COUNT(*) FROM Users);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Education\" and have a budget greater than $20 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Education\" and have a budget greater than $20 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Education' AND Campaigns.budget > 20000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT a.name, a.contact_email \nFROM Advertisers a \nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id \nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id \nWHERE c.status = 'active' AND t.targeting_type = 'Education' AND c.budget > 20000000 \nGROUP BY a.name, a.contact_email \nHAVING COUNT(c.campaign_id) >= 1;",
    "prompt_token_number": 369,
    "response_token_number": 92
},
{
    "id": 33310,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Customers': ['customer_id', 'customer_name', 'company_name', 'city', 'country', 'address_id', 'first_name', 'last_name', 'region', 'contact_name', 'email', 'phone', 'registration_date', 'CustomerID', 'CustomerName'], 'Orders': ['order_total', 'customer_id', 'order_date', 'order_id', 'employee_id', 'shipper_id', 'supplier_id', 'shipped_date', 'required_date', 'shipping_cost', 'shipping_refunded', 'quantity', 'unit_price', 'product_id', 'total_amount', 'refund_issued', 'cancelled_date', 'returned_date', 'shipping_date', 'status', 'OrderDate', 'OrderStatus', 'ShippedDate', 'OrderID', 'CustomerID']}. \n# the user question is: Find the total sales made by each customer in the last month.. \n#SQL query: SELECT Customers.customer_name, SUM(Orders.order_total) AS total_sales FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id WHERE Orders.order_date BETWEEN DATE('now', '-1 month') AND DATE('now') GROUP BY Customers.customer_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and target users interested in \"Shopping\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and target users interested in \"Shopping\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Fashion' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Shopping' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget \nFROM Campaigns \nINNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nINNER JOIN Websites ON Ad_Placements.website_id = Websites.website_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Websites.category = 'Fashion' AND Targeting_Options.option_value = 'Shopping' \nGROUP BY Campaigns.campaign_id \nHAVING COUNT(Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 522,
    "response_token_number": 107
},
{
    "id": 33311,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Publishers': ['publisher_id', 'publisher_name', 'publication_date', 'country', 'name', 'PublisherID', 'PublisherName'], 'Order_Items': ['price', 'quantity', 'order_id', 'book_id', 'customer_id', 'publisher_id', 'is_returned', 'product_id', 'is_delivered', 'total_price', 'order_date']}. \n# the user question is: Retrieve the names of all publishers who have published at least one book that has sold for more than $50.. \n#SQL query: SELECT DISTINCT p.publisher_name FROM Publishers p JOIN Books b ON p.publisher_id = b.publisher_id JOIN Order_Items oi ON b.book_id = oi.book_id WHERE oi.price > 50;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $9 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $9 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 9000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'Technology' AND c.status = 'active' AND c.budget > 9000000;",
    "prompt_token_number": 538,
    "response_token_number": 78
},
{
    "id": 33312,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'ForensicTechnicians': ['technician_specialty', 'technician_name', 'technician_id', 'technician_rank'], 'Evidence': ['case_id', 'evidence_type', 'evidence_id', 'examiner_id'], 'Toolmarks': ['toolmark_details', 'evidence_id', 'toolmark_id', 'toolmark_image'], 'DigitalEvidence': ['evidence_id', 'digital_evidence_type', 'digital_evidence_details', 'examiner_id']}. \n# the user question is: Find the forensic technicians who have worked on cases with both digital evidence and toolmarks:. \n#SQL query: SELECT ft.technician_name FROM ForensicTechnicians ft JOIN Evidence e1 ON ft.technician_id = e1.examiner_id JOIN DigitalEvidence de ON e1.evidence_id = de.evidence_id JOIN Evidence e2 ON ft.technician_id = e2.examiner_id JOIN Toolmarks t ON e2.evidence_id = t.evidence_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $40 million and have been updated in the last 1000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $40 million and have been updated in the last 1000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 40000000 AND Creatives.updated_at BETWEEN DATE('now', '-1000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns cp ON c.campaign_id = cp.campaign_id WHERE cp.budget > 40000000 AND DATEDIFF(CURRENT_DATE, c.updated_at) <= 1000;",
    "prompt_token_number": 403,
    "response_token_number": 50
},
{
    "id": 33313,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {}. \n# the user question is: Retrieve the name and current price for all stocks:. \n#SQL query: SELECT stock_name, stock_price FROM stocks;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $3.5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $3.5 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 3500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.option_value = 'Food' \nAND Campaigns.status = 'active' \nAND Campaigns.budget > 3500000;",
    "prompt_token_number": 311,
    "response_token_number": 91
},
{
    "id": 33314,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID'], 'Customer': ['CustomerName', 'CustomerID', 'Country', 'SegmentID', 'Continent', 'PhoneNumber', 'Email', 'CreditLimit', 'State', 'AddressID', 'EmailAddress', 'LoyaltyLevelID', 'FirstName', 'LastName', 'City', 'StateCode', 'CountryCode', 'RegistrationDate']}. \n# the user question is: Retrieve the list of all customers who have placed an order in the last 90 days, including their name, email address, and the total number of orders placed:. \n#SQL query: SELECT Customer.FirstName, Customer.LastName, Customer.EmailAddress, COUNT(SalesOrder.OrderID) AS NumOrdersPlaced FROM Customer JOIN SalesOrder ON Customer.CustomerID = SalesOrder.CustomerID WHERE SalesOrder.OrderDate >= DATE('now', '-90 days') GROUP BY Customer.CustomerID;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Movies\" and have a budget greater than $22 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Movies\" and have a budget greater than $22 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' AND Campaigns.budget > 22000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'Movies' AND Campaigns.budget > 22000000 GROUP BY Advertisers.advertiser_id HAVING COUNT(Campaigns.status = 'active') >= 1;",
    "prompt_token_number": 463,
    "response_token_number": 92
},
{
    "id": 33316,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Cases': ['case_status', 'case_id', 'case_description', 'case_name'], 'AutopsyReports': ['case_id', 'findings', 'report_date', 'examiner_id', 'autopsy_report_id', 'cause_of_death', 'manner_of_death'], 'ForensicTechnicians': ['technician_specialty', 'technician_name', 'technician_id', 'technician_rank'], 'Evidence': ['case_id', 'evidence_type', 'evidence_id', 'examiner_id']}. \n# the user question is: Get the case names and the corresponding examiner names for cases where the examiner has worked on cases with different types of evidence:. \n#SQL query: SELECT c.case_name, ft.technician_name FROM Cases c JOIN AutopsyReports ar ON c.case_id = ar.case_id JOIN ForensicTechnicians ft ON ar.examiner_id = ft.technician_id JOIN Evidence e ON c.case_id = e.case_id GROUP BY c.case_id, ft.technician_name HAVING COUNT(DISTINCT e.evidence_type) > 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $6 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $6 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 6000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options to ON c.campaign_id = to.campaign_id WHERE to.option_value = \"Art\" AND c.status = \"Active\" AND c.budget > 6000000 GROUP BY w.website_id HAVING COUNT(ap.ad_placement_id) >= 1;",
    "prompt_token_number": 507,
    "response_token_number": 92
},
{
    "id": 33317,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['Price', 'ProductName', 'Category', 'ProductID', 'Cost', 'CategoryID', 'SubcategoryID', 'UnitPrice', 'LastOrderDate', 'UnitsInStock', 'SupplierID', 'UnitCost', 'Discontinued', 'ReorderLevel'], 'Suppliers': ['SupplierID', 'SupplierName', 'Phone', 'ContactName', 'ContactTitle', 'Email', 'CompanyName']}. \n# the user question is: Generate a report of all suppliers and their corresponding products and prices, sorted by supplier name in ascending order:. \n#SQL query: SELECT Suppliers.SupplierName, Products.ProductName, Products.UnitPrice FROM Suppliers INNER JOIN Products ON Suppliers.SupplierID = Products.SupplierID ORDER BY Suppliers.SupplierName ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $50 million and have been updated in the last 1200 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $50 million and have been updated in the last 1200 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 50000000 AND Creatives.updated_at BETWEEN DATE('now', '-1200 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type \nFROM Creatives \nINNER JOIN Campaigns \nON Creatives.campaign_id = Campaigns.campaign_id \nWHERE Campaigns.budget > 50000000 AND DATEDIFF(CURRENT_DATE, Creatives.updated_at) <= 1200;",
    "prompt_token_number": 357,
    "response_token_number": 59
},
{
    "id": 33318,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Cases': ['case_status', 'case_id', 'case_description', 'case_name'], 'DNAProfiles': ['dna_sequence', 'evidence_id', 'examiner_id'], 'ForensicTechnicians': ['technician_specialty', 'technician_name', 'technician_id', 'technician_rank'], 'Evidence': ['case_id', 'evidence_type', 'evidence_id', 'examiner_id'], 'ToxicologyReports': ['toxicology_findings', 'case_id', 'examiner_id', 'report_date', 'victim_id', 'evidence_id', 'report_type']}. \n# the user question is: Find the forensic technicians who have worked on cases involving both toxicology reports and DNA evidence:. \n#SQL query: SELECT ft.technician_name FROM ForensicTechnicians ft JOIN ToxicologyReports tr ON ft.technician_id = tr.examiner_id JOIN Cases c ON tr.case_id = c.case_id JOIN Evidence e ON c.case_id = e.case_id JOIN DNAProfiles dp ON e.evidence_id = dp.evidence_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $6 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $6 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Health' AND Campaigns.budget > 6000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT a.name, a.category FROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options to ON c.campaign_id = to.campaign_id\nWHERE to.option_value = 'Health' AND c.status = 'active' AND c.budget > 6000000;",
    "prompt_token_number": 498,
    "response_token_number": 80
},
{
    "id": 33319,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Manufacturers': ['id', 'name', 'Maybelline', 'Oreal', 'NYX', 'state'], 'Orders': ['total_amount', 'customer_id', 'manufacturer_id', 'product_id', 'retailer_id', 'quantity', 'order_date']}. \n# the user question is: Find the total revenue generated by the \"L'Oreal\" manufacturer.. \n#SQL query: SELECT SUM(total_amount) FROM Orders WHERE manufacturer_id = (SELECT id FROM Manufacturers WHERE name = 'L\\'Oreal');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $25 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $25 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 25000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.status = 'active' \nAND Targeting_Options.option_value = 'Fashion' \nAND Campaigns.budget > 25000000\nGROUP BY Advertisers.name, Advertisers.contact_email\nHAVING COUNT(Campaigns.campaign_id) >= 1;",
    "prompt_token_number": 328,
    "response_token_number": 110
},
{
    "id": 33320,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'director_id', 'duration', 'release_date', 'genre', 'genre_id', 'language_id'], 'Review': ['rating', 'film_id', 'review_id']}. \n# the user question is: \"Retrieve the film titles and the number of reviews they have received, sorted in descending order of the review count.\". \n#SQL query: SELECT Film.title, COUNT(Review.review_id) AS review_count FROM Film LEFT JOIN Review ON Film.film_id = Review.film_id GROUP BY Film.film_id ORDER BY review_count DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $11 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $11 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 11000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Campaigns.budget > 11000000 AND Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Technology' GROUP BY Websites.website_id HAVING COUNT(Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 405,
    "response_token_number": 114
},
{
    "id": 33321,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Transaction': ['BlockID', 'Recipient', 'Sender', 'PublicAddress', 'TransactionID', 'Amount', 'Fee', 'Timestamp', 'GasFee', 'GasUsed', 'GasLimit', 'GasPrice', 'EtherAmount', 'IsSuccess', 'Value', 'Currency', 'NodeID', 'SmartContractInstanceID', 'SenderWalletID', 'RecipientWalletID', 'ReceiverWalletID', 'ConfirmationTime', 'TokenID', 'FromWalletID', 'ToWalletID', 'Status', 'Type', 'ReceiverID', 'SenderID'], 'Wallet': ['BlockID', 'Balance', 'UserID', 'WalletID', 'PublicAddress', 'Currency']}. \n# the user question is: Find the wallets that have a high balance and have not made any transactions within the last 30 days:. \n#SQL query: SELECT Wallet.PublicAddress FROM Wallet LEFT JOIN Transaction ON Wallet.PublicAddress = Transaction.Sender AND Transaction.Timestamp >= datetime('now', '-30 days') WHERE Transaction.TransactionID IS NULL AND Wallet.Balance >= 10000\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $60 million and have been updated in the last 1400 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $60 million and have been updated in the last 1400 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 60000000 AND Creatives.updated_at BETWEEN DATE('now', '-1400 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives LEFT JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id AND Campaigns.budget > 60000000 AND Creatives.updated_at >= date_sub(CURDATE(), INTERVAL 1400 DAY)",
    "prompt_token_number": 418,
    "response_token_number": 55
},
{
    "id": 33322,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Billing': ['session_id', 'date', 'amount', 'id', 'start_time', 'end_time'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id']}. \n# the user question is: Retrieve the names and total amount billed for all therapists who have billed for sessions with a client who has a history of schizophrenia, sorted in descending order by total amount billed:. \n#SQL query: SELECT t.name, SUM(b.amount) AS total_billed FROM Therapists t INNER JOIN Sessions s ON t.id = s.therapist_id INNER JOIN Billing b ON s.id = b.session_id INNER JOIN Session_Attendees sa ON s.id = sa.session_id INNER JOIN Clients c ON sa.client_id = c.id WHERE c.schizophrenia_history = 1 GROUP BY t.id ORDER BY total_billed DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $7 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $7 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 7000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT a.name, a.category FROM Apps a INNER JOIN Ad_Placements ap ON a.app_id = ap.app_id INNER JOIN Campaigns c ON ap.campaign_id = c.campaign_id INNER JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'Music' AND c.budget > 7000000 GROUP BY a.name, a.category",
    "prompt_token_number": 753,
    "response_token_number": 86
},
{
    "id": 33323,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Project_Materials': ['project_id', 'material_id', 'quantity', 'total_quantity'], 'Materials': ['material_id', 'material_name', 'cost_per_unit', 'unit_of_measurement', 'unit_quantity', 'unit_cost', 'quantity', 'unit_price', 'material_type_id', 'quantity_in_stock', 'material_unit', 'quantity_available', 'reorder_level', 'stock_level'], 'Material_Types': ['material_type_name', 'material_type_id']}. \n# the user question is: List all the projects that have been completed within the last 2 years and have used materials with a material type of \"Steel\".. \n#SQL query: SELECT DISTINCT p.project_name FROM Projects p INNER JOIN Project_Materials pm ON p.project_id = pm.project_id INNER JOIN Materials m ON pm.material_id = m.material_id INNER JOIN Material_Types mt ON m.material_type_id = mt.material_type_id WHERE p.project_completion_date BETWEEN DATE('now', '-2 years') AND DATE('now') AND mt.material_type_name = 'Steel';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Gaming\" and have a budget greater than $30 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Gaming\" and have a budget greater than $30 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 30000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a INNER JOIN Campaigns c ON a.advertiser_id = c.advertiser_id INNER JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = \"Gaming\" AND c.budget > 30000000;",
    "prompt_token_number": 592,
    "response_token_number": 71
},
{
    "id": 33324,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Recipes': ['cooking_time', 'recipe_id', 'title', 'category_id', 'preparation_time', 'difficulty_level_id', 'creation_date', 'cuisine_type_id'], 'Favorites': ['favorite_id', 'user_id', 'recipe_id', 'timestamp'], 'Reviews': ['recipe_id', 'review_id', 'user_id', 'rating']}. \n# the user question is: Text Query: \"Get the recipes that have been favorited by at least two different users who have also reviewed the recipe with a rating of 5.\". \n#SQL query: SELECT r.recipe_id, r.title FROM Recipes r JOIN Favorites f ON r.recipe_id = f.recipe_id JOIN Reviews rev ON r.recipe_id = rev.recipe_id WHERE rev.rating = 5 GROUP BY r.recipe_id, r.title HAVING COUNT(DISTINCT f.user_id) >= 2;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $9 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $9 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 9000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements a ON w.website_id = a.website_id JOIN Campaigns c ON a.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'Fitness' AND c.status = 'active' AND c.budget > 9000000 GROUP BY w.name, w.category HAVING COUNT(a.ad_placement_id) >= 1;",
    "prompt_token_number": 462,
    "response_token_number": 95
},
{
    "id": 33325,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Shifts': ['start_time', 'end_time', 'employee_id', 'shift_id', 'duration', 'status', 'shift_date', 'machine_id', 'overtime_hours', 'performance_rating', 'shift_start', 'hours_worked'], 'Employees': ['first_name', 'employee_id', 'last_name', 'job_title', 'territory_id', 'department_id', 'manager_id', 'job_title_id', 'hire_date', 'address', 'birth_date', 'phone', 'title', 'reports_to', 'address_id', 'performance_evaluation_date', 'training_expiry_date', 'schedule_update_date', 'time_off_request_date', 'performance_bonus_date', 'promotion_date', 'overtime_pay_date', 'reassignment_date', 'training_date', 'annual_leave_balance', 'skills_upgrade_date', 'compensatory_time_off_date', 'shift_length', 'last_promotion_date', 'career_development_plan_date', 'last_break_date', 'salary', 'hourly_rate', 'hourly_wage', 'status', 'skill_set', 'ShiftStart', 'ShiftEnd', 'EmployeeID', 'EmployeeName', 'HireDate', 'LastName', 'Title', 'FirstName', 'BirthDate']}. \n# the user question is: Find the employees who have worked on the most number of shifts in the last 6 months and require a performance bonus.. \n#SQL query: SELECT Employees.first_name, Employees.last_name, COUNT(Shifts.shift_id) AS total_shifts FROM Employees INNER JOIN Shifts ON Employees.employee_id = Shifts.employee_id WHERE Shifts.start_time BETWEEN DATE('now', '-6 months') AND DATE('now') AND Employees.performance_bonus_date < DATE('now') GROUP BY Employees.employee_id ORDER BY total_shifts DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $80 million and have been updated in the last 1600 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $80 million and have been updated in the last 1600 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 80000000 AND Creatives.updated_at BETWEEN DATE('now', '-1600 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 80000000 AND Creatives.updated_at BETWEEN DATE('now', '-1600 days') AND DATE('now');",
    "prompt_token_number": 569,
    "response_token_number": 57
},
{
    "id": 33326,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Therapist_Specialties': ['therapist_id', 'specialty', 'specialty_id'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id']}. \n# the user question is: Retrieve the names of all clients who have attended a session with a therapist who has a specialty in either Cognitive Behavioral Therapy or Dialectical Behavior Therapy, and the date of the last session they attended:. \n#SQL query: SELECT DISTINCT c.name, MAX(s.date) AS last_session_date FROM Clients c INNER JOIN Session_Attendees sa ON c.id = sa.client_id INNER JOIN Sessions s ON sa.session_id = s.id INNER JOIN Therapists t ON s.therapist_id = t.id INNER JOIN Therapist_Specialties ts ON t.id = ts.therapist_id WHERE ts.specialty IN ('Cognitive Behavioral Therapy', 'Dialectical Behavior Therapy') GROUP BY c.id\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Business\" and have a budget greater than $5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Business\" and have a budget greater than $5 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Business' AND Campaigns.budget > 5000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT a.name, a.category FROM Apps a INNER JOIN Ad_Placements ap ON a.app_id = ap.app_id INNER JOIN Campaigns c ON ap.campaign_id = c.campaign_id INNER JOIN Targeting_Options to ON c.campaign_id = to.campaign_id WHERE to.option_value = 'Business' AND c.status = 'active' AND c.budget > 5000000-",
    "prompt_token_number": 766,
    "response_token_number": 80
},
{
    "id": 33327,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Incidents': ['reported_by_user_id', 'location_id', 'created_at', 'incident_id', 'evacuation_status', 'severity_level', 'vehicle_id', 'status', 'reported_time', 'location', 'type', 'start_time', 'assigned_to_vehicle_id', 'incident_date', 'incident_type', 'category_id', 'reporting_agency_id', 'reported_at', 'date_id', 'description', 'date', 'time'], 'Users': ['user_id', 'email', 'username', 'phone_number', 'email_address', 'creation_date', 'current_city_id', 'current_state_id', 'state_id'], 'User_Alert_Subscriptions': ['user_id', 'alert_id'], 'Alerts': ['alert_type', 'alert_id', 'agency_id', 'created_at', 'subscribed_by_user_id', 'alert_date', 'incident_id'], 'Agencies': ['agency_id', 'agency_name', 'Department', 'Fire', 'address', 'Police', 'agency_location_id', 'location_id', 'phone_number', 'state_id', 'county_id'], 'Vehicles': ['vehicle_type', 'agency_id', 'status', 'vehicle_plate_number', 'location_id', 'vehicle_id', 'license_plate_number', 'vin', 'fuel_level', 'mileage', 'model', 'make', 'availability', 'assigned_to_agency_id', 'responded_to_incident_id', 'dispatched_time', 'num_vehicles_involved'], 'Incident_Assignments': ['vehicle_id', 'incident_id', 'end_time', 'location_id']}. \n# the user question is: Retrieve the names and phone numbers of all users who have subscribed to alerts issued by an agency that has at least one vehicle that has been used in an incident in the past hour.. \n#SQL query: SELECT Users.username, Users.phone_number FROM Users INNER JOIN User_Alert_Subscriptions ON Users.user_id = User_Alert_Subscriptions.user_id INNER JOIN Alerts ON User_Alert_Subscriptions.alert_id = Alerts.alert_id INNER JOIN Agencies ON Alerts.agency_id = Agencies.agency_id INNER JOIN Vehicles ON Agencies.agency_id = Vehicles.agency_id INNER JOIN Incident_Assignments ON Vehicles.vehicle_id = Incident_Assignments.vehicle_id INNER JOIN Incidents ON Incident_Assignments.incident_id = Incidents.incident_id WHERE Incidents.reported_time > DATETIME('now', '1 hour') GROUP BY Users.username, Users.phone_number\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $35 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $35 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 35000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nINNER JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 35000000\nGROUP BY Advertisers.name, Advertisers.contact_email",
    "prompt_token_number": 729,
    "response_token_number": 95
},
{
    "id": 33328,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Sales': ['Sales', 'Product', 'Region', 'State', 'product_id', 'dataset_id', 'quantity', 'sale_date', 'Unit_price', 'Sale_date', 'salesperson_id', 'sale_id', 'customer_id', 'company_id', 'unit_price', 'sales_id', 'model_id'], 'Products': ['Product_name', 'Unit_price', 'product_id', 'category_id', 'product_name', 'unit_price', 'origin_state', 'manufacturer_id', 'brand_id', 'stock']}. \n# the user question is: What is the total 'Revenue' generated by sales of each product in the 'Sales' table?. \n#SQL query: SELECT Products.Product_name, SUM(Sales.quantity * Products.Unit_price) AS total_revenue FROM Sales INNER JOIN Products ON Sales.product_id = Products.product_id GROUP BY Products.Product_name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Food\" and target users interested in \"Cooking\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Food\" and target users interested in \"Cooking\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Food' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Cooking' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget\nFROM Campaigns\nINNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id\nINNER JOIN Websites ON Ad_Placements.website_id = Websites.website_id\nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Websites.category = 'Food' AND Targeting_Options.option_value = 'Cooking'\nGROUP BY Campaigns.name;",
    "prompt_token_number": 461,
    "response_token_number": 96
},
{
    "id": 33329,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Artists': ['artist_id', 'artist_name', 'country', 'birth_date'], 'Artists_Awards': ['artist_id', 'award_id', 'album_id'], 'Awards': ['award_id', 'award_name', 'release_date', 'artist_id', 'genre_id'], 'Concerts_Artists': ['concert_id', 'artist_id', 'country', 'city', 'concert_date'], 'Genres': ['genre_id', 'genre_name']}. \n# the user question is: \"Retrieve the names of artists who have won an award in the 'Fusion' genre and have performed in concerts in at least two different cities.\". \n#SQL query: SELECT artist_name FROM Artists WHERE artist_id IN ( SELECT artist_id FROM Artists_Awards WHERE award_id IN ( SELECT award_id FROM Awards WHERE genre_id IN ( SELECT genre_id FROM Genres WHERE genre_name = 'Fusion' ) ) ) AND artist_id IN ( SELECT artist_id FROM Concerts_Artists GROUP BY artist_id HAVING COUNT(DISTINCT city) >= 2 );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $10 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $10 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' AND Campaigns.budget > 10000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT name, category FROM Websites WHERE website_id IN ( SELECT website_id FROM Ad_Placements WHERE campaign_id IN ( SELECT campaign_id FROM Campaigns WHERE ( status = 'active' AND budget > 10000000 ) AND campaign_id IN ( SELECT campaign_id FROM Targeting_Options WHERE ( targeting_type = 'interest' AND option_value = 'Movies' ) ) ) )",
    "prompt_token_number": 503,
    "response_token_number": 75
},
{
    "id": 33330,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'News_Article': ['category_id', 'content', 'created_at', 'title', 'user_id', 'id', 'article_id', 'date', 'published_date', 'word_count', 'updated_date', 'author_id', 'publish_date']}. \n# the user question is: Retrieve the titles and publish dates of the 10 most recently published articles.. \n#SQL query: SELECT title, publish_date FROM News_Article ORDER BY publish_date DESC LIMIT 10;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $90 million and have been updated in the last 1800 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $90 million and have been updated in the last 1800 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 90000000 AND Creatives.updated_at BETWEEN DATE('now', '-1800 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id \nWHERE Campaigns.budget > 90000000 AND Creatives.updated_at > DATE_SUB(CURDATE(), INTERVAL 1800 DAY);",
    "prompt_token_number": 300,
    "response_token_number": 56
},
{
    "id": 33331,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']}. \n# the user question is: Find the name and population density of the 5 most densely populated countries in the \"Europe\" region:. \n#SQL query: SELECT name, population_density FROM Country WHERE region = 'Europe' ORDER BY population_density DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $8 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $8 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 8000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.option_value = 'Fashion' \nAND Campaigns.status = 'active' \nAND Campaigns.budget > 8000000;",
    "prompt_token_number": 543,
    "response_token_number": 91
},
{
    "id": 33333,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Sale_Items': ['product_id', 'sale_id', 'quantity', 'sale_item_id', 'customer_id', 'unit_price', 'discount_code', 'sale_date', 'price'], 'Sales': ['employee_id', 'sale_id', 'sale_date', 'customer_id', 'total', 'total_amount', 'payment_method', 'total_price', 'total_spent', 'location_id', 'coupon_code', 'start_date', 'discount_percentage', 'end_date', 'product_id'], 'Product_Ratings': ['rating', 'product_id']}. \n# the user question is: Retrieve the names and total revenue for all products that have been sold at least 40 times and have a rating of 4 or higher, and were sold in the month of July 2023.. \n#SQL query: SELECT Products.product_name, SUM(Sale_Items.quantity * Products.price) AS total_revenue FROM Products INNER JOIN Sale_Items ON Products.product_id = Sale_Items.product_id INNER JOIN Product_Ratings ON Products.product_id = Product_Ratings.product_id INNER JOIN Sales ON Sale_Items.sale_id = Sales.sale_id WHERE Product_Ratings.rating >= 4 AND (SELECT COUNT(Sale_Items.sale_item_id) FROM Sale_Items WHERE Sale_Items.product_id = Products.product_id) >= 40 AND strftime('%Y-%m', Sales.sale_date) = '2023-07' GROUP BY Products.product_id ORDER BY total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Entertainment\" and target users interested in \"TV Shows\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Entertainment\" and target users interested in \"TV Shows\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Entertainment' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'TV Shows' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget \nFROM Campaigns \nINNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nINNER JOIN Websites ON Ad_Placements.website_id = Websites.website_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Websites.category = 'Entertainment' AND Targeting_Options.option_value = 'TV Shows' \nGROUP BY Campaigns.campaign_id;",
    "prompt_token_number": 660,
    "response_token_number": 100
},
{
    "id": 33334,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Company': ['IndustryID', 'CompanyName', 'CompanyID', 'Continent'], 'Industry': ['IndustryID', 'IndustryName']}. \n# the user question is: Retrieve the list of companies and their industry name in alphabetical order:. \n#SQL query: SELECT Company.CompanyName, Industry.IndustryName FROM Company JOIN Industry ON Company.IndustryID = Industry.IndustryID ORDER BY Company.CompanyName ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $12 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $12 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 12000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns on Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options on Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'Technology' AND Campaigns.status = 'active' AND Campaigns.budget > 12000000;",
    "prompt_token_number": 368,
    "response_token_number": 85
},
{
    "id": 33335,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Practitioners': ['practitioner_id', 'belt_rank', 'martial_art_id', 'dojo_id', 'practitioner_name', 'age'], 'Tournaments': ['tournament_name', 'location', 'end_date', 'start_date', 'tournament_id', 'martial_art_id', 'duration'], 'Matches': ['match_id', 'martial_art_id', 'winner_id', 'tournament_id', 'match_date', 'practitioner_id', 'num_rounds', 'match_duration', 'num_participants']}. \n# the user question is: Retrieve the names of all practitioners who have won matches in tournaments, along with the total number of matches they have won and the tournament names:. \n#SQL query: SELECT p.practitioner_name, COUNT(m.match_id) AS total_wins, t.tournament_name FROM Practitioners p JOIN Matches m ON p.practitioner_id = m.winner_id JOIN Tournaments t ON m.tournament_id = t.tournament_id GROUP BY p.practitioner_name, t.tournament_name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $100 million and have been updated in the last 2000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $100 million and have been updated in the last 2000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 100000000 AND Creatives.updated_at BETWEEN DATE('now', '-2000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT c.name, c.type \nFROM Creatives c \nJOIN Campaigns cp ON c.campaign_id = cp.campaign_id \nWHERE cp.budget > 100000000 AND DATEDIFF(DAY, c.updated_at, GETDATE()) < 2000;",
    "prompt_token_number": 419,
    "response_token_number": 55
},
{
    "id": 33336,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Reports': ['report_id', 'report_name', 'result_id', 'report_description', 'dataset_id'], 'Results': ['analysis_id', 'result_id', 'report_id', 'result_name'], 'Visualizations': ['visualization_type', 'visualization_name', 'result_id', 'visualization_id', 'dataset_id']}. \n# the user question is: Get the report names and descriptions for reports that contain visualizations of type 'Pie Chart':. \n#SQL query: SELECT Reports.report_name, Reports.report_description FROM Reports JOIN Results ON Reports.result_id = Results.result_id JOIN Visualizations ON Results.result_id = Visualizations.result_id WHERE Visualizations.visualization_type = 'Pie Chart';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Pets\" and have a budget greater than $6 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Pets\" and have a budget greater than $6 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Pets' AND Campaigns.budget > 6000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.targeting_type = 'Pets' \nAND Campaigns.status = 'active' \nAND Campaigns.budget > 6000000;",
    "prompt_token_number": 417,
    "response_token_number": 92
},
{
    "id": 33337,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']}. \n# the user question is: Find the name and population of the 5 largest countries in the \"Africa\" region:. \n#SQL query: SELECT name, population FROM Country WHERE region = 'Africa' ORDER BY population DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Home Improvement\" and have a budget greater than $25 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Home Improvement\" and have a budget greater than $25 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Home Improvement' AND Campaigns.budget > 25000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT A.name, A.contact_email\nFROM Advertisers A\nJOIN Campaigns C ON A.advertiser_id = C.advertiser_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE C.status = 'active' AND T.option_value = 'Home Improvement' AND C.budget > 25000000;",
    "prompt_token_number": 481,
    "response_token_number": 72
},
{
    "id": 33338,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Event': ['event_id', 'event_name', 'event_date', 'location_id', 'event_category_id', 'event_type_id', 'location', 'venue_id', 'start_date', 'end_date', 'category', 'event_code', 'EVT', 'organizer_id', 'duration', 'name', 'Expo', 'Tech', 'country', 'category_id', 'city', 'ticket_price', 'date', 'start_time', 'end_time', 'min_age_requirement', 'event_type', 'capacity', 'registration_deadline', 'num_attendees', 'min_age', 'duration_hours', 'registration_fee', 'price'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID'], 'Ticket_Type': ['ticket_type_id', 'ticket_type_name', 'price'], 'Ticket': ['ticket_id', 'registration_id', 'ticket_type_id', 'event_id', 'price']}. \n# the user question is: How many tickets of each type have been sold for the \"Charity Gala\" event?. \n#SQL query: SELECT Ticket_Type.ticket_type_name, COUNT(Ticket.ticket_id) AS num_sold FROM Ticket INNER JOIN Registration ON Ticket.registration_id = Registration.registration_id INNER JOIN Ticket_Type ON Ticket.ticket_type_id = Ticket_Type.ticket_type_id INNER JOIN Event ON Registration.event_id = Event.event_id WHERE Event.event_name = 'Charity Gala' GROUP BY Ticket_Type.ticket_type_name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Education\" and have a budget greater than $14 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Education\" and have a budget greater than $14 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Education' AND Campaigns.budget > 14000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category FROM Websites INNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id INNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id INNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'Active' AND Targeting_Options.targeting_type = 'Education' AND Campaigns.budget > 14000000 GROUP BY Websites.website_id;",
    "prompt_token_number": 621,
    "response_token_number": 93
},
{
    "id": 33339,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Recipes': ['cooking_time', 'recipe_id', 'title', 'category_id', 'preparation_time', 'difficulty_level_id', 'creation_date', 'cuisine_type_id'], 'Favorites': ['favorite_id', 'user_id', 'recipe_id', 'timestamp'], 'Categories': ['name', 'category_id']}. \n# the user question is: Text Query: \"Get the names of the categories that have recipes favorited by all users.\". \n#SQL query: SELECT c.name FROM Categories c JOIN Recipes r ON c.category_id = r.category_id LEFT JOIN Favorites f ON r.recipe_id = f.recipe_id GROUP BY c.name HAVING COUNT(DISTINCT f.user_id) = (SELECT COUNT(*) FROM Users);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $120 million and have been updated in the last 2400 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $120 million and have been updated in the last 2400 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 120000000 AND Creatives.updated_at BETWEEN DATE('now', '-2400 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns cp ON c.campaign_id = cp.campaign_id WHERE cp.budget > 120000000 AND DATEDIFF(day, c.updated_at, GETDATE()) <= 2400;",
    "prompt_token_number": 349,
    "response_token_number": 51
},
{
    "id": 33340,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'doctor': ['doctor_id', 'name', 'speciality', 'address', 'experience', 'degree', 'license', 'is_accepting_new_patients', 'specialty', 'email', 'phone_number']}. \n# the user question is: Find the names and addresses of all doctors who have a degree from a medical school in the United States and specialize in neurology:. \n#SQL query: SELECT name, address FROM doctor WHERE degree LIKE '%United States%' AND specialty = 'Neurology';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Finance\" and have a budget greater than $10 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Finance\" and have a budget greater than $10 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Finance' AND Campaigns.budget > 10000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.option_value = 'Finance' AND Campaigns.status = 'active' AND Campaigns.budget > 10000000;",
    "prompt_token_number": 382,
    "response_token_number": 89
},
{
    "id": 33341,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'description', 'supplier_id', 'price', 'category_id'], 'RoomProducts': ['room_product_id', 'room_id', 'product_id', 'quantity', 'project_id', 'supplier_id', 'order_id'], 'Orders': ['order_id', 'user_id', 'order_date', 'total_amount', 'product_id']}. \n# the user question is: List the product names and their prices for products that have been ordered more than 10 times. Display the results in descending order of the number of orders:. \n#SQL query: SELECT Products.product_name, Products.price, COUNT(Orders.order_id) AS order_count FROM Products JOIN RoomProducts ON Products.product_id = RoomProducts.product_id JOIN Orders ON RoomProducts.order_id = Orders.order_id GROUP BY Products.product_id HAVING COUNT(Orders.order_id) > 10 ORDER BY order_count DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Beauty\" and have a budget greater than $30 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Beauty\" and have a budget greater than $30 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Beauty' AND Campaigns.budget > 30000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers\nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Targeting_Options.targeting_type = 'Beauty' AND Campaigns.status = 'active' AND Campaigns.budget > 30000000\nGROUP BY Advertisers.advertiser_id HAVING COUNT(Campaigns.campaign_id) >= 1;",
    "prompt_token_number": 407,
    "response_token_number": 104
},
{
    "id": 33342,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Authors': ['AuthorID', 'Name'], 'Books': ['AuthorID', 'BookID', 'Title', 'PublicationYear'], 'Users': ['UserID', 'Username'], 'Favorites': ['UserID', 'BookID', 'RecipeID', 'Rating'], 'BookAuthors': ['BookID', 'AuthorID']}. \n# the user question is: Find the usernames of users who have favorited all books written by \"Julia Child\":. \n#SQL query: SELECT DISTINCT Users.Username FROM Users JOIN Favorites ON Users.UserID = Favorites.UserID JOIN Books ON Favorites.BookID = Books.BookID JOIN BookAuthors ON Books.BookID = BookAuthors.BookID JOIN Authors ON BookAuthors.AuthorID = Authors.AuthorID WHERE Authors.Name = 'Julia Child' GROUP BY Users.Username HAVING COUNT(DISTINCT Books.BookID) = ( SELECT COUNT(BookAuthors.BookID) FROM BookAuthors JOIN Authors ON BookAuthors.AuthorID = Authors.AuthorID WHERE Authors.Name = 'Julia Child' );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $16 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $16 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 16000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Websites.name, Websites.category \nFROM Websites \nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Targeting_Options.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.status = 'active' \nAND Targeting_Options.targeting_type = 'interest' \nAND Targeting_Options.option_value = 'Gaming'\nAND Campaigns.budget > 16000000;",
    "prompt_token_number": 485,
    "response_token_number": 104
},
{
    "id": 33344,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'products': ['category', 'price', 'name', 'id', 'White', 'Chair', 'Office', 'category_id', 'country_of_origin', 'cost', 'material', 'product_name', 'description', 'Modern Sofa', 'discontinued', 'designer_id', 'product_price', 'manufacturing_date', 'product_id', 'manufacturer', 'manufacturer_id', 'design_tool']}. \n# the user question is: Select the name and price of the cheapest product in the \"electronics\" category.. \n#SQL query: SELECT name, price FROM products WHERE category = 'electronics' ORDER BY price LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $12 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $12 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 12000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.option_value = 'Food' \nAND Campaigns.status = 'active' \nAND Campaigns.budget > 12000000;",
    "prompt_token_number": 408,
    "response_token_number": 91
},
{
    "id": 33345,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Suspects': ['suspect_name', 'case_id', 'suspect_description', 'suspect_id', 'suspect_dna', 'suspect_age'], 'Cases': ['case_status', 'case_id', 'case_description', 'case_name'], 'Witnesses': ['case_id', 'witness_statement', 'witness_id', 'witness_name']}. \n# the user question is: Retrieve the case names and the corresponding number of witnesses for cases that have at least one suspect:. \n#SQL query: SELECT c.case_name, COUNT(w.witness_id) AS witness_count FROM Cases c JOIN Witnesses w ON c.case_id = w.case_id JOIN Suspects s ON c.case_id = s.case_id GROUP BY c.case_id, c.case_name HAVING COUNT(s.suspect_id) >= 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $20 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $20 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 20000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Travel' AND c.budget > 20000000 GROUP BY a.advertiser_id, a.name, a.contact_email HAVING COUNT(c.campaign_id) >= 1;",
    "prompt_token_number": 389,
    "response_token_number": 99
},
{
    "id": 33346,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Illustration': ['user_id', 'file_size', 'date_created', 'name', 'id', 'artist_id', 'category', 'price', 'created_year', 'sold', 'created_date', 'description', 'total_sold'], 'Artist': ['email', 'country', 'name', 'id', 'Dali', 'Salvador', 'monet', 'Vincent', 'Gogh', 'van', 'last_login', 'rating']}. \n# the user question is: Retrieve the name and price of all illustrations that have a price higher than $100 and were created by an artist whose name starts with \"J\".. \n#SQL query: SELECT Illustration.name, Illustration.price FROM Illustration INNER JOIN Artist ON Illustration.artist_id = Artist.id WHERE Illustration.price > 100 AND Artist.name LIKE 'J%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Basketball\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Basketball\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Sports' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Basketball' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget FROM Campaigns INNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id INNER JOIN Websites ON Ad_Placements.website_id = Websites.website_id INNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Sports' AND Targeting_Options.option_value = 'Basketball';",
    "prompt_token_number": 457,
    "response_token_number": 79
},
{
    "id": 33347,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'celestial_bodies': ['radius', 'mass', 'name', 'type', 'number_of_moons', 'distance_from_sun', 'id', 'distance_from_earth', 'orbital_period', 'diameter', 'orbiting_body_id', 'average_surface_temperature', 'surface_temperature', 'perihelion_distance', 'period', 'semimajor_axis', 'redshift', 'velocity', 'luminosity', 'schwarzschild_radius', 'eccentricity', 'aphelion_distance', 'spin_period', 'semi_major_axis', 'surface_gravity', 'temperature', 'magnitude', 'accretion_disk_temperature', 'rotation_period', 'obliquity', 'pulse_period', 'peak_absolute_magnitude', 'albedo', 'apparent_magnitude', 'absolute_magnitude', 'spectral_type', 'discovery_year', 'spectral_class', 'distance_from_star', 'discovery_method_id', 'equilibrium_temperature', 'metallicity', 'age', 'effective_temperature', 'atmospheric_composition', 'inclination', 'parallax', 'rotation_velocity', 'axial_tilt', 'orbital_inclination', 'density', 'rotational_velocity', 'magnetic_field_strength', 'composition', 'rotational_period', 'spin', 'distance_from_galactic_center', 'binary_system', 'constellation', 'stellar_evolution_stage', 'star_cluster_type', 'galaxy', 'orbital_eccentricity', 'star_spectral_type', 'orbital_period_unit', 'diameter_unit', 'discovery_method', 'pulse_period_unit', 'distance_unit', 'radius_unit', 'avg_temperature', 'temperature_unit', 'aphelion_unit', 'perihelion_unit', 'event_horizon_unit', 'event_horizon_radius', 'luminosity_distance', 'orbit_type', 'equatorial_diameter', 'gravity_unit', 'escape_velocity', 'angle_unit', 'surface_area', 'density_unit', 'parent_body_id', 'atmospheric_pressure', 'luminosity_class', 'inner_habitable_zone', 'outer_habitable_zone', 'period_unit', 'classification', 'pressure_unit', 'surface_pressure', 'orbiting', 'distance', 'proper_motion', 'proper_motion_unit', 'mean_radius', 'mass_unit', 'temperature_range', 'Gas', 'Giant', 'brightness_temperature', 'parallax_unit', 'metallicity_unit', 'magnetic_field_unit', 'spin_parameter', 'orbiting_id', 'stellar_mass', 'stage', 'radial_velocity', 'host_star', 'accretion_rate', 'core_type']}. \n# the user question is: Retrieve the name and type of all celestial bodies that have a type of 'Moon' and a distance from the Sun greater than 2 billion kilometers.. \n#SQL query: SELECT name, type FROM celestial_bodies WHERE type = 'Moon' AND distance_from_sun > 2000000000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $14 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $14 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 14000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category\nFROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id\nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Targeting_Options.targeting_type = 'Fashion' AND Campaigns.status = 'Active' AND Campaigns.budget > 14000000;",
    "prompt_token_number": 896,
    "response_token_number": 89
},
{
    "id": 33348,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'patients': ['first_name', 'last_name', 'patient_id', 'phone_number', 'email', 'phone'], 'appointments': ['patient_id', 'practitioner_id', 'appointment_date', 'appointment_id', 'duration_minutes', 'treatment_type', 'condition', 'treatment', 'duration', 'date'], 'prescription': ['patient_id', 'prescription_id', 'prescription_date', 'type', 'practitioner_id'], 'prescription_items': ['formula_id', 'prescription_id'], 'herbal_formulas': ['formula_id', 'formula_name', 'price', 'num_ingredients', 'ingredients', 'name']}. \n# the user question is: Retrieve the names and email addresses of patients who have been prescribed more than 1 herbal formulas containing the ingredient \"Sheng Di Huang\" and have also been prescribed acupuncture treatments by practitioner 6:. \n#SQL query: SELECT DISTINCT p.first_name, p.last_name, p.email FROM patients p JOIN prescription pr ON p.patient_id = pr.patient_id JOIN prescription_items pi ON pr.prescription_id = pi.prescription_id JOIN herbal_formulas hf ON pi.formula_id = hf.formula_id JOIN appointments a ON p.patient_id = a.patient_id WHERE hf.ingredients LIKE '%Sheng Di Huang%' AND a.treatment_type = 'acupuncture' AND a.practitioner_id = 6 GROUP BY p.patient_id HAVING COUNT(DISTINCT pi.formula_id) > 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $200 million and have been updated in the last 4000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $200 million and have been updated in the last 4000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 200000000 AND Creatives.updated_at BETWEEN DATE('now', '-4000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns ca ON c.campaign_id = ca.campaign_id WHERE ca.budget > 200000000 AND DATEDIFF(day, c.updated_at, GETDATE()) <= 4000;",
    "prompt_token_number": 504,
    "response_token_number": 51
},
{
    "id": 33349,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Items': ['item_id', 'game_id'], 'Items': ['item_name', 'item_id', 'item_description', 'rarity_id'], 'Game_Levels': ['level_id', 'game_id'], 'Levels': ['level_name', 'level_id', 'difficulty_id', 'duration_id']}. \n# the user question is: Find the names of all games that have a level with a name containing \"jungle\" and an item with a name containing \"banana\".. \n#SQL query: SELECT DISTINCT Games.game_title FROM Games INNER JOIN Game_Levels ON Games.game_id = Game_Levels.game_id INNER JOIN Levels ON Game_Levels.level_id = Levels.level_id INNER JOIN Game_Items ON Games.game_id = Game_Items.game_id INNER JOIN Items ON Game_Items.item_id = Items.item_id WHERE Levels.level_name LIKE '%jungle%' AND Items.item_name LIKE '%banana%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $8 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $8 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' AND Campaigns.budget > 8000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Apps.name, Apps.category FROM Apps INNER JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id INNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id INNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Movies' AND Campaigns.budget > 8000000;",
    "prompt_token_number": 485,
    "response_token_number": 88
},
{
    "id": 33350,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']}. \n# the user question is: Retrieve the total number of impressions and the total cost for each campaign that has at least one ad placement on a website with a domain containing the string \"news\" and have spent more than $500,000 on advertising in the past week:. \n#SQL query: SELECT Campaigns.name, SUM(Ad_Statistics.impressions) AS total_impressions, SUM(Ad_Placements.cost_per_impression * Ad_Statistics.impressions) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 500000 AND Websites.domain LIKE '%news%' AND Ad_Statistics.date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Campaigns.name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $15 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $15 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 15000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'Technology' AND Campaigns.budget > 15000000 GROUP BY Advertisers.name, Advertisers.contact_email;",
    "prompt_token_number": 574,
    "response_token_number": 90
},
{
    "id": 33351,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Specials': ['title', 'special_id', 'description', 'year', 'duration', 'release_year', 'show_id', 'production_id', 'release_date'], 'Special_Networks': ['special_id', 'network_id'], 'Networks': ['network_id', 'name'], 'Tags': ['tag_id', 'tag'], 'Users': ['email', 'user_id', 'username'], 'User_Reviews': ['user_id', 'review_id'], 'Reviews': ['review_id', 'performance_id', 'rating', 'special_id', 'show_id'], 'Special_Tags': ['special_id', 'tag_id']}. \n# the user question is: Retrieve the usernames and email addresses of all users who have reviewed at least one special that was released on Comedy Central and had the tag \"dark comedy\".. \n#SQL query: SELECT DISTINCT u.username, u.email FROM Users u JOIN User_Reviews ur ON ur.user_id = u.user_id JOIN Reviews r ON r.review_id = ur.review_id JOIN Specials s ON s.special_id = r.special_id JOIN Special_Tags st ON st.special_id = s.special_id JOIN Tags t ON t.tag_id = st.tag_id JOIN Special_Networks sn ON sn.special_id = s.special_id JOIN Networks n ON n.network_id = sn.network_id WHERE n.name = 'Comedy Central' AND t.tag = 'dark comedy';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $18 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $18 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 18000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON ap.website_id = w.website_id JOIN Campaigns c ON c.campaign_id = ap.campaign_id JOIN Targeting_Options to ON to.campaign_id = c.campaign_id WHERE to.option_value = 'Fitness' AND c.status = 'active' AND c.budget > 18000000;",
    "prompt_token_number": 570,
    "response_token_number": 77
},
{
    "id": 33352,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Player': ['player_id', 'player_name', 'height', 'team_id', 'position_id', 'age'], 'Player_Statistics': ['player_id', 'assists', 'kills', 'match_id', 'blocks', 'aces', 'digs', 'set_number', 'team2_score', 'team1_score', 'total_blocks', 'total_attempts']}. \n# the user question is: Find the players who have achieved a 'Golden Set' (winning a set 25-0) in a match. \n#SQL query: SELECT Player.player_name FROM Player JOIN Player_Statistics ON Player.player_id = Player_Statistics.player_id WHERE Player_Statistics.set_number = 1 AND ((Player_Statistics.team1_score = 25 AND Player_Statistics.team2_score = 0) OR (Player_Statistics.team1_score = 0 AND Player_Statistics.team2_score = 25));\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $250 million and have been updated in the last 5000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $250 million and have been updated in the last 5000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 250000000 AND Creatives.updated_at BETWEEN DATE('now', '-5000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type \nFROM Creatives \nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id \nWHERE Campaigns.budget > 250000000 AND DATEDIFF(CURRENT_DATE, Creatives.updated_at) <= 5000;",
    "prompt_token_number": 387,
    "response_token_number": 57
},
{
    "id": 33354,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Customers': ['customer_id', 'email', 'first_name', 'last_name', 'country_id', 'address', 'city', 'country', 'state', 'loyalty_level', 'York', 'customer_name', 'customer_city', 'phone', 'subscribed_to_newsletter', 'has_ordered_online'], 'Order_Items': ['price', 'quantity', 'order_id', 'book_id', 'customer_id', 'publisher_id', 'is_returned', 'product_id', 'is_delivered', 'total_price', 'order_date'], 'Orders': ['order_date', 'order_id', 'customer_id', 'coupon_code', 'total_cost', 'total_quantity', 'shipping_address_id', 'total_price', 'total_amount', 'salesperson_id', 'book_id', 'channel_id', 'Order_Date', 'Order_Total', 'Customer_Name']}. \n# the user question is: Retrieve the names and email addresses of customers who have placed orders for books that were released in the last 3 months.. \n#SQL query: SELECT c.first_name, c.last_name, c.email FROM Customers c WHERE c.customer_id IN ( SELECT DISTINCT o.customer_id FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Books b ON oi.book_id = b.book_id WHERE b.release_date >= DATE('now', '-3 months') );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Home Decor\" and have a budget greater than $25 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Home Decor\" and have a budget greater than $25 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Home Decor' AND Campaigns.budget > 25000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT a.name, a.contact_email FROM Advertisers a WHERE a.advertiser_id IN ( SELECT DISTINCT c.advertiser_id FROM Campaigns c JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.option_value = 'Home Decor' AND c.budget > 25000000 AND c.status = 'active' );",
    "prompt_token_number": 604,
    "response_token_number": 70
},
{
    "id": 33355,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'therapists': ['first_name', 'last_name', 'therapist_id', 'cnt', 'gender', 'is_available', 'specialty', 'last_login_date', 'session_count'], 'appointments': ['appointment_id', 'therapist_id', 'appointment_date', 'patient_id', 'end_time', 'start_time', 'session_duration_minutes', 'session_cost', 'satisfaction_rating', 'is_missed', 'sessions_per_week', 'session_length_minutes', 'start_date', 'attended', 'end_date', 'therapy_id']}. \n# the user question is: Find the therapists who have treated patients with the lowest average session duration in the past month.. \n#SQL query: SELECT t.first_name || ' ' || t.last_name AS therapist_name, AVG(strftime('%s', a.end_time) - strftime('%s', a.start_time)) AS avg_duration FROM therapists t JOIN appointments a ON a.therapist_id = t.therapist_id AND a.appointment_date >= DATE('now', '-1 month') GROUP BY t.therapist_id ORDER BY avg_duration ASC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and target users interested in \"Clothing\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and target users interested in \"Clothing\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Fashion' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Clothing' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id AND w.category = 'Fashion'\nJOIN Targeting_Options to ON to.campaign_id = c.campaign_id AND to.option_value = 'Clothing'\nGROUP BY c.campaign_id\nHAVING COUNT(ap.ad_placement_id) > 0;",
    "prompt_token_number": 512,
    "response_token_number": 90
},
{
    "id": 33357,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'screens': ['project_id', 'screen_id', 'name', 'created_at', 'updated_at', 'description', 'priority', 'last_updated_by', 'last_modified', 'owner_id'], 'users': ['user_id', 'name', 'email', 'last_login_attempt', 'total_tasks', 'completed_tasks', 'assignee_id', 'role', 'last_login', 'first_name', 'last_name', 'last_login_date', 'registration_date', 'password', 'job_title', 'hire_date'], 'screen_modifications': ['modified_at', 'screen_id', 'modification_id', 'user_id', 'version_id']}. \n# the user question is: Retrieve the names and descriptions of all screens that have been modified by a user with the role of \"admin\" in the last 7 days:. \n#SQL query: SELECT name, description FROM screens WHERE screen_id IN ( SELECT screen_id FROM screen_modifications WHERE user_id IN ( SELECT user_id FROM users WHERE role = 'admin' ) AND modified_at BETWEEN DATE('now', '-7 days') AND DATE('now') );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $300 million and have been updated in the last 6000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $300 million and have been updated in the last 6000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 300000000 AND Creatives.updated_at BETWEEN DATE('now', '-6000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT name, type FROM Creatives WHERE campaign_id IN ( SELECT campaign_id FROM Campaigns WHERE budget > 300000000 AND end_date BETWEEN DATE('now', '-6000 days') AND DATE('now') );",
    "prompt_token_number": 426,
    "response_token_number": 44
},
{
    "id": 33358,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Event': ['event_id', 'event_name', 'event_date', 'location_id', 'event_category_id', 'event_type_id', 'location', 'venue_id', 'start_date', 'end_date', 'category', 'event_code', 'EVT', 'organizer_id', 'duration', 'name', 'Expo', 'Tech', 'country', 'category_id', 'city', 'ticket_price', 'date', 'start_time', 'end_time', 'min_age_requirement', 'event_type', 'capacity', 'registration_deadline', 'num_attendees', 'min_age', 'duration_hours', 'registration_fee', 'price'], 'Location': ['location_id', 'location_name', 'address', 'city', 'state', 'zip_code'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID'], 'Sponsor': ['sponsor_id', 'sponsor_name', 'sponsor_type', 'name'], 'Event_Sponsor': ['event_sponsor_id', 'event_id', 'sponsor_id'], 'Payment': ['payment_id', 'registration_id', 'payment_date', 'amount', 'credit_card_id', 'payment_method_id', 'payment_type'], 'Event_Venue': ['capacity', 'event_id', 'venue_name', 'location_id']}. \n# the user question is: What is the total revenue generated by each sponsor for events held in the state of Texas in the month of October 2023?. \n#SQL query: SELECT Sponsor.sponsor_name, SUM(Payment.amount) AS total_revenue FROM Sponsor INNER JOIN Event_Sponsor ON Sponsor.sponsor_id = Event_Sponsor.sponsor_id INNER JOIN Event ON Event_Sponsor.event_id = Event.event_id INNER JOIN Registration ON Event.event_id = Registration.event_id INNER JOIN Payment ON Registration.registration_id = Payment.registration_id INNER JOIN Event_Venue ON Event.event_id = Event_Venue.event_id INNER JOIN Location ON Event_Venue.location_id = Location.location_id WHERE Location.state = 'TX' AND strftime('%Y-%m', Event.event_date) = '2023-10' GROUP BY Sponsor.sponsor_name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Pets\" and have a budget greater than $7 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Pets\" and have a budget greater than $7 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Pets' AND Campaigns.budget > 7000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category FROM Apps INNER JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id INNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id INNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.option_value = 'Pets' AND Campaigns.budget > 7000000 AND Campaigns.status = 'active';",
    "prompt_token_number": 757,
    "response_token_number": 86
},
{
    "id": 33359,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Designs': ['artist_id', 'design_name', 'design_id', 'design_description', 'Tree', 'designer_id', 'date_created'], 'Artists': ['artist_name', 'artist_email', 'artist_id', 'artist_phone_number', 'email', 'email_address'], 'Glassware_Items': ['glassware_type_id', 'quantity', 'glassware_item_id', 'product_id', 'glassware_item_name', 'glassware_item_description', 'etching_id', 'price', 'item_name', 'material', 'glassware_item_type_id', 'stock', 'design_id', 'discontinued', 'supplier_id', 'quantity_in_stock', 'unit_price', 'quantity_supplied'], 'Etchings': ['etching_id', 'etching_date', 'order_id', 'design_id', 'etching_description', 'etching_name', 'description', 'price', 'etching_image'], 'Etching_Glassware_Items': ['etching_id', 'quantity', 'glassware_item_id', 'etching_glassware_item_id']}. \n# the user question is: Retrieve the list of designs along with the name of the artist who created them and the total quantity of glassware items with etchings associated with each design, where the quantity is less than 5, sorted by quantity in ascending order.. \n#SQL query: SELECT Designs.design_name, Artists.artist_name, SUM(Etching_Glassware_Items.quantity) AS total_items FROM Designs INNER JOIN Etchings ON Designs.design_id = Etchings.design_id INNER JOIN Etching_Glassware_Items ON Etchings.etching_id = Etching_Glassware_Items.etching_id INNER JOIN Glassware_Items ON Etching_Glassware_Items.glassware_item_id = Glassware_Items.glassware_item_id INNER JOIN Artists ON Designs.artist_id = Artists.artist_id GROUP BY Designs.design_id HAVING total_items < 5 ORDER BY total_items ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Sports\" and have a budget greater than $30 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Sports\" and have a budget greater than $30 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 30000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email\nFROM Advertisers\nINNER JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id\nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 30000000\nGROUP BY Advertisers.advertiser_id\nHAVING COUNT(Campaigns.campaign_id) >= 1;",
    "prompt_token_number": 623,
    "response_token_number": 106
},
{
    "id": 33360,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Tasks': ['assigned_to', 'deadline', 'project_id', 'task_id', 'priority_level', 'status', 'completed_by', 'created_at', 'completed_at', 'priority', 'created_by', 'due_date', 'user_id', 'assigned_team', 'team_id', 'started_at', 'assigned_skill', 'requested_by', 'assigned_at', 'assigned_by', 'completion_date', 'assignment_date', 'skill_name', 'task_status', 'department_name', 'task_assigned_date', 'task_completion_date'], 'Projects': ['project_id', 'project_name', 'budget', 'status', 'start_date', 'end_date', 'completion_date']}. \n# the user question is: Find the project with the highest number of incomplete tasks:. \n#SQL query: SELECT Projects.project_name, COUNT(Tasks.task_id) AS incomplete_task_count FROM Projects JOIN Tasks ON Projects.project_id = Tasks.project_id WHERE Tasks.status != 'Completed' GROUP BY Projects.project_id ORDER BY incomplete_task_count DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $22 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $22 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 22000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Campaigns.budget > 22000000 \nAND Targeting_Options.targeting_type = 'Gaming' \nGROUP BY Websites.website_id \nHAVING COUNT(Ad_Placements.ad_placement_id) > 0;",
    "prompt_token_number": 496,
    "response_token_number": 114
},
{
    "id": 33361,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Platforms': ['platform_id', 'game_id', 'online_players'], 'Platforms': ['platform_id', 'platform_name', 'platform_release_date', 'platform_manufacturer', 'platform_publisher', 'platform_release_year', 'manufacturer_id'], 'Game_Characters': ['character_id', 'game_id'], 'Characters': ['character_name', 'character_id', 'character_description']}. \n# the user question is: Find the names of all games that have a character with a name containing \"Link\" and a platform that was released after 2010.. \n#SQL query: SELECT Games.game_title FROM Games INNER JOIN Game_Characters ON Games.game_id = Game_Characters.game_id INNER JOIN Characters ON Game_Characters.character_id = Characters.character_id INNER JOIN Game_Platforms ON Games.game_id = Game_Platforms.game_id INNER JOIN Platforms ON Game_Platforms.platform_id = Platforms.platform_id WHERE Characters.character_name LIKE '%Link%' AND strftime('%Y', Platforms.platform_release_date) > '2010';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $400 million and have been updated in the last 7000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $400 million and have been updated in the last 7000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 400000000 AND Creatives.updated_at BETWEEN DATE('now', '-7000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 400000000 AND julianday('now') - julianday(Creatives.updated_at) < 7000;",
    "prompt_token_number": 433,
    "response_token_number": 60
},
{
    "id": 33362,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Actor': ['actor_id', 'name', 'actor_name'], 'Movie_Actor': ['movie_id', 'actor_id']}. \n# the user question is: Retrieve the title of the movie, the name of the lead actress, and the release year for all movies where the lead actress's name contains the word \"Roberts\" and the release year is between 1990 and 2000.. \n#SQL query: SELECT Movie.title, Actor.name, Movie.release_year FROM Movie JOIN Movie_Actor ON Movie.movie_id = Movie_Actor.movie_id JOIN Actor ON Movie_Actor.actor_id = Actor.actor_id WHERE Actor.name LIKE '%Roberts%' AND Movie.release_year BETWEEN 1990 AND 2000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $12 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $12 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 12000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 12000000 AND Campaigns.status = 'active';",
    "prompt_token_number": 464,
    "response_token_number": 83
},
{
    "id": 33363,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Order_Items': ['price', 'quantity', 'order_id', 'book_id', 'customer_id', 'publisher_id', 'is_returned', 'product_id', 'is_delivered', 'total_price', 'order_date'], 'Orders': ['order_date', 'order_id', 'customer_id', 'coupon_code', 'total_cost', 'total_quantity', 'shipping_address_id', 'total_price', 'total_amount', 'salesperson_id', 'book_id', 'channel_id', 'Order_Date', 'Order_Total', 'Customer_Name'], 'Coupon_Order_Mapping': ['order_id', 'coupon_id']}. \n# the user question is: Retrieve the titles of all books that have been ordered by customers who have not used a coupon.. \n#SQL query: SELECT DISTINCT b.title FROM Books b JOIN Order_Items oi ON b.book_id = oi.book_id JOIN Orders o ON oi.order_id = o.order_id WHERE o.order_id NOT IN ( SELECT order_id FROM Coupon_Order_Mapping ) GROUP BY b.book_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $35 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $35 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 35000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT a.name, a.contact_email\nFROM Advertisers a \nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id \nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id \nWHERE t.targeting_type = 'Food' AND c.status = 'active' AND c.budget > 35000000;",
    "prompt_token_number": 534,
    "response_token_number": 72
},
{
    "id": 33364,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'celestial_bodies': ['radius', 'mass', 'name', 'type', 'number_of_moons', 'distance_from_sun', 'id', 'distance_from_earth', 'orbital_period', 'diameter', 'orbiting_body_id', 'average_surface_temperature', 'surface_temperature', 'perihelion_distance', 'period', 'semimajor_axis', 'redshift', 'velocity', 'luminosity', 'schwarzschild_radius', 'eccentricity', 'aphelion_distance', 'spin_period', 'semi_major_axis', 'surface_gravity', 'temperature', 'magnitude', 'accretion_disk_temperature', 'rotation_period', 'obliquity', 'pulse_period', 'peak_absolute_magnitude', 'albedo', 'apparent_magnitude', 'absolute_magnitude', 'spectral_type', 'discovery_year', 'spectral_class', 'distance_from_star', 'discovery_method_id', 'equilibrium_temperature', 'metallicity', 'age', 'effective_temperature', 'atmospheric_composition', 'inclination', 'parallax', 'rotation_velocity', 'axial_tilt', 'orbital_inclination', 'density', 'rotational_velocity', 'magnetic_field_strength', 'composition', 'rotational_period', 'spin', 'distance_from_galactic_center', 'binary_system', 'constellation', 'stellar_evolution_stage', 'star_cluster_type', 'galaxy', 'orbital_eccentricity', 'star_spectral_type', 'orbital_period_unit', 'diameter_unit', 'discovery_method', 'pulse_period_unit', 'distance_unit', 'radius_unit', 'avg_temperature', 'temperature_unit', 'aphelion_unit', 'perihelion_unit', 'event_horizon_unit', 'event_horizon_radius', 'luminosity_distance', 'orbit_type', 'equatorial_diameter', 'gravity_unit', 'escape_velocity', 'angle_unit', 'surface_area', 'density_unit', 'parent_body_id', 'atmospheric_pressure', 'luminosity_class', 'inner_habitable_zone', 'outer_habitable_zone', 'period_unit', 'classification', 'pressure_unit', 'surface_pressure', 'orbiting', 'distance', 'proper_motion', 'proper_motion_unit', 'mean_radius', 'mass_unit', 'temperature_range', 'Gas', 'Giant', 'brightness_temperature', 'parallax_unit', 'metallicity_unit', 'magnetic_field_unit', 'spin_parameter', 'orbiting_id', 'stellar_mass', 'stage', 'radial_velocity', 'host_star', 'accretion_rate', 'core_type'], 'exoplanets': ['radius', 'name', 'discovery_date', 'orbital_period', 'mass', 'discovery_method_id', 'eccentricity', 'surface_gravity', 'surface_temperature', 'density', 'minimum_mass', 'equilibrium_temperature', 'distance_from_star', 'inclination', 'temperature', 'orbital_eccentricity', 'semi_major_axis', 'discovery_year', 'exoplanet_name', 'discovery_method', 'average_temperature', 'year_discovered'], 'discovery_methods': ['spacecraft', 'Kepler', 'id', 'name', 'velocity', 'Radial', 'Transit', 'Microlensing', 'Direct', 'Imaging', 'Velocity', 'Gravitational', 'microlensing', 'imaging', 'Hubble', 'Telescope', 'Sky', 'Sloan', 'Survey', 'Digital']}. \n# the user question is: Retrieve the name and discovery date of all exoplanets that have a mass greater than 10 times the mass of Jupiter and were discovered by the microlensing method.. \n#SQL query: SELECT name, discovery_date FROM exoplanets WHERE mass > 10 * (SELECT mass FROM celestial_bodies WHERE name = 'Jupiter') AND discovery_method_id = (SELECT id FROM discovery_methods WHERE name = 'Microlensing');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Health\" and target users interested in \"Fitness\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Health\" and target users interested in \"Fitness\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Health' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT C.name, C.budget\nFROM Campaigns C\nJOIN Ad_Placements AP ON C.campaign_id = AP.campaign_id\nJOIN Websites W ON AP.website_id = W.website_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE W.category = 'Health' AND TO.option_value = 'Fitness';",
    "prompt_token_number": 1107,
    "response_token_number": 72
},
{
    "id": 33365,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']}. \n# the user question is: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and target users interested in \"Beauty\":. \n#SQL query: SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Fashion' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Beauty' GROUP BY Campaigns.campaign_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $25 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $25 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' AND Campaigns.budget > 25000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' AND Campaigns.budget > 25000000;",
    "prompt_token_number": 594,
    "response_token_number": 96
},
{
    "id": 33366,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'EnergySuppliers': ['supplier_name', 'supplier_id', 'contact_name', 'phone_number', 'supplier_state', 'supplier_city', 'supplier_address', 'supplier_zip', 'supplier_location'], 'EnergyProducts': ['supplier_id', 'product_name', 'product_id', 'unit_price', 'start_date', 'end_date', 'product_category', 'product_type', 'product_price', 'source_id'], 'EnergyContracts': ['start_date', 'rate', 'end_date', 'user_id', 'product_id', 'contract_id', 'source_id', 'meter_id', 'is_renewed', 'is_terminated', 'contract_type', 'supplier_id', 'revenue', 'contract_name', 'contract_end_date', 'contract_rate', 'contract_start_date', 'contract_status', 'contract_value'], 'EnergySources': ['source_id', 'source_name', 'last_active', 'Solar', 'Panels', 'supplier_id', 'start_date', 'end_date', 'product_id', 'source_type', 'capacity', 'source_capacity', 'user_id'], 'EnergyProduction': ['source_id', 'end_date', 'start_date', 'production_value', 'reading_id', 'meter_id', 'production_date']}. \n# the user question is: Retrieve the names of all energy suppliers and their respective products, and the total energy production for each product for the month of April 2025, where the total energy production is greater than 10000 and less than 20000.. \n#SQL query: SELECT s.supplier_name, p.product_name, SUM(pr.production_value) AS total_production FROM EnergySuppliers s INNER JOIN EnergyProducts p ON s.supplier_id = p.supplier_id INNER JOIN EnergyContracts c ON p.product_id = c.product_id INNER JOIN EnergySources src ON c.source_id = src.source_id INNER JOIN EnergyProduction pr ON src.source_id = pr.source_id WHERE pr.start_date >= '2025-04-01' AND pr.end_date <= '2025-04-30' AND pr.production_value > 10000 AND pr.production_value < 20000 GROUP BY s.supplier_id, p.product_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $500 million and have been updated in the last 8000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $500 million and have been updated in the last 8000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 500000000 AND Creatives.updated_at BETWEEN DATE('now', '-8000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT c.name, c.type FROM Creatives c INNER JOIN Campaigns p ON c.campaign_id = p.campaign_id WHERE p.budget > 500000000 AND c.updated_at >= DATE(NOW()) - INTERVAL 8000 DAY;",
    "prompt_token_number": 644,
    "response_token_number": 50
},
{
    "id": 33367,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Sales': ['Sales', 'Product', 'Region', 'State', 'product_id', 'dataset_id', 'quantity', 'sale_date', 'Unit_price', 'Sale_date', 'salesperson_id', 'sale_id', 'customer_id', 'company_id', 'unit_price', 'sales_id', 'model_id'], 'Products': ['Product_name', 'Unit_price', 'product_id', 'category_id', 'product_name', 'unit_price', 'origin_state', 'manufacturer_id', 'brand_id', 'stock'], 'Categories': ['category_id', 'Category_name', 'category_name']}. \n# the user question is: What is the total revenue generated by each category, in the year 2022?. \n#SQL query: SELECT Categories.category_name, SUM(Sales.quantity * Sales.unit_price) AS total_revenue FROM Categories INNER JOIN Products ON Categories.category_id = Products.category_id INNER JOIN Sales ON Products.product_id = Sales.product_id WHERE strftime('%Y', Sales.sale_date) = '2022' GROUP BY Categories.category_name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $15 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $15 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 15000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nINNER JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Targeting_Options.targeting_type = 'Technology' AND Campaigns.budget > 15000000 AND Campaigns.status = 'active' \nGROUP BY Apps.name, Apps.category \nHAVING COUNT(DISTINCT Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 493,
    "response_token_number": 118
},
{
    "id": 33368,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Show': ['rating', 'year', 'title', 'show_id', 'genre_id', 'studio_id', 'release_year', 'country_id', 'network_id', 'director_id', 'air_year', 'release_date', 'genre', 'status', 'production_type', 'producer_id', 'start_year', 'end_year'], 'User_Rating': ['show_id', 'user_id', 'episode_id', 'rating', 'country_id', 'genre_id', 'season_id', 'season_number', 'imdb_rating', 'rotten_tomatoes_rating']}. \n# the user question is: List the TV shows that have been reviewed by at least 10 users and have an average rating higher than 4.5.. \n#SQL query: SELECT DISTINCT Show.title FROM Show JOIN User_Rating ON Show.show_id = User_Rating.show_id GROUP BY Show.show_id HAVING COUNT(DISTINCT User_Rating.user_id) >= 10 AND AVG(User_Rating.rating) > 4.5\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Art\" and have a budget greater than $40 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Art\" and have a budget greater than $40 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 40000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 40000000",
    "prompt_token_number": 430,
    "response_token_number": 88
},
{
    "id": 33369,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'PlantSpecies': ['id', 'name', 'genus_id', 'scientific_name'], 'PlantSpeciesSoil': ['plant_soil_id', 'plant_species_id'], 'PlantSoil': ['id', 'name', 'ph', 'type', 'pH', 'ph_level', 'pH_range'], 'PlantSpeciesLeafArrangement': ['plant_leaf_arrangement_id', 'plant_species_id'], 'PlantLeafArrangement': ['type', 'id'], 'species': ['origin', 'species_name', 'max_height', 'genus_id', 'common_name', 'description', 'flower_color', 'species_id', 'discovery_date', 'conservation_status_id', 'name', 'scientific_name', 'family_id']}. \n# the user question is: Find all plant species that have a leaf arrangement of \"Opposite\" and a soil type of \"Sandy Loam\":. \n#SQL query: SELECT PlantSpecies.name AS species FROM PlantSpecies JOIN PlantSpeciesLeafArrangement ON PlantSpecies.id = PlantSpeciesLeafArrangement.plant_species_id JOIN PlantLeafArrangement ON PlantSpeciesLeafArrangement.plant_leaf_arrangement_id = PlantLeafArrangement.id JOIN PlantSpeciesSoil ON PlantSpecies.id = PlantSpeciesSoil.plant_species_id JOIN PlantSoil ON PlantSpeciesSoil.plant_soil_id = PlantSoil.id WHERE PlantLeafArrangement.type = 'Opposite' AND PlantSoil.name = 'Sandy Loam';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Education\" and have a budget greater than $30 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Education\" and have a budget greater than $30 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Education' AND Campaigns.budget > 30000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.option_value = 'Education' AND Campaigns.status = 'active' AND Campaigns.budget > 30000000;",
    "prompt_token_number": 587,
    "response_token_number": 84
},
{
    "id": 33370,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Films': ['release_date', 'director_id', 'genre_id', 'title', 'film_id', 'duration'], 'Genres': ['name', 'genre_id'], 'Directors': ['name', 'director_id'], 'Ratings': ['user_id', 'rating_value', 'film_id', 'review_id']}. \n# the user question is: Retrieve the film titles and average ratings for comedy films directed by either Christopher Guest or Nancy Meyers, and released in the last 10 years:. \n#SQL query: SELECT Films.title, AVG(Ratings.rating_value) AS average_rating FROM Films JOIN Ratings ON Films.film_id = Ratings.film_id JOIN Directors ON Films.director_id = Directors.director_id WHERE Films.genre_id = ( SELECT genre_id FROM Genres WHERE name = 'Comedy' ) AND Films.release_date >= DATE('now', '-10 years') AND (Directors.name = 'Christopher Guest' OR Directors.name = 'Nancy Meyers') GROUP BY Films.film_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $600 million and have been updated in the last 9000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $600 million and have been updated in the last 9000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 600000000 AND Creatives.updated_at BETWEEN DATE('now', '-9000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type \nFROM Creatives \nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id \nWHERE Campaigns.budget > 600000000 AND Creatives.updated_at >= DATE('now', '-9000 days');",
    "prompt_token_number": 407,
    "response_token_number": 54
},
{
    "id": 33371,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'price', 'manufacturer_id', 'avg_rating', 'color', 'category_id', 'review_count', 'quantity', 'max_rating', 'min_rating', 'max_review_count']}. \n# the user question is: \"Find the products with a price higher than the average price.\". \n#SQL query: SELECT p.product_id, p.product_name, p.price FROM Products p WHERE p.price > (SELECT AVG(price) FROM Products);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $20 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $20 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 20000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\nAND t.targeting_type = 'Fashion'\nAND c.budget > 20000000\nGROUP BY a.name, a.category\nHAVING COUNT(ap.ad_placement_id) >= 1;",
    "prompt_token_number": 378,
    "response_token_number": 102
},
{
    "id": 33372,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['Price', 'ProductName', 'Category', 'ProductID', 'Cost', 'CategoryID', 'SubcategoryID', 'UnitPrice', 'LastOrderDate', 'UnitsInStock', 'SupplierID', 'UnitCost', 'Discontinued', 'ReorderLevel'], 'OrderDetails': ['ProductID', 'OrderID', 'Quantity', 'UnitCost', 'UnitPrice', 'OrderDate', 'Discount']}. \n# the user question is: Calculate the total revenue and profit for each product, sorted by revenue in descending order:. \n#SQL query: SELECT Products.ProductName, SUM(OrderDetails.Quantity * OrderDetails.UnitPrice) AS TotalRevenue, SUM(OrderDetails.Quantity * (OrderDetails.UnitPrice - Products.UnitCost)) AS TotalProfit FROM Products INNER JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID GROUP BY Products.ProductName ORDER BY TotalRevenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $45 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $45 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 45000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nINNER JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.option_value = 'Music' AND Campaigns.status = 'active' AND Campaigns.budget > 45000000\nGROUP BY Advertisers.name, Advertisers.contact_email;",
    "prompt_token_number": 401,
    "response_token_number": 96
},
{
    "id": 33373,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'AttendeeRegistration': ['event_id', 'attendee_name', 'attendee_id']}. \n# the user question is: Find the top 3 attendees who have registered for the most number of events.. \n#SQL query: SELECT attendee_name, COUNT(*) AS events_attended FROM AttendeeRegistration GROUP BY attendee_name ORDER BY events_attended DESC LIMIT 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Home & Garden\" and have a budget greater than $35 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Home & Garden\" and have a budget greater than $35 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Home & Garden' AND Campaigns.budget > 35000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category FROM Websites \nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.targeting_type = 'Home & Garden' \nAND Campaigns.budget > 35000000 \nAND Campaigns.status = 'active' \nGROUP BY Websites.name, Websites.category",
    "prompt_token_number": 361,
    "response_token_number": 100
},
{
    "id": 33374,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Films': ['title', 'country', 'rating_id', 'director_id', 'film_id', 'synopsis', 'release_date', 'runtime', 'studio_id', 'composer_id', 'budget', 'box_office', 'imdb_rating', 'rotten_tomatoes_rating', 'mpaa_rating', 'production_company_id', 'oscar_wins', 'rating', 'rottentomatoes_rating', 'genre_id', 'runtime_minutes', 'release_year', 'The Conjuring', 'PG-13'], 'Directors': ['director_id', 'name', 'nationality', 'gender', 'description'], 'Films_Directors': ['film_id', 'director_id']}. \n# the user question is: Query: Retrieve the names and descriptions of all films in the database that were released in the 1980s and have a runtime of at least 120 minutes, along with their directors and release dates, ordered by runtime in descending order.. \n#SQL query: SELECT Films.title, Films.release_date, GROUP_CONCAT(DISTINCT Directors.name, ', ') AS directors, Films.runtime FROM Films JOIN Films_Directors ON Films.film_id = Films_Directors.film_id JOIN Directors ON Films_Directors.director_id = Directors.director_id WHERE Films.runtime >= 120 AND Films.release_date BETWEEN '1980-01-01' AND '1989-12-31' GROUP BY Films.film_id ORDER BY Films.runtime DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $700 million and have been updated in the last 10000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $700 million and have been updated in the last 10000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 700000000 AND Creatives.updated_at BETWEEN DATE('now', '-10000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type \nFROM Creatives \nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id \nWHERE Campaigns.budget > 700000000 AND DATEDIFF(CURRENT_DATE, Creatives.updated_at) <= 10000;",
    "prompt_token_number": 504,
    "response_token_number": 57
},
{
    "id": 33375,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'clients': ['client_id', 'first_name', 'last_name', 'email', 'phone_number', 'user_id', 'total_price', 'total_spent', 'item_price', 'quantity', 'city', 'budget', 'state', 'price', 'location', 'name', 'client_name', 'date_of_birth', 'age', 'loyalty_program', 'skin_type'], 'appointments': ['appointment_id', 'date_time', 'client_id', 'artist_id', 'invoice_id', 'total_cost', 'appointment_date', 'discount_percentage', 'photoshoot_id', 'duration', 'price', 'avg_rating', 'quantity', 'status', 'reschedule_id', 'location_id', 'appointment_start_time', 'appointment_end_time', 'order_id', 'makeup_artist_id']}. \n# the user question is: Find the clients who have had appointments with more than one makeup artist:. \n#SQL query: SELECT DISTINCT clients.name FROM clients INNER JOIN appointments ON clients.client_id = appointments.client_id GROUP BY clients.client_id HAVING COUNT(DISTINCT appointments.makeup_artist_id) > 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $25 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $25 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 25000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Apps.name, Apps.category \nFROM Apps \nINNER JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.option_value = 'Sports' AND Campaigns.status = 'active' AND Campaigns.budget > 25000000;",
    "prompt_token_number": 509,
    "response_token_number": 93
},
{
    "id": 33376,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Protein': ['gene_id', 'molecular_weight', 'protein_name', 'isoelectric_point', 'protein_id', 'length', 'protein_length'], 'Pathway_Gene': ['gene_id', 'pathway_id'], 'Pathway': ['pathway_id', 'pathway_name', 'description']}. \n# the user question is: Retrieve the names of all genes and their associated proteins that have a length between 500 and 1000 amino acids and are part of the \"cellular respiration\" pathway.. \n#SQL query: SELECT Gene.gene_name, Protein.protein_name FROM Gene JOIN Protein ON Gene.gene_id = Protein.gene_id JOIN Pathway_Gene ON Gene.gene_id = Pathway_Gene.gene_id JOIN Pathway ON Pathway_Gene.pathway_id = Pathway.pathway_id WHERE Protein.length BETWEEN 500 AND 1000 AND Pathway.pathway_name = 'cellular respiration';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $50 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $50 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \n    AND Targeting_Options.targeting_type = 'interest' \n    AND Targeting_Options.option_value = 'Travel' \n    AND Campaigns.budget > 50000000;",
    "prompt_token_number": 486,
    "response_token_number": 98
},
{
    "id": 33377,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Customers': ['customer_id', 'first_name', 'phone_number', 'last_name', 'email', 'loyalty_status', 'city', 'customer_email', 'customer_name', 'country', 'loyalty_level', 'sale_date', 'third_sale_date', 'zip', 'state', 'address', 'loyalty_number', 'default_location_id', 'loyalty_discount', 'phone'], 'Sale_Items': ['product_id', 'sale_id', 'quantity', 'sale_item_id', 'customer_id', 'unit_price', 'discount_code', 'sale_date', 'price'], 'Sales': ['employee_id', 'sale_id', 'sale_date', 'customer_id', 'total', 'total_amount', 'payment_method', 'total_price', 'total_spent', 'location_id', 'coupon_code', 'start_date', 'discount_percentage', 'end_date', 'product_id'], 'Returns': ['sale_item_id', 'return_date', 'return_id']}. \n# the user question is: Find the names and total revenue for all products that have been sold to customers who have placed at least 3 orders in the last month and have not been returned.. \n#SQL query: SELECT Products.product_name, SUM(Sale_Items.quantity * Products.price) AS total_revenue FROM Products INNER JOIN Sale_Items ON Products.product_id = Sale_Items.product_id INNER JOIN Sales ON Sale_Items.sale_id = Sales.sale_id INNER JOIN Customers ON Sales.customer_id = Customers.customer_id LEFT JOIN Returns ON Sale_Items.sale_item_id = Returns.sale_item_id WHERE Sales.sale_date >= DATE('now', '-1 month') AND Returns.sale_item_id IS NULL AND Customers.customer_id IN ( SELECT customer_id FROM Sales WHERE sale_date >= DATE('now', '-1 month') GROUP BY customer_id HAVING COUNT(*) >= 3 ) GROUP BY Products.product_id ORDER BY total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food & Drink\" and have a budget greater than $40 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food & Drink\" and have a budget greater than $40 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food & Drink' AND Campaigns.budget > 40000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.option_value = 'Food & Drink' \nAND Campaigns.budget > 40000000 \nGROUP BY Websites.website_id;",
    "prompt_token_number": 753,
    "response_token_number": 102
},
{
    "id": 33380,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate'], 'IssueWriters': ['IssueID', 'WriterName', 'WriterID', 'IssueI'], 'Writers': ['WriterID', 'WriterName', 'Gender', 'WriterGender'], 'IssueSales': ['SalePrice', 'IssueID', 'CoverPrice', 'TotalSales']}. \n# the user question is: Find the names and total sales figures for all issues written by Joss Whedon:. \n#SQL query: SELECT Issues.IssueName, SUM(IssueSales.TotalSales) AS TotalSales FROM Issues JOIN IssueWriters ON Issues.IssueID = IssueWriters.IssueID JOIN Writers ON IssueWriters.WriterID = Writers.WriterID JOIN IssueSales ON Issues.IssueID = IssueSales.IssueID WHERE Writers.WriterName = 'Joss Whedon' GROUP BY Issues.IssueID ORDER BY TotalSales DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $60 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $60 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 60000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'Fashion' AND Campaigns.budget > 60000000 \nGROUP BY Advertisers.name, Advertisers.contact_email HAVING COUNT(Campaigns.campaign_id) >= 1;",
    "prompt_token_number": 484,
    "response_token_number": 108
},
{
    "id": 33381,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Authors': ['AuthorID', 'Name'], 'Books': ['AuthorID', 'BookID', 'Title', 'PublicationYear'], 'BookAuthors': ['BookID', 'AuthorID'], 'Recipes': ['RecipeID'], 'RecipeAuthors': ['AuthorID', 'RecipeID']}. \n# the user question is: Find the names of authors who have written both books and recipes in the database:. \n#SQL query: SELECT DISTINCT Authors.Name FROM Authors JOIN BookAuthors ON Authors.AuthorID = BookAuthors.AuthorID JOIN Books ON BookAuthors.BookID = Books.BookID JOIN RecipeAuthors ON Authors.AuthorID = RecipeAuthors.AuthorID JOIN Recipes ON RecipeAuthors.RecipeID = Recipes.RecipeID;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $50 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $50 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Websites.name, Websites.category \nFROM Websites \nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.targeting_type = 'interest' \nAND Targeting_Options.option_value = 'Travel' \nAND Campaigns.budget > 50000000;",
    "prompt_token_number": 426,
    "response_token_number": 104
},
{
    "id": 33382,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['name', 'project_id', 'total_users', 'assigned_users', 'project_name'], 'Tasks': ['project_id', 'task_id', 'name', 'due_date', 'status']}. \n# the user question is: Get the projects along with the total number of tasks for each project.. \n#SQL query: SELECT Projects.project_id, Projects.name, COUNT(Tasks.task_id) AS total_tasks FROM Projects LEFT JOIN Tasks ON Projects.project_id = Tasks.project_id GROUP BY Projects.project_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $900 million and have been updated in the last 12000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $900 million and have been updated in the last 12000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 900000000 AND Creatives.updated_at BETWEEN DATE('now', '-12000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 900000000 AND Creatives.updated_at > DATE_SUB(CURDATE(), INTERVAL 12000 DAY);",
    "prompt_token_number": 305,
    "response_token_number": 55
},
{
    "id": 33383,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'PlantSpecies': ['id', 'name', 'genus_id', 'scientific_name'], 'PlantGenus': ['id', 'family_id', 'name'], 'PlantSpeciesCharacteristics': ['plant_characteristic_id', 'value', 'plant_species_id', 'comparison_operator', 'value_number', 'value_operator', 'value_type', 'unit'], 'PlantCharacteristic': ['id', 'name'], 'PlantSpeciesFlower': ['plant_flower_id', 'plant_species_id'], 'PlantFlower': ['color', 'id', 'symmetry', 'type']}. \n# the user question is: Find all plant genera that have at least one plant species with a flower color of \"Red\" and a leaf type of \"Needle-like\":. \n#SQL query: SELECT DISTINCT PlantGenus.name AS genus FROM PlantGenus JOIN PlantSpecies ON PlantGenus.id = PlantSpecies.genus_id JOIN PlantSpeciesFlower ON PlantSpecies.id = PlantSpeciesFlower.plant_species_id JOIN PlantFlower ON PlantSpeciesFlower.plant_flower_id = PlantFlower.id JOIN PlantSpeciesCharacteristics ON PlantSpecies.id = PlantSpeciesCharacteristics.plant_species_id JOIN PlantCharacteristic ON PlantSpeciesCharacteristics.plant_characteristic_id = PlantCharacteristic.id WHERE PlantFlower.color = 'Red' AND PlantCharacteristic.name = 'Needle-like';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $40 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $40 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 40000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Targeting_Options.targeting_type = 'Gaming' AND Campaigns.budget > 40000000 AND Campaigns.status = 'active';",
    "prompt_token_number": 556,
    "response_token_number": 91
},
{
    "id": 33384,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'coaches': ['name', 'coach_id', 'coach_name', 'email'], 'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'athlete_coach': ['athlete_id', 'coach_id']}. \n# the user question is: Get the name and email of coaches who have worked with athletes who have a \"High\" level of \"Mental Imagery\" and a \"Low\" level of \"Self-Talk\".. \n#SQL query: SELECT DISTINCT coaches.coach_name, coaches.email FROM coaches INNER JOIN athlete_coach ON coaches.coach_id = athlete_coach.coach_id INNER JOIN athlete_skills ON athlete_coach.athlete_id = athlete_skills.athlete_id WHERE athlete_skills.imagery = 'High' AND athlete_skills.self_talk = 'Low';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fitness\" and have a budget greater than $70 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fitness\" and have a budget greater than $70 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 70000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT Advertisers.name, Advertisers.contact_email\nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.option_value = 'Fitness' \nAND Campaigns.budget > 70000000;",
    "prompt_token_number": 424,
    "response_token_number": 84
},
{
    "id": 33385,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Client': ['client_id', 'first_name', 'last_name', 'email', 'phone_number', 'date_of_birth', 'gender', 'address', 'age', 'weight', 'partner_id', 'zip_code', 'name', 'startingWeight', 'phone', 'clientId'], 'Completed_Exercise_Session': ['completed_date', 'exercise_session_id', 'completed_exercise_session_id', 'client_id', 'session_id', 'duration', 'num_sessions', 'weight_lifted']}. \n# the user question is: Find the clients who have not completed any exercise sessions in the past 2 weeks.. \n#SQL query: SELECT Client.first_name, Client.last_name FROM Client LEFT JOIN Completed_Exercise_Session ON Client.client_id = Completed_Exercise_Session.client_id AND Completed_Exercise_Session.completed_date >= DATE('now', '-14 days') WHERE Completed_Exercise_Session.completed_exercise_session_id IS NULL\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Food & Drink\" and target users interested in \"Cooking\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Food & Drink\" and target users interested in \"Cooking\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Food & Drink' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Cooking' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget\nFROM Campaigns \nJOIN Ad_Placements\nON Campaigns.campaign_id = Ad_Placements.campaign_id \nJOIN Websites\nON Ad_Placements.website_id = Websites.website_id AND Websites.category = 'Food & Drink'\nJOIN Targeting_Options \nON Campaigns.campaign_id = Targeting_Options.campaign_id AND Targeting_Options.option_value = 'Cooking'\nGROUP BY Campaigns.campaign_id\nHAVING COUNT(Ad_Placements.ad_placement_id) >= 1",
    "prompt_token_number": 472,
    "response_token_number": 106
},
{
    "id": 33386,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Book': ['series_id', 'publication_year', 'title', 'id', 'author_id', 'publisher_id', 'published_year', 'word_count', 'publication_date', 'value', 'pages', 'year', 'language_id', 'publish_date', 'price', 'genre_id'], 'Publisher': ['id', 'name', 'city', 'state', 'country'], 'Book_Genre': ['book_id', 'genre_id'], 'Genre': ['id', 'name']}. \n# the user question is: Find all books that have a genre of \"Horror\" and have been published by \"HarperCollins\".. \n#SQL query: SELECT Book.title FROM Book INNER JOIN Book_Genre AS bg ON Book.id = bg.book_id INNER JOIN Genre ON bg.genre_id = Genre.id AND Genre.name = 'Horror' INNER JOIN Publisher ON Book.publisher_id = Publisher.id AND Publisher.name = 'HarperCollins';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $35 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $35 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 35000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category FROM Websites \nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id AND Campaigns.status = 'active' AND Campaigns.budget > 35000000 \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id AND Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Technology';",
    "prompt_token_number": 479,
    "response_token_number": 100
},
{
    "id": 33388,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Review': ['rating', 'film_id', 'review_id'], 'Actor': ['actor_id', 'name', 'nationality', 'birth_date'], 'Film_Actor': ['film_id', 'actor_id']}. \n# the user question is: \"Retrieve the names of actors who have appeared in at least 4 films and have an average rating above 8.\". \n#SQL query: SELECT Actor.name FROM Actor INNER JOIN Film_Actor ON Actor.actor_id = Film_Actor.actor_id INNER JOIN Review ON Film_Actor.film_id = Review.film_id GROUP BY Actor.name HAVING COUNT(DISTINCT Film_Actor.film_id) >= 4 AND AVG(Review.rating) > 8;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $45 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $45 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 45000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nINNER JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 45000000 \nGROUP BY Apps.name, Apps.category \nHAVING COUNT(DISTINCT Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 424,
    "response_token_number": 128
},
{
    "id": 33389,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'patients': ['first_name', 'last_name', 'patient_id', 'phone_number', 'email', 'phone'], 'medical_history': ['patient_id', 'medical_condition', 'diagnosis'], 'prescription': ['patient_id', 'prescription_id', 'prescription_date', 'type', 'practitioner_id'], 'prescription_items': ['formula_id', 'prescription_id'], 'herbal_formulas': ['formula_id', 'formula_name', 'price', 'num_ingredients', 'ingredients', 'name']}. \n# the user question is: Retrieve the names and email addresses of patients who have been prescribed more than 3 herbal formulas containing the ingredient \"Zhi Mu\" and have also been diagnosed with a medical condition containing the word \"eczema\":. \n#SQL query: SELECT DISTINCT p.first_name, p.last_name, p.email FROM patients p JOIN prescription pr ON p.patient_id = pr.patient_id JOIN prescription_items pi ON pr.prescription_id = pi.prescription_id JOIN herbal_formulas hf ON pi.formula_id = hf.formula_id JOIN medical_history mh ON p.patient_id = mh.patient_id WHERE hf.ingredients LIKE '%Zhi Mu%' AND mh.medical_condition LIKE '%eczema%' GROUP BY p.patient_id HAVING COUNT(DISTINCT pi.formula_id) > 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $80 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $80 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 80000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT A.name, A.contact_email\nFROM Advertisers A\nJOIN Campaigns C ON A.advertiser_id = C.advertiser_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE T.targeting_type = 'Travel' AND C.status = 'active' AND C.budget > 80000000;\n",
    "prompt_token_number": 491,
    "response_token_number": 72
},
{
    "id": 33391,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue'], 'Film_Genre': ['film_id', 'genre_id'], 'Genre': ['name', 'genre_id'], 'Rating': ['user_id', 'film_id', 'score', 'rating', 'rating_id', 'genre_id']}. \n# the user question is: Find the genres that have at least one film that has not been rated by any user:. \n#SQL query: SELECT Genre.name FROM Genre INNER JOIN Film_Genre ON Genre.genre_id = Film_Genre.genre_id INNER JOIN Film ON Film_Genre.film_id = Film.film_id WHERE Film.film_id NOT IN ( SELECT Rating.film_id FROM Rating ) ;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.1 billion and have been updated in the last 14000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.1 billion and have been updated in the last 14000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1100000000 AND Creatives.updated_at BETWEEN DATE('now', '-14000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type \nFROM Creatives \nINNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id \nWHERE Campaigns.budget > 1100000000 AND Creatives.updated_at >= DATE(NOW()) - INTERVAL 14000 DAY;",
    "prompt_token_number": 407,
    "response_token_number": 58
},
{
    "id": 33392,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Director': ['director_id', 'name', 'gender', 'has_won_academy_award', 'director_name', 'birth_year']}. \n# the user question is: Retrieve the title of the movie, the name of the director, and the runtime for all movies directed by Ang Lee and released between the years 1995 and 2005.. \n#SQL query: SELECT Movie.title, Director.name, Movie.runtime FROM Movie JOIN Director ON Movie.director_id = Director.director_id WHERE Director.name = 'Ang Lee' AND Movie.release_year BETWEEN 1995 AND 2005;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $50 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $50 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.option_value = 'Fitness' AND Campaigns.status = 'active' AND Campaigns.budget > 50000000;",
    "prompt_token_number": 441,
    "response_token_number": 89
},
{
    "id": 33393,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Websites': ['website_id', 'user_id', 'url', 'created_at', 'updated_at', 'name', 'domain_id', 'domain_authority_score', 'domain_created_at'], 'Pages': ['page_id', 'website_id', 'url', 'title', 'description', 'content', 'created_at', 'updated_at', 'meta_description', 'meta_keywords', 'meta_title', 'h1_tag', 'h2_tag', 'title_tag', 'canonical_url', 'description_tag', 'header_tag', 'meta_tag', 'meta_keyword', 'h1', 'heading', 'header', 'word_count', 'time_on_page', 'total_words', 'http_status_code', 'user_id', 'last_modified_date', '[website_id]'], 'Page_Stats': ['page_stat_id', 'page_id', 'visits', 'bounce_rate', 'time_on_page', 'created_at', 'updated_at', 'organic_traffic', 'load_time', 'page_speed_score', 'total_images', 'total_videos', 'page_authority_score', 'domain_authority_score', 'page_load_time', 'backlinks', 'search_query', 'search_volume']}. \n# the user question is: Retrieve the names and URLs of all websites that have at least one page with a title tag containing the word \"services\" and a time on page greater than or equal to 1380 seconds:. \n#SQL query: SELECT DISTINCT Websites.name, Websites.url FROM Websites INNER JOIN Pages ON Websites.website_id = Pages.website_id INNER JOIN Page_Stats ON Pages.page_id = Page_Stats.page_id WHERE Pages.title_tag LIKE '%services%' AND Page_Stats.time_on_page >= 1380;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $90 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $90 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 90000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT Advertisers.name, Advertisers.contact_email \nFROM Advertisers INNER JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.option_value LIKE '%Technology%' \nAND Campaigns.budget > 90000000;",
    "prompt_token_number": 571,
    "response_token_number": 85
},
{
    "id": 33394,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['name', 'manufacturer_id', 'id', 'eyeshadow', 'Sultry', 'Nights', 'category'], 'RetailerProducts': ['retailer_id', 'product_id', 'price', 'id', 'stock'], 'ProductReviews': ['rating', 'product_id', 'id']}. \n# the user question is: Get the name and price of all products that have a rating of 4 or higher and are currently in stock.. \n#SQL query: SELECT Products.name, RetailerProducts.price FROM Products JOIN ProductReviews ON Products.id = ProductReviews.product_id JOIN RetailerProducts ON Products.id = RetailerProducts.product_id WHERE ProductReviews.rating >= 4 AND RetailerProducts.stock > 0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Football\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Football\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Sports' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Football' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Sports' AND Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Football' GROUP BY Campaigns.campaign_id HAVING COUNT(Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 434,
    "response_token_number": 108
},
{
    "id": 33395,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']}. \n# the user question is: Find the equipment that has been rented out for the longest period of time.. \n#SQL query: SELECT Equipment.equipment_name, EquipmentRentals.rental_start_time, EquipmentRentals.rental_end_time, julianday(EquipmentRentals.rental_end_time) - julianday(EquipmentRentals.rental_start_time) AS rental_duration FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id ORDER BY rental_duration DESC LIMIT 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Cooking\" and have a budget greater than $60 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Cooking\" and have a budget greater than $60 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Cooking' AND Campaigns.budget > 60000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Campaigns.budget > 60000000 \nAND Targeting_Options.targeting_type = 'Interest' \nAND Targeting_Options.option_value = 'Cooking';",
    "prompt_token_number": 481,
    "response_token_number": 106
},
{
    "id": 33396,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'comic_books': ['rating', 'series_name', 'issue_number', 'name', 'cover_artist', 'release_date', 'writer', 'artist', 'id', 'variant_cover', 'cover_price', 'series', 'publisher', 'price', 'genre', 'crossover_event', 'publication_date']}. \n# the user question is: Retrieve the name and issue number of all comic book issues that have not been rated yet.. \n#SQL query: SELECT name, issue_number FROM comic_books WHERE rating IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.2 billion and have been updated in the last 15000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.2 billion and have been updated in the last 15000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1200000000 AND Creatives.updated_at BETWEEN DATE('now', '-15000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type \nFROM Creatives \nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id \nWHERE Campaigns.budget > 1200000000 AND Creatives.updated_at > CURRENT_DATE - INTERVAL '15000' DAY;",
    "prompt_token_number": 309,
    "response_token_number": 56
},
{
    "id": 33397,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']}. \n# the user question is: Find the names and birthdates of all artists who have artwork in the \"Musée d'Orsay\" and were born after 1860.. \n#SQL query: SELECT DISTINCT ar.first_name, ar.last_name, ar.date_of_birth FROM artist AS ar INNER JOIN artwork AS a ON ar.artist_id = a.artist_id INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS lo ON al.location_id = lo.location_id WHERE ar.date_of_birth >= '1860-01-01' AND lo.name = 'Musée d\\'Orsay' AND al.end_date IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $60 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $60 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 60000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT ap.name, ap.category FROM Apps AS ap INNER JOIN Ad_Placements AS adp ON ap.app_id = adp.app_id INNER JOIN Campaigns AS c ON adp.campaign_id = c.campaign_id INNER JOIN Targeting_Options AS to ON c.campaign_id = to.campaign_id WHERE to.targeting_type = 'Fashion' AND c.status = 'active' AND c.budget > 60000000;",
    "prompt_token_number": 674,
    "response_token_number": 88
},
{
    "id": 33398,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Films': ['release_date', 'director_id', 'genre_id', 'title', 'film_id', 'duration'], 'Genres': ['name', 'genre_id'], 'Ratings': ['user_id', 'rating_value', 'film_id', 'review_id'], 'Awards': ['award_year', 'award_name', 'film_id', 'award_id']}. \n# the user question is: Retrieve the film titles and average ratings for comedy films that have won at least one award:. \n#SQL query: SELECT Films.title, AVG(Ratings.rating_value) AS average_rating FROM Films JOIN Ratings ON Films.film_id = Ratings.film_id WHERE Films.film_id IN ( SELECT film_id FROM Awards ) AND Films.genre_id = ( SELECT genre_id FROM Genres WHERE name = 'Comedy' ) GROUP BY Films.film_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $100 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $100 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nWHERE Campaigns.status = 'active' \nAND Campaigns.budget > 100000000 \nAND Campaigns.campaign_id IN (\n  SELECT campaign_id \n  FROM Targeting_Options \n  WHERE targeting_type = 'interest' \n  AND option_value = 'Technology');\n",
    "prompt_token_number": 393,
    "response_token_number": 90
},
{
    "id": 33399,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Project_Tasks': ['project_id', 'task_id', 'is_completed', 'completed_date', 'start_date', 'task_name', 'estimated_completion_date', 'due_date', 'priority_level'], 'Tasks': ['project_id', 'employee_id', 'task_name', 'task_id', 'is_completed', 'skill_set'], 'Task_Completions': ['task_id', 'completed', 'due_date', 'completion_date']}. \n# the user question is: Find the tasks that are overdue and have not been completed.. \n#SQL query: SELECT Tasks.task_name, Project_Tasks.due_date FROM Tasks JOIN Project_Tasks ON Tasks.task_id = Project_Tasks.task_id LEFT JOIN Task_Completions ON Project_Tasks.task_id = Task_Completions.task_id WHERE Project_Tasks.due_date < DATE('now') AND Task_Completions.completed = 0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Music\" and target users interested in \"Rock\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Music\" and target users interested in \"Rock\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Music' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Rock' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget \nFROM Campaigns \nINNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nINNER JOIN Websites ON Ad_Placements.website_id = Websites.website_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Websites.category = 'Music' and Targeting_Options.option_value = 'Rock';",
    "prompt_token_number": 464,
    "response_token_number": 83
},
{
    "id": 33400,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Publishers': ['PublisherID', 'PublisherName', 'SeriesID'], 'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate'], 'Creators': ['CreatorID', 'CreatorName'], 'IssueCreators': ['CreatorID', 'IssueID', 'RoleName', 'Role'], 'SeriesPublishers': ['SeriesID', 'PublisherID']}. \n# the user question is: Find all creators who have worked on a series published by a certain publisher:. \n#SQL query: SELECT DISTINCT Creators.CreatorName FROM Creators JOIN IssueCreators ON Creators.CreatorID = IssueCreators.CreatorID JOIN Issues ON IssueCreators.IssueID = Issues.IssueID JOIN SeriesPublishers ON Issues.SeriesID = SeriesPublishers.SeriesID WHERE SeriesPublishers.PublisherID = ( SELECT PublisherID FROM Publishers WHERE PublisherName = 'DC Comics' ) ORDER BY Creators.CreatorName;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $70 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $70 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 70000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Websites.name, Websites.category \nFROM Websites \nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.option_value = 'Travel' \nAND Campaigns.budget > 70000000;",
    "prompt_token_number": 539,
    "response_token_number": 92
},
{
    "id": 33401,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'loan': ['return_date', 'loan_date', 'artwork_id', 'lender_id', 'location_id', 'start_date', 'artwork_location_id'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']}. \n# the user question is: Find the titles and mediums of all artwork in the \"National Gallery of Art\" that were created by \"Claude Monet\" and are not currently on loan.. \n#SQL query: SELECT a.title, a.medium FROM artwork AS a INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS l ON al.location_id = l.location_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id WHERE ar.last_name = 'Monet' AND l.name = 'National Gallery of Art' AND al.end_date IS NULL AND a.artwork_id NOT IN (SELECT artwork_id FROM loan WHERE return_date IS NULL);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.3 billion and have been updated in the last 16000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.3 billion and have been updated in the last 16000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1300000000 AND Creatives.updated_at BETWEEN DATE('now', '-16000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT C.name, C.type FROM Creatives AS C INNER JOIN Campaigns AS Ca ON C.campaign_id = Ca.campaign_id WHERE Ca.budget > 1300000000 AND DATEDIFF(DAY, C.updated_at, GETDATE()) < 16000;",
    "prompt_token_number": 639,
    "response_token_number": 56
},
{
    "id": 33402,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Protein': ['gene_id', 'molecular_weight', 'protein_name', 'isoelectric_point', 'protein_id', 'length', 'protein_length'], 'Pathway_Gene': ['gene_id', 'pathway_id'], 'Pathway': ['pathway_id', 'pathway_name', 'description']}. \n# the user question is: Retrieve the names of all genes and their associated proteins that have a length less than 3000 amino acids and are part of the \"apoptosis pathway\".. \n#SQL query: SELECT Gene.gene_name, Protein.protein_name FROM Gene JOIN Protein ON Gene.gene_id = Protein.gene_id JOIN Pathway_Gene ON Gene.gene_id = Pathway_Gene.gene_id JOIN Pathway ON Pathway_Gene.pathway_id = Pathway.pathway_id WHERE Protein.length < 3000 AND Pathway.pathway_name = 'apoptosis pathway';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $70 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $70 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 70000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 70000000;",
    "prompt_token_number": 537,
    "response_token_number": 84
},
{
    "id": 33403,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID'], 'SalesOrderLineItem': ['ProductID', 'UnitPrice', 'Quantity', 'OrderID', 'OrderDate', 'Price', 'OrderLineID'], 'Customer': ['CustomerName', 'CustomerID', 'Country', 'SegmentID', 'Continent', 'PhoneNumber', 'Email', 'CreditLimit', 'State', 'AddressID', 'EmailAddress', 'LoyaltyLevelID', 'FirstName', 'LastName', 'City', 'StateCode', 'CountryCode', 'RegistrationDate']}. \n# the user question is: Retrieve the list of customers and the total revenue they generated from purchases made in the year 2023, sorted by revenue in descending order, with a limit of 10 results:. \n#SQL query: SELECT Customer.CustomerName, SUM(SalesOrderLineItem.Quantity * SalesOrderLineItem.UnitPrice) as TotalRevenue FROM Customer JOIN SalesOrder ON Customer.CustomerID = SalesOrder.CustomerID JOIN SalesOrderLineItem ON SalesOrder.OrderID = SalesOrderLineItem.OrderID WHERE SalesOrder.Year = 2023 GROUP BY Customer.CustomerID ORDER BY TotalRevenue DESC LIMIT 10;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Sports\" and have a budget greater than $120 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Sports\" and have a budget greater than $120 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 120000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email\nFROM Advertisers\nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'Sports' and Campaigns.budget > 120000000\nGROUP BY Advertisers.name, Advertisers.contact_email \nHAVING COUNT(Campaigns.campaign_id) >= 1;",
    "prompt_token_number": 518,
    "response_token_number": 109
},
{
    "id": 33404,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'sports': ['sport_name', 'sport_id', 'Low', 'motivation', 'competition', 'challenge', 'sport_category'], 'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'mental_skills': ['skill_id', 'skill_name', 'skill_description', 'athlete_id', 'Focus', 'Visualization', 'skill_mastered', 'skill_level', 'Excellent', 'High', 'Low'], 'athlete_sports': ['sport_id', 'athlete_id']}. \n# the user question is: Get the names of all athletes who have participated in a sport that has a \"High\" level of \"Competition\" and who have also mastered the mental skill \"Visualization\".. \n#SQL query: SELECT DISTINCT athletes.athlete_name FROM athletes INNER JOIN athlete_sports ON athletes.athlete_id = athlete_sports.athlete_id INNER JOIN sports ON athlete_sports.sport_id = sports.sport_id INNER JOIN athlete_skills ON athletes.athlete_id = athlete_skills.athlete_id WHERE sports.competition = 'High' AND athlete_skills.skill_id = (SELECT skill_id FROM mental_skills WHERE skill_name = 'Visualization') AND athlete_skills.skill_mastered = 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Technology\" and target users interested in \"Gaming\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Technology\" and target users interested in \"Gaming\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Technology' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget \nFROM Campaigns \nINNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id\nINNER JOIN Websites ON Ad_Placements.website_id = Websites.website_id\nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Websites.category = 'Technology' AND Targeting_Options.option_value = 'Gaming';",
    "prompt_token_number": 593,
    "response_token_number": 84
},
{
    "id": 33405,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Patients': ['medical_history', 'patient_id', 'first_name', 'last_name', 'age_group', 'gender', 'Age', 'Contact_Info', 'Name', 'Diagnosis', 'Discharge_Date', 'Admission_Date', 'Address', 'Family_History', 'Patient_ID', 'Doctor_ID', 'Doctor_I', 'AdmissionDate', 'Therapy', 'date_of_birth', 'name'], 'Rooms': ['room_id', 'room_number', 'bed_number', 'room_type'], 'Admissions': ['date_discharged', 'room_id', 'patient_id', 'admission_id', 'date_admitted', 'nurse_id', 'medical_record_id', 'admission_date', 'discharge_date', 'ward_id', 'num_medications', 'Unit_Type', 'Admission_Date', 'Diagnosis', 'Discharge_Date', 'Patient_ID']}. \n# the user question is: Find the patients who have been admitted to a room with a bed number greater than 100.. \n#SQL query: SELECT DISTINCT Patients.patient_id, Patients.first_name, Patients.last_name, Rooms.room_number, Rooms.bed_number FROM Patients INNER JOIN Admissions ON Patients.patient_id = Admissions.patient_id INNER JOIN Rooms ON Admissions.room_id = Rooms.room_id WHERE Rooms.bed_number > 100;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $80 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $80 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 80000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Websites.name, Websites.category \nFROM Websites \nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'Music' AND Campaigns.budget > 80000000;",
    "prompt_token_number": 557,
    "response_token_number": 94
},
{
    "id": 33406,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Recipes': ['cooking_time', 'recipe_id', 'title', 'category_id', 'preparation_time', 'difficulty_level_id', 'creation_date', 'cuisine_type_id'], 'RecipeRatings': ['rating_id', 'recipe_id', 'rating', 'user_id']}. \n# the user question is: Text Query: \"Retrieve the recipes with the highest average rating and at least 10 reviews.\". \n#SQL query: SELECT r.recipe_id, r.title, AVG(rr.rating) AS average_rating FROM Recipes r JOIN RecipeRatings rr ON r.recipe_id = rr.recipe_id GROUP BY r.recipe_id, r.title HAVING COUNT(rr.rating_id) >= 10 ORDER BY average_rating DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.4 billion and have been updated in the last 17000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.4 billion and have been updated in the last 17000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1400000000 AND Creatives.updated_at BETWEEN DATE('now', '-17000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns cp ON c.campaign_id = cp.campaign_id WHERE cp.budget > 1400000000 AND DATEDIFF(CURDATE(), c.updated_at) < 17000;",
    "prompt_token_number": 350,
    "response_token_number": 51
},
{
    "id": 33408,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'SmartContractInstance': ['BlockID', 'SmartContractID', 'Creator', 'SmartContractInstanceID', 'Timestamp', 'PublicAddress', 'IsSuccess', 'Function', 'Parameter', 'GasPrice', 'Caller', 'GasUsed', 'Sender', 'ExecutionTime', 'Successful', 'User', 'EndTimestamp', 'Status', 'IsDeployed'], 'SmartContract': ['SmartContractID', 'Code', 'Balance', 'Creator', 'Name']}. \n# the user question is: Find the smart contracts that have the highest average execution time in the last 7 days:. \n#SQL query: SELECT SmartContract.SmartContractID, AVG(SmartContractInstance.ExecutionTime) AS AvgExecutionTime FROM SmartContract JOIN SmartContractInstance ON SmartContract.SmartContractID = SmartContractInstance.SmartContractID AND SmartContractInstance.Timestamp >= datetime('now', '-7 days') GROUP BY SmartContract.SmartContractID ORDER BY AvgExecutionTime DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $80 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $80 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 80000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 80000000\nGROUP BY Advertisers.advertiser_id \nHAVING COUNT(Campaigns.campaign_id) >=1",
    "prompt_token_number": 418,
    "response_token_number": 102
},
{
    "id": 33409,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']}. \n# the user question is: Find the name and GDP per capita of the 5 countries with the highest GDP per capita and a population greater than 10 million:. \n#SQL query: SELECT name, gdp_per_capita FROM Country WHERE population > 10000000 ORDER BY gdp_per_capita DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $90 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $90 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 90000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.targeting_type = 'Technology' \nAND Campaigns.budget > 90000000 \nAND Campaigns.status = 'Active';",
    "prompt_token_number": 562,
    "response_token_number": 91
},
{
    "id": 33410,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'tasks': ['created_at', 'project_id', 'task_id', 'user_id', 'due_date', 'completed', 'started_at', 'priority', 'completion_date', 'completed_date', 'start_date', 'created_date', 'creator_id', 'assignee_id', 'completed_at', 'name', 'tags', 'assigner_id', 'assigned_by_id', 'category'], 'users': ['user_id', 'name', 'email', 'last_login_attempt', 'total_tasks', 'completed_tasks', 'assignee_id', 'role', 'last_login', 'first_name', 'last_name', 'last_login_date', 'registration_date', 'password', 'job_title', 'hire_date']}. \n# the user question is: Retrieve the names and email addresses of all users who have been assigned to tasks with a priority of 'critical' and have not completed them yet:. \n#SQL query: SELECT DISTINCT u.name, u.email FROM users u JOIN tasks t ON u.user_id = t.user_id AND t.priority = 'critical' AND t.completed = 0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.5 billion and have been updated in the last 18000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.5 billion and have been updated in the last 18000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1500000000 AND Creatives.updated_at BETWEEN DATE('now', '-18000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT DISTINCT c.name, c.type FROM Creatives c JOIN Campaigns ca ON c.campaign_id=ca.campaign_id AND ca.budget > 1500000000 AND DATEDIFF(CURRENT_DATE, c.updated_at) <= 18000;",
    "prompt_token_number": 425,
    "response_token_number": 52
},
{
    "id": 33411,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {}. \n# the user question is: Find the names and percentage of female members of all the political parties in the database:. \n#SQL query: SELECT name, (CAST(number_of_female_members AS FLOAT) / number_of_members) * 100 AS female_percentage FROM PoliticalParty;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $60 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $60 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Health' AND Campaigns.budget > 60000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.targeting_type = 'Health' \nAND Campaigns.budget > 60000000;",
    "prompt_token_number": 334,
    "response_token_number": 92
},
{
    "id": 33412,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Sessions': ['psychologist_id', 'patient_id', 'date', 'location', 'therapist', 'therapist_id', 'session_date', 'session_id', 'duration_minutes', 'missed', 'remote_session'], 'Patients': ['name', 'patient_id', 'birthdate', 'case_id', 'age', 'date_of_birth', 'last_name', 'first_name'], 'Diagnosis': ['suspect_id', 'patient_id', 'disorder', 'disorder_subtype', 'recommendation', 'disorder_id', 'criminal_id'], 'Therapists': ['last_name', 'therapist_id', 'first_name', 'count', 'experience_years', 'license_number']}. \n# the user question is: List all therapists who have treated patients who have been diagnosed with a substance use disorder and have attended at least 10 therapy sessions.. \n#SQL query: SELECT DISTINCT t.first_name, t.last_name FROM Therapists t INNER JOIN Sessions s ON t.therapist_id = s.therapist_id INNER JOIN Patients p ON s.patient_id = p.patient_id INNER JOIN Diagnosis d ON p.patient_id = d.patient_id WHERE d.disorder LIKE '%substance use disorder%' AND ( SELECT COUNT(s2.session_id) FROM Sessions s2 WHERE s2.patient_id = p.patient_id ) >= 10;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $110 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $110 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 110000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a INNER JOIN Campaigns c ON a.advertiser_id = c.advertiser_id INNER JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.option_value LIKE '%Technology%' AND c.budget > 110000000;",
    "prompt_token_number": 495,
    "response_token_number": 69
},
{
    "id": 33413,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Designs': ['artist_id', 'design_name', 'design_id', 'design_description', 'Tree', 'designer_id', 'date_created'], 'Etchings': ['etching_id', 'etching_date', 'order_id', 'design_id', 'etching_description', 'etching_name', 'description', 'price', 'etching_image'], 'Etching_Glassware_Items': ['etching_id', 'quantity', 'glassware_item_id', 'etching_glassware_item_id']}. \n# the user question is: Retrieve the list of etchings along with their designs and the number of glassware items they have been etched onto, where the number of glassware items is less than 5.. \n#SQL query: SELECT Designs.design_name, COUNT(Etching_Glassware_Items.etching_glassware_item_id) AS total_items FROM Designs INNER JOIN Etchings ON Designs.design_id = Etchings.design_id INNER JOIN Etching_Glassware_Items ON Etchings.etching_id = Etching_Glassware_Items.etching_id GROUP BY Designs.design_id HAVING total_items < 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $100 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $100 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category FROM Websites INNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id INNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id INNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'Travel' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active' GROUP BY Websites.website_id;",
    "prompt_token_number": 523,
    "response_token_number": 93
},
{
    "id": 33414,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['username', 'user_id', 'email', 'john_doe', 'jane_doe', 'sarah_smith', 'tom_wilson', 'robert_king', 'alice_smith', 'jack_smith', 'jane_smith', 'mary_jones', 'joe_brown', 'james_smith', 'jessica_wong', 'david_smith', 'first_name', 'last_name', 'james_wong', 'emily_smith', 'jennifer_wilson', 'subscription', 'date_of_birth'], 'Datasets': ['created_by', 'dataset_name', 'dataset_id', 'modified_date', 'dataset_type', 'user_i', 'creation_date', 'Num_rows', 'Downloads', 'Created_date', 'Security_level', 'quality_score'], 'Sales': ['Sales', 'Product', 'Region', 'State', 'product_id', 'dataset_id', 'quantity', 'sale_date', 'Unit_price', 'Sale_date', 'salesperson_id', 'sale_id', 'customer_id', 'company_id', 'unit_price', 'sales_id', 'model_id']}. \n# the user question is: What are the names of the users who have created at least one dataset with a 'Low' quality score and have not made any sales in the 'Sales' table, sorted in alphabetical order?. \n#SQL query: SELECT DISTINCT Users.username FROM Users INNER JOIN Datasets ON Users.user_id = Datasets.created_by LEFT JOIN Sales ON Users.user_id = Sales.salesperson_id WHERE Datasets.quality_score = 'Low' AND Sales.salesperson_id IS NULL ORDER BY Users.username ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.6 billion and have been updated in the last 19000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.6 billion and have been updated in the last 19000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1600000000 AND Creatives.updated_at BETWEEN DATE('now', '-19000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1600000000 AND Creatives.updated_at > DATE_SUB(CURDATE(), INTERVAL 19000 DAY);",
    "prompt_token_number": 547,
    "response_token_number": 56
},
{
    "id": 33415,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']}. \n# the user question is: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.5 billion and have been updated in the last 18000 days:. \n#SQL query: SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1500000000 AND Creatives.updated_at BETWEEN DATE('now', '-18000 days') AND DATE('now');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Entertainment\" and have a budget greater than $70 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Entertainment\" and have a budget greater than $70 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Entertainment' AND Campaigns.budget > 70000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.option_value = 'Entertainment' \nAND Campaigns.budget > 70000000 AND Campaigns.status = 'Active';",
    "prompt_token_number": 464,
    "response_token_number": 89
},
{
    "id": 33416,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Client': ['client_id', 'name', 'email', 'phone_number', 'industry_id', 'location_id', 'industry', 'budget', 'first_name', 'last_name', 'state', 'city', 'company_name', 'annual_revenue'], 'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months'], 'Story': ['story_id', 'headline', 'content', 'date_published', 'outlet_id', 'campaign_id', 'date', 'journalist_id', 'sentiment_score', 'body', 'views', 'shares', 'likes', 'clicks', 'impressions', 'comments', 'text', 'publication_date', 'word_count'], 'MediaContact': ['outlet_id', 'first_name', 'phone_number', 'last_name', 'email', 'phone']}. \n# the user question is: Retrieve the names and email addresses of all media contacts who have published a story that was featured in a campaign associated with a client with the name \"XYZ Inc\" and have a phone number starting with \"333-\":. \n#SQL query: SELECT DISTINCT MediaContact.first_name, MediaContact.last_name, MediaContact.email FROM MediaContact INNER JOIN Story ON MediaContact.outlet_id = Story.outlet_id INNER JOIN Campaign ON Story.campaign_id = Campaign.campaign_id INNER JOIN Client ON Campaign.client_id = Client.client_id WHERE Client.name = 'XYZ Inc' AND MediaContact.phone LIKE '333-%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $90 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $90 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 90000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT Advertisers.name, Advertisers.contact_email FROM Advertisers INNER JOIN Campaigns ON Campaigns.advertiser_id = Advertisers.advertiser_id INNER JOIN Targeting_Options ON Targeting_Options.campaign_id = Campaigns.campaign_id WHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 90000000;",
    "prompt_token_number": 590,
    "response_token_number": 80
},
{
    "id": 33417,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Actor': ['last_name', 'actor_id', 'first_name'], 'Film_Actor': ['film_id', 'actor_id', 'rating'], 'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue'], 'Award': ['film_id', 'award_id', 'name', 'category']}. \n# the user question is: Find the actors who have appeared in films released in even-numbered years and have won at least one award:. \n#SQL query: SELECT Actor.first_name, Actor.last_name, Film.release_year, COUNT(DISTINCT Award.award_id) AS award_count FROM Actor INNER JOIN Film_Actor ON Actor.actor_id = Film_Actor.actor_id INNER JOIN Film ON Film_Actor.film_id = Film.film_id AND Film.release_year % 2 = 0 INNER JOIN Award ON Film.film_id = Award.film_id GROUP BY Actor.actor_id, Film.release_year HAVING COUNT(DISTINCT Award.award_id) >= 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $120 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $120 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 120000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id AND Campaigns.budget > 120000000 AND Campaigns.status = 'active' \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Food';\n",
    "prompt_token_number": 541,
    "response_token_number": 102
},
{
    "id": 33418,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']}. \n# the user question is: Find the titles and mediums of all artwork in the \"The Art Institute of Chicago\" that were created by \"Georges Seurat\" and are currently on display.. \n#SQL query: SELECT a.title, a.medium FROM artwork AS a INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS l ON al.location_id = l.location_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id WHERE ar.first_name = 'Georges' AND ar.last_name = 'Seurat' AND l.name = 'The Art Institute of Chicago' AND al.end_date IS NULL AND al.on_display = 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $2 billion and have been updated in the last 20000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $2 billion and have been updated in the last 20000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 2000000000 AND Creatives.updated_at BETWEEN DATE('now', '-20000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT c.name, c.type FROM Creatives AS c INNER JOIN Campaigns AS cp ON c.campaign_id = cp.campaign_id WHERE cp.budget > 2000000000 AND DATEDIFF(NOW(), c.updated_at) <= 20000;",
    "prompt_token_number": 601,
    "response_token_number": 53
},
{
    "id": 33419,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Programs': ['program_id', 'program_name', 'program_description', 'start_date', 'end_date', 'status', 'Program'], 'Goals': ['goal_id', 'goal_name', 'goal_description', 'goal_due_date', 'user_id', 'program_id', 'goal_target', 'goal_type', 'goal_end_date', 'goal_target_date', 'goal_start_date', 'goal_status', 'goal_value'], 'Progress': ['progress_id', 'goal_id', 'user_id', 'progress_date', 'progress_value', 'date_recorded']}. \n# the user question is: Find the name and email address of the user who has achieved the highest total progress towards their goals across all programs:. \n#SQL query: SELECT Users.first_name, Users.last_name, Users.email, SUM(Progress.progress_value / Goals.goal_target) AS total_progress FROM Users JOIN Goals ON Users.user_id = Goals.user_id JOIN Programs ON Goals.program_id = Programs.program_id JOIN Progress ON Goals.goal_id = Progress.goal_id GROUP BY Users.user_id ORDER BY total_progress DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $50 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $50 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category\nFROM Apps\nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id\nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.status = 'Active' AND Campaigns.budget > 50000000 AND Targeting_Options.targeting_type = 'Interest' AND Targeting_Options.option_value = 'Fashion';",
    "prompt_token_number": 543,
    "response_token_number": 99
},
{
    "id": 33420,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'trips': ['bike_model', 'trip_id', 'trip_duration', 'start_time', 'bike_id', 'user_type', 'start_station_id', 'end_station_id', 'start_date', 'user_id', 'user_email']}. \n# the user question is: Find the top 5 most popular bike models based on the total number of trips.. \n#SQL query: SELECT bike_model, COUNT(trip_id) AS total_trips FROM trips GROUP BY bike_model ORDER BY total_trips DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Beauty\" and have a budget greater than $80 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Beauty\" and have a budget greater than $80 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Beauty' AND Campaigns.budget > 80000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Beauty' AND Campaigns.budget > 80000000 \nGROUP BY Advertisers.name, Advertisers.contact_email;",
    "prompt_token_number": 328,
    "response_token_number": 94
},
{
    "id": 33423,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'loan': ['return_date', 'loan_date', 'artwork_id', 'lender_id', 'location_id', 'start_date', 'artwork_location_id'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']}. \n# the user question is: Find the titles and mediums of all artwork in the \"Museum of Fine Arts, Boston\" that were created by \"Rembrandt\" and are not currently on loan.. \n#SQL query: SELECT a.title, a.medium FROM artwork AS a INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS l ON al.location_id = l.location_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id WHERE ar.last_name = 'Rembrandt' AND l.name = 'Museum of Fine Arts, Boston' AND al.end_date IS NULL AND a.artwork_id NOT IN (SELECT artwork_id FROM loan WHERE return_date IS NULL);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $60 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $60 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 60000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT a.name, a.category FROM Apps AS a INNER JOIN Ad_Placements AS ap ON a.app_id = ap.app_id INNER JOIN Campaigns AS c ON ap.campaign_id = c.campaign_id INNER JOIN Targeting_Options AS to ON c.campaign_id = to.campaign_id WHERE to.targeting_type = 'Travel' AND c.status = 'active' AND c.budget > 60000000;\n",
    "prompt_token_number": 721,
    "response_token_number": 84
},
{
    "id": 33424,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Patients': ['medical_history', 'patient_id', 'first_name', 'last_name', 'age_group', 'gender', 'Age', 'Contact_Info', 'Name', 'Diagnosis', 'Discharge_Date', 'Admission_Date', 'Address', 'Family_History', 'Patient_ID', 'Doctor_ID', 'Doctor_I', 'AdmissionDate', 'Therapy', 'date_of_birth', 'name'], 'Medications': ['medication_name', 'patient_id', 'start_date', 'end_date', 'medical_record_id', 'admission_id', 'dosage', 'quantity', 'frequency', 'duration', 'medication_id', 'drug_class', 'medication_type', 'dosage_amount', 'TimeToAdminister']}. \n# the user question is: Find the patients who have been prescribed a medication with a frequency of once a day and a dosage less than 5mg.. \n#SQL query: SELECT DISTINCT Patients.patient_id, Patients.first_name, Patients.last_name, Medications.medication_name, Medications.frequency, Medications.dosage FROM Patients INNER JOIN Medications ON Patients.patient_id = Medications.patient_id WHERE Medications.frequency = 'once a day' AND Medications.dosage < 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Health\" and have a budget greater than $100 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Health\" and have a budget greater than $100 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Health' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nINNER JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.targeting_type = 'Health' \nAND Campaigns.status = 'active' \nAND Campaigns.budget > 100000000;",
    "prompt_token_number": 479,
    "response_token_number": 87
},
{
    "id": 33425,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Shifts': ['start_time', 'end_time', 'employee_id', 'shift_id', 'duration', 'status', 'shift_date', 'machine_id', 'overtime_hours', 'performance_rating', 'shift_start', 'hours_worked'], 'Employees': ['first_name', 'employee_id', 'last_name', 'job_title', 'territory_id', 'department_id', 'manager_id', 'job_title_id', 'hire_date', 'address', 'birth_date', 'phone', 'title', 'reports_to', 'address_id', 'performance_evaluation_date', 'training_expiry_date', 'schedule_update_date', 'time_off_request_date', 'performance_bonus_date', 'promotion_date', 'overtime_pay_date', 'reassignment_date', 'training_date', 'annual_leave_balance', 'skills_upgrade_date', 'compensatory_time_off_date', 'shift_length', 'last_promotion_date', 'career_development_plan_date', 'last_break_date', 'salary', 'hourly_rate', 'hourly_wage', 'status', 'skill_set', 'ShiftStart', 'ShiftEnd', 'EmployeeID', 'EmployeeName', 'HireDate', 'LastName', 'Title', 'FirstName', 'BirthDate'], 'Departments': ['department_name', 'department_id']}. \n# the user question is: Find the employees who have worked in the last week and their respective departments.. \n#SQL query: SELECT Departments.department_name, Employees.first_name, Employees.last_name FROM Departments INNER JOIN Employees ON Departments.department_id = Employees.department_id INNER JOIN Shifts ON Employees.employee_id = Shifts.employee_id WHERE Shifts.start_time BETWEEN DATE('now', '-1 week') AND DATE('now');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Pets\" and have a budget greater than $200 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Pets\" and have a budget greater than $200 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Pets' AND Campaigns.budget > 200000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.option_value = \"Pets\" \nAND Campaigns.status = \"active\" \nAND Campaigns.budget > 200000000;",
    "prompt_token_number": 634,
    "response_token_number": 94
},
{
    "id": 33426,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['Client_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'City', 'Email_Address', 'Phone_Number', 'State', 'ClientName', 'ClientID', 'Name', 'ID', 'Status', 'Balance', 'pending_case', 'legal_fees'], 'Cases': ['Case_ID', 'Case_Name', 'Case_Description', 'Client_ID', 'Case_Status', 'Lawyer_ID', 'Last_Updated', 'Date_Opened', 'Date_Closed', 'Status', 'Case_Closed_Date', 'Practice_Area_ID', 'Case_Manager_ID', 'Open_Date', 'Closed', 'Case_End_Date', 'Case_Start_Date', 'Firm_ID', 'Office_ID', 'CaseStatus', 'CaseNumber', 'ClientID', 'CaseTitle', 'CaseTypeID', 'CaseType', 'CourtName', 'ClosedDate', 'Settlement', 'ID', 'HearingDate', 'ClosingDate', 'AppealStatus', 'LawyerID', 'OpeningDate', 'verdict', 'judge_id', 'defendant_state', 'plaintiff_state', 'lawyer_id'], 'Invoices': ['Invoice_ID', 'Client_ID', 'Date', 'Amount', 'Case_ID', 'Paid_Date', 'Due_Date', 'Invoice_Date', 'Time_Entry_ID', 'Paid', 'Billed', 'Task_ID', 'Issue_Date', 'Total_Amount', 'Invoice_Number', 'Amount_Billed', 'Invoice_Status', 'Billing_Date', 'Billing_Rate_ID', 'Hours_Billed', 'Amount_Paid', 'Amount_Due', 'Bill_Date', 'ClientID', 'Status', 'Unpaid', 'IssueDate'], 'Payments': ['Payment_ID', 'Invoice_ID', 'Payment_Date', 'Amount', 'Invoice_I', 'Time_Entry_ID', 'Date', 'Payment_Amount', 'Invoice_Number'], 'Invoice_Line_Items': ['Invoice_ID', 'Amount']}. \n# the user question is: List all the cases and their associated clients, along with the total amount billed and paid for each case, sorted by total amount billed:. \n#SQL query: SELECT Cases.Case_Name, Clients.First_Name, Clients.Last_Name, SUM(Invoice_Line_Items.Amount) AS Total_Billed, SUM(Payments.Payment_Amount) AS Total_Paid FROM Cases JOIN Clients ON Cases.Client_ID = Clients.Client_ID JOIN Invoices ON Cases.Case_ID = Invoices.Case_ID JOIN Invoice_Line_Items ON Invoices.Invoice_ID = Invoice_Line_Items.Invoice_ID LEFT JOIN Payments ON Invoices.Invoice_ID = Payments.Invoice_ID GROUP BY Cases.Case_ID ORDER BY Total_Billed DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $3 billion and have been updated in the last 22000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $3 billion and have been updated in the last 22000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 3000000000 AND Creatives.updated_at BETWEEN DATE('now', '-22000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 3000000000 AND Creatives.updated_at > DATE_SUB(CURDATE(), INTERVAL 22000 DAY);",
    "prompt_token_number": 755,
    "response_token_number": 55
},
{
    "id": 33427,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']}. \n# the user question is: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Food\" and target users interested in \"Cooking\":. \n#SQL query: SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Food' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Cooking' GROUP BY Campaigns.campaign_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $150 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $150 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 150000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 150000000;",
    "prompt_token_number": 532,
    "response_token_number": 89
},
{
    "id": 33429,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'loan': ['return_date', 'loan_date', 'artwork_id', 'lender_id', 'location_id', 'start_date', 'artwork_location_id'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']}. \n# the user question is: Find the titles and mediums of all artwork in the \"Museu de Arte de São Paulo\" that were created by \"Vincent van Gogh\" and are not currently on loan.. \n#SQL query: SELECT a.title, a.medium FROM artwork AS a INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS l ON al.location_id = l.location_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id WHERE ar.first_name = 'Vincent' AND ar.last_name = 'van Gogh' AND l.name = 'Museu de Arte de São Paulo' AND al.end_date IS NULL AND a.artwork_id NOT IN (SELECT artwork_id FROM loan WHERE return_date IS NULL);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $4 billion and have been updated in the last 23000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $4 billion and have been updated in the last 23000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 4000000000 AND Creatives.updated_at BETWEEN DATE('now', '-23000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT c.name, c.type FROM Creatives AS c INNER JOIN Campaigns AS cp ON c.campaign_id = cp.campaign_id WHERE cp.budget > 4000000000 AND DATEDIFF(DAY, c.updated_at, GETDATE()) < 23000;",
    "prompt_token_number": 656,
    "response_token_number": 56
},
{
    "id": 33430,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Sites': ['site_id', 'name', 'location', 'date_discovered', 'excavated_by', 'culture_id', 'description'], 'Excavations': ['excavation_id', 'site_id', 'start_date', 'end_date', 'description', 'excavated_by'], 'Artifacts': ['artifact_id', 'excavation_id', 'name', 'type', 'description', 'weight']}. \n# the user question is: Retrieve the names and descriptions of sites where the average weight of artifacts is greater than 300 grams:. \n#SQL query: SELECT Sites.name, Sites.description FROM Sites JOIN Excavations ON Sites.site_id = Excavations.site_id JOIN Artifacts ON Excavations.excavation_id = Artifacts.excavation_id GROUP BY Sites.name, Sites.description HAVING AVG(Artifacts.weight) > 300;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $80 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $80 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 80000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 80000000 \nGROUP BY Apps.name, Apps.category \nHAVING COUNT(Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 457,
    "response_token_number": 112
},
{
    "id": 33431,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Publishers': ['PublisherID', 'PublisherName', 'SeriesID'], 'Series': ['SeriesID', 'SeriesTitle', 'PublisherID', 'AverageCoverPrice', 'AverageIssueRating', 'SeriesName'], 'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate'], 'Genres': ['GenreID', 'GenreName'], 'IssueGenres': ['IssueGenreID', 'IssueID', 'GenreID', 'SeriesID']}. \n# the user question is: Find all series that have published issues with a cover price less than $3.50 and a western or historical genre, and have been published by Image Comics or Dark Horse Comics:. \n#SQL query: SELECT DISTINCT Series.SeriesTitle FROM Series JOIN Issues ON Series.SeriesID = Issues.SeriesID JOIN IssueGenres ON Issues.IssueID = IssueGenres.IssueID JOIN Genres ON IssueGenres.GenreID = Genres.GenreID JOIN Publishers ON Series.PublisherID = Publishers.PublisherID WHERE Issues.CoverPrice < 3.50 AND (Genres.GenreName = 'Western' OR Genres.GenreName = 'Historical') AND (Publishers.PublisherName = 'Image Comics' OR Publishers.PublisherName = 'Dark Horse Comics');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $200 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $200 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 200000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 200000000;",
    "prompt_token_number": 547,
    "response_token_number": 82
},
{
    "id": 33432,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['username', 'user_id', 'email', 'john_doe', 'jane_doe', 'sarah_smith', 'tom_wilson', 'robert_king', 'alice_smith', 'jack_smith', 'jane_smith', 'mary_jones', 'joe_brown', 'james_smith', 'jessica_wong', 'david_smith', 'first_name', 'last_name', 'james_wong', 'emily_smith', 'jennifer_wilson', 'subscription', 'date_of_birth'], 'Models': ['created_by', 'model_name', 'description', 'model_id', 'modified_date', 'user_i', 'algorithm', 'project_i', 'Rating', 'Created_date', 'rating', 'creation_date', 'category_id'], 'Model_Evaluation': ['metric_name', 'metric_value', 'model_id']}. \n# the user question is: What are the names of the models that have been evaluated using the 'Precision' metric and have a value greater than 0.85, and were created by 'jane_doe' or 'tom_wilson'?. \n#SQL query: SELECT Models.model_name FROM Models INNER JOIN Model_Evaluation ON Models.model_id = Model_Evaluation.model_id WHERE Models.created_by IN (SELECT user_id FROM Users WHERE username IN ('jane_doe', 'tom_wilson')) AND Model_Evaluation.metric_name = 'Precision' AND Model_Evaluation.metric_value > 0.85;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $150 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $150 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 150000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.targeting_type = 'interest' \nAND Targeting_Options.option_value = 'Travel' \nAND Campaigns.budget > 150000000;",
    "prompt_token_number": 602,
    "response_token_number": 106
},
{
    "id": 33433,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Mobile_Apps': ['mobile_app_id', 'category', 'name', 'title', 'downloads', 'available_on_apple_app_store', 'available_on_google_play', 'available_on_ios', 'available_on_android']}. \n# the user question is: Retrieve the name and category of all mobile apps that have at least one ad placement for a campaign with a budget greater than $8 million and target users in the United States:. \n#SQL query: SELECT Mobile_Apps.name, Mobile_Apps.category FROM Mobile_Apps JOIN Ad_Placements ON Mobile_Apps.mobile_app_id = Ad_Placements.mobile_app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'location' AND Targeting_Options.option_value = 'United States' AND Campaigns.budget > 8000000 AND Campaigns.status = 'active';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $5 billion and have been updated in the last 24000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $5 billion and have been updated in the last 24000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 5000000000 AND Creatives.updated_at BETWEEN DATE('now', '-24000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 5000000000 AND DATEDIFF(CURRENT_DATE, Creatives.updated_at) < 24000;",
    "prompt_token_number": 531,
    "response_token_number": 55
},
{
    "id": 33434,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Films': ['title', 'country', 'rating_id', 'director_id', 'film_id', 'synopsis', 'release_date', 'runtime', 'studio_id', 'composer_id', 'budget', 'box_office', 'imdb_rating', 'rotten_tomatoes_rating', 'mpaa_rating', 'production_company_id', 'oscar_wins', 'rating', 'rottentomatoes_rating', 'genre_id', 'runtime_minutes', 'release_year', 'The Conjuring', 'PG-13'], 'Characters': ['character_id', 'name', 'description', 'category', 'main_actor_id', 'plot_id', 'role', 'gender'], 'Films_Characters': ['character_id', 'film_id'], 'Films_Genres': ['film_id', 'genre_id'], 'Genres': ['genre_id', 'name', 'description'], 'Films_Locations': ['film_id', 'location_id'], 'Locations': ['location_id', 'name', 'description']}. \n# the user question is: Query: Retrieve the names and descriptions of all locations in the database that have been used as settings for at least one horror film that features a child as a central character, along with the number of such films they have been used for, ordered by the number of films in descending order.. \n#SQL query: SELECT Locations.name, Locations.description, COUNT(DISTINCT Films.film_id) AS num_films FROM Locations JOIN Films_Locations ON Locations.location_id = Films_Locations.location_id JOIN Films ON Films_Locations.film_id = Films.film_id JOIN Films_Characters ON Films.film_id = Films_Characters.film_id JOIN Characters ON Films_Characters.character_id = Characters.character_id JOIN Films_Genres ON Films.film_id = Films_Genres.film_id JOIN Genres ON Films_Genres.genre_id = Genres.genre_id WHERE Genres.name = 'Horror' AND Characters.category LIKE '%Child%' GROUP BY Locations.location_id HAVING COUNT(DISTINCT Films.film_id) > 0 ORDER BY num_films DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $100 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $100 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 100000000 GROUP BY Apps.app_id HAVING COUNT(DISTINCT Ad_Placements.ad_placement_id) > 0;",
    "prompt_token_number": 710,
    "response_token_number": 106
},
{
    "id": 33435,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_id', 'name', 'description', 'user_id', 'created_at', 'updated_at', 'Portfolio', 'Website', 'App', 'Social', 'Media', 'Campaign', 'Marketing', 'commerce', 'E', 'status', 'Mobile', 'Redesign', 'Blog', 'Site', 'Graphic', 'Design', 'Development', 'Software', 'Web', 'Brand', 'Strategy', 'end_date', 'start_date', 'Corporate', 'Accounting', 'creator_id', 'category_id', 'completed_at', 'Refresh', 'Launch', 'Product', 'category'], 'Feedbacks': ['feedback_id', 'name', 'description', 'project_id', 'user_id', 'created_at', 'priority', 'title', 'content']}. \n# the user question is: Get the name, description, and number of feedbacks for each project in which the user with id 1 is involved:. \n#SQL query: SELECT Projects.name, Projects.description, COUNT(Feedbacks.feedback_id) AS num_feedbacks FROM Projects LEFT JOIN Feedbacks ON Projects.project_id = Feedbacks.project_id WHERE Projects.user_id = 1 OR Feedbacks.user_id = 1 GROUP BY Projects.project_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Movies\" and have a budget greater than $300 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Movies\" and have a budget greater than $300 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' AND Campaigns.budget > 300000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'Movies' AND Campaigns.budget > 300000000 \nGROUP BY Advertisers.advertiser_id \nHAVING COUNT(Campaigns.campaign_id) >= 1;",
    "prompt_token_number": 474,
    "response_token_number": 105
},
{
    "id": 33436,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'CriminalCase': ['SuspectAge', 'CaseStatus', 'CrimeType', 'CaseID', 'VictimOccupation', 'SuspectID', 'VictimAge', 'ClosureReason'], 'Suspect': ['Diagnosis', 'SuspectID', 'HistoryOfDrugAbuse', 'HistoryOfViolentBehavior', 'CaseID', 'HistoryOfMentalIllness', 'CrimeType', 'ConvictionDate', 'violence_history', 'name', 'age', 'crime_type', 'drug_abuse_history', 'id'], 'Psychologist': ['PsychologistName', 'PsychologistID', 'LicenseState'], 'PsychologicalAssessment': ['CaseID', 'PsychologistID', 'SuspectID', 'SubmittedAsEvidence']}. \n# the user question is: Retrieve the names of all the psychologists who have assessed suspects in cases involving child abuse.. \n#SQL query: SELECT DISTINCT Psychologist.PsychologistName FROM Psychologist JOIN PsychologicalAssessment ON Psychologist.PsychologistID = PsychologicalAssessment.PsychologistID JOIN Suspect ON PsychologicalAssessment.SuspectID = Suspect.SuspectID JOIN CriminalCase ON Suspect.CaseID = CriminalCase.CaseID WHERE CriminalCase.CrimeType = 'Child Abuse';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Books\" and have a budget greater than $250 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Books\" and have a budget greater than $250 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Books' AND Campaigns.budget > 250000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Websites.name, Websites.category FROM Websites \nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.option_value = 'Books' AND Campaigns.status='active' AND Campaigns.budget > 250000000;",
    "prompt_token_number": 547,
    "response_token_number": 88
},
{
    "id": 33437,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_name', 'product_id', 'category_id', 'unit_price', 'supplier_id', 'discontinued', 'price', 'units_in_stock', 'reorder_level', 'cost', 'total_sold', 'total_sales', 'discontinued_date', 'ProductName', 'ProductID', 'Product', 'C', 'B', 'SupplierID', 'CategoryID', 'UnitPrice'], 'Order_Details': ['order_id', 'product_id', 'quantity', 'unit_price', 'order_detail_id', 'cost_price', 'shift_id', 'status', 'customer_rating', 'unit_cost'], 'Suppliers': ['supplier_name', 'supplier_id', 'company_name', 'contact_name', 'email', 'phone', 'SupplierID', 'SupplierName']}. \n# the user question is: Find the average unit price and total revenue for each supplier.. \n#SQL query: SELECT Suppliers.supplier_name, AVG(Products.unit_price) AS avg_unit_price, SUM(Order_Details.unit_price * Order_Details.quantity) AS total_revenue FROM Suppliers INNER JOIN Products ON Suppliers.supplier_id = Products.supplier_id INNER JOIN Order_Details ON Products.product_id = Order_Details.product_id GROUP BY Suppliers.supplier_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $6 billion and have been updated in the last 25000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $6 billion and have been updated in the last 25000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 6000000000 AND Creatives.updated_at BETWEEN DATE('now', '-25000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type \nFROM Creatives \nINNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id \nWHERE Campaigns.budget > 6000000000 \nAND DATEDIFF(NOW(), Creatives.updated_at) < 25000;",
    "prompt_token_number": 451,
    "response_token_number": 59
},
{
    "id": 33438,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']}. \n# the user question is: Find the titles and estimated values of all artwork that were created by \"Pablo Picasso\" and are currently on display at any location.. \n#SQL query: SELECT a.title, a.estimated_value FROM artwork AS a INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id WHERE ar.first_name = 'Pablo' AND ar.last_name = 'Picasso' AND al.on_display IS NOT NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $75 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $75 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 75000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT a.name, a.category \nFROM Apps AS a \nINNER JOIN Ad_Placements AS ap ON a.app_id = ap.app_id \nINNER JOIN Campaigns AS c ON ap.campaign_id = c.campaign_id \nINNER JOIN Targeting_Options AS to ON c.campaign_id = to.campaign_id \nWHERE to.targeting_type = 'Fitness' AND c.status = 'Active' AND c.budget > 75000000;",
    "prompt_token_number": 529,
    "response_token_number": 89
},
{
    "id": 33439,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Ocean_Basins': ['basin_id', 'basin_name', 'depth', 'continent', 'surface_area', 'temperature_range']}. \n# the user question is: Which ocean basins have a depth greater than 8000 meters and are located in the Southern Hemisphere?. \n#SQL query: SELECT basin_name FROM Ocean_Basins WHERE depth > 8000 AND continent = 'Southern Hemisphere';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $400 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $400 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 400000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.AdvertiserID\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'Food' AND c.status = 'active' AND c.budget > 400000000;",
    "prompt_token_number": 304,
    "response_token_number": 71
},
{
    "id": 33441,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Client': ['client_id', 'name', 'email', 'phone_number', 'industry_id', 'location_id', 'industry', 'budget', 'first_name', 'last_name', 'state', 'city', 'company_name', 'annual_revenue'], 'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months']}. \n# the user question is: Retrieve the names of all clients who have sponsored campaigns with a cost of more than $50,000 and whose industries are not Finance or Healthcare:. \n#SQL query: SELECT DISTINCT Client.first_name, Client.last_name FROM Client INNER JOIN Campaign ON Client.client_id = Campaign.client_id WHERE Campaign.cost > 50000 AND Client.industry NOT IN ('Finance', 'Healthcare');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $7 billion and have been updated in the last 26000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $7 billion and have been updated in the last 26000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 7000000000 AND Creatives.updated_at BETWEEN DATE('now', '-26000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 7000000000 AND Creatives.updated_at > DATE_SUB(CURDATE(), INTERVAL 26000 DAY);",
    "prompt_token_number": 424,
    "response_token_number": 56
},
{
    "id": 33442,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Films': ['release_date', 'director_id', 'genre_id', 'title', 'film_id', 'duration'], 'Genres': ['name', 'genre_id'], 'Ratings': ['user_id', 'rating_value', 'film_id', 'review_id']}. \n# the user question is: Retrieve the film titles, release dates, and average ratings for comedy films with an average rating above 4.0:. \n#SQL query: SELECT Films.title, Films.release_date, AVG(Ratings.rating_value) AS average_rating FROM Films JOIN Ratings ON Films.film_id = Ratings.film_id WHERE Films.genre_id = ( SELECT genre_id FROM Genres WHERE name = 'Comedy' ) GROUP BY Films.film_id HAVING average_rating > 4.0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $50 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $50 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'Active' AND Campaigns.budget > 50000000 AND Targeting_Options.targeting_type = 'Travel'\nGROUP BY Apps.app_id HAVING COUNT(Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 437,
    "response_token_number": 109
},
{
    "id": 33443,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'plants': ['name', 'id', 'category_id', 'updated_at', 'created_at', 'description', 'min_temp', 'max_temp', 'water_requirement', 'light_requirement', 'watering_schedule', 'width', 'height', 'flowering', 'min_temp_tolerance', 'max_temp_tolerance', 'category', 'spacing_requirement', 'bloomed', 'water_usage', 'last_watered', 'sun_exposure', 'price', 'plant_date', 'harvest_date', 'bed_id', 'suitable_exposure', 'Rosemary', 'is_edible', 'species', 'plant_name', 'soil_type', 'bloom_time', 'max_height', 'flowering_season', 'plant_type', 'sunlight', 'garden_id', 'soil_ph']}. \n# the user question is: Find the name of the plant that requires the least amount of water.. \n#SQL query: SELECT name FROM plants WHERE water_requirement = ( SELECT MIN(water_requirement) FROM plants );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $500 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $500 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 500000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT A.name, A.contact_email \nFROM Advertisers A \nJOIN Campaigns C ON A.advertiser_id = C.advertiser_id \nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id \nWHERE T.targeting_type = 'Fashion' \nAND C.status = 'Active' \nAND C.budget > 500000000 \nGROUP BY A.advertiser_id;",
    "prompt_token_number": 435,
    "response_token_number": 80
},
{
    "id": 33444,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Devices': ['device_id', 'device_name', 'device_type', 'os', 'webserver', 'user_id', 'office_id', 'model', 'manufacturer', 'last_scanned', 'status', 'added_time', 'last_communication_time', 'os_version', 'snmp_community_string', 'hardware_status', 'firmware_version', 'last_reboot_time', 'last_seen_online_time', 'online_status', 'last_active_timestamp', 'ram_capacity', 'processor_speed', 'free_storage_space', 'location', 'operating_system'], 'Network_Interfaces': ['interface_id', 'device_id', 'interface_name', 'ip_address', 'subnet_mask', 'mac_address', 'default_gateway', 'vlan_tag', 'interface_type', 'bandwidth', 'link_speed', 'ip_address_type', 'mtu', 'dns_server', 'ip_mode', 'vlan_id', 'link_status', 'speed', 'interface_speed', 'status', 'last_activity_time'], 'Network_Devices': ['location', 'ip_address', 'software_version', 'device_id', 'last_activity_time', 'remote_management_enabled', 'vulnerability_scanning_enabled', 'last_scan_time', 'last_patch_update_time', 'last_vulnerability_scan_time', 'last_backup_time', 'last_update_time']}. \n# the user question is: List all network devices that have an interface with a status of \"down\", and list the associated device name, device type, interface name, and status for each interface.. \n#SQL query: SELECT d.device_name, d.device_type, ni.interface_name, ni.status FROM Network_Interfaces ni INNER JOIN Network_Devices nd ON ni.device_id = nd.device_id INNER JOIN Devices d ON nd.device_id = d.device_id WHERE ni.status = 'down';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $100 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $100 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT w.name, w.category \nFROM Websites w \nINNER JOIN Ad_Placements ap ON w.website_id = ap.website_id \nINNER JOIN Campaigns c ON ap.campaign_id = c.campaign_id \nINNER JOIN Targeting_Options to ON c.campaign_id = to.campaign_id \nWHERE to.targeting_type = 'Art' AND c.status = 'Active' AND c.budget > 100000000;",
    "prompt_token_number": 656,
    "response_token_number": 85
},
{
    "id": 33445,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate'], 'Customers': ['CustomerID', 'CustomerName', 'Email', 'CustomerState', 'State', 'JoinDate', 'BillingAddress', 'BillingState', 'ShippingAddress', 'LastName', 'ShippingState', 'Country', 'ShippingCountry'], 'Orders': ['OrderID', 'CustomerID', 'OrderDate', 'TotalCost', 'ShippedDate', 'ShipDate'], 'OrderItems': ['OrderItemID', 'OrderID', 'IssueID', 'Quantity', 'ShippedDate']}. \n# the user question is: Find all customers who have placed orders for issues with a total value over $100.00:. \n#SQL query: SELECT Customers.CustomerName FROM Customers JOIN Orders ON Customers.CustomerID = Orders.CustomerID JOIN OrderItems ON Orders.OrderID = OrderItems.OrderID JOIN Issues ON OrderItems.IssueID = Issues.IssueID GROUP BY Orders.OrderID HAVING SUM(OrderItems.Quantity * Issues.CoverPrice) > 100.00;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $8 billion and have been updated in the last 27000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $8 billion and have been updated in the last 27000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 8000000000 AND Creatives.updated_at BETWEEN DATE('now', '-27000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type \nFROM Creatives \nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id \nWHERE Campaigns.budget > 8000000000 AND DATEDIFF(CURRENT_DATE, Creatives.updated_at) <= 27000;",
    "prompt_token_number": 489,
    "response_token_number": 58
},
{
    "id": 33446,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_release_date', 'product_description', 'product_name', 'product_price', 'product_id', 'product_stock', 'product_length', 'product_weight', 'category_id', 'ProductName', 'Price', 'ProductID', 'CategoryID'], 'Sales': ['client_id', 'sale_date', 'product_id', 'sale_price']}. \n# the user question is: Retrieve the name and price of each product that has ever been sold, along with the date of its first sale:. \n#SQL query: SELECT Products.product_name, Products.product_price, MIN(Sales.sale_date) AS first_sale_date FROM Products JOIN Sales ON Products.product_id = Sales.product_id GROUP BY Products.product_name, Products.product_price;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $60 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $60 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 60000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.targeting_type = 'Gaming' \nAND Campaigns.budget > 60000000 \nGROUP BY Apps.name, Apps.category;",
    "prompt_token_number": 428,
    "response_token_number": 101
},
{
    "id": 33447,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'loan': ['return_date', 'loan_date', 'artwork_id', 'lender_id', 'location_id', 'start_date', 'artwork_location_id'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']}. \n# the user question is: Find the titles and mediums of all artwork in the \"The Museum of Modern Art\" that were created by \"Andy Warhol\" and are not currently on loan.. \n#SQL query: SELECT a.title, a.medium FROM artwork AS a INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS l ON al.location_id = l.location_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id WHERE ar.first_name = 'Andy' AND ar.last_name = 'Warhol' AND l.name = 'The Museum of Modern Art' AND al.end_date IS NULL AND a.artwork_id NOT IN (SELECT artwork_id FROM loan WHERE return_date IS NULL);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $1 billion:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $1 billion:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 1000000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT a.name, a.contact_email \nFROM Advertisers AS a \nINNER JOIN Campaigns AS c ON a.advertiser_id = c.advertiser_id \nINNER JOIN Targeting_Options AS t ON c.campaign_id = t.campaign_id \nWHERE c.status = 'active' AND t.targeting_type = 'Music' AND c.budget > 1000000000;",
    "prompt_token_number": 666,
    "response_token_number": 77
},
{
    "id": 33448,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Authors': ['first_name', 'author_id', 'last_name', 'nationality', 'author_name', 'author_city', 'AuthorID', 'AuthorName'], 'Order_Items': ['price', 'quantity', 'order_id', 'book_id', 'customer_id', 'publisher_id', 'is_returned', 'product_id', 'is_delivered', 'total_price', 'order_date'], 'Orders': ['order_date', 'order_id', 'customer_id', 'coupon_code', 'total_cost', 'total_quantity', 'shipping_address_id', 'total_price', 'total_amount', 'salesperson_id', 'book_id', 'channel_id', 'Order_Date', 'Order_Total', 'Customer_Name'], 'Coupon_Order_Mapping': ['order_id', 'coupon_id'], 'Coupons': ['discount_percentage', 'coupon_id', 'coupon_code', 'discount']}. \n# the user question is: Retrieve the titles and authors of books that have not been ordered by customers who have used a coupon with a discount of at least 15%.. \n#SQL query: SELECT b.title, CONCAT(a.first_name, ' ', a.last_name) AS author FROM Books b JOIN Authors a ON b.author_id = a.author_id WHERE b.book_id NOT IN ( SELECT oi.book_id FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id JOIN Coupon_Order_Mapping com ON o.order_id = com.order_id JOIN Coupons c ON com.coupon_id = c.coupon_id WHERE c.discount_percentage >= 15 ) GROUP BY b.book_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Cooking\" and have a budget greater than $80 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Cooking\" and have a budget greater than $80 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Cooking' AND Campaigns.budget > 80000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT w.name, w.category \nFROM Websites w \nJOIN Ad_Placements ap ON w.website_id = ap.website_id \nJOIN Campaigns c ON ap.campaign_id = c.campaign_id \nJOIN Targeting_Options to ON c.campaign_id = to.campaign_id \nWHERE c.status = 'Active' AND to.option_value = 'Cooking' AND c.budget > 80000000\nGROUP BY w.website_id;",
    "prompt_token_number": 709,
    "response_token_number": 88
},
{
    "id": 33450,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'orders': ['total_amount', 'customer_id', 'quantity', 'product_id', 'product_name', 'sales_revenue', 'order_date', 'amount', 'status']}. \n# the user question is: What is the total revenue generated from sales of product A in the last year. \n#SQL query: SELECT SUM(sales_revenue) FROM orders WHERE product_name = 'A' AND order_date >= '20220101' AND order_date <= '20221231';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $75 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $75 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 75000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.targeting_type = 'Sports' \nAND Campaigns.budget > 75000000 \nGROUP BY Apps.name, Apps.category \nHAVING COUNT(Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 377,
    "response_token_number": 115
},
{
    "id": 33451,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Websites': ['website_id', 'user_id', 'url', 'created_at', 'updated_at', 'name', 'domain_id', 'domain_authority_score', 'domain_created_at'], 'Pages': ['page_id', 'website_id', 'url', 'title', 'description', 'content', 'created_at', 'updated_at', 'meta_description', 'meta_keywords', 'meta_title', 'h1_tag', 'h2_tag', 'title_tag', 'canonical_url', 'description_tag', 'header_tag', 'meta_tag', 'meta_keyword', 'h1', 'heading', 'header', 'word_count', 'time_on_page', 'total_words', 'http_status_code', 'user_id', 'last_modified_date', '[website_id]'], 'Page_Stats': ['page_stat_id', 'page_id', 'visits', 'bounce_rate', 'time_on_page', 'created_at', 'updated_at', 'organic_traffic', 'load_time', 'page_speed_score', 'total_images', 'total_videos', 'page_authority_score', 'domain_authority_score', 'page_load_time', 'backlinks', 'search_query', 'search_volume']}. \n# the user question is: Retrieve the names and URLs of all websites that have at least one page with a time on page greater than or equal to 480 seconds and a bounce rate less than or equal to 0.005:. \n#SQL query: SELECT DISTINCT Websites.name, Websites.url FROM Websites INNER JOIN Pages ON Websites.website_id = Pages.website_id INNER JOIN Page_Stats ON Pages.page_id = Page_Stats.page_id WHERE Page_Stats.time_on_page >= 480 AND Page_Stats.bounce_rate <= 0.005;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $500 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $500 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 500000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT Advertisers.name, Advertisers.contact_email FROM Advertisers INNER JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id INNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 500000000;",
    "prompt_token_number": 576,
    "response_token_number": 80
},
{
    "id": 33453,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Insurance': ['insurance_provider', 'patient_id', 'policy_number', 'insurance_id', 'insurance_provider_id', 'coverage_type_id'], 'Insurance_Provider': ['insurance_provider_name', 'insurance_provider_id'], 'Appointment': ['chiropractor_id', 'patient_id', 'appointment_date_time', 'appointment_id', 'insurance_id'], 'Diagnosis': ['diagnosis_name', 'appointment_id', 'diagnosis_description', 'body_part_id', 'diagnosis_id', 'body_part']}. \n# the user question is: Find the number of appointments that were paid for by UnitedHealthcare insurance and had a diagnosis of 'Back Pain':. \n#SQL query: SELECT COUNT(*) AS num_appointments FROM Appointment a INNER JOIN Insurance i ON a.insurance_id = i.insurance_id INNER JOIN Insurance_Provider ip ON i.insurance_provider_id = ip.insurance_provider_id INNER JOIN Diagnosis d ON a.appointment_id = d.appointment_id WHERE ip.insurance_provider_name = 'UnitedHealthcare' AND d.diagnosis_name = 'Back Pain';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $10 billion and have been updated in the last 29000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $10 billion and have been updated in the last 29000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 10000000000 AND Creatives.updated_at BETWEEN DATE('now', '-29000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT c.name, c.type FROM Creatives c INNER JOIN Campaigns cp ON c.campaign_id = cp.campaign_id WHERE cp.budget > 10000000000 AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 29000 DAY);",
    "prompt_token_number": 416,
    "response_token_number": 52
},
{
    "id": 33454,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Volume': ['series_id', 'id', 'title', 'publisher_id', 'issue_count', 'volume_id', 'publication_date', 'publication_year', 'release_date', 'price', 'format'], 'Series': ['publisher_id', 'title', 'id', 'universe', 'start_date', 'main_protagonist_id', 'rating'], 'Publisher': ['name', 'id', 'country', 'Image', 'Comics'], 'Creator': ['name', 'id', 'Lee', 'Jim', 'Fabry', 'Glenn', 'McKean'], 'Creator_Appearance': ['creator_id', 'issue_id', 'series_id', 'role', 'volume_id']}. \n# the user question is: Find the names of all publishers that have published issues that have been illustrated by Neal Adams.. \n#SQL query: SELECT DISTINCT p.name FROM Publisher p JOIN Series s ON p.id = s.publisher_id JOIN Volume v ON s.id = v.series_id JOIN Issue i ON v.id = i.volume_id JOIN Creator_Appearance ca ON i.id = ca.issue_id JOIN Creator c ON ca.creator_id = c.id AND c.name = 'Neal Adams';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $100 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $100 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT a.name, a.category \nFROM Apps a \nJOIN Ad_Placements ap ON a.app_id = ap.app_id \nJOIN Campaigns c ON ap.campaign_id = c.campaign_id \nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id \nWHERE t.targeting_type = 'Fashion' AND c.status = 'active' AND c.budget > 100000000;",
    "prompt_token_number": 588,
    "response_token_number": 83
},
{
    "id": 33455,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'therapists': ['first_name', 'last_name', 'therapist_id', 'cnt', 'gender', 'is_available', 'specialty', 'last_login_date', 'session_count'], 'appointments': ['appointment_id', 'therapist_id', 'appointment_date', 'patient_id', 'end_time', 'start_time', 'session_duration_minutes', 'session_cost', 'satisfaction_rating', 'is_missed', 'sessions_per_week', 'session_length_minutes', 'start_date', 'attended', 'end_date', 'therapy_id'], 'patients': ['email', 'phone_number', 'last_name', 'patient_id', 'first_name', 'date_of_birth', 'gender', 'birthdate', 'start_date', 'session_count', 'age', 'therapy_start_date', 'birth_date']}. \n# the user question is: Retrieve the names of patients who have an appointment scheduled with therapist Michael Davis.. \n#SQL query: SELECT p.first_name || ' ' || p.last_name AS patient_name FROM patients p JOIN appointments a ON a.patient_id = p.patient_id JOIN therapists t ON t.therapist_id = a.therapist_id WHERE t.first_name || ' ' || t.last_name = 'Michael Davis';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $250 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $250 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 250000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT a.name, a.contact_email \nFROM Advertisers a \nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id \nJOIN Targeting_Options t ON t.campaign_id = c.campaign_id \nWHERE c.status = 'active' AND t.targeting_type = 'Travel' AND c.budget > 250000000 \nGROUP BY a.name, a.contact_email \nHAVING COUNT(campaign_id) > 0;",
    "prompt_token_number": 473,
    "response_token_number": 91
},
{
    "id": 33456,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'task_assignments': ['updated_at', 'task_id', 'created_at', 'assigned_to', 'due_date', 'garden_id', 'completed_at', 'id', 'garden_plant_id', 'status', 'task_type', 'plant_variety_id'], 'tasks': ['name', 'id', 'updated_at', 'description', 'created_at', 'garden_id', 'due_date', 'type', 'priority'], 'task_logs': ['task_assignment_id', 'created_at', 'status']}. \n# the user question is: Find all the tasks that have been completed in the last day.. \n#SQL query: SELECT DISTINCT tasks.type FROM tasks JOIN task_assignments ON tasks.id = task_assignments.task_id JOIN task_logs ON task_assignments.id = task_logs.task_assignment_id WHERE task_assignments.status = 'Completed' AND task_logs.created_at > DATE('now', '-1 day');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $70 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $70 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 70000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Websites.name, Websites.category \nFROM Websites \nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.targeting_type = 'Food' AND Campaigns.status = 'Active' AND Campaigns.budget > 70000000;",
    "prompt_token_number": 474,
    "response_token_number": 91
},
{
    "id": 33457,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Volume': ['series_id', 'id', 'title', 'publisher_id', 'issue_count', 'volume_id', 'publication_date', 'publication_year', 'release_date', 'price', 'format'], 'Series': ['publisher_id', 'title', 'id', 'universe', 'start_date', 'main_protagonist_id', 'rating'], 'Review': ['rating', 'issue_id', 'id', 'user_id'], 'User': ['username', 'id'], 'User_Review': ['user_id', 'review_id', 'id']}. \n# the user question is: Find the names of all users who have given a rating of 4 or higher to all issues in the 'The Walking Dead' series.. \n#SQL query: SELECT DISTINCT User.username FROM User JOIN User_Review ur ON User.id = ur.user_id JOIN Review r ON ur.review_id = r.id JOIN Issue i ON r.issue_id = i.id JOIN Volume v ON i.volume_id = v.id JOIN Series s ON v.series_id = s.id AND s.title = 'The Walking Dead' WHERE r.rating >= 4 GROUP BY User.id HAVING COUNT(*) = ( SELECT COUNT(*) FROM Issue JOIN Volume ON Issue.volume_id = Volume.id JOIN Series ON Volume.series_id = Series.id AND Series.title = 'The Walking Dead' );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $12 billion and have been updated in the last 30000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $12 billion and have been updated in the last 30000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 12000000000 AND Creatives.updated_at BETWEEN DATE('now', '-30000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 12000000000 AND DATEDIFF(CURDATE(), Creatives.updated_at) <= 30000;",
    "prompt_token_number": 538,
    "response_token_number": 55
},
{
    "id": 33458,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']}. \n# the user question is: Find the users who have enrolled in more than one class in the last week.. \n#SQL query: SELECT Users.username, COUNT(*) as num_enrollments FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id WHERE Classes.start_time >= date('now', '-7 days') GROUP BY Users.user_id HAVING COUNT(*) > 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $150 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $150 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 150000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nINNER JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.status = 'active' \nAND Targeting_Options.targeting_type = 'Music' \nAND Campaigns.budget > 150000000\nGROUP BY Apps.name, Apps.category\nHAVING COUNT(DISTINCT Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 616,
    "response_token_number": 120
},
{
    "id": 33459,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'appointments': ['appointment_id', 'therapist_id', 'appointment_date', 'patient_id', 'end_time', 'start_time', 'session_duration_minutes', 'session_cost', 'satisfaction_rating', 'is_missed', 'sessions_per_week', 'session_length_minutes', 'start_date', 'attended', 'end_date', 'therapy_id'], 'patients': ['email', 'phone_number', 'last_name', 'patient_id', 'first_name', 'date_of_birth', 'gender', 'birthdate', 'start_date', 'session_count', 'age', 'therapy_start_date', 'birth_date'], 'payments': ['payment_id', 'payment_date', 'patient_id', 'payment_amount', 'appointment_count', 'therapist_id', 'appointment_id', 'price']}. \n# the user question is: Retrieve the names of the patients who have not paid for any sessions in the past month.. \n#SQL query: SELECT DISTINCT p.first_name || ' ' || p.last_name AS patient_name FROM patients p JOIN appointments a ON a.patient_id = p.patient_id AND a.appointment_date >= DATE('now', '-1 month') LEFT JOIN payments pay ON pay.patient_id = p.patient_id AND pay.payment_date >= DATE('now', '-1 month') WHERE pay.payment_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fitness\" and have a budget greater than $200 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fitness\" and have a budget greater than $200 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 200000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'Fitness' AND c.status = 'active' AND c.budget > 200000000;",
    "prompt_token_number": 486,
    "response_token_number": 68
},
{
    "id": 33460,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'invoices': ['customer_id', 'total', 'invoice_date', 'vendor_id', 'payment_status', 'due_date', 'salesperson_id', 'billing_country', 'invoice_id', 'amount', 'payment_date', 'total_amount']}. \n# the user question is: Find the number of customers who have placed an order in each year since 2015:. \n#SQL query: SELECT strftime('%Y', i.invoice_date) as year, COUNT(DISTINCT i.customer_id) as total_customers FROM invoices i WHERE i.invoice_date >= '2015-01-01' GROUP BY year\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $80 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $80 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 80000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT w.name, w.category \nFROM Websites w \nJOIN Ad_Placements ap ON w.website_id = ap.website_id \nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options to ON c.campaign_id = to.campaign_id\nWHERE to.option_value = 'Art'\nAND c.status = 'Active'\nAND c.budget > 80000000\nGROUP BY w.name, w.category\nHAVING COUNT(ap.ad_placement_id) >= 1",
    "prompt_token_number": 408,
    "response_token_number": 100
},
{
    "id": 33461,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Programs': ['program_id', 'program_name', 'program_description', 'start_date', 'end_date', 'status', 'Program'], 'Enrollments': ['enrollment_id', 'user_id', 'program_id', 'enrollment_date', 'enrollment_status'], 'User_Workouts': ['workout_id', 'date_completed', 'user_id', 'calories_burned', 'program_id', 'duration', 'date_scheduled', 'avg_heart_rate', 'workout_date', 'workout_status', 'workout_duration']}. \n# the user question is: Find the names and email addresses of all users who have enrolled in the program with ID 5 but have not completed any workouts:. \n#SQL query: SELECT Users.first_name, Users.last_name, Users.email FROM Users JOIN Enrollments ON Users.user_id = Enrollments.user_id JOIN Programs ON Enrollments.program_id = Programs.program_id LEFT JOIN User_Workouts ON Users.user_id = User_Workouts.user_id AND User_Workouts.date_completed IS NOT NULL WHERE Programs.program_id = 5 AND User_Workouts.workout_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $15 billion and have been updated in the last 31000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $15 billion and have been updated in the last 31000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 15000000000 AND Creatives.updated_at BETWEEN DATE('now', '-31000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 15000000000 AND Creatives.updated_at >= DATE(NOW()) - INTERVAL 31000 DAY;",
    "prompt_token_number": 476,
    "response_token_number": 54
},
{
    "id": 33462,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']}. \n# the user question is: List the names of all customers who have placed an order for a product that is currently out of stock and has a discount of 50% or more.. \n#SQL query: SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Discount >= 0.5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $50 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $50 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT a.name, a.category \nFROM Apps a \nINNER JOIN Ad_Placements ap ON a.app_id = ap.app_id \nINNER JOIN Campaigns c ON ap.campaign_id = c.campaign_id AND c.status = 'active' AND c.budget > 50000000\nINNER JOIN Targeting_Options to ON c.campaign_id = to.campaign_id AND to.targeting_type = 'user_interest' AND to.option_value = 'Technology';",
    "prompt_token_number": 596,
    "response_token_number": 93
},
{
    "id": 33463,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Event': ['event_id', 'event_name', 'event_date', 'location_id', 'event_category_id', 'event_type_id', 'location', 'venue_id', 'start_date', 'end_date', 'category', 'event_code', 'EVT', 'organizer_id', 'duration', 'name', 'Expo', 'Tech', 'country', 'category_id', 'city', 'ticket_price', 'date', 'start_time', 'end_time', 'min_age_requirement', 'event_type', 'capacity', 'registration_deadline', 'num_attendees', 'min_age', 'duration_hours', 'registration_fee', 'price'], 'Attendee': ['attendee_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'date_of_birth', 'job_title', 'city', 'age', 'email'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID']}. \n# the user question is: What is the name and email address of the attendee who has registered for the most events in the year 2025?. \n#SQL query: SELECT Attendee.first_name, Attendee.last_name, Attendee.email_address FROM Attendee INNER JOIN Registration ON Attendee.attendee_id = Registration.attendee_id INNER JOIN Event ON Registration.event_id = Event.event_id WHERE strftime('%Y', Event.event_date) = '2025' GROUP BY Attendee.attendee_id ORDER BY COUNT(DISTINCT Event.event_id) DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Cooking\" and have a budget greater than $300 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Cooking\" and have a budget greater than $300 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Cooking' AND Campaigns.budget > 300000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nINNER JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.targeting_type = 'interest' \nAND Targeting_Options.option_value = 'Cooking' \nAND Campaigns.budget > 300000000 \nGROUP BY Advertisers.advertiser_id;",
    "prompt_token_number": 576,
    "response_token_number": 107
},
{
    "id": 33464,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Publisher': ['publisher_id', 'name', 'address', 'phone_number', 'publisher_name', 'HarperCollins', 'id'], 'Book': ['book_id', 'title', 'isbn', 'publisher_id', 'publication_date', 'rating', 'price', 'publication_year', 'author_id', 'publisher', 'author', 'weight', 'author_gender', 'language', 'author_name', 'book_title', 'format_id', 'page_count', 'id', 'num_pages'], 'Order': ['order_id', 'customer_id', 'order_date', 'status', 'store_id', 'date', 'total_amount', 'total_cost', 'total_price'], 'Order_Item': ['order_id', 'book_id', 'quantity', 'price', 'store_id', 'order_date', 'customer_id', 'unit_price', 'inventory_id', 'date', 'order_item_date'], 'Customer': ['customer_id', 'first_name', 'last_name', 'email', 'address', 'phone_number', 'zip_code', 'country_id'], 'Store_Inventory': ['store_id', 'book_id', 'quantity', 'inventory_id', 'quantity_available']}. \n# the user question is: Find the name and email address of the customer who has spent the most money on books published by Penguin Random House.. \n#SQL query: SELECT Customer.first_name || ' ' || Customer.last_name AS customer_name, Customer.email FROM Customer JOIN Order ON Customer.customer_id = Order.customer_id JOIN Order_Item ON Order.order_id = Order_Item.order_id JOIN Store_Inventory ON Order_Item.book_id = Store_Inventory.book_id JOIN Book ON Store_Inventory.book_id = Book.book_id JOIN Publisher ON Book.publisher_id = Publisher.publisher_id WHERE Publisher.name = 'Penguin Random House' GROUP BY Customer.customer_id ORDER BY SUM(Order_Item.quantity * Order_Item.price) DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $10 billion and have been updated in the last 32000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $10 billion and have been updated in the last 32000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 10000000000 AND Creatives.updated_at BETWEEN DATE('now', '-32000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 10000000000 AND Creatives.updated_at >= DATE(CURRENT_DATE - INTERVAL 32000 DAY);",
    "prompt_token_number": 588,
    "response_token_number": 54
},
{
    "id": 33465,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_id', 'project_name', 'project_type', 'budget', 'end_date', 'due_date', 'deadline', 'completion_date', 'start_date', 'department_id']}. \n# the user question is: Find the total budget for all projects that are currently underway.. \n#SQL query: SELECT SUM(p.budget) AS total_budget FROM Projects p WHERE p.completion_date IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $20 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $20 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 20000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT a.name, a.category \nFROM Apps a \nJOIN Ad_Placements ap ON a.app_id = ap.app_id \nJOIN Campaigns c ON ap.campaign_id = c.campaign_id \nJOIN Targeting_Options to ON c.campaign_id = to.campaign_id \nWHERE to.targeting_type = 'Travel' \nAND c.status = 'active' \nAND c.budget > 20000000;",
    "prompt_token_number": 363,
    "response_token_number": 84
},
{
    "id": 33466,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Series': ['SeriesID', 'SeriesTitle', 'PublisherID', 'AverageCoverPrice', 'AverageIssueRating', 'SeriesName'], 'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate'], 'Genres': ['GenreID', 'GenreName'], 'IssueGenres': ['IssueGenreID', 'IssueID', 'GenreID', 'SeriesID'], 'Ratings': ['RatingID', 'RatingName'], 'IssueRatings': ['IssueRatingID', 'IssueID', 'RatingID', 'Rating', 'CustomerID']}. \n# the user question is: Find all series that have published issues with a cover price greater than $4.00, a rating of 'Teen', and a science fiction or superhero genre:. \n#SQL query: SELECT DISTINCT Series.SeriesTitle FROM Series JOIN Issues ON Series.SeriesID = Issues.SeriesID JOIN IssueGenres ON Issues.IssueID = IssueGenres.IssueID JOIN Genres ON IssueGenres.GenreID = Genres.GenreID JOIN IssueRatings ON Issues.IssueID = IssueRatings.IssueID JOIN Ratings ON IssueRatings.RatingID = Ratings.RatingID WHERE Issues.CoverPrice > 4.00 AND Genres.GenreName IN ('Science Fiction', 'Superhero') AND Ratings.RatingName = 'Teen';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $150 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $150 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 150000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 150000000;",
    "prompt_token_number": 562,
    "response_token_number": 82
},
{
    "id": 33467,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Recipients': ['name', 'email', 'campaign_id', 'status', 'recipient_id', 'segment_id', 'list_id', 'last_opened_at', 'city', 'country', 'state', 'last_clicked_at', 'created_at', 'subscribed_at'], 'Campaigns': ['name', 'campaign_id', 'limited', 'Sale', 't', 'our', 'miss', 'content', 'subject', 'user_id', 'segment_id', 'list_id', 'workflow_id', 'email_template_id', 'scheduled_at', 'created_at', 'sent_at'], 'Campaign_Stats': ['opens', 'campaign_id', 'created_at', 'clicks', 'clicked_at', 'opened_at', 'recipient_id', 'click_id', 'open_id', 'bounce_id', 'bounces', 'marked_as_spam', 'complaints', 'segment_id'], 'Segments': ['updated_at', 'user_id', 'created_at', 'name', 'filter_expression', 'segment_id', 'criteria', 'num_recipients']}. \n# the user question is: Retrieve the number of recipients who have opened any campaign from User ID 25 in the last 7 days and are in the \"VIP Customers\" segment, grouped by state and sorted by most opens first.. \n#SQL query: SELECT r.state, COUNT(DISTINCT r.email) as opens FROM Recipients r JOIN Segments s ON r.segment_id = s.segment_id JOIN Campaigns c ON r.campaign_id = c.campaign_id JOIN Campaign_Stats cs ON c.campaign_id = cs.campaign_id WHERE c.user_id = 25 AND s.name = 'VIP Customers' AND cs.opens > 0 AND cs.created_at > DATEADD(day, -7, GETDATE()) GROUP BY r.state ORDER BY opens DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $60 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $60 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 60000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options to ON c.campaign_id = to.campaign_id WHERE c.status = 'active' AND to.option_value = 'Gaming' AND c.budget > 60000000 GROUP BY w.name, w.category;",
    "prompt_token_number": 661,
    "response_token_number": 84
},
{
    "id": 33468,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Attendee': ['attendee_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'date_of_birth', 'job_title', 'city', 'age', 'email'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID']}. \n# the user question is: What is the name of the attendee who has registered for the most number of events?. \n#SQL query: SELECT Attendee.first_name, Attendee.last_name FROM Attendee INNER JOIN Registration ON Attendee.attendee_id = Registration.attendee_id GROUP BY Attendee.attendee_id ORDER BY COUNT(DISTINCT Registration.event_id) DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $8 billion and have been updated in the last 30000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $8 billion and have been updated in the last 30000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 8000000000 AND Creatives.updated_at BETWEEN DATE('now', '-30000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 8000000000 AND Creatives.updated_at >= NOW() - INTERVAL 30000 DAY;",
    "prompt_token_number": 381,
    "response_token_number": 53
},
{
    "id": 33469,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Marine_Mammals': ['mammal_id', 'mammal_name', 'species', 'habitat', 'conservation_status', 'continent', 'swim_speed', 'species_name', 'swimming_speed']}. \n# the user question is: Which marine mammals in the Marine_Mammals table have a habitat of Polar Ice and are classified as Least Concern or Near Threatened?. \n#SQL query: SELECT mammal_name FROM Marine_Mammals WHERE habitat = 'Polar Ice' AND conservation_status IN ('Least Concern', 'Near Threatened');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $30 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $30 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 30000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.targeting_type = 'Fitness' \nAND Campaigns.budget > 30000000;",
    "prompt_token_number": 395,
    "response_token_number": 92
},
{
    "id": 33470,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email'], 'UserRoles': ['user_id', 'role_id', 'user_role_id'], 'Roles': ['role_name', 'role_id']}. \n# the user question is: Example 1: Retrieve the usernames and email addresses of users who have the same role as the user with username 'admin', excluding the user 'admin' itself.. \n#SQL query: SELECT U.username, U.email FROM Users U INNER JOIN UserRoles UR ON U.user_id = UR.user_id INNER JOIN Roles R ON UR.role_id = R.role_id WHERE R.role_id IN ( SELECT UR2.role_id FROM Users U2 INNER JOIN UserRoles UR2 ON U2.user_id = UR2.user_id WHERE U2.username = 'admin' ) AND U.username != 'admin';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $200 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $200 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 200000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT A.name, A.contact_email \nFROM Advertisers A \nINNER JOIN Campaigns C ON A.advertiser_id = C.advertiser_id \nINNER JOIN Targeting_Options T ON C.campaign_id = T.campaign_id \nWHERE C.status = 'active' AND T.targeting_type = 'Music' AND C.budget > 200000000 \nGROUP BY A.name, A.contact_email \nHAVING COUNT(C.campaign_id) >= 1;",
    "prompt_token_number": 387,
    "response_token_number": 94
},
{
    "id": 33471,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Show': ['rating', 'year', 'title', 'show_id', 'genre_id', 'studio_id', 'release_year', 'country_id', 'network_id', 'director_id', 'air_year', 'release_date', 'genre', 'status', 'production_type', 'producer_id', 'start_year', 'end_year'], 'User_Rating': ['show_id', 'user_id', 'episode_id', 'rating', 'country_id', 'genre_id', 'season_id', 'season_number', 'imdb_rating', 'rotten_tomatoes_rating']}. \n# the user question is: List the TV shows that have not been rated by any user.. \n#SQL query: SELECT DISTINCT Show.title FROM Show WHERE Show.show_id NOT IN ( SELECT DISTINCT User_Rating.show_id FROM User_Rating );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $75 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $75 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 75000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Websites.name, Websites.category \nFROM Websites \nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.targeting_type = 'Food' \nAND Campaigns.status = 'active' \nAND Campaigns.budget > 75000000;",
    "prompt_token_number": 453,
    "response_token_number": 93
},
{
    "id": 33472,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'john_doe', 'jane_smith', 'mike_jones'], 'Projects': ['user_id', 'Project', 'project_name', 'project_id', 'created_date'], 'Instances': ['project_id', 'instance_name', 'launch_date', 'storage_id', 'user_id', 'instance_id', 'instance_type', 'region_id', 'zone_id', 'cpu_usage', 'memory_usage', 'availability_zone', 'storage_usage', 'network_bandwidth', 'status', 'cpu_count']}. \n# the user question is: Text Query: Find the project names and their respective owners for projects that have instances with a status of \"running\" and storage usage exceeding 500 GB.. \n#SQL query: SELECT Projects.project_name, Users.username FROM Projects INNER JOIN Users ON Projects.user_id = Users.user_id INNER JOIN Instances ON Projects.project_id = Instances.project_id WHERE Instances.status = 'running' AND Instances.storage_usage > 500;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $12 billion and have been updated in the last 28000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $12 billion and have been updated in the last 28000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 12000000000 AND Creatives.updated_at BETWEEN DATE('now', '-28000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 12000000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 28000 DAY);",
    "prompt_token_number": 408,
    "response_token_number": 56
},
{
    "id": 33473,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {}. \n# the user question is: Get the total number of cases that have been opened and closed, as well as the average duration between opening and closing for all cases.. \n#SQL query: SELECT COUNT(CASE WHEN status = 'open' THEN 1 END) as open_cases, COUNT(CASE WHEN status = 'closed' THEN 1 END) as closed_cases, AVG(strftime('%s', date_closed) - strftime('%s', date_opened)) as avg_duration FROM Cases;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Politics\" and have a budget greater than $300 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Politics\" and have a budget greater than $300 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Politics' AND Campaigns.budget > 300000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT a.name, a.contact_email \nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \nAND t.targeting_type = 'Politics' \nAND c.budget > 300000000\nGROUP BY a.advertiser_id\nHAVING COUNT(c.campaign_id) >= 1;",
    "prompt_token_number": 320,
    "response_token_number": 92
},
{
    "id": 33474,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Websites': ['website_id', 'user_id', 'url', 'created_at', 'updated_at', 'name', 'domain_id', 'domain_authority_score', 'domain_created_at'], 'Backlinks': ['backlink_id', 'website_id', 'source_url', 'target_url', 'anchor_text', 'created_at', 'link_type', 'target_page_id', 'link_id']}. \n# the user question is: Retrieve the number of backlinks for each website, grouped by user ID:. \n#SQL query: SELECT Websites.user_id, COUNT(*) AS num_backlinks FROM Websites INNER JOIN Backlinks ON Websites.website_id = Backlinks.website_id GROUP BY Websites.user_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $90 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $90 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 90000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'Sports' AND Campaigns.budget > 90000000 \nGROUP BY Websites.name, Websites.category \nHAVING COUNT(Ad_Placements.ad_placement_id) > 0;",
    "prompt_token_number": 426,
    "response_token_number": 116
},
{
    "id": 33475,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Websites': ['website_id', 'user_id', 'url', 'created_at', 'updated_at', 'name', 'domain_id', 'domain_authority_score', 'domain_created_at'], 'Pages': ['page_id', 'website_id', 'url', 'title', 'description', 'content', 'created_at', 'updated_at', 'meta_description', 'meta_keywords', 'meta_title', 'h1_tag', 'h2_tag', 'title_tag', 'canonical_url', 'description_tag', 'header_tag', 'meta_tag', 'meta_keyword', 'h1', 'heading', 'header', 'word_count', 'time_on_page', 'total_words', 'http_status_code', 'user_id', 'last_modified_date', '[website_id]'], 'Page_Stats': ['page_stat_id', 'page_id', 'visits', 'bounce_rate', 'time_on_page', 'created_at', 'updated_at', 'organic_traffic', 'load_time', 'page_speed_score', 'total_images', 'total_videos', 'page_authority_score', 'domain_authority_score', 'page_load_time', 'backlinks', 'search_query', 'search_volume']}. \n# the user question is: Retrieve the names and URLs of all websites that have at least one page with a time on page greater than or equal to 1080 seconds and a bounce rate less than or equal to 0.0000001:. \n#SQL query: SELECT DISTINCT Websites.name, Websites.url FROM Websites INNER JOIN Pages ON Websites.website_id = Pages.website_id INNER JOIN Page_Stats ON Pages.page_id = Page_Stats.page_id WHERE Page_Stats.time_on_page >= 1080 AND Page_Stats.bounce_rate <= 0.0000001;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $15 billion and have been updated in the last 25000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $15 billion and have been updated in the last 25000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 15000000000 AND Creatives.updated_at BETWEEN DATE('now', '-25000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT DISTINCT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 15000000000 AND DATEDIFF(CURRENT_DATE, Creatives.updated_at) <= 25000;",
    "prompt_token_number": 562,
    "response_token_number": 57
},
{
    "id": 33476,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Dance': ['name', 'tempo', 'style', 'id', 'choreographer_id', 'type', 'dance_class_id'], 'Dancer': ['experience', 'height', 'name', 'gender', 'level', 'age', 'id', 'country', 'dancer_id', 'PerformanceID', 'DancerID'], 'DancePerformance': ['dance_id', 'id', 'competition_id', 'duration', 'dancer_id']}. \n# the user question is: Show the names and ages of all male dancers who have performed a solo dance in a competition and are over the age of 18.. \n#SQL query: SELECT Dancer.name, Dancer.age FROM Dancer INNER JOIN DancePerformance ON Dancer.id = DancePerformance.dancer_id INNER JOIN Dance ON DancePerformance.dance_id = Dance.id WHERE Dance.type = 'solo' AND DancePerformance.competition_id IS NOT NULL AND Dancer.gender = 'male' AND Dancer.age > 18;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Health\" and have a budget greater than $500 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Health\" and have a budget greater than $500 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Health' AND Campaigns.budget > 500000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nINNER JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.targeting_type = 'interest' \nAND Targeting_Options.option_value = 'Health' \nAND Campaigns.budget > 500000000;",
    "prompt_token_number": 426,
    "response_token_number": 97
},
{
    "id": 33477,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Rides': ['end_time', 'bike_id', 'duration_minutes', 'user_id', 'ride_type', 'cost', 'start_location_id', 'ride_id', 'location_id', 'start_time', 'distance_miles', 'end_location_id', 'distance', 'rental_price', 'start_station_id', 'end_station_id', 'duration', 'fare', 'end_location', 'start_location', 'price', 'distance_km'], 'Users': ['name', 'user_id', 'id', 'birth_date', 'membership_type', 'age', 'birth_year', 'membership_start_date', 'gender', 'hometown']}. \n# the user question is: How many rides have been taken by users under the age of 25?. \n#SQL query: SELECT COUNT(*) AS num_rides FROM Rides INNER JOIN Users ON Rides.user_id = Users.id WHERE (strftime('%Y', 'now') - Users.birth_year) < 25;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"News\" and target users interested in \"Business\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"News\" and target users interested in \"Business\":",
    "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'News' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Business' GROUP BY Campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Campaigns.name, Campaigns.budget\nFROM Campaigns\nINNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id\nINNER JOIN Websites ON Ad_Placements.website_id = Websites.website_id\nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Websites.category = 'News' AND Targeting_Options.option_value = 'Business';",
    "prompt_token_number": 481,
    "response_token_number": 84
},
{
    "id": 33478,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'users': ['account_setup_completed', 'name', 'user_id', 'email', 'onboarding_status', 'satisfaction_score', 'last_login_date', 'username']}. \n# the user question is: Show the number of registered users who have not yet completed the account setup process.. \n#SQL query: SELECT COUNT(*) FROM users WHERE account_setup_completed = 0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $150 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $150 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 150000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.targeting_type = 'Gaming' AND Campaigns.status = 'Active' AND Campaigns.budget > 150000000;",
    "prompt_token_number": 362,
    "response_token_number": 91
},
{
    "id": 33479,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'tasks': ['created_at', 'project_id', 'task_id', 'user_id', 'due_date', 'completed', 'started_at', 'priority', 'completion_date', 'completed_date', 'start_date', 'created_date', 'creator_id', 'assignee_id', 'completed_at', 'name', 'tags', 'assigner_id', 'assigned_by_id', 'category'], 'users': ['user_id', 'name', 'email', 'last_login_attempt', 'total_tasks', 'completed_tasks', 'assignee_id', 'role', 'last_login', 'first_name', 'last_name', 'last_login_date', 'registration_date', 'password', 'job_title', 'hire_date']}. \n# the user question is: Retrieve the names and email addresses of all users who have not been assigned to any tasks yet:. \n#SQL query: SELECT name, email FROM users WHERE user_id NOT IN ( SELECT user_id FROM tasks );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $20 billion and have been updated in the last 20000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $20 billion and have been updated in the last 20000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 20000000000 AND Creatives.updated_at BETWEEN DATE('now', '-20000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT name, type \nFROM Creatives \nWHERE campaign_id IN (SELECT campaign_id FROM Campaigns WHERE budget > 20000000000 AND DATEDIFF(day, updated_at, GETDATE()) <= 20000);",
    "prompt_token_number": 396,
    "response_token_number": 45
},
{
    "id": 33480,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Actor': ['last_name', 'actor_id', 'first_name'], 'Film_Actor': ['film_id', 'actor_id', 'rating'], 'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue']}. \n# the user question is: Find the names of all actors who have appeared in at least 3 films in the \"Die Hard\" franchise:. \n#SQL query: SELECT DISTINCT Actor.first_name || ' ' || Actor.last_name AS actor_name FROM Actor INNER JOIN Film_Actor ON Actor.actor_id = Film_Actor.actor_id INNER JOIN Film ON Film_Actor.film_id = Film.film_id AND Film.title LIKE 'Die Hard%' GROUP BY Actor.actor_id HAVING COUNT(DISTINCT Film.film_id) >= 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $30 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $30 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 30000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT Apps.name, Apps.category \nFROM Apps \nINNER JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Campaigns.budget > 30000000 \nAND Targeting_Options.targeting_type = 'interest' \nAND Targeting_Options.option_value = 'Food';",
    "prompt_token_number": 490,
    "response_token_number": 106
},
{
    "id": 33481,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Courses': ['course_name', 'course_id', 'teacher_id', 'department_id', 'subject_id', 'level', 'type', 'program_id'], 'Teachers': ['teacher_id', 'last_name', 'first_name', 'date_of_birth', 'teacher_name'], 'Departments': ['department_name', 'department_id']}. \n# the user question is: \"Retrieve the list of teachers who teach courses in both the 'Physics' and 'Chemistry' departments.\". \n#SQL query: SELECT Teachers.first_name, Teachers.last_name FROM Teachers INNER JOIN Courses ON Teachers.teacher_id = Courses.teacher_id INNER JOIN Departments ON Courses.department_id = Departments.department_id WHERE Departments.department_name = 'Physics' AND Teachers.teacher_id IN ( SELECT Teachers.teacher_id FROM Teachers INNER JOIN Courses ON Teachers.teacher_id = Courses.teacher_id INNER JOIN Departments ON Courses.department_id = Departments.department_id WHERE Departments.department_name = 'Chemistry' );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $100 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $100 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category FROM Websites \nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.budget > 100000000 AND Campaigns.status = 'active' AND Targeting_Options.option_value = 'Fashion';",
    "prompt_token_number": 471,
    "response_token_number": 90
},
{
    "id": 33482,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Pages': ['page_id', 'website_id', 'url', 'title', 'description', 'content', 'created_at', 'updated_at', 'meta_description', 'meta_keywords', 'meta_title', 'h1_tag', 'h2_tag', 'title_tag', 'canonical_url', 'description_tag', 'header_tag', 'meta_tag', 'meta_keyword', 'h1', 'heading', 'header', 'word_count', 'time_on_page', 'total_words', 'http_status_code', 'user_id', 'last_modified_date', '[website_id]'], 'Page_Stats': ['page_stat_id', 'page_id', 'visits', 'bounce_rate', 'time_on_page', 'created_at', 'updated_at', 'organic_traffic', 'load_time', 'page_speed_score', 'total_images', 'total_videos', 'page_authority_score', 'domain_authority_score', 'page_load_time', 'backlinks', 'search_query', 'search_volume']}. \n# the user question is: Retrieve the number of pages with a bounce rate above 0.75 for website with ID 1:. \n#SQL query: SELECT COUNT(*) FROM Page_Stats INNER JOIN Pages ON Page_Stats.page_id = Pages.page_id WHERE Pages.website_id = 1 AND Page_Stats.bounce_rate > 0.75;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $50 billion and have been updated in the last 15000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $50 billion and have been updated in the last 15000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 50000000000 AND Creatives.updated_at BETWEEN DATE('now', '-15000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 50000000000 AND DATEDIFF(DAY, Creatives.updated_at, GETDATE()) <= 15000;",
    "prompt_token_number": 477,
    "response_token_number": 58
},
{
    "id": 33483,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Employee': ['FirstName', 'EmployeeID', 'LastName', 'JobTitle', 'SupervisorID', 'State', 'Country', 'Region', 'EndYear', 'StartYear', 'Continent', 'Title', 'QuarterlySalesTarget', 'EmailAddress', 'HireDate', 'City'], 'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID'], 'EmployeeSales': ['EmployeeID', 'OrderID', 'CommissionRate', 'CustomerID', 'CommissionAmount', 'TotalPrice', 'Commission', 'Quantity', 'SalesGoal'], 'SalesOrderLineItem': ['ProductID', 'UnitPrice', 'Quantity', 'OrderID', 'OrderDate', 'Price', 'OrderLineID'], 'Customer': ['CustomerName', 'CustomerID', 'Country', 'SegmentID', 'Continent', 'PhoneNumber', 'Email', 'CreditLimit', 'State', 'AddressID', 'EmailAddress', 'LoyaltyLevelID', 'FirstName', 'LastName', 'City', 'StateCode', 'CountryCode', 'RegistrationDate']}. \n# the user question is: Retrieve the list of customers and their respective sales representatives who have made at least one purchase in the year 2023, where the customer is located in North America and the sales representative is located in the United States, and the total sales for the sales representative is greater than $25,000:. \n#SQL query: SELECT Customer.CustomerName, Employee.FirstName, Employee.LastName, SUM(SalesOrderLineItem.Quantity * SalesOrderLineItem.UnitPrice) as TotalSales FROM Customer JOIN SalesOrder ON Customer.CustomerID = SalesOrder.CustomerID JOIN EmployeeSales ON SalesOrder.OrderID = EmployeeSales.OrderID JOIN Employee ON EmployeeSales.EmployeeID = Employee.EmployeeID JOIN SalesOrderLineItem ON EmployeeSales.OrderID = SalesOrderLineItem.OrderID WHERE SalesOrder.Year = 2023 AND Customer.Continent = 'North America' AND Employee.Country = 'United States' GROUP BY Customer.CustomerID, Employee.EmployeeID HAVING TotalSales > 25000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $40 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $40 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 40000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 40000000;",
    "prompt_token_number": 751,
    "response_token_number": 95
},
{
    "id": 33484,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'product_description', 'unit_price', 'weight', 'category', 'category_id', 'part_id', 'lead_time'], 'Sale_Items': ['item_id', 'sale_id', 'product_id', 'quantity_sold', 'unit_price']}. \n# the user question is: Retrieve the names and total revenue generated by each product, sorted by total revenue:. \n#SQL query: SELECT Products.product_name, SUM(Sale_Items.quantity_sold * Products.unit_price) AS total_revenue FROM Products JOIN Sale_Items ON Products.product_id = Sale_Items.product_id GROUP BY Products.product_id ORDER BY total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $1 billion:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $1 billion:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 1000000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'Travel' AND Campaigns.budget > 1000000000 \nGROUP BY Advertisers.advertiser_id;",
    "prompt_token_number": 355,
    "response_token_number": 92
},
{
    "id": 33485,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Marine_Mammals': ['mammal_id', 'mammal_name', 'species', 'habitat', 'conservation_status', 'continent', 'swim_speed', 'species_name', 'swimming_speed']}. \n# the user question is: Which marine mammals in the Marine_Mammals table have a habitat of Coral Reefs and are classified as Least Concern or Near Threatened?. \n#SQL query: SELECT mammal_name FROM Marine_Mammals WHERE habitat = 'Coral Reefs' AND conservation_status IN ('Least Concern', 'Near Threatened');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $80 billion and have been updated in the last 10000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $80 billion and have been updated in the last 10000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 80000000000 AND Creatives.updated_at BETWEEN DATE('now', '-10000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT c.name, c.type \nFROM Creatives c \nJOIN Campaigns cp ON c.campaign_id = cp.campaign_id \nWHERE cp.budget > 80000000000 AND DATEDIFF(CURRENT_DATE(), c.updated_at) <= 10000;",
    "prompt_token_number": 319,
    "response_token_number": 54
},
{
    "id": 33486,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Fingerprints': ['fingerprint_details', 'evidence_id', 'examiner_id'], 'DNAProfiles': ['dna_sequence', 'evidence_id', 'examiner_id'], 'ForensicTechnicians': ['technician_specialty', 'technician_name', 'technician_id', 'technician_rank']}. \n# the user question is: List the forensic technicians who have worked on cases involving both fingerprints and DNA evidence:. \n#SQL query: SELECT ft.technician_name FROM ForensicTechnicians ft JOIN DNAProfiles dp ON ft.technician_id = dp.examiner_id JOIN Fingerprints fp ON ft.technician_id = fp.examiner_id WHERE dp.evidence_id = fp.evidence_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Books\" and have a budget greater than $20 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Books\" and have a budget greater than $20 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Books' AND Campaigns.budget > 20000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT ap.name, ap.category \nFROM Apps ap\nJOIN Ad_Placements adp ON ap.app_id = adp.app_id\nJOIN Campaigns c ON adp.campaign_id = c.campaign_id\nJOIN Targeting_Options to ON c.campaign_id = to.campaign_id\nWHERE to.targeting_type = 'Books' AND c.status = 'active' AND c.budget > 20000000;",
    "prompt_token_number": 424,
    "response_token_number": 85
},
{
    "id": 33488,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'celestial_bodies': ['radius', 'mass', 'name', 'type', 'number_of_moons', 'distance_from_sun', 'id', 'distance_from_earth', 'orbital_period', 'diameter', 'orbiting_body_id', 'average_surface_temperature', 'surface_temperature', 'perihelion_distance', 'period', 'semimajor_axis', 'redshift', 'velocity', 'luminosity', 'schwarzschild_radius', 'eccentricity', 'aphelion_distance', 'spin_period', 'semi_major_axis', 'surface_gravity', 'temperature', 'magnitude', 'accretion_disk_temperature', 'rotation_period', 'obliquity', 'pulse_period', 'peak_absolute_magnitude', 'albedo', 'apparent_magnitude', 'absolute_magnitude', 'spectral_type', 'discovery_year', 'spectral_class', 'distance_from_star', 'discovery_method_id', 'equilibrium_temperature', 'metallicity', 'age', 'effective_temperature', 'atmospheric_composition', 'inclination', 'parallax', 'rotation_velocity', 'axial_tilt', 'orbital_inclination', 'density', 'rotational_velocity', 'magnetic_field_strength', 'composition', 'rotational_period', 'spin', 'distance_from_galactic_center', 'binary_system', 'constellation', 'stellar_evolution_stage', 'star_cluster_type', 'galaxy', 'orbital_eccentricity', 'star_spectral_type', 'orbital_period_unit', 'diameter_unit', 'discovery_method', 'pulse_period_unit', 'distance_unit', 'radius_unit', 'avg_temperature', 'temperature_unit', 'aphelion_unit', 'perihelion_unit', 'event_horizon_unit', 'event_horizon_radius', 'luminosity_distance', 'orbit_type', 'equatorial_diameter', 'gravity_unit', 'escape_velocity', 'angle_unit', 'surface_area', 'density_unit', 'parent_body_id', 'atmospheric_pressure', 'luminosity_class', 'inner_habitable_zone', 'outer_habitable_zone', 'period_unit', 'classification', 'pressure_unit', 'surface_pressure', 'orbiting', 'distance', 'proper_motion', 'proper_motion_unit', 'mean_radius', 'mass_unit', 'temperature_range', 'Gas', 'Giant', 'brightness_temperature', 'parallax_unit', 'metallicity_unit', 'magnetic_field_unit', 'spin_parameter', 'orbiting_id', 'stellar_mass', 'stage', 'radial_velocity', 'host_star', 'accretion_rate', 'core_type'], 'exoplanets': ['radius', 'name', 'discovery_date', 'orbital_period', 'mass', 'discovery_method_id', 'eccentricity', 'surface_gravity', 'surface_temperature', 'density', 'minimum_mass', 'equilibrium_temperature', 'distance_from_star', 'inclination', 'temperature', 'orbital_eccentricity', 'semi_major_axis', 'discovery_year', 'exoplanet_name', 'discovery_method', 'average_temperature', 'year_discovered'], 'discovery_methods': ['spacecraft', 'Kepler', 'id', 'name', 'velocity', 'Radial', 'Transit', 'Microlensing', 'Direct', 'Imaging', 'Velocity', 'Gravitational', 'microlensing', 'imaging', 'Hubble', 'Telescope', 'Sky', 'Sloan', 'Survey', 'Digital']}. \n# the user question is: Retrieve the name and discovery date of all exoplanets that have a mass between 0.5 and 1.5 times the mass of Jupiter and were discovered by the microlensing method.. \n#SQL query: SELECT name, discovery_date FROM exoplanets WHERE mass BETWEEN 0.5 * (SELECT mass FROM celestial_bodies WHERE name = 'Jupiter') AND 1.5 * (SELECT mass FROM celestial_bodies WHERE name = 'Jupiter') AND discovery_method_id = (SELECT id FROM discovery_methods WHERE name = 'Microlensing');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $300 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $300 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 300000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT w.name, w.category \nFROM Websites w \nJOIN Ad_Placements ap ON w.website_id = ap.website_id \nJOIN Campaigns c ON ap.campaign_id = c.campaign_id \nJOIN Targeting_Options to ON c.campaign_id = to.campaign_id \nWHERE c.status = 'active' AND to.option_value = 'Art' AND c.budget > 300000000;",
    "prompt_token_number": 1137,
    "response_token_number": 82
},
{
    "id": 33489,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'User': ['UserID', 'FirstName', 'LastName', 'Email', 'Password', 'Birthdate', 'Gender', 'Age', 'Height', 'BMI', 'Weight'], 'Goal': ['GoalID', 'UserID', 'GoalName', 'GoalType', 'TargetDate', 'CurrentProgress', 'IsAchieved', 'DateAchieved', 'TargetWeight', 'StartWeight', 'GoalTypeID'], 'Achievement': ['AchievementID', 'UserID', 'GoalID', 'Date', 'ProgressMade', 'IsAchieved', 'AchievedDate', 'Progress', 'AchievementDate', 'AchievementValue']}. \n# the user question is: Find the names and email addresses of all users who have achieved at least one fitness goal related to muscle gain and have not achieved any fitness goals related to weight loss:. \n#SQL query: SELECT DISTINCT User.FirstName, User.LastName, User.Email FROM User INNER JOIN Goal ON User.UserID = Goal.UserID INNER JOIN Achievement ON Goal.GoalID = Achievement.GoalID WHERE Goal.GoalType = 'Muscle Gain' AND Achievement.IsAchieved = 1 AND Goal.UserID NOT IN ( SELECT Goal.UserID FROM Goal INNER JOIN Achievement ON Goal.GoalID = Achievement.GoalID WHERE Goal.GoalType = 'Weight Loss' AND Achievement.IsAchieved = 1 ) GROUP BY User.UserID\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $100 billion and have been updated in the last 5000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $100 billion and have been updated in the last 5000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 100000000000 AND Creatives.updated_at BETWEEN DATE('now', '-5000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 100000000000 AND DATEDIFF(CURRENT_DATE, Creatives.updated_at) <= 5000",
    "prompt_token_number": 477,
    "response_token_number": 55
},
{
    "id": 33490,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Films': ['title', 'country', 'rating_id', 'director_id', 'film_id', 'synopsis', 'release_date', 'runtime', 'studio_id', 'composer_id', 'budget', 'box_office', 'imdb_rating', 'rotten_tomatoes_rating', 'mpaa_rating', 'production_company_id', 'oscar_wins', 'rating', 'rottentomatoes_rating', 'genre_id', 'runtime_minutes', 'release_year', 'The Conjuring', 'PG-13'], 'Directors': ['director_id', 'name', 'nationality', 'gender', 'description'], 'Films_Awards': ['award_id', 'film_id', 'year'], 'Characters': ['character_id', 'name', 'description', 'category', 'main_actor_id', 'plot_id', 'role', 'gender'], 'Films_Characters': ['character_id', 'film_id'], 'Awards': ['award_id', 'description', 'name']}. \n# the user question is: Query: Retrieve the names and descriptions of all awards in the database that have been won by a film that features a serial killer as a central character, along with the names of the films that won them and the names of their directors, ordered by award name in ascending order.. \n#SQL query: SELECT Awards.name, Awards.description, Films.title, Directors.name FROM Awards JOIN Films_Awards ON Awards.award_id = Films_Awards.award_id JOIN Films ON Films_Awards.film_id = Films.film_id JOIN Directors ON Films.director_id = Directors.director_id JOIN Films_Characters ON Films.film_id = Films_Characters.film_id JOIN Characters ON Films_Characters.character_id = Characters.character_id WHERE Characters.category LIKE '%Serial Killer%' AND Awards.description IS NOT NULL ORDER BY Awards.name ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $10 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $10 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 10000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'Active' \nAND Targeting_Options.option_value LIKE '%Fashion%' \nAND Campaigns.budget > 10000000;",
    "prompt_token_number": 655,
    "response_token_number": 91
},
{
    "id": 33491,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Contacts': ['company_id', 'first_name', 'contact_id', 'last_name', 'email'], 'Activities': ['date', 'contact_id', 'activity_type', 'user_id', 'opportunity_id', 'duration']}. \n# the user question is: Find the contacts who have been involved in activities in the last 7 days.. \n#SQL query: SELECT c.first_name, c.last_name FROM Contacts c INNER JOIN Activities a ON c.contact_id = a.contact_id WHERE a.date >= DATE('now', '-7 days');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $200 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $200 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 200000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT a.name, a.contact_email \nFROM Advertisers a INNER JOIN Campaigns c ON a.advertiser_id = c.advertiser_id \nINNER JOIN Targeting_Options t ON c.campaign_id = t.campaign_id \nWHERE c.status = 'active' AND t.targeting_type = 'Food' AND c.budget > 200000000;",
    "prompt_token_number": 331,
    "response_token_number": 72
},
{
    "id": 33492,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']}. \n# the user question is: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $60 million:. \n#SQL query: SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 60000000 AND Campaigns.status = 'active';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $50 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $50 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
    "prompt_token_number": 583,
    "response_token_number": 95
},
{
    "id": 33493,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']}. \n# the user question is: Text Query: \"Retrieve the risks that are associated with projects that have a status of 'In Progress' or 'Delayed', and retrieve the project name, the risk name, and the assigned employee's name.\". \n#SQL query: SELECT Projects.project_name, Risks.risk_name, Employees.employee_name FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id WHERE Projects.status = 'In Progress' OR Projects.status = 'Delayed';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $200 billion and have been updated in the last 20000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $200 billion and have been updated in the last 20000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 200000000000 AND Creatives.updated_at BETWEEN DATE('now', '-20000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 200000000000 AND DATEDIFF(CURRENT_DATE, Creatives.updated_at) <= 20000;",
    "prompt_token_number": 418,
    "response_token_number": 56
},
{
    "id": 33495,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Comedians': ['first_name', 'last_name', 'comedian_id', 'nationality', 'birthplace', 'country_id', 'birth_year', 'gender', 'name', 'city_id', 'school_id', 'birth_state', 'netflix_special', 'youtube_subscribers', 'experience'], 'Performances': ['rating', 'comedian_id', 'show_id', 'performance_id', 'special_id', 'venue_id', 'production_id', 'performance_date'], 'Venues': ['capacity', 'venue_id', 'country', 'name', 'is_live', 'city', 'state', 'type', 'seating_capacity', 'city_id', 'zip_code', 'stage_width', 'minimum_age', 'admission_fee']}. \n# the user question is: Retrieve the names of comedians who have performed in a show that was recorded in a venue with a seating capacity of at least 500.. \n#SQL query: SELECT DISTINCT c.name FROM Comedians c JOIN Performances p ON p.comedian_id = c.comedian_id JOIN Venues v ON v.venue_id = p.venue_id WHERE v.seating_capacity >= 500;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Sports\" and have a budget greater than $50 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Sports\" and have a budget greater than $50 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT a.name, a.contact_email \nFROM Advertisers a \nJOIN Campaigns c ON c.advertiser_id = a.advertiser_id \nJOIN Targeting_Options t ON t.campaign_id = c.campaign_id \nWHERE c.status = 'active' \nAND t.targeting_type = 'interests' \nAND t.option_value = 'Sports' \nAND c.budget > 50000000;",
    "prompt_token_number": 463,
    "response_token_number": 84
},
{
    "id": 33496,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Review': ['rating', 'film_id', 'review_id'], 'Actor': ['actor_id', 'name', 'nationality', 'birth_date'], 'Film_Actor': ['film_id', 'actor_id']}. \n# the user question is: \"Retrieve the names of actors who have appeared in at least 3 films and have an average rating above 7.\". \n#SQL query: SELECT Actor.name FROM Actor INNER JOIN Film_Actor ON Actor.actor_id = Film_Actor.actor_id INNER JOIN Review ON Film_Actor.film_id = Review.film_id GROUP BY Actor.name HAVING COUNT(DISTINCT Film_Actor.film_id) >= 3 AND AVG(Review.rating) > 7;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $20 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $20 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 20000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.targeting_type = 'interest' \nAND Targeting_Options.option_value = 'Travel' \nAND Campaigns.budget > 20000000\nGROUP BY Websites.name, Websites.category\nHAVING COUNT(DISTINCT Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 430,
    "response_token_number": 131
},
{
    "id": 33497,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'director_id', 'duration', 'release_date', 'genre', 'genre_id', 'language_id'], 'Actor': ['actor_id', 'name', 'nationality', 'birth_date'], 'Film_Actor': ['film_id', 'actor_id']}. \n# the user question is: \"Retrieve the names of actors who have appeared in films released in the same year as their birth year.\". \n#SQL query: SELECT Actor.name FROM Actor INNER JOIN Film_Actor ON Actor.actor_id = Film_Actor.actor_id INNER JOIN Film ON Film_Actor.film_id = Film.film_id WHERE strftime('%Y', Actor.birth_date) = strftime('%Y', Film.release_date);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $500 billion and have been updated in the last 10000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $500 billion and have been updated in the last 10000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 500000000000 AND Creatives.updated_at BETWEEN DATE('now', '-10000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 500000000000 AND julianday('now') - julianday(Creatives.updated_at) <= 10000;",
    "prompt_token_number": 349,
    "response_token_number": 62
},
{
    "id": 33498,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Cases': ['Case_ID', 'Case_Name', 'Case_Description', 'Client_ID', 'Case_Status', 'Lawyer_ID', 'Last_Updated', 'Date_Opened', 'Date_Closed', 'Status', 'Case_Closed_Date', 'Practice_Area_ID', 'Case_Manager_ID', 'Open_Date', 'Closed', 'Case_End_Date', 'Case_Start_Date', 'Firm_ID', 'Office_ID', 'CaseStatus', 'CaseNumber', 'ClientID', 'CaseTitle', 'CaseTypeID', 'CaseType', 'CourtName', 'ClosedDate', 'Settlement', 'ID', 'HearingDate', 'ClosingDate', 'AppealStatus', 'LawyerID', 'OpeningDate', 'verdict', 'judge_id', 'defendant_state', 'plaintiff_state', 'lawyer_id'], 'Lawyers': ['Lawyer_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'Specialization', 'Department_ID', 'City', 'Email_Address', 'Phone_Number', 'Hourly_Rate', 'Practice_Area_ID', 'Billing_Rate_ID', 'Firm_ID', 'FirmID', 'LawSchoolID', 'HourlyRate', 'Name', 'ID', 'ExperienceYears', 'years_of_experience', 'state', 'lawyer_id'], 'Time_Entries': ['Time_Entry_ID', 'Lawyer_ID', 'Case_ID', 'Date', 'Hours', 'Description', 'Task_ID', 'Billed', 'Time_Entry_Date', 'Invoice_ID', 'Billable', 'Hours_Worked', 'Entry_Date'], 'Tasks': ['Task_ID', 'Task_Name', 'Task_Description', 'Task_Status', 'Case_ID', 'Due_Date', 'Lawyer_ID', 'Status', 'Completion_Date', 'Practice_Area_ID', 'Paralegal_ID', 'Last_Activity_Date', 'Budgeted_Hours', 'Budget', 'Task_Deadline', 'Hourly_Rate', 'Task_Date', 'Hours_Worked', 'Task_Due_Date', 'Hours_Billed', 'Hours'], 'Billing_Rates': ['Effective_Date', 'Lawyer_ID', 'Rate', 'Billing_Rate_ID', 'Rate_Per_Hour', 'Hourly_Rate']}. \n# the user question is: List all the cases and their associated lawyers, sorted by the total amount billed for each case:. \n#SQL query: SELECT Cases.Case_Name, Lawyers.First_Name, Lawyers.Last_Name, SUM(Time_Entries.Hours * Billing_Rates.Rate) AS Total_Billed FROM Cases JOIN Tasks ON Cases.Case_ID = Tasks.Case_ID JOIN Time_Entries ON Tasks.Task_ID = Time_Entries.Task_ID JOIN Billing_Rates ON Time_Entries.Lawyer_ID = Billing_Rates.Lawyer_ID JOIN Lawyers ON Time_Entries.Lawyer_ID = Lawyers.Lawyer_ID GROUP BY Cases.Case_ID, Lawyers.Lawyer_ID ORDER BY Total_Billed DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $2 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $2 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 2000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category\nFROM Apps\nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id\nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.status = 'active' \n  AND Targeting_Options.targeting_type = 'Gaming' \n  AND Campaigns.budget > 2000000\nGROUP BY Apps.name, Apps.category\nHAVING COUNT(Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 898,
    "response_token_number": 118
},
{
    "id": 33499,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['user_id', 'Project', 'project_name', 'project_id', 'created_date'], 'Instances': ['project_id', 'instance_name', 'launch_date', 'storage_id', 'user_id', 'instance_id', 'instance_type', 'region_id', 'zone_id', 'cpu_usage', 'memory_usage', 'availability_zone', 'storage_usage', 'network_bandwidth', 'status', 'cpu_count']}. \n# the user question is: Text Query: Find the project names and the average memory usage across all instances for each project, sorted in descending order of the average memory usage.. \n#SQL query: SELECT Projects.project_name, AVG(Instances.memory_usage) AS average_memory_usage FROM Projects INNER JOIN Instances ON Projects.project_id = Instances.project_id GROUP BY Projects.project_id, Projects.project_name ORDER BY average_memory_usage DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $100 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $100 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email\nFROM Advertisers \nINNER JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.option_value = 'Fashion' AND Campaigns.status = 'active' AND Campaigns.budget > 100000000\nGROUP BY Advertisers.name, Advertisers.contact_email;",
    "prompt_token_number": 394,
    "response_token_number": 96
},
{
    "id": 33500,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Actor': ['last_name', 'actor_id', 'first_name'], 'Film_Actor': ['film_id', 'actor_id', 'rating']}. \n# the user question is: Find the top 5 actors who have acted in the most number of films:. \n#SQL query: SELECT Actor.first_name || ' ' || Actor.last_name AS actor_name, COUNT(*) AS num_films FROM Actor INNER JOIN Film_Actor ON Actor.actor_id = Film_Actor.actor_id GROUP BY Actor.actor_id ORDER BY num_films DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $100 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $100 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category\nFROM Websites\nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id\nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.status = 'active' AND Campaigns.budget > 100000000 AND Targeting_Options.targeting_type = 'Music' GROUP BY Websites.name, Websites.category;",
    "prompt_token_number": 396,
    "response_token_number": 100
},
{
    "id": 33501,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Illustrations': ['user_id', 'illustration_id', 'upload_date', 'title', 'price', 'category_id', 'discount', 'creation_date', 'artist_id', 'description'], 'Users': ['username', 'user_id', 'address_id', 'work_address_id', 'last_active_date', 'home_address_id', 'last_activity_date', 'registration_date', 'email', 'total_purchase_amount', 'user_type_id', 'country', 'name'], 'Purchase': ['user_id', 'purchase_price', 'purchase_date', 'illustration_id', 'purchase_id', 'order_id', 'shipping_address_id', 'total_amount', 'COUNT###', 'price', 'quantity', 'category_id', 'amount', 'date'], 'User_accounts': ['account_type', 'user_id']}. \n# the user question is: Get the details of all illustrations that have been uploaded by users who have been registered for at least 2 years and have been purchased by users who have an account type of 'premium':. \n#SQL query: SELECT Illustrations.title, Users.username, Users.registration_date FROM Illustrations INNER JOIN Users ON Illustrations.user_id = Users.user_id INNER JOIN Purchase ON Illustrations.illustration_id = Purchase.illustration_id INNER JOIN Users AS Buyers ON Purchase.user_id = Buyers.user_id INNER JOIN User_accounts ON Buyers.user_id = User_accounts.user_id WHERE User_accounts.account_type = 'premium' AND (julianday('now') - julianday(Users.registration_date)) > 365*2;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1 trillion and have been updated in the last 5000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1 trillion and have been updated in the last 5000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1000000000000 AND Creatives.updated_at BETWEEN DATE('now', '-5000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1000000000000 AND (julianday('now') - julianday(Creatives.updated_at)) < 5000;",
    "prompt_token_number": 519,
    "response_token_number": 64
},
{
    "id": 33503,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']}. \n# the user question is: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.2 billion and have been updated in the last 15000 days:. \n#SQL query: SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1200000000 AND Creatives.updated_at BETWEEN DATE('now', '-15000 days') AND DATE('now');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $50 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $50 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' \nAND Targeting_Options.targeting_type = 'Food' \nAND Campaigns.budget > 50000000;",
    "prompt_token_number": 405,
    "response_token_number": 84
},
{
    "id": 33504,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Book_Reviews': ['rating', 'book_id', 'customer_id', 'review_id', 'review_date', 'author_id'], 'Authors': ['first_name', 'author_id', 'last_name', 'nationality', 'author_name', 'author_city', 'AuthorID', 'AuthorName'], 'Order_Items': ['price', 'quantity', 'order_id', 'book_id', 'customer_id', 'publisher_id', 'is_returned', 'product_id', 'is_delivered', 'total_price', 'order_date']}. \n# the user question is: Retrieve the titles and authors of books that have been ordered at least once but have never been reviewed.. \n#SQL query: SELECT b.title, CONCAT(a.first_name, ' ', a.last_name) AS author FROM Books b JOIN Order_Items oi ON b.book_id = oi.book_id LEFT JOIN Book_Reviews br ON b.book_id = br.book_id JOIN Authors a ON b.author_id = a.author_id WHERE br.review_id IS NULL GROUP BY b.book_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $50 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $50 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options to ON c.campaign_id = to.campaign_id WHERE to.targeting_type = \"Movies\" AND c.status = \"Active\" AND c.budget > 50000000 GROUP BY w.website_id;",
    "prompt_token_number": 600,
    "response_token_number": 82
},
{
    "id": 33505,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'patients': ['first_name', 'last_name', 'patient_id', 'phone_number', 'email', 'phone'], 'prescription': ['patient_id', 'prescription_id', 'prescription_date', 'type', 'practitioner_id'], 'prescription_items': ['formula_id', 'prescription_id'], 'herbal_formulas': ['formula_id', 'formula_name', 'price', 'num_ingredients', 'ingredients', 'name']}. \n# the user question is: Retrieve the names and email addresses of patients who have been prescribed more than 2 herbal formulas containing the ingredient \"Chen Pi\":. \n#SQL query: SELECT DISTINCT p.first_name, p.last_name, p.email FROM patients p JOIN prescription pr ON p.patient_id = pr.patient_id JOIN prescription_items pi ON pr.prescription_id = pi.prescription_id JOIN herbal_formulas hf ON pi.formula_id = hf.formula_id WHERE hf.ingredients LIKE '%Chen Pi%' GROUP BY p.patient_id HAVING COUNT(DISTINCT pi.formula_id) > 2;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $500 billion and have been updated in the last 1000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $500 billion and have been updated in the last 1000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 500000000000 AND Creatives.updated_at BETWEEN DATE('now', '-1000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns cp ON c.campaign_id = cp.campaign_id WHERE cp.budget > 500000000000 AND c.updated_at >= CURDATE() - INTERVAL 1000 DAY;",
    "prompt_token_number": 417,
    "response_token_number": 49
},
{
    "id": 33507,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Sites': ['site_id', 'name', 'location', 'date_discovered', 'excavated_by', 'culture_id', 'description'], 'Excavations': ['excavation_id', 'site_id', 'start_date', 'end_date', 'description', 'excavated_by'], 'Artifacts': ['artifact_id', 'excavation_id', 'name', 'type', 'description', 'weight']}. \n# the user question is: Retrieve the names and descriptions of sites where the average weight of artifacts is greater than 10 grams:. \n#SQL query: SELECT Sites.name, Sites.description FROM Sites JOIN Excavations ON Sites.site_id = Excavations.site_id JOIN Artifacts ON Excavations.excavation_id = Artifacts.excavation_id GROUP BY Sites.name, Sites.description HAVING AVG(Artifacts.weight) > 10;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $5 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 5000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT Advertisers.name, Advertisers.contact_email\nFROM Advertisers\nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 5000000\nGROUP BY Advertisers.name, Advertisers.contact_email\nHAVING COUNT(Campaigns.campaign_id) >= 1;",
    "prompt_token_number": 399,
    "response_token_number": 108
},
{
    "id": 33509,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Marine_Mammals': ['mammal_id', 'mammal_name', 'species', 'habitat', 'conservation_status', 'continent', 'swim_speed', 'species_name', 'swimming_speed']}. \n# the user question is: Which marine mammals in the Marine_Mammals table have a habitat of Deep Ocean and are classified as Endangered or Critically Endangered?. \n#SQL query: SELECT mammal_name FROM Marine_Mammals WHERE habitat = 'Deep Ocean' AND conservation_status IN ('Endangered', 'Critically Endangered');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $10 billion and have been updated in the last 2000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $10 billion and have been updated in the last 2000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 10000000000 AND Creatives.updated_at BETWEEN DATE('now', '-2000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT c.name, c.type \nFROM Creatives c \nJOIN Campaigns camp ON c.campaign_id = camp.campaign_id \nWHERE camp.budget > 10000000000 AND DATEDIFF(CURDATE(), c.updated_at) <= 2000;",
    "prompt_token_number": 318,
    "response_token_number": 54
},
{
    "id": 33510,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']}. \n# the user question is: Find the name and population of the 5 least populous countries in the \"South America\" region:. \n#SQL query: SELECT name, population FROM Country WHERE region = 'South America' ORDER BY population ASC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $2 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $2 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 2000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.targeting_type = 'Music' AND Campaigns.status = 'Active' AND Campaigns.budget > 2000000;",
    "prompt_token_number": 541,
    "response_token_number": 90
},
{
    "id": 33511,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Therapist_Specialties': ['therapist_id', 'specialty', 'specialty_id'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id'], 'Specialties': ['id', 'name']}. \n# the user question is: Retrieve the names and specialties of therapists who have more than 10 clients:. \n#SQL query: SELECT t.name, GROUP_CONCAT(DISTINCT sp.name) AS specialties FROM Therapists t INNER JOIN Sessions s ON t.id = s.therapist_id INNER JOIN Session_Attendees sa ON s.id = sa.session_id INNER JOIN Clients c ON sa.client_id = c.id INNER JOIN Therapist_Specialties ts ON t.id = ts.therapist_id INNER JOIN Specialties sp ON ts.specialty_id = sp.id GROUP BY t.id HAVING COUNT(DISTINCT c.id) > 10\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Finance\" and have a budget greater than $20 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Finance\" and have a budget greater than $20 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Finance' AND Campaigns.budget > 20000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT a.name, a.contact_email \nFROM Advertisers a \nINNER JOIN Campaigns c ON a.advertiser_id = c.advertiser_id \nINNER JOIN Targeting_Options t ON c.campaign_id = t.campaign_id \nWHERE c.status = 'active' AND t.targeting_type = 'Finance' AND c.budget > 20000000 \nGROUP BY a.advertiser_id \nHAVING COUNT(c.campaign_id) >= 1",
    "prompt_token_number": 702,
    "response_token_number": 91
},
{
    "id": 33512,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Seamounts': ['seamount_id', 'seamount_name', 'location', 'height', 'area', 'depth']}. \n# the user question is: What is the name and location of the shallowest seamount in the Seamounts table?. \n#SQL query: SELECT seamount_name, location FROM Seamounts WHERE depth = (SELECT MIN(depth) FROM Seamounts);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $15 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $15 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 15000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.status = 'active' AND Campaigns.budget > 15000000 AND Targeting_Options.option_value = 'Gaming';",
    "prompt_token_number": 366,
    "response_token_number": 89
},
{
    "id": 33513,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'specials': ['rating', 'release_year', 'name', 'duration', 'id', 'genre', 'release_date', 'title'], 'comedians': ['gender', 'name', 'id', 'birthdate', 'country', 'birth_year'], 'performances': ['id', 'comedian_id', 'performance_date', 'special_id', 'date', 'venue_id']}. \n# the user question is: Find the name and number of performances for all comedians who have performed in a stand-up special released in the year 2022.. \n#SQL query: SELECT comedians.name, COUNT(performances.id) AS total_performances FROM comedians INNER JOIN performances ON comedians.id = performances.comedian_id INNER JOIN specials ON performances.special_id = specials.id WHERE specials.release_year = 2022 GROUP BY comedians.id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $50 billion and have been updated in the last 5000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $50 billion and have been updated in the last 5000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 50000000000 AND Creatives.updated_at BETWEEN DATE('now', '-5000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT Creatives.name, Creatives.type FROM Creatives INNER JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 50000000000 AND DATEDIFF(CURRENT_DATE, Creatives.updated_at) < 5000;",
    "prompt_token_number": 374,
    "response_token_number": 56
},
{
    "id": 33514,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Species': ['species_id', 'name', 'common_name', 'classification_id', 'genus', 'family_id', 'scientific_name', 'class_id', 'taxonomy', 'category', 'conservation_status', 'population_trend', 'habitat', 'migration_pattern', 'min_depth_range', 'max_depth_range', 'body_size', 'body_temperature_range', 'migratory_behavior', 'species_name', 'discovery_year', 'class_name', 'is_venomous', 'order_name'], 'FisheryData': ['fishery_id', 'species_id', 'fishery_name', 'catch_date', 'catch_weight', 'fishing_method', 'gear_type', 'fishing_days', 'average_length', 'catch_number', 'fish_length', 'fish_weight', 'catch_length', 'location_id', 'catch_id', 'vessel_id', 'net_mesh_size', 'method_id'], 'SpeciesData': ['sample_id', 'species_id', 'weight', 'catch_id', 'length', 'catch_date', 'depth', 'individuals_caught']}. \n# the user question is: Retrieve the names of all species caught using the \"Longline\" fishing method, along with the total number of fish caught for each species:. \n#SQL query: SELECT Species.common_name, COUNT(SpeciesData.species_id) AS total_catch FROM Species INNER JOIN SpeciesData ON Species.species_id = SpeciesData.species_id INNER JOIN FisheryData ON SpeciesData.catch_id = FisheryData.catch_id WHERE FisheryData.fishing_method = 'Longline' GROUP BY SpeciesData.species_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $1 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $1 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 1000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category FROM Apps \nINNER JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 1000000;",
    "prompt_token_number": 609,
    "response_token_number": 91
},
{
    "id": 33515,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'product_specs': ['weight', 'product_id', 'height', 'width', 'length', 'depth', 'Leather', 'material', 'color']}. \n# the user question is: Retrieve the name and description of all products that have a width less than 20 inches and have been reviewed with a rating of 3 or lower:. \n#SQL query: SELECT p.name, p.description FROM products p JOIN reviews rev ON p.product_id = rev.product_id JOIN product_specs ps ON p.product_id = ps.product_id WHERE ps.width < 20 AND rev.rating <= 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $10 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $10 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 10000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT adv.name, adv.contact_email \nFROM Advertisers adv \nJOIN Campaigns camp ON adv.advertiser_id = camp.advertiser_id \nJOIN Targeting_Options tgt ON camp.campaign_id = tgt.campaign_id \nWHERE camp.status = 'active' AND tgt.option_value = 'Technology' AND camp.budget > 10000000;",
    "prompt_token_number": 447,
    "response_token_number": 70
},
{
    "id": 33517,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Cases': ['case_status', 'case_id', 'case_description', 'case_name'], 'DNAProfiles': ['dna_sequence', 'evidence_id', 'examiner_id'], 'ForensicTechnicians': ['technician_specialty', 'technician_name', 'technician_id', 'technician_rank'], 'Evidence': ['case_id', 'evidence_type', 'evidence_id', 'examiner_id'], 'ToxicologyReports': ['toxicology_findings', 'case_id', 'examiner_id', 'report_date', 'victim_id', 'evidence_id', 'report_type']}. \n# the user question is: Find the forensic technicians who have worked on cases involving both toxicology reports and DNA evidence:. \n#SQL query: SELECT ft.technician_name FROM ForensicTechnicians ft JOIN ToxicologyReports tr ON ft.technician_id = tr.examiner_id JOIN Cases c ON tr.case_id = c.case_id JOIN Evidence e ON c.case_id = e.case_id JOIN DNAProfiles dp ON e.evidence_id = dp.evidence_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $20 billion and have been updated in the last 3000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $20 billion and have been updated in the last 3000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 20000000000 AND Creatives.updated_at BETWEEN DATE('now', '-3000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT cr.name, cr.type \nFROM Creatives cr \nJOIN Campaigns cp ON cr.campaign_id = cp.campaign_id \nWHERE cp.budget > 20000000000 AND DATEDIFF(day, cr.updated_at, CURRENT_DATE) < 3000;",
    "prompt_token_number": 420,
    "response_token_number": 55
},
{
    "id": 33518,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Customers': ['name', 'customer_id', 'email', 'address'], 'Payments': ['invoice_id', 'amount', 'order_i', 'customer_id', 'payment_id'], 'Invoices': ['invoice_date', 'invoice_id', 'order_id', 'customer_id']}. \n# the user question is: Find the customers who have made payments for all their invoices. \n#SQL query: SELECT c.name, c.email FROM Customers c WHERE c.customer_id NOT IN ( SELECT i.customer_id FROM Invoices i LEFT JOIN Payments p ON i.invoice_id = p.invoice_id WHERE p.payment_id IS NULL );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Sports\" and have a budget greater than $15 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Sports\" and have a budget greater than $15 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 15000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT a.name, a.contact_email FROM Advertisers a INNER JOIN Campaigns c ON a.advertiser_id = c.advertiser_id INNER JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = \"Sports\" AND c.status = \"active\" AND c.budget > 15000000;",
    "prompt_token_number": 345,
    "response_token_number": 69
},
{
    "id": 33519,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Recipients': ['name', 'email', 'campaign_id', 'status', 'recipient_id', 'segment_id', 'list_id', 'last_opened_at', 'city', 'country', 'state', 'last_clicked_at', 'created_at', 'subscribed_at'], 'Campaigns': ['name', 'campaign_id', 'limited', 'Sale', 't', 'our', 'miss', 'content', 'subject', 'user_id', 'segment_id', 'list_id', 'workflow_id', 'email_template_id', 'scheduled_at', 'created_at', 'sent_at'], 'Campaign_Stats': ['opens', 'campaign_id', 'created_at', 'clicks', 'clicked_at', 'opened_at', 'recipient_id', 'click_id', 'open_id', 'bounce_id', 'bounces', 'marked_as_spam', 'complaints', 'segment_id']}. \n# the user question is: Retrieve the email and number of emails sent for all recipients who have been sent a campaign with a subject containing the word \"Sale\" in the past week and have not opened any campaigns in the past month.. \n#SQL query: SELECT r.email, COUNT(*) AS num_emails_sent FROM Recipients r JOIN Campaigns c ON r.campaign_id = c.campaign_id AND c.subject LIKE '%Sale%' AND c.sent_at >= date('now', '-7 days') LEFT JOIN Campaign_Stats cs ON r.recipient_id = cs.recipient_id AND cs.opens > 0 AND cs.created_at >= date('now', '-1 month') WHERE cs.recipient_id IS NULL GROUP BY r.recipient_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $2 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $2 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 2000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT w.name, w.category \nFROM Websites w \nJOIN Ad_Placements ap ON w.website_id = ap.website_id \nJOIN Campaigns c ON ap.campaign_id = c.campaign_id AND c.budget > 2000000 AND c.status = 'active' \nJOIN Targeting_Options to ON c.campaign_id = to.campaign_id AND to.targeting_type = 'interest' AND to.option_value = 'Fashion' \nGROUP BY w.website_id \nHAVING COUNT(ap.ad_placement_id) > 0;",
    "prompt_token_number": 620,
    "response_token_number": 107
},
{
    "id": 33520,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Project_Ratings': ['rating', 'project_id', 'total_cost']}. \n# the user question is: List all the projects that have a project rating of \"Excellent\" and have a project start date in 2021.. \n#SQL query: SELECT DISTINCT p.project_name FROM Projects p INNER JOIN Project_Ratings pr ON p.project_id = pr.project_id WHERE pr.rating = 'Excellent' AND p.start_date BETWEEN '2021-01-01' AND '2021-12-31';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $30 billion and have been updated in the last 1000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $30 billion and have been updated in the last 1000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 30000000000 AND Creatives.updated_at BETWEEN DATE('now', '-1000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT DISTINCT c.name, c.type FROM Creatives c INNER JOIN Campaigns ca ON c.campaign_id = ca.campaign_id WHERE ca.budget > 30000000000 AND c.updated_at > DATE_SUB(CURDATE(), INTERVAL 1000 DAY);",
    "prompt_token_number": 458,
    "response_token_number": 53
},
{
    "id": 33521,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'User': ['UserID', 'FirstName', 'LastName', 'Email', 'Password', 'Birthdate', 'Gender', 'Age', 'Height', 'BMI', 'Weight'], 'Workout': ['WorkoutID', 'UserID', 'PlanID', 'Date', 'WorkoutType', 'StartTime', 'EndTime', 'Duration', 'TimeSeconds', 'CaloriesBurned', 'WorkoutTypeID', 'Distance', 'Type', 'TotalCalories', 'USERID', 'WorkoutName', 'Steps', 'HeartRate', 'ExerciseTypeID']}. \n# the user question is: Find the names and email addresses of all users who have completed a workout in which they burned more than 500 calories:. \n#SQL query: SELECT DISTINCT User.FirstName, User.LastName, User.Email FROM User INNER JOIN Workout ON User.UserID = Workout.UserID WHERE Workout.CaloriesBurned > 500 GROUP BY User.UserID\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $10 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $10 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 10000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT DISTINCT Advertisers.name, Advertisers.contact_email \nFROM Advertisers \nINNER JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'Food' AND Campaigns.budget > 10000000",
    "prompt_token_number": 408,
    "response_token_number": 84
},
{
    "id": 33522,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Creator': ['name', 'id', 'Lee', 'Jim', 'Fabry', 'Glenn', 'McKean'], 'Creator_Appearance': ['creator_id', 'issue_id', 'series_id', 'role', 'volume_id']}. \n# the user question is: Find the titles of all issues that have been published in the year 2020 and have been written by Brian K. Vaughan.. \n#SQL query: SELECT DISTINCT i.title FROM Issue i JOIN Creator_Appearance ca ON i.id = ca.issue_id JOIN Creator c ON ca.creator_id = c.id AND c.name = 'Brian K. Vaughan' WHERE i.publication_year = 2020;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $5 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 5000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT DISTINCT w.name, w.category \nFROM Websites w \nJOIN Ad_Placements ap ON w.website_id = ap.website_id \nJOIN Campaigns c ON ap.campaign_id = c.campaign_id AND c.status = 'active' AND c.budget > 5000000 \nJOIN Targeting_Options to ON c.campaign_id = to.campaign_id AND to.targeting_type = 'interests' AND to.option_value = 'Technology';",
    "prompt_token_number": 490,
    "response_token_number": 90
},
{
    "id": 33523,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Artists': ['artist_id', 'artist_name', 'country', 'birth_date'], 'Artists_Awards': ['artist_id', 'award_id', 'album_id'], 'Awards': ['award_id', 'award_name', 'release_date', 'artist_id', 'genre_id'], 'Concerts_Artists': ['concert_id', 'artist_id', 'country', 'city', 'concert_date'], 'Genres': ['genre_id', 'genre_name']}. \n# the user question is: \"Retrieve the names of artists who have won an award in the 'Smooth Jazz' genre and have performed in concerts in at least two different years.\". \n#SQL query: SELECT artist_name FROM Artists WHERE artist_id IN ( SELECT artist_id FROM Artists_Awards WHERE award_id IN ( SELECT award_id FROM Awards WHERE genre_id IN ( SELECT genre_id FROM Genres WHERE genre_name = 'Smooth Jazz' ) ) ) AND artist_id IN ( SELECT artist_id FROM Concerts_Artists GROUP BY artist_id HAVING COUNT(DISTINCT strftime('%Y', concert_date)) >= 2 );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $50 billion and have been updated in the last 500 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $50 billion and have been updated in the last 500 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 50000000000 AND Creatives.updated_at BETWEEN DATE('now', '-500 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT name, type FROM Creatives WHERE campaign_id IN (SELECT campaign_id FROM Campaigns WHERE budget > 50000000000) AND julianday('now') - julianday(updated_at) <= 500;",
    "prompt_token_number": 423,
    "response_token_number": 47
},
{
    "id": 33524,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Rides': ['end_time', 'bike_id', 'duration_minutes', 'user_id', 'ride_type', 'cost', 'start_location_id', 'ride_id', 'location_id', 'start_time', 'distance_miles', 'end_location_id', 'distance', 'rental_price', 'start_station_id', 'end_station_id', 'duration', 'fare', 'end_location', 'start_location', 'price', 'distance_km']}. \n# the user question is: Which locations have the most bike rentals in the past week and what is the total number of rentals?. \n#SQL query: SELECT start_location_id, COUNT(*) AS rental_count FROM Rides WHERE start_time >= date('now', '-1 week') GROUP BY start_location_id ORDER BY rental_count DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $3 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $3 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 3000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category FROM Websites\nINNER JOIN Ad_Placements ON Ad_Placements.website_id = Websites.website_id\nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nINNER JOIN Targeting_Options ON Targeting_Options.campaign_id = Campaigns.campaign_id \nWHERE Targeting_Options.option_value = \"Art\" \nAND Campaigns.status = \"active\" \nAND Campaigns.budget > 3000000\nGROUP BY Websites.website_id;",
    "prompt_token_number": 448,
    "response_token_number": 99
},
{
    "id": 33525,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'injuries': ['injury_type', 'athlete_id', 'injury_id', 'injury_date', 'injury_duration'], 'teams': ['team_id', 'coach_id', 'sport_id', 'team_name', 'team_medal', 'championship_id'], 'sports': ['sport_name', 'sport_id', 'Low', 'motivation', 'competition', 'challenge', 'sport_category']}. \n# the user question is: Get the total number of injuries for each sport, along with the sport name.. \n#SQL query: SELECT sports.sport_name, COUNT(injuries.injury_id) AS total_injuries FROM sports INNER JOIN teams ON sports.sport_id = teams.sport_id INNER JOIN athletes ON teams.team_id = athletes.team_id INNER JOIN injuries ON athletes.athlete_id = injuries.athlete_id GROUP BY sports.sport_name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $2.5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $2.5 million:",
    "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 2500000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Apps": [
            "name",
            "platform",
            "downloads",
            "category",
            "app_id",
            "updated_at"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Apps.name, Apps.category \nFROM Apps \nINNER JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.targeting_type = 'Sports' \nAND Campaigns.budget > 2500000 \nAND Campaigns.status = 'active' \nGROUP BY Apps.name, Apps.category \nHAVING COUNT(Ad_Placements.ad_placement_id) > 0;",
    "prompt_token_number": 482,
    "response_token_number": 118
},
{
    "id": 33526,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Employees': ['first_name', 'last_name', 'employee_id', 'department_id', 'job_title', 'hire_date', 'salary', 'department', 'birth_date', 'team', 'manager_id', 'email_address', 'phone_number', 'compliance_training_due_date', 'salary_amount', 'job_id', 'address', 'city', 'state', 'email', 'supervisor_id', 'num_projects', 'hourly_rate'], 'Attendance': ['employee_id', 'start_time', 'attendance_date', 'end_time', 'leave_type', 'status'], 'Enrollments': ['employee_id', 'training_program_id', 'enrollment_date'], 'Salaries': ['employee_id', 'salary_amount', 'department_id', 'effective_date']}. \n# the user question is: Find the names and total number of hours worked by all employees who have attended at least one training program in the past year and have a salary between $60,000 and $80,000.. \n#SQL query: SELECT e.first_name, e.last_name, SUM(strftime('%s', a.end_time) - strftime('%s', a.start_time))/3600 AS total_hours_worked FROM Employees e INNER JOIN Attendance a ON e.employee_id = a.employee_id INNER JOIN Enrollments en ON e.employee_id = en.employee_id INNER JOIN Salaries s ON e.employee_id = s.employee_id WHERE s.salary_amount BETWEEN 60000 AND 80000 AND strftime('%Y', date('now')) - strftime('%Y', en.enrollment_date) <= 1 GROUP BY e.employee_id ORDER BY total_hours_worked DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $15 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $15 million:",
    "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 15000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Advertisers": [
            "name",
            "contact_phone",
            "contact_email",
            "advertiser_id",
            "AdvertiserID"
        ],
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ]
    },
    "response_text": "SELECT a.name, a.contact_email FROM Advertisers a INNER JOIN Campaigns c ON a.advertiser_id = c.advertiser_id INNER JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'Travel' AND c.budget > 15000000 GROUP BY a.advertiser_id;",
    "prompt_token_number": 553,
    "response_token_number": 75
},
{
    "id": 33527,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Artist': ['artist_id', 'birth_date', 'name', 'nationality', 'New York City', 'birth_city', 'birth_country', 'country', 'birth_year', 'gender', '[artist_name]', 'Vincent', 'Gogh', 'Van', 'Michelangelo', 'id'], 'Artwork': ['The Persistence of Memory', 'artist_id', 'title', 'artwork_id', 'collection_id', 'dimensions', 'acquisition_date', 'date_created', 'value', '1999', '1900', 'date_acquired', 'medium', 'year_created', 'description', 'creation_year', 'type_id', 'price', 'creation_date', '[medium_name]', '[artist_id]', 'genre', 'id', 'name', 'style', 'abstract'], 'Sale': ['artwork_id', 'price', 'value', 'return_date', 'buyer_id', 'sale_price', 'sale_id', 'sale_date', 'collector_id', 'date_sold']}. \n# the user question is: Find the top 5 artists with the highest total revenue from sales.. \n#SQL query: SELECT Artist.name, SUM(Sale.price) as revenue FROM Artist INNER JOIN Artwork ON Artist.artist_id = Artwork.artist_id INNER JOIN Sale ON Artwork.artwork_id = Sale.artwork_id GROUP BY Artist.artist_id ORDER BY revenue DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $4 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $4 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 4000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nINNER JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nINNER JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.status = 'active' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 4000000;",
    "prompt_token_number": 571,
    "response_token_number": 92
},
{
    "id": 33528,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Artists_Instruments': ['instrument_id', 'artist_id'], 'Instruments': ['instrument_id', 'instrument_name'], 'Albums': ['album_name', 'artist_id', 'release_date', 'song_id', 'album_id', 'label_id'], 'Songs_Performers': ['song_id', 'artist_id', 'album_id']}. \n# the user question is: \"List the albums released on or after 2015 that feature artists who play either the trumpet or the piano.\". \n#SQL query: SELECT album_name, release_date FROM Albums WHERE release_date >= '2015-01-01' AND album_id IN ( SELECT album_id FROM Songs_Performers WHERE artist_id IN ( SELECT artist_id FROM Artists_Instruments WHERE instrument_id IN ( SELECT instrument_id FROM Instruments WHERE instrument_name IN ('Trumpet', 'Piano') ) ) );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $20 billion and have been updated in the last 1000 days:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $20 billion and have been updated in the last 1000 days:",
    "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 20000000000 AND Creatives.updated_at BETWEEN DATE('now', '-1000 days') AND DATE('now');",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Creatives": [
            "name",
            "campaign_id",
            "created_at",
            "type",
            "updated_at"
        ]
    },
    "response_text": "SELECT name, type FROM Creatives WHERE campaign_id IN ( SELECT campaign_id FROM Campaigns WHERE budget > 20000000000 AND updated_at >= CURDATE() - INTERVAL 1000 DAY );",
    "prompt_token_number": 377,
    "response_token_number": 40
},
{
    "id": 33529,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Cases': ['Case_ID', 'Case_Name', 'Case_Description', 'Client_ID', 'Case_Status', 'Lawyer_ID', 'Last_Updated', 'Date_Opened', 'Date_Closed', 'Status', 'Case_Closed_Date', 'Practice_Area_ID', 'Case_Manager_ID', 'Open_Date', 'Closed', 'Case_End_Date', 'Case_Start_Date', 'Firm_ID', 'Office_ID', 'CaseStatus', 'CaseNumber', 'ClientID', 'CaseTitle', 'CaseTypeID', 'CaseType', 'CourtName', 'ClosedDate', 'Settlement', 'ID', 'HearingDate', 'ClosingDate', 'AppealStatus', 'LawyerID', 'OpeningDate', 'verdict', 'judge_id', 'defendant_state', 'plaintiff_state', 'lawyer_id'], 'Lawyers': ['Lawyer_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'Specialization', 'Department_ID', 'City', 'Email_Address', 'Phone_Number', 'Hourly_Rate', 'Practice_Area_ID', 'Billing_Rate_ID', 'Firm_ID', 'FirmID', 'LawSchoolID', 'HourlyRate', 'Name', 'ID', 'ExperienceYears', 'years_of_experience', 'state', 'lawyer_id'], 'Time_Entries': ['Time_Entry_ID', 'Lawyer_ID', 'Case_ID', 'Date', 'Hours', 'Description', 'Task_ID', 'Billed', 'Time_Entry_Date', 'Invoice_ID', 'Billable', 'Hours_Worked', 'Entry_Date'], 'Tasks': ['Task_ID', 'Task_Name', 'Task_Description', 'Task_Status', 'Case_ID', 'Due_Date', 'Lawyer_ID', 'Status', 'Completion_Date', 'Practice_Area_ID', 'Paralegal_ID', 'Last_Activity_Date', 'Budgeted_Hours', 'Budget', 'Task_Deadline', 'Hourly_Rate', 'Task_Date', 'Hours_Worked', 'Task_Due_Date', 'Hours_Billed', 'Hours']}. \n# the user question is: Find all the lawyers who have billed more than 20 hours in the last month, sorted by last name:. \n#SQL query: SELECT Lawyers.First_Name, Lawyers.Last_Name, SUM(Time_Entries.Hours) AS Total_Hours FROM Lawyers JOIN Time_Entries ON Lawyers.Lawyer_ID = Time_Entries.Lawyer_ID JOIN Tasks ON Time_Entries.Task_ID = Tasks.Task_ID JOIN Cases ON Tasks.Case_ID = Cases.Case_ID WHERE Time_Entries.Date BETWEEN DATE('now', '-1 month') AND DATE('now') GROUP BY Lawyers.First_Name, Lawyers.Last_Name HAVING Total_Hours > 20 ORDER BY Lawyers.Last_Name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Fitness\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Fitness\":",
    "output": "SELECT Campaigns.name, Campaigns.budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Sports' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget \nFROM Campaigns \nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nJOIN Websites ON Ad_Placements.website_id = Websites.website_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Websites.category = 'Sports' AND Targeting_Options.option_value = 'Fitness' \nGROUP BY Campaigns.name, Campaigns.budget \nHAVING COUNT(*) >= 1;",
    "prompt_token_number": 860,
    "response_token_number": 100
},
{
    "id": 33530,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'password', 'email', 'registration_date', 'gender', 'johnD', 'Male', 'Female', 'location', 'alice23', 'janeD'], 'Interests': ['interest_id', 'interest_name', 'Social', 'Political', 'Science'], 'User_Interests': ['user_interest_id', 'user_id', 'interest_id']}. \n# the user question is: Get the users who have posted content and have interests in all areas of study starting with 'Social'. \n#SQL query: SELECT Users.username FROM Users INNER JOIN User_Interests ON Users.user_id = User_Interests.user_id INNER JOIN Interests ON User_Interests.interest_id = Interests.interest_id WHERE Interests.interest_name LIKE 'Social%' GROUP BY Users.user_id HAVING COUNT(DISTINCT Interests.interest_id) = (SELECT COUNT(*) FROM Interests WHERE interest_name LIKE 'Social%');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Mobile_Apps': ['mobile_app_id', 'category', 'name', 'title', 'downloads', 'available_on_apple_app_store', 'available_on_google_play', 'available_on_ios', 'available_on_android']} and \n# the user question: Retrieve the name and budget of all campaigns that have at least one ad placement on a mobile app with a category of \"Entertainment\" and target users interested in \"Movies\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and budget of all campaigns that have at least one ad placement on a mobile app with a category of \"Entertainment\" and target users interested in \"Movies\":",
    "output": "SELECT Campaigns.name, Campaigns.budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Mobile_Apps ON Ad_Placements.mobile_app_id = Mobile_Apps.mobile_app_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Mobile_Apps.category = 'Entertainment' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Mobile_Apps": [
            "mobile_app_id",
            "category",
            "name",
            "title",
            "downloads",
            "available_on_apple_app_store",
            "available_on_google_play",
            "available_on_ios",
            "available_on_android"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget \nFROM Campaigns\nINNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id\nINNER JOIN Mobile_Apps ON Ad_Placements.mobile_app_id = Mobile_Apps.mobile_app_id\nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Mobile_Apps.category = 'Entertainment' AND Targeting_Options.option_value = 'Movies' \nGROUP BY Campaigns.campaign_id \nHAVING COUNT(DISTINCT Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 496,
    "response_token_number": 118
},
{
    "id": 33531,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'tasks': ['created_at', 'project_id', 'task_id', 'user_id', 'due_date', 'completed', 'started_at', 'priority', 'completion_date', 'completed_date', 'start_date', 'created_date', 'creator_id', 'assignee_id', 'completed_at', 'name', 'tags', 'assigner_id', 'assigned_by_id', 'category'], 'users': ['user_id', 'name', 'email', 'last_login_attempt', 'total_tasks', 'completed_tasks', 'assignee_id', 'role', 'last_login', 'first_name', 'last_name', 'last_login_date', 'registration_date', 'password', 'job_title', 'hire_date']}. \n# the user question is: Retrieve the names and email addresses of all users who have not been assigned any tasks yet:. \n#SQL query: SELECT name, email FROM users WHERE user_id NOT IN ( SELECT DISTINCT user_id FROM tasks );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and cost per click of all ad placements that belong to campaigns with a budget greater than $5 million and have a minimum target age of 25:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and cost per click of all ad placements that belong to campaigns with a budget greater than $5 million and have a minimum target age of 25:",
    "output": "SELECT Ad_Placements.name, Ad_Placements.cost_per_click FROM Ad_Placements JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.budget > 5000000 AND Targeting_Options.targeting_type = 'age' AND Targeting_Options.option_value >= 25;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Ad_Placements.name, Ad_Placements.cost_per_click \nFROM Ad_Placements \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.budget > 5000000 AND Targeting_Options.targeting_type = 'age' AND Targeting_Options.option_value >= 25;",
    "prompt_token_number": 448,
    "response_token_number": 84
},
{
    "id": 33532,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'UserPlaylists': ['playlist_id', 'user_id', 'creation_date'], 'Users': ['username', 'user_id'], 'Artists': ['artist_name', 'artist_id', 'artist_genre', 'artist_country', 'country_id', 'genre_id'], 'Tracks': ['track_id', 'track_title', 'duration', 'album_id', 'track_name', 'genre_id', 'rating', 'artist_id', 'release_id'], 'UserFavorites': ['track_id', 'user_id', 'genre_id', 'favorite_date'], 'PlaylistTracks': ['track_id', 'playlist_id']}. \n# the user question is: Retrieve the users who have favorited tracks from all artists and have created playlists with a total duration exceeding 2 hours:. \n#SQL query: SELECT Users.username FROM Users JOIN UserFavorites ON Users.user_id = UserFavorites.user_id JOIN Tracks ON UserFavorites.track_id = Tracks.track_id JOIN Artists ON Tracks.artist_id = Artists.artist_id JOIN UserPlaylists ON Users.user_id = UserPlaylists.user_id JOIN PlaylistTracks ON UserPlaylists.playlist_id = PlaylistTracks.playlist_id JOIN Tracks AS PlaylistTracksTracks ON PlaylistTracks.track_id = PlaylistTracksTracks.track_id GROUP BY Users.user_id HAVING COUNT(DISTINCT Artists.artist_id) = ( SELECT COUNT(DISTINCT artist_id) FROM Artists ) AND SUM(PlaylistTracksTracks.duration) > 7200; -- 7200 seconds = 2 hours\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have a budget greater than $1 million and are targeting users with an interest in \"Sports\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have a budget greater than $1 million and are targeting users with an interest in \"Sports\":",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.budget > 1000000 AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.total_spent \nFROM Campaigns \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.budget > 1000000 AND Targeting_Options.option_value = 'Sports';",
    "prompt_token_number": 563,
    "response_token_number": 53
},
{
    "id": 33533,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Node': ['NodeID', 'IP', 'ConnectedNodeID', 'ValidationRate', 'IPAddress', 'ValidatedBlocks', 'ReputationScore'], 'Connection': ['Timestamp', 'NodeID', 'IPAddress', 'Direction', 'Duration', 'ConnectionID', 'Country', 'Status', 'BandwidthUsage', 'ToNodeID', 'Type', 'FromNodeID', 'Traffic']}. \n# the user question is: Find the top 10 nodes with the most recent connections in the last 24 hours:. \n#SQL query: SELECT Node.NodeID, MAX(Connection.Timestamp) AS LastConnection FROM Node JOIN Connection ON Node.NodeID = Connection.NodeID AND Connection.Timestamp >= datetime('now', '-24 hours') GROUP BY Node.NodeID ORDER BY LastConnection DESC LIMIT 10\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Mobile_Apps': ['mobile_app_id', 'category', 'name', 'title', 'downloads', 'available_on_apple_app_store', 'available_on_google_play', 'available_on_ios', 'available_on_android']} and \n# the user question: Retrieve the name and category of all mobile apps that have at least one ad placement for a campaign with a budget greater than $5 million and target users with an interest in \"Travel\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all mobile apps that have at least one ad placement for a campaign with a budget greater than $5 million and target users with an interest in \"Travel\":",
    "output": "SELECT Mobile_Apps.name, Mobile_Apps.category FROM Mobile_Apps JOIN Ad_Placements ON Mobile_Apps.mobile_app_id = Ad_Placements.mobile_app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 5000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Mobile_Apps": [
            "mobile_app_id",
            "category",
            "name",
            "title",
            "downloads",
            "available_on_apple_app_store",
            "available_on_google_play",
            "available_on_ios",
            "available_on_android"
        ]
    },
    "response_text": "SELECT Mobile_Apps.name, Mobile_Apps.category\nFROM Mobile_Apps\nJOIN Ad_Placements ON Mobile_Apps.mobile_app_id = Ad_Placements.mobile_app_id\nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.budget > 5000000 AND Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Travel'",
    "prompt_token_number": 464,
    "response_token_number": 101
},
{
    "id": 33534,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Token': ['TokenID', 'Name', 'Symbol', 'PriceUSD', 'CirculatingSupply', 'Price', 'PrevTokenPrice', 'Timestamp', 'BTC', 'ETH', 'USDT']}. \n# the user question is: Find the top 5 tokens with the largest market cap:. \n#SQL query: SELECT Token.Symbol, (Token.CirculatingSupply * Token.Price) AS MarketCap FROM Token ORDER BY MarketCap DESC LIMIT 5\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have a budget greater than $10 million and are targeting users with an age between 18 and 24:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have a budget greater than $10 million and are targeting users with an age between 18 and 24:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.budget > 10000000 AND Targeting_Options.targeting_type = 'age' AND Targeting_Options.option_value BETWEEN 18 AND 24 GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, (Campaigns.total_spent + Campaigns.daily_budget) AS total_cost\nFROM Campaigns\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.budget > 10000000 AND Targeting_Options.targeting_type = 'age' AND Targeting_Options.option_value BETWEEN 18 AND 24",
    "prompt_token_number": 368,
    "response_token_number": 76
},
{
    "id": 33535,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']}. \n# the user question is: Retrieve the name and total revenue of all products that have been sold at least once:. \n#SQL query: SELECT p.name, SUM(oi.quantity * oi.price) AS total_revenue FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Mobile_Apps': ['mobile_app_id', 'category', 'name', 'title', 'downloads', 'available_on_apple_app_store', 'available_on_google_play', 'available_on_ios', 'available_on_android'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have a budget greater than $1 million and have an ad placement on a mobile app with a category of \"Entertainment\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have a budget greater than $1 million and have an ad placement on a mobile app with a category of \"Entertainment\":",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Mobile_Apps ON Ad_Placements.mobile_app_id = Mobile_Apps.mobile_app_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.budget > 1000000 AND Mobile_Apps.category = 'Entertainment' GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Mobile_Apps": [
            "mobile_app_id",
            "category",
            "name",
            "title",
            "downloads",
            "available_on_apple_app_store",
            "available_on_google_play",
            "available_on_ios",
            "available_on_android"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT C.name, SUM(AP.cost_per_click * AS.clicks) AS total_cost \nFROM Campaigns C \nJOIN Ad_Placements AP ON C.campaign_id = AP.campaign_id \nJOIN Mobile_Apps MA ON AP.mobile_app_id = MA.mobile_app_id \nJOIN Ad_Statistics AS ON AP.ad_placement_id = AS.ad_placement_id\nWHERE C.budget > 1000000 AND MA.category = 'Entertainment' \nGROUP BY C.name;",
    "prompt_token_number": 477,
    "response_token_number": 94
},
{
    "id": 33536,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Illustrations': ['user_id', 'illustration_id', 'upload_date', 'title', 'price', 'category_id', 'discount', 'creation_date', 'artist_id', 'description'], 'Users': ['username', 'user_id', 'address_id', 'work_address_id', 'last_active_date', 'home_address_id', 'last_activity_date', 'registration_date', 'email', 'total_purchase_amount', 'user_type_id', 'country', 'name'], 'Illustration_tags': ['tag_name', 'tag_id', 'illustration_id'], 'Illustration_tag_map': ['tag_id', 'illustration_id'], 'Addresses': ['state_id', 'address_id', 'city', 'street_address', 'city_id', 'country_id'], 'Countries': ['country_name', 'country_id', 'population', 'continent', 'country_code', 'name', 'region_id'], 'Country_populations': ['population', 'country_id']}. \n# the user question is: Get the details of all illustrations that have been uploaded by users who live in a country that has a population of more than 100 million people and have been tagged with the tag 'portrait':. \n#SQL query: SELECT Illustrations.title, Users.username, Countries.country_name, Illustration_tags.tag_name FROM Illustrations INNER JOIN Users ON Illustrations.user_id = Users.user_id INNER JOIN Addresses ON Users.address_id = Addresses.address_id INNER JOIN Countries ON Addresses.country_id = Countries.country_id INNER JOIN Illustration_tag_map ON Illustrations.illustration_id = Illustration_tag_map.illustration_id INNER JOIN Illustration_tags ON Illustration_tag_map.tag_id = Illustration_tags.tag_id INNER JOIN Country_populations ON Countries.country_id = Country_populations.country_id WHERE Illustration_tags.tag_name = 'portrait' AND Country_populations.population > 100000000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have a budget greater than $10 million and are targeting users in the United States:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have a budget greater than $10 million and are targeting users in the United States:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.budget > 10000000 AND Targeting_Options.targeting_type = 'location' AND Targeting_Options.option_value = 'United States' GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.budget \nFROM Campaigns \nINNER JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.budget > 10000000 AND Targeting_Options.option_value = 'United States';",
    "prompt_token_number": 645,
    "response_token_number": 54
},
{
    "id": 33537,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'books': ['genre', 'title', 'publication_year', 'author', 'publisher', 'author_country', 'price', 'isbn', 'category', 'pub_date', 'author_id', 'rating', 'name', 'publisher_id', 'year_published', 'pages', 'author_name', 'id', 'num_ratings', 'category_id', 'book_published_date', 'book_price']}. \n# the user question is: Find the average rating of all books written by the author with ID 2.. \n#SQL query: SELECT AVG(rating) FROM books WHERE author_id = 2;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $3 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all websites that have at least one ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $3 million:",
    "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 3000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ]
    },
    "response_text": "SELECT Websites.name, Websites.category \nFROM Websites \nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 3000000;",
    "prompt_token_number": 406,
    "response_token_number": 81
},
{
    "id": 33538,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Attendee': ['attendee_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'date_of_birth', 'job_title', 'city', 'age', 'email'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID'], 'Payment': ['payment_id', 'registration_id', 'payment_date', 'amount', 'credit_card_id', 'payment_method_id', 'payment_type'], 'Event_Session': ['session_type_id', 'event_id', 'session_id', 'speaker_id', 'rating', 'price'], 'Session_Type': ['session_type_name', 'session_type_id'], 'Event_Session_Attendee': ['registration_id', 'session_id', 'event_id', 'attendee_id', 'rating'], 'Credit_Card': ['card_type', 'credit_card_id']}. \n# the user question is: What are the names and email addresses of attendees who have registered for events with a \"Q&A Session\" session type and have also made a payment using a Visa card?. \n#SQL query: SELECT Attendee.first_name, Attendee.last_name, Attendee.email_address FROM Attendee INNER JOIN Registration ON Attendee.attendee_id = Registration.attendee_id INNER JOIN Payment ON Registration.registration_id = Payment.registration_id INNER JOIN Credit_Card ON Payment.credit_card_id = Credit_Card.credit_card_id INNER JOIN Event_Session_Attendee ON Registration.registration_id = Event_Session_Attendee.registration_id INNER JOIN Event_Session ON Event_Session_Attendee.session_id = Event_Session.session_id INNER JOIN Session_Type ON Event_Session.session_type_id = Session_Type.session_type_id WHERE Session_Type.session_type_name = 'Q&A Session' AND Credit_Card.card_type = 'Visa' GROUP BY Attendee.first_name, Attendee.last_name, Attendee.email_address;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have a budget greater than $5 million and have at least one ad placement on a website with a category of \"News\":,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have a budget greater than $5 million and have at least one ad placement on a website with a category of \"News\":",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.budget > 5000000 AND Websites.category = 'News' GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.total_spent FROM Campaigns INNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id INNER JOIN Websites ON Ad_Placements.website_id = Websites.website_id WHERE Campaigns.budget > 5000000 AND Websites.category = 'News' GROUP BY Campaigns.name, Campaigns.total_spent;",
    "prompt_token_number": 700,
    "response_token_number": 73
},
{
    "id": 33539,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Product': ['SegmentID', 'ProductName', 'ProductID', 'CompanyID', 'UnitsInStock', 'UnitPrice', 'Category', 'Price', 'Cost', 'CategoryID', 'CurrentInventoryLevel', 'UnitCost', 'Description', 'Discontinued', 'CategoryName', 'SupplierID', 'CostPrice', 'ReorderPoint', 'DiscontinuedDate', 'SubcategoryID', 'SalesPrice', 'QuantityOnHand', 'PromotionID'], 'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID'], 'Company': ['IndustryID', 'CompanyName', 'CompanyID', 'Continent'], 'SalesOrderLineItem': ['ProductID', 'UnitPrice', 'Quantity', 'OrderID', 'OrderDate', 'Price', 'OrderLineID']}. \n# the user question is: Retrieve the list of products and their respective companies with the highest total revenue in the year 2023, where the product category is 'Electronics' and the unit price is greater than $1000, sorted by revenue in descending order:. \n#SQL query: SELECT Product.ProductName, Company.CompanyName, SUM(SalesOrderLineItem.Quantity * SalesOrderLineItem.UnitPrice) as TotalRevenue FROM Product JOIN SalesOrderLineItem ON Product.ProductID = SalesOrderLineItem.ProductID JOIN SalesOrder ON SalesOrderLineItem.OrderID = SalesOrder.OrderID JOIN Company ON Product.CompanyID = Company.CompanyID WHERE SalesOrder.Year = 2023 AND Product.Category = 'Electronics' AND SalesOrderLineItem.UnitPrice > 1000 GROUP BY Product.ProductID, Company.CompanyID ORDER BY TotalRevenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Mobile_Apps': ['mobile_app_id', 'category', 'name', 'title', 'downloads', 'available_on_apple_app_store', 'available_on_google_play', 'available_on_ios', 'available_on_android']} and \n# the user question: Retrieve the name and category of all mobile apps that have at least one ad placement for a campaign with a budget greater than $8 million and target users in the United States:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and category of all mobile apps that have at least one ad placement for a campaign with a budget greater than $8 million and target users in the United States:",
    "output": "SELECT Mobile_Apps.name, Mobile_Apps.category FROM Mobile_Apps JOIN Ad_Placements ON Mobile_Apps.mobile_app_id = Ad_Placements.mobile_app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'location' AND Targeting_Options.option_value = 'United States' AND Campaigns.budget > 8000000 AND Campaigns.status = 'active';",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Targeting_Options": [
            "targeting_type",
            "campaign_id",
            "option_value"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Mobile_Apps": [
            "mobile_app_id",
            "category",
            "name",
            "title",
            "downloads",
            "available_on_apple_app_store",
            "available_on_google_play",
            "available_on_ios",
            "available_on_android"
        ]
    },
    "response_text": "SELECT Mobile_Apps.name, Mobile_Apps.category \nFROM Mobile_Apps \nJOIN Ad_Placements ON Mobile_Apps.mobile_app_id = Ad_Placements.mobile_app_id \nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id \nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE Campaigns.budget > 8000000 \nAND Targeting_Options.option_value = 'United States' \nGROUP BY Mobile_Apps.mobile_app_id;\n",
    "prompt_token_number": 691,
    "response_token_number": 102
},
{
    "id": 33541,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Therapist_Specialties': ['therapist_id', 'specialty', 'specialty_id'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id']}. \n# the user question is: Retrieve the names of all clients who have attended a session with a therapist who has a specialty in either Cognitive Behavioral Therapy or Dialectical Behavior Therapy, and the date of the last session they attended:. \n#SQL query: SELECT DISTINCT c.name, MAX(s.date) AS last_session_date FROM Clients c INNER JOIN Session_Attendees sa ON c.id = sa.client_id INNER JOIN Sessions s ON sa.session_id = s.id INNER JOIN Therapists t ON s.therapist_id = t.id INNER JOIN Therapist_Specialties ts ON t.id = ts.therapist_id WHERE ts.specialty IN ('Cognitive Behavioral Therapy', 'Dialectical Behavior Therapy') GROUP BY c.id\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and have a daily budget greater than $10,000:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and have a daily budget greater than $10,000:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.daily_budget > 10000 AND Websites.category = 'Fashion' GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT DISTINCT c.name, c.total_spent FROM Campaigns c INNER JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id INNER JOIN Websites w ON ap.website_id = w.website_id WHERE w.category = 'Fashion' AND c.daily_budget > 10000",
    "prompt_token_number": 777,
    "response_token_number": 56
},
{
    "id": 33551,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Practitioners': ['practitioner_id', 'belt_rank', 'martial_art_id', 'dojo_id', 'practitioner_name', 'age'], 'Tournaments': ['tournament_name', 'location', 'end_date', 'start_date', 'tournament_id', 'martial_art_id', 'duration'], 'Matches': ['match_id', 'martial_art_id', 'winner_id', 'tournament_id', 'match_date', 'practitioner_id', 'num_rounds', 'match_duration', 'num_participants']}. \n# the user question is: Retrieve the names of all tournaments along with the average age of the participants in each tournament, sorted in descending order of the average age:. \n#SQL query: SELECT t.tournament_name, AVG(p.age) AS average_age FROM Tournaments t JOIN Matches m ON t.tournament_id = m.tournament_id JOIN Practitioners p ON m.practitioner_id = p.practitioner_id GROUP BY t.tournament_name ORDER BY average_age DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Mobile_Apps': ['mobile_app_id', 'category', 'name', 'title', 'downloads', 'available_on_apple_app_store', 'available_on_google_play', 'available_on_ios', 'available_on_android'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement for a mobile app with a category of \"Shopping\" and have a daily budget greater than $2,000:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement for a mobile app with a category of \"Shopping\" and have a daily budget greater than $2,000:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Mobile_Apps ON Ad_Placements.mobile_app_id = Mobile_Apps.mobile_app_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.daily_budget > 2000 AND Mobile_Apps.category = 'Shopping' GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Mobile_Apps": [
            "mobile_app_id",
            "category",
            "name",
            "title",
            "downloads",
            "available_on_apple_app_store",
            "available_on_google_play",
            "available_on_ios",
            "available_on_android"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT c.name, c.total_spent \nFROM Campaigns c \nJOIN Ad_Placements a ON c.campaign_id = a.campaign_id \nJOIN Mobile_Apps m ON a.mobile_app_id = m.mobile_app_id \nWHERE m.category = 'Shopping' AND c.daily_budget > 2000 \nGROUP BY c.name \nHAVING COUNT(a.ad_placement_id) > 0;",
    "prompt_token_number": 517,
    "response_token_number": 79
},
{
    "id": 33553,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Ingredients': ['Ingredient_ID', 'Ingredient_name', 'Supplier_ID', 'Unit_ID', 'Price_per_unit', 'Unit_of_measurement', 'Unit_price', 'Date_last_purchased', 'Date_supplied', 'Description', 'Unit', 'Cost_per_unit', 'Stock_quantity', 'Quantity', 'Unit_of_measure'], 'Menu_Items': ['Menu_Item_ID', 'Menu_Item_name', 'Description', 'Price', 'Availability', 'Recipe_ID', 'Category_ID', 'Restaurant_ID', 'Vegetarian', 'Calories', 'Menu_Category_ID'], 'Menu_Item_Ingredients': ['Menu_Item_ID', 'Quantity', 'Ingredient_ID']}. \n# the user question is: Retrieve the name and price of the most expensive menu item that contains the ingredient 'lobster'.. \n#SQL query: SELECT Menu_Items.Menu_Item_name, Menu_Items.Price FROM Menu_Items JOIN Menu_Item_Ingredients ON Menu_Items.Menu_Item_ID = Menu_Item_Ingredients.Menu_Item_ID JOIN Ingredients ON Menu_Item_Ingredients.Ingredient_ID = Ingredients.Ingredient_ID WHERE Ingredients.Ingredient_name = 'lobster' ORDER BY Menu_Items.Price DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Education\" and have spent more than $2 million on advertising:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Education\" and have spent more than $2 million on advertising:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 2000000 AND Websites.category = 'Education' GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.total_spent \nFROM Campaigns \nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nJOIN Websites ON Ad_Placements.website_id = Websites.website_id \nWHERE Websites.category = 'Education' AND Campaigns.total_spent > 2000000;",
    "prompt_token_number": 524,
    "response_token_number": 65
},
{
    "id": 33554,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Product': ['SegmentID', 'ProductName', 'ProductID', 'CompanyID', 'UnitsInStock', 'UnitPrice', 'Category', 'Price', 'Cost', 'CategoryID', 'CurrentInventoryLevel', 'UnitCost', 'Description', 'Discontinued', 'CategoryName', 'SupplierID', 'CostPrice', 'ReorderPoint', 'DiscontinuedDate', 'SubcategoryID', 'SalesPrice', 'QuantityOnHand', 'PromotionID'], 'Supplier': ['SupplierID', 'SupplierName', 'CompanyName']}. \n# the user question is: Retrieve the list of all suppliers who have supplied products in all categories, including their name and the total number of categories they supplied products to:. \n#SQL query: SELECT Supplier.CompanyName, COUNT(DISTINCT Product.Category) AS TotalCategoriesSupplied FROM Supplier JOIN Product ON Supplier.SupplierID = Product.SupplierID GROUP BY Supplier.SupplierID HAVING COUNT(DISTINCT Product.Category) = ( SELECT COUNT(DISTINCT Category) FROM Product );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain that contains the word \"travel\" and have spent more than $500,000 on advertising:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain that contains the word \"travel\" and have spent more than $500,000 on advertising:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 500000 AND Websites.domain LIKE '%travel%' GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click*Ad_Statistics.clicks) as TotalCost\nFROM Campaigns\nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id\nJOIN Websites ON Ad_Placements.website_id = Websites.website_id\nJOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id\nWHERE Websites.domain LIKE '%travel%' \nGROUP BY Campaigns.name\nHAVING TotalCost > 500000;",
    "prompt_token_number": 501,
    "response_token_number": 101
},
{
    "id": 33557,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'plants': ['name', 'id', 'category_id', 'updated_at', 'created_at', 'description', 'min_temp', 'max_temp', 'water_requirement', 'light_requirement', 'watering_schedule', 'width', 'height', 'flowering', 'min_temp_tolerance', 'max_temp_tolerance', 'category', 'spacing_requirement', 'bloomed', 'water_usage', 'last_watered', 'sun_exposure', 'price', 'plant_date', 'harvest_date', 'bed_id', 'suitable_exposure', 'Rosemary', 'is_edible', 'species', 'plant_name', 'soil_type', 'bloom_time', 'max_height', 'flowering_season', 'plant_type', 'sunlight', 'garden_id', 'soil_ph'], 'plant_varieties': ['variety', 'id', 'Tomato', 'Roma', 'plant_id', 'updated_at', 'created_at', 'description', 'name', 'price'], 'garden_plants': ['garden_id', 'plant_id', 'variety_id', 'id', 'updated_at', 'quantity', 'created_at', 'description', 'name', 'plant_variety_id', 'planted_on', 'plant_density', 'garden_bed_id', 'last_watered'], 'task_assignments': ['updated_at', 'task_id', 'created_at', 'assigned_to', 'due_date', 'garden_id', 'completed_at', 'id', 'garden_plant_id', 'status', 'task_type', 'plant_variety_id'], 'tasks': ['name', 'id', 'updated_at', 'description', 'created_at', 'garden_id', 'due_date', 'type', 'priority']}. \n# the user question is: Retrieve the names of all the plants that have a variety containing the word \"lavender\" and have a task assignment with a status of \"Late\".. \n#SQL query: SELECT DISTINCT plants.name FROM plants JOIN garden_plants ON plants.id = garden_plants.plant_id JOIN task_assignments ON garden_plants.id = task_assignments.garden_plant_id JOIN tasks ON task_assignments.task_id = tasks.id JOIN plant_varieties ON plants.id = plant_varieties.plant_id WHERE plant_varieties.variety LIKE '%Lavender%' AND task_assignments.status = 'Late';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain that contains the word \"shopping\" and have spent more than $1 million on advertising:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain that contains the word \"shopping\" and have spent more than $1 million on advertising:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 1000000 AND Websites.domain LIKE '%shopping%' GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT DISTINCT Campaigns.name, Campaigns.total_spent \nFROM Campaigns \nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nJOIN Websites ON Ad_Placements.website_id = Websites.website_id \nWHERE Websites.domain LIKE '%shopping%' AND Campaigns.total_spent > 1000000;",
    "prompt_token_number": 788,
    "response_token_number": 66
},
{
    "id": 33560,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'patients': ['first_name', 'last_name', 'patient_id', 'phone_number', 'email', 'phone'], 'prescription': ['patient_id', 'prescription_id', 'prescription_date', 'type', 'practitioner_id'], 'prescription_items': ['formula_id', 'prescription_id'], 'herbal_formulas': ['formula_id', 'formula_name', 'price', 'num_ingredients', 'ingredients', 'name']}. \n# the user question is: Retrieve the names and email addresses of patients who have been prescribed an herbal formula that contains both \"Bai Shao\" and \"Chai Hu\":. \n#SQL query: SELECT DISTINCT p.first_name, p.last_name, p.email FROM patients p JOIN prescription pr ON p.patient_id = pr.patient_id JOIN prescription_items pi ON pr.prescription_id = pi.prescription_id JOIN herbal_formulas hf ON pi.formula_id = hf.formula_id WHERE hf.ingredients LIKE '%Bai Shao%' AND hf.ingredients LIKE '%Chai Hu%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain that contains the word \"tech\" and have spent more than $1 million on advertising:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain that contains the word \"tech\" and have spent more than $1 million on advertising:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 1000000 AND Websites.domain LIKE '%tech%' GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT DISTINCT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id WHERE w.domain LIKE '%tech%' AND c.total_spent > 1000000;",
    "prompt_token_number": 503,
    "response_token_number": 57
},
{
    "id": 33564,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Client': ['client_id', 'name', 'email', 'phone_number', 'industry_id', 'location_id', 'industry', 'budget', 'first_name', 'last_name', 'state', 'city', 'company_name', 'annual_revenue'], 'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months']}. \n# the user question is: Retrieve the names and phone numbers of all clients who have sponsored campaigns with a duration longer than 3 months:. \n#SQL query: SELECT DISTINCT Client.company_name, Client.phone_number FROM Client INNER JOIN Campaign ON Client.client_id = Campaign.client_id WHERE Campaign.duration_months > 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain ending in \".com\" and have spent more than $500,000 on advertising:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain ending in \".com\" and have spent more than $500,000 on advertising:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 500000 AND Websites.domain LIKE '%.com' GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT DISTINCT Campaigns.name, Campaigns.total_spent FROM Campaigns INNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id INNER JOIN Websites ON Ad_Placements.website_id = Websites.website_id WHERE Websites.domain LIKE '%.com' AND Campaigns.total_spent > 500000;",
    "prompt_token_number": 495,
    "response_token_number": 64
},
{
    "id": 33566,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Polymorphism': ['gene_id', 'position', 'reference_sequence', 'alternate_sequence', 'polymorphism_id', 'frequency']}. \n# the user question is: Retrieve the names of all genes and their associated polymorphisms that have a frequency less than 0.004% and are located on chromosome 191.. \n#SQL query: SELECT Gene.gene_name, Polymorphism.polymorphism_id FROM Gene JOIN Polymorphism ON Gene.gene_id = Polymorphism.gene_id WHERE Polymorphism.frequency < 0.00004 AND Gene.chromosome_id = 191;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Travel\" and have spent more than $1 million on advertising in the past month:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Travel\" and have spent more than $1 million on advertising in the past month:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 1000000 AND Websites.category = 'Travel' AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.total_spent \nFROM Campaigns \nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nJOIN Websites ON Ad_Placements.website_id = Websites.website_id \nWHERE Websites.category = 'Travel' AND Campaigns.total_spent > 1000000;",
    "prompt_token_number": 485,
    "response_token_number": 65
},
{
    "id": 33567,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Transaction': ['BlockID', 'Recipient', 'Sender', 'PublicAddress', 'TransactionID', 'Amount', 'Fee', 'Timestamp', 'GasFee', 'GasUsed', 'GasLimit', 'GasPrice', 'EtherAmount', 'IsSuccess', 'Value', 'Currency', 'NodeID', 'SmartContractInstanceID', 'SenderWalletID', 'RecipientWalletID', 'ReceiverWalletID', 'ConfirmationTime', 'TokenID', 'FromWalletID', 'ToWalletID', 'Status', 'Type', 'ReceiverID', 'SenderID']}. \n# the user question is: Find the top 5 most expensive transactions by gas cost in the past week:. \n#SQL query: SELECT Transaction.TransactionID, Transaction.GasPrice * Transaction.GasLimit AS GasCost FROM Transaction WHERE Transaction.Timestamp > datetime('now', '-7 days') ORDER BY GasCost DESC LIMIT 5\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and have spent more than $500,000 on advertising in the past month:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and have spent more than $500,000 on advertising in the past month:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 500000 AND Websites.category = 'Fashion' AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.total_spent \nFROM Campaigns \nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nJOIN Websites ON Ad_Placements.website_id = Websites.website_id \nWHERE Websites.category = 'Fashion' AND Campaigns.total_spent > 500000 AND Campaigns.start_date > DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)",
    "prompt_token_number": 478,
    "response_token_number": 80
},
{
    "id": 33569,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Menu_Items': ['Menu_Item_ID', 'Menu_Item_name', 'Description', 'Price', 'Availability', 'Recipe_ID', 'Category_ID', 'Restaurant_ID', 'Vegetarian', 'Calories', 'Menu_Category_ID'], 'Order_Items': ['Order_Item_ID', 'Order_ID', 'Menu_Item_ID', 'Quantity', 'Menu_Item_I'], 'Restaurants': ['Restaurant_ID', 'Restaurant_name', 'City_ID', 'City']}. \n# the user question is: Retrieve the name and total sales for each restaurant, sorted in descending order by total sales.. \n#SQL query: SELECT Restaurants.Restaurant_name, SUM(Order_Items.Quantity * Menu_Items.Price) AS Total_sales FROM Restaurants LEFT JOIN Menu_Items ON Restaurants.Restaurant_ID = Menu_Items.Restaurant_ID LEFT JOIN Order_Items ON Menu_Items.Menu_Item_ID = Order_Items.Menu_Item_ID GROUP BY Restaurants.Restaurant_ID ORDER BY Total_sales DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Technology\" and have spent more than $2 million on advertising in the past month:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Technology\" and have spent more than $2 million on advertising in the past month:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 2000000 AND Websites.category = 'Technology' AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS Total_cost\nFROM Campaigns\nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id\nJOIN Websites ON Ad_Placements.website_id = Websites.website_id\nJOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id\nWHERE Websites.category = 'Technology' AND Campaigns.total_spent > 2000000 AND Campaigns.start_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() \nGROUP BY Campaigns.name\nHAVING Total_cost > 0;",
    "prompt_token_number": 479,
    "response_token_number": 132
},
{
    "id": 33572,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Network_Interfaces': ['interface_id', 'device_id', 'interface_name', 'ip_address', 'subnet_mask', 'mac_address', 'default_gateway', 'vlan_tag', 'interface_type', 'bandwidth', 'link_speed', 'ip_address_type', 'mtu', 'dns_server', 'ip_mode', 'vlan_id', 'link_status', 'speed', 'interface_speed', 'status', 'last_activity_time'], 'Firewall_Rules': ['rule_id', 'device_id', 'source_ip', 'destination_ip', 'protocol', 'action', 'destination_port', 'status', 'source_port', 'source_ip_address', 'destination_ip_address', 'rule_action'], 'Scans': ['scan_id', 'scanner_id', 'device_id', 'start_time', 'end_time']}. \n# the user question is: Find all devices that have at least one open port on port range 500-501 (ISAKMP) and have not been scanned in the last 1100 days, sorted by IP address in ascending order.. \n#SQL query: SELECT DISTINCT ni.ip_address FROM Network_Interfaces ni INNER JOIN Firewall_Rules fr ON ni.ip_address = fr.destination_ip LEFT JOIN Scans s ON ni.device_id = s.device_id AND s.end_time >= date('now', '-1100 days') WHERE fr.destination_port >= 500 AND fr.destination_port <= 501 AND fr.action = 'allow' AND s.scan_id IS NULL ORDER BY ni.ip_address ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain containing the string \"finance\" and have spent more than $2 million on advertising in the past month:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain containing the string \"finance\" and have spent more than $2 million on advertising in the past month:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 2000000 AND Websites.domain LIKE '%finance%' AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT c.name, c.total_spent \nFROM Campaigns c \nINNER JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id \nINNER JOIN Websites w ON ap.website_id = w.website_id \nWHERE w.domain LIKE '%finance%' AND c.total_spent > 2000000 AND c.start_date >= date('now', '-1 month') \nGROUP BY c.name, c.total_spent;",
    "prompt_token_number": 600,
    "response_token_number": 85
},
{
    "id": 33577,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Variation': ['gene_id', 'position', 'variation_type', 'frequency', 'variant_frequency', 'variant_id', 'variant_name', 'Type', 'Gene_ID', 'Frequency', 'ID'], 'Transcript': ['gene_id', 'coding_sequence_end', 'transcript_name', 'transcript_id', 'protein_id', 'coding_sequence_length', 'transcript_length', 'length', 'cds_length']}. \n# the user question is: Retrieve the names of all genes and their associated transcripts that have a variation of type \"missense\" and are located on chromosome 103.. \n#SQL query: SELECT Gene.gene_name, Transcript.transcript_name FROM Gene JOIN Transcript ON Gene.gene_id = Transcript.gene_id JOIN Variation ON Gene.gene_id = Variation.gene_id WHERE Variation.variation_type = 'missense' AND Variation.position BETWEEN Gene.start_position AND Gene.end_position AND Gene.chromosome_id = 103;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Travel\" and have spent more than $500,000 on advertising in the past week:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Travel\" and have spent more than $500,000 on advertising in the past week:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 500000 AND Websites.category = 'Travel' AND Ad_Statistics.date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.total_spent \nFROM Campaigns \nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nJOIN Websites ON Ad_Placements.website_id = Websites.website_id \nWHERE Websites.category = 'Travel' AND Campaigns.total_spent > 500000 AND Campaigns.start_date > DATE_SUB(NOW(), INTERVAL 1 WEEK);",
    "prompt_token_number": 557,
    "response_token_number": 79
},
{
    "id": 33585,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Director': ['director_id', 'name', 'gender', 'has_won_academy_award', 'director_name', 'birth_year'], 'Actor': ['actor_id', 'name', 'actor_name'], 'Movie_Actor': ['movie_id', 'actor_id'], 'Rating': ['rating_id', 'movie_id', 'source', 'rating_value', 'rating']}. \n# the user question is: Retrieve the title of the movie, the name of the lead actor, and the release year for all movies that had a rating value from IMDb greater than 9 and were directed by Quentin Tarantino.. \n#SQL query: SELECT Movie.title, Actor.name, Movie.release_year FROM Movie JOIN Movie_Actor ON Movie.movie_id = Movie_Actor.movie_id JOIN Actor ON Movie_Actor.actor_id = Actor.actor_id JOIN Director ON Movie.director_id = Director.director_id JOIN Rating ON Movie.movie_id = Rating.movie_id WHERE Rating.source = 'IMDb' AND Rating.rating_value > 9 AND Director.name = 'Quentin Tarantino';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Mobile_Apps': ['mobile_app_id', 'category', 'name', 'title', 'downloads', 'available_on_apple_app_store', 'available_on_google_play', 'available_on_ios', 'available_on_android'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a mobile app with a category of \"Games\" and have spent more than $1 million on advertising in the past month:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a mobile app with a category of \"Games\" and have spent more than $1 million on advertising in the past month:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Mobile_Apps ON Ad_Placements.mobile_app_id = Mobile_Apps.mobile_app_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 1000000 AND Mobile_Apps.category = 'Games' AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Mobile_Apps": [
            "mobile_app_id",
            "category",
            "name",
            "title",
            "downloads",
            "available_on_apple_app_store",
            "available_on_google_play",
            "available_on_ios",
            "available_on_android"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.total_spent FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Mobile_Apps ON Ad_Placements.mobile_app_id = Mobile_Apps.mobile_app_id WHERE Mobile_Apps.category = 'Games' AND Campaigns.total_spent > 1000000;",
    "prompt_token_number": 566,
    "response_token_number": 69
},
{
    "id": 33589,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Order_Items': ['price', 'quantity', 'order_id', 'book_id', 'customer_id', 'publisher_id', 'is_returned', 'product_id', 'is_delivered', 'total_price', 'order_date']}. \n# the user question is: Retrieve the titles of books that have been ordered by at least 5 different customers.. \n#SQL query: SELECT title FROM Books WHERE book_id IN ( SELECT book_id FROM Order_Items GROUP BY book_id HAVING COUNT(DISTINCT customer_id) >= 5 );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement with a cost per click greater than $3.00 and have spent more than $2 million on advertising in the past month:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement with a cost per click greater than $3.00 and have spent more than $2 million on advertising in the past month:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 2000000 AND Ad_Placements.cost_per_click > 3.00 AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT name, total_spent \nFROM Campaigns \nWHERE Campaigns.campaign_id IN (\n    SELECT Ad_Placements.campaign_id \n    FROM Ad_Placements \n    WHERE cost_per_click > 3.00\n) AND total_spent > 2000000 AND end_date > DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);",
    "prompt_token_number": 477,
    "response_token_number": 70
},
{
    "id": 33590,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']}. \n# the user question is: Find the users who have enrolled in classes at every available time slot.. \n#SQL query: SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id WHERE Classes.is_available = 1 GROUP BY Users.user_id HAVING COUNT(DISTINCT Classes.start_time) = (SELECT COUNT(DISTINCT Classes.start_time) FROM Classes WHERE is_available = 1);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the total number of impressions and the total cost for each campaign that has at least one ad placement on a website with a domain containing the string \"news\" and have spent more than $500,000 on advertising in the past week:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the total number of impressions and the total cost for each campaign that has at least one ad placement on a website with a domain containing the string \"news\" and have spent more than $500,000 on advertising in the past week:",
    "output": "SELECT Campaigns.name, SUM(Ad_Statistics.impressions) AS total_impressions, SUM(Ad_Placements.cost_per_impression * Ad_Statistics.impressions) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 500000 AND Websites.domain LIKE '%news%' AND Ad_Statistics.date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, SUM(Ad_Statistics.impressions) AS total_impressions, SUM(Ad_Placements.cost_per_impression) AS total_cost\nFROM Campaigns \nINNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id\nINNER JOIN Websites ON Ad_Placements.website_id = Websites.website_id\nINNER JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id\nWHERE Websites.domain LIKE '%news%' AND Campaigns.total_spent > 500000 AND Campaigns.start_date > DATE_SUB(NOW(), INTERVAL 1 WEEK)\nGROUP BY Campaigns.campaign_id;",
    "prompt_token_number": 643,
    "response_token_number": 130
},
{
    "id": 33591,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'UserPlaylists': ['playlist_id', 'user_id', 'creation_date'], 'Users': ['username', 'user_id'], 'Tracks': ['track_id', 'track_title', 'duration', 'album_id', 'track_name', 'genre_id', 'rating', 'artist_id', 'release_id'], 'UserFavorites': ['track_id', 'user_id', 'genre_id', 'favorite_date']}. \n# the user question is: Retrieve the tracks that have been favorited by all users who have created playlists:. \n#SQL query: SELECT Tracks.track_name FROM Tracks JOIN UserFavorites ON Tracks.track_id = UserFavorites.track_id JOIN Users ON UserFavorites.user_id = Users.user_id JOIN UserPlaylists ON Users.user_id = UserPlaylists.user_id GROUP BY Tracks.track_id HAVING COUNT(DISTINCT Users.user_id) = ( SELECT COUNT(DISTINCT Users.user_id) FROM Users JOIN UserPlaylists ON Users.user_id = UserPlaylists.user_id );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement with a cost per click greater than $2.50 and have spent more than $1 million on advertising in the past month:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement with a cost per click greater than $2.50 and have spent more than $1 million on advertising in the past month:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 1000000 AND Ad_Placements.cost_per_click > 2.50 AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.total_spent \nFROM Campaigns \nJOIN Ad_Placements \nON Campaigns.campaign_id = Ad_Placements.campaign_id \nWHERE Ad_Placements.cost_per_click > 2.50 \nAND Campaigns.total_spent > 1000000 \nGROUP BY Campaigns.campaign_id \nHaving COUNT(Ad_Placements.ad_placement_id) >= 1;",
    "prompt_token_number": 462,
    "response_token_number": 81
},
{
    "id": 33592,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Participants': ['first_name', 'last_name', 'participant_id', 'gender', 'age', 'birth_year', 'date_of_birth', 'ag', 'age_group_id', 'parental_edu_id', 'language_group_id'], 'Participant_Milestones': ['participant_id', 'milestone_target_date', 'milestone_id']}. \n# the user question is: Retrieve the names and ages of all participants who have not achieved any milestones:. \n#SQL query: SELECT Participants.first_name, Participants.last_name, Participants.age FROM Participants LEFT JOIN Participant_Milestones ON Participants.participant_id = Participant_Milestones.participant_id WHERE Participant_Milestones.milestone_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Mobile_Apps': ['mobile_app_id', 'category', 'name', 'title', 'downloads', 'available_on_apple_app_store', 'available_on_google_play', 'available_on_ios', 'available_on_android'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the total number of clicks and the total cost for each campaign that has at least one ad placement on a mobile app with a category of \"Entertainment\" and have spent more than $500,000 on advertising in the past week:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the total number of clicks and the total cost for each campaign that has at least one ad placement on a mobile app with a category of \"Entertainment\" and have spent more than $500,000 on advertising in the past week:",
    "output": "SELECT Campaigns.name, SUM(Ad_Statistics.clicks) AS total_clicks, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Mobile_Apps ON Ad_Placements.mobile_app_id = Mobile_Apps.mobile_app_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 500000 AND Mobile_Apps.category = 'Entertainment' AND Ad_Statistics.date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Mobile_Apps": [
            "mobile_app_id",
            "category",
            "name",
            "title",
            "downloads",
            "available_on_apple_app_store",
            "available_on_google_play",
            "available_on_ios",
            "available_on_android"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.campaign_id, SUM(Ad_Statistics.clicks) AS total_clicks, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost\nFROM Campaigns\nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id\nJOIN Mobile_Apps ON Ad_Placements.mobile_app_id = Mobile_Apps.mobile_app_id\nJOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id\nWHERE Mobile_Apps.category = 'Entertainment' AND Campaigns.total_spent > 500000 AND Ad_Statistics.date >= DATE(NOW()) - INTERVAL 7 DAY\nGROUP BY Campaigns.campaign_id;\n",
    "prompt_token_number": 457,
    "response_token_number": 143
},
{
    "id": 33596,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'UserPlaylists': ['playlist_id', 'user_id', 'creation_date'], 'Users': ['username', 'user_id'], 'Artists': ['artist_name', 'artist_id', 'artist_genre', 'artist_country', 'country_id', 'genre_id'], 'Tracks': ['track_id', 'track_title', 'duration', 'album_id', 'track_name', 'genre_id', 'rating', 'artist_id', 'release_id'], 'PlaylistTracks': ['track_id', 'playlist_id']}. \n# the user question is: Retrieve the users who have created playlists containing tracks from at least 3 different artists and have a total playlist duration exceeding 3 hours:. \n#SQL query: SELECT Users.username FROM Users JOIN UserPlaylists ON Users.user_id = UserPlaylists.user_id JOIN PlaylistTracks ON UserPlaylists.playlist_id = PlaylistTracks.playlist_id JOIN Tracks ON PlaylistTracks.track_id = Tracks.track_id JOIN Artists ON Tracks.artist_id = Artists.artist_id GROUP BY Users.user_id HAVING COUNT(DISTINCT Artists.artist_id) >= 3 AND SUM(Tracks.duration) > 10800; -- 10800 seconds = 3 hours\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the total number of clicks and the total cost for each campaign that has at least one ad placement with a cost per impression greater than $0.50 and have spent more than $500,000 on advertising in the past month:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the total number of clicks and the total cost for each campaign that has at least one ad placement with a cost per impression greater than $0.50 and have spent more than $500,000 on advertising in the past month:",
    "output": "SELECT Campaigns.name, SUM(Ad_Statistics.clicks) AS total_clicks, SUM(Ad_Placements.cost_per_impression * Ad_Statistics.impressions) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 500000 AND Ad_Placements.cost_per_impression > 0.50 AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, SUM(Ad_Statistics.clicks) AS Total_Clicks, SUM(Ad_Statistics.clicks*Ad_Placements.cost_per_click) AS Total_Cost \nFROM Campaigns \nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nJOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id\nWHERE Ad_Placements.cost_per_impression > 0.50 AND (Campaigns.total_spent > 500000) \nAND DATE_PART('month', Campaigns.end_date) = DATE_PART('month', current_date - INTERVAL '1 month')\nGROUP BY Campaigns.name;",
    "prompt_token_number": 505,
    "response_token_number": 136
},
{
    "id": 33600,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Match': ['team1_id', 'match_id', 'team2_id', 'venue_id', 'date', 'venue', 'winning_team_id', 'tournament_id', 'attendance', 'team', 'winning_team'], 'Referee': ['referee_name', 'referee_id'], 'Referee_Assignment': ['match_id', 'referee_id'], 'Venue': ['venue_name', 'venue_id', 'country', 'city'], 'Tournament': ['tournament_id', 'country', 'tournament_name', 'start_date', 'venue_id']}. \n# the user question is: Find the referees who have officiated matches in tournaments held in at least 39 different cities and 39 different years. \n#SQL query: SELECT Referee.referee_name FROM Referee JOIN Referee_Assignment ON Referee.referee_id = Referee_Assignment.referee_id JOIN Match ON Referee_Assignment.match_id = Match.match_id JOIN Tournament ON Match.tournament_id = Tournament.tournament_id JOIN Venue ON Tournament.venue_id = Venue.venue_id GROUP BY Referee.referee_name HAVING COUNT(DISTINCT Venue.city) >= 39 AND COUNT(DISTINCT strftime('%Y', Tournament.start_date)) >= 39;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that is not based in the United States and have spent more than $250,000 on advertising in the past week:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that is not based in the United States and have spent more than $250,000 on advertising in the past week:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_impression * Ad_Statistics.impressions) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 250000 AND Websites.country <> 'United States' AND Ad_Statistics.date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost\nFROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nJOIN Websites ON Ad_Placements.website_id = Websites.website_id\nJOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id\nWHERE Websites.country != 'United States' \nAND Campaigns.start_date >= DATE('now', '-7 days')\nAND total_cost > 250000\nGROUP BY Campaigns.name\nHAVING COUNT(Ad_Placements.ad_placement_id) > 0;",
    "prompt_token_number": 548,
    "response_token_number": 129
},
{
    "id": 33606,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months'], 'Employee': ['employee_id', 'first_name', 'last_name', 'email', 'phone_number', 'title', 'department_id', 'job_id', 'salary', 'address_id', 'Email', 'Hire_Date', 'Employee_Name', 'Department_ID'], 'Task': ['task_id', 'description', 'deadline', 'employee_id', 'campaign_id', 'completed', 'priority', 'completion_date', 'completed_date']}. \n# the user question is: Retrieve the names and email addresses of all employees who have completed tasks for campaigns that started before January 1, 2022:. \n#SQL query: SELECT DISTINCT Employee.first_name, Employee.last_name, Employee.email FROM Employee INNER JOIN Task ON Employee.employee_id = Task.employee_id INNER JOIN Campaign ON Task.campaign_id = Campaign.campaign_id WHERE Campaign.start_date < '2022-01-01';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with the word \"fashion\" in the URL and have spent more than $100,000 in the past week:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with the word \"fashion\" in the URL and have spent more than $100,000 in the past week:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 100000 AND Websites.url LIKE '%fashion%' AND Ad_Statistics.date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.total_spent \nFROM Campaigns \nINNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nINNER JOIN Websites ON Ad_Placements.website_id = Websites.website_id \nWHERE Websites.url LIKE '%fashion%' AND Campaigns.total_spent > 100000;",
    "prompt_token_number": 561,
    "response_token_number": 67
},
{
    "id": 33611,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['username', 'user_id', 'address_id', 'work_address_id', 'last_active_date', 'home_address_id', 'last_activity_date', 'registration_date', 'email', 'total_purchase_amount', 'user_type_id', 'country', 'name'], 'Orders': ['order_date', 'order_id', 'address_id', 'user_id', 'order_total', 'shipping_status', 'shipping_address_id'], 'Addresses': ['state_id', 'address_id', 'city', 'street_address', 'city_id', 'country_id'], 'States': ['country_id', 'state_id', 'state_name', 'sales_tax_rate', 'population_density', 'time_zone', 'population', 'state_code'], 'Countries': ['country_name', 'country_id', 'population', 'continent', 'country_code', 'name', 'region_id'], 'Payment_details': ['order_id', 'payment_id'], 'Payment_methods': ['payment_type', 'payment_id']}. \n# the user question is: Get the details of all orders that have been placed by users who have made at least one purchase using a payment method that has 'Paytm' in its name and have been shipped to an address in a state that has a state code of 'CA':. \n#SQL query: SELECT Orders.order_id, Users.username, Addresses.street_address, Addresses.city, States.state_name, Countries.country_name, Payment_methods.payment_type FROM Orders INNER JOIN Users ON Orders.user_id = Users.user_id INNER JOIN Addresses ON Orders.shipping_address_id = Addresses.address_id INNER JOIN States ON Addresses.state_id = States.state_id INNER JOIN Countries ON States.country_id = Countries.country_id INNER JOIN Payment_details ON Orders.order_id = Payment_details.order_id INNER JOIN Payment_methods ON Payment_details.payment_id = Payment_methods.payment_id WHERE Payment_methods.payment_type LIKE '%Paytm%' AND States.state_code = 'CA';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that has the word \"news\" in the URL and have spent more than $50,000 on advertising in the past day:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that has the word \"news\" in the URL and have spent more than $50,000 on advertising in the past day:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 50000 AND Websites.url LIKE '%news%' AND Ad_Statistics.date BETWEEN date('now', '-1 day') AND date('now') GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.total_spent \nFROM Campaigns \nINNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nINNER JOIN Websites ON Ad_Placements.website_id = Websites.website_id \nWHERE Websites.url LIKE '%news%' \nAND Campaigns.total_spent > 50000;",
    "prompt_token_number": 682,
    "response_token_number": 67
},
{
    "id": 33613,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Employees': ['FirstName', 'LastName', 'EmployeeID', 'Salary', 'Title', 'HireDate', 'VacationTime', 'DepartmentID', 'ManagerID', 'JobTitle', 'Country', 'BirthDate', 'Department'], 'Orders': ['CustomerID', 'OrderDate', 'OrderID', 'TotalAmount', 'ShippedDate', 'PaidAmount', 'ShipperID', 'ShipCity', 'DeliveredDate', 'EmployeeID', 'ShipVia', 'Amount'], 'OrderDetails': ['ProductID', 'OrderID', 'Quantity', 'UnitCost', 'UnitPrice', 'OrderDate', 'Discount']}. \n# the user question is: Calculate the average number of items per order for each employee, sorted by average in descending order:. \n#SQL query: SELECT Employees.FirstName || ' ' || Employees.LastName AS EmployeeName, AVG(OrderDetails.Quantity) AS AvgItemsPerOrder FROM Employees INNER JOIN Orders ON Employees.EmployeeID = Orders.EmployeeID INNER JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID GROUP BY EmployeeName ORDER BY AvgItemsPerOrder DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that is based in the United States and have spent more than $100,000 on advertising in the past week, sorted in descending order of total cost:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that is based in the United States and have spent more than $100,000 on advertising in the past week, sorted in descending order of total cost:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 100000 AND Websites.country = 'United States' AND Ad_Statistics.date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Campaigns.name ORDER BY total_cost DESC;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.total_spent AS TotalCost\nFROM Campaigns \nINNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id\nINNER JOIN Websites ON Ad_Placements.website_id = Websites.website_id\nWHERE Websites.country = 'United States' AND Campaigns.total_spent > 100000\nGROUP BY Campaigns.name\nHAVING COUNT(Ad_Placements.ad_placement_id) > 0\nORDER BY TotalCost DESC;",
    "prompt_token_number": 527,
    "response_token_number": 97
},
{
    "id": 33615,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']}. \n# the user question is: Find the names and GDP per capita of the 5 countries with the highest GDP per capita and a population greater than 5 million:. \n#SQL query: SELECT name, GDP_per_capita FROM Country WHERE population > 5000000 ORDER BY GDP_per_capita DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that has the word \"shopping\" in the URL and have spent more than $10,000 on advertising in the past day:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that has the word \"shopping\" in the URL and have spent more than $10,000 on advertising in the past day:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 10000 AND Websites.url LIKE '%shopping%' AND Ad_Statistics.date BETWEEN date('now', '-1 day') AND date('now') GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT c.name, c.total_spent \nFROM Campaigns c \nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id \nJOIN Websites w ON ap.website_id = w.website_id \nWHERE w.url LIKE '%shopping%' AND c.total_spent > 10000;",
    "prompt_token_number": 572,
    "response_token_number": 59
},
{
    "id": 33617,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['director', 'release_year', 'film_id', 'title', 'box_office', 'language_id', 'runtime', 'budget', 'genre', 'based_on_true_story', 'film_title', 'film_gross', 'film_release_date', 'film_length', 'film_imdb_rating', 'film_director', 'film_runtime_minutes', 'film_release_year', 'film_worldwide_gross', 'film_budget', 'production_company_id', 'film_box_office_gross', 'film_user_rating', 'film_runtime', 'film_director_gender', 'film_box_office_rank', 'genre_id', 'film_duration', 'film_box_office_collection', 'film_running_time', 'film_country', 'film_rating', 'film_revenue', 'film_box_office', 'film_language', 'film_name', 'studio_id', 'film_production_budget'], 'Character': ['character_name', 'character_id', 'gender', 'actor_name', 'military_rank_id', 'is_main_character', 'character_kills', 'film_id', 'character_death_date', 'character_birth_date', 'character_nationality', 'character_gender', 'character_death'], 'Film_Character': ['character_id', 'film_id'], 'War': ['war_id', 'war_name', 'war_start_year'], 'Film_War': ['war_id', 'film_id', 'battle_id']}. \n# the user question is: Find all characters that were portrayed by the actor Brad Pitt in films that were set during World War II, along with the names of the films and their respective release years:. \n#SQL query: SELECT Character.character_name, Film.title, Film.release_year FROM Character INNER JOIN Film_Character ON Character.character_id = Film_Character.character_id INNER JOIN Film ON Film_Character.film_id = Film.film_id INNER JOIN Film_War ON Film.film_id = Film_War.film_id INNER JOIN War ON Film_War.war_id = War.war_id WHERE War.war_name = 'World War II' AND Character.actor_name = 'Brad Pitt';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that is based in the United States and have spent more than $50,000 on advertising in the past week, sorted in descending order of total cost:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that is based in the United States and have spent more than $50,000 on advertising in the past week, sorted in descending order of total cost:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 50000 AND Websites.country = 'United States' AND Ad_Statistics.date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Campaigns.name ORDER BY total_cost DESC;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.total_spent FROM Campaigns INNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id INNER JOIN Websites ON Ad_Placements.website_id = Websites.website_id WHERE Websites.country = 'United States' AND Campaigns.total_spent > 50000 ORDER BY Campaigns.total_spent DESC;",
    "prompt_token_number": 723,
    "response_token_number": 71
},
{
    "id": 33618,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Episode': ['rating', 'show_id', 'guest_id', 'episode_number', 'episode_id', 'air_date', 'host_id', 'year', 'month', 'max_rating'], 'Show': ['show_name', 'show_id', 'Night', 'Late', 'Talk', 'host_id', 'rating', 'end_time', 'start_time', 'language'], 'Show_Channel': ['channel_id', 'show_id'], 'Channel': ['channel_id', 'channel_name', 'country']}. \n# the user question is: \"Find the average rating of episodes aired on the 'ABC Network' in the year 2023.\". \n#SQL query: SELECT AVG(Episode.rating) AS average_rating FROM Episode INNER JOIN Show ON Episode.show_id = Show.show_id INNER JOIN Show_Channel ON Show.show_id = Show_Channel.show_id INNER JOIN Channel ON Show_Channel.channel_id = Channel.channel_id WHERE Channel.channel_name = 'ABC Network' AND strftime('%Y', Episode.air_date) = '2023';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that is not based in the United States and have spent more than $20,000 on advertising in the past month:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that is not based in the United States and have spent more than $20,000 on advertising in the past month:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 20000 AND Websites.country <> 'United States' AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.total_spent \nFROM Campaigns INNER JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id \nINNER JOIN Websites ON Ad_Placements.website_id = Websites.website_id \nWHERE Websites.country != 'United States' AND Campaigns.total_spent > 20000;",
    "prompt_token_number": 502,
    "response_token_number": 66
},
{
    "id": 33621,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Variation': ['gene_id', 'position', 'variation_type', 'frequency', 'variant_frequency', 'variant_id', 'variant_name', 'Type', 'Gene_ID', 'Frequency', 'ID'], 'Transcript': ['gene_id', 'coding_sequence_end', 'transcript_name', 'transcript_id', 'protein_id', 'coding_sequence_length', 'transcript_length', 'length', 'cds_length']}. \n# the user question is: Retrieve the names of all genes and their associated transcripts that have a variation of type \"missense\" and are located on chromosome 58.. \n#SQL query: SELECT Gene.gene_name, Transcript.transcript_name FROM Gene JOIN Transcript ON Gene.gene_id = Transcript.gene_id JOIN Variation ON Gene.gene_id = Variation.gene_id WHERE Variation.variation_type = 'missense' AND Variation.position BETWEEN Gene.start_position AND Gene.end_position AND Gene.chromosome_id = 58;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that has the word \"blog\" in the URL and have spent more than $5,000 on advertising in the past day:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that has the word \"blog\" in the URL and have spent more than $5,000 on advertising in the past day:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 5000 AND Websites.url LIKE '%blog%' AND Ad_Statistics.date BETWEEN date('now', '-1 day') AND date('now') GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT Campaigns.name, Campaigns.total_spent\nFROM Campaigns \nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id\nJOIN Websites ON Ad_Placements.website_id = Websites.website_id\nJOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id\nWHERE Websites.url LIKE '%blog%' AND Ad_Statistics.date = CURDATE() - INTERVAL 1 DAY AND Campaigns.total_spent > 5000;",
    "prompt_token_number": 560,
    "response_token_number": 97
},
{
    "id": 33625,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'collection': ['name', 'acquisition_date', 'collection_id', 'collector_id', 'date_acquired'], 'artwork_collection': ['collection_id', 'artwork_id'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender'], 'collector': ['first_name', 'collector_id', 'last_name', 'email', 'country', 'state', 'country_of_origin']}. \n# the user question is: Find the names and email addresses of all collectors who have artwork that were created by \"Pablo Picasso\" and are currently on loan to a museum.. \n#SQL query: SELECT DISTINCT c.first_name, c.last_name, c.email FROM collector AS c INNER JOIN collection AS co ON c.collector_id = co.collector_id INNER JOIN artwork_collection AS ac ON co.collection_id = ac.collection_id INNER JOIN artwork AS a ON ac.artwork_id = a.artwork_id INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id INNER JOIN location AS l ON al.location_id = l.location_id WHERE ar.last_name = 'Picasso' AND l.type = 'Museum' AND al.end_date IS NULL AND al.on_loan = 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that has the word \"review\" in the URL, and have spent more than $15,000 on advertising in the past month:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that has the word \"review\" in the URL, and have spent more than $15,000 on advertising in the past month:",
    "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 15000 AND Websites.url LIKE '%review%' AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
    "schema": "advertising",
    "processed_schema_content": {
        "Campaigns": [
            "end_date",
            "start_date",
            "name",
            "status",
            "budget",
            "advertiser_id",
            "campaign_id",
            "total_spent",
            "daily_budget",
            "conversion_rate",
            "revenue",
            "CampaignID",
            "AdvertiserID",
            "StartDate"
        ],
        "Websites": [
            "name",
            "traffic",
            "category",
            "website_id",
            "url",
            "domain",
            "country",
            "region"
        ],
        "Ad_Placements": [
            "website_id",
            "campaign_id",
            "app_id",
            "mobile_app_id",
            "name",
            "cost_per_click",
            "ad_placement_id",
            "cost_per_impression",
            "social_media_platform_id",
            "device_id",
            "social_media_id"
        ],
        "Ad_Statistics": [
            "ad_placement_id",
            "clicks",
            "date",
            "impressions"
        ]
    },
    "response_text": "SELECT c.name, c.total_spent \nFROM Campaigns AS c \nINNER JOIN Ad_Placements AS ap ON c.campaign_id = ap.campaign_id \nINNER JOIN Websites AS w ON ap.website_id = w.website_id \nWHERE w.url LIKE '%review%' AND c.total_spent > 15000 AND c.start_date > DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
    "prompt_token_number": 800,
    "response_token_number": 79
},
{
    "id": 33626,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']}. \n# the user question is: Find the names and birthdates of all artists who have artwork in the \"Museo Reina Sofía\" and were born in the 19th century.. \n#SQL query: SELECT DISTINCT ar.first_name, ar.last_name, ar.date_of_birth FROM artist AS ar INNER JOIN artwork AS a ON ar.artist_id = a.artist_id INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS lo ON al.location_id = lo.location_id WHERE ar.date_of_birth BETWEEN '1800-01-01' AND '1899-12-31' AND lo.name = 'Museo Reina Sofía' AND al.end_date IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'customers': ['customer_id', 'name', 'email', 'phone', 'address', 'country', 'first_name', 'last_name', 'date_created', 'marketing_channel', 'customer_name'], 'orders': ['customer_id', 'date_placed', 'order_id', 'date_shipped', 'order_total', 'total_price', 'sales_channel', 'order_date', 'payment_date']} and \n# the user question: Retrieve the name and contact information of all customers who have placed an order in the past 30 days.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and contact information of all customers who have placed an order in the past 30 days.",
    "output": "SELECT name, email, phone FROM customers WHERE customer_id IN ( SELECT customer_id FROM orders WHERE date_placed >= DATE('now', '-30 days') );",
    "schema": "advertising",
    "processed_schema_content": {
        "customers": [
            "customer_id",
            "name",
            "email",
            "phone",
            "address",
            "country",
            "first_name",
            "last_name",
            "date_created",
            "marketing_channel",
            "customer_name"
        ],
        "orders": [
            "customer_id",
            "date_placed",
            "order_id",
            "date_shipped",
            "order_total",
            "total_price",
            "sales_channel",
            "order_date",
            "payment_date"
        ]
    },
    "response_text": "SELECT c.name, c.email, c.phone FROM customers AS c INNER JOIN orders AS o ON c.customer_id = o.customer_id WHERE o.date_placed >= CURDATE() - INTERVAL 30 DAY;",
    "prompt_token_number": 598,
    "response_token_number": 41
},
{
    "id": 33628,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Programs': ['program_id', 'program_name', 'program_description', 'start_date', 'end_date', 'status', 'Program'], 'Goals': ['goal_id', 'goal_name', 'goal_description', 'goal_due_date', 'user_id', 'program_id', 'goal_target', 'goal_type', 'goal_end_date', 'goal_target_date', 'goal_start_date', 'goal_status', 'goal_value'], 'Progress': ['progress_id', 'goal_id', 'user_id', 'progress_date', 'progress_value', 'date_recorded']}. \n# the user question is: Find the name and email address of the user who has achieved the most progress towards their yoga goal in the program with name \"Yoga Program\":. \n#SQL query: SELECT Users.first_name, Users.last_name, Users.email, MAX(Progress.progress_value / Goals.goal_target) AS max_progress FROM Users JOIN Goals ON Users.user_id = Goals.user_id JOIN Programs ON Goals.program_id = Programs.program_id JOIN Progress ON Goals.goal_id = Progress.goal_id WHERE Programs.program_name = 'Yoga Program' AND Goals.goal_type = 'Yoga' AND Goals.goal_target IS NOT NULL GROUP BY Users.user_id ORDER BY max_progress DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'orders': ['customer_id', 'date_placed', 'order_id', 'date_shipped', 'order_total', 'total_price', 'sales_channel', 'order_date', 'payment_date'], 'order_items': ['price', 'order_id', 'quantity', 'product_id', 'total_price', 'order_date', 'TOP']} and \n# the user question: Calculate the total revenue generated by the company in the last quarter.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Calculate the total revenue generated by the company in the last quarter.",
    "output": "SELECT SUM(price * quantity) AS total_revenue FROM order_items WHERE order_id IN ( SELECT order_id FROM orders WHERE date_placed >= DATE('now', '-3 months') );",
    "schema": "advertising",
    "processed_schema_content": {
        "orders": [
            "customer_id",
            "date_placed",
            "order_id",
            "date_shipped",
            "order_total",
            "total_price",
            "sales_channel",
            "order_date",
            "payment_date"
        ],
        "order_items": [
            "price",
            "order_id",
            "quantity",
            "product_id",
            "total_price",
            "order_date",
            "TOP"
        ]
    },
    "response_text": "SELECT SUM(orders.total_price) AS total_revenue\nFROM orders \nWHERE date_placed BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 QUARTER) AND CURDATE();",
    "prompt_token_number": 466,
    "response_token_number": 37
},
{
    "id": 33636,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Coaches': ['coach_id', 'last_name', 'team_id', 'first_name', 'end_year', 'start_year', 'start_date', 'hire_date', 'award_year', 'season_id', 'coaching_experience'], 'Awards': ['award_name', 'award_id', 'coach_id', 'season_id', 'player_id', 'Valuable', 'Player', 'Most', 'Rookie', 'the', 'Improved', 'Defensive', 'award', 'season_type', 'award_season']}. \n# the user question is: Find the coaches who have won the Coach of the Year award at least twice.. \n#SQL query: SELECT Coaches.first_name, Coaches.last_name, COUNT(*) AS num_coach_of_the_year_awards FROM Coaches JOIN Awards ON Coaches.coach_id = Awards.coach_id WHERE Awards.award_name = 'Coach of the Year' GROUP BY Coaches.coach_id HAVING COUNT(*) >= 2;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['price', 'category', 'name', 'product_id', 'stock_quantity', 'product_name', 'on_sale', 'rating', 'category_id', 'id']} and \n# the user question: Retrieve the name and price of the most expensive product in each category.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of the most expensive product in each category.",
    "output": "SELECT products.name, products.price, products.category FROM products WHERE products.price = ( SELECT MAX(price) FROM products AS subquery WHERE subquery.category = products.category );",
    "schema": "advertising",
    "processed_schema_content": {
        "products": [
            "price",
            "category",
            "name",
            "product_id",
            "stock_quantity",
            "product_name",
            "on_sale",
            "rating",
            "category_id",
            "id"
        ]
    },
    "response_text": "SELECT category, name, MAX(price) FROM products GROUP BY category;",
    "prompt_token_number": 338,
    "response_token_number": 14
},
{
    "id": 33638,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Tracks': ['track_id', 'track_title', 'duration', 'album_id', 'track_name', 'genre_id', 'rating', 'artist_id', 'release_id'], 'TrackPlays': ['track_id', 'user_id', 'play_id', 'play_date', 'play_count'], 'TrackRatings': ['track_id', 'rating', 'genre_id']}. \n# the user question is: Find the tracks that have been played at least once and have an average rating above 4.0:. \n#SQL query: SELECT Tracks.track_name FROM Tracks JOIN TrackPlays ON Tracks.track_id = TrackPlays.track_id JOIN TrackRatings ON Tracks.track_id = TrackRatings.track_id GROUP BY Tracks.track_id HAVING COUNT(TrackPlays.play_count) >= 1 AND AVG(TrackRatings.rating) > 4.0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'customers': ['customer_id', 'name', 'email', 'phone', 'address', 'country', 'first_name', 'last_name', 'date_created', 'marketing_channel', 'customer_name'], 'orders': ['customer_id', 'date_placed', 'order_id', 'date_shipped', 'order_total', 'total_price', 'sales_channel', 'order_date', 'payment_date']} and \n# the user question: Retrieve the name and email address of customers who have ordered from the company in the last 6 months and have spent more than $500 in total.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email address of customers who have ordered from the company in the last 6 months and have spent more than $500 in total.",
    "output": "SELECT customers.name, customers.email FROM customers INNER JOIN orders ON orders.customer_id = customers.customer_id GROUP BY customers.customer_id HAVING MAX(orders.date_placed) >= DATE('now', '-6 months') AND SUM(orders.total_price) > 500;",
    "schema": "advertising",
    "processed_schema_content": {
        "customers": [
            "customer_id",
            "name",
            "email",
            "phone",
            "address",
            "country",
            "first_name",
            "last_name",
            "date_created",
            "marketing_channel",
            "customer_name"
        ],
        "orders": [
            "customer_id",
            "date_placed",
            "order_id",
            "date_shipped",
            "order_total",
            "total_price",
            "sales_channel",
            "order_date",
            "payment_date"
        ]
    },
    "response_text": "SELECT customers.name, customers.email\nFROM customers\nJOIN orders ON customers.customer_id = orders.customer_id\nWHERE orders.date_placed >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nGROUP BY customers.customer_id\nHAVING SUM(orders.order_total) > 500;",
    "prompt_token_number": 375,
    "response_token_number": 56
},
{
    "id": 33645,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Datasets': ['created_by', 'dataset_name', 'dataset_id', 'modified_date', 'dataset_type', 'user_i', 'creation_date', 'Num_rows', 'Downloads', 'Created_date', 'Security_level', 'quality_score']}. \n# the user question is: What is the total number of 'Downloads' for each dataset in the 'Data Science Platform' database, sorted in descending order of 'Downloads'?. \n#SQL query: SELECT Datasets.dataset_name, SUM(Datasets.Downloads) AS total_downloads FROM Datasets GROUP BY Datasets.dataset_name ORDER BY total_downloads DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'customers': ['customer_id', 'name', 'email', 'phone', 'address', 'country', 'first_name', 'last_name', 'date_created', 'marketing_channel', 'customer_name'], 'orders': ['customer_id', 'date_placed', 'order_id', 'date_shipped', 'order_total', 'total_price', 'sales_channel', 'order_date', 'payment_date'], 'order_items': ['price', 'order_id', 'quantity', 'product_id', 'total_price', 'order_date', 'TOP']} and \n# the user question: Retrieve the total revenue generated by each country in the last quarter.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the total revenue generated by each country in the last quarter.",
    "output": "SELECT customers.country, SUM(order_items.total_price) AS revenue FROM order_items INNER JOIN orders ON order_items.order_id = orders.order_id INNER JOIN customers ON orders.customer_id = customers.customer_id WHERE orders.date_placed >= DATE('now', '-3 months') GROUP BY customers.country;",
    "schema": "advertising",
    "processed_schema_content": {
        "customers": [
            "customer_id",
            "name",
            "email",
            "phone",
            "address",
            "country",
            "first_name",
            "last_name",
            "date_created",
            "marketing_channel",
            "customer_name"
        ],
        "orders": [
            "customer_id",
            "date_placed",
            "order_id",
            "date_shipped",
            "order_total",
            "total_price",
            "sales_channel",
            "order_date",
            "payment_date"
        ],
        "order_items": [
            "price",
            "order_id",
            "quantity",
            "product_id",
            "total_price",
            "order_date",
            "TOP"
        ]
    },
    "response_text": "SELECT customers.country, SUM(orders.total_price) AS total_revenue \nFROM customers \nJOIN orders ON customers.customer_id = orders.customer_id \nWHERE orders.order_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) \nGROUP BY customers.country;",
    "prompt_token_number": 335,
    "response_token_number": 51
},
{
    "id": 33648,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Product': ['SegmentID', 'ProductName', 'ProductID', 'CompanyID', 'UnitsInStock', 'UnitPrice', 'Category', 'Price', 'Cost', 'CategoryID', 'CurrentInventoryLevel', 'UnitCost', 'Description', 'Discontinued', 'CategoryName', 'SupplierID', 'CostPrice', 'ReorderPoint', 'DiscontinuedDate', 'SubcategoryID', 'SalesPrice', 'QuantityOnHand', 'PromotionID'], 'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID'], 'SalesOrderLineItem': ['ProductID', 'UnitPrice', 'Quantity', 'OrderID', 'OrderDate', 'Price', 'OrderLineID']}. \n# the user question is: Retrieve the list of products that have been sold in the year 2023, and have a profit margin of at least 20%, sorted by profit margin in descending order:. \n#SQL query: SELECT Product.ProductName, SUM(SalesOrderLineItem.Quantity * SalesOrderLineItem.UnitPrice) as TotalRevenue, SUM(SalesOrderLineItem.Quantity * (SalesOrderLineItem.UnitPrice - Product.Cost)) as TotalProfit FROM Product JOIN SalesOrderLineItem ON Product.ProductID = SalesOrderLineItem.ProductID JOIN SalesOrder ON SalesOrderLineItem.OrderID = SalesOrder.OrderID WHERE SalesOrder.Year = 2023 GROUP BY Product.ProductID HAVING (SUM(SalesOrderLineItem.Quantity * (SalesOrderLineItem.UnitPrice - Product.Cost)) / SUM(SalesOrderLineItem.Quantity * SalesOrderLineItem.UnitPrice)) >= 0.2 ORDER BY (SUM(SalesOrderLineItem.Quantity * (SalesOrderLineItem.UnitPrice - Product.Cost)) / SUM(SalesOrderLineItem.Quantity * SalesOrderLineItem.UnitPrice)) DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'customers': ['customer_id', 'name', 'email', 'phone', 'address', 'country', 'first_name', 'last_name', 'date_created', 'marketing_channel', 'customer_name'], 'orders': ['customer_id', 'date_placed', 'order_id', 'date_shipped', 'order_total', 'total_price', 'sales_channel', 'order_date', 'payment_date'], 'order_items': ['price', 'order_id', 'quantity', 'product_id', 'total_price', 'order_date', 'TOP']} and \n# the user question: Retrieve the top 10 customers with the highest lifetime value, calculated as the sum of all their orders.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the top 10 customers with the highest lifetime value, calculated as the sum of all their orders.",
    "output": "SELECT customers.customer_id, customers.first_name, customers.last_name, SUM(order_items.total_price) AS lifetime_value FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN order_items ON orders.order_id = order_items.order_id GROUP BY customers.customer_id ORDER BY lifetime_value DESC LIMIT 10;",
    "schema": "advertising",
    "processed_schema_content": {
        "customers": [
            "customer_id",
            "name",
            "email",
            "phone",
            "address",
            "country",
            "first_name",
            "last_name",
            "date_created",
            "marketing_channel",
            "customer_name"
        ],
        "orders": [
            "customer_id",
            "date_placed",
            "order_id",
            "date_shipped",
            "order_total",
            "total_price",
            "sales_channel",
            "order_date",
            "payment_date"
        ],
        "order_items": [
            "price",
            "order_id",
            "quantity",
            "product_id",
            "total_price",
            "order_date",
            "TOP"
        ]
    },
    "response_text": "SELECT customers.customer_id, customers.name, SUM(orders.order_total) as LifetimeValue\nFROM customers\nJOIN orders ON customers.customer_id = orders.customer_id\nGROUP BY customers.customer_id, customers.name\nORDER BY LifetimeValue DESC\nLIMIT 10;",
    "prompt_token_number": 644,
    "response_token_number": 51
},
{
    "id": 33649,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'doctor': ['doctor_id', 'name', 'speciality', 'address', 'experience', 'degree', 'license', 'is_accepting_new_patients', 'specialty', 'email', 'phone_number']}. \n# the user question is: Find the names and addresses of all doctors who have a degree from a medical school in the United Kingdom and specialize in pediatrics:. \n#SQL query: SELECT name, address FROM doctor WHERE degree LIKE '%United Kingdom%' AND specialty = 'Pediatrics';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'customers': ['customer_id', 'name', 'email', 'phone', 'address', 'country', 'first_name', 'last_name', 'date_created', 'marketing_channel', 'customer_name']} and \n# the user question: Retrieve the number of new customers acquired through each marketing channel in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the number of new customers acquired through each marketing channel in the last month.",
    "output": "SELECT customers.marketing_channel, COUNT(*) AS num_new_customers FROM customers WHERE strftime('%Y-%m', customers.date_created) = strftime('%Y-%m', 'now', '-1 month') GROUP BY customers.marketing_channel;",
    "schema": "advertising",
    "processed_schema_content": {
        "customers": [
            "customer_id",
            "name",
            "email",
            "phone",
            "address",
            "country",
            "first_name",
            "last_name",
            "date_created",
            "marketing_channel",
            "customer_name"
        ]
    },
    "response_text": "SELECT marketing_channel, COUNT(customer_id) FROM customers WHERE date_created >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY marketing_channel;",
    "prompt_token_number": 246,
    "response_token_number": 30
},
{
    "id": 33651,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']}. \n# the user question is: Find the total revenue generated from class sessions taught by each instructor in the last month.. \n#SQL query: SELECT Instructors.instructor_name, SUM(Payments.amount) AS total_revenue FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Payments ON Enrollments.enrollment_id = Payments.enrollment_id WHERE Enrollments.status = 'confirmed' AND Payments.payment_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Instructors.instructor_id ORDER BY total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'customers': ['customer_id', 'name', 'email', 'phone', 'address', 'country', 'first_name', 'last_name', 'date_created', 'marketing_channel', 'customer_name'], 'orders': ['customer_id', 'date_placed', 'order_id', 'date_shipped', 'order_total', 'total_price', 'sales_channel', 'order_date', 'payment_date'], 'order_items': ['price', 'order_id', 'quantity', 'product_id', 'total_price', 'order_date', 'TOP']} and \n# the user question: Retrieve the number of orders and the total revenue generated by each customer in the last 6 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the number of orders and the total revenue generated by each customer in the last 6 months.",
    "output": "SELECT customers.customer_id, customers.first_name, customers.last_name, COUNT(orders.order_id) AS num_orders, SUM(order_items.total_price) AS revenue FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN order_items ON orders.order_id = order_items.order_id WHERE orders.date_placed >= DATE('now', '-6 months') GROUP BY customers.customer_id ORDER BY revenue DESC;",
    "schema": "advertising",
    "processed_schema_content": {
        "customers": [
            "customer_id",
            "name",
            "email",
            "phone",
            "address",
            "country",
            "first_name",
            "last_name",
            "date_created",
            "marketing_channel",
            "customer_name"
        ],
        "orders": [
            "customer_id",
            "date_placed",
            "order_id",
            "date_shipped",
            "order_total",
            "total_price",
            "sales_channel",
            "order_date",
            "payment_date"
        ],
        "order_items": [
            "price",
            "order_id",
            "quantity",
            "product_id",
            "total_price",
            "order_date",
            "TOP"
        ]
    },
    "response_text": "SELECT customers.customer_name, COUNT(orders.order_id) AS number_of_orders, SUM(order_items.total_price) AS total_revenue\nFROM customers \nINNER JOIN orders \nON customers.customer_id = orders.customer_id \nINNER JOIN order_items \nON orders.order_id = order_items.order_id \nWHERE orders.date_placed BETWEEN date('now', '-6 month') AND date('now') \nGROUP BY customers.customer_id;",
    "prompt_token_number": 585,
    "response_token_number": 84
},
{
    "id": 33652,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'products': ['product_id', 'product_name', 'brand', 'price', 'quantity', 'product_price', 'total_quantity', 'date_time', 'stock_quantity', 'unit_price', 'item_price', 'photoshoot_id', 'appointment_id', 'category', 'name', 'color', 'rating', 'year_added', 'id', 'brand_id', 'discount_price', 'store_id'], 'product_orders': ['price', 'order_id', 'product_id', 'quantity', 'order_date'], 'orders': ['order_date', 'client_id', 'order_id', 'payment_method', 'id', 'customer_id', 'employee_id', 'product_id', 'total_price', 'store_id']}. \n# the user question is: Find the total revenue generated from makeup products sold in the last quarter:. \n#SQL query: SELECT SUM(product_orders.price * product_orders.quantity) as revenue FROM product_orders INNER JOIN products ON product_orders.product_id = products.product_id AND products.category = 'Makeup' INNER JOIN orders ON product_orders.order_id = orders.order_id AND orders.order_date >= date('now', '-3 months');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'orders': ['customer_id', 'date_placed', 'order_id', 'date_shipped', 'order_total', 'total_price', 'sales_channel', 'order_date', 'payment_date'], 'products': ['price', 'category', 'name', 'product_id', 'stock_quantity', 'product_name', 'on_sale', 'rating', 'category_id', 'id'], 'order_items': ['price', 'order_id', 'quantity', 'product_id', 'total_price', 'order_date', 'TOP']} and \n# the user question: Retrieve the number of orders and the total revenue generated by each product category in the last year, grouped by month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the number of orders and the total revenue generated by each product category in the last year, grouped by month.",
    "output": "SELECT strftime('%Y-%m', orders.date_placed) AS month, products.category, COUNT(orders.order_id) AS num_orders, SUM(order_items.total_price) AS revenue FROM orders INNER JOIN order_items ON orders.order_id = order_items.order_id INNER JOIN products ON order_items.product_id = products.product_id WHERE orders.date_placed >= DATE('now', '-1 year') GROUP BY month, products.category ORDER BY month, revenue DESC;",
    "schema": "advertising",
    "processed_schema_content": {
        "orders": [
            "customer_id",
            "date_placed",
            "order_id",
            "date_shipped",
            "order_total",
            "total_price",
            "sales_channel",
            "order_date",
            "payment_date"
        ],
        "products": [
            "price",
            "category",
            "name",
            "product_id",
            "stock_quantity",
            "product_name",
            "on_sale",
            "rating",
            "category_id",
            "id"
        ],
        "order_items": [
            "price",
            "order_id",
            "quantity",
            "product_id",
            "total_price",
            "order_date",
            "TOP"
        ]
    },
    "response_text": "SELECT strftime('%Y-%m', orders.date_placed) as Month,\n       products.category, \n       COUNT(orders.order_id) as Number_of_Orders,\n       SUM(order_items.price * order_items.quantity) as Revenue\nFROM orders \nINNER JOIN order_items ON orders.order_id = order_items.order_id\nINNER JOIN products ON order_items.product_id = products.product_id\nWHERE orders.date_placed >= date('now', '-1 year')\nGROUP BY Month, products.category;",
    "prompt_token_number": 450,
    "response_token_number": 97
},
{
    "id": 33654,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Exercise': ['ExerciseID', 'ExerciseName', 'Description', 'Image', 'CaloriesBurned', 'Distance', 'TargetMuscle', 'Category', 'ExerciseType', 'Name', 'CaloriesPerRep', 'CaloriesPerMinute', 'MuscleGroupID', 'ExerciseTypeID'], 'ExerciseSet': ['ExerciseID', 'Date', 'UserID', 'USERID', 'EXERCISEID', 'Reps', 'WeightLifted', 'SetID', 'Duration', 'HeartRate', 'Weight', 'Repetitions', 'StartTime', 'EndTime']}. \n# the user question is: Find the top 5 most frequently performed exercises in the past month along with the number of times they were performed:. \n#SQL query: SELECT Exercise.ExerciseName, COUNT(*) AS Frequency FROM ExerciseSet INNER JOIN Exercise ON ExerciseSet.ExerciseID = Exercise.ExerciseID WHERE strftime('%s', 'now') - strftime('%s', ExerciseSet.Date) <= 2592000 GROUP BY Exercise.ExerciseID ORDER BY Frequency DESC LIMIT 5\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'campaigns': ['campaign_id', 'campaign_name', 'salesperson_id', 'start_date', 'budget'], 'ads': ['ad_id', 'campaign_id', 'ad_name', 'ad_copy', 'active', 'cost_per_click', 'end_date', 'bid', 'start_date', 'ad_type', 'ad_group_id', 'price', 'id'], 'ad_performance': ['date', 'clicks', 'ad_id', 'impressions', 'cost_per_conversion', 'cost', 'session_id', 'conversions', 'cost_per_click']} and \n# the user question: Retrieve the average cost per conversion for each campaign in the last 90 days, grouped by campaign.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the average cost per conversion for each campaign in the last 90 days, grouped by campaign.",
    "output": "SELECT campaigns.campaign_name, AVG(ad_performance.cost_per_conversion) AS avg_cost_per_conversion FROM campaigns INNER JOIN ads ON campaigns.campaign_id = ads.campaign_id INNER JOIN ad_performance ON ads.ad_id = ad_performance.ad_id WHERE ad_performance.date >= DATE('now', '-90 days') GROUP BY campaigns.campaign_id;",
    "schema": "advertising",
    "processed_schema_content": {
        "campaigns": [
            "campaign_id",
            "campaign_name",
            "salesperson_id",
            "start_date",
            "budget"
        ],
        "ads": [
            "ad_id",
            "campaign_id",
            "ad_name",
            "ad_copy",
            "active",
            "cost_per_click",
            "end_date",
            "bid",
            "start_date",
            "ad_type",
            "ad_group_id",
            "price",
            "id"
        ],
        "ad_performance": [
            "date",
            "clicks",
            "ad_id",
            "impressions",
            "cost_per_conversion",
            "cost",
            "session_id",
            "conversions",
            "cost_per_click"
        ]
    },
    "response_text": "SELECT campaigns.campaign_name, AVG(ad_performance.cost_per_conversion) AS AverageCostPerConversion \nFROM campaigns \nINNER JOIN ads ON campaigns.campaign_id = ads.campaign_id \nINNER JOIN ad_performance ON ads.ad_id = ad_performance.ad_id \nWHERE julianday('now') - julianday(ad_performance.date) <= 90 \nGROUP BY campaigns.campaign_id",
    "prompt_token_number": 442,
    "response_token_number": 77
},
{
    "id": 33655,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Cases': ['Case_ID', 'Case_Name', 'Case_Description', 'Client_ID', 'Case_Status', 'Lawyer_ID', 'Last_Updated', 'Date_Opened', 'Date_Closed', 'Status', 'Case_Closed_Date', 'Practice_Area_ID', 'Case_Manager_ID', 'Open_Date', 'Closed', 'Case_End_Date', 'Case_Start_Date', 'Firm_ID', 'Office_ID', 'CaseStatus', 'CaseNumber', 'ClientID', 'CaseTitle', 'CaseTypeID', 'CaseType', 'CourtName', 'ClosedDate', 'Settlement', 'ID', 'HearingDate', 'ClosingDate', 'AppealStatus', 'LawyerID', 'OpeningDate', 'verdict', 'judge_id', 'defendant_state', 'plaintiff_state', 'lawyer_id'], 'Lawyers': ['Lawyer_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'Specialization', 'Department_ID', 'City', 'Email_Address', 'Phone_Number', 'Hourly_Rate', 'Practice_Area_ID', 'Billing_Rate_ID', 'Firm_ID', 'FirmID', 'LawSchoolID', 'HourlyRate', 'Name', 'ID', 'ExperienceYears', 'years_of_experience', 'state', 'lawyer_id'], 'Time_Entries': ['Time_Entry_ID', 'Lawyer_ID', 'Case_ID', 'Date', 'Hours', 'Description', 'Task_ID', 'Billed', 'Time_Entry_Date', 'Invoice_ID', 'Billable', 'Hours_Worked', 'Entry_Date'], 'Tasks': ['Task_ID', 'Task_Name', 'Task_Description', 'Task_Status', 'Case_ID', 'Due_Date', 'Lawyer_ID', 'Status', 'Completion_Date', 'Practice_Area_ID', 'Paralegal_ID', 'Last_Activity_Date', 'Budgeted_Hours', 'Budget', 'Task_Deadline', 'Hourly_Rate', 'Task_Date', 'Hours_Worked', 'Task_Due_Date', 'Hours_Billed', 'Hours'], 'Billing_Rates': ['Effective_Date', 'Lawyer_ID', 'Rate', 'Billing_Rate_ID', 'Rate_Per_Hour', 'Hourly_Rate']}. \n# the user question is: Find all the lawyers that have billed more than $10,000 for all matters:. \n#SQL query: SELECT Lawyers.First_Name, Lawyers.Last_Name FROM Lawyers JOIN Time_Entries ON Lawyers.Lawyer_ID = Time_Entries.Lawyer_ID JOIN Billing_Rates ON Time_Entries.Lawyer_ID = Billing_Rates.Lawyer_ID AND Time_Entries.Date >= Billing_Rates.Effective_Date JOIN Tasks ON Time_Entries.Task_ID = Tasks.Task_ID JOIN Cases ON Tasks.Case_ID = Cases.Case_ID GROUP BY Lawyers.First_Name, Lawyers.Last_Name HAVING SUM(Time_Entries.Hours * Billing_Rates.Rate) > 10000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'customer': ['customer_id', 'name', 'email'], 'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id']} and \n# the user question: Retrieve the name and email of all customers who have made a purchase in the past week.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all customers who have made a purchase in the past week.",
    "output": "SELECT name, email FROM customer WHERE customer_id IN ( SELECT DISTINCT customer_id FROM purchase WHERE purchase_date >= DATE('now', '-7 days') )",
    "schema": "advertising",
    "processed_schema_content": {
        "customer": [
            "customer_id",
            "name",
            "email"
        ],
        "purchase": [
            "customer_id",
            "purchase_date",
            "sales_rep_id",
            "purchase_id",
            "payment_status",
            "store_id"
        ]
    },
    "response_text": "SELECT customer.name, customer.email FROM customer JOIN purchase ON customer.customer_id = purchase.customer_id WHERE purchase.purchase_date >= CURDATE() - INTERVAL 1 WEEK;",
    "prompt_token_number": 760,
    "response_token_number": 32
},
{
    "id": 33659,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['Client_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'City', 'Email_Address', 'Phone_Number', 'State', 'ClientName', 'ClientID', 'Name', 'ID', 'Status', 'Balance', 'pending_case', 'legal_fees'], 'Cases': ['Case_ID', 'Case_Name', 'Case_Description', 'Client_ID', 'Case_Status', 'Lawyer_ID', 'Last_Updated', 'Date_Opened', 'Date_Closed', 'Status', 'Case_Closed_Date', 'Practice_Area_ID', 'Case_Manager_ID', 'Open_Date', 'Closed', 'Case_End_Date', 'Case_Start_Date', 'Firm_ID', 'Office_ID', 'CaseStatus', 'CaseNumber', 'ClientID', 'CaseTitle', 'CaseTypeID', 'CaseType', 'CourtName', 'ClosedDate', 'Settlement', 'ID', 'HearingDate', 'ClosingDate', 'AppealStatus', 'LawyerID', 'OpeningDate', 'verdict', 'judge_id', 'defendant_state', 'plaintiff_state', 'lawyer_id'], 'Lawyers': ['Lawyer_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'Specialization', 'Department_ID', 'City', 'Email_Address', 'Phone_Number', 'Hourly_Rate', 'Practice_Area_ID', 'Billing_Rate_ID', 'Firm_ID', 'FirmID', 'LawSchoolID', 'HourlyRate', 'Name', 'ID', 'ExperienceYears', 'years_of_experience', 'state', 'lawyer_id'], 'Tasks': ['Task_ID', 'Task_Name', 'Task_Description', 'Task_Status', 'Case_ID', 'Due_Date', 'Lawyer_ID', 'Status', 'Completion_Date', 'Practice_Area_ID', 'Paralegal_ID', 'Last_Activity_Date', 'Budgeted_Hours', 'Budget', 'Task_Deadline', 'Hourly_Rate', 'Task_Date', 'Hours_Worked', 'Task_Due_Date', 'Hours_Billed', 'Hours']}. \n# the user question is: List all the cases where the client is not based in the same city as the lawyer handling the case:. \n#SQL query: SELECT Cases.Case_Name, Clients.First_Name, Clients.Last_Name, Lawyers.First_Name, Lawyers.Last_Name, Lawyers.City AS Lawyer_City, Clients.City AS Client_City FROM Cases JOIN Clients ON Cases.Client_ID = Clients.Client_ID JOIN Tasks ON Cases.Case_ID = Tasks.Case_ID JOIN Lawyers ON Tasks.Lawyer_ID = Lawyers.Lawyer_ID WHERE Lawyers.City != Clients.City;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id'], 'purchase_item': ['product_id', 'price', 'purchase_id', 'quantity', 'discount', 'purchase_item_id'], 'store': ['name', 'store_id', 'city']} and \n# the user question: Retrieve the name and total revenue of each store in the past week.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total revenue of each store in the past week.",
    "output": "SELECT store.name, SUM(purchase_item.price * purchase_item.quantity) AS total_revenue FROM store JOIN purchase ON store.store_id = purchase.store_id JOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id WHERE purchase.purchase_date >= DATE('now', '-7 days') GROUP BY store.store_id",
    "schema": "advertising",
    "processed_schema_content": {
        "purchase": [
            "customer_id",
            "purchase_date",
            "sales_rep_id",
            "purchase_id",
            "payment_status",
            "store_id"
        ],
        "purchase_item": [
            "product_id",
            "price",
            "purchase_id",
            "quantity",
            "discount",
            "purchase_item_id"
        ],
        "store": [
            "name",
            "store_id",
            "city"
        ]
    },
    "response_text": "SELECT store.name, SUM(purchase_item.price * purchase_item.quantity) AS total_revenue\nFROM purchase\nJOIN store ON purchase.store_id = store.store_id\nJOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id\nWHERE purchase.purchase_date >= DATE(NOW()) - INTERVAL 7 DAY\nGROUP BY store.name;",
    "prompt_token_number": 727,
    "response_token_number": 66
},
{
    "id": 33661,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Client': ['client_id', 'name', 'email', 'phone_number', 'industry_id', 'location_id', 'industry', 'budget', 'first_name', 'last_name', 'state', 'city', 'company_name', 'annual_revenue'], 'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months'], 'Story': ['story_id', 'headline', 'content', 'date_published', 'outlet_id', 'campaign_id', 'date', 'journalist_id', 'sentiment_score', 'body', 'views', 'shares', 'likes', 'clicks', 'impressions', 'comments', 'text', 'publication_date', 'word_count'], 'MediaContact': ['outlet_id', 'first_name', 'phone_number', 'last_name', 'email', 'phone']}. \n# the user question is: Retrieve the names and email addresses of all media contacts who have published a story that was featured in a campaign associated with a client with the name \"LMN Corp\" and have a phone number starting with \"999-\":. \n#SQL query: SELECT DISTINCT MediaContact.first_name, MediaContact.last_name, MediaContact.email FROM MediaContact INNER JOIN Story ON MediaContact.outlet_id = Story.outlet_id INNER JOIN Campaign ON Story.campaign_id = Campaign.campaign_id INNER JOIN Client ON Campaign.client_id = Client.client_id WHERE Client.name = 'LMN Corp' AND MediaContact.phone LIKE '999-%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id'], 'product': ['name', 'product_id', 'revenue', 'iPhone', 'category_id', 'brand_id', 'quantity', 'price', 'rating'], 'purchase_item': ['product_id', 'price', 'purchase_id', 'quantity', 'discount', 'purchase_item_id']} and \n# the user question: Retrieve the name and total revenue of each product sold in the past month, sorted in descending order of total revenue.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total revenue of each product sold in the past month, sorted in descending order of total revenue.",
    "output": "SELECT product.name, SUM(purchase_item.price * purchase_item.quantity) AS total_revenue FROM product JOIN purchase_item ON product.product_id = purchase_item.product_id JOIN purchase ON purchase_item.purchase_id = purchase.purchase_id WHERE purchase.purchase_date >= DATE('now', '-1 month') GROUP BY product.product_id ORDER BY total_revenue DESC",
    "schema": "advertising",
    "processed_schema_content": {
        "purchase": [
            "customer_id",
            "purchase_date",
            "sales_rep_id",
            "purchase_id",
            "payment_status",
            "store_id"
        ],
        "product": [
            "name",
            "product_id",
            "revenue",
            "iPhone",
            "category_id",
            "brand_id",
            "quantity",
            "price",
            "rating"
        ],
        "purchase_item": [
            "product_id",
            "price",
            "purchase_id",
            "quantity",
            "discount",
            "purchase_item_id"
        ]
    },
    "response_text": "SELECT product.name, SUM(purchase_item.price * purchase_item.quantity) as total_revenue \nFROM product \nINNER JOIN purchase_item ON product.product_id = purchase_item.product_id \nINNER JOIN purchase ON purchase_item.purchase_id = purchase.purchase_id \nWHERE purchase.purchase_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) \nGROUP BY product.name \nORDER BY total_revenue DESC;",
    "prompt_token_number": 568,
    "response_token_number": 78
},
{
    "id": 33662,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Cases': ['Case_ID', 'Case_Name', 'Case_Description', 'Client_ID', 'Case_Status', 'Lawyer_ID', 'Last_Updated', 'Date_Opened', 'Date_Closed', 'Status', 'Case_Closed_Date', 'Practice_Area_ID', 'Case_Manager_ID', 'Open_Date', 'Closed', 'Case_End_Date', 'Case_Start_Date', 'Firm_ID', 'Office_ID', 'CaseStatus', 'CaseNumber', 'ClientID', 'CaseTitle', 'CaseTypeID', 'CaseType', 'CourtName', 'ClosedDate', 'Settlement', 'ID', 'HearingDate', 'ClosingDate', 'AppealStatus', 'LawyerID', 'OpeningDate', 'verdict', 'judge_id', 'defendant_state', 'plaintiff_state', 'lawyer_id'], 'Invoices': ['Invoice_ID', 'Client_ID', 'Date', 'Amount', 'Case_ID', 'Paid_Date', 'Due_Date', 'Invoice_Date', 'Time_Entry_ID', 'Paid', 'Billed', 'Task_ID', 'Issue_Date', 'Total_Amount', 'Invoice_Number', 'Amount_Billed', 'Invoice_Status', 'Billing_Date', 'Billing_Rate_ID', 'Hours_Billed', 'Amount_Paid', 'Amount_Due', 'Bill_Date', 'ClientID', 'Status', 'Unpaid', 'IssueDate'], 'Payments': ['Payment_ID', 'Invoice_ID', 'Payment_Date', 'Amount', 'Invoice_I', 'Time_Entry_ID', 'Date', 'Payment_Amount', 'Invoice_Number']}. \n# the user question is: List all the invoices and their associated cases, along with the number of payments made on each invoice:. \n#SQL query: SELECT Invoices.Invoice_Number, Cases.Case_Name, COUNT(Payments.Payment_ID) AS Number_of_Payments FROM Invoices JOIN Cases ON Invoices.Case_ID = Cases.Case_ID LEFT JOIN Payments ON Invoices.Invoice_ID = Payments.Invoice_ID GROUP BY Invoices.Invoice_ID;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'customer': ['customer_id', 'name', 'email'], 'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id'], 'product': ['name', 'product_id', 'revenue', 'iPhone', 'category_id', 'brand_id', 'quantity', 'price', 'rating'], 'purchase_item': ['product_id', 'price', 'purchase_id', 'quantity', 'discount', 'purchase_item_id']} and \n# the user question: Retrieve the name and email of all customers who have made a purchase of a product that is currently out of stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all customers who have made a purchase of a product that is currently out of stock.",
    "output": "SELECT customer.name, customer.email FROM customer JOIN purchase ON customer.customer_id = purchase.customer_id JOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id JOIN product ON purchase_item.product_id = product.product_id WHERE product.quantity = 0",
    "schema": "advertising",
    "processed_schema_content": {
        "customer": [
            "customer_id",
            "name",
            "email"
        ],
        "purchase": [
            "customer_id",
            "purchase_date",
            "sales_rep_id",
            "purchase_id",
            "payment_status",
            "store_id"
        ],
        "product": [
            "name",
            "product_id",
            "revenue",
            "iPhone",
            "category_id",
            "brand_id",
            "quantity",
            "price",
            "rating"
        ],
        "purchase_item": [
            "product_id",
            "price",
            "purchase_id",
            "quantity",
            "discount",
            "purchase_item_id"
        ]
    },
    "response_text": "SELECT DISTINCT customer.name, customer.email\nFROM customer\nJOIN purchase ON customer.customer_id = purchase.customer_id\nJOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id\nJOIN product ON purchase_item.product_id = product.product_id\nWHERE product.quantity = 0;",
    "prompt_token_number": 633,
    "response_token_number": 54
},
{
    "id": 33663,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Websites': ['website_id', 'user_id', 'url', 'created_at', 'updated_at', 'name', 'domain_id', 'domain_authority_score', 'domain_created_at'], 'Pages': ['page_id', 'website_id', 'url', 'title', 'description', 'content', 'created_at', 'updated_at', 'meta_description', 'meta_keywords', 'meta_title', 'h1_tag', 'h2_tag', 'title_tag', 'canonical_url', 'description_tag', 'header_tag', 'meta_tag', 'meta_keyword', 'h1', 'heading', 'header', 'word_count', 'time_on_page', 'total_words', 'http_status_code', 'user_id', 'last_modified_date', '[website_id]'], 'Page_Stats': ['page_stat_id', 'page_id', 'visits', 'bounce_rate', 'time_on_page', 'created_at', 'updated_at', 'organic_traffic', 'load_time', 'page_speed_score', 'total_images', 'total_videos', 'page_authority_score', 'domain_authority_score', 'page_load_time', 'backlinks', 'search_query', 'search_volume']}. \n# the user question is: Retrieve the names and URLs of all websites that have at least one page with a time on page greater than or equal to 480 seconds and a bounce rate less than or equal to 0.005:. \n#SQL query: SELECT DISTINCT Websites.name, Websites.url FROM Websites INNER JOIN Pages ON Websites.website_id = Pages.website_id INNER JOIN Page_Stats ON Pages.page_id = Page_Stats.page_id WHERE Page_Stats.time_on_page >= 480 AND Page_Stats.bounce_rate <= 0.005;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id'], 'purchase_item': ['product_id', 'price', 'purchase_id', 'quantity', 'discount', 'purchase_item_id'], 'store': ['name', 'store_id', 'city']} and \n# the user question: Retrieve the name and total revenue of each store, grouped by city.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total revenue of each store, grouped by city.",
    "output": "SELECT store.city, SUM(purchase_item.price * purchase_item.quantity) AS total_revenue FROM store JOIN purchase ON store.store_id = purchase.store_id JOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id GROUP BY store.city",
    "schema": "advertising",
    "processed_schema_content": {
        "purchase": [
            "customer_id",
            "purchase_date",
            "sales_rep_id",
            "purchase_id",
            "payment_status",
            "store_id"
        ],
        "purchase_item": [
            "product_id",
            "price",
            "purchase_id",
            "quantity",
            "discount",
            "purchase_item_id"
        ],
        "store": [
            "name",
            "store_id",
            "city"
        ]
    },
    "response_text": "SELECT store.name, SUM(purchase_item.price * purchase_item.quantity) AS total_revenue, store.city FROM store JOIN purchase ON store.store_id = purchase.store_id JOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id GROUP BY store.city, store.name;",
    "prompt_token_number": 522,
    "response_token_number": 53
},
{
    "id": 33664,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Artists': ['artist_id', 'artist_name', 'country', 'birth_date'], 'Albums': ['album_name', 'artist_id', 'release_date', 'song_id', 'album_id', 'label_id'], 'Artists_Awards': ['artist_id', 'award_id', 'album_id'], 'Awards': ['award_id', 'award_name', 'release_date', 'artist_id', 'genre_id'], 'Albums_Labels': ['album_id', 'label_id'], 'Labels': ['label_name', 'label_id'], 'Genres': ['genre_id', 'genre_name']}. \n# the user question is: \"Retrieve the names of artists who have won an award in the 'Post-Bop' genre and have released albums on either 'Blue Note Records' or 'Verve Records'.\". \n#SQL query: SELECT artist_name FROM Artists WHERE artist_id IN ( SELECT artist_id FROM Artists_Awards WHERE award_id IN ( SELECT award_id FROM Awards WHERE genre_id IN ( SELECT genre_id FROM Genres WHERE genre_name = 'Post-Bop' ) ) ) AND artist_id IN ( SELECT artist_id FROM Albums WHERE album_id IN ( SELECT album_id FROM Albums_Labels WHERE label_id IN ( SELECT label_id FROM Labels WHERE label_name = 'Blue Note Records' OR label_name = 'Verve Records' ) ) );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'customer': ['customer_id', 'name', 'email'], 'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id'], 'purchase_item': ['product_id', 'price', 'purchase_id', 'quantity', 'discount', 'purchase_item_id']} and \n# the user question: Retrieve the name and email of all customers who have made a purchase of a product with a discount greater than 20%.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all customers who have made a purchase of a product with a discount greater than 20%.",
    "output": "SELECT customer.name, customer.email FROM customer JOIN purchase ON customer.customer_id = purchase.customer_id JOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id WHERE purchase_item.discount > 0.2",
    "schema": "advertising",
    "processed_schema_content": {
        "customer": [
            "customer_id",
            "name",
            "email"
        ],
        "purchase": [
            "customer_id",
            "purchase_date",
            "sales_rep_id",
            "purchase_id",
            "payment_status",
            "store_id"
        ],
        "purchase_item": [
            "product_id",
            "price",
            "purchase_id",
            "quantity",
            "discount",
            "purchase_item_id"
        ]
    },
    "response_text": "SELECT name, email FROM customer WHERE customer_id IN ( SELECT customer_id FROM purchase WHERE purchase_id IN ( SELECT purchase_id FROM purchase_item WHERE discount > 20 ) );",
    "prompt_token_number": 454,
    "response_token_number": 34
},
{
    "id": 33666,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'name', 'Product', 'price', 'category_id', 'rating', 'quantity_in_stock'], 'Categories': ['category_id', 'category_name']}. \n# the user question is: Get the count of products in each category, sorted in descending order. \n#SQL query: SELECT c.category_name, COUNT(*) AS product_count FROM Categories c JOIN Products p ON c.category_id = p.category_id GROUP BY c.category_name ORDER BY product_count DESC;  These examples cover different query scenarios such as multiple condition filtering, negation, date manipulation, and ordering results. Adapt the queries to match your specific database structure and naming conventions as needed.\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'customer': ['customer_id', 'name', 'email'], 'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id'], 'product': ['name', 'product_id', 'revenue', 'iPhone', 'category_id', 'brand_id', 'quantity', 'price', 'rating'], 'purchase_item': ['product_id', 'price', 'purchase_id', 'quantity', 'discount', 'purchase_item_id']} and \n# the user question: Retrieve the name and email of all customers who have made a purchase of a product with a rating of 5 stars.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and email of all customers who have made a purchase of a product with a rating of 5 stars.",
    "output": "SELECT customer.name, customer.email FROM customer JOIN purchase ON customer.customer_id = purchase.customer_id JOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id JOIN product ON purchase_item.product_id = product.product_id WHERE product.rating = 5",
    "schema": "advertising",
    "processed_schema_content": {
        "customer": [
            "customer_id",
            "name",
            "email"
        ],
        "purchase": [
            "customer_id",
            "purchase_date",
            "sales_rep_id",
            "purchase_id",
            "payment_status",
            "store_id"
        ],
        "product": [
            "name",
            "product_id",
            "revenue",
            "iPhone",
            "category_id",
            "brand_id",
            "quantity",
            "price",
            "rating"
        ],
        "purchase_item": [
            "product_id",
            "price",
            "purchase_id",
            "quantity",
            "discount",
            "purchase_item_id"
        ]
    },
    "response_text": "SELECT DISTINCT c.name, c.email \nFROM customer c \nJOIN purchase p ON c.customer_id = p.customer_id \nJOIN purchase_item pi ON p.purchase_id = pi.purchase_id \nJOIN product prod ON pi.product_id = prod.product_id \nWHERE prod.rating = 5;",
    "prompt_token_number": 348,
    "response_token_number": 56
},
{
    "id": 33667,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_id', 'project_name', 'description', 'user_id', 'created_at'], 'Rooms': ['room_id', 'room_name', 'project_id'], 'Products': ['product_id', 'product_name', 'description', 'supplier_id', 'price', 'category_id'], 'RoomProducts': ['room_product_id', 'room_id', 'product_id', 'quantity', 'project_id', 'supplier_id', 'order_id']}. \n# the user question is: Retrieve the project names and the total cost of products used in each project. Display only projects that have a total cost higher than $1000 and sort the results by the total cost in descending order:. \n#SQL query: SELECT Projects.project_name, SUM(RoomProducts.quantity * Products.price) AS total_cost FROM Projects JOIN Rooms ON Projects.project_id = Rooms.project_id JOIN RoomProducts ON Rooms.room_id = RoomProducts.room_id JOIN Products ON RoomProducts.product_id = Products.product_id GROUP BY Projects.project_name HAVING total_cost > 1000 ORDER BY total_cost DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id'], 'purchase_item': ['product_id', 'price', 'purchase_id', 'quantity', 'discount', 'purchase_item_id'], 'store': ['name', 'store_id', 'city']} and \n# the user question: Retrieve the name and total revenue of each store that has made sales in the past month, sorted in descending order of total revenue.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total revenue of each store that has made sales in the past month, sorted in descending order of total revenue.",
    "output": "SELECT store.name, SUM(purchase_item.price * purchase_item.quantity) AS total_revenue FROM store JOIN purchase ON store.store_id = purchase.store_id JOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id WHERE purchase.purchase_date >= DATE('now', '-1 month') GROUP BY store.store_id ORDER BY total_revenue DESC",
    "schema": "advertising",
    "processed_schema_content": {
        "purchase": [
            "customer_id",
            "purchase_date",
            "sales_rep_id",
            "purchase_id",
            "payment_status",
            "store_id"
        ],
        "purchase_item": [
            "product_id",
            "price",
            "purchase_id",
            "quantity",
            "discount",
            "purchase_item_id"
        ],
        "store": [
            "name",
            "store_id",
            "city"
        ]
    },
    "response_text": "SELECT store.name, SUM(purchase_item.price * purchase_item.quantity) AS total_revenue \nFROM store \nJOIN purchase ON store.store_id = purchase.store_id \nJOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id \nWHERE purchase.purchase_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) \nGROUP BY store.name \nORDER BY total_revenue DESC;",
    "prompt_token_number": 394,
    "response_token_number": 75
},
{
    "id": 33668,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Films': ['title', 'country', 'rating_id', 'director_id', 'film_id', 'synopsis', 'release_date', 'runtime', 'studio_id', 'composer_id', 'budget', 'box_office', 'imdb_rating', 'rotten_tomatoes_rating', 'mpaa_rating', 'production_company_id', 'oscar_wins', 'rating', 'rottentomatoes_rating', 'genre_id', 'runtime_minutes', 'release_year', 'The Conjuring', 'PG-13'], 'Directors': ['director_id', 'name', 'nationality', 'gender', 'description'], 'Films_Directors': ['film_id', 'director_id'], 'Films_Plots': ['film_id', 'plot_id', 'plot_description'], 'Plots': ['plot_type', 'plot_id'], 'Plot_Types': ['plot_type', 'supernatural', 'psychological', 'twist_ending', 'slasher', 'possession', 'found_footage', 'demonic_possession', 'serial_killer', 'zombie', 'haunted_house', 'ghost', 'vampire', 'werewolf', 'exorcism', 'creature_feature', 'paranormal', 'body_horror', 'cult', 'witch', 'psychological_horror', 'demon', 'virus', 'witchcraft', 'monster']}. \n# the user question is: Query: Retrieve the names and release dates of all horror films in the database that were directed by David Cronenberg and have a \"body horror\" plot element, along with their runtime and IMDb ratings, ordered by release date in descending order.. \n#SQL query: SELECT Films.title, Films.release_date, Films.runtime, Films.imdb_rating FROM Films JOIN Films_Directors ON Films.film_id = Films_Directors.film_id JOIN Directors ON Films_Directors.director_id = Directors.director_id JOIN Films_Plots ON Films.film_id = Films_Plots.film_id JOIN Plots ON Films_Plots.plot_id = Plots.plot_id JOIN Plot_Types ON Plots.plot_type = Plot_Types.plot_type WHERE Directors.name = 'David Cronenberg' AND Plot_Types.body_horror = 1 GROUP BY Films.film_id ORDER BY Films.release_date DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id'], 'purchase_item': ['product_id', 'price', 'purchase_id', 'quantity', 'discount', 'purchase_item_id'], 'store': ['name', 'store_id', 'city']} and \n# the user question: Retrieve the name and total revenue of each store that has made sales of at least $10,000 in the past month, sorted in descending order of total revenue.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and total revenue of each store that has made sales of at least $10,000 in the past month, sorted in descending order of total revenue.",
    "output": "SELECT store.name, SUM(purchase_item.price * purchase_item.quantity) AS total_revenue FROM store JOIN purchase ON store.store_id = purchase.store_id JOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id WHERE purchase.purchase_date >= DATE('now', '-1 month') GROUP BY store.store_id HAVING total_revenue >= 10000 ORDER BY total_revenue DESC",
    "schema": "advertising",
    "processed_schema_content": {
        "purchase": [
            "customer_id",
            "purchase_date",
            "sales_rep_id",
            "purchase_id",
            "payment_status",
            "store_id"
        ],
        "purchase_item": [
            "product_id",
            "price",
            "purchase_id",
            "quantity",
            "discount",
            "purchase_item_id"
        ],
        "store": [
            "name",
            "store_id",
            "city"
        ]
    },
    "response_text": "SELECT store.name, SUM(purchase_item.price * purchase_item.quantity) AS total_revenue \nFROM purchase \nJOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id \nJOIN store ON purchase.store_id = store.store_id \nWHERE purchase.purchase_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) \nGROUP BY store.store_id\nHAVING total_revenue >= 10000\nORDER BY total_revenue DESC;",
    "prompt_token_number": 662,
    "response_token_number": 86
},
{
    "id": 33669,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'movies': ['genre_id', 'budget', 'title', 'release_year', 'director_id', 'id', 'rating', 'release_date', 'runtime', 'worldwide_gross', 'director', 'year_of_release', 'worldwide_box_office_revenue', 'genre', 'movie_title', 'movie_id', 'studio_id', 'name', 'total_gross', 'production_company', 'avg_rating'], 'actors': ['id', 'name', 'age', 'birth_year', 'first_name', 'last_name', 'gender'], 'movie_actors': ['actor_id', 'movie_id', 'role'], 'genres': ['id', 'name']}. \n# the user question is: Find the names of all the actors who have appeared in at least 3 different horror movies:. \n#SQL query: SELECT name FROM actors WHERE id IN ( SELECT actor_id FROM movie_actors WHERE movie_id IN ( SELECT id FROM movies WHERE genre_id = (SELECT id FROM genres WHERE name = 'Horror') ) GROUP BY actor_id HAVING COUNT(DISTINCT movie_id) >= 3 );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'campaigns': ['campaign_id', 'campaign_name', 'salesperson_id', 'start_date', 'budget']} and \n# the user question: Find the names of all campaigns that have not yet been assigned to a salesperson.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all campaigns that have not yet been assigned to a salesperson.",
    "output": "SELECT campaign_name FROM campaigns WHERE salesperson_id IS NULL;",
    "schema": "advertising",
    "processed_schema_content": {
        "campaigns": [
            "campaign_id",
            "campaign_name",
            "salesperson_id",
            "start_date",
            "budget"
        ]
    },
    "response_text": "SELECT campaign_name FROM campaigns WHERE salesperson_id IS NULL;",
    "prompt_token_number": 354,
    "response_token_number": 12
},
{
    "id": 33675,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']}. \n# the user question is: Retrieve the name and total sales of all products that have been sold in the past month:. \n#SQL query: SELECT p.name, SUM(oi.quantity * oi.price) AS total_sales FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date >= DATE('now', '-1 month') GROUP BY p.product_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'ads': ['ad_id', 'campaign_id', 'ad_name', 'ad_copy', 'active', 'cost_per_click', 'end_date', 'bid', 'start_date', 'ad_type', 'ad_group_id', 'price', 'id'], 'ad_performance': ['date', 'clicks', 'ad_id', 'impressions', 'cost_per_conversion', 'cost', 'session_id', 'conversions', 'cost_per_click']} and \n# the user question: Find the total number of clicks generated by each ad in the last 30 days.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the total number of clicks generated by each ad in the last 30 days.",
    "output": "SELECT ads.ad_id, ads.ad_copy, SUM(ad_performance.clicks) AS total_clicks FROM ad_performance JOIN ads ON ad_performance.ad_id = ads.ad_id WHERE ads.active = 1 AND ad_performance.date >= DATE('now', '-30 days') GROUP BY ads.ad_id ORDER BY total_clicks DESC;",
    "schema": "advertising",
    "processed_schema_content": {
        "ads": [
            "ad_id",
            "campaign_id",
            "ad_name",
            "ad_copy",
            "active",
            "cost_per_click",
            "end_date",
            "bid",
            "start_date",
            "ad_type",
            "ad_group_id",
            "price",
            "id"
        ],
        "ad_performance": [
            "date",
            "clicks",
            "ad_id",
            "impressions",
            "cost_per_conversion",
            "cost",
            "session_id",
            "conversions",
            "cost_per_click"
        ]
    },
    "response_text": "SELECT a.ad_name, SUM(ap.clicks) AS total_clicks FROM ads a JOIN ad_performance ap ON a.ad_id = ap.ad_id WHERE ap.date >= DATE(NOW() - INTERVAL 30 DAY) GROUP BY a.ad_id;",
    "prompt_token_number": 448,
    "response_token_number": 49
},
{
    "id": 33680,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'mental_skills': ['skill_id', 'skill_name', 'skill_description', 'athlete_id', 'Focus', 'Visualization', 'skill_mastered', 'skill_level', 'Excellent', 'High', 'Low'], 'goals': ['goal_id', 'goal_name', 'goal_rating', 'skill_id'], 'athlete_goals': ['goal_id', 'athlete_id', 'goal_achieved', 'goal_date', 'date_achieved']}. \n# the user question is: Get the name and rating of all goals achieved by athletes who have a \"High\" level in the \"Motivation\" mental skill and a \"High\" level in the \"Confidence\" mental skill.. \n#SQL query: SELECT goals.goal_name, goals.goal_rating FROM athletes INNER JOIN athlete_skills AS s1 ON athletes.athlete_id = s1.athlete_id INNER JOIN athlete_skills AS s2 ON athletes.athlete_id = s2.athlete_id INNER JOIN mental_skills AS m1 ON s1.skill_id = m1.skill_id INNER JOIN mental_skills AS m2 ON s2.skill_id = m2.skill_id INNER JOIN athlete_goals ON athletes.athlete_id = athlete_goals.athlete_id INNER JOIN goals ON athlete_goals.goal_id = goals.goal_id WHERE m1.skill_name = 'Motivation' AND s1.skill_level = 'High' AND m2.skill_name = 'Confidence' AND s2.skill_level = 'High' AND athlete_goals.goal_achieved = 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'ads': ['ad_id', 'campaign_id', 'ad_name', 'ad_copy', 'active', 'cost_per_click', 'end_date', 'bid', 'start_date', 'ad_type', 'ad_group_id', 'price', 'id'], 'ad_performance': ['date', 'clicks', 'ad_id', 'impressions', 'cost_per_conversion', 'cost', 'session_id', 'conversions', 'cost_per_click']} and \n# the user question: Find the average cost per click (CPC) for all active ads in the last 7 days.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the average cost per click (CPC) for all active ads in the last 7 days.",
    "output": "SELECT AVG(ad_performance.cost_per_click) AS avg_cpc FROM ad_performance JOIN ads ON ad_performance.ad_id = ads.ad_id WHERE ads.active = 1 AND ad_performance.date >= DATE('now', '-7 days');",
    "schema": "advertising",
    "processed_schema_content": {
        "ads": [
            "ad_id",
            "campaign_id",
            "ad_name",
            "ad_copy",
            "active",
            "cost_per_click",
            "end_date",
            "bid",
            "start_date",
            "ad_type",
            "ad_group_id",
            "price",
            "id"
        ],
        "ad_performance": [
            "date",
            "clicks",
            "ad_id",
            "impressions",
            "cost_per_conversion",
            "cost",
            "session_id",
            "conversions",
            "cost_per_click"
        ]
    },
    "response_text": "SELECT AVG(ad_performance.cost_per_click) FROM ads INNER JOIN ad_performance ON ads.ad_id = ad_performance.ad_id WHERE ads.active = 1 AND ad_performance.date >= CURDATE() - INTERVAL 7 DAY;",
    "prompt_token_number": 584,
    "response_token_number": 43
},
{
    "id": 33683,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Websites': ['website_id', 'user_id', 'url', 'created_at', 'updated_at', 'name', 'domain_id', 'domain_authority_score', 'domain_created_at'], 'Pages': ['page_id', 'website_id', 'url', 'title', 'description', 'content', 'created_at', 'updated_at', 'meta_description', 'meta_keywords', 'meta_title', 'h1_tag', 'h2_tag', 'title_tag', 'canonical_url', 'description_tag', 'header_tag', 'meta_tag', 'meta_keyword', 'h1', 'heading', 'header', 'word_count', 'time_on_page', 'total_words', 'http_status_code', 'user_id', 'last_modified_date', '[website_id]'], 'Page_Stats': ['page_stat_id', 'page_id', 'visits', 'bounce_rate', 'time_on_page', 'created_at', 'updated_at', 'organic_traffic', 'load_time', 'page_speed_score', 'total_images', 'total_videos', 'page_authority_score', 'domain_authority_score', 'page_load_time', 'backlinks', 'search_query', 'search_volume']}. \n# the user question is: Retrieve the names and URLs of all websites that have at least one page with a time on page greater than or equal to 360 seconds and a bounce rate less than or equal to 0.02:. \n#SQL query: SELECT DISTINCT Websites.name, Websites.url FROM Websites INNER JOIN Pages ON Websites.website_id = Pages.website_id INNER JOIN Page_Stats ON Pages.page_id = Page_Stats.page_id WHERE Page_Stats.time_on_page >= 360 AND Page_Stats.bounce_rate <= 0.02;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['price', 'category', 'name', 'product_id', 'stock_quantity', 'product_name', 'on_sale', 'rating', 'category_id', 'id']} and \n# the user question: Retrieve the names and prices of all products with a price greater than $50 that are not currently on sale.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the names and prices of all products with a price greater than $50 that are not currently on sale.",
    "output": "SELECT name, price FROM products WHERE price > 50 AND on_sale = 0;",
    "schema": "advertising",
    "processed_schema_content": {
        "products": [
            "price",
            "category",
            "name",
            "product_id",
            "stock_quantity",
            "product_name",
            "on_sale",
            "rating",
            "category_id",
            "id"
        ]
    },
    "response_text": "SELECT name, price FROM products WHERE price > 50 AND on_sale = false;",
    "prompt_token_number": 501,
    "response_token_number": 17
},
{
    "id": 33686,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Species': ['species_id', 'name', 'common_name', 'classification_id', 'genus', 'family_id', 'scientific_name', 'class_id', 'taxonomy', 'category', 'conservation_status', 'population_trend', 'habitat', 'migration_pattern', 'min_depth_range', 'max_depth_range', 'body_size', 'body_temperature_range', 'migratory_behavior', 'species_name', 'discovery_year', 'class_name', 'is_venomous', 'order_name'], 'SamplingLocations': ['location_id', 'location_name', 'latitude', 'longitude', 'depth', 'habitat_id', 'temperature_range', 'ocean_id', 'ocean', 'Reef', 'Great', 'Barrier'], 'FisheryData': ['fishery_id', 'species_id', 'fishery_name', 'catch_date', 'catch_weight', 'fishing_method', 'gear_type', 'fishing_days', 'average_length', 'catch_number', 'fish_length', 'fish_weight', 'catch_length', 'location_id', 'catch_id', 'vessel_id', 'net_mesh_size', 'method_id'], 'SpeciesData': ['sample_id', 'species_id', 'weight', 'catch_id', 'length', 'catch_date', 'depth', 'individuals_caught']}. \n# the user question is: Retrieve the top 5 locations with the highest total number of \"Tuna\" caught using the \"Pole and line\" fishing method, along with the total number of fish caught for each location:. \n#SQL query: SELECT SamplingLocations.location_name, COUNT(SpeciesData.species_id) AS total_catch FROM Species INNER JOIN SpeciesData ON Species.species_id = SpeciesData.species_id INNER JOIN FisheryData ON SpeciesData.catch_id = FisheryData.catch_id INNER JOIN SamplingLocations ON FisheryData.location_id = SamplingLocations.location_id WHERE Species.common_name = 'Tuna' AND FisheryData.fishing_method = 'Pole and line' GROUP BY SamplingLocations.location_id ORDER BY total_catch DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'customers': ['customer_id', 'name', 'email', 'phone', 'address', 'country', 'first_name', 'last_name', 'date_created', 'marketing_channel', 'customer_name'], 'orders': ['customer_id', 'date_placed', 'order_id', 'date_shipped', 'order_total', 'total_price', 'sales_channel', 'order_date', 'payment_date'], 'products': ['price', 'category', 'name', 'product_id', 'stock_quantity', 'product_name', 'on_sale', 'rating', 'category_id', 'id'], 'order_items': ['price', 'order_id', 'quantity', 'product_id', 'total_price', 'order_date', 'TOP']} and \n# the user question: Retrieve the top 10 customers with the highest total amount spent on orders.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the top 10 customers with the highest total amount spent on orders.",
    "output": "SELECT customers.first_name, customers.last_name, SUM(order_items.quantity * products.price) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id GROUP BY customers.customer_id ORDER BY total_spent DESC LIMIT 10;",
    "schema": "advertising",
    "processed_schema_content": {
        "customers": [
            "customer_id",
            "name",
            "email",
            "phone",
            "address",
            "country",
            "first_name",
            "last_name",
            "date_created",
            "marketing_channel",
            "customer_name"
        ],
        "orders": [
            "customer_id",
            "date_placed",
            "order_id",
            "date_shipped",
            "order_total",
            "total_price",
            "sales_channel",
            "order_date",
            "payment_date"
        ],
        "products": [
            "price",
            "category",
            "name",
            "product_id",
            "stock_quantity",
            "product_name",
            "on_sale",
            "rating",
            "category_id",
            "id"
        ],
        "order_items": [
            "price",
            "order_id",
            "quantity",
            "product_id",
            "total_price",
            "order_date",
            "TOP"
        ]
    },
    "response_text": "SELECT customers.customer_id, SUM(orders.total_price) AS total_amount FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id ORDER BY total_amount DESC LIMIT 10;",
    "prompt_token_number": 678,
    "response_token_number": 41
},
{
    "id": 33688,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director', 'runtime', 'budget', 'box_office', 'rating', 'release_date', 'imdb_rating', 'director_id', 'production_company_id', 'box_office_gross'], 'Genre': ['genre_id', 'name'], 'MovieGenre': ['movie_id', 'genre_id'], 'Review': ['review_id', 'movie_id', 'reviewer_id', 'rating', 'review_text']}. \n# the user question is: Show the total box office revenue and average rating of all Western movies that were released in the 1950s, 1960s, and 1970s combined.. \n#SQL query: SELECT SUM(Movie.box_office) AS total_box_office, AVG(Review.rating) AS avg_rating FROM Movie JOIN Review ON Movie.movie_id = Review.movie_id JOIN MovieGenre ON Movie.movie_id = MovieGenre.movie_id JOIN Genre ON MovieGenre.genre_id = Genre.genre_id WHERE Genre.name = 'Western' AND strftime('%Y', Movie.release_date) BETWEEN '1950' AND '1979';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['price', 'category', 'name', 'product_id', 'stock_quantity', 'product_name', 'on_sale', 'rating', 'category_id', 'id']} and \n# the user question: Retrieve the average rating of all products in the \"home appliances\" category.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the average rating of all products in the \"home appliances\" category.",
    "output": "SELECT AVG(rating) AS avg_rating FROM products WHERE category = 'home appliances';",
    "schema": "advertising",
    "processed_schema_content": {
        "products": [
            "price",
            "category",
            "name",
            "product_id",
            "stock_quantity",
            "product_name",
            "on_sale",
            "rating",
            "category_id",
            "id"
        ]
    },
    "response_text": "SELECT AVG(rating) AS avg_rating FROM products WHERE category = 'home appliances';",
    "prompt_token_number": 365,
    "response_token_number": 17
},
{
    "id": 33696,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']}. \n# the user question is: Retrieve the name and average price of all products that are currently out of stock:. \n#SQL query: SELECT p.name, AVG(p.price) AS average_price FROM products p WHERE p.quantity_in_stock = 0 GROUP BY p.product_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['price', 'category', 'name', 'product_id', 'stock_quantity', 'product_name', 'on_sale', 'rating', 'category_id', 'id']} and \n# the user question: Retrieve the name and price of all products that have a price greater than $50 and are in the electronics category. query:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and price of all products that have a price greater than $50 and are in the electronics category. query:",
    "output": "SELECT name, price FROM products WHERE price > 50 AND category = 'electronics';",
    "schema": "advertising",
    "processed_schema_content": {
        "products": [
            "price",
            "category",
            "name",
            "product_id",
            "stock_quantity",
            "product_name",
            "on_sale",
            "rating",
            "category_id",
            "id"
        ]
    },
    "response_text": "SELECT p.name, p.price FROM products p WHERE p.price > 50 AND p.category = 'electronics';",
    "prompt_token_number": 282,
    "response_token_number": 22
},
{
    "id": 33702,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Titanic': ['Age', 'Sex', 'Survived', 'Fare', 'Pclass', 'SibSp', 'Parch', 'Embarked', 'Cabin']}. \n# the user question is: What is the total number of passengers in the 'Titanic' dataset who have a 'SibSp' value greater than or equal to 3 and a 'Parch' value less than or equal to 1?. \n#SQL query: SELECT COUNT(*) FROM Titanic WHERE SibSp >= 3 AND Parch <= 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Vote': ['election_id', 'voter_id', 'id'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id']} and \n# the user question: Find the total number of votes cast in the 2020 US Presidential Election:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the total number of votes cast in the 2020 US Presidential Election:",
    "output": "SELECT COUNT(*) FROM Vote WHERE election_id = ( SELECT id FROM Election WHERE date = '2020-11-03' AND country_id = 1 );",
    "schema": "political_science",
    "processed_schema_content": {
        "Vote": [
            "election_id",
            "voter_id",
            "id"
        ],
        "Election": [
            "country_id",
            "id",
            "winner_party_id",
            "region",
            "date",
            "party_id",
            "year",
            "constituency_id"
        ]
    },
    "response_text": "SELECT COUNT(*) FROM Vote WHERE election_id IN (SELECT id FROM Election WHERE year = 2020 AND country_id = 'US');",
    "prompt_token_number": 267,
    "response_token_number": 27
},
{
    "id": 33703,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']}. \n# the user question is: Retrieve the name and price of all products that have not been ordered in the last 60 days:. \n#SQL query: SELECT name, price FROM products WHERE product_id NOT IN ( SELECT oi.product_id FROM order_items oi JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date >= DATE('now', '-60 days') );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded']} and \n# the user question: List all the political parties in the database and the total number of politicians belonging to each party:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List all the political parties in the database and the total number of politicians belonging to each party:",
    "output": "SELECT PoliticalParty.name, COUNT(*) AS num_politicians FROM Politician JOIN PoliticalParty ON Politician.political_party = PoliticalParty.id GROUP BY PoliticalParty.name;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "PoliticalParty": [
            "ideology",
            "id",
            "name",
            "political_party",
            "country_id",
            "number_of_seats",
            "number_of_members",
            "number_of_female_members",
            "total_spending",
            "total_revenue",
            "total_funding",
            "num_seats",
            "num_members",
            "date_founded"
        ]
    },
    "response_text": "SELECT pp.name, COUNT(p.id) \nFROM PoliticalParty pp \nLEFT JOIN Politician p ON pp.id = p.party_id \nGROUP BY pp.name;",
    "prompt_token_number": 504,
    "response_token_number": 32
},
{
    "id": 33705,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'email', 'username', 'phone_number', 'email_address', 'creation_date', 'current_city_id', 'current_state_id', 'state_id'], 'Agencies': ['agency_id', 'agency_name', 'Department', 'Fire', 'address', 'Police', 'agency_location_id', 'location_id', 'phone_number', 'state_id', 'county_id'], 'Agency_Users': ['agency_id', 'user_id']}. \n# the user question is: Retrieve the names of all users who are assigned to an agency with an address in New York City.. \n#SQL query: SELECT Users.username FROM Users INNER JOIN Agency_Users ON Users.user_id = Agency_Users.user_id INNER JOIN Agencies ON Agency_Users.agency_id = Agencies.agency_id WHERE Agencies.address LIKE '%New York City%'\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the average area of all the countries in the database, grouped by region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the average area of all the countries in the database, grouped by region:",
    "output": "SELECT region, AVG(area) FROM Country GROUP BY region;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT region, AVG(area) FROM Country GROUP BY region;",
    "prompt_token_number": 485,
    "response_token_number": 12
},
{
    "id": 33706,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Comedians': ['first_name', 'last_name', 'comedian_id', 'nationality', 'birthplace', 'country_id', 'birth_year', 'gender', 'name', 'city_id', 'school_id', 'birth_state', 'netflix_special', 'youtube_subscribers', 'experience'], 'Performances': ['rating', 'comedian_id', 'show_id', 'performance_id', 'special_id', 'venue_id', 'production_id', 'performance_date'], 'Shows': ['year', 'show_id', 'title', 'description', 'location', 'venue_id', 'duration', 'network', 'release_date', 'Sticks', 'date_recorded', 'name', 'duration_minutes', 'recorded_year', 'date'], 'Tags': ['tag_id', 'tag'], 'Show_Tags': ['tag_id', 'show_id']}. \n# the user question is: Retrieve the names and nationalities of all comedians who have performed in a show that has the tag \"satire\".. \n#SQL query: SELECT DISTINCT c.first_name || ' ' || c.last_name AS comedian_name, c.nationality FROM Comedians c JOIN Performances p ON p.comedian_id = c.comedian_id JOIN Shows s ON s.show_id = p.show_id JOIN Show_Tags st ON st.show_id = s.show_id JOIN Tags t ON t.tag_id = st.tag_id WHERE t.tag = 'satire';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id']} and \n# the user question: Find the number of elections in the database that were won by a political party with \"conservative\" in their name:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the number of elections in the database that were won by a political party with \"conservative\" in their name:",
    "output": "SELECT COUNT(*) FROM Election WHERE winner_party_id IN ( SELECT id FROM PoliticalParty WHERE name LIKE '%Conservative%' );",
    "schema": "political_science",
    "processed_schema_content": {
        "PoliticalParty": [
            "ideology",
            "id",
            "name",
            "political_party",
            "country_id",
            "number_of_seats",
            "number_of_members",
            "number_of_female_members",
            "total_spending",
            "total_revenue",
            "total_funding",
            "num_seats",
            "num_members",
            "date_founded"
        ],
        "Election": [
            "country_id",
            "id",
            "winner_party_id",
            "region",
            "date",
            "party_id",
            "year",
            "constituency_id"
        ]
    },
    "response_text": "SELECT COUNT(*) FROM Election e JOIN PoliticalParty pp ON e.winner_party_id = pp.id WHERE pp.name LIKE '%conservative%';",
    "prompt_token_number": 512,
    "response_token_number": 28
},
{
    "id": 33709,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'athlete_metrics': ['metric_name', 'athlete_id', 'value', 'metric_id'], 'coaches': ['name', 'coach_id', 'coach_name', 'email'], 'teams': ['team_id', 'coach_id', 'sport_id', 'team_name', 'team_medal', 'championship_id'], 'performance_metrics': ['metric_name', 'metric_id']}. \n# the user question is: Get a list of all coaches and the average value of the \"Agility\" performance metric for their athletes.. \n#SQL query: SELECT coaches.name, AVG(athlete_metrics.value) AS avg_agility FROM coaches INNER JOIN teams ON coaches.coach_id = teams.coach_id INNER JOIN athletes ON teams.team_id = athletes.team_id INNER JOIN athlete_metrics ON athletes.athlete_id = athlete_metrics.athlete_id INNER JOIN performance_metrics ON athlete_metrics.metric_id = performance_metrics.metric_id WHERE performance_metrics.metric_name = 'Agility' GROUP BY coaches.name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name of the country with the largest area:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name of the country with the largest area:",
    "output": "SELECT name FROM Country WHERE area = ( SELECT MAX(area) FROM Country );",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name FROM Country ORDER BY area DESC LIMIT 1;",
    "prompt_token_number": 529,
    "response_token_number": 12
},
{
    "id": 33711,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Cultures': ['culture_id', 'name', 'region', 'time_period'], 'Ethnographers': ['ethnographer_id', 'name', 'birth_date', 'nationality'], 'EthnographicStudies': ['study_id', 'ethnographer_id', 'culture_id', 'study_title', 'research_notes'], 'Publications': ['publication_id', 'study_id', 'publication_date', 'title', 'authors', 'publication_year']}. \n# the user question is: Retrieve the names and nationalities of ethnographers who have conducted studies on cultures in the region 'Middle East' and have published a publication after the year 2015:. \n#SQL query: SELECT Ethnographers.name, Ethnographers.nationality FROM Ethnographers JOIN EthnographicStudies ON Ethnographers.ethnographer_id = EthnographicStudies.ethnographer_id JOIN Cultures ON EthnographicStudies.culture_id = Cultures.culture_id JOIN Publications ON EthnographicStudies.study_id = Publications.study_id WHERE Cultures.region = 'Middle East' AND Publications.publication_year > 2015;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state']} and \n# the user question: List the name and birthdate of the oldest politician in the database:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the name and birthdate of the oldest politician in the database:",
    "output": "SELECT name, birthdate FROM Politician ORDER BY birthdate ASC LIMIT 1;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ]
    },
    "response_text": "SELECT name, birthdate FROM Politician ORDER BY birthdate ASC LIMIT 1;",
    "prompt_token_number": 419,
    "response_token_number": 17
},
{
    "id": 33712,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Modes': ['mode_id', 'game_id'], 'Modes': ['mode_id', 'mode_name', 'mode_type'], 'Game_Developers': ['developer_id', 'game_id'], 'Developers': ['developer_id', 'developer_name']}. \n# the user question is: Find the names of all games that have been developed by \"Square Enix\" and have a \"Role-Playing\" game mode.. \n#SQL query: SELECT DISTINCT Games.game_title FROM Games INNER JOIN Game_Modes ON Games.game_id = Game_Modes.game_id INNER JOIN Modes ON Game_Modes.mode_id = Modes.mode_id INNER JOIN Game_Developers ON Games.game_id = Game_Developers.game_id INNER JOIN Developers ON Game_Developers.developer_id = Developers.developer_id WHERE Developers.developer_name = 'Square Enix' AND Modes.mode_name = 'Role-Playing';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the total number of countries in each region, ordered by region name:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the total number of countries in each region, ordered by region name:",
    "output": "SELECT region, COUNT(*) AS num_countries FROM Country GROUP BY region ORDER BY region ASC;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT region, COUNT(name) as total_countries FROM Country GROUP BY region ORDER BY region;",
    "prompt_token_number": 518,
    "response_token_number": 18
},
{
    "id": 33714,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']}. \n# the user question is: Find the name and homicide rate of the 5 countries with the highest homicide rate and a population greater than 5 million:. \n#SQL query: SELECT name, homicide_rate FROM Country WHERE population > 5000000 ORDER BY homicide_rate DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: List the name and population of all countries with a population greater than 100 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the name and population of all countries with a population greater than 100 million:",
    "output": "SELECT name, population FROM Country WHERE population > 100000000;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population FROM Country WHERE population > 100000000;",
    "prompt_token_number": 583,
    "response_token_number": 14
},
{
    "id": 33716,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'price', 'manufacturer_id', 'avg_rating', 'color', 'category_id', 'review_count', 'quantity', 'max_rating', 'min_rating', 'max_review_count'], 'ProductReviews': ['rating', 'product_id', 'review_id', 'user_id', 'customer_id', 'category_id']}. \n# the user question is: \"Retrieve the products that have not been reviewed by any user.\". \n#SQL query: SELECT p.product_id, p.product_name FROM Products p LEFT JOIN ProductReviews pr ON p.product_id = pr.product_id WHERE pr.review_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the average population density of all the countries in the \"Europe\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the average population density of all the countries in the \"Europe\" region:",
    "output": "SELECT AVG(population / area) AS avg_density FROM Country WHERE region = 'Europe';",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT AVG(population_density) FROM Country WHERE region = 'Europe';",
    "prompt_token_number": 444,
    "response_token_number": 14
},
{
    "id": 33722,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Transcript': ['gene_id', 'coding_sequence_end', 'transcript_name', 'transcript_id', 'protein_id', 'coding_sequence_length', 'transcript_length', 'length', 'cds_length'], 'Disease': ['disease_id', 'disease_name', 'gene_id', 'genetic_cause', 'mode_of_inheritance', 'is_genetic', 'prevalence_rate', 'Name', 'ID'], 'Variant': ['variant_type', 'transcript_id', 'variant_name', 'maf', 'variant_id', 'position', 'exon_id', 'intron_id', 'gene_id', 'pathogenicity', 'vaf', 'impact', 'effect', 'cadd_score', 'minor_allele_frequency', 'pathogenicity_score', 'population_frequency', 'population', 'chromosome']}. \n# the user question is: Retrieve the names of all transcripts that have at least one non-synonymous variant and are associated with a disease that has a \"recessive\" mode of inheritance.. \n#SQL query: SELECT DISTINCT Transcript.transcript_name FROM Transcript JOIN Variant ON Transcript.transcript_id = Variant.transcript_id AND Variant.variant_type = 'missense' JOIN Disease ON Transcript.gene_id = Disease.gene_id AND Disease.mode_of_inheritance = 'recessive';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id']} and \n# the user question: List the names and ideologies of all the political parties in the database that have won at least one election:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names and ideologies of all the political parties in the database that have won at least one election:",
    "output": "SELECT PoliticalParty.name, PoliticalParty.ideology FROM PoliticalParty JOIN Election ON PoliticalParty.id = Election.winner_party_id GROUP BY PoliticalParty.name;",
    "schema": "political_science",
    "processed_schema_content": {
        "PoliticalParty": [
            "ideology",
            "id",
            "name",
            "political_party",
            "country_id",
            "number_of_seats",
            "number_of_members",
            "number_of_female_members",
            "total_spending",
            "total_revenue",
            "total_funding",
            "num_seats",
            "num_members",
            "date_founded"
        ],
        "Election": [
            "country_id",
            "id",
            "winner_party_id",
            "region",
            "date",
            "party_id",
            "year",
            "constituency_id"
        ]
    },
    "response_text": "SELECT DISTINCT PoliticalParty.name, PoliticalParty.ideology FROM PoliticalParty JOIN Election ON PoliticalParty.id = Election.winner_party_id;",
    "prompt_token_number": 482,
    "response_token_number": 26
},
{
    "id": 33725,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'remedy': ['remedy_id', 'dosage', 'name', 'description'], 'remedy_symptom': ['remedy_id', 'symptom_id', 'age_group_id', 'gender_id'], 'symptom': ['symptom_id', 'name'], 'medicine': ['medicine_id', 'dosage', 'name', 'description'], 'medicine_symptom': ['symptom_id', 'medicine_id', 'age_group_id', 'gender_id']}. \n# the user question is: Find the names and dosages of all remedies and medicines that are recommended for stress:. \n#SQL query: SELECT remedy.name, remedy.dosage FROM remedy JOIN remedy_symptom ON remedy.remedy_id = remedy_symptom.remedy_id JOIN symptom ON remedy_symptom.symptom_id = symptom.symptom_id WHERE symptom.name = 'Stress' UNION SELECT medicine.name, medicine.dosage FROM medicine JOIN medicine_symptom ON medicine.medicine_id = medicine_symptom.medicine_id JOIN symptom ON medicine_symptom.symptom_id = symptom.symptom_id WHERE symptom.name = 'Stress';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 most populous countries in the \"Asia\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population of the 5 most populous countries in the \"Asia\" region:",
    "output": "SELECT name, population FROM Country WHERE region = 'Asia' ORDER BY population DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population FROM Country WHERE region = 'Asia' ORDER BY population DESC LIMIT 5;",
    "prompt_token_number": 539,
    "response_token_number": 20
},
{
    "id": 33728,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Patients': ['medical_history', 'patient_id', 'first_name', 'last_name', 'age_group', 'gender', 'Age', 'Contact_Info', 'Name', 'Diagnosis', 'Discharge_Date', 'Admission_Date', 'Address', 'Family_History', 'Patient_ID', 'Doctor_ID', 'Doctor_I', 'AdmissionDate', 'Therapy', 'date_of_birth', 'name'], 'Admissions': ['date_discharged', 'room_id', 'patient_id', 'admission_id', 'date_admitted', 'nurse_id', 'medical_record_id', 'admission_date', 'discharge_date', 'ward_id', 'num_medications', 'Unit_Type', 'Admission_Date', 'Diagnosis', 'Discharge_Date', 'Patient_ID'], 'Billing': ['amount', 'procedure_id', 'surgery_id', 'admission_id', 'amount_paid', 'date_paid']}. \n# the user question is: Find the patients who have been discharged from a room and have a remaining balance of less than $1000.. \n#SQL query: SELECT DISTINCT Patients.patient_id, Patients.first_name, Patients.last_name, Admissions.date_discharged, Billing.amount, Billing.amount_paid FROM Patients INNER JOIN Admissions ON Patients.patient_id = Admissions.patient_id LEFT JOIN Billing ON Admissions.admission_id = Billing.admission_id WHERE Admissions.date_discharged IS NOT NULL AND Billing.amount > 0 AND (Billing.amount - Billing.amount_paid) < 1000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded']} and \n# the user question: List the name and ideology of the political party with the most politicians who were born after 1980:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the name and ideology of the political party with the most politicians who were born after 1980:",
    "output": "SELECT PoliticalParty.name, PoliticalParty.ideology FROM PoliticalParty JOIN ( SELECT political_party, COUNT(*) AS num_politicians FROM Politician WHERE birthdate > '1980-01-01' GROUP BY political_party ORDER BY num_politicians DESC LIMIT 1 ) AS max_party ON PoliticalParty.id = max_party.political_party;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "PoliticalParty": [
            "ideology",
            "id",
            "name",
            "political_party",
            "country_id",
            "number_of_seats",
            "number_of_members",
            "number_of_female_members",
            "total_spending",
            "total_revenue",
            "total_funding",
            "num_seats",
            "num_members",
            "date_founded"
        ]
    },
    "response_text": "SELECT PoliticalParty.name, PoliticalParty.ideology, COUNT(Politician.id) AS num_politicians\nFROM PoliticalParty\nJOIN Politician ON Politician.political_party = PoliticalParty.id\nWHERE Politician.birthdate > '1980-01-01'\nGROUP BY PoliticalParty.name, PoliticalParty.ideology\nORDER BY num_politicians DESC\nLIMIT 1;",
    "prompt_token_number": 579,
    "response_token_number": 78
},
{
    "id": 33731,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Films': ['title', 'country', 'rating_id', 'director_id', 'film_id', 'synopsis', 'release_date', 'runtime', 'studio_id', 'composer_id', 'budget', 'box_office', 'imdb_rating', 'rotten_tomatoes_rating', 'mpaa_rating', 'production_company_id', 'oscar_wins', 'rating', 'rottentomatoes_rating', 'genre_id', 'runtime_minutes', 'release_year', 'The Conjuring', 'PG-13'], 'Directors': ['director_id', 'name', 'nationality', 'gender', 'description'], 'Actors': ['actor_id', 'name', 'nationality', 'description', 'birth_date'], 'Films_Actors': ['actor_id', 'film_id', 'role'], 'Films_Genres': ['film_id', 'genre_id'], 'Genres': ['genre_id', 'name', 'description']}. \n# the user question is: Query: Retrieve the names and nationalities of all actors who have starred in at least one horror film directed by James Wan, ordered by nationality in ascending order.. \n#SQL query: SELECT Actors.name, Actors.nationality FROM Actors JOIN Films_Actors ON Actors.actor_id = Films_Actors.actor_id JOIN Films ON Films_Actors.film_id = Films.film_id JOIN Directors ON Films.director_id = Directors.director_id JOIN Films_Genres ON Films.film_id = Films_Genres.film_id JOIN Genres ON Films_Genres.genre_id = Genres.genre_id WHERE Genres.name = 'Horror' AND Directors.name = 'James Wan' GROUP BY Actors.actor_id ORDER BY Actors.nationality ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded'], 'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id']} and \n# the user question: List the names and ideologies of all the political parties in the database that have won at least one election in the \"North America\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names and ideologies of all the political parties in the database that have won at least one election in the \"North America\" region:",
    "output": "SELECT DISTINCT PoliticalParty.name, PoliticalParty.ideology FROM PoliticalParty JOIN Election ON PoliticalParty.id = Election.winner_party_id JOIN Country ON Election.country_id = Country.id WHERE Country.region = 'North America';",
    "schema": "political_science",
    "processed_schema_content": {
        "PoliticalParty": [
            "ideology",
            "id",
            "name",
            "political_party",
            "country_id",
            "number_of_seats",
            "number_of_members",
            "number_of_female_members",
            "total_spending",
            "total_revenue",
            "total_funding",
            "num_seats",
            "num_members",
            "date_founded"
        ],
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ],
        "Election": [
            "country_id",
            "id",
            "winner_party_id",
            "region",
            "date",
            "party_id",
            "year",
            "constituency_id"
        ]
    },
    "response_text": "SELECT PoliticalParty.name, PoliticalParty.ideology \nFROM PoliticalParty \nJOIN Election ON PoliticalParty.id = Election.winner_party_id \nJOIN Country ON Election.country_id = Country.id \nWHERE Country.region = 'North America' \nGROUP BY PoliticalParty.id;",
    "prompt_token_number": 781,
    "response_token_number": 52
},
{
    "id": 33732,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']}. \n# the user question is: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Cooking\" and have a budget greater than $80 million:. \n#SQL query: SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Cooking' AND Campaigns.budget > 80000000 AND Campaigns.status = 'active';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state']} and \n# the user question: List the name and birthdate of the youngest female politician in the database:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the name and birthdate of the youngest female politician in the database:",
    "output": "SELECT name, birthdate FROM Politician WHERE gender = 'Female' ORDER BY birthdate DESC LIMIT 1;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ]
    },
    "response_text": "SELECT Politician.name, Politician.birthdate FROM Politician WHERE Politician.gender = 'female' ORDER BY Politician.birthdate DESC LIMIT 1;",
    "prompt_token_number": 499,
    "response_token_number": 31
},
{
    "id": 33733,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'celestial_bodies': ['radius', 'mass', 'name', 'type', 'number_of_moons', 'distance_from_sun', 'id', 'distance_from_earth', 'orbital_period', 'diameter', 'orbiting_body_id', 'average_surface_temperature', 'surface_temperature', 'perihelion_distance', 'period', 'semimajor_axis', 'redshift', 'velocity', 'luminosity', 'schwarzschild_radius', 'eccentricity', 'aphelion_distance', 'spin_period', 'semi_major_axis', 'surface_gravity', 'temperature', 'magnitude', 'accretion_disk_temperature', 'rotation_period', 'obliquity', 'pulse_period', 'peak_absolute_magnitude', 'albedo', 'apparent_magnitude', 'absolute_magnitude', 'spectral_type', 'discovery_year', 'spectral_class', 'distance_from_star', 'discovery_method_id', 'equilibrium_temperature', 'metallicity', 'age', 'effective_temperature', 'atmospheric_composition', 'inclination', 'parallax', 'rotation_velocity', 'axial_tilt', 'orbital_inclination', 'density', 'rotational_velocity', 'magnetic_field_strength', 'composition', 'rotational_period', 'spin', 'distance_from_galactic_center', 'binary_system', 'constellation', 'stellar_evolution_stage', 'star_cluster_type', 'galaxy', 'orbital_eccentricity', 'star_spectral_type', 'orbital_period_unit', 'diameter_unit', 'discovery_method', 'pulse_period_unit', 'distance_unit', 'radius_unit', 'avg_temperature', 'temperature_unit', 'aphelion_unit', 'perihelion_unit', 'event_horizon_unit', 'event_horizon_radius', 'luminosity_distance', 'orbit_type', 'equatorial_diameter', 'gravity_unit', 'escape_velocity', 'angle_unit', 'surface_area', 'density_unit', 'parent_body_id', 'atmospheric_pressure', 'luminosity_class', 'inner_habitable_zone', 'outer_habitable_zone', 'period_unit', 'classification', 'pressure_unit', 'surface_pressure', 'orbiting', 'distance', 'proper_motion', 'proper_motion_unit', 'mean_radius', 'mass_unit', 'temperature_range', 'Gas', 'Giant', 'brightness_temperature', 'parallax_unit', 'metallicity_unit', 'magnetic_field_unit', 'spin_parameter', 'orbiting_id', 'stellar_mass', 'stage', 'radial_velocity', 'host_star', 'accretion_rate', 'core_type']}. \n# the user question is: Retrieve the name and mass of all celestial bodies that have a type of 'Supergiant star' and a luminosity greater than 1000000 times the luminosity of the Sun.. \n#SQL query: SELECT name, mass FROM celestial_bodies WHERE type = 'Supergiant star' AND luminosity > 1000000 * (SELECT luminosity FROM celestial_bodies WHERE name = 'Sun');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 3 least populous countries in the \"Europe\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population of the 3 least populous countries in the \"Europe\" region:",
    "output": "SELECT name, population FROM Country WHERE region = 'Europe' ORDER BY population ASC LIMIT 3;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population FROM Country WHERE region = 'Europe' ORDER BY population ASC LIMIT 3;",
    "prompt_token_number": 950,
    "response_token_number": 20
},
{
    "id": 33738,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Orders': ['customer_id', 'order_total', 'order_date', 'order_id', 'delivery_date', 'shipment_id', 'order_total_cost', 'date', 'total_price', 'total_amount', 'shipping_date'], 'Customers': ['customer_id', 'phone_number', 'email', 'customer_name', 'address', 'customer_email', 'customer_phone', 'customer_address', 'email_address', 'phone', 'registration_date', 'country', 'city', 'state', 'name', 'id', 'first_name', 'last_name'], 'Order_Items': ['order_id', 'product_id', 'glassware_item_id', 'quantity', 'unit_price', 'order_item_id', 'price', 'item_cost', 'item_id', 'order_date', 'item_price'], 'Etching_Glassware_Items': ['etching_id', 'quantity', 'glassware_item_id', 'etching_glassware_item_id']}. \n# the user question is: Retrieve the list of customers who have placed at least one order containing an etched glassware item, along with their names and email addresses.. \n#SQL query: SELECT DISTINCT Customers.customer_name, Customers.email FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id INNER JOIN Etching_Glassware_Items ON Order_Items.glassware_item_id = Etching_Glassware_Items.glassware_item_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 3 smallest countries in the \"South America\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and area of the 3 smallest countries in the \"South America\" region:",
    "output": "SELECT name, area FROM Country WHERE region = 'South America' ORDER BY area ASC LIMIT 3;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, area FROM Country WHERE region = 'South America' ORDER BY area ASC LIMIT 3;",
    "prompt_token_number": 612,
    "response_token_number": 21
},
{
    "id": 33740,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Authors': ['first_name', 'author_id', 'last_name', 'nationality', 'author_name', 'author_city', 'AuthorID', 'AuthorName'], 'Order_Items': ['price', 'quantity', 'order_id', 'book_id', 'customer_id', 'publisher_id', 'is_returned', 'product_id', 'is_delivered', 'total_price', 'order_date'], 'Orders': ['order_date', 'order_id', 'customer_id', 'coupon_code', 'total_cost', 'total_quantity', 'shipping_address_id', 'total_price', 'total_amount', 'salesperson_id', 'book_id', 'channel_id', 'Order_Date', 'Order_Total', 'Customer_Name']}. \n# the user question is: Retrieve the titles and authors of books that have not been ordered in the past 6 months.. \n#SQL query: SELECT b.title, CONCAT(a.first_name, ' ', a.last_name) AS author FROM Books b JOIN Authors a ON b.author_id = a.author_id WHERE b.book_id NOT IN ( SELECT DISTINCT book_id FROM Order_Items WHERE order_id IN ( SELECT order_id FROM Orders WHERE order_date >= DATE('now', '-6 months') ) );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 most populous countries in the \"North America\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population of the 5 most populous countries in the \"North America\" region:",
    "output": "SELECT name, population FROM Country WHERE region = 'North America' ORDER BY population DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population FROM Country WHERE region = 'North America' ORDER BY population DESC LIMIT 5;",
    "prompt_token_number": 668,
    "response_token_number": 21
},
{
    "id": 33742,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'EnergyConsumption': ['BuildingID', 'Cost', 'Consumption', 'PowerDemand', 'Hour', 'Date', 'MeterID']}. \n# the user question is: Retrieve the energy meter IDs for the meters that have recorded energy consumption data for every hour of every day from January 1st, 2022 to March 31st, 2022.. \n#SQL query: SELECT DISTINCT MeterID FROM EnergyConsumption WHERE Date BETWEEN '2022-01-01' AND '2022-03-31' GROUP BY MeterID HAVING COUNT(DISTINCT Date) = (julianday('2022-03-31') - julianday('2022-01-01') + 1) * 24;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id']} and \n# the user question: Find the total number of elections held in each country in the database:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the total number of elections held in each country in the database:",
    "output": "SELECT Country.name, COUNT(*) AS num_elections FROM Country JOIN Election ON Country.id = Election.country_id GROUP BY Country.name;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ],
        "Election": [
            "country_id",
            "id",
            "winner_party_id",
            "region",
            "date",
            "party_id",
            "year",
            "constituency_id"
        ]
    },
    "response_text": "SELECT country_id, COUNT(*) as total_elections \nFROM Election \nGROUP BY country_id;",
    "prompt_token_number": 501,
    "response_token_number": 19
},
{
    "id": 33743,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'tasks': ['created_at', 'project_id', 'task_id', 'user_id', 'due_date', 'completed', 'started_at', 'priority', 'completion_date', 'completed_date', 'start_date', 'created_date', 'creator_id', 'assignee_id', 'completed_at', 'name', 'tags', 'assigner_id', 'assigned_by_id', 'category'], 'users': ['user_id', 'name', 'email', 'last_login_attempt', 'total_tasks', 'completed_tasks', 'assignee_id', 'role', 'last_login', 'first_name', 'last_name', 'last_login_date', 'registration_date', 'password', 'job_title', 'hire_date'], 'settings': ['name', 'en', 'user_id', 'value', 'setting_id']}. \n# the user question is: Retrieve the name and email of all users who have set their theme preference to 'dark' and have completed at least one task in project 1 or project 2:. \n#SQL query: SELECT DISTINCT u.name, u.email FROM users u JOIN settings s ON u.user_id = s.user_id AND s.name = 'theme' AND s.value = 'dark' JOIN tasks t ON u.user_id = t.user_id AND t.completed = 1 AND (t.project_id = 1 OR t.project_id = 2);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 3 least populous countries in the \"Oceania\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population of the 3 least populous countries in the \"Oceania\" region:",
    "output": "SELECT name, population FROM Country WHERE region = 'Oceania' ORDER BY population ASC LIMIT 3;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population FROM Country WHERE region = 'Oceania' ORDER BY population ASC LIMIT 3;",
    "prompt_token_number": 598,
    "response_token_number": 22
},
{
    "id": 33744,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Team': ['team_name', 'team_id', 'country'], 'Match': ['team1_id', 'match_id', 'team2_id', 'venue_id', 'date', 'venue', 'winning_team_id', 'tournament_id', 'attendance', 'team', 'winning_team'], 'Match_Set': ['team2_score', 'match_id', 'set_number', 'team1_score', 'team2_id', 'team1_id']}. \n# the user question is: Retrieve the matches where both teams won at least one set, and the total number of sets played is an odd number greater than 7. \n#SQL query: SELECT Match.match_id, Match.date, Match.venue, Team1.team_name AS team1_name, Team2.team_name AS team2_name FROM Match JOIN Team AS Team1 ON Match.team1_id = Team1.team_id JOIN Team AS Team2 ON Match.team2_id = Team2.team_id JOIN Match_Set ON Match.match_id = Match_Set.match_id WHERE (Team1.team_id = Match_Set.team1_id AND Team2.team_id = Match_Set.team2_id AND Match_Set.team1_score > 0 AND Match_Set.team2_score > 0) OR (Team1.team_id = Match_Set.team2_id AND Team2.team_id = Match_Set.team1_id AND Match_Set.team2_score > 0 AND Match_Set.team1_score > 0) GROUP BY Match.match_id HAVING COUNT(DISTINCT Match_Set.set_number) % 2 = 1 AND COUNT(DISTINCT Match_Set.set_number) > 7;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state']} and \n# the user question: List the name and birthdate of the oldest female politician in the database:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the name and birthdate of the oldest female politician in the database:",
    "output": "SELECT name, birthdate FROM Politician WHERE gender = 'Female' ORDER BY birthdate ASC LIMIT 1;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ]
    },
    "response_text": "SELECT name, birthdate FROM Politician WHERE gender = 'female' ORDER BY birthdate ASC LIMIT 1;",
    "prompt_token_number": 519,
    "response_token_number": 23
},
{
    "id": 33747,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Marine_Reptiles': ['reptile_name', 'conservation_status', 'habitat']}. \n# the user question is: Which marine reptiles in the Marine_Reptiles table have a habitat of Seagrass Meadows and are classified as Endangered or Vulnerable?. \n#SQL query: SELECT reptile_name FROM Marine_Reptiles WHERE habitat = 'Seagrass Meadows' AND conservation_status IN ('Endangered', 'Vulnerable');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id']} and \n# the user question: List the names and ideologies of all the political parties in the database that have won an election in the last 5 years:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names and ideologies of all the political parties in the database that have won an election in the last 5 years:",
    "output": "SELECT DISTINCT PoliticalParty.name, PoliticalParty.ideology FROM PoliticalParty JOIN Election ON PoliticalParty.id = Election.winner_party_id WHERE Election.date >= DATE('now', '-5 years');",
    "schema": "political_science",
    "processed_schema_content": {
        "PoliticalParty": [
            "ideology",
            "id",
            "name",
            "political_party",
            "country_id",
            "number_of_seats",
            "number_of_members",
            "number_of_female_members",
            "total_spending",
            "total_revenue",
            "total_funding",
            "num_seats",
            "num_members",
            "date_founded"
        ],
        "Election": [
            "country_id",
            "id",
            "winner_party_id",
            "region",
            "date",
            "party_id",
            "year",
            "constituency_id"
        ]
    },
    "response_text": "SELECT PoliticalParty.name, PoliticalParty.ideology \nFROM PoliticalParty \nJOIN Election ON PoliticalParty.id = Election.winner_party_id \nWHERE Election.year >= (YEAR(CURRENT_DATE) - 5);",
    "prompt_token_number": 307,
    "response_token_number": 41
},
{
    "id": 33748,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'team_id', 'completed_by', 'skill_id', 'first_name', 'manager_id', 'last_name', 'job_title', 'office_location', 'role', 'years_of_experience', 'department_id', 'salary'], 'User_Skills': ['user_id', 'skill_id', 'proficiency_level', 'skill_name'], 'Skills': ['skill_name', 'skill_id', 'Python'], 'Team_Members': ['user_id', 'team_id'], 'Teams': ['leader_id', 'team_id', 'team_name', 'project_id', 'primary_skill', 'manager_id', 'location', 'team_leader_id'], 'Skill_Proficiencies': ['proficiency_level', 'skill_id', 'proficiency_level_num', 'skill_name']}. \n# the user question is: Find all team members who have a skill with the name containing \"teamwork\" and a proficiency level of \"Intermediate\" or higher and are part of a team with a name containing \"Engineering\":. \n#SQL query: SELECT DISTINCT Users.username FROM Users JOIN User_Skills ON Users.user_id = User_Skills.user_id JOIN Skills ON User_Skills.skill_id = Skills.skill_id JOIN Skill_Proficiencies ON User_Skills.skill_id = Skill_Proficiencies.skill_id JOIN Team_Members ON Users.user_id = Team_Members.user_id JOIN Teams ON Team_Members.team_id = Teams.team_id WHERE Skills.skill_name LIKE '%teamwork%' AND Skill_Proficiencies.proficiency_level IN ('Intermediate', 'Expert') AND Teams.team_name LIKE '%Engineering%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state']} and \n# the user question: List the name and birthdate of the youngest male politician in the database:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the name and birthdate of the youngest male politician in the database:",
    "output": "SELECT name, birthdate FROM Politician WHERE gender = 'Male' ORDER BY birthdate DESC LIMIT 1;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ]
    },
    "response_text": "SELECT name, birthdate FROM Politician WHERE gender = 'male' ORDER BY birthdate DESC LIMIT 1;",
    "prompt_token_number": 519,
    "response_token_number": 23
},
{
    "id": 33749,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Doctor': ['doctor_id', 'last_name', 'Lee', 'Brown', 'Wilson', 'Davis', 'Kim', 'Williams', 'Patel', 'Chen', 'Rodriguez', 'first_name', 'doctor_name', 'avg_treatments', 'Doctor_ID', 'DoctorName', 'DoctorID', 'Email'], 'Diagnosis': ['diagnosis_type', 'doctor_id', 'diagnosis_id', 'diagnosis_date', 'illness_id', 'injury_id', 'patient_id', 'injury_body_part', 'diagnosis_name']}. \n# the user question is: Find the doctors who have treated the most number of patients:. \n#SQL query: SELECT Doctor.doctor_id, Doctor.first_name, Doctor.last_name, COUNT(DISTINCT Diagnosis.patient_id) AS patient_count FROM Doctor JOIN Diagnosis ON Diagnosis.doctor_id = Doctor.doctor_id GROUP BY Doctor.doctor_id ORDER BY patient_count DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 3 most populous countries in the \"Africa\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population of the 3 most populous countries in the \"Africa\" region:",
    "output": "SELECT name, population FROM Country WHERE region = 'Africa' ORDER BY population DESC LIMIT 3;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population FROM Country WHERE region = 'Africa' ORDER BY population DESC LIMIT 3;",
    "prompt_token_number": 509,
    "response_token_number": 20
},
{
    "id": 33751,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Illustrations': ['user_id', 'illustration_id', 'upload_date', 'title', 'price', 'category_id', 'discount', 'creation_date', 'artist_id', 'description'], 'Users': ['username', 'user_id', 'address_id', 'work_address_id', 'last_active_date', 'home_address_id', 'last_activity_date', 'registration_date', 'email', 'total_purchase_amount', 'user_type_id', 'country', 'name'], 'Purchase': ['user_id', 'purchase_price', 'purchase_date', 'illustration_id', 'purchase_id', 'order_id', 'shipping_address_id', 'total_amount', 'COUNT###', 'price', 'quantity', 'category_id', 'amount', 'date'], 'User_accounts': ['account_type', 'user_id']}. \n# the user question is: Get the details of all illustrations that have been uploaded by users who have an email address that starts with 'j' and have been purchased by users who have an account type of 'basic':. \n#SQL query: SELECT Illustrations.title, Users.username FROM Illustrations INNER JOIN Users ON Illustrations.user_id = Users.user_id INNER JOIN Purchase ON Illustrations.illustration_id = Purchase.illustration_id INNER JOIN Users AS Buyers ON Purchase.user_id = Buyers.user_id INNER JOIN User_accounts ON Buyers.user_id = User_accounts.user_id WHERE Users.email LIKE 'j%' AND User_accounts.account_type = 'basic';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state']} and \n# the user question: List the name and birthdate of the oldest male politician in the database:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the name and birthdate of the oldest male politician in the database:",
    "output": "SELECT name, birthdate FROM Politician WHERE gender = 'Male' ORDER BY birthdate ASC LIMIT 1;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ]
    },
    "response_text": "SELECT name, birthdate FROM Politician WHERE gender = 'male' ORDER BY birthdate ASC LIMIT 1;",
    "prompt_token_number": 490,
    "response_token_number": 23
},
{
    "id": 33752,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Bikes': ['bike_id', 'bike_model', 'bike_type', 'color', 'manufacturer', 'last_service_date', 'max_distance', 'min_distance', 'is_available', 'maintenance_date', 'mileage', 'max_mileage', 'last_maintenance_date', 'kilometers_since_maintenance', 'status', 'station_id', 'electric', 'type', 'id', 'current_station_id', 'manufacture_date'], 'Rides': ['end_time', 'bike_id', 'duration_minutes', 'user_id', 'ride_type', 'cost', 'start_location_id', 'ride_id', 'location_id', 'start_time', 'distance_miles', 'end_location_id', 'distance', 'rental_price', 'start_station_id', 'end_station_id', 'duration', 'fare', 'end_location', 'start_location', 'price', 'distance_km']}. \n# the user question is: Which bikes have not been rented at all in the past month and are currently available?. \n#SQL query: SELECT bike_id FROM Bikes WHERE status = 'available' AND bike_id NOT IN ( SELECT DISTINCT bike_id FROM Rides WHERE start_time >= date('now', '-1 month') );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 smallest countries in the \"Europe\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and area of the 5 smallest countries in the \"Europe\" region:",
    "output": "SELECT name, area FROM Country WHERE region = 'Europe' ORDER BY area ASC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, area FROM Country WHERE region = 'Europe' ORDER BY area ASC LIMIT 5;",
    "prompt_token_number": 566,
    "response_token_number": 20
},
{
    "id": 33755,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'users': ['user_id', 'name', 'email', 'last_login_attempt', 'total_tasks', 'completed_tasks', 'assignee_id', 'role', 'last_login', 'first_name', 'last_name', 'last_login_date', 'registration_date', 'password', 'job_title', 'hire_date']}. \n# the user question is: Retrieve the names and email addresses of all users who have not logged in to the system in the last 30 days, along with the date of their last login attempt, sorted by the date in ascending order:. \n#SQL query: SELECT name, email, last_login_attempt FROM users WHERE last_login_attempt < DATE('now', '-30 days') ORDER BY last_login_attempt ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state']} and \n# the user question: List the name and birthdate of the youngest politician in the database:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the name and birthdate of the youngest politician in the database:",
    "output": "SELECT name, birthdate FROM Politician ORDER BY birthdate DESC LIMIT 1;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ]
    },
    "response_text": "SELECT name, birthdate FROM Politician ORDER BY birthdate DESC LIMIT 1;",
    "prompt_token_number": 341,
    "response_token_number": 17
},
{
    "id": 33756,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Director': ['director_id', 'name', 'gender', 'has_won_academy_award', 'director_name', 'birth_year']}. \n# the user question is: Retrieve the title of the movie, the name of the director, and the runtime for all movies where the director's name contains the word \"Spike\" and the runtime is less than 100 minutes.. \n#SQL query: SELECT Movie.title, Director.name, Movie.runtime FROM Movie JOIN Director ON Movie.director_id = Director.director_id WHERE Director.name LIKE '%Spike%' AND Movie.runtime < 100;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 3 most populous countries in the \"Asia\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population of the 3 most populous countries in the \"Asia\" region:",
    "output": "SELECT name, population FROM Country WHERE region = 'Asia' ORDER BY population DESC LIMIT 3;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population FROM Country WHERE region = 'Asia' ORDER BY population DESC LIMIT 3;",
    "prompt_token_number": 477,
    "response_token_number": 20
},
{
    "id": 33759,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Items': ['item_id', 'game_id'], 'Items': ['item_name', 'item_id', 'item_description', 'rarity_id'], 'Game_Levels': ['level_id', 'game_id'], 'Levels': ['level_name', 'level_id', 'difficulty_id', 'duration_id']}. \n# the user question is: Find the names of all games that have a level with a name containing \"Fortnite\" and an item with a name containing \"pickaxe\".. \n#SQL query: SELECT DISTINCT Games.game_title FROM Games INNER JOIN Game_Levels ON Games.game_id = Game_Levels.game_id INNER JOIN Levels ON Game_Levels.level_id = Levels.level_id INNER JOIN Game_Items ON Games.game_id = Game_Items.game_id INNER JOIN Items ON Game_Items.item_id = Items.item_id WHERE Levels.level_name LIKE '%Fortnite%' AND Items.item_name LIKE '%pickaxe%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 largest countries in the \"Asia\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and area of the 5 largest countries in the \"Asia\" region:",
    "output": "SELECT name, area FROM Country WHERE region = 'Asia' ORDER BY area DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, area FROM Country WHERE region = 'Asia' ORDER BY area DESC LIMIT 5;",
    "prompt_token_number": 523,
    "response_token_number": 20
},
{
    "id": 33762,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Client': ['client_id', 'name', 'email', 'phone_number', 'industry_id', 'location_id', 'industry', 'budget', 'first_name', 'last_name', 'state', 'city', 'company_name', 'annual_revenue'], 'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months'], 'Story': ['story_id', 'headline', 'content', 'date_published', 'outlet_id', 'campaign_id', 'date', 'journalist_id', 'sentiment_score', 'body', 'views', 'shares', 'likes', 'clicks', 'impressions', 'comments', 'text', 'publication_date', 'word_count'], 'MediaContact': ['outlet_id', 'first_name', 'phone_number', 'last_name', 'email', 'phone']}. \n# the user question is: Retrieve the names and email addresses of all media contacts who have published a story that was featured in a campaign associated with a client with the name \"Acme Corp\" and the story has a sentiment score less than 0.3 and has been shared at least 100 times:. \n#SQL query: SELECT DISTINCT MediaContact.first_name, MediaContact.last_name, MediaContact.email FROM MediaContact INNER JOIN Story ON MediaContact.outlet_id = Story.outlet_id INNER JOIN Campaign ON Story.campaign_id = Campaign.campaign_id INNER JOIN Client ON Campaign.client_id = Client.client_id WHERE Client.name = 'Acme Corp' AND Story.sentiment_score < 0.3 AND Story.shares > 100;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 3 smallest countries in the \"Australia and New Zealand\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and area of the 3 smallest countries in the \"Australia and New Zealand\" region:",
    "output": "SELECT name, area FROM Country WHERE region = 'Australia and New Zealand' ORDER BY area ASC LIMIT 3;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, area FROM Country WHERE region = 'Australia and New Zealand' ORDER BY area ASC LIMIT 3;",
    "prompt_token_number": 709,
    "response_token_number": 23
},
{
    "id": 33764,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Websites': ['website_id', 'user_id', 'url', 'created_at', 'updated_at', 'name', 'domain_id', 'domain_authority_score', 'domain_created_at'], 'Pages': ['page_id', 'website_id', 'url', 'title', 'description', 'content', 'created_at', 'updated_at', 'meta_description', 'meta_keywords', 'meta_title', 'h1_tag', 'h2_tag', 'title_tag', 'canonical_url', 'description_tag', 'header_tag', 'meta_tag', 'meta_keyword', 'h1', 'heading', 'header', 'word_count', 'time_on_page', 'total_words', 'http_status_code', 'user_id', 'last_modified_date', '[website_id]'], 'Page_Stats': ['page_stat_id', 'page_id', 'visits', 'bounce_rate', 'time_on_page', 'created_at', 'updated_at', 'organic_traffic', 'load_time', 'page_speed_score', 'total_images', 'total_videos', 'page_authority_score', 'domain_authority_score', 'page_load_time', 'backlinks', 'search_query', 'search_volume']}. \n# the user question is: Retrieve the names and URLs of all websites that have at least one page with a word count greater than or equal to 2000 and a load time less than or equal to 3 seconds:. \n#SQL query: SELECT DISTINCT Websites.name, Websites.url FROM Websites INNER JOIN Pages ON Websites.website_id = Pages.website_id INNER JOIN Page_Stats ON Pages.page_id = Page_Stats.page_id WHERE Pages.word_count >= 2000 AND Page_Stats.load_time <= 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded']} and \n# the user question: List the names and ideologies of all the political parties in the database that have at least 2 female politicians who were born in the same year:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names and ideologies of all the political parties in the database that have at least 2 female politicians who were born in the same year:",
    "output": "SELECT PoliticalParty.name, PoliticalParty.ideology FROM PoliticalParty JOIN ( SELECT political_party, COUNT(*) AS num_politicians, strftime('%Y', birthdate) AS birthyear FROM Politician WHERE gender = 'Female' GROUP BY political_party, birthyear HAVING num_politicians >= 2 ) AS party_count ON PoliticalParty.id = party_count.political_party;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "PoliticalParty": [
            "ideology",
            "id",
            "name",
            "political_party",
            "country_id",
            "number_of_seats",
            "number_of_members",
            "number_of_female_members",
            "total_spending",
            "total_revenue",
            "total_funding",
            "num_seats",
            "num_members",
            "date_founded"
        ]
    },
    "response_text": "SELECT PoliticalParty.name, PoliticalParty.ideology FROM PoliticalParty INNER JOIN Politician ON PoliticalParty.id = Politician.party_id WHERE Politician.gender = 'female' GROUP BY Politician.birth_year HAVING COUNT(Politician.birth_year) >= 2;",
    "prompt_token_number": 623,
    "response_token_number": 53
},
{
    "id": 33765,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Publisher': ['publisher_id', 'name', 'address', 'phone_number', 'publisher_name', 'HarperCollins', 'id'], 'Book': ['book_id', 'title', 'isbn', 'publisher_id', 'publication_date', 'rating', 'price', 'publication_year', 'author_id', 'publisher', 'author', 'weight', 'author_gender', 'language', 'author_name', 'book_title', 'format_id', 'page_count', 'id', 'num_pages'], 'Review': ['review_id', 'book_id', 'reviewer_id', 'rating', 'review_text', 'customer_id', 'date'], 'Customer': ['customer_id', 'first_name', 'last_name', 'email', 'address', 'phone_number', 'zip_code', 'country_id']}. \n# the user question is: Find the name and email address of the customer who has written the most reviews for books published by Bloomsbury Publishing.. \n#SQL query: SELECT Customer.first_name || ' ' || Customer.last_name AS customer_name, Customer.email FROM Customer JOIN Review ON Customer.customer_id = Review.customer_id JOIN Book ON Review.book_id = Book.book_id JOIN Publisher ON Book.publisher_id = Publisher.publisher_id WHERE Publisher.name = 'Bloomsbury Publishing' GROUP BY Customer.customer_id ORDER BY COUNT(Review.review_id) DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 most populous countries in the \"Europe\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population of the 5 most populous countries in the \"Europe\" region:",
    "output": "SELECT name, population FROM Country WHERE region = 'Europe' ORDER BY population DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population FROM Country WHERE region = 'Europe' ORDER BY population DESC LIMIT 5;",
    "prompt_token_number": 595,
    "response_token_number": 20
},
{
    "id": 33767,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'comic_books': ['rating', 'series_name', 'issue_number', 'name', 'cover_artist', 'release_date', 'writer', 'artist', 'id', 'variant_cover', 'cover_price', 'series', 'publisher', 'price', 'genre', 'crossover_event', 'publication_date']}. \n# the user question is: Retrieve the name and issue number of all comic books that have a crossover event with other series and have a rating of at least 4 stars.. \n#SQL query: SELECT name, issue_number FROM comic_books WHERE crossover_event IS NOT NULL AND rating >= 4;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded']} and \n# the user question: List the names and ideologies of all the political parties in the database that have at least 4 male politicians who were born in the same year:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names and ideologies of all the political parties in the database that have at least 4 male politicians who were born in the same year:",
    "output": "SELECT PoliticalParty.name, PoliticalParty.ideology FROM PoliticalParty JOIN ( SELECT political_party, COUNT(*) AS num_politicians, strftime('%Y', birthdate) AS birthyear FROM Politician WHERE gender = 'Male' GROUP BY political_party, birthyear HAVING num_politicians >= 4 ) AS party_count ON PoliticalParty.id = party_count.political_party;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "PoliticalParty": [
            "ideology",
            "id",
            "name",
            "political_party",
            "country_id",
            "number_of_seats",
            "number_of_members",
            "number_of_female_members",
            "total_spending",
            "total_revenue",
            "total_funding",
            "num_seats",
            "num_members",
            "date_founded"
        ]
    },
    "response_text": "SELECT PoliticalParty.name, PoliticalParty.ideology FROM PoliticalParty\nJOIN Politician ON Politician.political_party = PoliticalParty.name\nWHERE (SELECT COUNT(*) FROM Politician AS p WHERE p.birthdate LIKE '%Politician.birthdate%' AND p.gender = 'Male') >= 4\nGROUP BY PoliticalParty.name, PoliticalParty.ideology;",
    "prompt_token_number": 399,
    "response_token_number": 70
},
{
    "id": 33768,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'created_at'], 'Likes': ['user_id', 'entry_id', 'like_id', 'journal_id'], 'Entries': ['journal_id', 'content', 'title', 'entry_id', 'created_at', 'user_id', 'word_count'], 'Comments': ['user_id', 'entry_id', 'comment_id', 'journal_id', 'created_at']}. \n# the user question is: Find the usernames of users who have created entries but have not received any comments or likes:. \n#SQL query: SELECT Users.username FROM Users JOIN Entries ON Users.user_id = Entries.user_id LEFT JOIN Comments ON Entries.entry_id = Comments.entry_id LEFT JOIN Likes ON Entries.entry_id = Likes.entry_id WHERE Comments.comment_id IS NULL AND Likes.like_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 3 largest countries in the \"North America\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and area of the 3 largest countries in the \"North America\" region:",
    "output": "SELECT name, area FROM Country WHERE region = 'North America' ORDER BY area DESC LIMIT 3;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, area FROM Country WHERE region = \"North America\" ORDER BY area DESC LIMIT 3;",
    "prompt_token_number": 483,
    "response_token_number": 21
},
{
    "id": 33770,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Tasks': ['start_date', 'task_name', 'due_date', 'end_date', 'task_id', 'priority', 'task_status', 'project_id', 'task_priority_id', 'task_status_id', 'task_start_date', 'task_end_date', 'task_expected_completion_date', 'task_completion_percentage', 'task_estimated_cost', 'task_due_date', 'actual_end_date', 'actual_start_date', 'task_lead_id', 'actual_cost', 'employee_i', 'task_description'], 'Task_Completions': ['task_completion_date', 'task_id']}. \n# the user question is: List all the tasks that have a completion date within the next 7 days.. \n#SQL query: SELECT DISTINCT t.task_name FROM Tasks t INNER JOIN Task_Completions tc ON t.task_id = tc.task_id WHERE tc.task_completion_date BETWEEN DATE('now') AND DATE('now', '+7 day');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 least populous countries in the \"South America\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population of the 5 least populous countries in the \"South America\" region:",
    "output": "SELECT name, population FROM Country WHERE region = 'South America' ORDER BY population ASC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population FROM Country WHERE region = 'South America' ORDER BY population ASC LIMIT 5;",
    "prompt_token_number": 504,
    "response_token_number": 21
},
{
    "id": 33773,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director', 'runtime', 'budget', 'box_office', 'rating', 'release_date', 'imdb_rating', 'director_id', 'production_company_id', 'box_office_gross'], 'Actor': ['actor_id', 'first_name', 'last_name', 'birth_year', 'nationality', 'birthdate', 'birthplace', 'date_of_birth', 'name'], 'MovieActor': ['movie_id', 'actor_id', 'character_id', 'last_name', 'first_name', 'age_at_film', 'role'], 'Award': ['award_id', 'name', 'category', 'movie_id', 'award_type'], 'MovieAward': ['movie_id', 'award_id']}. \n# the user question is: Show the name and category of all awards won by the actor Clint Eastwood.. \n#SQL query: SELECT Award.name, Award.category FROM Award JOIN MovieAward ON Award.award_id = MovieAward.award_id JOIN Movie ON MovieAward.movie_id = Movie.movie_id JOIN MovieActor ON Movie.movie_id = MovieActor.movie_id JOIN Actor ON MovieActor.actor_id = Actor.actor_id WHERE Actor.first_name = 'Clint' AND Actor.last_name = 'Eastwood';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 3 smallest countries in the \"Africa\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and area of the 3 smallest countries in the \"Africa\" region:",
    "output": "SELECT name, area FROM Country WHERE region = 'Africa' ORDER BY area ASC LIMIT 3;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, area FROM Country WHERE region = 'Africa' ORDER BY area ASC LIMIT 3;",
    "prompt_token_number": 574,
    "response_token_number": 20
},
{
    "id": 33781,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['UserName', 'UserID'], 'Genres': ['GenreID', 'GenreName', 'AvgDuration', 'SongID'], 'Ratings': ['UserID', 'SongID', 'Rating', 'GenreID', 'AlbumID', 'RatingID']}. \n# the user question is: \"Find the users who have rated songs from all genres and have the highest average rating.\". \n#SQL query: SELECT Users.UserName FROM Users INNER JOIN Ratings ON Users.UserID = Ratings.UserID GROUP BY Users.UserID HAVING COUNT(DISTINCT Ratings.GenreID) = ( SELECT COUNT(*) FROM Genres ) AND AVG(Ratings.Rating) = ( SELECT MAX(AvgRating) FROM ( SELECT AVG(Rating) AS AvgRating FROM Ratings GROUP BY UserID ) AS Subquery );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 least populous countries in the \"Oceania\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population of the 5 least populous countries in the \"Oceania\" region:",
    "output": "SELECT name, population FROM Country WHERE region = 'Oceania' ORDER BY population ASC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population FROM Country WHERE region = 'Oceania' ORDER BY population ASC LIMIT 5;",
    "prompt_token_number": 474,
    "response_token_number": 22
},
{
    "id": 33788,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['price', 'product_name', 'product_id', 'product_category', 'glassware_item_id', 'name', 'id', 'description'], 'Order_Items': ['order_id', 'product_id', 'glassware_item_id', 'quantity', 'unit_price', 'order_item_id', 'price', 'item_cost', 'item_id', 'order_date', 'item_price'], 'Glassware_Items': ['glassware_type_id', 'quantity', 'glassware_item_id', 'product_id', 'glassware_item_name', 'glassware_item_description', 'etching_id', 'price', 'item_name', 'material', 'glassware_item_type_id', 'stock', 'design_id', 'discontinued', 'supplier_id', 'quantity_in_stock', 'unit_price', 'quantity_supplied']}. \n# the user question is: Retrieve the list of glassware items along with their names and the total revenue generated from their sales, where the revenue is greater than $200 and the quantity is less than 50, sorted by revenue in descending order.. \n#SQL query: SELECT Glassware_Items.item_name, SUM(Products.price * Order_Items.quantity) AS total_revenue FROM Glassware_Items INNER JOIN Order_Items ON Glassware_Items.glassware_item_id = Order_Items.glassware_item_id INNER JOIN Products ON Glassware_Items.product_id = Products.product_id GROUP BY Glassware_Items.glassware_item_id HAVING SUM(Order_Items.quantity) < 50 AND total_revenue > 200 ORDER BY total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 least populous countries in the \"Africa\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population of the 5 least populous countries in the \"Africa\" region:",
    "output": "SELECT name, population FROM Country WHERE region = 'Africa' ORDER BY population ASC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population FROM Country WHERE region = 'Africa' ORDER BY population ASC LIMIT 5;",
    "prompt_token_number": 632,
    "response_token_number": 20
},
{
    "id": 33791,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Event': ['event_id', 'event_name', 'event_date', 'location_id', 'event_category_id', 'event_type_id', 'location', 'venue_id', 'start_date', 'end_date', 'category', 'event_code', 'EVT', 'organizer_id', 'duration', 'name', 'Expo', 'Tech', 'country', 'category_id', 'city', 'ticket_price', 'date', 'start_time', 'end_time', 'min_age_requirement', 'event_type', 'capacity', 'registration_deadline', 'num_attendees', 'min_age', 'duration_hours', 'registration_fee', 'price'], 'Attendee': ['attendee_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'date_of_birth', 'job_title', 'city', 'age', 'email'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID'], 'Category': ['category_id', 'name']}. \n# the user question is: Which attendees have not registered for any events in the category \"Workshops\"?. \n#SQL query: SELECT Attendee.first_name, Attendee.last_name FROM Attendee WHERE Attendee.attendee_id NOT IN ( SELECT Registration.attendee_id FROM Registration INNER JOIN Event ON Registration.event_id = Event.event_id WHERE Event.category_id = ( SELECT category_id FROM Category WHERE name = 'Workshops' ) );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 smallest countries in the \"Asia\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and area of the 5 smallest countries in the \"Asia\" region:",
    "output": "SELECT name, area FROM Country WHERE region = 'Asia' ORDER BY area ASC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, area FROM Country WHERE region = 'Asia' ORDER BY area ASC LIMIT 5;",
    "prompt_token_number": 651,
    "response_token_number": 20
},
{
    "id": 33794,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Shows': ['year', 'show_id', 'title', 'description', 'location', 'venue_id', 'duration', 'network', 'release_date', 'Sticks', 'date_recorded', 'name', 'duration_minutes', 'recorded_year', 'date'], 'Tags': ['tag_id', 'tag'], 'Users': ['email', 'user_id', 'username'], 'User_Reviews': ['user_id', 'review_id'], 'Reviews': ['review_id', 'performance_id', 'rating', 'special_id', 'show_id'], 'Show_Tags': ['tag_id', 'show_id']}. \n# the user question is: Retrieve the usernames and email addresses of all users who have reviewed at least one show that was released on Comedy Central and had the tag \"politics\".. \n#SQL query: SELECT DISTINCT u.username, u.email FROM Users u JOIN User_Reviews ur ON ur.user_id = u.user_id JOIN Reviews r ON r.review_id = ur.review_id JOIN Shows s ON s.show_id = r.show_id JOIN Show_Tags st ON st.show_id = s.show_id JOIN Tags t ON t.tag_id = st.tag_id WHERE t.tag = 'politics' AND s.network = 'Comedy Central';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 most populous countries in the \"Oceania\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population of the 5 most populous countries in the \"Oceania\" region:",
    "output": "SELECT name, population FROM Country WHERE region = 'Oceania' ORDER BY population DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population FROM Country WHERE region = 'Oceania' ORDER BY population DESC LIMIT 5;",
    "prompt_token_number": 573,
    "response_token_number": 22
},
{
    "id": 33795,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Specials': ['title', 'special_id', 'description', 'year', 'duration', 'release_year', 'show_id', 'production_id', 'release_date'], 'Tags': ['tag_id', 'tag'], 'Users': ['email', 'user_id', 'username'], 'User_Reviews': ['user_id', 'review_id'], 'Reviews': ['review_id', 'performance_id', 'rating', 'special_id', 'show_id'], 'Special_Tags': ['special_id', 'tag_id']}. \n# the user question is: Retrieve the usernames of all users who have reviewed at least one special that had the tag \"improv\".. \n#SQL query: SELECT DISTINCT u.username FROM Users u JOIN User_Reviews ur ON ur.user_id = u.user_id JOIN Reviews r ON r.review_id = ur.review_id JOIN Specials s ON s.special_id = r.special_id JOIN Special_Tags st ON st.special_id = s.special_id JOIN Tags t ON t.tag_id = st.tag_id WHERE t.tag = 'improv';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Approval': ['politician_id', 'rating', 'date', 'voter_id'], 'Voter': ['id', 'gender', 'age', 'lgbtq', 'name', 'income', 'date_of_birth']} and \n# the user question: List the name and birthdate of the politician who has the highest number of approvals from voters who identify as LGBTQ+:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the name and birthdate of the politician who has the highest number of approvals from voters who identify as LGBTQ+:",
    "output": "SELECT Politician.name, COUNT(*) AS num_approvals_lgbtq FROM Approval JOIN Politician ON Approval.politician_id = Politician.id JOIN Voter ON Approval.voter_id = Voter.id WHERE Voter.lgbtq = 1 AND Approval.rating = 'approve' GROUP BY Politician.id ORDER BY num_approvals_lgbtq DESC LIMIT 1;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "Approval": [
            "politician_id",
            "rating",
            "date",
            "voter_id"
        ],
        "Voter": [
            "id",
            "gender",
            "age",
            "lgbtq",
            "name",
            "income",
            "date_of_birth"
        ]
    },
    "response_text": "SELECT p.name, p.birthdate \nFROM Politician p \nJOIN Approval a ON a.politician_id = p.id \nJOIN Voter v ON v.id = a.voter_id \nWHERE v.lgbtq = '+'\nGROUP BY p.name, p.birthdate \nORDER BY COUNT(*) DESC \nLIMIT 1;",
    "prompt_token_number": 464,
    "response_token_number": 66
},
{
    "id": 33796,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'EnergyMeters': ['meter_id', 'installation_date', 'meter_type', 'user_id', 'meter_number', 'starting_reading', 'meter_location', 'meter_name', 'product_id', 'meter_serial', 'created_date', 'avg_consumption', 'source_id'], 'EnergyMeterReadings': ['meter_id', 'reading_date', 'reading_value', 'reading_id', 'reading_hour'], 'EnergyUsers': ['user_address', 'user_name', 'user_id', 'user_zipcode', 'user_state', 'user_city', 'user_zip', 'email']}. \n# the user question is: Retrieve the names of all energy users and their respective meters, and the total energy consumption for each meter for the month of October 2040, where the meter type is \"gas\" and the user has a state of \"New York\".. \n#SQL query: SELECT u.user_name, m.meter_name, SUM(r.reading_value) AS total_consumption FROM EnergyUsers u INNER JOIN EnergyMeters m ON u.user_id = m.user_id INNER JOIN EnergyMeterReadings r ON m.meter_id = r.meter_id WHERE m.meter_type = 'gas' AND u.user_state = 'New York' AND r.reading_date >= '2040-10-01' AND r.reading_date <= '2040-10-31' GROUP BY u.user_id, m.meter_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 largest countries in the \"Europe\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and area of the 5 largest countries in the \"Europe\" region:",
    "output": "SELECT name, area FROM Country WHERE region = 'Europe' ORDER BY area DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, area FROM Country WHERE region = 'Europe' ORDER BY area DESC LIMIT 5;",
    "prompt_token_number": 606,
    "response_token_number": 20
},
{
    "id": 33802,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'appointments': ['appointment_id', 'therapist_id', 'appointment_date', 'patient_id', 'end_time', 'start_time', 'session_duration_minutes', 'session_cost', 'satisfaction_rating', 'is_missed', 'sessions_per_week', 'session_length_minutes', 'start_date', 'attended', 'end_date', 'therapy_id'], 'patients': ['email', 'phone_number', 'last_name', 'patient_id', 'first_name', 'date_of_birth', 'gender', 'birthdate', 'start_date', 'session_count', 'age', 'therapy_start_date', 'birth_date'], 'patient_diagnoses': ['diagnosis_id', 'patient_id', 'patient_diagnosis_id', 'severity']}. \n# the user question is: Retrieve the names of the patients who have not been diagnosed with any mental health disorders but have had at least one appointment in the past month.. \n#SQL query: SELECT p.first_name || ' ' || p.last_name AS patient_name FROM patients p JOIN appointments a ON a.patient_id = p.patient_id AND a.appointment_date >= DATE('now', '-1 month') LEFT JOIN patient_diagnoses pd ON pd.patient_id = p.patient_id WHERE pd.patient_diagnosis_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 smallest countries in the \"South America\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and area of the 5 smallest countries in the \"South America\" region:",
    "output": "SELECT name, area FROM Country WHERE region = 'South America' ORDER BY area ASC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, area FROM Country WHERE region = 'South America' ORDER BY area ASC LIMIT 5;",
    "prompt_token_number": 571,
    "response_token_number": 21
},
{
    "id": 33805,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Transaction': ['BlockID', 'Recipient', 'Sender', 'PublicAddress', 'TransactionID', 'Amount', 'Fee', 'Timestamp', 'GasFee', 'GasUsed', 'GasLimit', 'GasPrice', 'EtherAmount', 'IsSuccess', 'Value', 'Currency', 'NodeID', 'SmartContractInstanceID', 'SenderWalletID', 'RecipientWalletID', 'ReceiverWalletID', 'ConfirmationTime', 'TokenID', 'FromWalletID', 'ToWalletID', 'Status', 'Type', 'ReceiverID', 'SenderID'], 'Wallet': ['BlockID', 'Balance', 'UserID', 'WalletID', 'PublicAddress', 'Currency']}. \n# the user question is: Find the wallets that have received the highest total amount of ether:. \n#SQL query: SELECT Wallet.PublicAddress, SUM(Transaction.Amount) AS TotalEtherReceived FROM Wallet JOIN Transaction ON Wallet.WalletID = Transaction.RecipientWalletID GROUP BY Wallet.PublicAddress ORDER BY TotalEtherReceived DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Approval': ['politician_id', 'rating', 'date', 'voter_id'], 'Voter': ['id', 'gender', 'age', 'lgbtq', 'name', 'income', 'date_of_birth']} and \n# the user question: List the name and birthdate of the politician who has the highest number of neutral ratings from voters in the age range of 55-64:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the name and birthdate of the politician who has the highest number of neutral ratings from voters in the age range of 55-64:",
    "output": "SELECT Politician.name, COUNT(*) AS num_neutral_55_64 FROM Approval JOIN Politician ON Approval.politician_id = Politician.id JOIN Voter ON Approval.voter_id = Voter.id WHERE Approval.rating = 'neutral' AND Voter.age BETWEEN 55 AND 64 GROUP BY Politician.id ORDER BY num_neutral_55_64 DESC LIMIT 1;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "Approval": [
            "politician_id",
            "rating",
            "date",
            "voter_id"
        ],
        "Voter": [
            "id",
            "gender",
            "age",
            "lgbtq",
            "name",
            "income",
            "date_of_birth"
        ]
    },
    "response_text": "SELECT Politician.name, Politician.birthdate \nFROM Politician \nJOIN Approval ON Politician.id = Approval.politician_id \nJOIN Voter ON Approval.voter_id = Voter.id \nWHERE Approval.rating = 'Neutral' AND Voter.age BETWEEN 55 AND 64 \nGROUP BY Politician.name, Politician.birthdate \nORDER BY COUNT(Approval.rating) DESC \nLIMIT 1",
    "prompt_token_number": 461,
    "response_token_number": 79
},
{
    "id": 33806,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Insurance': ['insurance_provider', 'patient_id', 'policy_number', 'insurance_id', 'insurance_provider_id', 'coverage_type_id'], 'Insurance_Provider': ['insurance_provider_name', 'insurance_provider_id'], 'Appointment': ['chiropractor_id', 'patient_id', 'appointment_date_time', 'appointment_id', 'insurance_id'], 'Diagnosis': ['diagnosis_name', 'appointment_id', 'diagnosis_description', 'body_part_id', 'diagnosis_id', 'body_part']}. \n# the user question is: Find the number of appointments that were paid for by United Healthcare insurance and had a diagnosis of 'Lower Back Pain':. \n#SQL query: SELECT COUNT(*) AS num_appointments FROM Appointment a INNER JOIN Insurance i ON a.insurance_id = i.insurance_id INNER JOIN Insurance_Provider ip ON i.insurance_provider_id = ip.insurance_provider_id INNER JOIN Diagnosis d ON a.appointment_id = d.appointment_id WHERE ip.insurance_provider_name = 'United Healthcare' AND d.diagnosis_name = 'Lower Back Pain';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 largest countries in the \"Africa\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and area of the 5 largest countries in the \"Africa\" region:",
    "output": "SELECT name, area FROM Country WHERE region = 'Africa' ORDER BY area DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, area FROM Country WHERE region = 'Africa' ORDER BY area DESC LIMIT 5;",
    "prompt_token_number": 530,
    "response_token_number": 20
},
{
    "id": 33808,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Films': ['release_date', 'director_id', 'genre_id', 'title', 'film_id', 'duration'], 'Genres': ['name', 'genre_id'], 'Directors': ['name', 'director_id'], 'Ratings': ['user_id', 'rating_value', 'film_id', 'review_id']}. \n# the user question is: Retrieve the film titles and average ratings for comedy films released in the last 5 years, directed by either Adam McKay or Judd Apatow, and have an average rating above 4.0:. \n#SQL query: SELECT Films.title, AVG(Ratings.rating_value) AS average_rating FROM Films JOIN Directors ON Films.director_id = Directors.director_id JOIN Ratings ON Films.film_id = Ratings.film_id WHERE Films.genre_id = ( SELECT genre_id FROM Genres WHERE name = 'Comedy' ) AND Films.release_date >= DATE('now', '-5 years') AND (Directors.name = 'Adam McKay' OR Directors.name = 'Judd Apatow') GROUP BY Films.film_id HAVING AVG(Ratings.rating_value) > 4.0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 smallest countries in the \"Europe\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population of the 5 smallest countries in the \"Europe\" region:",
    "output": "SELECT name, population FROM Country WHERE region = 'Europe' ORDER BY population ASC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population FROM Country WHERE region = 'Europe' ORDER BY area ASC LIMIT 5;",
    "prompt_token_number": 547,
    "response_token_number": 20
},
{
    "id": 33813,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Practitioners': ['practitioner_id', 'belt_rank', 'martial_art_id', 'dojo_id', 'practitioner_name', 'age'], 'Tournaments': ['tournament_name', 'location', 'end_date', 'start_date', 'tournament_id', 'martial_art_id', 'duration'], 'Matches': ['match_id', 'martial_art_id', 'winner_id', 'tournament_id', 'match_date', 'practitioner_id', 'num_rounds', 'match_duration', 'num_participants']}. \n# the user question is: Retrieve the names of all tournaments along with the average age of the participants in each tournament, sorted in descending order of the average age:. \n#SQL query: SELECT t.tournament_name, AVG(p.age) AS average_age FROM Tournaments t JOIN Matches m ON t.tournament_id = m.tournament_id JOIN Practitioners p ON m.practitioner_id = p.practitioner_id GROUP BY t.tournament_name ORDER BY average_age DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 smallest countries in the \"South America\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population of the 5 smallest countries in the \"South America\" region:",
    "output": "SELECT name, population FROM Country WHERE region = 'South America' ORDER BY population ASC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population FROM Country WHERE region='South America' ORDER BY area LIMIT 5;",
    "prompt_token_number": 525,
    "response_token_number": 19
},
{
    "id": 33817,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Titanic': ['Age', 'Sex', 'Survived', 'Fare', 'Pclass', 'SibSp', 'Parch', 'Embarked', 'Cabin']}. \n# the user question is: What is the total number of passengers in the 'Titanic' dataset who are female and have a 'Pclass' value of 1 and have survived?. \n#SQL query: SELECT COUNT(*) FROM Titanic WHERE Sex = 'female' AND Pclass = 1 AND Survived = 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 smallest countries in the \"Africa\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population of the 5 smallest countries in the \"Africa\" region:",
    "output": "SELECT name, population FROM Country WHERE region = 'Africa' ORDER BY population ASC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population FROM Country WHERE region = 'Africa' ORDER BY area ASC LIMIT 5;",
    "prompt_token_number": 421,
    "response_token_number": 20
},
{
    "id": 33819,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Species': ['species_id', 'name', 'common_name', 'classification_id', 'genus', 'family_id', 'scientific_name', 'class_id', 'taxonomy', 'category', 'conservation_status', 'population_trend', 'habitat', 'migration_pattern', 'min_depth_range', 'max_depth_range', 'body_size', 'body_temperature_range', 'migratory_behavior', 'species_name', 'discovery_year', 'class_name', 'is_venomous', 'order_name'], 'SamplingLocations': ['location_id', 'location_name', 'latitude', 'longitude', 'depth', 'habitat_id', 'temperature_range', 'ocean_id', 'ocean', 'Reef', 'Great', 'Barrier'], 'Animal': ['animal_id', 'common_name', 'species_id', 'length'], 'AnimalObservation': ['animal_id', 'observation_id', 'location_id']}. \n# the user question is: Retrieve the names of all species that have been found in \"Antarctic Ocean\" and whose body temperature range is between -2 and -1 degree Celsius, along with the scientific name and the total number of individuals counted for each species:. \n#SQL query: SELECT Species.scientific_name, Species.common_name, COUNT(AnimalObservation.observation_id) AS total_count FROM Species INNER JOIN Animal ON Species.species_id = Animal.species_id INNER JOIN AnimalObservation ON Animal.animal_id = AnimalObservation.animal_id INNER JOIN SamplingLocations ON AnimalObservation.location_id = SamplingLocations.location_id WHERE SamplingLocations.location_name = 'Antarctic Ocean' AND Species.body_temperature_range BETWEEN -2 AND -1 GROUP BY Species.species_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Approval': ['politician_id', 'rating', 'date', 'voter_id'], 'Voter': ['id', 'gender', 'age', 'lgbtq', 'name', 'income', 'date_of_birth']} and \n# the user question: List the name and birthdate of the politician who has the highest number of disapprovals from voters in the age range of 55-64:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the name and birthdate of the politician who has the highest number of disapprovals from voters in the age range of 55-64:",
    "output": "SELECT Politician.name, COUNT(*) AS num_disapprovals_55_64 FROM Approval JOIN Politician ON Approval.politician_id = Politician.id JOIN Voter ON Approval.voter_id = Voter.id WHERE Approval.rating = 'disapprove' AND Voter.age BETWEEN 55 AND 64 GROUP BY Politician.id ORDER BY num_disapprovals_55_64 DESC LIMIT 1;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "Approval": [
            "politician_id",
            "rating",
            "date",
            "voter_id"
        ],
        "Voter": [
            "id",
            "gender",
            "age",
            "lgbtq",
            "name",
            "income",
            "date_of_birth"
        ]
    },
    "response_text": "SELECT Politician.name, Politician.birthdate \nFROM Politician \nINNER JOIN Approval ON Politician.id = Approval.politician_id \nINNER JOIN Voter ON Approval.voter_id = Voter.id \nWHERE Voter.age BETWEEN 55 AND 64 AND Approval.rating = 'disapproval' \nGROUP BY Politician.id \nORDER BY COUNT(Approval.rating) DESC \nLIMIT 1;",
    "prompt_token_number": 604,
    "response_token_number": 78
},
{
    "id": 33821,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['username', 'user_id', 'address_id', 'work_address_id', 'last_active_date', 'home_address_id', 'last_activity_date', 'registration_date', 'email', 'total_purchase_amount', 'user_type_id', 'country', 'name'], 'Orders': ['order_date', 'order_id', 'address_id', 'user_id', 'order_total', 'shipping_status', 'shipping_address_id'], 'Addresses': ['state_id', 'address_id', 'city', 'street_address', 'city_id', 'country_id'], 'States': ['country_id', 'state_id', 'state_name', 'sales_tax_rate', 'population_density', 'time_zone', 'population', 'state_code'], 'Countries': ['country_name', 'country_id', 'population', 'continent', 'country_code', 'name', 'region_id'], 'Payment_details': ['order_id', 'payment_id'], 'Payment_methods': ['payment_type', 'payment_id'], 'Cities': ['city_id', 'city_name', 'population', 'sales_tax_rate', 'population_density', 'covid_cases']}. \n# the user question is: Get the details of all orders that have been placed by users who have made at least one purchase using a payment method that has 'Apple Pay' in its name and have been shipped to an address in a state that has a population of less than 5 million:. \n#SQL query: SELECT Orders.order_id, Users.username, Addresses.street_address, Addresses.city, States.state_name, Countries.country_name, Payment_methods.payment_type FROM Orders INNER JOIN Users ON Orders.user_id = Users.user_id INNER JOIN Addresses ON Orders.shipping_address_id = Addresses.address_id INNER JOIN Cities ON Addresses.city_id = Cities.city_id INNER JOIN States ON Addresses.state_id = States.state_id INNER JOIN Countries ON States.country_id = Countries.country_id INNER JOIN Payment_details ON Orders.order_id = Payment_details.order_id INNER JOIN Payment_methods ON Payment_details.payment_id = Payment_methods.payment_id WHERE Payment_methods.payment_type LIKE '%Apple Pay%' AND States.population < 5000000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Approval': ['politician_id', 'rating', 'date', 'voter_id'], 'Voter': ['id', 'gender', 'age', 'lgbtq', 'name', 'income', 'date_of_birth']} and \n# the user question: List the name and birthdate of the politician who has the highest number of approvals from voters in the age range of 65 and above:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the name and birthdate of the politician who has the highest number of approvals from voters in the age range of 65 and above:",
    "output": "SELECT Politician.name, COUNT(*) AS num_approvals_65_plus FROM Approval JOIN Politician ON Approval.politician_id = Politician.id JOIN Voter ON Approval.voter_id = Voter.id WHERE Approval.rating = 'approve' AND Voter.age >= 65 GROUP BY Politician.id ORDER BY num_approvals_65_plus DESC LIMIT 1;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "Approval": [
            "politician_id",
            "rating",
            "date",
            "voter_id"
        ],
        "Voter": [
            "id",
            "gender",
            "age",
            "lgbtq",
            "name",
            "income",
            "date_of_birth"
        ]
    },
    "response_text": "SELECT Politician.name, Politician.birthdate\nFROM Politician\nINNER JOIN Approval ON Politician.id = Approval.politician_id\nINNER JOIN Voter ON Approval.voter_id = Voter.id\nWHERE Voter.age >= 65\nGROUP BY Politician.id\nORDER BY COUNT(Approval.voter_id) DESC\nLIMIT 1;",
    "prompt_token_number": 681,
    "response_token_number": 69
},
{
    "id": 33822,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'User_Activities': ['activity_value', 'activity_id', 'date_recorded', 'user_id', 'activity_units', 'activity_date', 'activity_duration', 'activity_intensity', 'activity_hr', 'activity_distance', 'activity_calories', 'activity_count', 'duration', 'distance', 'weight', 'heart_rate', 'date_completed', 'activity_name', 'calories_burned']}. \n# the user question is: Find the name, email address, and average intensity level of all activities completed by user with ID 3 in the last 30 days:. \n#SQL query: SELECT Users.first_name, Users.last_name, Users.email, AVG(User_Activities.activity_intensity) AS avg_intensity FROM Users JOIN User_Activities ON Users.user_id = User_Activities.user_id WHERE Users.user_id = 3 AND User_Activities.activity_date BETWEEN date('now', '-30 days') AND date('now') GROUP BY Users.user_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 smallest countries in the \"Oceania\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population of the 5 smallest countries in the \"Oceania\" region:",
    "output": "SELECT name, population FROM Country WHERE region = 'Oceania' ORDER BY population ASC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population FROM Country WHERE region = 'Oceania' ORDER BY area ASC LIMIT 5;",
    "prompt_token_number": 552,
    "response_token_number": 22
},
{
    "id": 33824,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'name', 'email', 'password', 'created_at', 'project_id', 'role', 'updated_at', 'last_login', 'doe', 'johndoe'], 'Reviews': ['rating', 'product_id', 'review_id', 'created_at', 'comment', 'updated_at', 'feature_id', 'user_id'], 'Features': ['name', 'description', 'section_id', 'feature_id', 'Reviews', 'Product']}. \n# the user question is: Get the name and email of all users who have given a rating of 5 to at least one feature:. \n#SQL query: SELECT DISTINCT Users.name, Users.email FROM Users INNER JOIN Reviews ON Users.user_id = Reviews.user_id INNER JOIN Features ON Reviews.feature_id = Features.feature_id WHERE Reviews.rating = 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Approval': ['politician_id', 'rating', 'date', 'voter_id'], 'Voter': ['id', 'gender', 'age', 'lgbtq', 'name', 'income', 'date_of_birth']} and \n# the user question: List the name and birthdate of the politician who has the highest number of disapprovals from voters in the age range of 18-24:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the name and birthdate of the politician who has the highest number of disapprovals from voters in the age range of 18-24:",
    "output": "SELECT Politician.name, COUNT(*) AS num_disapprovals_18_24 FROM Approval JOIN Politician ON Approval.politician_id = Politician.id JOIN Voter ON Approval.voter_id = Voter.id WHERE Approval.rating = 'disapprove' AND Voter.age BETWEEN 18 AND 24 GROUP BY Politician.id ORDER BY num_disapprovals_18_24 DESC LIMIT 1;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "Approval": [
            "politician_id",
            "rating",
            "date",
            "voter_id"
        ],
        "Voter": [
            "id",
            "gender",
            "age",
            "lgbtq",
            "name",
            "income",
            "date_of_birth"
        ]
    },
    "response_text": "SELECT Politician.name, Politician.birthdate \nFROM Politician \nINNER JOIN Approval ON Politician.id = Approval.politician_id \nINNER JOIN Voter ON Approval.voter_id = Voter.id \nWHERE Approval.rating < 0 AND Voter.age BETWEEN 18 AND 24 \nGROUP BY Politician.id\nORDER BY COUNT(Approval.rating) DESC \nLIMIT 1;",
    "prompt_token_number": 429,
    "response_token_number": 76
},
{
    "id": 33826,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Collection': ['collection_id', 'name'], 'Movie_Collection': ['movie_id', 'collection_id']}. \n# the user question is: Retrieve the title of the movie, the name of the collection, and the release year for all movies in the \"Harry Potter Collection\" that were released after the year 2005.. \n#SQL query: SELECT Movie.title, Collection.name, Movie.release_year FROM Movie JOIN Movie_Collection ON Movie.movie_id = Movie_Collection.movie_id JOIN Collection ON Movie_Collection.collection_id = Collection.collection_id WHERE Collection.name = 'Harry Potter Collection' AND Movie.release_year > 2005;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 smallest countries in the \"Asia\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population of the 5 smallest countries in the \"Asia\" region:",
    "output": "SELECT name, population FROM Country WHERE region = 'Asia' ORDER BY population ASC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT Country.name, Country.population FROM Country WHERE Country.region = 'Asia' ORDER BY Country.area ASC LIMIT 5;",
    "prompt_token_number": 482,
    "response_token_number": 24
},
{
    "id": 33830,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'name', 'quantity_in_stock', 'price', 'quantity'], 'Reviews': ['rating', 'review_id', 'product_id', 'customer_id', 'order_id']}. \n# the user question is: \"Find the products that have not been reviewed by any customers.\". \n#SQL query: SELECT Products.name FROM Products LEFT JOIN Reviews ON Products.product_id = Reviews.product_id WHERE Reviews.review_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 largest countries in the \"Oceania\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and area of the 5 largest countries in the \"Oceania\" region:",
    "output": "SELECT name, area FROM Country WHERE region = 'Oceania' ORDER BY area DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT Country.name, Country.area FROM Country WHERE Country.region = \"Oceania\" ORDER BY Country.area DESC LIMIT 5;",
    "prompt_token_number": 407,
    "response_token_number": 26
},
{
    "id": 33849,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'invoices': ['customer_id', 'total', 'invoice_date', 'vendor_id', 'payment_status', 'due_date', 'salesperson_id', 'billing_country', 'invoice_id', 'amount', 'payment_date', 'total_amount'], 'customers': ['country', 'customer_id', 'customer_name', 'support_rep_id', 'last_name', 'first_name', 'email', 'salesperson_id', 'name', 'phone', 'id', 'balance', 'customer_email']}. \n# the user question is: Find the top 5 customers who have the highest lifetime value:. \n#SQL query: SELECT c.customer_name, SUM(i.total) as lifetime_value FROM customers c INNER JOIN invoices i ON c.customer_id = i.customer_id GROUP BY c.customer_name ORDER BY lifetime_value DESC LIMIT 5\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Approval': ['politician_id', 'rating', 'date', 'voter_id'], 'Voter': ['id', 'gender', 'age', 'lgbtq', 'name', 'income', 'date_of_birth']} and \n# the user question: List the name and birthdate of the politician who has the highest number of disapprovals from voters in the age range of 45-54:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the name and birthdate of the politician who has the highest number of disapprovals from voters in the age range of 45-54:",
    "output": "SELECT Politician.name, COUNT(*) AS num_disapprovals_45_54 FROM Approval JOIN Politician ON Approval.politician_id = Politician.id JOIN Voter ON Approval.voter_id = Voter.id WHERE Approval.rating = 'disapprove' AND Voter.age BETWEEN 45 AND 54 GROUP BY Politician.id ORDER BY num_disapprovals_45_54 DESC LIMIT 1;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "Approval": [
            "politician_id",
            "rating",
            "date",
            "voter_id"
        ],
        "Voter": [
            "id",
            "gender",
            "age",
            "lgbtq",
            "name",
            "income",
            "date_of_birth"
        ]
    },
    "response_text": "SELECT p.name, p.birthdate\nFROM Politician p\nINNER JOIN Approval a ON p.id = a.politician_id\nINNER JOIN Voter v ON a.voter_id = v.id\nWHERE v.age BETWEEN 45 AND 54 AND a.rating = 'disapprove'\nGROUP BY p.name, p.birthdate\nORDER BY COUNT(a.rating) DESC\nLIMIT 1",
    "prompt_token_number": 423,
    "response_token_number": 77
},
{
    "id": 33859,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['username', 'user_id', 'email', 'john_doe', 'jane_doe', 'sarah_smith', 'tom_wilson', 'robert_king', 'alice_smith', 'jack_smith', 'jane_smith', 'mary_jones', 'joe_brown', 'james_smith', 'jessica_wong', 'david_smith', 'first_name', 'last_name', 'james_wong', 'emily_smith', 'jennifer_wilson', 'subscription', 'date_of_birth'], 'Models': ['created_by', 'model_name', 'description', 'model_id', 'modified_date', 'user_i', 'algorithm', 'project_i', 'Rating', 'Created_date', 'rating', 'creation_date', 'category_id'], 'Model_Evaluation': ['metric_name', 'metric_value', 'model_id']}. \n# the user question is: What are the names of the models that have been evaluated using the 'Recall' metric and have a value greater than 0.7, and were created by 'jane_doe'?. \n#SQL query: SELECT Models.model_name FROM Models INNER JOIN Model_Evaluation ON Models.model_id = Model_Evaluation.model_id WHERE Models.created_by = (SELECT user_id FROM Users WHERE username = 'jane_doe') AND Model_Evaluation.metric_name = 'Recall' AND Model_Evaluation.metric_value > 0.7;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 largest countries in the \"Africa\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population of the 5 largest countries in the \"Africa\" region:",
    "output": "SELECT name, population FROM Country WHERE region = 'Africa' ORDER BY population DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population FROM Country WHERE region = 'Africa' ORDER BY population DESC LIMIT 5;",
    "prompt_token_number": 621,
    "response_token_number": 20
},
{
    "id": 33861,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Employees': ['first_name', 'last_name', 'employee_id', 'department_id', 'job_title', 'hire_date', 'salary', 'department', 'birth_date', 'team', 'manager_id', 'email_address', 'phone_number', 'compliance_training_due_date', 'salary_amount', 'job_id', 'address', 'city', 'state', 'email', 'supervisor_id', 'num_projects', 'hourly_rate'], 'Orders': ['employee_id', 'total_price', 'order_date'], 'Salaries': ['employee_id', 'salary_amount', 'department_id', 'effective_date']}. \n# the user question is: List the names and total sales revenue of all employees who have made at least one sale in the past month and have a salary greater than $120,000 and work in the \"Executive\" department.. \n#SQL query: SELECT e.first_name, e.last_name, SUM(o.total_price) AS total_sales_revenue FROM Employees e INNER JOIN Orders o ON e.employee_id = o.employee_id INNER JOIN Salaries s ON e.employee_id = s.employee_id WHERE strftime('%Y-%m', o.order_date) = strftime('%Y-%m', date('now')) AND s.salary_amount > 120000 AND e.department = 'Executive' GROUP BY e.employee_id ORDER BY total_sales_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 smallest countries in the \"Oceania\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and area of the 5 smallest countries in the \"Oceania\" region:",
    "output": "SELECT name, area FROM Country WHERE region = 'Oceania' ORDER BY area ASC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, area FROM Country WHERE region = 'Oceania' ORDER BY area ASC LIMIT 5;",
    "prompt_token_number": 593,
    "response_token_number": 22
},
{
    "id": 33863,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'appointments': ['appointment_id', 'date_time', 'client_id', 'artist_id', 'invoice_id', 'total_cost', 'appointment_date', 'discount_percentage', 'photoshoot_id', 'duration', 'price', 'avg_rating', 'quantity', 'status', 'reschedule_id', 'location_id', 'appointment_start_time', 'appointment_end_time', 'order_id', 'makeup_artist_id'], 'artists': ['artist_id', 'first_name', 'last_name', 'email', 'phone_number', 'user_id', 'city', 'quantity', 'price', 'artist_name', 'location_lat', 'location_lng', 'name', 'brand_id', 'experience_years', 'id', 'phone'], 'appointment_services': ['appointment_service_id', 'appointment_id', 'service_id', 'quantity', 'service_name', 'artist_id', 'price', 'location_id', 'duration', 'rating'], 'reviews': ['rating', 'appointment_id', 'review_id', 'product_id']}. \n# the user question is: Find the artists who have received the highest ratings across all services:. \n#SQL query: SELECT artists.name, AVG(reviews.rating) AS avg_rating FROM artists INNER JOIN appointment_services ON artists.artist_id = appointment_services.artist_id INNER JOIN appointments ON appointment_services.appointment_id = appointments.appointment_id AND appointments.status = 'completed' INNER JOIN reviews ON appointments.appointment_id = reviews.appointment_id GROUP BY artists.artist_id ORDER BY avg_rating DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and GDP of the 5 wealthiest countries in the \"Asia\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and GDP of the 5 wealthiest countries in the \"Asia\" region:",
    "output": "SELECT name, gdp FROM Country WHERE region = 'Asia' ORDER BY gdp DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, gdp \nFROM Country \nWHERE region = 'Asia' \nORDER BY gdp DESC \nLIMIT 5;",
    "prompt_token_number": 623,
    "response_token_number": 26
},
{
    "id": 33866,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Inventory': ['product_id', 'supplier_id', 'quantity', 'inventory_id', 'units_in_stock', 'quantity_on_hand', 'expiration_date', 'expected_arrival_date', 'quantity_on_order'], 'Suppliers': ['supplier_name', 'supplier_id', 'phone_number', 'address', 'email', 'country', 'contact_name', 'state', 'city', 'phone', 'company_name', 'Canada', 'USA', 'supplier_rating', 'zip'], 'Sale_Items': ['product_id', 'sale_id', 'quantity', 'sale_item_id', 'customer_id', 'unit_price', 'discount_code', 'sale_date', 'price'], 'Product_Ratings': ['rating', 'product_id']}. \n# the user question is: Find the names and total revenue for all products that have been sold at least 2000 times and have a rating of 3 or higher, and were supplied by a company based in Japan, and have less than 20 units in inventory.. \n#SQL query: SELECT Products.product_name, SUM(Sale_Items.quantity * Products.price) AS total_revenue FROM Products INNER JOIN Sale_Items ON Products.product_id = Sale_Items.product_id INNER JOIN Product_Ratings ON Products.product_id = Product_Ratings.product_id INNER JOIN Inventory ON Products.product_id = Inventory.product_id INNER JOIN Suppliers ON Inventory.supplier_id = Suppliers.supplier_id WHERE Product_Ratings.rating >= 3 AND (SELECT COUNT(Sale_Items.sale_item_id) FROM Sale_Items WHERE Sale_Items.product_id = Products.product_id) >= 2000 AND Suppliers.country = 'Japan' AND Inventory.quantity < 20 GROUP BY Products.product_id ORDER BY total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and GDP per capita of the 5 countries with the highest GDP and population greater than 100 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and GDP per capita of the 5 countries with the highest GDP and population greater than 100 million:",
    "output": "SELECT name, gdp_per_capita FROM Country WHERE population > 100000000 ORDER BY gdp DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, gdp_per_capita FROM Country WHERE population > 100000000 ORDER BY gdp DESC LIMIT 5;",
    "prompt_token_number": 748,
    "response_token_number": 26
},
{
    "id": 33867,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Lawyers': ['Lawyer_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'Specialization', 'Department_ID', 'City', 'Email_Address', 'Phone_Number', 'Hourly_Rate', 'Practice_Area_ID', 'Billing_Rate_ID', 'Firm_ID', 'FirmID', 'LawSchoolID', 'HourlyRate', 'Name', 'ID', 'ExperienceYears', 'years_of_experience', 'state', 'lawyer_id'], 'Time_Entries': ['Time_Entry_ID', 'Lawyer_ID', 'Case_ID', 'Date', 'Hours', 'Description', 'Task_ID', 'Billed', 'Time_Entry_Date', 'Invoice_ID', 'Billable', 'Hours_Worked', 'Entry_Date']}. \n# the user question is: List all the lawyers who have billed more than 100 hours:. \n#SQL query: SELECT Lawyers.First_Name, Lawyers.Last_Name, SUM(Time_Entries.Hours) AS Total_Hours FROM Lawyers JOIN Time_Entries ON Lawyers.Lawyer_ID = Time_Entries.Lawyer_ID GROUP BY Lawyers.Lawyer_ID HAVING Total_Hours > 100;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded']} and \n# the user question: Find the name and total number of politicians in each political party in the database:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and total number of politicians in each political party in the database:",
    "output": "SELECT PoliticalParty.name, COUNT(Politician.id) AS num_members FROM PoliticalParty LEFT JOIN Politician ON PoliticalParty.id = Politician.political_party GROUP BY PoliticalParty.name;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "PoliticalParty": [
            "ideology",
            "id",
            "name",
            "political_party",
            "country_id",
            "number_of_seats",
            "number_of_members",
            "number_of_female_members",
            "total_spending",
            "total_revenue",
            "total_funding",
            "num_seats",
            "num_members",
            "date_founded"
        ]
    },
    "response_text": "SELECT PoliticalParty.name, COUNT(Politician.id) AS Total_Politicians FROM Politician JOIN PoliticalParty ON Politician.political_party = PoliticalParty.name GROUP BY PoliticalParty.name;",
    "prompt_token_number": 506,
    "response_token_number": 40
},
{
    "id": 33868,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Cases': ['Case_ID', 'Case_Name', 'Case_Description', 'Client_ID', 'Case_Status', 'Lawyer_ID', 'Last_Updated', 'Date_Opened', 'Date_Closed', 'Status', 'Case_Closed_Date', 'Practice_Area_ID', 'Case_Manager_ID', 'Open_Date', 'Closed', 'Case_End_Date', 'Case_Start_Date', 'Firm_ID', 'Office_ID', 'CaseStatus', 'CaseNumber', 'ClientID', 'CaseTitle', 'CaseTypeID', 'CaseType', 'CourtName', 'ClosedDate', 'Settlement', 'ID', 'HearingDate', 'ClosingDate', 'AppealStatus', 'LawyerID', 'OpeningDate', 'verdict', 'judge_id', 'defendant_state', 'plaintiff_state', 'lawyer_id'], 'Invoices': ['Invoice_ID', 'Client_ID', 'Date', 'Amount', 'Case_ID', 'Paid_Date', 'Due_Date', 'Invoice_Date', 'Time_Entry_ID', 'Paid', 'Billed', 'Task_ID', 'Issue_Date', 'Total_Amount', 'Invoice_Number', 'Amount_Billed', 'Invoice_Status', 'Billing_Date', 'Billing_Rate_ID', 'Hours_Billed', 'Amount_Paid', 'Amount_Due', 'Bill_Date', 'ClientID', 'Status', 'Unpaid', 'IssueDate']}. \n# the user question is: List all the cases that have been closed in the past month, along with the total amount charged for each case:. \n#SQL query: SELECT Cases.Case_Name, SUM(Invoices.Amount) AS Total_Charges FROM Cases JOIN Invoices ON Cases.Case_ID = Invoices.Case_ID WHERE Cases.Case_Status = 'Closed' AND Cases.Date_Closed > DATE('now', '-1 month') GROUP BY Cases.Case_ID;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and number of countries in each region in the database:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and number of countries in each region in the database:",
    "output": "SELECT region, COUNT(*) AS num_countries FROM Country GROUP BY region;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT region, COUNT(name) AS number_of_countries FROM Country GROUP BY region;",
    "prompt_token_number": 696,
    "response_token_number": 16
},
{
    "id": 33870,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'collection': ['name', 'acquisition_date', 'collection_id', 'collector_id', 'date_acquired'], 'artwork_collection': ['collection_id', 'artwork_id'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender'], 'collector': ['first_name', 'collector_id', 'last_name', 'email', 'country', 'state', 'country_of_origin']}. \n# the user question is: Find the names and email addresses of all collectors who have artwork created by \"Salvador Dali\" and are currently in the \"Prado Museum\".. \n#SQL query: SELECT DISTINCT c.first_name, c.last_name, c.email FROM collector AS c INNER JOIN collection AS co ON c.collector_id = co.collector_id INNER JOIN artwork_collection AS ac ON co.collection_id = ac.collection_id INNER JOIN artwork AS a ON ac.artwork_id = a.artwork_id INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS l ON al.location_id = l.location_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id WHERE ar.first_name = 'Salvador' AND ar.last_name = 'Dali' AND l.name = 'Prado Museum' AND al.end_date IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and GDP per capita of the 5 countries with the lowest GDP and population greater than 1 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and GDP per capita of the 5 countries with the lowest GDP and population greater than 1 million:",
    "output": "SELECT name, gdp_per_capita FROM Country WHERE population > 1000000 ORDER BY gdp_per_capita ASC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, gdp_per_capita FROM Country WHERE population > 1000000 ORDER BY gdp ASC LIMIT 5;",
    "prompt_token_number": 828,
    "response_token_number": 26
},
{
    "id": 33871,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'RecipeIngredients': ['ingredient_id', 'recipe_id', 'unit', 'quantity', 'measurement_id'], 'Ingredients': ['ingredient_id', 'name', 'category', 'Pasta', 'category_id', 'gluten_free', 'vegan_friendly']}. \n# the user question is: Text Query: \"Retrieve the top 3 most used ingredients in all recipes.\". \n#SQL query: SELECT i.ingredient_id, i.name, COUNT(ri.recipe_id) AS usage_count FROM Ingredients i JOIN RecipeIngredients ri ON i.ingredient_id = ri.ingredient_id GROUP BY i.ingredient_id, i.name ORDER BY usage_count DESC LIMIT 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population density of the 5 most densely populated countries in the database:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population density of the 5 most densely populated countries in the database:",
    "output": "SELECT name, population_density FROM Country ORDER BY population_density DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT c.name, c.population_density FROM Country c ORDER BY c.population_density DESC LIMIT 5;",
    "prompt_token_number": 449,
    "response_token_number": 20
},
{
    "id": 33872,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'tasks': ['created_at', 'project_id', 'task_id', 'user_id', 'due_date', 'completed', 'started_at', 'priority', 'completion_date', 'completed_date', 'start_date', 'created_date', 'creator_id', 'assignee_id', 'completed_at', 'name', 'tags', 'assigner_id', 'assigned_by_id', 'category'], 'users': ['user_id', 'name', 'email', 'last_login_attempt', 'total_tasks', 'completed_tasks', 'assignee_id', 'role', 'last_login', 'first_name', 'last_name', 'last_login_date', 'registration_date', 'password', 'job_title', 'hire_date']}. \n# the user question is: Retrieve the names and email addresses of users who have completed all tasks assigned to them:. \n#SQL query: SELECT DISTINCT u.name, u.email FROM users u JOIN tasks t ON u.user_id = t.assignee_id GROUP BY u.user_id HAVING COUNT(CASE WHEN t.completed = 1 THEN t.task_id END) = COUNT(t.task_id);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and life expectancy of the 5 countries with the highest life expectancy and a population greater than 1 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and life expectancy of the 5 countries with the highest life expectancy and a population greater than 1 million:",
    "output": "SELECT name, life_expectancy FROM Country WHERE population > 1000000 ORDER BY life_expectancy DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, life_expectancy FROM Country WHERE population > 1000000 ORDER BY life_expectancy DESC LIMIT 5;",
    "prompt_token_number": 547,
    "response_token_number": 25
},
{
    "id": 33873,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Students': ['last_name', 'student_id', 'first_name', 'grade_level', 'teacher_id', 'gender', 'school_id'], 'Enrollments': ['student_id', 'course_id', 'enrollment_id', 'class_id', 'semester', 'enrollment_date'], 'Courses': ['course_name', 'course_id', 'teacher_id', 'department_id', 'subject_id', 'level', 'type', 'program_id'], 'Grades': ['grade', 'enrollment_id'], 'Departments': ['department_name', 'department_id']}. \n# the user question is: \"Find the student with the highest average grade in the 'Science' department.\". \n#SQL query: SELECT Students.first_name, Students.last_name, AVG(Grades.grade) AS average_grade FROM Students INNER JOIN Enrollments ON Students.student_id = Enrollments.student_id INNER JOIN Courses ON Enrollments.course_id = Courses.course_id INNER JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id INNER JOIN Departments ON Courses.department_id = Departments.department_id WHERE Departments.department_name = 'Science' GROUP BY Students.student_id ORDER BY average_grade DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and GDP of the 5 countries with the highest GDP and a population greater than 10 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and GDP of the 5 countries with the highest GDP and a population greater than 10 million:",
    "output": "SELECT name, gdp FROM Country WHERE population > 10000000 ORDER BY gdp DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, gdp FROM Country WHERE population > 10000000 ORDER BY gdp DESC LIMIT 5;",
    "prompt_token_number": 560,
    "response_token_number": 23
},
{
    "id": 33874,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Book': ['book_id', 'title', 'isbn', 'publisher_id', 'publication_date', 'rating', 'price', 'publication_year', 'author_id', 'publisher', 'author', 'weight', 'author_gender', 'language', 'author_name', 'book_title', 'format_id', 'page_count', 'id', 'num_pages'], 'Review': ['review_id', 'book_id', 'reviewer_id', 'rating', 'review_text', 'customer_id', 'date']}. \n# the user question is: Find the name and average rating of the top 5 most popular books (by total number of reviews).. \n#SQL query: SELECT Book.title, AVG(Review.rating) AS average_rating FROM Book JOIN Review ON Book.book_id = Review.book_id GROUP BY Book.book_id ORDER BY COUNT(Review.review_id) DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and literacy rate of the 5 countries with the highest literacy rate and a population greater than 5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and literacy rate of the 5 countries with the highest literacy rate and a population greater than 5 million:",
    "output": "SELECT name, literacy_rate FROM Country WHERE population > 5000000 ORDER BY literacy_rate DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT Country.name, Country.literacy_rate FROM Country WHERE Country.population > 5000000 ORDER BY Country.literacy_rate DESC LIMIT 5;",
    "prompt_token_number": 500,
    "response_token_number": 31
},
{
    "id": 33875,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Incidents': ['reported_by_user_id', 'location_id', 'created_at', 'incident_id', 'evacuation_status', 'severity_level', 'vehicle_id', 'status', 'reported_time', 'location', 'type', 'start_time', 'assigned_to_vehicle_id', 'incident_date', 'incident_type', 'category_id', 'reporting_agency_id', 'reported_at', 'date_id', 'description', 'date', 'time'], 'Locations': ['longitude', 'location_id', 'latitude', 'location_name', 'address', 'city', 'city_id', 'location', 'state_id'], 'Cities': ['city_id', 'city_name', 'population', 'state_id', 'city'], 'Officers': ['badge_number', 'officer_name', 'officer_id', 'assigned_to_agency_id', 'phone_number', 'rank', 'date_of_birth'], 'Responds_To': ['responding_officer_id', 'responded_to_incident_id', 'response_time', 'responding_agency_id', 'officer_id', 'responded_at', 'response_time_minutes', 'respond']}. \n# the user question is: Retrieve the names and corresponding badge numbers of all officers who have responded to incidents that occurred in cities with a population greater than 500,000.. \n#SQL query: SELECT DISTINCT Officers.officer_name, Officers.badge_number FROM Officers INNER JOIN Responds_To ON Officers.officer_id = Responds_To.responding_officer_id INNER JOIN Incidents ON Responds_To.responded_to_incident_id = Incidents.incident_id INNER JOIN Locations ON Incidents.location_id = Locations.location_id INNER JOIN Cities ON Locations.city_id = Cities.city_id WHERE Cities.population > 500000\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 smallest countries in the database:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and area of the 5 smallest countries in the database:",
    "output": "SELECT name, area FROM Country ORDER BY area ASC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, area FROM Country ORDER BY area ASC LIMIT 5",
    "prompt_token_number": 670,
    "response_token_number": 13
},
{
    "id": 33877,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Authors': ['first_name', 'author_id', 'last_name', 'nationality', 'author_name', 'author_city', 'AuthorID', 'AuthorName'], 'Order_Items': ['price', 'quantity', 'order_id', 'book_id', 'customer_id', 'publisher_id', 'is_returned', 'product_id', 'is_delivered', 'total_price', 'order_date']}. \n# the user question is: Retrieve the name and total revenue generated by each author, ordered by revenue in descending order.. \n#SQL query: SELECT a.author_name, SUM(oi.quantity * oi.price) AS revenue FROM Authors a JOIN Books b ON a.author_id = b.author_id JOIN Order_Items oi ON b.book_id = oi.book_id GROUP BY a.author_id ORDER BY revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population density of the 5 most densely populated countries in the \"Europe\" region:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population density of the 5 most densely populated countries in the \"Europe\" region:",
    "output": "SELECT name, population_density FROM Country WHERE region = 'Europe' ORDER BY population_density DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population_density FROM Country WHERE region = 'Europe' ORDER BY population_density DESC LIMIT 5;",
    "prompt_token_number": 585,
    "response_token_number": 22
},
{
    "id": 33878,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'therapists': ['first_name', 'last_name', 'therapist_id', 'cnt', 'gender', 'is_available', 'specialty', 'last_login_date', 'session_count'], 'appointments': ['appointment_id', 'therapist_id', 'appointment_date', 'patient_id', 'end_time', 'start_time', 'session_duration_minutes', 'session_cost', 'satisfaction_rating', 'is_missed', 'sessions_per_week', 'session_length_minutes', 'start_date', 'attended', 'end_date', 'therapy_id']}. \n# the user question is: Retrieve the names of the therapists who have not treated any patients in the past month.. \n#SQL query: SELECT t.first_name || ' ' || t.last_name AS therapist_name FROM therapists t WHERE NOT EXISTS ( SELECT a.appointment_id FROM appointments a WHERE a.therapist_id = t.therapist_id AND a.appointment_date >= DATE('now', '-1 month') );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and GDP per capita of the 5 richest countries in the database:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and GDP per capita of the 5 richest countries in the database:",
    "output": "SELECT name, gdp_per_capita FROM Country ORDER BY gdp_per_capita DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, gdp_per_capita FROM Country ORDER BY gdp_per_capita DESC LIMIT 5;",
    "prompt_token_number": 512,
    "response_token_number": 22
},
{
    "id": 33879,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Director': ['director_id', 'name', 'gender', 'has_won_academy_award', 'director_name', 'birth_year'], 'Actor': ['actor_id', 'name', 'actor_name'], 'Movie_Actor': ['movie_id', 'actor_id'], 'Rating': ['rating_id', 'movie_id', 'source', 'rating_value', 'rating']}. \n# the user question is: Retrieve the title of the movie, the name of the lead actor, and the release year for all movies that had a rating value from Rotten Tomatoes greater than 90 and were directed by either Steven Spielberg or Martin Scorsese.. \n#SQL query: SELECT Movie.title, Actor.name, Movie.release_year FROM Movie JOIN Movie_Actor ON Movie.movie_id = Movie_Actor.movie_id JOIN Actor ON Movie_Actor.actor_id = Actor.actor_id JOIN Director ON Movie.director_id = Director.director_id JOIN Rating ON Movie.movie_id = Rating.movie_id WHERE Rating.source = 'Rotten Tomatoes' AND Rating.rating_value > 90 AND (Director.name = 'Steven Spielberg' OR Director.name = 'Martin Scorsese');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and HDI (Human Development Index) of the 5 countries with the highest HDI and a population greater than 20 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and HDI (Human Development Index) of the 5 countries with the highest HDI and a population greater than 20 million:",
    "output": "SELECT name, hdi FROM Country WHERE population > 20000000 ORDER BY hdi DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, hdi FROM Country WHERE population > 20000000 ORDER BY hdi DESC LIMIT 5;",
    "prompt_token_number": 601,
    "response_token_number": 23
},
{
    "id": 33880,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Recipients': ['name', 'email', 'campaign_id', 'status', 'recipient_id', 'segment_id', 'list_id', 'last_opened_at', 'city', 'country', 'state', 'last_clicked_at', 'created_at', 'subscribed_at'], 'Campaigns': ['name', 'campaign_id', 'limited', 'Sale', 't', 'our', 'miss', 'content', 'subject', 'user_id', 'segment_id', 'list_id', 'workflow_id', 'email_template_id', 'scheduled_at', 'created_at', 'sent_at'], 'Bounces': ['recipient_id', 'created_at', 'campaign_id']}. \n# the user question is: Retrieve the email and number of bounces for all recipients who have bounced in a campaign sent by User ID 10 in the past month.. \n#SQL query: SELECT r.email, COUNT(*) AS num_bounces FROM Recipients r JOIN Campaigns c ON r.campaign_id = c.campaign_id JOIN Bounces b ON r.recipient_id = b.recipient_id AND b.campaign_id = c.campaign_id WHERE c.user_id = 10 AND b.created_at >= date('now', '-1 month') GROUP BY r.recipient_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and murder rate of the 5 countries with the highest murder rate and a population greater than 10 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and murder rate of the 5 countries with the highest murder rate and a population greater than 10 million:",
    "output": "SELECT name, murder_rate FROM Country WHERE population > 10000000 ORDER BY murder_rate DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, murder_rate FROM Country WHERE population > 10000000 ORDER BY murder_rate DESC LIMIT 5;",
    "prompt_token_number": 579,
    "response_token_number": 23
},
{
    "id": 33881,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'EnergySuppliers': ['supplier_name', 'supplier_id', 'contact_name', 'phone_number', 'supplier_state', 'supplier_city', 'supplier_address', 'supplier_zip', 'supplier_location'], 'EnergyContracts': ['start_date', 'rate', 'end_date', 'user_id', 'product_id', 'contract_id', 'source_id', 'meter_id', 'is_renewed', 'is_terminated', 'contract_type', 'supplier_id', 'revenue', 'contract_name', 'contract_end_date', 'contract_rate', 'contract_start_date', 'contract_status', 'contract_value'], 'EnergyMeters': ['meter_id', 'installation_date', 'meter_type', 'user_id', 'meter_number', 'starting_reading', 'meter_location', 'meter_name', 'product_id', 'meter_serial', 'created_date', 'avg_consumption', 'source_id'], 'EnergyMeterReadings': ['meter_id', 'reading_date', 'reading_value', 'reading_id', 'reading_hour']}. \n# the user question is: Retrieve the names of all energy suppliers and their respective contracts, and the total energy cost for each contract for the year 2049, where the contract type is \"fixed rate\" and the supplier has a state of \"Florida\".. \n#SQL query: SELECT s.supplier_name, c.contract_name, SUM(r.reading_value * c.contract_rate) AS total_cost FROM EnergySuppliers s INNER JOIN EnergyContracts c ON s.supplier_id = c.supplier_id INNER JOIN EnergyMeters m ON c.meter_id = m.meter_id INNER JOIN EnergyMeterReadings r ON m.meter_id = r.meter_id WHERE c.contract_type = 'fixed rate' AND s.supplier_state = 'Florida' AND r.reading_date >= '2049-01-01' AND r.reading_date <= '2049-12-31' GROUP BY s.supplier_id, c.contract_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population growth rate of the 5 countries with the highest population growth rate and a population greater than 50 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population growth rate of the 5 countries with the highest population growth rate and a population greater than 50 million:",
    "output": "SELECT name, population_growth_rate FROM Country WHERE population > 50000000 ORDER BY population_growth_rate DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population_growth_rate FROM Country WHERE population > 50000000 ORDER BY population_growth_rate DESC LIMIT 5;",
    "prompt_token_number": 723,
    "response_token_number": 25
},
{
    "id": 33882,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {}. \n# the user question is: \"Find the initiatives and their respective average completion percentage.\". \n#SQL query: SELECT `CSR Initiatives`.initiative_name, AVG((SELECT COUNT(*) FROM `CSR Goals` WHERE `CSR Goals`.initiative_id = `CSR Initiatives`.initiative_id AND `CSR Goals`.completion_date IS NOT NULL) * 100 / COUNT(`CSR Goals`.goal_id)) AS average_completion_percentage FROM `CSR Initiatives` JOIN `CSR Goals` ON `CSR Initiatives`.initiative_id = `CSR Goals`.initiative_id GROUP BY `CSR Initiatives`.initiative_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and infant mortality rate of the 5 countries with the highest infant mortality rate and a population greater than 10 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and infant mortality rate of the 5 countries with the highest infant mortality rate and a population greater than 10 million:",
    "output": "SELECT name, infant_mortality_rate FROM Country WHERE population > 10000000 ORDER BY infant_mortality_rate DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, infant_mortality_rate FROM Country WHERE population > 10000000 ORDER BY infant_mortality_rate DESC LIMIT 5;",
    "prompt_token_number": 449,
    "response_token_number": 27
},
{
    "id": 33883,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Polymorphism': ['gene_id', 'position', 'reference_sequence', 'alternate_sequence', 'polymorphism_id', 'frequency']}. \n# the user question is: Retrieve the names of all genes and their associated polymorphisms that have a frequency greater than 0.2% and are located on chromosome 38.. \n#SQL query: SELECT Gene.gene_name, Polymorphism.polymorphism_id FROM Gene JOIN Polymorphism ON Gene.gene_id = Polymorphism.gene_id WHERE Polymorphism.frequency > 0.002 AND Gene.chromosome_id = 38;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and GDP per capita of the 5 countries with the highest GDP per capita and a population greater than 1 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and GDP per capita of the 5 countries with the highest GDP per capita and a population greater than 1 million:",
    "output": "SELECT name, gdp_per_capita FROM Country WHERE population > 1000000 ORDER BY gdp_per_capita DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, gdp_per_capita FROM Country WHERE population > 1000000 ORDER BY gdp_per_capita DESC LIMIT 5;",
    "prompt_token_number": 515,
    "response_token_number": 29
},
{
    "id": 33884,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'therapists': ['first_name', 'last_name', 'therapist_id', 'cnt', 'gender', 'is_available', 'specialty', 'last_login_date', 'session_count'], 'appointments': ['appointment_id', 'therapist_id', 'appointment_date', 'patient_id', 'end_time', 'start_time', 'session_duration_minutes', 'session_cost', 'satisfaction_rating', 'is_missed', 'sessions_per_week', 'session_length_minutes', 'start_date', 'attended', 'end_date', 'therapy_id']}. \n# the user question is: Retrieve the names of the therapists who have not treated patients in the past month.. \n#SQL query: SELECT t.first_name || ' ' || t.last_name AS therapist_name FROM therapists t LEFT JOIN appointments a ON a.therapist_id = t.therapist_id AND a.appointment_date >= DATE('now', '-1 month') WHERE a.appointment_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and poverty rate of the 5 countries with the highest poverty rate and a population greater than 50 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and poverty rate of the 5 countries with the highest poverty rate and a population greater than 50 million:",
    "output": "SELECT name, poverty_rate FROM Country WHERE population > 50000000 ORDER BY poverty_rate DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, poverty_rate FROM Country WHERE population > 50000000 ORDER BY poverty_rate DESC LIMIT 5;",
    "prompt_token_number": 518,
    "response_token_number": 23
},
{
    "id": 33885,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Billing': ['session_id', 'date', 'amount', 'id', 'start_time', 'end_time'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id'], 'Client_Diagnoses': ['client_id', 'diagnosis_id'], 'Diagnoses': ['id', 'name']}. \n# the user question is: Retrieve the names and total amount billed for all therapists who have billed for sessions with a client who has a diagnosis of bipolar disorder and have been billed for at least four sessions during the past month, sorted in descending order by total amount billed:. \n#SQL query: SELECT t.name, SUM(b.amount) AS total_billed FROM Therapists t INNER JOIN Sessions s ON t.id = s.therapist_id INNER JOIN Billing b ON s.id = b.session_id INNER JOIN Session_Attendees sa ON s.id = sa.session_id INNER JOIN Clients c ON sa.client_id = c.id INNER JOIN Client_Diagnoses cd ON c.id = cd.client_id INNER JOIN Diagnoses d ON cd.diagnosis_id = d.id WHERE d.name = 'Bipolar Disorder' AND b.date >= date('now', '-1 month') GROUP BY t.id HAVING COUNT(DISTINCT s.id) >= 4 ORDER BY total_billed DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and life expectancy of the 5 countries with the highest life expectancy and a population greater than 10 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and life expectancy of the 5 countries with the highest life expectancy and a population greater than 10 million:",
    "output": "SELECT name, life_expectancy FROM Country WHERE population > 10000000 ORDER BY life_expectancy DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, life_expectancy FROM Country WHERE population > 10000000 ORDER BY life_expectancy DESC LIMIT 5",
    "prompt_token_number": 890,
    "response_token_number": 24
},
{
    "id": 33886,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'team_id', 'completed_by', 'skill_id', 'first_name', 'manager_id', 'last_name', 'job_title', 'office_location', 'role', 'years_of_experience', 'department_id', 'salary'], 'Tasks': ['assigned_to', 'deadline', 'project_id', 'task_id', 'priority_level', 'status', 'completed_by', 'created_at', 'completed_at', 'priority', 'created_by', 'due_date', 'user_id', 'assigned_team', 'team_id', 'started_at', 'assigned_skill', 'requested_by', 'assigned_at', 'assigned_by', 'completion_date', 'assignment_date', 'skill_name', 'task_status', 'department_name', 'task_assigned_date', 'task_completion_date'], 'User_Roles': ['user_id', 'role_id'], 'Roles': ['role_id', 'role_name']}. \n# the user question is: Find the user who has completed the most tasks assigned to them in the last 3 months and has the role of \"Team Lead\":. \n#SQL query: SELECT Users.username, COUNT(Tasks.task_id) AS completed_task_count FROM Users JOIN Tasks ON Users.user_id = Tasks.completed_by JOIN User_Roles ON Users.user_id = User_Roles.user_id JOIN Roles ON User_Roles.role_id = Roles.role_id WHERE Tasks.status = 'Completed' AND Tasks.assigned_to = Users.user_id AND Tasks.completed_at >= DATE('now', '-3 month') AND Roles.role_name = 'Team Lead' GROUP BY Users.user_id ORDER BY completed_task_count DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and unemployment rate of the 5 countries with the highest unemployment rate and a population greater than 20 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and unemployment rate of the 5 countries with the highest unemployment rate and a population greater than 20 million:",
    "output": "SELECT name, unemployment_rate FROM Country WHERE population > 20000000 ORDER BY unemployment_rate DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, unemployment_rate FROM Country WHERE population > 20000000 ORDER BY unemployment_rate DESC LIMIT 5;",
    "prompt_token_number": 657,
    "response_token_number": 23
},
{
    "id": 33887,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Episode': ['game_show_id', 'winner_id', 'episode_id', 'duration', 'network_id', 'air_date', 'language_id', 'time_slot', 'time_slot_id'], 'GameShow': ['game_show_id', 'title', 'genre_id', 'network_id', 'language_id', 'game_show_type_id', 'time_slot_id', 'start_date', 'host_id', 'production_company_id', 'end_date', 'renewed'], 'HostGameShow': ['game_show_id', 'host_id'], 'Host': ['host_id', 'gender', 'name', 'age'], 'Genre': ['name', 'genre_id'], 'Network': ['country', 'network_id', 'name'], 'Language': ['language_id'], 'TimeSlot': ['time_slot_id', 'name'], 'EpisodeRating': ['rating', 'episode_id']}. \n# the user question is: Find the names of hosts who have hosted game shows in all available countries and in more than one genre, and have aired episodes in multiple networks, languages, and time slots, and have hosted at least five game shows, and their average episode rating is higher than 4.5:. \n#SQL query: SELECT h.name FROM Host h JOIN HostGameShow hgs ON h.host_id = hgs.host_id JOIN GameShow gs ON hgs.game_show_id = gs.game_show_id JOIN Network n ON gs.network_id = n.network_id JOIN Genre g ON gs.genre_id = g.genre_id JOIN Episode e ON gs.game_show_id = e.game_show_id JOIN Language l ON e.language_id = l.language_id JOIN TimeSlot ts ON e.time_slot_id = ts.time_slot_id JOIN EpisodeRating er ON e.episode_id = er.episode_id GROUP BY h.name HAVING COUNT(DISTINCT n.country) = (SELECT COUNT(*) FROM Network) AND COUNT(DISTINCT g.genre_id) > 1 AND COUNT(DISTINCT n.network_id) > 1 AND COUNT(DISTINCT l.language_id) > 1 AND COUNT(DISTINCT ts.time_slot_id) > 1 AND COUNT(DISTINCT gs.game_show_id) >= 5 AND AVG(er.rating) > 4.5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population density of the 5 countries with the highest population density and a population greater than 1 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population density of the 5 countries with the highest population density and a population greater than 1 million:",
    "output": "SELECT name, population_density FROM Country WHERE population > 1000000 ORDER BY population_density DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population_density FROM Country WHERE population > 1000000 ORDER BY population_density DESC LIMIT 5;",
    "prompt_token_number": 774,
    "response_token_number": 23
},
{
    "id": 33888,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Patient': ['patient_id', 'last_name', 'first_name', 'date_of_birth'], 'Insurance': ['insurance_provider', 'patient_id', 'policy_number', 'insurance_id', 'insurance_provider_id', 'coverage_type_id'], 'Appointment': ['chiropractor_id', 'patient_id', 'appointment_date_time', 'appointment_id', 'insurance_id'], 'Chiropractor': ['first_name', 'last_name', 'chiropractor_id'], 'Prescriptions': ['prescription_name', 'appointment_id', 'prescription_category', 'patient_id', 'medication_id']}. \n# the user question is: Find the names of all chiropractors who have had appointments with patients who have an insurance policy number starting with '98' and have also prescribed an opioid:. \n#SQL query: SELECT DISTINCT c.first_name, c.last_name FROM Chiropractor c INNER JOIN Appointment a ON c.chiropractor_id = a.chiropractor_id INNER JOIN Patient p ON a.patient_id = p.patient_id INNER JOIN Insurance i ON p.patient_id = i.patient_id INNER JOIN Prescriptions pr ON a.appointment_id = pr.appointment_id WHERE i.policy_number LIKE '98%' AND pr.prescription_category = 'Opioids';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and homicide rate of the 5 countries with the highest homicide rate and a population greater than 5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and homicide rate of the 5 countries with the highest homicide rate and a population greater than 5 million:",
    "output": "SELECT name, homicide_rate FROM Country WHERE population > 5000000 ORDER BY homicide_rate DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, homicide_rate FROM Country WHERE population > 5000000 ORDER BY homicide_rate DESC LIMIT 5;",
    "prompt_token_number": 573,
    "response_token_number": 23
},
{
    "id": 33889,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'email', 'username', 'johnD'], 'Payments': ['payment_method', 'user_id', 'trip_id', 'amount', 'payment_id']}. \n# the user question is: Retrieve the usernames of users who have made payments using both credit card and PayPal, and the total number of payments made by each user. \n#SQL query: SELECT u.username, COUNT(p.payment_id) AS total_payments FROM Users u JOIN Payments p ON u.user_id = p.user_id WHERE p.payment_method IN ('Credit Card', 'PayPal') GROUP BY u.username HAVING COUNT(DISTINCT p.payment_method) = 2;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and GDP per capita of the 5 countries with the highest GDP per capita and a population greater than 10 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and GDP per capita of the 5 countries with the highest GDP per capita and a population greater than 10 million:",
    "output": "SELECT name, gdp_per_capita FROM Country WHERE population > 10000000 ORDER BY gdp_per_capita DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, gdp_per_capita FROM Country WHERE population > 10000000 ORDER BY gdp_per_capita DESC LIMIT 5;",
    "prompt_token_number": 458,
    "response_token_number": 29
},
{
    "id": 33890,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Suspects': ['suspect_name', 'case_id', 'suspect_description', 'suspect_id', 'suspect_dna', 'suspect_age'], 'Cases': ['case_status', 'case_id', 'case_description', 'case_name']}. \n# the user question is: List the case names and the corresponding suspect names for cases where the suspect is identified as a repeat offender:. \n#SQL query: SELECT c.case_name, s.suspect_name FROM Cases c JOIN Suspects s ON c.case_id = s.case_id WHERE s.suspect_description LIKE '%repeat offender%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and literacy rate of the 5 countries with the highest literacy rate and a population greater than 1 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and literacy rate of the 5 countries with the highest literacy rate and a population greater than 1 million:",
    "output": "SELECT name, literacy_rate FROM Country WHERE population > 1000000 ORDER BY literacy_rate DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, literacy_rate FROM Country WHERE population > 1000000 ORDER BY literacy_rate DESC LIMIT 5;",
    "prompt_token_number": 444,
    "response_token_number": 23
},
{
    "id": 33891,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Show': ['rating', 'year', 'title', 'show_id', 'genre_id', 'studio_id', 'release_year', 'country_id', 'network_id', 'director_id', 'air_year', 'release_date', 'genre', 'status', 'production_type', 'producer_id', 'start_year', 'end_year'], 'Episode': ['show_id', 'episode_id', 'crew_id', 'director_id', 'writer_id', 'runtime', 'title', 'season_id', 'duration', 'episode_number', 'release_year', 'air_date', 'rating', 'id', 'tv_show_id', 'name'], 'User_Rating': ['show_id', 'user_id', 'episode_id', 'rating', 'country_id', 'genre_id', 'season_id', 'season_number', 'imdb_rating', 'rotten_tomatoes_rating'], 'Crew': ['crew_id', 'name', 'job'], 'Show_Country': ['show_id', 'country_id']}. \n# the user question is: Find the crew members who have directed or written episodes in TV shows that have been released in at least four different countries and have an average rating above 8.5.. \n#SQL query: SELECT DISTINCT Crew.name FROM Crew JOIN Episode ON Crew.crew_id = Episode.director_id OR Crew.crew_id = Episode.writer_id JOIN Show ON Episode.show_id = Show.show_id JOIN Show_Country ON Show.show_id = Show_Country.show_id JOIN User_Rating ON Episode.show_id = User_Rating.show_id AND Episode.episode_id = User_Rating.episode_id WHERE ( SELECT AVG(User_Rating.rating) FROM User_Rating WHERE User_Rating.show_id = Show.show_id ) > 8.5 AND Episode.show_id IN ( SELECT DISTINCT Show.show_id FROM Show JOIN Show_Country ON Show.show_id = Show_Country.show_id GROUP BY Show.show_id HAVING COUNT(DISTINCT Show_Country.country_id) >= 4 );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded']} and \n# the user question: Find the name and average approval rating of the 5 political parties with the highest average approval rating:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and average approval rating of the 5 political parties with the highest average approval rating:",
    "output": "SELECT PoliticalParty.name, AVG(Politician.approval_rating) AS avg_approval_rating FROM PoliticalParty JOIN Politician ON PoliticalParty.id = Politician.party_id GROUP BY PoliticalParty.id ORDER BY avg_approval_rating DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "PoliticalParty": [
            "ideology",
            "id",
            "name",
            "political_party",
            "country_id",
            "number_of_seats",
            "number_of_members",
            "number_of_female_members",
            "total_spending",
            "total_revenue",
            "total_funding",
            "num_seats",
            "num_members",
            "date_founded"
        ]
    },
    "response_text": "SELECT PoliticalParty.name, AVG(Politician.approval_rating) AS average_approval_rating\nFROM PoliticalParty\nJOIN Politician ON PoliticalParty.id = Politician.party_id\nGROUP BY PoliticalParty.name\nORDER BY average_approval_rating DESC\nLIMIT 5;",
    "prompt_token_number": 673,
    "response_token_number": 54
},
{
    "id": 33892,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'director_id', 'duration', 'release_date', 'genre', 'genre_id', 'language_id'], 'Review': ['rating', 'film_id', 'review_id']}. \n# the user question is: \"Find the average rating of action films.\". \n#SQL query: SELECT AVG(Review.rating) AS average_rating FROM Film INNER JOIN Review ON Film.film_id = Review.film_id WHERE Film.genre = 'Action';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and GDP of the 5 countries with the highest GDP and a population greater than 50 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and GDP of the 5 countries with the highest GDP and a population greater than 50 million:",
    "output": "SELECT name, gdp FROM Country WHERE population > 50000000 ORDER BY gdp DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, gdp FROM Country WHERE population > 50000000 ORDER BY gdp DESC LIMIT 5;",
    "prompt_token_number": 417,
    "response_token_number": 23
},
{
    "id": 33894,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'celestial_bodies': ['radius', 'mass', 'name', 'type', 'number_of_moons', 'distance_from_sun', 'id', 'distance_from_earth', 'orbital_period', 'diameter', 'orbiting_body_id', 'average_surface_temperature', 'surface_temperature', 'perihelion_distance', 'period', 'semimajor_axis', 'redshift', 'velocity', 'luminosity', 'schwarzschild_radius', 'eccentricity', 'aphelion_distance', 'spin_period', 'semi_major_axis', 'surface_gravity', 'temperature', 'magnitude', 'accretion_disk_temperature', 'rotation_period', 'obliquity', 'pulse_period', 'peak_absolute_magnitude', 'albedo', 'apparent_magnitude', 'absolute_magnitude', 'spectral_type', 'discovery_year', 'spectral_class', 'distance_from_star', 'discovery_method_id', 'equilibrium_temperature', 'metallicity', 'age', 'effective_temperature', 'atmospheric_composition', 'inclination', 'parallax', 'rotation_velocity', 'axial_tilt', 'orbital_inclination', 'density', 'rotational_velocity', 'magnetic_field_strength', 'composition', 'rotational_period', 'spin', 'distance_from_galactic_center', 'binary_system', 'constellation', 'stellar_evolution_stage', 'star_cluster_type', 'galaxy', 'orbital_eccentricity', 'star_spectral_type', 'orbital_period_unit', 'diameter_unit', 'discovery_method', 'pulse_period_unit', 'distance_unit', 'radius_unit', 'avg_temperature', 'temperature_unit', 'aphelion_unit', 'perihelion_unit', 'event_horizon_unit', 'event_horizon_radius', 'luminosity_distance', 'orbit_type', 'equatorial_diameter', 'gravity_unit', 'escape_velocity', 'angle_unit', 'surface_area', 'density_unit', 'parent_body_id', 'atmospheric_pressure', 'luminosity_class', 'inner_habitable_zone', 'outer_habitable_zone', 'period_unit', 'classification', 'pressure_unit', 'surface_pressure', 'orbiting', 'distance', 'proper_motion', 'proper_motion_unit', 'mean_radius', 'mass_unit', 'temperature_range', 'Gas', 'Giant', 'brightness_temperature', 'parallax_unit', 'metallicity_unit', 'magnetic_field_unit', 'spin_parameter', 'orbiting_id', 'stellar_mass', 'stage', 'radial_velocity', 'host_star', 'accretion_rate', 'core_type'], 'observations': ['celestial_body_id', 'astronomer_id', 'observation_date', 'id', 'magnitude', 'apparent_magnitude', 'x_ray_luminosity', 'flux_density', 'metallicity', 'magnitude_f606w', 'xray_luminosity', 'magnitude_k', 'magnitude_v', 'magnitude_j', 'magnitude_irac1', 'flux_05_2kev'], 'observations_telescopes': ['telescope_id', 'observation_id'], 'telescopes': ['name', 'id']}. \n# the user question is: Retrieve the name and type of all celestial bodies that have a distance from Earth less than 1 billion kilometers and have been observed using the Hubble Space Telescope.. \n#SQL query: SELECT celestial_bodies.name, celestial_bodies.type FROM celestial_bodies INNER JOIN observations ON celestial_bodies.id = observations.celestial_body_id INNER JOIN observations_telescopes ON observations.id = observations_telescopes.observation_id INNER JOIN telescopes ON observations_telescopes.telescope_id = telescopes.id WHERE telescopes.name = 'Hubble Space Telescope' AND celestial_bodies.distance_from_earth < 1000000000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state']} and \n# the user question: Find the names of all the politicians in the database who were born in the same country they currently represent:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all the politicians in the database who were born in the same country they currently represent:",
    "output": "SELECT name FROM Politician WHERE birth_country_id = represented_country_id;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ]
    },
    "response_text": "SELECT name FROM Politician WHERE birth_country_id = represented_country_id;",
    "prompt_token_number": 987,
    "response_token_number": 14
},
{
    "id": 33895,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Volume': ['series_id', 'id', 'title', 'publisher_id', 'issue_count', 'volume_id', 'publication_date', 'publication_year', 'release_date', 'price', 'format'], 'Series': ['publisher_id', 'title', 'id', 'universe', 'start_date', 'main_protagonist_id', 'rating'], 'Review': ['rating', 'issue_id', 'id', 'user_id'], 'User': ['username', 'id'], 'User_Review': ['user_id', 'review_id', 'id']}. \n# the user question is: Find the names of all users who have given a rating of 4 or higher to at least one issue in the 'Sandman' series but have not given a rating of 3 or higher to any issue in the 'V for Vendetta' series.. \n#SQL query: SELECT DISTINCT User.username FROM User JOIN User_Review ur1 ON User.id = ur1.user_id JOIN Review r1 ON ur1.review_id = r1.id JOIN Issue i1 ON r1.issue_id = i1.id JOIN Volume v1 ON i1.volume_id = v1.id JOIN Series s1 ON v1.series_id = s1.id AND s1.title = 'Sandman' WHERE r1.rating >= 4 AND User.id NOT IN ( SELECT DISTINCT User.id FROM User JOIN User_Review ur2 ON User.id = ur2.user_id JOIN Review r2 ON ur2.review_id = r2.id JOIN Issue i2 ON r2.issue_id = i2.id JOIN Volume v2 ON i2.volume_id = v2.id JOIN Series s2 ON v2.series_id = s2.id AND s2.title = 'V for Vendetta' WHERE r2.rating >= 3 );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population density of the 5 countries with the highest population density and a population greater than 10 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and population density of the 5 countries with the highest population density and a population greater than 10 million:",
    "output": "SELECT name, population_density FROM Country WHERE population > 10000000 ORDER BY population_density DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, population_density FROM Country WHERE population > 10000000 ORDER BY population_density DESC LIMIT 5;",
    "prompt_token_number": 752,
    "response_token_number": 23
},
{
    "id": 33896,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Platforms': ['platform_id', 'game_id', 'online_players'], 'Platforms': ['platform_id', 'platform_name', 'platform_release_date', 'platform_manufacturer', 'platform_publisher', 'platform_release_year', 'manufacturer_id'], 'Game_Characters': ['character_id', 'game_id'], 'Characters': ['character_name', 'character_id', 'character_description']}. \n# the user question is: Find the names of all games that have a character with a name containing \"Link\" and a platform that was released after 2018.. \n#SQL query: SELECT Games.game_title FROM Games INNER JOIN Game_Characters ON Games.game_id = Game_Characters.game_id INNER JOIN Characters ON Game_Characters.character_id = Characters.character_id INNER JOIN Game_Platforms ON Games.game_id = Game_Platforms.game_id INNER JOIN Platforms ON Game_Platforms.platform_id = Platforms.platform_id WHERE Characters.character_name LIKE '%Link%' AND strftime('%Y', Platforms.platform_release_date) > '2018';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and unemployment rate of the 5 countries with the highest unemployment rate and a population greater than 1 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and unemployment rate of the 5 countries with the highest unemployment rate and a population greater than 1 million:",
    "output": "SELECT name, unemployment_rate FROM Country WHERE population > 1000000 ORDER BY unemployment_rate DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, unemployment_rate FROM Country WHERE population > 1000000 ORDER BY unemployment_rate DESC LIMIT 5;",
    "prompt_token_number": 554,
    "response_token_number": 23
},
{
    "id": 33897,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Participants': ['first_name', 'last_name', 'participant_id', 'gender', 'age', 'birth_year', 'date_of_birth', 'ag', 'age_group_id', 'parental_edu_id', 'language_group_id'], 'Participant_Tasks': ['task_id', 'participant_id', 'completion_date', 'score', 'completed'], 'Participant_Questionnaires': ['participant_id', 'questionnaire_id', 'participant_questionnaire_id', 'completion_date', 'response_text', 'score', 'task_id', 'completion_time']}. \n# the user question is: Retrieve the names and ages of all participants who have not completed any task, and have not completed any questionnaire:. \n#SQL query: SELECT Participants.first_name, Participants.last_name, Participants.age FROM Participants WHERE Participants.participant_id NOT IN ( SELECT DISTINCT participant_id FROM Participant_Tasks ) AND Participants.participant_id NOT IN ( SELECT DISTINCT participant_id FROM Participant_Questionnaires );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and birthdates of all the politicians in the database who have served as president of their country:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names and birthdates of all the politicians in the database who have served as president of their country:",
    "output": "SELECT name, birthdate FROM Politician WHERE id IN ( SELECT president_id FROM Country WHERE president_id IS NOT NULL );",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT Politician.name, Politician.birthdate FROM Politician WHERE Politician.id IN ( SELECT DISTINCT president_id FROM Country );",
    "prompt_token_number": 604,
    "response_token_number": 25
},
{
    "id": 33898,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {}. \n# the user question is: \"Get the projects and their respective budgets that have a budget higher than the average budget of all projects.\". \n#SQL query: SELECT `CSR Projects`.project_name, `CSR Projects`.budget FROM `CSR Projects` WHERE `CSR Projects`.budget > (SELECT AVG(budget) FROM `CSR Projects`);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and average years of education of the 5 countries with the highest average years of education and a population greater than 10 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and average years of education of the 5 countries with the highest average years of education and a population greater than 10 million:",
    "output": "SELECT name, AVG(years_of_education) FROM Country WHERE population > 10000000 GROUP BY name ORDER BY AVG(years_of_education) DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT `Country`.name, `Country`.years_of_education \nFROM `Country` \nWHERE `Country`.population > 10000000 \nORDER BY `Country`.years_of_education DESC \nLIMIT 5;",
    "prompt_token_number": 394,
    "response_token_number": 45
},
{
    "id": 33899,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'celestial_bodies': ['radius', 'mass', 'name', 'type', 'number_of_moons', 'distance_from_sun', 'id', 'distance_from_earth', 'orbital_period', 'diameter', 'orbiting_body_id', 'average_surface_temperature', 'surface_temperature', 'perihelion_distance', 'period', 'semimajor_axis', 'redshift', 'velocity', 'luminosity', 'schwarzschild_radius', 'eccentricity', 'aphelion_distance', 'spin_period', 'semi_major_axis', 'surface_gravity', 'temperature', 'magnitude', 'accretion_disk_temperature', 'rotation_period', 'obliquity', 'pulse_period', 'peak_absolute_magnitude', 'albedo', 'apparent_magnitude', 'absolute_magnitude', 'spectral_type', 'discovery_year', 'spectral_class', 'distance_from_star', 'discovery_method_id', 'equilibrium_temperature', 'metallicity', 'age', 'effective_temperature', 'atmospheric_composition', 'inclination', 'parallax', 'rotation_velocity', 'axial_tilt', 'orbital_inclination', 'density', 'rotational_velocity', 'magnetic_field_strength', 'composition', 'rotational_period', 'spin', 'distance_from_galactic_center', 'binary_system', 'constellation', 'stellar_evolution_stage', 'star_cluster_type', 'galaxy', 'orbital_eccentricity', 'star_spectral_type', 'orbital_period_unit', 'diameter_unit', 'discovery_method', 'pulse_period_unit', 'distance_unit', 'radius_unit', 'avg_temperature', 'temperature_unit', 'aphelion_unit', 'perihelion_unit', 'event_horizon_unit', 'event_horizon_radius', 'luminosity_distance', 'orbit_type', 'equatorial_diameter', 'gravity_unit', 'escape_velocity', 'angle_unit', 'surface_area', 'density_unit', 'parent_body_id', 'atmospheric_pressure', 'luminosity_class', 'inner_habitable_zone', 'outer_habitable_zone', 'period_unit', 'classification', 'pressure_unit', 'surface_pressure', 'orbiting', 'distance', 'proper_motion', 'proper_motion_unit', 'mean_radius', 'mass_unit', 'temperature_range', 'Gas', 'Giant', 'brightness_temperature', 'parallax_unit', 'metallicity_unit', 'magnetic_field_unit', 'spin_parameter', 'orbiting_id', 'stellar_mass', 'stage', 'radial_velocity', 'host_star', 'accretion_rate', 'core_type']}. \n# the user question is: Retrieve the name and temperature of all celestial bodies that have a temperature less than 50 Kelvin and were discovered after 2000.. \n#SQL query: SELECT name, temperature FROM celestial_bodies WHERE temperature < 50 AND discovery_year > 2000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and birthdates of all the politicians in the database who have served as prime minister of their country:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names and birthdates of all the politicians in the database who have served as prime minister of their country:",
    "output": "SELECT name, birthdate FROM Politician WHERE id IN ( SELECT prime_minister_id FROM Country WHERE prime_minister_id IS NOT NULL );",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT Politician.name, Politician.birthdate FROM Politician INNER JOIN Country ON Politician.id = Country.prime_minister_id;",
    "prompt_token_number": 1014,
    "response_token_number": 27
},
{
    "id": 33901,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Train_Route': ['Departure_Time', 'Departure_Station', 'Occupancy_Rate', 'Route_ID', 'Arrival_Station', 'Train_ID', 'Arrival_Time', 'Delay_Time']}. \n# the user question is: Find the average delay time for all trains that depart from Station B.. \n#SQL query: SELECT AVG(Train_Route.Delay_Time) FROM Train_Route WHERE Train_Route.Departure_Station = 'B';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and birthdates of all the politicians in the database who have served as chancellor of their country:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names and birthdates of all the politicians in the database who have served as chancellor of their country:",
    "output": "SELECT name, birthdate FROM Politician WHERE id IN ( SELECT chancellor_id FROM Country WHERE chancellor_id IS NOT NULL );",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT Politician.name, Politician.birthdate FROM Politician, Country WHERE Politician.id = Country.chancellor_id;",
    "prompt_token_number": 506,
    "response_token_number": 24
},
{
    "id": 33902,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['user_id', 'project_id', 'project_name', 'dataset_count', 'dataset_id', 'creation_year', 'created_at'], 'DataSets': ['dataset_description', 'dataset_id', 'dataset_name', 'project_id', 'user_id', 'source_id'], 'Variables': ['dataset_id', 'variable_name', 'variable_type', 'variable_id', 'variable_count'], 'Observations': ['dataset_id', 'observation_count', 'observation_id']}. \n# the user question is: Get the project names and the count of variables for projects that have datasets with more than 1000 observations:. \n#SQL query: SELECT Projects.project_name, COUNT(Variables.variable_id) AS variable_count FROM Projects JOIN DataSets ON Projects.project_id = DataSets.project_id JOIN Observations ON DataSets.dataset_id = Observations.dataset_id JOIN Variables ON DataSets.dataset_id = Variables.dataset_id WHERE Observations.observation_count > 1000 GROUP BY Projects.project_name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and HDI (Human Development Index) of the 5 countries with the highest HDI and a population greater than 1 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and HDI (Human Development Index) of the 5 countries with the highest HDI and a population greater than 1 million:",
    "output": "SELECT name, HDI FROM Country WHERE population > 1000000 ORDER BY HDI DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, hdi FROM Country WHERE population > 1000000 ORDER BY hdi DESC LIMIT 5;",
    "prompt_token_number": 526,
    "response_token_number": 23
},
{
    "id": 33903,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Client': ['client_id', 'name', 'email', 'phone_number', 'industry_id', 'location_id', 'industry', 'budget', 'first_name', 'last_name', 'state', 'city', 'company_name', 'annual_revenue'], 'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months'], 'Employee': ['employee_id', 'first_name', 'last_name', 'email', 'phone_number', 'title', 'department_id', 'job_id', 'salary', 'address_id', 'Email', 'Hire_Date', 'Employee_Name', 'Department_ID'], 'Task': ['task_id', 'description', 'deadline', 'employee_id', 'campaign_id', 'completed', 'priority', 'completion_date', 'completed_date']}. \n# the user question is: Retrieve the names and email addresses of all employees who have completed tasks for campaigns sponsored by clients in the Healthcare industry and whose start dates are within the next two weeks:. \n#SQL query: SELECT DISTINCT Employee.first_name, Employee.last_name, Employee.email FROM Employee INNER JOIN Task ON Employee.employee_id = Task.employee_id INNER JOIN Campaign ON Task.campaign_id = Campaign.campaign_id INNER JOIN Client ON Campaign.client_id = Client.client_id WHERE Client.industry = 'Healthcare' AND Campaign.start_date >= date('now') AND Campaign.start_date <= date('now', '+14 days');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: List the names and birthdates of all the politicians in the database who have served as president of their country:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names and birthdates of all the politicians in the database who have served as president of their country:",
    "output": "SELECT name, birthdate FROM Politician WHERE id IN ( SELECT president_id FROM Country WHERE president_id IS NOT NULL );",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT Politician.name, Politician.birthdate FROM Politician INNER JOIN Country ON Politician.id = Country.president_id;",
    "prompt_token_number": 766,
    "response_token_number": 25
},
{
    "id": 33904,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'books': ['genre', 'title', 'publication_year', 'author', 'publisher', 'author_country', 'price', 'isbn', 'category', 'pub_date', 'author_id', 'rating', 'name', 'publisher_id', 'year_published', 'pages', 'author_name', 'id', 'num_ratings', 'category_id', 'book_published_date', 'book_price'], 'reviews': ['rating', 'book_isbn', 'customer_id', 'review_id', 'product_id'], 'authors': ['name', 'id', 'email', 'author_name', 'author_id']}. \n# the user question is: Retrieve the names of all authors whose books have an average rating of at least 4.5 stars.. \n#SQL query: SELECT a.name FROM authors a JOIN books b ON a.id = b.author_id JOIN reviews r ON b.isbn = r.book_isbn GROUP BY a.id HAVING AVG(r.rating) >= 4.5\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and literacy rate of the 5 countries with the highest literacy rate and a population greater than 10 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and literacy rate of the 5 countries with the highest literacy rate and a population greater than 10 million:",
    "output": "SELECT name, literacy_rate FROM Country WHERE population > 10000000 ORDER BY literacy_rate DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, literacy_rate FROM Country WHERE population > 10000000 ORDER BY literacy_rate DESC LIMIT 5",
    "prompt_token_number": 522,
    "response_token_number": 22
},
{
    "id": 33907,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id'], 'Client_Diagnoses': ['client_id', 'diagnosis_id'], 'Diagnoses': ['id', 'name']}. \n# the user question is: Retrieve the names of all therapists who have conducted sessions with clients who have a diagnosis of depression:. \n#SQL query: SELECT DISTINCT t.name FROM Therapists t INNER JOIN Sessions s ON t.id = s.therapist_id INNER JOIN Session_Attendees sa ON s.id = sa.session_id INNER JOIN Clients c ON sa.client_id = c.id INNER JOIN Client_Diagnoses cd ON c.id = cd.client_id INNER JOIN Diagnoses d ON cd.diagnosis_id = d.id WHERE d.name = 'Depression'\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and GDP per capita of the 5 countries with the highest GDP per capita and a population greater than 5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names and GDP per capita of the 5 countries with the highest GDP per capita and a population greater than 5 million:",
    "output": "SELECT name, GDP_per_capita FROM Country WHERE population > 5000000 ORDER BY GDP_per_capita DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, gdp_per_capita FROM Country WHERE population > 5000000 ORDER BY gdp_per_capita DESC LIMIT 5",
    "prompt_token_number": 783,
    "response_token_number": 28
},
{
    "id": 33908,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'plants': ['name', 'id', 'category_id', 'updated_at', 'created_at', 'description', 'min_temp', 'max_temp', 'water_requirement', 'light_requirement', 'watering_schedule', 'width', 'height', 'flowering', 'min_temp_tolerance', 'max_temp_tolerance', 'category', 'spacing_requirement', 'bloomed', 'water_usage', 'last_watered', 'sun_exposure', 'price', 'plant_date', 'harvest_date', 'bed_id', 'suitable_exposure', 'Rosemary', 'is_edible', 'species', 'plant_name', 'soil_type', 'bloom_time', 'max_height', 'flowering_season', 'plant_type', 'sunlight', 'garden_id', 'soil_ph'], 'garden_plants': ['garden_id', 'plant_id', 'variety_id', 'id', 'updated_at', 'quantity', 'created_at', 'description', 'name', 'plant_variety_id', 'planted_on', 'plant_density', 'garden_bed_id', 'last_watered'], 'gardens': ['location', 'description', 'created_at', 'name', 'id', 'owner_id', 'updated_at', 'size', 'user_id', 'soil_type'], 'garden_beds': ['id', 'garden_id', 'updated_at', 'name', 'size_y', 'created_at', 'soil_type', 'size_x', 'soil_ph', 'width', 'length', 'area']}. \n# the user question is: Find the total amount of water required for all plants in a garden with ID 3.. \n#SQL query: SELECT SUM(plants.water_requirement) FROM plants INNER JOIN garden_plants ON plants.id = garden_plants.plant_id INNER JOIN garden_beds ON garden_plants.garden_bed_id = garden_beds.id INNER JOIN gardens ON garden_beds.garden_id = gardens.id WHERE gardens.id = 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and unemployment rate of the 5 countries with the highest unemployment rate and a population greater than 2 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and unemployment rate of the 5 countries with the highest unemployment rate and a population greater than 2 million:",
    "output": "SELECT name, unemployment_rate FROM Country WHERE population > 2000000 ORDER BY unemployment_rate DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, unemployment_rate FROM Country WHERE population > 2000000 ORDER BY unemployment_rate DESC LIMIT 5;",
    "prompt_token_number": 742,
    "response_token_number": 23
},
{
    "id": 33909,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Sessions': ['psychologist_id', 'patient_id', 'date', 'location', 'therapist', 'therapist_id', 'session_date', 'session_id', 'duration_minutes', 'missed', 'remote_session'], 'Patients': ['name', 'patient_id', 'birthdate', 'case_id', 'age', 'date_of_birth', 'last_name', 'first_name'], 'Diagnosis': ['suspect_id', 'patient_id', 'disorder', 'disorder_subtype', 'recommendation', 'disorder_id', 'criminal_id'], 'Therapists': ['last_name', 'therapist_id', 'first_name', 'count', 'experience_years', 'license_number'], 'Specializations': ['specialization_name', 'therapist_id']}. \n# the user question is: List all therapists who have treated patients with post-traumatic stress disorder (PTSD) and have a specialization in eye movement desensitization and reprocessing (EMDR) therapy.. \n#SQL query: SELECT DISTINCT t.first_name, t.last_name FROM Therapists t INNER JOIN Sessions s ON t.therapist_id = s.therapist_id INNER JOIN Patients p ON s.patient_id = p.patient_id INNER JOIN Diagnosis d ON p.patient_id = d.patient_id INNER JOIN Specializations sp ON t.therapist_id = sp.therapist_id WHERE d.disorder LIKE '%post-traumatic stress disorder%' AND sp.specialization_name LIKE '%eye movement desensitization%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: List the names and birthdates of all the politicians in the database who have served as prime minister of their country:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names and birthdates of all the politicians in the database who have served as prime minister of their country:",
    "output": "SELECT name, birthdate FROM Politician WHERE id IN ( SELECT prime_minister_id FROM Country WHERE prime_minister_id IS NOT NULL );",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT p.name, p.birthdate FROM Politician p INNER JOIN Country c ON p.id = c.prime_minister_id;",
    "prompt_token_number": 716,
    "response_token_number": 26
},
{
    "id": 33910,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Actor': ['last_name', 'actor_id', 'first_name'], 'Film_Actor': ['film_id', 'actor_id', 'rating'], 'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue'], 'Rating': ['user_id', 'film_id', 'score', 'rating', 'rating_id', 'genre_id']}. \n# the user question is: Find the actors who have worked in at least 3 films with a box office earning over 500 million and have an average rating of 7.0 or higher across all the films they have worked in:. \n#SQL query: SELECT Actor.first_name, Actor.last_name FROM Actor INNER JOIN Film_Actor ON Actor.actor_id = Film_Actor.actor_id INNER JOIN Film ON Film_Actor.film_id = Film.film_id AND Film.box_office > 500000000 INNER JOIN Rating ON Film.film_id = Rating.film_id GROUP BY Actor.actor_id HAVING COUNT(DISTINCT Film.film_id) >= 3 AND AVG(Rating.score) >= 7.0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and murder rates per 100,000 people of the 5 countries with the highest murder rates and a population greater than 1 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names and murder rates per 100,000 people of the 5 countries with the highest murder rates and a population greater than 1 million:",
    "output": "SELECT name, murder_rate_per_100k FROM Country WHERE population > 1000000 ORDER BY murder_rate_per_100k DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT Country.name, Country.murder_rate_per_100k FROM Country WHERE Country.population > 1000000 ORDER BY Country.murder_rate_per_100k DESC LIMIT 5;",
    "prompt_token_number": 601,
    "response_token_number": 39
},
{
    "id": 33911,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Order': ['order_id', 'customer_id', 'order_date', 'status', 'store_id', 'date', 'total_amount', 'total_cost', 'total_price'], 'Order_Item': ['order_id', 'book_id', 'quantity', 'price', 'store_id', 'order_date', 'customer_id', 'unit_price', 'inventory_id', 'date', 'order_item_date']}. \n# the user question is: Find the total revenue for each month in the current year.. \n#SQL query: SELECT strftime('%Y-%m', Order.order_date) AS month, SUM(Order_Item.price * Order_Item.quantity) AS total_revenue FROM Order JOIN Order_Item ON Order.order_id = Order_Item.order_id WHERE strftime('%Y', Order.order_date) = strftime('%Y', 'now') GROUP BY month;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and percentage of population living in poverty of the 5 countries with the highest percentage of population living in poverty and a population greater than 5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and percentage of population living in poverty of the 5 countries with the highest percentage of population living in poverty and a population greater than 5 million:",
    "output": "SELECT name, percent_poverty FROM Country WHERE population > 5000000 ORDER BY percent_poverty DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, percent_poverty \nFROM Country \nWHERE population > 5000000 \nORDER BY percent_poverty DESC \nLIMIT 5;",
    "prompt_token_number": 498,
    "response_token_number": 29
},
{
    "id": 33912,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Book': ['series_id', 'publication_year', 'title', 'id', 'author_id', 'publisher_id', 'published_year', 'word_count', 'publication_date', 'value', 'pages', 'year', 'language_id', 'publish_date', 'price', 'genre_id'], 'Character': ['id', 'name', 'location_id', 'description', 'occupation', 'role', 'gender'], 'Book_Character': ['book_id', 'character_id'], 'Location': ['id', 'name', 'description', 'type', 'city', 'population', 'official_language', 'country'], 'Book_Location': ['book_id', 'location_id']}. \n# the user question is: Find all books that have a location with a name containing the word \"submarine\" and have a character who is a naval officer.. \n#SQL query: SELECT Book.title FROM Book INNER JOIN Book_Location ON Book.id = Book_Location.book_id INNER JOIN Location ON Book_Location.location_id = Location.id AND Location.name LIKE '%submarine%' INNER JOIN Book_Character ON Book.id = Book_Character.book_id INNER JOIN Character ON Book_Character.character_id = Character.id AND Character.occupation = 'Naval officer';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and HDI (Human Development Index) values of the 5 countries with the highest HDI and a population greater than 10 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names and HDI (Human Development Index) values of the 5 countries with the highest HDI and a population greater than 10 million:",
    "output": "SELECT name, HDI FROM Country WHERE population > 10000000 ORDER BY HDI DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT Country.name, Country.hdi FROM Country WHERE Country.population > 10000000 ORDER BY Country.hdi DESC LIMIT 5;",
    "prompt_token_number": 573,
    "response_token_number": 27
},
{
    "id": 33913,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Client': ['client_id', 'first_name', 'last_name', 'email', 'phone_number', 'date_of_birth', 'gender', 'address', 'age', 'weight', 'partner_id', 'zip_code', 'name', 'startingWeight', 'phone', 'clientId'], 'Trainer': ['trainer_id', 'first_name', 'last_name', 'email', 'phone_number', 'date_of_birth', 'gender', 'address', 'end_time', 'start_time'], 'Session': ['session_id', 'trainer_id', 'client_id', 'start_time', 'end_time', 'location', 'notes', 'status', 'rating', 'exercise_plan_id', 'sessionDate', 'clientId', 'duration', 'personalTrainerId', 'cost'], 'Assessment': ['assessment_id', 'trainer_id', 'client_id', 'date', 'weight', 'body_fat_percentage', 'lean_body_mass', 'waist_circumference', 'hip_circumference', 'chest_circumference', 'session_id', 'heart_rate'], 'Meal': ['meal_id', 'name', 'description', 'protein_content', 'calories', 'cuisine_type', 'fat_content', 'fiber_content', 'sugar_content', 'carb_content', 'sodium_content', 'carbohydrate_content'], 'Nutrition_Plan': ['end_date', 'nutrition_plan_id', 'client_id'], 'Meal_Plan': ['nutrition_plan_id', 'meal_id', 'day_of_week', 'time_of_day', 'meal_plan_id', 'client_id', 'plan_id', 'daily_calorie_goal']}. \n# the user question is: Find the trainers who have conducted sessions with clients who have an active nutrition plan that includes a meal with less than 10 grams of carbs and have not had an assessment in the last 2 months.. \n#SQL query: SELECT DISTINCT Trainer.first_name, Trainer.last_name FROM Trainer JOIN Session ON Trainer.trainer_id = Session.trainer_id JOIN Client ON Session.client_id = Client.client_id JOIN Nutrition_Plan ON Client.client_id = Nutrition_Plan.client_id JOIN Meal_Plan ON Nutrition_Plan.nutrition_plan_id = Meal_Plan.nutrition_plan_id JOIN Meal ON Meal_Plan.meal_id = Meal.meal_id LEFT JOIN Assessment ON Client.client_id = Assessment.client_id WHERE Meal.carb_content < 10 AND Nutrition_Plan.end_date >= DATE('now') AND (Assessment.date < DATE('now', '-2 months') OR Assessment.date IS NULL)\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: List the names and total military expenditure of the 5 countries with the highest military expenditure and a population greater than 50 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names and total military expenditure of the 5 countries with the highest military expenditure and a population greater than 50 million:",
    "output": "SELECT name, total_military_expenditure FROM Country WHERE population > 50000000 ORDER BY total_military_expenditure DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, total_military_expenditure FROM Country WHERE population > 50000000 ORDER BY total_military_expenditure DESC LIMIT 5",
    "prompt_token_number": 848,
    "response_token_number": 30
},
{
    "id": 33914,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Employees': ['first_name', 'last_name', 'employee_id', 'department_id', 'job_title', 'hire_date', 'salary', 'department', 'birth_date', 'team', 'manager_id', 'email_address', 'phone_number', 'compliance_training_due_date', 'salary_amount', 'job_id', 'address', 'city', 'state', 'email', 'supervisor_id', 'num_projects', 'hourly_rate']}. \n# the user question is: List the names of employees and their managers' names.. \n#SQL query: SELECT e.first_name || ' ' || e.last_name AS employee_name, m.first_name || ' ' || m.last_name AS manager_name FROM Employees e LEFT JOIN Employees m ON e.manager_id = m.employee_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: List the names and GDP per capita of the 5 countries with the highest GDP per capita and a population greater than 5 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names and GDP per capita of the 5 countries with the highest GDP per capita and a population greater than 5 million:",
    "output": "SELECT name, GDP_per_capita FROM Country WHERE population > 5000000 ORDER BY GDP_per_capita DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, gdp_per_capita FROM Country WHERE population > 5000000 ORDER BY gdp_per_capita DESC LIMIT 5;",
    "prompt_token_number": 483,
    "response_token_number": 29
},
{
    "id": 33915,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'museum': ['city', 'name', 'country', 'museum_id', 'established_date'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender'], 'collector': ['first_name', 'collector_id', 'last_name', 'email', 'country', 'state', 'country_of_origin'], 'artwork_acquisition': ['artwork_id', 'location_id', 'acquisition_type', 'acquisition_id', 'acquisition_date', 'collector_id', 'date_acquired'], 'artwork_style': ['style_id', 'artwork_id'], 'style': ['name', 'style_id']}. \n# the user question is: Find the names of all collectors who have acquired artwork created by \"Impressionism\" artists from museums located in New York.. \n#SQL query: SELECT DISTINCT c.first_name, c.last_name FROM collector AS c INNER JOIN artwork_acquisition AS aa ON c.collector_id = aa.collector_id INNER JOIN artwork_location AS al ON aa.artwork_id = al.artwork_id INNER JOIN museum AS m ON al.museum_id = m.museum_id INNER JOIN artwork AS a ON al.artwork_id = a.artwork_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id INNER JOIN artwork_style AS ast ON a.artwork_id = ast.artwork_id INNER JOIN style AS st ON ast.style_id = st.style_id WHERE st.name = 'Impressionism' AND m.city = 'New York';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and number of confirmed COVID-19 cases per million people of the 5 countries with the highest number of confirmed cases and a population greater than 20 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and number of confirmed COVID-19 cases per million people of the 5 countries with the highest number of confirmed cases and a population greater than 20 million:",
    "output": "SELECT name, confirmed_cases_per_million FROM Country WHERE population > 20000000 ORDER BY confirmed_cases_per_million DESC LIMIT 5;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, confirmed_cases_per_million FROM Country WHERE population > 20000000 ORDER BY confirmed_cases_per_million DESC LIMIT 5;",
    "prompt_token_number": 763,
    "response_token_number": 29
},
{
    "id": 33918,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Enrollments': ['student_id', 'course_id', 'enrollment_id', 'class_id', 'semester', 'enrollment_date'], 'Courses': ['course_name', 'course_id', 'teacher_id', 'department_id', 'subject_id', 'level', 'type', 'program_id'], 'Grades': ['grade', 'enrollment_id']}. \n# the user question is: \"Find the highest grade achieved in each course.\". \n#SQL query: SELECT Courses.course_name, MAX(Grades.grade) AS highest_grade FROM Courses INNER JOIN Enrollments ON Courses.course_id = Enrollments.course_id INNER JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id GROUP BY Courses.course_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: List the names and GDP growth rates of all the countries in the database that had a negative GDP growth rate in the last year:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names and GDP growth rates of all the countries in the database that had a negative GDP growth rate in the last year:",
    "output": "SELECT name, GDP_growth_rate FROM Country WHERE GDP_growth_rate < 0;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, GDP_growth_rate FROM Country WHERE year = (SELECT MAX(year) FROM Country) AND GDP_growth_rate < 0;",
    "prompt_token_number": 471,
    "response_token_number": 27
},
{
    "id": 33919,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Species': ['species_id', 'name', 'common_name', 'classification_id', 'genus', 'family_id', 'scientific_name', 'class_id', 'taxonomy', 'category', 'conservation_status', 'population_trend', 'habitat', 'migration_pattern', 'min_depth_range', 'max_depth_range', 'body_size', 'body_temperature_range', 'migratory_behavior', 'species_name', 'discovery_year', 'class_name', 'is_venomous', 'order_name'], 'FisheryData': ['fishery_id', 'species_id', 'fishery_name', 'catch_date', 'catch_weight', 'fishing_method', 'gear_type', 'fishing_days', 'average_length', 'catch_number', 'fish_length', 'fish_weight', 'catch_length', 'location_id', 'catch_id', 'vessel_id', 'net_mesh_size', 'method_id']}. \n# the user question is: Retrieve the name and average catch weight for all fish species caught using the \"Trap Fishing\" fishing method:. \n#SQL query: SELECT Species.name, AVG(FisheryData.catch_weight) AS average_catch_weight FROM Species INNER JOIN FisheryData ON Species.species_id = FisheryData.species_id WHERE FisheryData.fishing_method = 'Trap Fishing' GROUP BY Species.species_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and total number of confirmed COVID-19 deaths of all the countries in the database that have a population greater than 100 million:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names and total number of confirmed COVID-19 deaths of all the countries in the database that have a population greater than 100 million:",
    "output": "SELECT name, total_deaths FROM Country WHERE population > 100000000;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT Country.name, Country.total_deaths FROM Country WHERE Country.population > 100000000;",
    "prompt_token_number": 600,
    "response_token_number": 19
},
{
    "id": 33922,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Series': ['SeriesID', 'SeriesTitle', 'PublisherID', 'AverageCoverPrice', 'AverageIssueRating', 'SeriesName'], 'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate'], 'Genres': ['GenreID', 'GenreName'], 'IssueGenres': ['IssueGenreID', 'IssueID', 'GenreID', 'SeriesID'], 'Ratings': ['RatingID', 'RatingName'], 'IssueRatings': ['IssueRatingID', 'IssueID', 'RatingID', 'Rating', 'CustomerID']}. \n# the user question is: Find all series that have published issues with a cover price greater than $12.00, a rating of 'Mature', and a horror or thriller genre:. \n#SQL query: SELECT DISTINCT Series.SeriesTitle FROM Series JOIN Issues ON Series.SeriesID = Issues.SeriesID JOIN IssueGenres ON Issues.IssueID = IssueGenres.IssueID JOIN Genres ON IssueGenres.GenreID = Genres.GenreID JOIN IssueRatings ON Issues.IssueID = IssueRatings.IssueID JOIN Ratings ON IssueRatings.RatingID = Ratings.RatingID WHERE Issues.CoverPrice > 12.00 AND (Genres.GenreName = 'Horror' OR Genres.GenreName = 'Thriller') AND Ratings.RatingName = 'Mature';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Candidate': ['name', 'total_votes', 'id', 'party_id', 'expenses', 'election_id', 'is_winner', 'election_year'], 'ElectionResult': ['candidate_id', 'total_votes', 'votes_received', 'political_party_id', 'total_spending', 'election_id', 'votes', 'year', 'num_votes', 'id', 'position', 'percent_vote', 'party_id', 'is_winner']} and \n# the user question: List the names and total number of votes of all the candidates in the database who won the elections with a majority vote:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names and total number of votes of all the candidates in the database who won the elections with a majority vote:",
    "output": "SELECT name, total_votes FROM Candidate WHERE id IN ( SELECT candidate_id FROM ElectionResult WHERE CAST(votes_received AS FLOAT) / total_votes > 0.5 );",
    "schema": "political_science",
    "processed_schema_content": {
        "Candidate": [
            "name",
            "total_votes",
            "id",
            "party_id",
            "expenses",
            "election_id",
            "is_winner",
            "election_year"
        ],
        "ElectionResult": [
            "candidate_id",
            "total_votes",
            "votes_received",
            "political_party_id",
            "total_spending",
            "election_id",
            "votes",
            "year",
            "num_votes",
            "id",
            "position",
            "percent_vote",
            "party_id",
            "is_winner"
        ]
    },
    "response_text": "SELECT Candidate.name, ElectionResult.total_votes FROM Candidate JOIN ElectionResult ON Candidate.id = ElectionResult.candidate_id WHERE Candidate.is_winner = 1 AND ElectionResult.votes_received > ElectionResult.total_votes/2;",
    "prompt_token_number": 551,
    "response_token_number": 43
},
{
    "id": 33923,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Match': ['team1_id', 'match_id', 'team2_id', 'venue_id', 'date', 'venue', 'winning_team_id', 'tournament_id', 'attendance', 'team', 'winning_team'], 'Referee': ['referee_name', 'referee_id'], 'Referee_Assignment': ['match_id', 'referee_id'], 'Venue': ['venue_name', 'venue_id', 'country', 'city'], 'Tournament': ['tournament_id', 'country', 'tournament_name', 'start_date', 'venue_id']}. \n# the user question is: Find the referees who have officiated matches in tournaments held in at least 19 different cities and 19 different years. \n#SQL query: SELECT Referee.referee_name FROM Referee JOIN Referee_Assignment ON Referee.referee_id = Referee_Assignment.referee_id JOIN Match ON Referee_Assignment.match_id = Match.match_id JOIN Tournament ON Match.tournament_id = Tournament.tournament_id JOIN Venue ON Tournament.venue_id = Venue.venue_id GROUP BY Referee.referee_name HAVING COUNT(DISTINCT Venue.city) >= 19 AND COUNT(DISTINCT strftime('%Y', Tournament.start_date)) >= 19;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id'], 'ElectionResult': ['candidate_id', 'total_votes', 'votes_received', 'political_party_id', 'total_spending', 'election_id', 'votes', 'year', 'num_votes', 'id', 'position', 'percent_vote', 'party_id', 'is_winner']} and \n# the user question: List the names and total spending of all the political parties in the database that spent more than $5 million in the last election:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names and total spending of all the political parties in the database that spent more than $5 million in the last election:",
    "output": "SELECT name, total_spending FROM PoliticalParty WHERE id IN ( SELECT political_party_id FROM ElectionResult WHERE election_id = ( SELECT id FROM Election ORDER BY date DESC LIMIT 1 ) AND total_spending > 5000000 );",
    "schema": "political_science",
    "processed_schema_content": {
        "PoliticalParty": [
            "ideology",
            "id",
            "name",
            "political_party",
            "country_id",
            "number_of_seats",
            "number_of_members",
            "number_of_female_members",
            "total_spending",
            "total_revenue",
            "total_funding",
            "num_seats",
            "num_members",
            "date_founded"
        ],
        "Election": [
            "country_id",
            "id",
            "winner_party_id",
            "region",
            "date",
            "party_id",
            "year",
            "constituency_id"
        ],
        "ElectionResult": [
            "candidate_id",
            "total_votes",
            "votes_received",
            "political_party_id",
            "total_spending",
            "election_id",
            "votes",
            "year",
            "num_votes",
            "id",
            "position",
            "percent_vote",
            "party_id",
            "is_winner"
        ]
    },
    "response_text": "SELECT PoliticalParty.name, PoliticalParty.total_spending\nFROM PoliticalParty\nJOIN ElectionResult\nON PoliticalParty.id = ElectionResult.political_party_id \nWHERE ElectionResult.year = (SELECT MAX(year) FROM ElectionResult)\nAND PoliticalParty.total_spending > 5000000;",
    "prompt_token_number": 528,
    "response_token_number": 57
},
{
    "id": 33938,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Patients': ['medical_history', 'patient_id', 'first_name', 'last_name', 'age_group', 'gender', 'Age', 'Contact_Info', 'Name', 'Diagnosis', 'Discharge_Date', 'Admission_Date', 'Address', 'Family_History', 'Patient_ID', 'Doctor_ID', 'Doctor_I', 'AdmissionDate', 'Therapy', 'date_of_birth', 'name'], 'Medications': ['medication_name', 'patient_id', 'start_date', 'end_date', 'medical_record_id', 'admission_id', 'dosage', 'quantity', 'frequency', 'duration', 'medication_id', 'drug_class', 'medication_type', 'dosage_amount', 'TimeToAdminister']}. \n# the user question is: Find the patients who have been prescribed a medication with a frequency of four times a day and a dosage less than 5mg.. \n#SQL query: SELECT DISTINCT Patients.patient_id, Patients.first_name, Patients.last_name, Medications.medication_name, Medications.frequency, Medications.dosage FROM Patients INNER JOIN Medications ON Patients.patient_id = Medications.patient_id WHERE Medications.frequency = 'four times a day' AND Medications.dosage < 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and average life expectancies of all the countries in the database for the last 10 years:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names and average life expectancies of all the countries in the database for the last 10 years:",
    "output": "SELECT name, AVG(life_expectancy) AS avg_life_expectancy FROM ( SELECT name, life_expectancy FROM Country AS c1 WHERE year >= (SELECT MAX(year) - 9 FROM Country) ORDER BY year DESC ) GROUP BY name;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT Country.name, AVG(Country.life_expectancy) \nFROM Country \nWHERE Country.year >= (SELECT MAX(Country.year) - 10 FROM Country) \nGROUP BY Country.name;",
    "prompt_token_number": 579,
    "response_token_number": 38
},
{
    "id": 33941,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue'], 'Watchlist': ['date_added', 'user_id', 'film_id', 'timestamp'], 'Rating': ['user_id', 'film_id', 'score', 'rating', 'rating_id', 'genre_id']}. \n# the user question is: Find the films that have been watched by at least 3 users and have an average rating of 8.5 or higher:. \n#SQL query: SELECT Film.title, AVG(Rating.score) AS avg_rating, COUNT(DISTINCT Watchlist.user_id) AS user_count FROM Film INNER JOIN Rating ON Film.film_id = Rating.film_id INNER JOIN Watchlist ON Film.film_id = Watchlist.film_id GROUP BY Film.film_id HAVING COUNT(DISTINCT Watchlist.user_id) >= 3 AND AVG(Rating.score) >= 8.5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: List the names and GDPs of all the countries in the database that have a GDP per capita above $50,000:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names and GDPs of all the countries in the database that have a GDP per capita above $50,000:",
    "output": "SELECT name, gdp FROM Country WHERE gdp / population > 50000;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT Country.name, Country.gdp FROM Country WHERE Country.gdp_per_capita > 50000;",
    "prompt_token_number": 561,
    "response_token_number": 21
},
{
    "id": 33943,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Orders': ['order_date', 'store_id', 'total_amount', 'order_id', 'customer_id', 'employee_id'], 'Employees': ['employee_id', 'position', 'name', 'email', 'phone']}. \n# the user question is: \"Retrieve the names and total sales revenue of employees for the month of May 2023.\". \n#SQL query: SELECT Employees.name, SUM(Orders.total_amount) AS total_sales_revenue FROM Employees INNER JOIN Orders ON Employees.employee_id = Orders.employee_id WHERE strftime('%Y-%m', Orders.order_date) = '2023-05' GROUP BY Employees.employee_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and average temperatures of all the countries in the database for the last 5 years:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names and average temperatures of all the countries in the database for the last 5 years:",
    "output": "SELECT name, AVG(temperature) AS avg_temperature FROM ( SELECT name, temperature FROM Country AS c1 WHERE year >= (SELECT MAX(year) - 4 FROM Country) ORDER BY year DESC ) GROUP BY name;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT name, AVG(temperature) AS average_temperature FROM Country WHERE year BETWEEN (SELECT MAX(year) - 5 FROM Country) AND (SELECT MAX(year) FROM Country) GROUP BY name;",
    "prompt_token_number": 445,
    "response_token_number": 39
},
{
    "id": 33944,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Films': ['release_date', 'director_id', 'genre_id', 'title', 'film_id', 'duration'], 'Genres': ['name', 'genre_id'], 'Directors': ['name', 'director_id'], 'Ratings': ['user_id', 'rating_value', 'film_id', 'review_id']}. \n# the user question is: Retrieve the film titles and average ratings for comedy films released in the last 3 years, directed by either Taika Waititi or Richard Linklater, and have an average rating above 4.0:. \n#SQL query: SELECT Films.title, AVG(Ratings.rating_value) AS average_rating FROM Films JOIN Directors ON Films.director_id = Directors.director_id JOIN Ratings ON Films.film_id = Ratings.film_id WHERE Films.genre_id = ( SELECT genre_id FROM Genres WHERE name = 'Comedy' ) AND Films.release_date >= DATE('now', '-3 years') AND (Directors.name = 'Taika Waititi' OR Directors.name = 'Richard Linklater') GROUP BY Films.film_id HAVING AVG(Ratings.rating_value) > 4.0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and current population of all the countries in the database that have a land area of more than 1 million square kilometers:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names and current population of all the countries in the database that have a land area of more than 1 million square kilometers:",
    "output": "SELECT name, population FROM Country WHERE land_area > 1000000;",
    "schema": "political_science",
    "processed_schema_content": {
        "Country": [
            "area",
            "region",
            "name",
            "population",
            "coastline",
            "id",
            "gdp",
            "gdp_per_capita",
            "population_density",
            "life_expectancy",
            "literacy_rate",
            "internet_penetration_rate",
            "hdi",
            "murder_rate",
            "population_growth_rate",
            "infant_mortality_rate",
            "poverty_rate",
            "unemployment_rate",
            "homicide_rate",
            "homicides_per_100k",
            "president_id",
            "years_of_education",
            "prime_minister_id",
            "median_age",
            "chancellor_id",
            "HDI",
            "CO2_emissions_per_capita",
            "GDP_per_capita",
            "murder_rate_per_100k",
            "percent_poverty",
            "total_military_expenditure",
            "confirmed_cases_per_million",
            "human_development_index",
            "GDP_growth_rate",
            "total_deaths",
            "GDP",
            "capital_city",
            "year",
            "temperature",
            "land_area"
        ]
    },
    "response_text": "SELECT Country.name, Country.population FROM Country WHERE Country.area > 1000000;",
    "prompt_token_number": 556,
    "response_token_number": 17
},
{
    "id": 33946,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'PlantSpecies': ['id', 'name', 'genus_id', 'scientific_name'], 'PlantSpeciesUses': ['plant_species_id', 'plant_uses_id'], 'PlantUses': ['id', 'name'], 'PlantSpeciesGrowth': ['plant_species_id', 'plant_growth_id'], 'PlantGrowth': ['id', 'name'], 'PlantVariety': ['name', 'species_id']}. \n# the user question is: Find all plant species that have a variety with a name starting with \"Red\", a growth requirement for \"Loamy sand\" or \"Sandy loam\", and at least one use for \"Food plant\":. \n#SQL query: SELECT PlantSpecies.name AS species, PlantVariety.name AS variety, PlantGrowth.name AS growth, PlantUses.name AS use FROM PlantSpecies JOIN PlantVariety ON PlantSpecies.id = PlantVariety.species_id JOIN PlantSpeciesGrowth ON PlantSpecies.id = PlantSpeciesGrowth.plant_species_id JOIN PlantGrowth ON PlantSpeciesGrowth.plant_growth_id = PlantGrowth.id JOIN PlantSpeciesUses ON PlantSpecies.id = PlantSpeciesUses.plant_species_id JOIN PlantUses ON PlantSpeciesUses.plant_uses_id = PlantUses.id WHERE PlantVariety.name LIKE 'Red%' AND PlantGrowth.name IN ('Loamy sand', 'Sandy loam') AND PlantUses.name = 'Food plant';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Speech': ['politician_id', 'topic', 'id']} and \n# the user question: Find the names and number of speeches given by all the politicians in the database:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names and number of speeches given by all the politicians in the database:",
    "output": "SELECT p.name, COUNT(*) AS num_speeches FROM Politician p JOIN Speech s ON p.id = s.politician_id GROUP BY p.id;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "Speech": [
            "politician_id",
            "topic",
            "id"
        ]
    },
    "response_text": "SELECT Politician.name, COUNT(Speech.id) AS number_of_speeches FROM Politician JOIN Speech ON Politician.id = Speech.politician_id GROUP BY Politician.name;",
    "prompt_token_number": 492,
    "response_token_number": 37
},
{
    "id": 33950,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Orders': ['customer_id', 'order_total', 'order_date', 'order_id', 'delivery_date', 'shipment_id', 'order_total_cost', 'date', 'total_price', 'total_amount', 'shipping_date'], 'Customers': ['customer_id', 'phone_number', 'email', 'customer_name', 'address', 'customer_email', 'customer_phone', 'customer_address', 'email_address', 'phone', 'registration_date', 'country', 'city', 'state', 'name', 'id', 'first_name', 'last_name']}. \n# the user question is: Retrieve the list of orders placed in the last week along with the name and address of the customer who placed the order.. \n#SQL query: SELECT Orders.order_id, Customers.customer_name, Customers.address, Orders.order_date FROM Orders INNER JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Orders.order_date >= DATE('now', '-7 days');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Speech': ['politician_id', 'topic', 'id']} and \n# the user question: List the names of the politicians who have given speeches on education and the total number of speeches given on this topic:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of the politicians who have given speeches on education and the total number of speeches given on this topic:",
    "output": "SELECT p.name, COUNT(*) AS num_speeches FROM Politician p JOIN Speech s ON p.id = s.politician_id WHERE s.topic = 'education' GROUP BY p.id;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "Speech": [
            "politician_id",
            "topic",
            "id"
        ]
    },
    "response_text": "SELECT Politician.name, COUNT(Speech.id) AS total_speeches FROM Politician INNER JOIN Speech ON Politician.id = Speech.politician_id WHERE Speech.topic = 'education' GROUP BY Politician.name;",
    "prompt_token_number": 405,
    "response_token_number": 44
},
{
    "id": 33951,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'WorkoutPlans': ['plan_id', 'plan_name', 'is_available']}. \n# the user question is: Find the most popular workout plans for the current month.. \n#SQL query: SELECT WorkoutPlans.plan_name, COUNT(*) as num_enrollments FROM WorkoutPlans INNER JOIN Enrollments ON WorkoutPlans.plan_id = Enrollments.plan_id WHERE strftime('%m-%Y', Enrollments.enrollment_date) = strftime('%m-%Y', 'now') GROUP BY WorkoutPlans.plan_id ORDER BY num_enrollments DESC LIMIT 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded']} and \n# the user question: Find the names of the political parties in the database and the number of politicians belonging to each party:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of the political parties in the database and the number of politicians belonging to each party:",
    "output": "SELECT pp.name, COUNT(*) AS num_politicians FROM PoliticalParty pp JOIN Politician p ON pp.id = p.party_id GROUP BY pp.id;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "PoliticalParty": [
            "ideology",
            "id",
            "name",
            "political_party",
            "country_id",
            "number_of_seats",
            "number_of_members",
            "number_of_female_members",
            "total_spending",
            "total_revenue",
            "total_funding",
            "num_seats",
            "num_members",
            "date_founded"
        ]
    },
    "response_text": "SELECT PoliticalParty.name, COUNT(Politician.id) as number_of_politicians FROM PoliticalParty INNER JOIN Politician ON PoliticalParty.id = Politician.party_id GROUP BY PoliticalParty.id;",
    "prompt_token_number": 471,
    "response_token_number": 40
},
{
    "id": 33952,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'film': ['genre', 'release_year', 'title', 'director_id', 'id', 'runtime', 'studio_id', 'rating', 'release_date'], 'awards': ['film_id', 'id', 'actor_id', 'category'], 'actor': ['name', 'id'], 'film_actor': ['actor_id', 'film_id']}. \n# the user question is: Retrieve the list of actors who have never appeared in a western film but have won an Academy Award for Best Actor.. \n#SQL query: SELECT actor.name FROM actor JOIN awards ON actor.id = awards.actor_id WHERE awards.category = 'Actor' AND actor.id NOT IN ( SELECT actor.id FROM actor JOIN film_actor ON actor.id = film_actor.actor_id JOIN film ON film_actor.film_id = film.id WHERE film.genre = 'Western' );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Voter': ['id', 'gender', 'age', 'lgbtq', 'name', 'income', 'date_of_birth']} and \n# the user question: List the names and the date of birth of the voters who are over 18 years old:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names and the date of birth of the voters who are over 18 years old:",
    "output": "SELECT name, date_of_birth FROM Voter WHERE (strftime('%Y', 'now') - strftime('%Y', date_of_birth)) >= 18;",
    "schema": "political_science",
    "processed_schema_content": {
        "Voter": [
            "id",
            "gender",
            "age",
            "lgbtq",
            "name",
            "income",
            "date_of_birth"
        ]
    },
    "response_text": "SELECT name, date_of_birth FROM Voter WHERE age > 18;",
    "prompt_token_number": 305,
    "response_token_number": 14
},
{
    "id": 33955,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'MartialArts': ['martial_art_id', 'martial_art_name', 'organization_id', 'num_instructors'], 'Tournaments': ['tournament_name', 'location', 'end_date', 'start_date', 'tournament_id', 'martial_art_id', 'duration']}. \n# the user question is: Retrieve the names of all martial arts that have a tournament scheduled in '2023-12':. \n#SQL query: SELECT ma.martial_art_name FROM MartialArts ma JOIN Tournaments t ON ma.martial_art_id = t.martial_art_id WHERE t.start_date LIKE '2023-12%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded'], 'Donation': ['politician_id', 'amount', 'donor', 'political_party_id', 'donor_type', 'party_id', 'year']} and \n# the user question: Find the names and total amount donated to each political party in the database:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names and total amount donated to each political party in the database:",
    "output": "SELECT pp.name, SUM(d.amount) AS total_donations FROM PoliticalParty pp JOIN Donation d ON pp.id = d.party_id GROUP BY pp.id;",
    "schema": "political_science",
    "processed_schema_content": {
        "PoliticalParty": [
            "ideology",
            "id",
            "name",
            "political_party",
            "country_id",
            "number_of_seats",
            "number_of_members",
            "number_of_female_members",
            "total_spending",
            "total_revenue",
            "total_funding",
            "num_seats",
            "num_members",
            "date_founded"
        ],
        "Donation": [
            "politician_id",
            "amount",
            "donor",
            "political_party_id",
            "donor_type",
            "party_id",
            "year"
        ]
    },
    "response_text": "SELECT pp.name, SUM(d.amount) \nFROM PoliticalParty pp \nJOIN Donation d ON pp.id = d.political_party_id \nGROUP BY pp.name;",
    "prompt_token_number": 332,
    "response_token_number": 32
},
{
    "id": 33956,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'PlantSpecies': ['id', 'name', 'genus_id', 'scientific_name'], 'PlantGenus': ['id', 'family_id', 'name'], 'PlantSpeciesLocation': ['plant_location_id', 'plant_species_id'], 'PlantLocation': ['id', 'name'], 'PlantVariety': ['name', 'species_id']}. \n# the user question is: Find all plant genera that have at least one plant species with a variety name containing the word \"Pink\" and a location requirement of \"Tropical regions\":. \n#SQL query: SELECT PlantGenus.name AS genus FROM PlantGenus JOIN PlantSpecies ON PlantGenus.id = PlantSpecies.genus_id JOIN PlantVariety ON PlantSpecies.id = PlantVariety.species_id JOIN PlantSpeciesLocation ON PlantSpecies.id = PlantSpeciesLocation.plant_species_id JOIN PlantLocation ON PlantSpeciesLocation.plant_location_id = PlantLocation.id WHERE PlantVariety.name LIKE '%Pink%' AND PlantLocation.name = 'Tropical regions';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Vote': ['election_id', 'voter_id', 'id'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id'], 'Voter': ['id', 'gender', 'age', 'lgbtq', 'name', 'income', 'date_of_birth']} and \n# the user question: Find the average age of the voters who have voted in the elections held after 2000:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the average age of the voters who have voted in the elections held after 2000:",
    "output": "SELECT AVG(v.age) AS avg_age FROM Voter v JOIN Vote vo ON v.id = vo.voter_id JOIN Election e ON vo.election_id = e.id WHERE e.year > 2000;",
    "schema": "political_science",
    "processed_schema_content": {
        "Vote": [
            "election_id",
            "voter_id",
            "id"
        ],
        "Election": [
            "country_id",
            "id",
            "winner_party_id",
            "region",
            "date",
            "party_id",
            "year",
            "constituency_id"
        ],
        "Voter": [
            "id",
            "gender",
            "age",
            "lgbtq",
            "name",
            "income",
            "date_of_birth"
        ]
    },
    "response_text": "SELECT AVG(Voter.age) AS Average_Age \nFROM Voter JOIN Vote ON Voter.id = Vote.voter_id \nJOIN Election ON Vote.election_id = Election.id \nWHERE Election.year > 2000;",
    "prompt_token_number": 389,
    "response_token_number": 43
},
{
    "id": 33957,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Customers': ['last_name', 'first_name', 'customer_id', 'city', 'country', 'state', 'email'], 'Payments': ['payment_method', 'user_id', 'customer_id', 'order_id', 'amount', 'payment_date', 'payment_id']}. \n# the user question is: \"Find the customers who have made the most payments and have a total payment amount above $5000.\". \n#SQL query: SELECT c.customer_id, c.first_name, c.last_name, COUNT(pay.payment_id) AS payment_count, SUM(pay.amount) AS total_payment FROM Customers c JOIN Payments pay ON c.customer_id = pay.customer_id GROUP BY c.customer_id, c.first_name, c.last_name HAVING SUM(pay.amount) > 5000 ORDER BY COUNT(pay.payment_id) DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Candidate': ['name', 'total_votes', 'id', 'party_id', 'expenses', 'election_id', 'is_winner', 'election_year'], 'ElectionResult': ['candidate_id', 'total_votes', 'votes_received', 'political_party_id', 'total_spending', 'election_id', 'votes', 'year', 'num_votes', 'id', 'position', 'percent_vote', 'party_id', 'is_winner']} and \n# the user question: Find the names of the candidates who have participated in the most number of elections:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of the candidates who have participated in the most number of elections:",
    "output": "SELECT c.name, COUNT(*) AS num_elections FROM ElectionResult er JOIN Candidate c ON er.candidate_id = c.id GROUP BY c.id ORDER BY num_elections DESC LIMIT 10;",
    "schema": "political_science",
    "processed_schema_content": {
        "Candidate": [
            "name",
            "total_votes",
            "id",
            "party_id",
            "expenses",
            "election_id",
            "is_winner",
            "election_year"
        ],
        "ElectionResult": [
            "candidate_id",
            "total_votes",
            "votes_received",
            "political_party_id",
            "total_spending",
            "election_id",
            "votes",
            "year",
            "num_votes",
            "id",
            "position",
            "percent_vote",
            "party_id",
            "is_winner"
        ]
    },
    "response_text": "SELECT c.name, COUNT(c.election_id) AS election_count FROM Candidate c GROUP BY c.name ORDER BY COUNT(c.election_id) DESC",
    "prompt_token_number": 365,
    "response_token_number": 29
},
{
    "id": 33958,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'plants': ['name', 'id', 'category_id', 'updated_at', 'created_at', 'description', 'min_temp', 'max_temp', 'water_requirement', 'light_requirement', 'watering_schedule', 'width', 'height', 'flowering', 'min_temp_tolerance', 'max_temp_tolerance', 'category', 'spacing_requirement', 'bloomed', 'water_usage', 'last_watered', 'sun_exposure', 'price', 'plant_date', 'harvest_date', 'bed_id', 'suitable_exposure', 'Rosemary', 'is_edible', 'species', 'plant_name', 'soil_type', 'bloom_time', 'max_height', 'flowering_season', 'plant_type', 'sunlight', 'garden_id', 'soil_ph'], 'plant_varieties': ['variety', 'id', 'Tomato', 'Roma', 'plant_id', 'updated_at', 'created_at', 'description', 'name', 'price'], 'garden_plants': ['garden_id', 'plant_id', 'variety_id', 'id', 'updated_at', 'quantity', 'created_at', 'description', 'name', 'plant_variety_id', 'planted_on', 'plant_density', 'garden_bed_id', 'last_watered']}. \n# the user question is: Retrieve the names of all the plants that are currently out of stock.. \n#SQL query: SELECT DISTINCT plants.name FROM plants JOIN plant_varieties ON plants.id = plant_varieties.plant_id WHERE (SELECT SUM(quantity) FROM garden_plants WHERE garden_plants.plant_variety_id = plant_varieties.id) = 0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded'], 'Donation': ['politician_id', 'amount', 'donor', 'political_party_id', 'donor_type', 'party_id', 'year']} and \n# the user question: List the names of the political parties that have received more than $10,000 in donations:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of the political parties that have received more than $10,000 in donations:",
    "output": "SELECT pp.name FROM PoliticalParty pp JOIN Donation d ON pp.id = d.party_id GROUP BY pp.id HAVING SUM(d.amount) > 10000;",
    "schema": "political_science",
    "processed_schema_content": {
        "PoliticalParty": [
            "ideology",
            "id",
            "name",
            "political_party",
            "country_id",
            "number_of_seats",
            "number_of_members",
            "number_of_female_members",
            "total_spending",
            "total_revenue",
            "total_funding",
            "num_seats",
            "num_members",
            "date_founded"
        ],
        "Donation": [
            "politician_id",
            "amount",
            "donor",
            "political_party_id",
            "donor_type",
            "party_id",
            "year"
        ]
    },
    "response_text": "SELECT DISTINCT PoliticalParty.name FROM PoliticalParty JOIN Donation ON PoliticalParty.id = Donation.political_party_id WHERE Donation.amount > 10000;",
    "prompt_token_number": 559,
    "response_token_number": 28
},
{
    "id": 33959,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Teams': ['team_name', 'team_id', 'conference_id', 'division_id', 'last_season', 'first_season', 'city_id', 'division_name', 'conference_name', 'season_id', 'head_coach_id', 'city', 'start_date', 'wins', 'losse', 'home_team_id', 'State', 'Golden', 'Warriors', 'away_team_id', 'coach_id', 'conference', 'playoff_record', 'num_mvp', 'year_founded', 'arena_id', 'player_id', 'year_end', 'winning_team_id', 'end_date', 'num_wins', 'opponent_name', 'Name', 'ID', 'Abbreviation', 'City', 'Color', 'Coach', 'Team_ID', 'Team_Name'], 'Seasons': ['season_id', 'year', 'start_date', 'team_name', 'team_id', 'regular_season_wins', 'season_type', 'champion_id', 'player_id', 'wins', 'losses', 'points_for', 'points_against', 'attendance', 'outcome', 'series_id', 'Regular', 'Season', 'year_end', 'year_start', 'ChampionID', 'Year', 'ID']}. \n# the user question is: Find the NBA teams that have won the championship with the fewest number of regular season wins.. \n#SQL query: SELECT Teams.team_name, MIN(Seasons.regular_season_wins) AS regular_season_wins FROM Teams JOIN Seasons ON Teams.team_id = Seasons.champion_id AND Seasons.season_type = 'Playoff' GROUP BY Teams.team_id ORDER BY regular_season_wins ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Speech': ['politician_id', 'topic', 'id']} and \n# the user question: Find the number of speeches given by each politician on each topic:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the number of speeches given by each politician on each topic:",
    "output": "SELECT p.name, s.topic, COUNT(*) AS num_speeches FROM Politician p JOIN Speech s ON p.id = s.politician_id GROUP BY p.id, s.topic;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "Speech": [
            "politician_id",
            "topic",
            "id"
        ]
    },
    "response_text": "SELECT Politician.name, Speech.topic, COUNT(Speech.id) AS number_of_speeches FROM Politician JOIN Speech ON Politician.id = Speech.politician_id GROUP BY Politician.name, Speech.topic;",
    "prompt_token_number": 549,
    "response_token_number": 43
},
{
    "id": 33960,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Employees': ['first_name', 'employee_id', 'last_name', 'hire_date', 'salary', 'job_title_id', 'department_id', 'location_id', 'job_title', 'employee_status_id', 'employee_experience', 'certification_id', 'equipment_rental_cost', 'hourly_rate', 'Salary', 'Department'], 'Task_Employees': ['employee_id', 'task_id', 'hours_worked', 'project_id', 'task_employee_id', 'task_employee_role', 'task_employee_cost', 'task_hours', 'rental_id', 'end_date'], 'Tasks': ['start_date', 'task_name', 'due_date', 'end_date', 'task_id', 'priority', 'task_status', 'project_id', 'task_priority_id', 'task_status_id', 'task_start_date', 'task_end_date', 'task_expected_completion_date', 'task_completion_percentage', 'task_estimated_cost', 'task_due_date', 'actual_end_date', 'actual_start_date', 'task_lead_id', 'actual_cost', 'employee_i', 'task_description']}. \n# the user question is: List all the projects and the names of the employees who have worked on them, sorted by project name.. \n#SQL query: SELECT p.project_name, e.first_name, e.last_name FROM Projects p INNER JOIN Tasks t ON p.project_id = t.project_id INNER JOIN Task_Employees te ON t.task_id = te.task_id INNER JOIN Employees e ON te.employee_id = e.employee_id ORDER BY p.project_name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Vote': ['election_id', 'voter_id', 'id'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id'], 'Constituency': ['name', 'id']} and \n# the user question: Find the total number of votes cast in each constituency in the 2019 election:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the total number of votes cast in each constituency in the 2019 election:",
    "output": "SELECT c.name, COUNT(*) AS num_votes FROM Constituency c JOIN Election e ON c.id = e.constituency_id JOIN Vote v ON e.id = v.election_id WHERE e.year = 2019 GROUP BY c.id;",
    "schema": "political_science",
    "processed_schema_content": {
        "Vote": [
            "election_id",
            "voter_id",
            "id"
        ],
        "Election": [
            "country_id",
            "id",
            "winner_party_id",
            "region",
            "date",
            "party_id",
            "year",
            "constituency_id"
        ],
        "Constituency": [
            "name",
            "id"
        ]
    },
    "response_text": "SELECT c.name, COUNT(v.id) as total_votes \nFROM Vote v \nINNER JOIN Election e ON v.election_id = e.id \nINNER JOIN Constituency c ON e.constituency_id = c.id \nWHERE e.year = 2019 \nGROUP BY c.name;",
    "prompt_token_number": 637,
    "response_token_number": 58
},
{
    "id": 33961,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['user_id', 'project_id', 'project_name', 'dataset_count', 'dataset_id', 'creation_year', 'created_at'], 'DataSets': ['dataset_description', 'dataset_id', 'dataset_name', 'project_id', 'user_id', 'source_id']}. \n# the user question is: Find the project names and the total number of datasets associated with each project:. \n#SQL query: SELECT Projects.project_name, COUNT(DataSets.dataset_id) AS dataset_count FROM Projects JOIN DataSets ON Projects.project_id = DataSets.project_id GROUP BY Projects.project_name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id'], 'ElectionResult': ['candidate_id', 'total_votes', 'votes_received', 'political_party_id', 'total_spending', 'election_id', 'votes', 'year', 'num_votes', 'id', 'position', 'percent_vote', 'party_id', 'is_winner'], 'Constituency': ['name', 'id']} and \n# the user question: List the names of all the politicians who have won more than one election from the same constituency:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all the politicians who have won more than one election from the same constituency:",
    "output": "SELECT p.name, c.name, COUNT(*) AS num_wins FROM Politician p JOIN ElectionResult er ON p.id = er.candidate_id JOIN Election e ON er.election_id = e.id JOIN Constituency c ON e.constituency_id = c.id WHERE er.position = 'winner' GROUP BY p.id, c.id HAVING COUNT(*) > 1;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "Election": [
            "country_id",
            "id",
            "winner_party_id",
            "region",
            "date",
            "party_id",
            "year",
            "constituency_id"
        ],
        "ElectionResult": [
            "candidate_id",
            "total_votes",
            "votes_received",
            "political_party_id",
            "total_spending",
            "election_id",
            "votes",
            "year",
            "num_votes",
            "id",
            "position",
            "percent_vote",
            "party_id",
            "is_winner"
        ],
        "Constituency": [
            "name",
            "id"
        ]
    },
    "response_text": "SELECT Politician.name\nFROM Politician\nJOIN ElectionResult ON Politician.id = ElectionResult.candidate_id\nJOIN Election ON ElectionResult.election_id = Election.id\nGROUP BY Politician.name, Election.constituency_id\nHAVING COUNT(ElectionResult.is_winner) > 1;",
    "prompt_token_number": 422,
    "response_token_number": 60
},
{
    "id": 33963,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Sales': ['Sales', 'Product', 'Region', 'State', 'product_id', 'dataset_id', 'quantity', 'sale_date', 'Unit_price', 'Sale_date', 'salesperson_id', 'sale_id', 'customer_id', 'company_id', 'unit_price', 'sales_id', 'model_id'], 'Products': ['Product_name', 'Unit_price', 'product_id', 'category_id', 'product_name', 'unit_price', 'origin_state', 'manufacturer_id', 'brand_id', 'stock'], 'Brands': ['brand_name', 'brand_id']}. \n# the user question is: Which brands have sold at least 1000 units of products in the past year?. \n#SQL query: SELECT Brands.brand_name, SUM(Sales.quantity) AS total_units_sold FROM Brands INNER JOIN Products ON Brands.brand_id = Products.brand_id INNER JOIN Sales ON Products.product_id = Sales.product_id AND Sales.sale_date BETWEEN date('now', '1 year') AND date('now') GROUP BY Brands.brand_name HAVING total_units_sold >= 1000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Speech': ['politician_id', 'topic', 'id'], 'PoliticalExperience': ['politician_id', 'id', 'position', 'start_date']} and \n# the user question: List the names of all the ministers who have given speeches on corruption:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all the ministers who have given speeches on corruption:",
    "output": "SELECT p.name, s.topic FROM Politician p JOIN PoliticalExperience pe ON p.id = pe.politician_id JOIN Speech s ON p.id = s.politician_id WHERE pe.position = 'minister' AND s.topic = 'corruption';",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "Speech": [
            "politician_id",
            "topic",
            "id"
        ],
        "PoliticalExperience": [
            "politician_id",
            "id",
            "position",
            "start_date"
        ]
    },
    "response_text": "SELECT Politician.name FROM Politician INNER JOIN Speech ON Politician.id = Speech.politician_id WHERE Speech.topic = 'corruption' GROUP BY Politician.name;",
    "prompt_token_number": 445,
    "response_token_number": 34
},
{
    "id": 33966,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'players': ['player_id', 'player_name', 'name', 'id', 'age', 'team_id', 'jersey_number'], 'player_stats': ['player_id', 'rebounds', 'season_id', 'three_pointers', 'steals', 'player_name', 'games_played', 'points_per_game', 'assists']}. \n# the user question is: Retrieve the names of all players that have scored at least one 3-point field goal in the current season.. \n#SQL query: SELECT player_name FROM players WHERE player_id IN ( SELECT player_id FROM player_stats WHERE season_id = 2022 AND three_pointers > 0 )\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Donation': ['politician_id', 'amount', 'donor', 'political_party_id', 'donor_type', 'party_id', 'year'], 'Party': ['name', 'id']} and \n# the user question: Find the name of the party that received the most donations in the past year:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name of the party that received the most donations in the past year:",
    "output": "SELECT p.name, SUM(d.amount) AS total_donations FROM Party p JOIN Donation d ON p.id = d.party_id WHERE d.year >= strftime('%Y', 'now', '-1 year') GROUP BY p.id ORDER BY total_donations DESC LIMIT 1;",
    "schema": "political_science",
    "processed_schema_content": {
        "Donation": [
            "politician_id",
            "amount",
            "donor",
            "political_party_id",
            "donor_type",
            "party_id",
            "year"
        ],
        "Party": [
            "name",
            "id"
        ]
    },
    "response_text": "SELECT name FROM Party WHERE id = (SELECT political_party_id FROM Donation WHERE year = (SELECT MAX(year) FROM Donation) GROUP BY political_party_id ORDER BY SUM(amount) DESC LIMIT 1)",
    "prompt_token_number": 281,
    "response_token_number": 40
},
{
    "id": 33968,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Credit_Card_Dataset': ['Credit_Limit', 'Education', 'Marital_Status', 'Gender', 'Age', 'Education_Level', 'Card_Type', 'Balance']}. \n# the user question is: What is the total value of the 'Credit Limit' column in the 'Credit Card Dataset' for each 'Gender' and 'Marital Status' combination?. \n#SQL query: SELECT Gender, Marital_Status, SUM(Credit_Limit) FROM Credit_Card_Dataset GROUP BY Gender, Marital_Status;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id'], 'Candidate': ['name', 'total_votes', 'id', 'party_id', 'expenses', 'election_id', 'is_winner', 'election_year'], 'ElectionResult': ['candidate_id', 'total_votes', 'votes_received', 'political_party_id', 'total_spending', 'election_id', 'votes', 'year', 'num_votes', 'id', 'position', 'percent_vote', 'party_id', 'is_winner'], 'Party': ['name', 'id']} and \n# the user question: Find the average number of votes received by each party in the 2016 election:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the average number of votes received by each party in the 2016 election:",
    "output": "SELECT p.name, AVG(er.num_votes) AS avg_votes FROM Party p JOIN Candidate c ON p.id = c.party_id JOIN ElectionResult er ON c.id = er.candidate_id JOIN Election e ON er.election_id = e.id WHERE e.year = 2016 GROUP BY p.id;",
    "schema": "political_science",
    "processed_schema_content": {
        "Election": [
            "country_id",
            "id",
            "winner_party_id",
            "region",
            "date",
            "party_id",
            "year",
            "constituency_id"
        ],
        "Candidate": [
            "name",
            "total_votes",
            "id",
            "party_id",
            "expenses",
            "election_id",
            "is_winner",
            "election_year"
        ],
        "ElectionResult": [
            "candidate_id",
            "total_votes",
            "votes_received",
            "political_party_id",
            "total_spending",
            "election_id",
            "votes",
            "year",
            "num_votes",
            "id",
            "position",
            "percent_vote",
            "party_id",
            "is_winner"
        ],
        "Party": [
            "name",
            "id"
        ]
    },
    "response_text": "SELECT Party.name, AVG(ElectionResult.votes_received) \nFROM ElectionResult \nJOIN Party ON ElectionResult.party_id = Party.id \nJOIN Election ON ElectionResult.election_id = Election.id \nWHERE Election.year = 2016 \nGROUP BY Party.name;",
    "prompt_token_number": 346,
    "response_token_number": 53
},
{
    "id": 33970,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months'], 'Employee': ['employee_id', 'first_name', 'last_name', 'email', 'phone_number', 'title', 'department_id', 'job_id', 'salary', 'address_id', 'Email', 'Hire_Date', 'Employee_Name', 'Department_ID'], 'Task': ['task_id', 'description', 'deadline', 'employee_id', 'campaign_id', 'completed', 'priority', 'completion_date', 'completed_date'], 'PressRelease': ['campaign_id', 'headline', 'date']}. \n# the user question is: Retrieve the names and email addresses of all employees who have been assigned a task associated with a campaign that has a press release with a date on or after May 1st, 2022:. \n#SQL query: SELECT DISTINCT Employee.first_name, Employee.last_name, Employee.email FROM Employee INNER JOIN Task ON Employee.employee_id = Task.employee_id INNER JOIN Campaign ON Task.campaign_id = Campaign.campaign_id INNER JOIN PressRelease ON Campaign.campaign_id = PressRelease.campaign_id WHERE PressRelease.date >= '2022-05-01';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'ElectionResult': ['candidate_id', 'total_votes', 'votes_received', 'political_party_id', 'total_spending', 'election_id', 'votes', 'year', 'num_votes', 'id', 'position', 'percent_vote', 'party_id', 'is_winner']} and \n# the user question: List the names of all the politicians who have never won an election:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all the politicians who have never won an election:",
    "output": "SELECT p.name FROM Politician p LEFT JOIN ElectionResult er ON p.id = er.candidate_id WHERE er.candidate_id IS NULL;",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ],
        "ElectionResult": [
            "candidate_id",
            "total_votes",
            "votes_received",
            "political_party_id",
            "total_spending",
            "election_id",
            "votes",
            "year",
            "num_votes",
            "id",
            "position",
            "percent_vote",
            "party_id",
            "is_winner"
        ]
    },
    "response_text": "SELECT Politician.name FROM Politician LEFT JOIN ElectionResult ON Politician.id = ElectionResult.candidate_id WHERE ElectionResult.is_winner IS NULL OR ElectionResult.is_winner = 0;",
    "prompt_token_number": 559,
    "response_token_number": 37
},
{
    "id": 33971,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'User_Activities': ['activity_value', 'activity_id', 'date_recorded', 'user_id', 'activity_units', 'activity_date', 'activity_duration', 'activity_intensity', 'activity_hr', 'activity_distance', 'activity_calories', 'activity_count', 'duration', 'distance', 'weight', 'heart_rate', 'date_completed', 'activity_name', 'calories_burned']}. \n# the user question is: Find the users who have completed an activity at least once every day in the last 7 days:. \n#SQL query: SELECT Users.first_name, Users.last_name, Users.email FROM Users WHERE Users.user_id IN ( SELECT user_id FROM User_Activities WHERE activity_date BETWEEN date('now', '-7 days') AND date('now') GROUP BY user_id HAVING COUNT(DISTINCT DATE(activity_date)) = 7 );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Candidate': ['name', 'total_votes', 'id', 'party_id', 'expenses', 'election_id', 'is_winner', 'election_year'], 'Party': ['name', 'id']} and \n# the user question: List the names of all the political parties that have never participated in an election:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all the political parties that have never participated in an election:",
    "output": "SELECT p.name FROM Party p LEFT JOIN Candidate c ON p.id = c.party_id WHERE c.party_id IS NULL;",
    "schema": "political_science",
    "processed_schema_content": {
        "Candidate": [
            "name",
            "total_votes",
            "id",
            "party_id",
            "expenses",
            "election_id",
            "is_winner",
            "election_year"
        ],
        "Party": [
            "name",
            "id"
        ]
    },
    "response_text": "SELECT name FROM Party WHERE id NOT IN (SELECT party_id FROM Candidate)",
    "prompt_token_number": 361,
    "response_token_number": 15
},
{
    "id": 33973,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'employees': ['manager_id', 'gender', 'salary', 'department_id', 'employee_id', 'hire_date', 'employee_name', 'id', 'performance_rating', 'last_login_date', 'name', 'job_title', 'date_joined', 'department', 'age'], 'task_assignments': ['employee_id', 'project_id', 'task_id', 'status', 'completed']}. \n# the user question is: Get the list of employees who have worked on more than one project.. \n#SQL query: SELECT employees.employee_name FROM employees INNER JOIN task_assignments ON employees.employee_id = task_assignments.employee_id GROUP BY employees.employee_id HAVING COUNT(DISTINCT task_assignments.project_id) > 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state']} and \n# the user question: Find the name and date of birth of the oldest politician:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and date of birth of the oldest politician:",
    "output": "SELECT name, date_of_birth FROM Politician WHERE date_of_birth = (SELECT MIN(date_of_birth) FROM Politician);",
    "schema": "political_science",
    "processed_schema_content": {
        "Politician": [
            "political_party",
            "name",
            "birthdate",
            "gender",
            "id",
            "education_level",
            "birth_state",
            "birth_city",
            "industry",
            "years_experience",
            "approval_rating",
            "party_id",
            "birth_country_id",
            "represented_country_id",
            "party_affiliation",
            "start_date",
            "end_date",
            "twitter_verified",
            "twitter_followers",
            "birth_date",
            "date_of_birth",
            "state"
        ]
    },
    "response_text": "SELECT name, birthdate FROM Politician ORDER BY birthdate ASC LIMIT 1;",
    "prompt_token_number": 339,
    "response_token_number": 17
},
{
    "id": 33974,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Inventory': ['product_id', 'supplier_id', 'quantity', 'inventory_id', 'units_in_stock', 'quantity_on_hand', 'expiration_date', 'expected_arrival_date', 'quantity_on_order'], 'Suppliers': ['supplier_name', 'supplier_id', 'phone_number', 'address', 'email', 'country', 'contact_name', 'state', 'city', 'phone', 'company_name', 'Canada', 'USA', 'supplier_rating', 'zip'], 'Sale_Items': ['product_id', 'sale_id', 'quantity', 'sale_item_id', 'customer_id', 'unit_price', 'discount_code', 'sale_date', 'price'], 'Sales': ['employee_id', 'sale_id', 'sale_date', 'customer_id', 'total', 'total_amount', 'payment_method', 'total_price', 'total_spent', 'location_id', 'coupon_code', 'start_date', 'discount_percentage', 'end_date', 'product_id'], 'Product_Ratings': ['rating', 'product_id']}. \n# the user question is: Retrieve the names and total revenue for all products that have not been sold in the last 9 months and have a rating of 3 or lower, and were supplied by a company based in France.. \n#SQL query: SELECT Products.product_name, SUM(Inventory.quantity * Products.price) AS total_revenue FROM Products INNER JOIN Inventory ON Products.product_id = Inventory.product_id LEFT JOIN Sale_Items ON Products.product_id = Sale_Items.product_id INNER JOIN Product_Ratings ON Products.product_id = Product_Ratings.product_id INNER JOIN Suppliers ON Inventory.supplier_id = Suppliers.supplier_id WHERE Product_Ratings.rating <= 3 AND (Sale_Items.sale_item_id IS NULL OR Sale_Items.sale_id NOT IN ( SELECT DISTINCT Sales.sale_id FROM Sales WHERE Sales.sale_date > DATE('now', '-9 months') )) AND Suppliers.country = 'France' GROUP BY Products.product_id ORDER BY total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id'], 'ElectionResult': ['candidate_id', 'total_votes', 'votes_received', 'political_party_id', 'total_spending', 'election_id', 'votes', 'year', 'num_votes', 'id', 'position', 'percent_vote', 'party_id', 'is_winner'], 'Constituency': ['name', 'id']} and \n# the user question: List the names of all the constituencies where at least two different political parties have won elections:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all the constituencies where at least two different political parties have won elections:",
    "output": "SELECT c.name FROM Constituency c JOIN Election e ON c.id = e.constituency_id JOIN ElectionResult er ON e.id = er.election_id GROUP BY c.id HAVING COUNT(DISTINCT er.party_id) >= 2;",
    "schema": "political_science",
    "processed_schema_content": {
        "Election": [
            "country_id",
            "id",
            "winner_party_id",
            "region",
            "date",
            "party_id",
            "year",
            "constituency_id"
        ],
        "ElectionResult": [
            "candidate_id",
            "total_votes",
            "votes_received",
            "political_party_id",
            "total_spending",
            "election_id",
            "votes",
            "year",
            "num_votes",
            "id",
            "position",
            "percent_vote",
            "party_id",
            "is_winner"
        ],
        "Constituency": [
            "name",
            "id"
        ]
    },
    "response_text": "SELECT Constituency.name \nFROM Constituency \nINNER JOIN Election \nON Constituency.id = Election.constituency_id \nINNER JOIN ElectionResult \nON Election.id = ElectionResult.election_id \nWHERE ElectionResult.is_winner = 1 \nGROUP BY Constituency.name \nHAVING COUNT(DISTINCT ElectionResult.political_party_id) >= 2;",
    "prompt_token_number": 696,
    "response_token_number": 75
},
{
    "id": 33979,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Illustration': ['user_id', 'file_size', 'date_created', 'name', 'id', 'artist_id', 'category', 'price', 'created_year', 'sold', 'created_date', 'description', 'total_sold'], 'Artist': ['email', 'country', 'name', 'id', 'Dali', 'Salvador', 'monet', 'Vincent', 'Gogh', 'van', 'last_login', 'rating']}. \n# the user question is: Retrieve the name and price of all illustrations that have a price higher than $100 and were created by an artist whose name starts with \"J\".. \n#SQL query: SELECT Illustration.name, Illustration.price FROM Illustration INNER JOIN Artist ON Illustration.artist_id = Artist.id WHERE Illustration.price > 100 AND Artist.name LIKE 'J%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'legislators': ['political_party', 'name', 'email', 'phone_number', 'committee', 'committee_name', 'id']} and \n# the user question: Retrieve the names and committee assignments of all the legislators who serve on the education committee.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the names and committee assignments of all the legislators who serve on the education committee.",
    "output": "SELECT name, committee_name FROM legislators WHERE committee_name = 'Education Committee';",
    "schema": "political_science",
    "processed_schema_content": {
        "legislators": [
            "political_party",
            "name",
            "email",
            "phone_number",
            "committee",
            "committee_name",
            "id"
        ]
    },
    "response_text": "SELECT legislators.name, legislators.committee FROM legislators WHERE legislators.committee_name = 'education';",
    "prompt_token_number": 305,
    "response_token_number": 18
},
{
    "id": 33983,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Actor': ['last_name', 'actor_id', 'first_name'], 'Film_Actor': ['film_id', 'actor_id', 'rating'], 'Film_Genre': ['film_id', 'genre_id'], 'Genre': ['name', 'genre_id']}. \n# the user question is: Find the actors who have not appeared in any action films:. \n#SQL query: SELECT Actor.first_name, Actor.last_name FROM Actor WHERE Actor.actor_id NOT IN ( SELECT DISTINCT Film_Actor.actor_id FROM Film_Actor INNER JOIN Film_Genre ON Film_Actor.film_id = Film_Genre.film_id INNER JOIN Genre ON Film_Genre.genre_id = Genre.genre_id WHERE Genre.name = 'Action' );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'products': ['price', 'id', 'quantity', 'name', 'stock_quantity', 'supplier_id', 'store_id', 'category_id', 'product_name']} and \n# the user question: Select the \"name\" and \"price\" of all products in the \"products\" table where the \"price\" is greater than 100 and sort the results in descending order by price:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Select the \"name\" and \"price\" of all products in the \"products\" table where the \"price\" is greater than 100 and sort the results in descending order by price:",
    "output": "SELECT name, price FROM products WHERE price > 100 ORDER BY price DESC;",
    "schema": "political_science",
    "processed_schema_content": {
        "products": [
            "price",
            "id",
            "quantity",
            "name",
            "stock_quantity",
            "supplier_id",
            "store_id",
            "category_id",
            "product_name"
        ]
    },
    "response_text": "SELECT name, price FROM products WHERE price > 100 ORDER BY price DESC;",
    "prompt_token_number": 309,
    "response_token_number": 16
},
{
    "id": 33984,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['director', 'release_year', 'film_id', 'title', 'box_office', 'language_id', 'runtime', 'budget', 'genre', 'based_on_true_story', 'film_title', 'film_gross', 'film_release_date', 'film_length', 'film_imdb_rating', 'film_director', 'film_runtime_minutes', 'film_release_year', 'film_worldwide_gross', 'film_budget', 'production_company_id', 'film_box_office_gross', 'film_user_rating', 'film_runtime', 'film_director_gender', 'film_box_office_rank', 'genre_id', 'film_duration', 'film_box_office_collection', 'film_running_time', 'film_country', 'film_rating', 'film_revenue', 'film_box_office', 'film_language', 'film_name', 'studio_id', 'film_production_budget'], 'Film_Director': ['director_id', 'film_id', 'director_name'], 'Director': ['director_id', 'director_name', 'gender', 'director_gender'], 'Film_Rating': ['rating_id', 'film_id', 'imdb_rating'], 'War': ['war_id', 'war_name', 'war_start_year'], 'Film_War': ['war_id', 'film_id', 'battle_id']}. \n# the user question is: Find the average IMDb rating of all war films that were directed by Steven Spielberg:. \n#SQL query: SELECT AVG(Film_Rating.imdb_rating) AS avg_rating FROM Film INNER JOIN Film_Rating ON Film.film_id = Film_Rating.film_id INNER JOIN Film_Director ON Film.film_id = Film_Director.film_id INNER JOIN Director ON Film_Director.director_id = Director.director_id INNER JOIN Film_War ON Film.film_id = Film_War.film_id INNER JOIN War ON Film_War.war_id = War.war_id WHERE Director.director_name = 'Steven Spielberg' AND War.war_name IS NOT NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'orders': ['total_amount', 'customer_id', 'total', 'order_date', 'salesperson_id', 'product_id', 'shipped_date']} and \n# the user question: Show me the total revenue earned by each salesperson in the year 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Show me the total revenue earned by each salesperson in the year 2022.",
    "output": "SELECT salesperson_id, SUM(total) as total_revenue FROM orders WHERE YEAR(order_date) = 2022 GROUP BY salesperson_id",
    "schema": "political_science",
    "processed_schema_content": {
        "orders": [
            "total_amount",
            "customer_id",
            "total",
            "order_date",
            "salesperson_id",
            "product_id",
            "shipped_date"
        ]
    },
    "response_text": "SELECT salesperson_id, SUM(total_amount) AS total_revenue FROM orders WHERE YEAR(order_date) = 2022 GROUP BY salesperson_id;",
    "prompt_token_number": 540,
    "response_token_number": 30
},
{
    "id": 33985,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'registration_date', 'dataset_count', 'role'], 'Projects': ['user_id', 'project_id', 'project_name', 'dataset_count', 'dataset_id', 'creation_year', 'created_at'], 'Analyses': ['method_id', 'project_id', 'analysis_id', 'analysis_name', 'dataset_id', 'confidence_score'], 'DataSets': ['dataset_description', 'dataset_id', 'dataset_name', 'project_id', 'user_id', 'source_id'], 'Variables': ['dataset_id', 'variable_name', 'variable_type', 'variable_id', 'variable_count']}. \n# the user question is: Retrieve the usernames of users who have created projects that contain datasets with more than 50 variables and have performed at least one analysis with a confidence score greater than 0.8:. \n#SQL query: SELECT Users.username FROM Users JOIN Projects ON Users.user_id = Projects.user_id JOIN DataSets ON Projects.project_id = DataSets.project_id JOIN Analyses ON DataSets.dataset_id = Analyses.dataset_id JOIN Variables ON DataSets.dataset_id = Variables.dataset_id WHERE Variables.variable_count > 50 AND Analyses.confidence_score > 0.8 GROUP BY Users.username;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'orders': ['total_amount', 'customer_id', 'total', 'order_date', 'salesperson_id', 'product_id', 'shipped_date'], 'products': ['price', 'id', 'quantity', 'name', 'stock_quantity', 'supplier_id', 'store_id', 'category_id', 'product_name']} and \n# the user question: Which products have been ordered by at least 10 different customers?,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Which products have been ordered by at least 10 different customers?",
    "output": "SELECT products.name, COUNT(DISTINCT orders.customer_id) as count FROM orders JOIN products ON orders.product_id = products.id GROUP BY products.name HAVING count >= 10;",
    "schema": "political_science",
    "processed_schema_content": {
        "orders": [
            "total_amount",
            "customer_id",
            "total",
            "order_date",
            "salesperson_id",
            "product_id",
            "shipped_date"
        ],
        "products": [
            "price",
            "id",
            "quantity",
            "name",
            "stock_quantity",
            "supplier_id",
            "store_id",
            "category_id",
            "product_name"
        ]
    },
    "response_text": "SELECT products.product_name\nFROM products\nJOIN orders ON products.id = orders.product_id\nGROUP BY products.product_name\nHAVING COUNT(DISTINCT orders.customer_id) >= 10;",
    "prompt_token_number": 421,
    "response_token_number": 38
},
{
    "id": 33988,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Opportunities': ['closing_date', 'opportunity_id', 'company_id', 'stage', 'name', 'value', 'Negotiation', 'Closed', 'Won', 'Prospect', 'Qualified'], 'Contacts': ['company_id', 'first_name', 'contact_id', 'last_name', 'email'], 'Activities': ['date', 'contact_id', 'activity_type', 'user_id', 'opportunity_id', 'duration']}. \n# the user question is: Find the contacts associated with opportunities that have a value higher than $100,000 and have participated in activities of type 'Meeting'.. \n#SQL query: SELECT c.first_name, c.last_name FROM Contacts c INNER JOIN Opportunities o ON c.company_id = o.company_id INNER JOIN Activities a ON o.opportunity_id = a.opportunity_id WHERE o.value > 100000 AND a.activity_type = 'Meeting';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find all equipment rentals that are currently checked out.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find all equipment rentals that are currently checked out.",
    "output": "SELECT EquipmentRentals.rental_id, Users.username, Equipment.equipment_name, EquipmentRentals.rental_start_date, EquipmentRentals.rental_end_date FROM EquipmentRentals INNER JOIN Equipment ON EquipmentRentals.equipment_id = Equipment.equipment_id INNER JOIN Users ON EquipmentRentals.user_id = Users.user_id WHERE EquipmentRentals.rental_start_date <= CURRENT_DATE AND EquipmentRentals.rental_end_date >= CURRENT_DATE;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT er.rental_id, er.equipment_id, e.equipment_name FROM EquipmentRentals er INNER JOIN Equipment e ON er.equipment_id = e.equipment_id WHERE er.rental_end_date IS NULL;",
    "prompt_token_number": 402,
    "response_token_number": 45
},
{
    "id": 33989,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'task_assignments': ['updated_at', 'task_id', 'created_at', 'assigned_to', 'due_date', 'garden_id', 'completed_at', 'id', 'garden_plant_id', 'status', 'task_type', 'plant_variety_id'], 'users': ['email', 'username', 'id', 'updated_at', 'name', 'created_at', 'role_id'], 'tasks': ['name', 'id', 'updated_at', 'description', 'created_at', 'garden_id', 'due_date', 'type', 'priority'], 'roles': ['name', 'id', 'Gardener', 'updated_at', 'description', 'created_at']}. \n# the user question is: Find all the users who have been assigned a task with a status of \"New\" and have a role of \"User\".. \n#SQL query: SELECT DISTINCT users.name FROM users JOIN task_assignments ON users.id = task_assignments.assigned_to JOIN tasks ON task_assignments.task_id = tasks.id JOIN roles ON users.role_id = roles.id WHERE task_assignments.status = 'New' AND roles.name = 'User';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the average rating for each class.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the average rating for each class.",
    "output": "SELECT Classes.class_name, AVG(Reviews.rating) AS avg_rating FROM Classes LEFT JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Reviews ON ClassSessions.session_id = Reviews.session_id GROUP BY Classes.class_id;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT Classes.class_name, AVG(Reviews.rating) \nFROM Classes \nJOIN Reviews ON Classes.class_id = Reviews.class_id \nGROUP BY Classes.class_name;",
    "prompt_token_number": 550,
    "response_token_number": 31
},
{
    "id": 33990,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Titanic': ['Age', 'Sex', 'Survived', 'Fare', 'Pclass', 'SibSp', 'Parch', 'Embarked', 'Cabin']}. \n# the user question is: What is the number of passengers in the 'Titanic' dataset who are between the ages of 20 and 30, have a 'Pclass' of 3, and have survived?. \n#SQL query: SELECT COUNT(*) FROM Titanic WHERE Age BETWEEN 20 AND 30 AND Pclass = 3 AND Survived = 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find all users who have enrolled in more than one class.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find all users who have enrolled in more than one class.",
    "output": "SELECT Users.username, COUNT(*) as num_enrollments FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id GROUP BY Users.user_id HAVING COUNT(*) > 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT user_id FROM Enrollments GROUP BY user_id HAVING COUNT(DISTINCT class_id) > 1;",
    "prompt_token_number": 344,
    "response_token_number": 24
},
{
    "id": 33991,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Recipients': ['name', 'email', 'campaign_id', 'status', 'recipient_id', 'segment_id', 'list_id', 'last_opened_at', 'city', 'country', 'state', 'last_clicked_at', 'created_at', 'subscribed_at'], 'Campaigns': ['name', 'campaign_id', 'limited', 'Sale', 't', 'our', 'miss', 'content', 'subject', 'user_id', 'segment_id', 'list_id', 'workflow_id', 'email_template_id', 'scheduled_at', 'created_at', 'sent_at'], 'Campaign_Stats': ['opens', 'campaign_id', 'created_at', 'clicks', 'clicked_at', 'opened_at', 'recipient_id', 'click_id', 'open_id', 'bounce_id', 'bounces', 'marked_as_spam', 'complaints', 'segment_id']}. \n# the user question is: Retrieve the email and number of opens for all recipients who have opened a campaign with subject \"Holiday Sale\" in the past week.. \n#SQL query: SELECT r.email, SUM(s.opens) AS num_opens FROM Recipients r JOIN Campaigns c ON r.campaign_id = c.campaign_id JOIN Campaign_Stats s ON c.campaign_id = s.campaign_id AND r.recipient_id = s.recipient_id AND s.opens > 0 WHERE c.subject = 'Holiday Sale' AND s.created_at >= date('now', '-7 days') GROUP BY r.recipient_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the most popular equipment rental based on the number of times it has been rented.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the most popular equipment rental based on the number of times it has been rented.",
    "output": "SELECT Equipment.equipment_name, COUNT(*) as num_rentals FROM EquipmentRentals INNER JOIN Equipment ON EquipmentRentals.equipment_id = Equipment.equipment_id GROUP BY EquipmentRentals.equipment_id ORDER BY num_rentals DESC LIMIT 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT e.equipment_name, COUNT(er.rental_id) AS Number_of_Rentals \nFROM EquipmentRentals er \nJOIN Equipment e \nON er.equipment_id = e.equipment_id \nGROUP BY e.equipment_id \nORDER BY Number_of_Rentals DESC \nLIMIT 1;",
    "prompt_token_number": 500,
    "response_token_number": 61
},
{
    "id": 33994,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']}. \n# the user question is: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $35 million:. \n#SQL query: SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 35000000 AND Campaigns.status = 'active';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id']} and \n# the user question: Find the top-rated instructors.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the top-rated instructors.",
    "output": "SELECT Instructors.instructor_id, Users.username, AVG(Reviews.rating) as avg_rating FROM Instructors INNER JOIN Classes ON Instructors.instructor_id = Classes.instructor_id INNER JOIN Reviews ON Classes.class_id = Reviews.class_id INNER JOIN Users ON Instructors.user_id = Users.user_id GROUP BY Instructors.instructor_id ORDER BY avg_rating DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name, AVG(Reviews.rating) as AverageRating FROM Instructors JOIN Reviews ON Instructors.instructor_id = Reviews.instructor_id GROUP BY Instructors.instructor_name ORDER BY AverageRating DESC;",
    "prompt_token_number": 562,
    "response_token_number": 44
},
{
    "id": 33995,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Therapist_Specialties': ['therapist_id', 'specialty', 'specialty_id'], 'Billing': ['session_id', 'date', 'amount', 'id', 'start_time', 'end_time'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id']}. \n# the user question is: Retrieve the names and total amount billed for all clients who have attended sessions with a therapist who has a specialty in Dialectical Behavior Therapy:. \n#SQL query: SELECT c.name, SUM(b.amount) AS total_billed FROM Clients c INNER JOIN Session_Attendees sa ON c.id = sa.client_id INNER JOIN Sessions s ON sa.session_id = s.id INNER JOIN Therapists t ON s.therapist_id = t.id INNER JOIN Therapist_Specialties ts ON t.id = ts.therapist_id INNER JOIN Billing b ON s.id = b.session_id WHERE ts.specialty = 'Dialectical Behavior Therapy' GROUP BY c.id\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the total revenue generated by each class.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the total revenue generated by each class.",
    "output": "SELECT Classes.class_name, SUM(Payments.payment_amount) as total_revenue FROM Classes INNER JOIN Payments ON Classes.class_id = Payments.class_id GROUP BY Classes.class_id;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Payments": [
            "payment_id",
            "user_id",
            "payment_amount",
            "payment_date",
            "class_id",
            "rental_id",
            "enrollment_id",
            "amount",
            "payment_method"
        ]
    },
    "response_text": "SELECT c.class_name, SUM(p.payment_amount) AS total_revenue FROM Classes c INNER JOIN Payments p ON c.class_id = p.class_id GROUP BY c.class_name",
    "prompt_token_number": 750,
    "response_token_number": 34
},
{
    "id": 33997,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'users': ['email', 'username', 'user_id', 'name']}. \n# the user question is: Retrieve the name and email of all users who have written a review with a rating of 5 stars:. \n#SQL query: SELECT u.username, u.email FROM users u JOIN reviews r ON u.user_id = r.user_id WHERE r.rating = 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee']} and \n# the user question: Find all users who have rented equipment more than once.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find all users who have rented equipment more than once.",
    "output": "SELECT Users.username, COUNT(*) as num_rentals FROM Users INNER JOIN EquipmentRentals ON Users.user_id = EquipmentRentals.user_id GROUP BY Users.user_id HAVING COUNT(*) > 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ]
    },
    "response_text": "SELECT u.username, u.email \nFROM Users u JOIN EquipmentRentals er \nON u.user_id = er.user_id \nGROUP BY u.user_id \nHAVING COUNT(er.rental_id) > 1;",
    "prompt_token_number": 310,
    "response_token_number": 44
},
{
    "id": 34000,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Nutrition_Plan': ['end_date', 'nutrition_plan_id', 'client_id'], 'Meal_Plan': ['nutrition_plan_id', 'meal_id', 'day_of_week', 'time_of_day', 'meal_plan_id', 'client_id', 'plan_id', 'daily_calorie_goal']}. \n# the user question is: Find the nutrition plan with the most meals scheduled.. \n#SQL query: SELECT Nutrition_Plan.nutrition_plan_id, COUNT(*) FROM Meal_Plan JOIN Nutrition_Plan ON Meal_Plan.nutrition_plan_id = Nutrition_Plan.nutrition_plan_id GROUP BY Nutrition_Plan.nutrition_plan_id ORDER BY COUNT(*) DESC LIMIT 1\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id']} and \n# the user question: Find the number of reviews and the average rating for each class.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the number of reviews and the average rating for each class.",
    "output": "SELECT Classes.class_name, COUNT(*) as num_reviews, AVG(Reviews.rating) as avg_rating FROM Classes INNER JOIN Reviews ON Classes.class_id = Reviews.class_id GROUP BY Classes.class_id;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ]
    },
    "response_text": "SELECT Classes.class_id, COUNT(*), AVG(Reviews.rating) FROM Reviews JOIN Classes ON Reviews.class_id = Classes.class_id GROUP BY Classes.class_id",
    "prompt_token_number": 399,
    "response_token_number": 30
},
{
    "id": 34001,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour']}. \n# the user question is: Retrieve the number of sessions conducted by each therapist in each month of the current year, ordered by therapist and month:. \n#SQL query: SELECT t.name, strftime('%m', s.date) AS month, COUNT(s.id) AS sessions_conducted FROM Therapists t INNER JOIN Sessions s ON t.id = s.therapist_id WHERE s.date BETWEEN DATE('now', 'start of year') AND DATE('now', 'start of year', '+1 year', '-1 day') GROUP BY t.id, month ORDER BY t.name, month\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id']} and \n# the user question: Find the top-rated equipment based on the average rating of its rentals.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the top-rated equipment based on the average rating of its rentals.",
    "output": "SELECT Equipment.equipment_name, AVG(Reviews.rating) as avg_rating FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id INNER JOIN Reviews ON EquipmentRentals.rental_id = Reviews.rental_id GROUP BY Equipment.equipment_id ORDER BY avg_rating DESC LIMIT 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ]
    },
    "response_text": "SELECT e.equipment_name, AVG(r.rating) AS avg_rating \nFROM Equipment e \nINNER JOIN EquipmentRentals er ON e.equipment_id = er.equipment_id \nINNER JOIN Reviews r ON er.rental_id = r.rental_id \nGROUP BY e.equipment_name \nORDER BY avg_rating DESC \nLIMIT 1",
    "prompt_token_number": 463,
    "response_token_number": 68
},
{
    "id": 34002,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'product_description', 'unit_price', 'weight', 'category', 'category_id', 'part_id', 'lead_time'], 'Sale_Items': ['item_id', 'sale_id', 'product_id', 'quantity_sold', 'unit_price']}. \n# the user question is: Retrieve the names and total revenue generated by each product, sorted by total revenue:. \n#SQL query: SELECT Products.product_name, SUM(Sale_Items.quantity_sold * Products.unit_price) AS total_revenue FROM Products JOIN Sale_Items ON Products.product_id = Sale_Items.product_id GROUP BY Products.product_id ORDER BY total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the number of classes that each user has enrolled in.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the number of classes that each user has enrolled in.",
    "output": "SELECT Users.username, COUNT(*) as num_enrollments FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id GROUP BY Users.user_id;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.user_id, COUNT(Enrollments.class_id) as number_of_classes FROM Users JOIN Enrollments ON Users.user_id = Enrollments.user_id GROUP BY Users.user_id;",
    "prompt_token_number": 363,
    "response_token_number": 39
},
{
    "id": 34003,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Programs': ['program_id', 'program_name', 'program_description', 'start_date', 'end_date', 'status', 'Program'], 'Goals': ['goal_id', 'goal_name', 'goal_description', 'goal_due_date', 'user_id', 'program_id', 'goal_target', 'goal_type', 'goal_end_date', 'goal_target_date', 'goal_start_date', 'goal_status', 'goal_value'], 'Activities': ['activity_id', 'program_id', 'activity_type', 'goal_id', 'activity_category', 'activity_intensity_factor', 'activity_name', 'Strength', 'Training'], 'User_Activities': ['activity_value', 'activity_id', 'date_recorded', 'user_id', 'activity_units', 'activity_date', 'activity_duration', 'activity_intensity', 'activity_hr', 'activity_distance', 'activity_calories', 'activity_count', 'duration', 'distance', 'weight', 'heart_rate', 'date_completed', 'activity_name', 'calories_burned']}. \n# the user question is: Find the name and email address of the user who has completed the most \"Yoga\" activities in the last 7 days in the \"Fitness Program\":. \n#SQL query: SELECT Users.first_name, Users.last_name, Users.email, COUNT(User_Activities.activity_id) AS num_yoga_activities FROM Users JOIN User_Activities ON Users.user_id = User_Activities.user_id JOIN Activities ON User_Activities.activity_id = Activities.activity_id JOIN Goals ON Activities.goal_id = Goals.goal_id JOIN Programs ON Goals.program_id = Programs.program_id WHERE Programs.program_name = 'Fitness Program' AND Activities.activity_type = 'Yoga' AND User_Activities.date_recorded BETWEEN date('now', '-7 days') AND date('now') GROUP BY Users.user_id ORDER BY num_yoga_activities DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee']} and \n# the user question: Find the number of equipment rentals that have been made in each month of the year.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the number of equipment rentals that have been made in each month of the year.",
    "output": "SELECT strftime('%m-%Y', EquipmentRentals.created_at) AS month, COUNT(*) as num_rentals FROM EquipmentRentals GROUP BY month;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ]
    },
    "response_text": "SELECT strftime('%m', rental_start_date) as month, COUNT(rental_id) as num_rentals \nFROM EquipmentRentals \nGROUP BY month;",
    "prompt_token_number": 595,
    "response_token_number": 32
},
{
    "id": 34005,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Show': ['rating', 'year', 'title', 'show_id', 'genre_id', 'studio_id', 'release_year', 'country_id', 'network_id', 'director_id', 'air_year', 'release_date', 'genre', 'status', 'production_type', 'producer_id', 'start_year', 'end_year'], 'Episode': ['show_id', 'episode_id', 'crew_id', 'director_id', 'writer_id', 'runtime', 'title', 'season_id', 'duration', 'episode_number', 'release_year', 'air_date', 'rating', 'id', 'tv_show_id', 'name'], 'Crew': ['crew_id', 'name', 'job'], 'Director': ['director_id', 'name', 'episode_id', 'person_id', 'show_id', 'season_id'], 'Writer': ['name', 'writer_id', 'episode_id', 'person_id', 'actor_id']}. \n# the user question is: Find the TV shows that have been both directed and written by the same crew member.. \n#SQL query: SELECT DISTINCT Show.title FROM Show JOIN Episode ON Show.show_id = Episode.show_id JOIN Crew AS Director ON Episode.director_id = Director.crew_id JOIN Crew AS Writer ON Episode.writer_id = Writer.crew_id WHERE Director.crew_id = Writer.crew_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find all users who have made payments in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find all users who have made payments in the last month.",
    "output": "SELECT Users.username, SUM(Payments.payment_amount) as total_payments FROM Users INNER JOIN Payments ON Users.user_id = Payments.user_id WHERE Payments.payment_date >= date('now', '-1 month') GROUP BY Users.user_id;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Payments": [
            "payment_id",
            "user_id",
            "payment_amount",
            "payment_date",
            "class_id",
            "rental_id",
            "enrollment_id",
            "amount",
            "payment_method"
        ]
    },
    "response_text": "SELECT DISTINCT Users.username FROM Users JOIN Payments ON Users.user_id = Payments.user_id WHERE Payments.payment_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
    "prompt_token_number": 452,
    "response_token_number": 32
},
{
    "id": 34006,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Marine_Mammals': ['mammal_id', 'mammal_name', 'species', 'habitat', 'conservation_status', 'continent', 'swim_speed', 'species_name', 'swimming_speed']}. \n# the user question is: Which marine mammals in the Marine_Mammals table have a habitat of Arctic and a conservation status of Least Concern?. \n#SQL query: SELECT mammal_name FROM Marine_Mammals WHERE habitat = 'Arctic' AND conservation_status = 'Least Concern';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'WorkoutPlans': ['plan_id', 'plan_name', 'is_available']} and \n# the user question: Find the most popular workout plans based on the number of enrollments.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the most popular workout plans based on the number of enrollments.",
    "output": "SELECT WorkoutPlans.plan_name, COUNT(*) as num_enrollments FROM WorkoutPlans INNER JOIN Enrollments ON WorkoutPlans.plan_id = Enrollments.plan_id GROUP BY WorkoutPlans.plan_id ORDER BY num_enrollments DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "WorkoutPlans": [
            "plan_id",
            "plan_name",
            "is_available"
        ]
    },
    "response_text": "SELECT plan_id, COUNT(*) as enrollment_count \nFROM Enrollments \nGROUP BY plan_id \nORDER BY enrollment_count DESC;",
    "prompt_token_number": 316,
    "response_token_number": 26
},
{
    "id": 34007,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate'], 'OrderItems': ['OrderItemID', 'OrderID', 'IssueID', 'Quantity', 'ShippedDate']}. \n# the user question is: Find the 10 most frequently ordered issues:. \n#SQL query: SELECT Issues.IssueTitle, COUNT(OrderItems.OrderID) AS OrderCount FROM Issues JOIN OrderItems ON Issues.IssueID = OrderItems.IssueID GROUP BY Issues.IssueID ORDER BY OrderCount DESC LIMIT 10;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has not been rented in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment that has not been rented in the last month.",
    "output": "SELECT Equipment.equipment_name FROM Equipment LEFT JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_id IS NULL OR EquipmentRentals.rental_end_date < date('now', '-1 month');",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT Equipment.equipment_name \nFROM Equipment \nWHERE Equipment.equipment_id NOT IN (\n    SELECT EquipmentRentals.equipment_id \n    FROM EquipmentRentals \n    WHERE DATE(EquipmentRentals.rental_end_date) >= DATE(NOW()) - INTERVAL 1 MONTH\n);",
    "prompt_token_number": 365,
    "response_token_number": 57
},
{
    "id": 34009,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'DatasetTags': ['dataset_id', 'tag_id'], 'Tags': ['tag_id', 'tag_name']}. \n# the user question is: Retrieve the tag names and the number of datasets associated with each tag:. \n#SQL query: SELECT Tags.tag_name, COUNT(DISTINCT DatasetTags.dataset_id) AS dataset_count FROM Tags LEFT JOIN DatasetTags ON Tags.tag_id = DatasetTags.tag_id GROUP BY Tags.tag_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time']} and \n# the user question: Find the number of workouts that are available each day of the week.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the number of workouts that are available each day of the week.",
    "output": "SELECT strftime('%w', Classes.start_time) AS day_of_week, COUNT(*) as num_workouts FROM Classes WHERE Classes.is_available = 1 GROUP BY day_of_week;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ]
    },
    "response_text": "SELECT class_day, COUNT(*) AS number_of_workouts\nFROM Classes\nWHERE is_available = 1\nGROUP BY class_day;",
    "prompt_token_number": 298,
    "response_token_number": 27
},
{
    "id": 34012,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Volume': ['series_id', 'id', 'title', 'publisher_id', 'issue_count', 'volume_id', 'publication_date', 'publication_year', 'release_date', 'price', 'format'], 'Series': ['publisher_id', 'title', 'id', 'universe', 'start_date', 'main_protagonist_id', 'rating'], 'Publisher': ['name', 'id', 'country', 'Image', 'Comics'], 'Creator': ['name', 'id', 'Lee', 'Jim', 'Fabry', 'Glenn', 'McKean'], 'Review': ['rating', 'issue_id', 'id', 'user_id'], 'Creator_Appearance': ['creator_id', 'issue_id', 'series_id', 'role', 'volume_id']}. \n# the user question is: Find the names of all creators who have worked on issues published by DC Comics and have at least one issue with a rating of 4 or higher.. \n#SQL query: SELECT DISTINCT c.name FROM Creator c JOIN Creator_Appearance ca ON c.id = ca.creator_id JOIN Issue i ON ca.issue_id = i.id JOIN Review r ON i.id = r.issue_id AND r.rating >= 4 JOIN Volume v ON i.volume_id = v.id JOIN Series s ON v.series_id = s.id JOIN Publisher p ON s.publisher_id = p.id AND p.name = 'DC Comics';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find all equipment that is currently rented.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find all equipment that is currently rented.",
    "output": "SELECT Equipment.equipment_name, EquipmentRentals.rental_start_date, EquipmentRentals.rental_end_date FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_end_date >= CURRENT_DATE;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT e.equipment_name FROM Equipment e JOIN EquipmentRentals er ON e.equipment_id = er.equipment_id WHERE er.rental_end_date IS NULL;",
    "prompt_token_number": 533,
    "response_token_number": 33
},
{
    "id": 34013,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Platforms': ['platform_id', 'game_id', 'online_players'], 'Platforms': ['platform_id', 'platform_name', 'platform_release_date', 'platform_manufacturer', 'platform_publisher', 'platform_release_year', 'manufacturer_id'], 'Game_Modes': ['mode_id', 'game_id'], 'Modes': ['mode_id', 'mode_name', 'mode_type']}. \n# the user question is: Find the names of all games that have a \"First-Person Shooter\" game mode and have been released on \"Xbox One\" platform.. \n#SQL query: SELECT DISTINCT Games.game_title FROM Games INNER JOIN Game_Modes ON Games.game_id = Game_Modes.game_id INNER JOIN Modes ON Game_Modes.mode_id = Modes.mode_id INNER JOIN Game_Platforms ON Games.game_id = Game_Platforms.game_id INNER JOIN Platforms ON Game_Platforms.platform_id = Platforms.platform_id WHERE Modes.mode_name = 'First-Person Shooter' AND Platforms.platform_name = 'Xbox One';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date']} and \n# the user question: Find the instructors who have taught the most classes.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught the most classes.",
    "output": "SELECT Instructors.instructor_id, Users.username, COUNT(*) as num_classes_taught FROM Instructors INNER JOIN Classes ON Instructors.instructor_id = Classes.instructor_id INNER JOIN Users ON Instructors.user_id = Users.user_id GROUP BY Instructors.instructor_id ORDER BY num_classes_taught DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name FROM Instructors INNER JOIN Classes ON Instructors.instructor_id = Classes.instructor_id GROUP BY Instructors.instructor_name ORDER BY COUNT(*) DESC;",
    "prompt_token_number": 517,
    "response_token_number": 36
},
{
    "id": 34014,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Volume': ['series_id', 'id', 'title', 'publisher_id', 'issue_count', 'volume_id', 'publication_date', 'publication_year', 'release_date', 'price', 'format'], 'Series': ['publisher_id', 'title', 'id', 'universe', 'start_date', 'main_protagonist_id', 'rating'], 'Publisher': ['name', 'id', 'country', 'Image', 'Comics'], 'Creator': ['name', 'id', 'Lee', 'Jim', 'Fabry', 'Glenn', 'McKean'], 'Creator_Appearance': ['creator_id', 'issue_id', 'series_id', 'role', 'volume_id']}. \n# the user question is: Find the names of all issues that have been written by Frank Miller and have been published by Dark Horse Comics.. \n#SQL query: SELECT DISTINCT i.title FROM Issue i JOIN Creator_Appearance ca ON i.id = ca.issue_id JOIN Creator c ON ca.creator_id = c.id AND c.name = 'Frank Miller' JOIN Volume v ON i.volume_id = v.id JOIN Series s ON v.series_id = s.id JOIN Publisher p ON s.publisher_id = p.id AND p.name = 'Dark Horse Comics';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment rental with the highest total rental cost.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment rental with the highest total rental cost.",
    "output": "SELECT Equipment.equipment_name, SUM(EquipmentRentals.rental_cost) as total_rental_cost FROM EquipmentRentals INNER JOIN Equipment ON EquipmentRentals.equipment_id = Equipment.equipment_id GROUP BY EquipmentRentals.equipment_id ORDER BY total_rental_cost DESC LIMIT 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT er.equipment_id, max(er.rental_cost) \nFROM EquipmentRentals er\nGROUP BY er.equipment_id\nORDER BY max(er.rental_cost) DESC\nLIMIT 1;",
    "prompt_token_number": 504,
    "response_token_number": 42
},
{
    "id": 34018,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Patient': ['patient_id', 'last_name', 'first_name', 'date_of_birth'], 'Insurance': ['insurance_provider', 'patient_id', 'policy_number', 'insurance_id', 'insurance_provider_id', 'coverage_type_id'], 'Appointment': ['chiropractor_id', 'patient_id', 'appointment_date_time', 'appointment_id', 'insurance_id'], 'Chiropractor': ['first_name', 'last_name', 'chiropractor_id'], 'Prescriptions': ['prescription_name', 'appointment_id', 'prescription_category', 'patient_id', 'medication_id']}. \n# the user question is: Find the names of all chiropractors who have had appointments with patients who have an insurance policy number starting with '74' and have also prescribed a nonsteroidal anti-inflammatory drug:. \n#SQL query: SELECT DISTINCT c.first_name, c.last_name FROM Chiropractor c INNER JOIN Appointment a ON c.chiropractor_id = a.chiropractor_id INNER JOIN Patient p ON a.patient_id = p.patient_id INNER JOIN Insurance i ON p.patient_id = i.patient_id INNER JOIN Prescriptions pr ON a.appointment_id = pr.appointment_id WHERE i.policy_number LIKE '74%' AND pr.prescription_category = 'NSAID';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee']} and \n# the user question: Find the total revenue generated by equipment rentals in each month of the year.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the total revenue generated by equipment rentals in each month of the year.",
    "output": "SELECT strftime('%m-%Y', EquipmentRentals.rental_start_date) AS month, SUM(EquipmentRentals.rental_cost) as total_revenue FROM EquipmentRentals GROUP BY month;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ]
    },
    "response_text": "SELECT MONTH(rental_start_date) as Month, YEAR(rental_start_date) as Year, SUM(rental_cost) as Total_Revenue FROM EquipmentRentals GROUP BY Month, Year ORDER BY Year, Month;",
    "prompt_token_number": 427,
    "response_token_number": 46
},
{
    "id": 34021,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Participant': ['participant_id', 'age', 'gender', 'education_level', 'native_language'], 'Session': ['session_id', 'participant_id', 'date', 'time_start', 'time_end'], 'Task': ['task_id', 'task_name', 'description', 'experiment_id'], 'Trial': ['trial_id', 'session_id', 'task_id', 'trial_number', 'stimuli', 'response', 'reaction_time', 'participant_id', 'stimulus_id', 'task_name', 'completion_time']}. \n# the user question is: Retrieve the average reaction time for trials in the \"Memory Recall\" task, grouped by the participant's gender and sorted in descending order of the average reaction time.. \n#SQL query: SELECT Participant.gender, AVG(Trial.reaction_time) AS average_reaction_time FROM Participant JOIN Session ON Participant.participant_id = Session.participant_id JOIN Trial ON Trial.session_id = Session.session_id JOIN Task ON Task.task_id = Trial.task_id WHERE Task.task_name = 'Memory Recall' GROUP BY Participant.gender ORDER BY average_reaction_time DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id']} and \n# the user question: Find the classes that have not been reviewed.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have not been reviewed.",
    "output": "SELECT Classes.class_name, Classes.start_time FROM Classes LEFT JOIN Reviews ON Classes.class_id = Reviews.class_id WHERE Reviews.class_id IS NULL;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ]
    },
    "response_text": "SELECT * FROM Classes WHERE class_id NOT IN (SELECT class_id FROM Reviews);",
    "prompt_token_number": 475,
    "response_token_number": 16
},
{
    "id": 34024,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Review': ['book_id', 'rating', 'reviewer_name', 'name', 'id', 'reader_id'], 'Reviewer': ['name', 'first_name', 'nationality']}. \n# the user question is: Find all reviewers who have reviewed at least 5 books with a rating of 5 stars, and have not reviewed any book with a rating lower than 4 stars.. \n#SQL query: SELECT Reviewer.name FROM Reviewer INNER JOIN Review ON Reviewer.name = Review.reviewer_name AND Review.rating = 5 WHERE Reviewer.name NOT IN ( SELECT Reviewer.name FROM Reviewer INNER JOIN Review ON Reviewer.name = Review.reviewer_name AND Review.rating < 4 ) GROUP BY Reviewer.name HAVING COUNT(DISTINCT Review.book_id) >= 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the total revenue generated by each type of equipment.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the total revenue generated by each type of equipment.",
    "output": "SELECT Equipment.equipment_type, SUM(Payments.payment_amount) as total_revenue FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id INNER JOIN Payments ON EquipmentRentals.rental_id = Payments.rental_id GROUP BY Equipment.equipment_type;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ],
        "Payments": [
            "payment_id",
            "user_id",
            "payment_amount",
            "payment_date",
            "class_id",
            "rental_id",
            "enrollment_id",
            "amount",
            "payment_method"
        ]
    },
    "response_text": "SELECT Equipment.equipment_type, SUM(EquipmentRentals.rental_cost) as total_revenue \nFROM Equipment\nINNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id \nGROUP BY Equipment.equipment_type;",
    "prompt_token_number": 383,
    "response_token_number": 49
},
{
    "id": 34025,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Registration': ['athlete_id', 'registration_status', 'event_id', 'registration_id', 'race_id', 'bib_number'], 'Event': ['Ironman', 'event_id', 'event_name', 'event_date', 'registration_fee', 'start_date']}. \n# the user question is: Retrieve the event name, start date, and the number of registered athletes for all events that have more than 100 registrations.. \n#SQL query: SELECT e.event_name, e.start_date, COUNT(r.athlete_id) AS registration_count FROM Event e JOIN Registration r ON e.event_id = r.event_id GROUP BY e.event_id HAVING COUNT(r.athlete_id) > 100;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id']} and \n# the user question: Find the users who have reviewed the most classes.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have reviewed the most classes.",
    "output": "SELECT Users.username, COUNT(*) as num_reviews FROM Users INNER JOIN Reviews ON Users.user_id = Reviews.user_id GROUP BY Users.user_id ORDER BY num_reviews DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ]
    },
    "response_text": "SELECT u.username, COUNT(r.class_id) AS review_count \nFROM Users u JOIN Reviews r ON u.user_id = r.user_id \nGROUP BY u.user_id \nORDER BY review_count DESC LIMIT 1;",
    "prompt_token_number": 321,
    "response_token_number": 43
},
{
    "id": 34026,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Designs': ['artist_id', 'design_name', 'design_id', 'design_description', 'Tree', 'designer_id', 'date_created'], 'Artists': ['artist_name', 'artist_email', 'artist_id', 'artist_phone_number', 'email', 'email_address'], 'Glassware_Items': ['glassware_type_id', 'quantity', 'glassware_item_id', 'product_id', 'glassware_item_name', 'glassware_item_description', 'etching_id', 'price', 'item_name', 'material', 'glassware_item_type_id', 'stock', 'design_id', 'discontinued', 'supplier_id', 'quantity_in_stock', 'unit_price', 'quantity_supplied'], 'Etchings': ['etching_id', 'etching_date', 'order_id', 'design_id', 'etching_description', 'etching_name', 'description', 'price', 'etching_image'], 'Etching_Glassware_Items': ['etching_id', 'quantity', 'glassware_item_id', 'etching_glassware_item_id']}. \n# the user question is: Retrieve the list of etchings along with their names and the names of the designs they belong to, where the design is associated with an artist whose name starts with 'S' and the etching is associated with a glassware item made of crystal, sorted by design name in ascending order.. \n#SQL query: SELECT Etchings.etching_name, Designs.design_name FROM Etchings INNER JOIN Designs ON Etchings.design_id = Designs.design_id INNER JOIN Artists ON Designs.artist_id = Artists.artist_id INNER JOIN Etching_Glassware_Items ON Etchings.etching_id = Etching_Glassware_Items.etching_id INNER JOIN Glassware_Items ON Etching_Glassware_Items.glassware_item_id = Glassware_Items.glassware_item_id WHERE Artists.artist_name LIKE 'S%' AND Glassware_Items.material = 'crystal' ORDER BY Designs.design_name ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee']} and \n# the user question: Find the number of equipment rentals that have been made in each hour of the day.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the number of equipment rentals that have been made in each hour of the day.",
    "output": "SELECT strftime('%H', EquipmentRentals.created_at) AS hour, COUNT(*) as num_rentals FROM EquipmentRentals GROUP BY hour;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ]
    },
    "response_text": "SELECT HOUR(rental_start_time) AS rental_hour, COUNT(*) as number_of_rentals FROM EquipmentRentals GROUP BY rental_hour;",
    "prompt_token_number": 583,
    "response_token_number": 28
},
{
    "id": 34027,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'sports': ['sport_name', 'sport_id', 'Low', 'motivation', 'competition', 'challenge', 'sport_category'], 'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'mental_skills': ['skill_id', 'skill_name', 'skill_description', 'athlete_id', 'Focus', 'Visualization', 'skill_mastered', 'skill_level', 'Excellent', 'High', 'Low'], 'athlete_sports': ['sport_id', 'athlete_id']}. \n# the user question is: Get the name and description of all mental skills that have been mastered by athletes in \"High\" level sports.. \n#SQL query: SELECT DISTINCT mental_skills.skill_name, mental_skills.skill_description FROM mental_skills INNER JOIN athlete_skills ON mental_skills.skill_id = athlete_skills.skill_id INNER JOIN athlete_sports ON athlete_skills.athlete_id = athlete_sports.athlete_id INNER JOIN sports ON athlete_sports.sport_id = sports.sport_id WHERE sports.competition = 'High' AND athlete_skills.skill_mastered = 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the classes that have not been enrolled in by any user.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have not been enrolled in by any user.",
    "output": "SELECT Classes.class_name, Locations.location_name FROM Classes INNER JOIN Locations ON Classes.location_id = Locations.location_id LEFT JOIN Enrollments ON Classes.class_id = Enrollments.class_id WHERE Enrollments.enrollment_id IS NULL;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Locations": [
            "location_name",
            "location_id",
            "is_available"
        ]
    },
    "response_text": "SELECT * FROM Classes WHERE class_id NOT IN (SELECT class_id FROM Enrollments);",
    "prompt_token_number": 575,
    "response_token_number": 18
},
{
    "id": 34031,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Event': ['event_id', 'event_name', 'event_date', 'location_id', 'event_category_id', 'event_type_id', 'location', 'venue_id', 'start_date', 'end_date', 'category', 'event_code', 'EVT', 'organizer_id', 'duration', 'name', 'Expo', 'Tech', 'country', 'category_id', 'city', 'ticket_price', 'date', 'start_time', 'end_time', 'min_age_requirement', 'event_type', 'capacity', 'registration_deadline', 'num_attendees', 'min_age', 'duration_hours', 'registration_fee', 'price'], 'Attendee': ['attendee_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'date_of_birth', 'job_title', 'city', 'age', 'email'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID'], 'Event_Session': ['session_type_id', 'event_id', 'session_id', 'speaker_id', 'rating', 'price'], 'Session_Type': ['session_type_name', 'session_type_id'], 'Event_Session_Attendee': ['registration_id', 'session_id', 'event_id', 'attendee_id', 'rating']}. \n# the user question is: What is the name and email address of the attendee who has registered for the most events with a \"Workshop\" session type in the year 2023?. \n#SQL query: SELECT Attendee.first_name, Attendee.last_name, Attendee.email_address FROM Attendee INNER JOIN Registration ON Attendee.attendee_id = Registration.attendee_id INNER JOIN Event ON Registration.event_id = Event.event_id INNER JOIN Event_Session_Attendee ON Event.event_id = Event_Session_Attendee.event_id INNER JOIN Event_Session ON Event_Session_Attendee.session_id = Event_Session.session_id INNER JOIN Session_Type ON Event_Session.session_type_id = Session_Type.session_type_id WHERE Session_Type.session_type_name = 'Workshop' AND strftime('%Y', Event.event_date) = '2023' GROUP BY Attendee.attendee_id ORDER BY COUNT(DISTINCT Event.event_id) DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id']} and \n# the user question: Find the number of reviews and the average rating for each equipment rental.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the number of reviews and the average rating for each equipment rental.",
    "output": "SELECT Equipment.equipment_name, EquipmentRentals.rental_start_date, EquipmentRentals.rental_end_date, COUNT(*) as num_reviews, AVG(Reviews.rating) as avg_rating FROM EquipmentRentals INNER JOIN Equipment ON EquipmentRentals.equipment_id = Equipment.equipment_id INNER JOIN Reviews ON EquipmentRentals.rental_id = Reviews.rental_id GROUP BY EquipmentRentals.rental_id;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ]
    },
    "response_text": "SELECT EquipmentRentals.rental_id, COUNT(Reviews.review_id) AS NumberOfReviews, AVG(Reviews.rating) AS AverageRating\nFROM EquipmentRentals \nLEFT JOIN Reviews ON EquipmentRentals.rental_id = Reviews.rental_id \nGROUP BY EquipmentRentals.rental_id;",
    "prompt_token_number": 726,
    "response_token_number": 61
},
{
    "id": 34033,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'registration_date', 'dataset_count', 'role'], 'Projects': ['user_id', 'project_id', 'project_name', 'dataset_count', 'dataset_id', 'creation_year', 'created_at'], 'Analyses': ['method_id', 'project_id', 'analysis_id', 'analysis_name', 'dataset_id', 'confidence_score'], 'DataSets': ['dataset_description', 'dataset_id', 'dataset_name', 'project_id', 'user_id', 'source_id'], 'Variables': ['dataset_id', 'variable_name', 'variable_type', 'variable_id', 'variable_count']}. \n# the user question is: Get the usernames of users who have created projects that contain datasets with more than 50 variables and have performed at least one analysis with a confidence score greater than 0.8:. \n#SQL query: SELECT Users.username FROM Users JOIN Projects ON Users.user_id = Projects.user_id JOIN DataSets ON Projects.project_id = DataSets.project_id JOIN Variables ON DataSets.dataset_id = Variables.dataset_id JOIN Analyses ON DataSets.dataset_id = Analyses.dataset_id WHERE Variables.variable_count > 50 AND Analyses.confidence_score > 0.8 GROUP BY Users.username;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented the most.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment that has been rented the most.",
    "output": "SELECT Equipment.equipment_name, COUNT(*) as num_rentals FROM EquipmentRentals INNER JOIN Equipment ON EquipmentRentals.equipment_id = Equipment.equipment_id GROUP BY Equipment.equipment_id ORDER BY num_rentals DESC LIMIT 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT Equipment.equipment_name FROM Equipment JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id GROUP BY Equipment.equipment_name ORDER BY COUNT(Equipment.equipment_name) DESC LIMIT 1;",
    "prompt_token_number": 436,
    "response_token_number": 43
},
{
    "id": 34034,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'plants': ['name', 'id', 'category_id', 'updated_at', 'created_at', 'description', 'min_temp', 'max_temp', 'water_requirement', 'light_requirement', 'watering_schedule', 'width', 'height', 'flowering', 'min_temp_tolerance', 'max_temp_tolerance', 'category', 'spacing_requirement', 'bloomed', 'water_usage', 'last_watered', 'sun_exposure', 'price', 'plant_date', 'harvest_date', 'bed_id', 'suitable_exposure', 'Rosemary', 'is_edible', 'species', 'plant_name', 'soil_type', 'bloom_time', 'max_height', 'flowering_season', 'plant_type', 'sunlight', 'garden_id', 'soil_ph'], 'garden_plants': ['garden_id', 'plant_id', 'variety_id', 'id', 'updated_at', 'quantity', 'created_at', 'description', 'name', 'plant_variety_id', 'planted_on', 'plant_density', 'garden_bed_id', 'last_watered'], 'task_assignments': ['updated_at', 'task_id', 'created_at', 'assigned_to', 'due_date', 'garden_id', 'completed_at', 'id', 'garden_plant_id', 'status', 'task_type', 'plant_variety_id'], 'tasks': ['name', 'id', 'updated_at', 'description', 'created_at', 'garden_id', 'due_date', 'type', 'priority'], 'plant_categories': ['name', 'id', 'updated_at', 'created_at', 'description']}. \n# the user question is: Retrieve the names of all the plants that have a category containing the word \"herb\" and have a task assignment with a status of \"Complete\".. \n#SQL query: SELECT DISTINCT plants.name FROM plants JOIN garden_plants ON plants.id = garden_plants.plant_id JOIN task_assignments ON garden_plants.id = task_assignments.garden_plant_id JOIN tasks ON task_assignments.task_id = tasks.id JOIN plant_categories ON plants.category_id = plant_categories.id WHERE plant_categories.name LIKE '%Herb%' AND task_assignments.status = 'Complete';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have enrolled in classes at every available time slot.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have enrolled in classes at every available time slot.",
    "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id WHERE Classes.is_available = 1 GROUP BY Users.user_id HAVING COUNT(DISTINCT Classes.start_time) = (SELECT COUNT(DISTINCT Classes.start_time) FROM Classes WHERE is_available = 1);",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.user_id, Users.username\nFROM Users\nINNER JOIN Enrollments ON Users.user_id = Enrollments.user_id\nGROUP BY Users.user_id, Users.username\nHAVING COUNT(DISTINCT Enrollments.enrollment_time) = (SELECT COUNT(DISTINCT start_time) FROM Classes WHERE is_available = true)",
    "prompt_token_number": 812,
    "response_token_number": 67
},
{
    "id": 34036,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Publishers': ['PublisherID', 'PublisherName', 'SeriesID'], 'Series': ['SeriesID', 'SeriesTitle', 'PublisherID', 'AverageCoverPrice', 'AverageIssueRating', 'SeriesName'], 'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate'], 'Creators': ['CreatorID', 'CreatorName'], 'IssueCreators': ['CreatorID', 'IssueID', 'RoleName', 'Role'], 'IssueCredits': ['IssueID', 'CreditID', 'CreatorID'], 'Credits': ['CreditName', 'CreditID']}. \n# the user question is: Find the top 3 most common letterers of issues published by DC Comics in 2024:. \n#SQL query: SELECT Creators.CreatorName, COUNT(*) as NumIssues FROM Creators JOIN IssueCreators ON Creators.CreatorID = IssueCreators.CreatorID JOIN Issues ON IssueCreators.IssueID = Issues.IssueID JOIN Series ON Issues.SeriesID = Series.SeriesID JOIN Publishers ON Series.PublisherID = Publishers.PublisherID JOIN IssueCredits ON Issues.IssueID = IssueCredits.IssueID JOIN Credits ON IssueCredits.CreditID = Credits.CreditID AND Credits.CreditName = 'Letterer' WHERE Publishers.PublisherName = 'DC Comics' AND Issues.CoverDate BETWEEN '2024-01-01' AND '2024-12-31' GROUP BY Creators.CreatorID ORDER BY NumIssues DESC LIMIT 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the most active users based on the number of classes they have enrolled in.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the most active users based on the number of classes they have enrolled in.",
    "output": "SELECT Users.username, COUNT(*) as num_enrollments FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id GROUP BY Users.user_id ORDER BY num_enrollments DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.user_id, Users.username, COUNT(*) as NumClasses \nFROM Users \nJOIN Enrollments ON Users.user_id = Enrollments.user_id \nGROUP BY Users.user_id \nORDER BY NumClasses DESC LIMIT 5;",
    "prompt_token_number": 603,
    "response_token_number": 47
},
{
    "id": 34037,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Gene_Publication': ['gene_id', 'publication_id'], 'Publication': ['title', 'publication_id', 'publication_date', 'journal_name']}. \n# the user question is: Retrieve the names of all publications and their associated genes that have been published in a journal with the word \"Genetics\" in the name and have a gene name that contains the word \"transporter\" or \"ligase\".. \n#SQL query: SELECT Publication.title, Gene.gene_name FROM Publication JOIN Gene_Publication ON Publication.publication_id = Gene_Publication.publication_id JOIN Gene ON Gene_Publication.gene_id = Gene.gene_id WHERE Publication.journal_name LIKE '%Genetics%' AND (Gene.gene_name LIKE '%transporter%' OR Gene.gene_name LIKE '%ligase%');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time']} and \n# the user question: Find the classes that are scheduled for the next week.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that are scheduled for the next week.",
    "output": "SELECT Classes.class_name, Classes.start_time, Classes.end_time FROM Classes WHERE Classes.start_time >= date('now') AND Classes.start_time < date('now', '+7 days');",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ]
    },
    "response_text": "SELECT * FROM Classes WHERE class_date >= CURDATE() AND class_date < DATE_ADD(CURDATE(), INTERVAL 1 WEEK);",
    "prompt_token_number": 438,
    "response_token_number": 26
},
{
    "id": 34038,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Items': ['item_id', 'game_id'], 'Items': ['item_name', 'item_id', 'item_description', 'rarity_id'], 'Game_Levels': ['level_id', 'game_id'], 'Levels': ['level_name', 'level_id', 'difficulty_id', 'duration_id']}. \n# the user question is: Find the names of all games that have a level with a name containing \"Paris\" and an item with a name containing \"knife\".. \n#SQL query: SELECT DISTINCT Games.game_title FROM Games INNER JOIN Game_Levels ON Games.game_id = Game_Levels.game_id INNER JOIN Levels ON Game_Levels.level_id = Levels.level_id INNER JOIN Game_Items ON Games.game_id = Game_Items.game_id INNER JOIN Items ON Game_Items.item_id = Items.item_id WHERE Levels.level_name LIKE '%Paris%' AND Items.item_name LIKE '%knife%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'WorkoutPlans': ['plan_id', 'plan_name', 'is_available']} and \n# the user question: Find the users who have enrolled in all available workout plans.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have enrolled in all available workout plans.",
    "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN WorkoutPlans ON Enrollments.plan_id = WorkoutPlans.plan_id WHERE WorkoutPlans.is_available = 1 GROUP BY Users.user_id HAVING COUNT(DISTINCT WorkoutPlans.plan_id) = (SELECT COUNT(*) FROM WorkoutPlans WHERE is_available = 1);",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "WorkoutPlans": [
            "plan_id",
            "plan_name",
            "is_available"
        ]
    },
    "response_text": "SELECT Users.username \nFROM Users \nWHERE NOT EXISTS (SELECT WorkoutPlans.plan_id FROM WorkoutPlans WHERE is_available = 1 AND NOT EXISTS (SELECT Enrollments.plan_id FROM Enrollments WHERE Enrollments.user_id = Users.user_id AND Enrollments.plan_id = WorkoutPlans.plan_id));",
    "prompt_token_number": 450,
    "response_token_number": 61
},
{
    "id": 34039,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Tracks': ['track_id', 'track_title', 'duration', 'album_id', 'track_name', 'genre_id', 'rating', 'artist_id', 'release_id'], 'TrackRatings': ['track_id', 'rating', 'genre_id']}. \n# the user question is: Retrieve the tracks with the highest average rating among the tracks with at least 10 ratings:. \n#SQL query: SELECT Tracks.track_name, AVG(TrackRatings.rating) AS avg_rating FROM Tracks JOIN TrackRatings ON Tracks.track_id = TrackRatings.track_id GROUP BY Tracks.track_id HAVING COUNT(TrackRatings.rating) >= 10 ORDER BY avg_rating DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id']} and \n# the user question: Find the classes that have not been taught by any instructor.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have not been taught by any instructor.",
    "output": "SELECT Classes.class_name, Classes.start_time FROM Classes LEFT JOIN Instructors ON Classes.instructor_id = Instructors.instructor_id WHERE Instructors.instructor_id IS NULL;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ]
    },
    "response_text": "SELECT * FROM Classes WHERE instructor_id IS NULL;",
    "prompt_token_number": 388,
    "response_token_number": 10
},
{
    "id": 34040,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Player': ['player_id', 'player_name', 'height', 'team_id', 'position_id', 'age'], 'Player_Award': ['award_id', 'player_id', 'tournament_id', 'team_id'], 'Award': ['award_name', 'award_id']}. \n# the user question is: Find the players who have won the 'Best Libero' award in multiple tournaments. \n#SQL query: SELECT Player.player_name FROM Player JOIN Player_Award ON Player.player_id = Player_Award.player_id JOIN Award ON Player_Award.award_id = Award.award_id WHERE Award.award_name = 'Best Libero' GROUP BY Player.player_name HAVING COUNT(DISTINCT Player_Award.tournament_id) > 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee']} and \n# the user question: Find the total number of equipment rentals for each month of the year.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the total number of equipment rentals for each month of the year.",
    "output": "SELECT strftime('%m-%Y', EquipmentRentals.created_at) AS month, COUNT(*) as num_rentals FROM EquipmentRentals GROUP BY month;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ]
    },
    "response_text": "SELECT MONTH(rental_start_date) as month, COUNT(*) as number_of_rentals \nFROM EquipmentRentals \nGROUP BY MONTH(rental_start_date);",
    "prompt_token_number": 322,
    "response_token_number": 33
},
{
    "id": 34042,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'task_assignments': ['updated_at', 'task_id', 'created_at', 'assigned_to', 'due_date', 'garden_id', 'completed_at', 'id', 'garden_plant_id', 'status', 'task_type', 'plant_variety_id'], 'users': ['email', 'username', 'id', 'updated_at', 'name', 'created_at', 'role_id']}. \n# the user question is: Find all the users who have completed the task with ID 5.. \n#SQL query: SELECT DISTINCT users.name FROM users INNER JOIN task_assignments ON users.id = task_assignments.assigned_to WHERE task_assignments.task_id = 5 AND task_assignments.status = 'Completed';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id']} and \n# the user question: Find the users who have reviewed the same class more than once.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have reviewed the same class more than once.",
    "output": "SELECT Users.username, Reviews.class_id, COUNT(*) as num_reviews FROM Users INNER JOIN Reviews ON Users.user_id = Reviews.user_id GROUP BY Users.user_id, Reviews.class_id HAVING COUNT(*) > 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ]
    },
    "response_text": "SELECT Users.user_id, Users.user_name \nFROM Users \nINNER JOIN (\n       SELECT user_id \n       FROM Reviews \n       GROUP BY user_id, class_id \n       HAVING COUNT(*) > 1) temp \nON Users.user_id = temp.user_id;",
    "prompt_token_number": 334,
    "response_token_number": 53
},
{
    "id": 34044,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'injuries': ['injury_type', 'athlete_id', 'injury_id', 'injury_date', 'injury_duration'], 'athlete_injury_status': ['injury_id', 'status_id'], 'injury_status': ['status_name', 'status_id']}. \n# the user question is: Get a list of all athletes and their corresponding injury status, sorted by athlete name in alphabetical order.. \n#SQL query: SELECT athletes.name, injuries.injury_type, injury_status.status_name FROM athletes INNER JOIN injuries ON athletes.athlete_id = injuries.athlete_id INNER JOIN athlete_injury_status ON injuries.injury_id = athlete_injury_status.injury_id INNER JOIN injury_status ON athlete_injury_status.status_id = injury_status.status_id ORDER BY athletes.name ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id']} and \n# the user question: Find the total number of reviews and the average rating for each instructor.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the total number of reviews and the average rating for each instructor.",
    "output": "SELECT Instructors.instructor_id, Users.username, COUNT(*) as num_reviews, AVG(Reviews.rating) as avg_rating FROM Instructors INNER JOIN Classes ON Instructors.instructor_id = Classes.instructor_id INNER JOIN Reviews ON Classes.class_id = Reviews.class_id INNER JOIN Users ON Instructors.user_id = Users.user_id GROUP BY Instructors.instructor_id;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name, COUNT(Reviews.review_id) AS Total_Reviews, AVG(Reviews.rating) AS Average_Rating FROM Instructors LEFT JOIN Reviews ON Instructors.instructor_id = Reviews.instructor_id GROUP BY Instructors.instructor_name;",
    "prompt_token_number": 519,
    "response_token_number": 52
},
{
    "id": 34048,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Recipients': ['name', 'email', 'campaign_id', 'status', 'recipient_id', 'segment_id', 'list_id', 'last_opened_at', 'city', 'country', 'state', 'last_clicked_at', 'created_at', 'subscribed_at'], 'Campaigns': ['name', 'campaign_id', 'limited', 'Sale', 't', 'our', 'miss', 'content', 'subject', 'user_id', 'segment_id', 'list_id', 'workflow_id', 'email_template_id', 'scheduled_at', 'created_at', 'sent_at'], 'Campaign_Stats': ['opens', 'campaign_id', 'created_at', 'clicks', 'clicked_at', 'opened_at', 'recipient_id', 'click_id', 'open_id', 'bounce_id', 'bounces', 'marked_as_spam', 'complaints', 'segment_id'], 'Segments': ['updated_at', 'user_id', 'created_at', 'name', 'filter_expression', 'segment_id', 'criteria', 'num_recipients']}. \n# the user question is: Retrieve the name and email of all recipients who have clicked on a link in a campaign sent by User ID 8 in the last 7 days and are subscribed to the \"VIP Customers\" segment, sorted by the number of clicks.. \n#SQL query: SELECT r.name, r.email, COUNT(cs.click_id) AS click_count FROM Recipients r JOIN Campaigns c ON r.campaign_id = c.campaign_id JOIN Campaign_Stats cs ON c.campaign_id = cs.campaign_id AND cs.recipient_id = r.recipient_id AND cs.clicks > 0 JOIN Segments s ON r.segment_id = s.segment_id WHERE c.user_id = 8 AND s.name = 'VIP Customers' AND cs.created_at >= date('now', '-7 days') GROUP BY r.email, r.name ORDER BY click_count DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'WorkoutPlans': ['plan_id', 'plan_name', 'is_available']} and \n# the user question: Find the most popular workout plans for the current month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the most popular workout plans for the current month.",
    "output": "SELECT WorkoutPlans.plan_name, COUNT(*) as num_enrollments FROM WorkoutPlans INNER JOIN Enrollments ON WorkoutPlans.plan_id = Enrollments.plan_id WHERE strftime('%m-%Y', Enrollments.enrollment_date) = strftime('%m-%Y', 'now') GROUP BY WorkoutPlans.plan_id ORDER BY num_enrollments DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "WorkoutPlans": [
            "plan_id",
            "plan_name",
            "is_available"
        ]
    },
    "response_text": "SELECT wp.plan_name, COUNT(e.plan_id) AS total_enrollments \nFROM Enrollments e \nJOIN WorkoutPlans wp ON e.plan_id = wp.plan_id \nWHERE strftime('%Y-%m', e.enrollment_date) = strftime('%Y-%m', 'now') \nGROUP BY e.plan_id \nORDER BY total_enrollments DESC;",
    "prompt_token_number": 603,
    "response_token_number": 72
},
{
    "id": 34049,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'team_id', 'completed_by', 'skill_id', 'first_name', 'manager_id', 'last_name', 'job_title', 'office_location', 'role', 'years_of_experience', 'department_id', 'salary'], 'Tasks': ['assigned_to', 'deadline', 'project_id', 'task_id', 'priority_level', 'status', 'completed_by', 'created_at', 'completed_at', 'priority', 'created_by', 'due_date', 'user_id', 'assigned_team', 'team_id', 'started_at', 'assigned_skill', 'requested_by', 'assigned_at', 'assigned_by', 'completion_date', 'assignment_date', 'skill_name', 'task_status', 'department_name', 'task_assigned_date', 'task_completion_date'], 'User_Roles': ['user_id', 'role_id'], 'Roles': ['role_id', 'role_name']}. \n# the user question is: Find the user who has completed the most tasks in the last 120 days and has the role of \"Developer\":. \n#SQL query: SELECT Users.username, COUNT(Tasks.task_id) AS completed_task_count FROM Users JOIN Tasks ON Users.user_id = Tasks.completed_by JOIN User_Roles ON Users.user_id = User_Roles.user_id JOIN Roles ON User_Roles.role_id = Roles.role_id WHERE Tasks.completed_at >= DATE('now', '-120 day') AND Roles.role_name = 'Developer' GROUP BY Users.user_id ORDER BY completed_task_count DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the total number of equipment rentals for each equipment type.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the total number of equipment rentals for each equipment type.",
    "output": "SELECT Equipment.equipment_type, COUNT(*) as num_rentals FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id GROUP BY Equipment.equipment_type;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT Equipment.equipment_type, COUNT(EquipmentRentals.rental_id) AS rental_count\nFROM EquipmentRentals\nJOIN Equipment ON EquipmentRentals.equipment_id = Equipment.equipment_id\nGROUP BY Equipment.equipment_type;",
    "prompt_token_number": 497,
    "response_token_number": 47
},
{
    "id": 34050,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Orders': ['order_total', 'customer_id', 'order_date', 'order_id', 'employee_id', 'shipper_id', 'supplier_id', 'shipped_date', 'required_date', 'shipping_cost', 'shipping_refunded', 'quantity', 'unit_price', 'product_id', 'total_amount', 'refund_issued', 'cancelled_date', 'returned_date', 'shipping_date', 'status', 'OrderDate', 'OrderStatus', 'ShippedDate', 'OrderID', 'CustomerID']}. \n# the user question is: How many orders have been completed in the last 3 months?. \n#SQL query: SELECT COUNT(*) FROM Orders WHERE OrderDate >= date('now', '-3 months') AND OrderStatus = 'completed';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have enrolled in all available classes.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have enrolled in all available classes.",
    "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id WHERE Classes.is_available = 1 GROUP BY Users.user_id HAVING COUNT(DISTINCT Classes.class_id) = (SELECT COUNT(*) FROM Classes WHERE is_available = 1);",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT u.user_id, u.username \nFROM Users u \nWHERE NOT EXISTS \n(SELECT c.class_id FROM Classes c \n WHERE c.is_available = 1 AND \n NOT EXISTS \n (SELECT e.class_id \n  FROM Enrollments e \n  WHERE e.user_id = u.user_id AND e.class_id = c.class_id)\n)",
    "prompt_token_number": 494,
    "response_token_number": 68
},
{
    "id": 34053,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Journals': ['journal_id', 'user_id', 'title', 'created_at', 'entry_count', 'tag_count'], 'Entries': ['journal_id', 'content', 'title', 'entry_id', 'created_at', 'user_id', 'word_count']}. \n# the user question is: Get the journals that have more than 5 entries:. \n#SQL query: SELECT Journals.journal_id, Journals.title FROM Journals INNER JOIN ( SELECT journal_id, COUNT(entry_id) AS entry_count FROM Entries GROUP BY journal_id HAVING entry_count > 5 ) AS sub ON Journals.journal_id = sub.journal_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the most popular equipment type for the current month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the most popular equipment type for the current month.",
    "output": "SELECT Equipment.equipment_type, COUNT(*) as num_rentals FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE strftime('%m-%Y', EquipmentRentals.rental_start_date) = strftime('%m-%Y', 'now') GROUP BY Equipment.equipment_type ORDER BY num_rentals DESC LIMIT 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT Equipment.equipment_type, COUNT(EquipmentRentals.rental_id) AS rental_count\nFROM Equipment\nINNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id\nWHERE MONTH(EquipmentRentals.rental_start_date) = MONTH(CURRENT_DATE())\nGROUP BY Equipment.equipment_type\nORDER BY rental_count DESC\nLIMIT 1;",
    "prompt_token_number": 315,
    "response_token_number": 76
},
{
    "id": 34055,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Customers': ['customer_id', 'email', 'first_name', 'last_name', 'country_id', 'address', 'city', 'country', 'state', 'loyalty_level', 'York', 'customer_name', 'customer_city', 'phone', 'subscribed_to_newsletter', 'has_ordered_online'], 'Order_Items': ['price', 'quantity', 'order_id', 'book_id', 'customer_id', 'publisher_id', 'is_returned', 'product_id', 'is_delivered', 'total_price', 'order_date'], 'Orders': ['order_date', 'order_id', 'customer_id', 'coupon_code', 'total_cost', 'total_quantity', 'shipping_address_id', 'total_price', 'total_amount', 'salesperson_id', 'book_id', 'channel_id', 'Order_Date', 'Order_Total', 'Customer_Name'], 'Categories': ['category_name', 'category_id', 'customer_id', 'Fiction', 'CategoryName', 'CategoryID']}. \n# the user question is: Retrieve the names of all customers who have placed at least one order for a book in the \"Business\" category, but have not placed an order for a book in the \"Marketing\" category.. \n#SQL query: SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Books b ON oi.book_id = b.book_id JOIN Categories cat ON b.category_id = cat.category_id WHERE cat.category_name = 'Business' AND c.customer_id NOT IN ( SELECT DISTINCT c.customer_id FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Books b ON oi.book_id = b.book_id JOIN Categories cat ON b.category_id = cat.category_id WHERE cat.category_name = 'Marketing' );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have been enrolled in by at least 3 users.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have been enrolled in by at least 3 users.",
    "output": "SELECT Classes.class_name, COUNT(*) as num_enrollments FROM Classes INNER JOIN Enrollments ON Classes.class_id = Enrollments.class_id GROUP BY Classes.class_id HAVING COUNT(*) >= 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT c.class_name FROM Classes c JOIN Enrollments e ON c.class_id = e.class_id GROUP BY c.class_name HAVING COUNT(DISTINCT e.user_id) >= 3;",
    "prompt_token_number": 795,
    "response_token_number": 39
},
{
    "id": 34056,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Books': ['AuthorID', 'BookID', 'Title', 'PublicationYear'], 'BookCategories': ['CategoryID', 'BookID'], 'Categories': ['CategoryID', 'Name']}. \n# the user question is: Get the titles of books that belong to both the \"French\" and \"Baking\" categories:. \n#SQL query: SELECT DISTINCT Books.Title FROM Books JOIN BookCategories ON Books.BookID = BookCategories.BookID JOIN Categories ON BookCategories.CategoryID = Categories.CategoryID WHERE Categories.Name = 'French' AND Books.BookID IN ( SELECT Books.BookID FROM Books JOIN BookCategories ON Books.BookID = BookCategories.BookID JOIN Categories ON BookCategories.CategoryID = Categories.CategoryID WHERE Categories.Name = 'Baking' );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the classes that have not been reviewed by any user.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have not been reviewed by any user.",
    "output": "SELECT Classes.class_name, Locations.location_name FROM Classes INNER JOIN Locations ON Classes.location_id = Locations.location_id LEFT JOIN Reviews ON Classes.class_id = Reviews.class_id WHERE Reviews.review_id IS NULL;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ],
        "Locations": [
            "location_name",
            "location_id",
            "is_available"
        ]
    },
    "response_text": "SELECT DISTINCT Classes.class_name FROM Classes LEFT JOIN Reviews ON Classes.class_id = Reviews.class_id WHERE Reviews.review_id IS NULL;",
    "prompt_token_number": 424,
    "response_token_number": 25
},
{
    "id": 34061,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'patients': ['first_name', 'last_name', 'patient_id', 'phone_number', 'email', 'phone'], 'medical_history': ['patient_id', 'medical_condition', 'diagnosis'], 'prescription': ['patient_id', 'prescription_id', 'prescription_date', 'type', 'practitioner_id'], 'prescription_items': ['formula_id', 'prescription_id'], 'herbal_formulas': ['formula_id', 'formula_name', 'price', 'num_ingredients', 'ingredients', 'name']}. \n# the user question is: Retrieve the names and email addresses of patients who have been prescribed herbal formulas containing \"Xuan Shen\" and have also been diagnosed with a medical condition containing the word \"thyroid\":. \n#SQL query: SELECT DISTINCT p.first_name, p.last_name, p.email FROM patients p JOIN medical_history mh ON p.patient_id = mh.patient_id JOIN prescription pr ON p.patient_id = pr.patient_id JOIN prescription_items pi ON pr.prescription_id = pi.prescription_id JOIN herbal_formulas hf ON pi.formula_id = hf.formula_id WHERE hf.formula_name LIKE '%Xuan Shen%' AND mh.medical_condition LIKE '%thyroid%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have enrolled in classes that start after 5pm.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have enrolled in classes that start after 5pm.",
    "output": "SELECT Users.username, Classes.class_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id WHERE Classes.start_time >= '17:00:00';",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT DISTINCT u.username, u.email FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN Classes c ON e.class_id = c.class_id WHERE c.start_time > '17:00:00';",
    "prompt_token_number": 591,
    "response_token_number": 46
},
{
    "id": 34062,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Shifts': ['start_time', 'end_time', 'employee_id', 'shift_id', 'duration', 'status', 'shift_date', 'machine_id', 'overtime_hours', 'performance_rating', 'shift_start', 'hours_worked'], 'Employees': ['first_name', 'employee_id', 'last_name', 'job_title', 'territory_id', 'department_id', 'manager_id', 'job_title_id', 'hire_date', 'address', 'birth_date', 'phone', 'title', 'reports_to', 'address_id', 'performance_evaluation_date', 'training_expiry_date', 'schedule_update_date', 'time_off_request_date', 'performance_bonus_date', 'promotion_date', 'overtime_pay_date', 'reassignment_date', 'training_date', 'annual_leave_balance', 'skills_upgrade_date', 'compensatory_time_off_date', 'shift_length', 'last_promotion_date', 'career_development_plan_date', 'last_break_date', 'salary', 'hourly_rate', 'hourly_wage', 'status', 'skill_set', 'ShiftStart', 'ShiftEnd', 'EmployeeID', 'EmployeeName', 'HireDate', 'LastName', 'Title', 'FirstName', 'BirthDate']}. \n# the user question is: Find the employees who have the lowest attendance in the last month and need to be reminded of their obligations.. \n#SQL query: SELECT Employees.first_name, Employees.last_name, COUNT(Shifts.shift_id) AS total_shifts_scheduled, COUNT(DISTINCT Shifts.shift_date) AS total_days_worked FROM Employees LEFT JOIN Shifts ON Employees.employee_id = Shifts.employee_id WHERE Shifts.start_time BETWEEN DATE('now', '-1 month') AND DATE('now') GROUP BY Employees.employee_id HAVING total_days_worked < (SELECT COUNT(DISTINCT Shifts.shift_date) FROM Shifts WHERE Shifts.start_time BETWEEN DATE('now', '-1 month') AND DATE('now')) ORDER BY total_days_worked ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have not enrolled in any class.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have not enrolled in any class.",
    "output": "SELECT Users.username FROM Users LEFT JOIN Enrollments ON Users.user_id = Enrollments.user_id WHERE Enrollments.enrollment_id IS NULL;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.user_id, Users.username FROM Users LEFT JOIN Enrollments ON Users.user_id = Enrollments.user_id WHERE Enrollments.class_id IS NULL;",
    "prompt_token_number": 638,
    "response_token_number": 33
},
{
    "id": 34063,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'User': ['UserID', 'FirstName', 'LastName', 'Email', 'Password', 'Birthdate', 'Gender', 'Age', 'Height', 'BMI', 'Weight'], 'WeightLifting': ['ExerciseTypeID', 'UserID', 'Weight', 'Repetitions', 'CaloriesBurned', 'Sets', 'EndTime']}. \n# the user question is: Find the top 3 users with the highest total weight lifted:. \n#SQL query: SELECT User.FirstName, User.LastName, SUM(WeightLifting.Weight * WeightLifting.Repetitions) AS TotalWeightLifted FROM User INNER JOIN WeightLifting ON User.UserID = WeightLifting.UserID GROUP BY User.UserID ORDER BY TotalWeightLifted DESC LIMIT 3\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the most popular equipment types based on the number of rentals.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the most popular equipment types based on the number of rentals.",
    "output": "SELECT Equipment.equipment_type, COUNT(*) as num_rentals FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id GROUP BY Equipment.equipment_type ORDER BY num_rentals DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT Equipment.equipment_type, COUNT(EquipmentRentals.rental_id) AS NumberOfRentals \nFROM Equipment \nINNER JOIN EquipmentRentals \nON Equipment.equipment_id = EquipmentRentals.equipment_id \nGROUP BY Equipment.equipment_type \nORDER BY NumberOfRentals DESC LIMIT 1",
    "prompt_token_number": 335,
    "response_token_number": 59
},
{
    "id": 34064,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Tasks': ['status', 'assigned_to', 'task_id', 'project_id', 'due_date', 'user_id', 'completed', 'task_name', 'created_at', 'completed_at', 'assigned_t', 'assigned', 'date_completed', 'data_table_id', 'completion_time', 'task_description', 'category', 'completion_date', 'open_date', 'priority', 'completed_date', 'start_date', 'estimated_time', 'end_date', 'created_by', 'estimated_duration', 'cost', 'deadline', 'completed_on', 'started_on', 'duration', 'assigned_on', 'date_assigned', 'date_created'], 'Users': ['username', 'email', 'user_id', 'assigned_to', 'completed_tasks', 'total_tasks', 'user_name', 'doe', 'salary', 'num_completed_tasks'], 'Projects': ['project_id', 'project_name', 'created_by', 'completed_count', 'task_count', 'total_task_count', 'completed_task_count', 'status', 'category_id', 'start_date', 'deadline', 'budget', 'end_date', 'estimated_budget']}. \n# the user question is: Find the number of projects each user has worked on in each year:. \n#SQL query: SELECT Users.user_name, strftime('%Y', Projects.start_date) AS year, COUNT(DISTINCT Projects.project_id) AS num_projects FROM Users INNER JOIN Tasks ON Users.user_id = Tasks.assigned_to INNER JOIN Projects ON Tasks.project_id = Projects.project_id GROUP BY Users.user_id, year;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the users who have made payments for a class that has been cancelled.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have made payments for a class that has been cancelled.",
    "output": "SELECT Users.username, Payments.payment_amount FROM Users INNER JOIN Payments ON Users.user_id = Payments.user_id INNER JOIN Classes ON Payments.class_id = Classes.class_id WHERE Classes.is_cancelled = 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Payments": [
            "payment_id",
            "user_id",
            "payment_amount",
            "payment_date",
            "class_id",
            "rental_id",
            "enrollment_id",
            "amount",
            "payment_method"
        ]
    },
    "response_text": "SELECT Users.user_name FROM Users INNER JOIN Payments ON Users.user_id = Payments.user_id INNER JOIN Classes ON Payments.class_id = Classes.class_id WHERE Classes.is_cancelled = 1;",
    "prompt_token_number": 607,
    "response_token_number": 37
},
{
    "id": 34066,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'PlantSpecies': ['id', 'name', 'genus_id', 'scientific_name'], 'PlantSpeciesUses': ['plant_species_id', 'plant_uses_id'], 'PlantUses': ['id', 'name'], 'PlantSpeciesGrowth': ['plant_species_id', 'plant_growth_id'], 'PlantGrowth': ['id', 'name'], 'PlantVariety': ['name', 'species_id']}. \n# the user question is: Find all plant species that have a variety with a name starting with \"Pink\", a growth requirement for \"Sandy clay loam\" or \"Silt loam\", and at least one use for \"Cut flower\":. \n#SQL query: SELECT PlantSpecies.name AS species, PlantVariety.name AS variety, PlantGrowth.name AS growth, PlantUses.name AS use FROM PlantSpecies JOIN PlantVariety ON PlantSpecies.id = PlantVariety.species_id JOIN PlantSpeciesGrowth ON PlantSpecies.id = PlantSpeciesGrowth.plant_species_id JOIN PlantGrowth ON PlantSpeciesGrowth.plant_growth_id = PlantGrowth.id JOIN PlantSpeciesUses ON PlantSpecies.id = PlantSpeciesUses.plant_species_id JOIN PlantUses ON PlantSpeciesUses.plant_uses_id = PlantUses.id WHERE PlantVariety.name LIKE 'Pink%' AND PlantGrowth.name IN ('Sandy clay loam', 'Silt loam') AND PlantUses.name = 'Cut flower';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have enrolled in a class that has been cancelled.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have enrolled in a class that has been cancelled.",
    "output": "SELECT Users.username, Classes.class_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id WHERE Classes.is_cancelled = 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.user_name FROM Users JOIN Enrollments ON Users.user_id = Enrollments.user_id JOIN Classes ON Enrollments.class_id = Classes.class_id WHERE Classes.is_cancelled = 1;",
    "prompt_token_number": 631,
    "response_token_number": 41
},
{
    "id": 34068,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'doctor': ['doctor_id', 'name', 'speciality', 'address', 'experience', 'degree', 'license', 'is_accepting_new_patients', 'specialty', 'email', 'phone_number']}. \n# the user question is: Find the names and addresses of all doctors who have a degree from a medical school in the United States and specialize in neurology:. \n#SQL query: SELECT name, address FROM doctor WHERE degree LIKE '%United States%' AND specialty = 'Neurology';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have enrolled in more than one class in the last week.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have enrolled in more than one class in the last week.",
    "output": "SELECT Users.username, COUNT(*) as num_enrollments FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id WHERE Classes.start_time >= date('now', '-7 days') GROUP BY Users.user_id HAVING COUNT(*) > 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT user_id FROM Enrollments WHERE enrollment_date >= DATE(NOW()) - INTERVAL 7 DAY GROUP BY user_id HAVING COUNT(DISTINCT class_id) > 1;",
    "prompt_token_number": 448,
    "response_token_number": 37
},
{
    "id": 34069,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'News_Article': ['category_id', 'content', 'created_at', 'title', 'user_id', 'id', 'article_id', 'date', 'published_date', 'word_count', 'updated_date', 'author_id', 'publish_date'], 'News_Article_Topic': ['topic_id', 'article_id'], 'News_Topic': ['id', 'name'], 'Article_Rating': ['rating', 'article_id', 'user_id'], 'Article_Read': ['article_id', 'user_id', 'id', 'read_date', 'category_id']}. \n# the user question is: Retrieve the titles and publish dates of articles that have been read by users who have also read articles on topics related to \"Science\" and have rated those articles with at least 3 stars.. \n#SQL query: SELECT title, published_date FROM News_Article WHERE id IN ( SELECT article_id FROM Article_Read WHERE user_id IN ( SELECT user_id FROM Article_Rating JOIN News_Article ON Article_Rating.article_id = News_Article.id JOIN News_Article_Topic ON News_Article.id = News_Article_Topic.article_id JOIN News_Topic ON News_Article_Topic.topic_id = News_Topic.id WHERE News_Topic.name = 'Science' AND rating >= 3 ) );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the users who have not made payments for a class that has already ended.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have not made payments for a class that has already ended.",
    "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id LEFT JOIN Payments ON Enrollments.enrollment_id = Payments.enrollment_id WHERE Classes.end_time < date('now') AND Payments.payment_id IS NULL;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Payments": [
            "payment_id",
            "user_id",
            "payment_amount",
            "payment_date",
            "class_id",
            "rental_id",
            "enrollment_id",
            "amount",
            "payment_method"
        ]
    },
    "response_text": "SELECT Users.user_id, Users.username FROM Users WHERE user_id NOT IN (SELECT user_id FROM Payments WHERE class_id IN (SELECT class_id FROM Classes WHERE end_time < CURRENT_TIMESTAMP));",
    "prompt_token_number": 659,
    "response_token_number": 37
},
{
    "id": 34072,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Tasks': ['status', 'assigned_to', 'task_id', 'project_id', 'due_date', 'user_id', 'completed', 'task_name', 'created_at', 'completed_at', 'assigned_t', 'assigned', 'date_completed', 'data_table_id', 'completion_time', 'task_description', 'category', 'completion_date', 'open_date', 'priority', 'completed_date', 'start_date', 'estimated_time', 'end_date', 'created_by', 'estimated_duration', 'cost', 'deadline', 'completed_on', 'started_on', 'duration', 'assigned_on', 'date_assigned', 'date_created'], 'Users': ['username', 'email', 'user_id', 'assigned_to', 'completed_tasks', 'total_tasks', 'user_name', 'doe', 'salary', 'num_completed_tasks'], 'Projects': ['project_id', 'project_name', 'created_by', 'completed_count', 'task_count', 'total_task_count', 'completed_task_count', 'status', 'category_id', 'start_date', 'deadline', 'budget', 'end_date', 'estimated_budget']}. \n# the user question is: Find the users who have worked on tasks from all projects:. \n#SQL query: SELECT Users.username FROM Users WHERE (SELECT COUNT(DISTINCT Projects.project_id) FROM Projects INNER JOIN Tasks ON Projects.project_id = Tasks.project_id WHERE Tasks.assigned_to = Users.user_id) = (SELECT COUNT(*) FROM Projects);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date']} and \n# the user question: Find the instructors who have taught classes in multiple locations.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught classes in multiple locations.",
    "output": "SELECT Instructors.instructor_id, Users.username, COUNT(DISTINCT Classes.location_id) as num_locations FROM Instructors INNER JOIN Classes ON Instructors.instructor_id = Classes.instructor_id INNER JOIN Users ON Instructors.user_id = Users.user_id GROUP BY Instructors.instructor_id HAVING COUNT(DISTINCT Classes.location_id) > 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name FROM Instructors WHERE (SELECT COUNT(DISTINCT Classes.location_id) FROM Classes WHERE Classes.instructor_id = Instructors.instructor_id) > 1;",
    "prompt_token_number": 587,
    "response_token_number": 38
},
{
    "id": 34075,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Participants': ['first_name', 'last_name', 'participant_id', 'gender', 'age', 'birth_year', 'date_of_birth', 'ag', 'age_group_id', 'parental_edu_id', 'language_group_id'], 'Participant_Tasks': ['task_id', 'participant_id', 'completion_date', 'score', 'completed'], 'Tasks': ['task_id', 'task_name', 'study_id', 'difficulty_level', 'duration', 'difficulty', 'task_category', 'category', 'Tower', 'Hanoi', 'Digit', 'Span', 'Working', 'Spatial', 'Symbol', 'Picture', 'Concepts', 'Coding', 'Regulation', 'Emotional'], 'Researchers': ['first_name', 'last_name', 'researcher_id', 'email', 'title'], 'Studies': ['researcher_id', 'study_end_date', 'study_id', 'completion_date']}. \n# the user question is: Retrieve the names and scores of all participants who have completed the \"Memory Game\" task with a score above 80, along with the name of the researcher who conducted the study:. \n#SQL query: SELECT Participants.first_name, Participants.last_name, Participants.age, Participant_Tasks.score, Researchers.first_name || ' ' || Researchers.last_name AS researcher_name FROM Participants JOIN Participant_Tasks ON Participants.participant_id = Participant_Tasks.participant_id JOIN Tasks ON Participant_Tasks.task_id = Tasks.task_id JOIN Studies ON Tasks.study_id = Studies.study_id JOIN Researchers ON Studies.researcher_id = Researchers.researcher_id WHERE Tasks.task_name = 'Memory Game' AND Participant_Tasks.score > 80;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out the most.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment that has been rented out the most.",
    "output": "SELECT Equipment.equipment_name, COUNT(*) as num_rentals FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id GROUP BY Equipment.equipment_id ORDER BY num_rentals DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT Equipment.equipment_name, COUNT(EquipmentRentals.rental_id) as Rental_Count \nFROM Equipment \nJOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id \nGROUP BY Equipment.equipment_name \nORDER BY Rental_Count DESC \nLIMIT 1;",
    "prompt_token_number": 519,
    "response_token_number": 57
},
{
    "id": 34079,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Product': ['SegmentID', 'ProductName', 'ProductID', 'CompanyID', 'UnitsInStock', 'UnitPrice', 'Category', 'Price', 'Cost', 'CategoryID', 'CurrentInventoryLevel', 'UnitCost', 'Description', 'Discontinued', 'CategoryName', 'SupplierID', 'CostPrice', 'ReorderPoint', 'DiscontinuedDate', 'SubcategoryID', 'SalesPrice', 'QuantityOnHand', 'PromotionID'], 'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID'], 'Company': ['IndustryID', 'CompanyName', 'CompanyID', 'Continent'], 'SalesOrderLineItem': ['ProductID', 'UnitPrice', 'Quantity', 'OrderID', 'OrderDate', 'Price', 'OrderLineID']}. \n# the user question is: Retrieve the list of companies and their respective products with the highest average unit price in the year 2023, sorted by average unit price in descending order:. \n#SQL query: SELECT Company.CompanyName, Product.ProductName, AVG(SalesOrderLineItem.UnitPrice) as AvgUnitPrice FROM Company JOIN Product ON Company.CompanyID = Product.CompanyID JOIN SalesOrderLineItem ON Product.ProductID = SalesOrderLineItem.ProductID JOIN SalesOrder ON SalesOrderLineItem.OrderID = SalesOrder.OrderID WHERE SalesOrder.Year = 2023 GROUP BY Company.CompanyID, Product.ProductID ORDER BY AvgUnitPrice DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the users who have made payments for classes that are fully enrolled.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have made payments for classes that are fully enrolled.",
    "output": "SELECT Users.username, Classes.class_name, Payments.payment_amount FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id INNER JOIN Payments ON Enrollments.enrollment_id = Payments.enrollment_id WHERE Classes.current_enrollment >= Classes.max_capacity;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Payments": [
            "payment_id",
            "user_id",
            "payment_amount",
            "payment_date",
            "class_id",
            "rental_id",
            "enrollment_id",
            "amount",
            "payment_method"
        ]
    },
    "response_text": "SELECT Users.user_id, Users.username \nFROM Users \nJOIN Payments ON Users.user_id = Payments.user_id \nJOIN Enrollments ON Payments.enrollment_id = Enrollments.enrollment_id \nJOIN Classes ON Enrollments.class_id = Classes.class_id \nWHERE Classes.current_enrollment = Classes.max_capacity;",
    "prompt_token_number": 733,
    "response_token_number": 62
},
{
    "id": 34080,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'name', 'Product', 'price', 'category_id', 'rating', 'quantity_in_stock'], 'Order_Items': ['product_id', 'order_id', 'rating', 'quantity', 'customer_id', 'unit_price']}. \n# the user question is: List the products that have been ordered by more than five different customers. \n#SQL query: SELECT p.name FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(DISTINCT oi.customer_id) > 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has never been rented.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment that has never been rented.",
    "output": "SELECT Equipment.equipment_name FROM Equipment LEFT JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_id IS NULL;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT e.equipment_name FROM Equipment e LEFT JOIN EquipmentRentals er ON e.equipment_id = er.equipment_id WHERE er.rental_id IS NULL;",
    "prompt_token_number": 296,
    "response_token_number": 33
},
{
    "id": 34082,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Employees': ['first_name', 'employee_id', 'last_name', 'hire_date', 'salary', 'job_title_id', 'department_id', 'location_id', 'job_title', 'employee_status_id', 'employee_experience', 'certification_id', 'equipment_rental_cost', 'hourly_rate', 'Salary', 'Department'], 'Task_Employees': ['employee_id', 'task_id', 'hours_worked', 'project_id', 'task_employee_id', 'task_employee_role', 'task_employee_cost', 'task_hours', 'rental_id', 'end_date'], 'Tasks': ['start_date', 'task_name', 'due_date', 'end_date', 'task_id', 'priority', 'task_status', 'project_id', 'task_priority_id', 'task_status_id', 'task_start_date', 'task_end_date', 'task_expected_completion_date', 'task_completion_percentage', 'task_estimated_cost', 'task_due_date', 'actual_end_date', 'actual_start_date', 'task_lead_id', 'actual_cost', 'employee_i', 'task_description'], 'Project_Ratings': ['rating', 'project_id', 'total_cost'], 'Project_Statuses': ['project_status_name', 'project_status_id']}. \n# the user question is: List all the employees who have worked on a project with a project rating of \"Poor\" and a project status of \"Cancelled\" or \"Delayed\".. \n#SQL query: SELECT DISTINCT e.first_name, e.last_name FROM Employees e INNER JOIN Task_Employees te ON e.employee_id = te.employee_id INNER JOIN Tasks t ON te.task_id = t.task_id INNER JOIN Projects p ON t.project_id = p.project_id INNER JOIN Project_Ratings pr ON p.project_id = pr.project_id INNER JOIN Project_Statuses ps ON p.project_status_id = ps.project_status_id WHERE pr.rating = 'Poor' AND ps.project_status_name IN ('Cancelled', 'Delayed');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have reviewed a class that they have not enrolled in.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have reviewed a class that they have not enrolled in.",
    "output": "SELECT Users.username, Classes.class_name FROM Users INNER JOIN Reviews ON Users.user_id = Reviews.user_id INNER JOIN Classes ON Reviews.class_id = Classes.class_id LEFT JOIN Enrollments ON Classes.class_id = Enrollments.class_id AND Enrollments.user_id = Users.user_id WHERE Enrollments.enrollment_id IS NULL;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT DISTINCT u.username \nFROM Users u \nINNER JOIN Reviews r ON u.user_id = r.user_id \nLEFT JOIN Enrollments e ON u.user_id = e.user_id AND r.class_id = e.class_id\nWHERE e.class_id IS NULL;",
    "prompt_token_number": 943,
    "response_token_number": 52
},
{
    "id": 34084,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'director_id', 'duration', 'release_date', 'genre', 'genre_id', 'language_id'], 'Film_Actor': ['film_id', 'actor_id']}. \n# the user question is: \"List the film titles and their respective genres for films with more than 3 actors.\". \n#SQL query: SELECT Film.title, Film.genre FROM Film INNER JOIN ( SELECT film_id FROM Film_Actor GROUP BY film_id HAVING COUNT(actor_id) > 3 ) AS Subquery ON Film.film_id = Subquery.film_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the users who have made payments for classes that start in the future.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have made payments for classes that start in the future.",
    "output": "SELECT Users.username, Classes.class_name, Payments.payment_amount, Classes.start_time FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id INNER JOIN Payments ON Enrollments.enrollment_id = Payments.enrollment_id WHERE Classes.start_time > date('now') ORDER BY Classes.start_time ASC;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Payments": [
            "payment_id",
            "user_id",
            "payment_amount",
            "payment_date",
            "class_id",
            "rental_id",
            "enrollment_id",
            "amount",
            "payment_method"
        ]
    },
    "response_text": "SELECT Users.user_id, Users.username FROM Users INNER JOIN Payments ON Users.user_id = Payments.user_id INNER JOIN Classes ON Payments.class_id = Classes.class_id WHERE Classes.start_time > CURRENT_TIMESTAMP;",
    "prompt_token_number": 505,
    "response_token_number": 39
},
{
    "id": 34088,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['email', 'username', 'user_id'], 'MeditationSessions': ['duration_minutes', 'session_notes', 'session_id', 'user_id', 'session_date', 'technique_id', 'course_id', 'exercise_id', 'session_datetime']}. \n# the user question is: Find the average duration of meditation sessions for each user, sorted in descending order:. \n#SQL query: SELECT Users.username, AVG(MeditationSessions.duration_minutes) AS average_duration FROM Users JOIN MeditationSessions ON Users.user_id = MeditationSessions.user_id GROUP BY Users.user_id ORDER BY average_duration DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out for the longest period of time.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment that has been rented out for the longest period of time.",
    "output": "SELECT Equipment.equipment_name, EquipmentRentals.rental_start_time, EquipmentRentals.rental_end_time, julianday(EquipmentRentals.rental_end_time) - julianday(EquipmentRentals.rental_start_time) AS rental_duration FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id ORDER BY rental_duration DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT Equipment.equipment_name, MAX(EquipmentRentals.rental_end_date - EquipmentRentals.rental_start_date) AS rental_duration \nFROM EquipmentRentals \nJOIN Equipment ON EquipmentRentals.equipment_id = Equipment.equipment_id \nGROUP BY Equipment.equipment_name \nORDER BY rental_duration DESC\nLIMIT 1;",
    "prompt_token_number": 309,
    "response_token_number": 67
},
{
    "id": 34089,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'accounts': ['account_type', 'interest_rate', 'balance', 'account_id', 'user_id', 'account_balance', 'last_accessed', 'account_holder_id', 'date_opened', 'interest_earned', 'is_joint', 'branch_id'], 'account_holders': ['name', 'account_holder_id', 'address', 'phone']}. \n# the user question is: Show the names and addresses of all account holders who have at least one joint account.. \n#SQL query: SELECT DISTINCT ah.name, ah.address FROM account_holders ah INNER JOIN accounts a ON ah.account_holder_id = a.account_holder_id WHERE a.is_joint = 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have been reviewed by users who have not attended those classes.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have been reviewed by users who have not attended those classes.",
    "output": "SELECT Users.username, Reviews.review_text, Classes.class_name FROM Users INNER JOIN Reviews ON Users.user_id = Reviews.user_id INNER JOIN Classes ON Reviews.class_id = Classes.class_id LEFT JOIN Enrollments ON Users.user_id = Enrollments.user_id AND Classes.class_id = Enrollments.class_id WHERE Enrollments.enrollment_id IS NULL;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT DISTINCT c.class_name FROM Classes c INNER JOIN Reviews r ON c.class_id = r.class_id LEFT JOIN Enrollments e ON r.user_id = e.user_id AND r.class_id = e.class_id WHERE e.class_id IS NULL;",
    "prompt_token_number": 528,
    "response_token_number": 49
},
{
    "id": 34090,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue'], 'User': ['user_id', 'username', 'country_id'], 'Watchlist': ['date_added', 'user_id', 'film_id', 'timestamp'], 'Director': ['last_name', 'director_id', 'first_name', 'country_id', 'production_company_id', 'gender']}. \n# the user question is: Find the users who have watched all the films directed by 'Christopher Nolan':. \n#SQL query: SELECT User.username FROM User WHERE ( SELECT COUNT(DISTINCT Film.film_id) FROM Film INNER JOIN Watchlist ON Film.film_id = Watchlist.film_id AND Watchlist.user_id = User.user_id WHERE Film.director_id IN ( SELECT Director.director_id FROM Director WHERE Director.first_name = 'Christopher' AND Director.last_name = 'Nolan' ) ) = ( SELECT COUNT(DISTINCT Film.film_id) FROM Film WHERE Film.director_id IN ( SELECT Director.director_id FROM Director WHERE Director.first_name = 'Christopher' AND Director.last_name = 'Nolan' ) ) ;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the users who have made payments for classes that have not been cancelled and start in the next 7 days.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have made payments for classes that have not been cancelled and start in the next 7 days.",
    "output": "SELECT Users.username, Classes.class_name, Payments.payment_amount, Classes.start_time FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id INNER JOIN Payments ON Enrollments.enrollment_id = Payments.enrollment_id WHERE Classes.is_cancelled = 0 AND Classes.start_time BETWEEN date('now') AND date('now', '+7 days') ORDER BY Classes.start_time ASC;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Payments": [
            "payment_id",
            "user_id",
            "payment_amount",
            "payment_date",
            "class_id",
            "rental_id",
            "enrollment_id",
            "amount",
            "payment_method"
        ]
    },
    "response_text": "SELECT Users.user_id, Users.username FROM Users\nINNER JOIN Payments ON Users.user_id = Payments.user_id\nINNER JOIN Classes ON Payments.class_id = Classes.class_id\nWHERE Classes.is_cancelled = 0 AND Classes.start_time BETWEEN NOW() AND DATE_ADD(NOW(), INTERVAL 7 DAY);",
    "prompt_token_number": 674,
    "response_token_number": 60
},
{
    "id": 34092,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Credit_Card_Dataset': ['Credit_Limit', 'Education', 'Marital_Status', 'Gender', 'Age', 'Education_Level', 'Card_Type', 'Balance']}. \n# the user question is: What is the average value of the 'Balance' column in the 'Credit Card Dataset' for each 'Education Level' value?. \n#SQL query: SELECT Education_Level, AVG(Balance) FROM Credit_Card_Dataset GROUP BY Education_Level;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have enrolled in classes taught by an instructor who has been reviewed in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have enrolled in classes taught by an instructor who has been reviewed in the last month.",
    "output": "SELECT DISTINCT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id INNER JOIN Instructors ON Classes.instructor_id = Instructors.instructor_id INNER JOIN Reviews ON Instructors.instructor_id = Reviews.instructor_id WHERE Reviews.review_date >= date('now', '-1 month');",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT DISTINCT Users.user_id, Users.username \nFROM Users \nJOIN Enrollments ON Users.user_id = Enrollments.user_id \nJOIN Classes ON Enrollments.class_id = Classes.class_id \nJOIN Instructors ON Classes.instructor_id = Instructors.instructor_id \nJOIN Reviews ON Instructors.instructor_id = Reviews.instructor_id \nWHERE Reviews.review_date >= CURDATE() - INTERVAL 1 MONTH;",
    "prompt_token_number": 530,
    "response_token_number": 83
},
{
    "id": 34093,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Tracks': ['track_id', 'track_title', 'duration', 'album_id', 'track_name', 'genre_id', 'rating', 'artist_id', 'release_id'], 'UserFavorites': ['track_id', 'user_id', 'genre_id', 'favorite_date'], 'TrackPlays': ['track_id', 'user_id', 'play_id', 'play_date', 'play_count'], 'TrackRatings': ['track_id', 'rating', 'genre_id']}. \n# the user question is: Retrieve the top 5 tracks with the highest average rating among tracks that have been favorited by at least 5 users and played more than 100 times:. \n#SQL query: SELECT Tracks.track_name, AVG(TrackRatings.rating) AS avg_rating FROM Tracks JOIN UserFavorites ON Tracks.track_id = UserFavorites.track_id JOIN TrackPlays ON Tracks.track_id = TrackPlays.track_id JOIN TrackRatings ON Tracks.track_id = TrackRatings.track_id GROUP BY Tracks.track_id HAVING COUNT(DISTINCT UserFavorites.user_id) >= 5 AND SUM(TrackPlays.play_count) > 100 ORDER BY avg_rating DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out for more than 3 hours.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment that has been rented out for more than 3 hours.",
    "output": "SELECT Equipment.equipment_name, EquipmentRentals.rental_start_time, EquipmentRentals.rental_end_time, julianday(EquipmentRentals.rental_end_time) - julianday(EquipmentRentals.rental_start_time) AS rental_duration FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE rental_duration > 3.0/24.0;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT Equipment.equipment_name \nFROM Equipment \nJOIN EquipmentRentals \nON Equipment.equipment_id = EquipmentRentals.equipment_id \nWHERE (TIME_TO_SEC(TIMEDIFF(EquipmentRentals.rental_end_time, EquipmentRentals.rental_start_time))/3600) > 3;\n",
    "prompt_token_number": 424,
    "response_token_number": 61
},
{
    "id": 34097,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']}. \n# the user question is: List the names of all customers who have placed an order for a product that has a discount of 15% or more and a price greater than $100.. \n#SQL query: SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price > 100 AND p.Product_Discount >= 0.15;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have more than 5 users enrolled.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have more than 5 users enrolled.",
    "output": "SELECT Classes.class_name, COUNT(*) as num_enrollments FROM Classes INNER JOIN Enrollments ON Classes.class_id = Enrollments.class_id GROUP BY Classes.class_id HAVING num_enrollments > 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT c.class_name FROM Classes c INNER JOIN (SELECT class_id, COUNT(user_id) as num_users FROM Enrollments GROUP BY class_id) e ON c.class_id = e.class_id WHERE e.num_users > 5;",
    "prompt_token_number": 618,
    "response_token_number": 47
},
{
    "id": 34098,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Sale_Items': ['product_id', 'sale_id', 'quantity', 'sale_item_id', 'customer_id', 'unit_price', 'discount_code', 'sale_date', 'price']}. \n# the user question is: Retrieve the names of all products that have been sold in quantities greater than 50, along with the total quantity sold.. \n#SQL query: SELECT Products.product_name, SUM(Sale_Items.quantity) AS total_quantity FROM Products INNER JOIN Sale_Items ON Products.product_id = Sale_Items.product_id GROUP BY Products.product_id HAVING total_quantity > 50;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the users who have made payments for more than one class in the same day.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have made payments for more than one class in the same day.",
    "output": "SELECT Users.username, COUNT(DISTINCT Classes.class_id) as num_classes, Payments.payment_amount, Payments.payment_date FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id INNER JOIN Payments ON Enrollments.enrollment_id = Payments.enrollment_id GROUP BY Users.user_id, Payments.payment_date HAVING num_classes > 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Payments": [
            "payment_id",
            "user_id",
            "payment_amount",
            "payment_date",
            "class_id",
            "rental_id",
            "enrollment_id",
            "amount",
            "payment_method"
        ]
    },
    "response_text": "SELECT Users.username\nFROM Users\nINNER JOIN Payments ON Users.user_id = Payments.user_id\nWHERE Payments.payment_date IN (\n    SELECT payment_date\n    FROM Payments\n    GROUP BY user_id, payment_date\n    HAVING COUNT(DISTINCT class_id) > 1\n);",
    "prompt_token_number": 587,
    "response_token_number": 58
},
{
    "id": 34100,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Trip': ['trip_id', 'user_id', 'vehicle_id', 'route_id', 'start_time', 'end_time', 'status', 'fare_id', 'is_cancelled', 'passenger_id', 'driver_id', 'driver_rating', 'check_in_time', 'check_out_time', 'fare', 'distance', 'fare_amount', '[start_date]', '[end_date]', '[driver_id]', '[year]', '[vehicle_id]', 'duration', 'date', 'fare_rate', 'start_city', 'end_location', 'start_location', 'destination_id', 'cost', 'origin_id', 'destination', 'source', 'tip_amount', 'customer_id']}. \n# the user question is: Retrieve the average distance traveled per trip for Route 4:. \n#SQL query: SELECT AVG(Trip.distance) AS avg_distance FROM Trip WHERE Trip.route_id = 4;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out the most in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment that has been rented out the most in the last month.",
    "output": "SELECT Equipment.equipment_name, COUNT(*) as num_rentals FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_start_time >= date('now', '-1 month') GROUP BY Equipment.equipment_id ORDER BY num_rentals DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT Equipment.equipment_name, COUNT(EquipmentRentals.rental_id) AS rental_count \nFROM EquipmentRentals \nJOIN Equipment ON Equipment.equipment_id = EquipmentRentals.equipment_id \nWHERE EquipmentRentals.rental_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) \nGROUP BY Equipment.equipment_name \nORDER BY rental_count DESC \nLIMIT 1;",
    "prompt_token_number": 366,
    "response_token_number": 79
},
{
    "id": 34104,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Genres': ['genre_id', 'game_id'], 'Genres': ['genre_id', 'genre_name'], 'Game_Ratings': ['rating_id', 'game_id'], 'Ratings': ['rating_name', 'rating_id', 'rating_value']}. \n# the user question is: Find the names of all games that have a genre with a name containing \"horror\" and a rating of \"AO (Adults Only)\".. \n#SQL query: SELECT DISTINCT Games.game_title FROM Games INNER JOIN Game_Genres ON Games.game_id = Game_Genres.game_id INNER JOIN Genres ON Game_Genres.genre_id = Genres.genre_id INNER JOIN Game_Ratings ON Games.game_id = Game_Ratings.game_id INNER JOIN Ratings ON Game_Ratings.rating_id = Ratings.rating_id WHERE Genres.genre_name LIKE '%horror%' AND Ratings.rating_name = 'AO (Adults Only)';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the classes that have not been cancelled and have not reached their maximum capacity.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have not been cancelled and have not reached their maximum capacity.",
    "output": "SELECT Classes.class_name, Locations.location_name, Classes.max_capacity - COUNT(Enrollments.enrollment_id) as num_spots_available FROM Classes INNER JOIN Locations ON Classes.location_id = Locations.location_id LEFT JOIN Enrollments ON Classes.class_id = Enrollments.class_id WHERE Classes.is_cancelled = 0 AND Classes.max_capacity > COUNT(Enrollments.enrollment_id) GROUP BY Classes.class_id;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Locations": [
            "location_name",
            "location_id",
            "is_available"
        ]
    },
    "response_text": "SELECT DISTINCT Classes.class_name FROM Classes WHERE Classes.is_cancelled = 0 AND Classes.current_enrollment < Classes.max_capacity;",
    "prompt_token_number": 532,
    "response_token_number": 25
},
{
    "id": 34105,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Actor': ['last_name', 'actor_id', 'first_name'], 'Film_Actor': ['film_id', 'actor_id', 'rating'], 'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue'], 'Film_Genre': ['film_id', 'genre_id'], 'Genre': ['name', 'genre_id'], 'Director': ['last_name', 'director_id', 'first_name', 'country_id', 'production_company_id', 'gender'], 'Film_Director': ['film_id', 'director_id']}. \n# the user question is: Find the most common actor in action films directed by Michael Bay:. \n#SQL query: SELECT Actor.first_name, Actor.last_name, COUNT(*) AS num_films FROM Actor INNER JOIN Film_Actor ON Actor.actor_id = Film_Actor.actor_id INNER JOIN Film ON Film_Actor.film_id = Film.film_id INNER JOIN Film_Genre ON Film.film_id = Film_Genre.film_id INNER JOIN Genre ON Film_Genre.genre_id = Genre.genre_id AND Genre.name = 'Action' INNER JOIN Film_Director ON Film.film_id = Film_Director.film_id INNER JOIN Director ON Film_Director.director_id = Director.director_id AND Director.first_name = 'Michael' AND Director.last_name = 'Bay' GROUP BY Actor.actor_id ORDER BY num_films DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out the least in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment that has been rented out the least in the last month.",
    "output": "SELECT Equipment.equipment_name, COUNT(*) as num_rentals FROM Equipment LEFT JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_start_time >= date('now', '-1 month') OR EquipmentRentals.rental_start_time IS NULL GROUP BY Equipment.equipment_id ORDER BY num_rentals ASC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT Equipment.equipment_name, COUNT(*) AS rental_count \nFROM EquipmentRentals \nINNER JOIN Equipment ON EquipmentRentals.equipment_id = Equipment.equipment_id \nWHERE EquipmentRentals.rental_start_date >= CURDATE() - INTERVAL 1 MONTH \nGROUP BY Equipment.equipment_id \nORDER BY rental_count ASC \nLIMIT 1;",
    "prompt_token_number": 526,
    "response_token_number": 69
},
{
    "id": 34108,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue'], 'Film_Genre': ['film_id', 'genre_id'], 'Genre': ['name', 'genre_id'], 'Rating': ['user_id', 'film_id', 'score', 'rating', 'rating_id', 'genre_id'], 'Country': ['country_id', 'name']}. \n# the user question is: Find the countries with the highest average rating for action films released in the year 2020:. \n#SQL query: SELECT Country.name, AVG(Rating.rating) AS avg_rating FROM Country INNER JOIN Film ON Country.country_id = Film.country_id AND Film.release_year = 2020 INNER JOIN Film_Genre ON Film.film_id = Film_Genre.film_id INNER JOIN Genre ON Film_Genre.genre_id = Genre.genre_id AND Genre.name = 'Action' INNER JOIN Rating ON Film.film_id = Rating.film_id GROUP BY Country.country_id ORDER BY avg_rating DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the classes that have been cancelled and have not been rescheduled.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have been cancelled and have not been rescheduled.",
    "output": "SELECT Classes.class_name, Locations.location_name, Classes.start_time, Classes.end_time FROM Classes INNER JOIN Locations ON Classes.location_id = Locations.location_id WHERE Classes.is_cancelled = 1 AND Classes.reschedule_date IS NULL;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Locations": [
            "location_name",
            "location_id",
            "is_available"
        ]
    },
    "response_text": "SELECT Classes.class_name FROM Classes WHERE Classes.is_cancelled = 1 AND Classes.reschedule_date IS NULL;",
    "prompt_token_number": 487,
    "response_token_number": 22
},
{
    "id": 34112,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']}. \n# the user question is: Find the names and birthdates of all artists who have artwork in the \"Musée d'Orsay\" and were born after 1860.. \n#SQL query: SELECT DISTINCT ar.first_name, ar.last_name, ar.date_of_birth FROM artist AS ar INNER JOIN artwork AS a ON ar.artist_id = a.artist_id INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS lo ON al.location_id = lo.location_id WHERE ar.date_of_birth >= '1860-01-01' AND lo.name = 'Musée d\\'Orsay' AND al.end_date IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the users who have attended classes at all available locations.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended classes at all available locations.",
    "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id INNER JOIN Locations ON Classes.location_id = Locations.location_id WHERE Classes.is_available = 1 GROUP BY Users.user_id HAVING COUNT(DISTINCT Locations.location_id) = (SELECT COUNT(DISTINCT location_id) FROM Locations);",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Locations": [
            "location_name",
            "location_id",
            "is_available"
        ]
    },
    "response_text": "SELECT DISTINCT u.username FROM Users AS u INNER JOIN Enrollments AS e ON u.user_id = e.user_id INNER JOIN Classes AS c ON e.class_id = c.class_id INNER JOIN Locations AS l ON c.location_id = l.location_id WHERE l.is_available = TRUE AND e.attendance_status = 'attended';",
    "prompt_token_number": 751,
    "response_token_number": 64
},
{
    "id": 34113,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Insurance': ['insurance_provider', 'patient_id', 'policy_number', 'insurance_id', 'insurance_provider_id', 'coverage_type_id'], 'Insurance_Provider': ['insurance_provider_name', 'insurance_provider_id'], 'Appointment': ['chiropractor_id', 'patient_id', 'appointment_date_time', 'appointment_id', 'insurance_id'], 'Diagnosis': ['diagnosis_name', 'appointment_id', 'diagnosis_description', 'body_part_id', 'diagnosis_id', 'body_part']}. \n# the user question is: Find the number of appointments that were paid for by Aetna insurance and had a diagnosis of 'Arthritis':. \n#SQL query: SELECT COUNT(*) AS num_appointments FROM Appointment a INNER JOIN Insurance i ON a.insurance_id = i.insurance_id INNER JOIN Insurance_Provider ip ON i.insurance_provider_id = ip.insurance_provider_id INNER JOIN Diagnosis d ON a.appointment_id = d.appointment_id WHERE ip.insurance_provider_name = 'Aetna' AND d.diagnosis_name = 'Arthritis';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out for the longest duration in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment that has been rented out for the longest duration in the last month.",
    "output": "SELECT Equipment.equipment_name, SUM(julianday(EquipmentRentals.rental_end_time) - julianday(EquipmentRentals.rental_start_time)) as total_rental_days FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_start_time >= date('now', '-1 month') GROUP BY Equipment.equipment_id ORDER BY total_rental_days DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT e.equipment_name FROM Equipment e INNER JOIN EquipmentRentals er ON e.equipment_id = er.equipment_id WHERE er.rental_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) ORDER BY (er.rental_end_date - er.rental_start_date) DESC LIMIT 1;",
    "prompt_token_number": 403,
    "response_token_number": 65
},
{
    "id": 34115,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'News_Article': ['category_id', 'content', 'created_at', 'title', 'user_id', 'id', 'article_id', 'date', 'published_date', 'word_count', 'updated_date', 'author_id', 'publish_date'], 'News_Author': ['id', 'name', 'published_articles_count', 'latest_published_date', 'category_count', 'author_id'], 'News_Article_Category': ['category_id', 'article_id', 'id']}. \n# the user question is: Retrieve the names of authors who have published articles in at least two different categories.. \n#SQL query: SELECT News_Author.name FROM News_Author JOIN News_Article ON News_Author.id = News_Article.author_id JOIN News_Article_Category ON News_Article.id = News_Article_Category.article_id GROUP BY News_Author.id HAVING COUNT(DISTINCT News_Article_Category.category_id) >= 2;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have the highest average rating.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have the highest average rating.",
    "output": "SELECT Classes.class_name, AVG(Reviews.rating) as avg_rating FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Reviews ON Enrollments.enrollment_id = Reviews.enrollment_id GROUP BY Classes.class_id ORDER BY avg_rating DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Classes.class_name, AVG(Reviews.rating) as average_rating \nFROM Classes \nJOIN Reviews ON Classes.class_id = Reviews.class_id \nGROUP BY Classes.class_name \nORDER BY average_rating DESC \nLIMIT 1;",
    "prompt_token_number": 606,
    "response_token_number": 44
},
{
    "id": 34116,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Sites': ['site_id', 'name', 'location', 'date_discovered', 'excavated_by', 'culture_id', 'description'], 'Excavations': ['excavation_id', 'site_id', 'start_date', 'end_date', 'description', 'excavated_by'], 'Artifacts': ['artifact_id', 'excavation_id', 'name', 'type', 'description', 'weight']}. \n# the user question is: Retrieve the names and descriptions of sites where the average weight of artifacts is greater than 10 grams:. \n#SQL query: SELECT Sites.name, Sites.description FROM Sites JOIN Excavations ON Sites.site_id = Excavations.site_id JOIN Artifacts ON Excavations.excavation_id = Artifacts.excavation_id GROUP BY Sites.name, Sites.description HAVING AVG(Artifacts.weight) > 10;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended the most classes in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended the most classes in the last month.",
    "output": "SELECT Users.username, COUNT(Enrollments.enrollment_id) AS num_enrollments FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id ORDER BY num_enrollments DESC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.username, COUNT(*) as class_count \nFROM Users \nJOIN Enrollments ON Users.user_id = Enrollments.user_id \nJOIN ClassSessions ON Enrollments.class_id = ClassSessions.class_id \nWHERE ClassSessions.session_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() AND Enrollments.attendance_status = 'attended' \nGROUP BY Users.username \nORDER BY class_count DESC \nLIMIT 1;",
    "prompt_token_number": 468,
    "response_token_number": 91
},
{
    "id": 34118,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'name', 'email', 'password', 'created_at', 'project_id', 'role', 'updated_at', 'last_login', 'doe', 'johndoe'], 'Tasks': ['task_id', 'name', 'description', 'project_id', 'user_id', 'created_at', 'priority', 'updated_at', 'status', 'Completed', 'assigned_at', 'completed_at', 'due_date', 'time_spent', 'last_updated', 'category_id']}. \n# the user question is: Get the name and number of tasks for each user in the project with id 1 that have been completed within the last 30 days:. \n#SQL query: SELECT Users.name, COUNT(DISTINCT Tasks.task_id) AS num_tasks_completed FROM Users LEFT JOIN Tasks ON Users.user_id = Tasks.user_id WHERE Tasks.project_id = 1 AND Tasks.status = 'Completed' AND Tasks.completed_at > datetime('now', '-30 days') GROUP BY Users.user_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the classes that have been reviewed by users and have an average rating of at least 4.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have been reviewed by users and have an average rating of at least 4.",
    "output": "SELECT Classes.class_name, Locations.location_name, AVG(Reviews.rating) as avg_rating FROM Classes INNER JOIN Locations ON Classes.location_id = Locations.location_id LEFT JOIN Reviews ON Classes.class_id = Reviews.class_id GROUP BY Classes.class_id HAVING AVG(Reviews.rating) >= 4;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ],
        "Locations": [
            "location_name",
            "location_id",
            "is_available"
        ]
    },
    "response_text": "SELECT Classes.class_name FROM Classes INNER JOIN Reviews ON Classes.class_id = Reviews.class_id GROUP BY Classes.class_id HAVING AVG(Reviews.rating) >= 4;",
    "prompt_token_number": 490,
    "response_token_number": 33
},
{
    "id": 34119,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Employee': ['FirstName', 'EmployeeID', 'LastName', 'JobTitle', 'SupervisorID', 'State', 'Country', 'Region', 'EndYear', 'StartYear', 'Continent', 'Title', 'QuarterlySalesTarget', 'EmailAddress', 'HireDate', 'City'], 'EmployeeManager': ['EmployeeID', 'ManagerID', 'EmployeeCount']}. \n# the user question is: Retrieve the list of managers and the average number of employees they manage, sorted by average number of employees managed in descending order:. \n#SQL query: SELECT Manager.FirstName, Manager.LastName, AVG(EmployeeManager.EmployeeCount) as AverageNumberOfEmployeesManaged FROM Employee JOIN EmployeeManager ON Employee.EmployeeID = EmployeeManager.EmployeeID JOIN Employee as Manager ON EmployeeManager.ManagerID = Manager.EmployeeID GROUP BY Manager.EmployeeID ORDER BY AverageNumberOfEmployeesManaged DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out for the shortest duration in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment that has been rented out for the shortest duration in the last month.",
    "output": "SELECT Equipment.equipment_name, EquipmentRentals.rental_start_time, EquipmentRentals.rental_end_time, julianday(EquipmentRentals.rental_end_time) - julianday(EquipmentRentals.rental_start_time) as rental_duration FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_end_time >= date('now', '-1 month') ORDER BY rental_duration ASC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT Equipment.equipment_name, MIN(TIMESTAMPDIFF(MINUTE, EquipmentRentals.rental_start_time, EquipmentRentals.rental_end_time)) as shortest_duration \nFROM EquipmentRentals\nJOIN Equipment ON Equipment.equipment_id = EquipmentRentals.equipment_id\nWHERE EquipmentRentals.rental_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nAND EquipmentRentals.rental_end_date <= CURDATE()\nGROUP BY Equipment.equipment_name\nORDER BY shortest_duration ASC\nLIMIT 1;",
    "prompt_token_number": 361,
    "response_token_number": 107
},
{
    "id": 34123,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Actor': ['actor_id', 'first_name', 'last_name', 'birth_year', 'nationality', 'birthdate', 'birthplace', 'date_of_birth', 'name'], 'Award': ['award_id', 'name', 'category', 'movie_id', 'award_type'], 'ActorAward': ['actor_id', 'award_id']}. \n# the user question is: Show the name and category of all awards won by the actor Tom Hanks.. \n#SQL query: SELECT Award.name, Award.category FROM Award JOIN ActorAward ON Award.award_id = ActorAward.award_id JOIN Actor ON ActorAward.actor_id = Actor.actor_id WHERE Actor.first_name = 'Tom' AND Actor.last_name = 'Hanks';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the users who have made payments for the most expensive classes in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have made payments for the most expensive classes in the last month.",
    "output": "SELECT Users.username, MAX(Classes.price) as max_class_price FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id INNER JOIN Payments ON Enrollments.enrollment_id = Payments.enrollment_id WHERE Payments.payment_date >= date('now', '-1 month') GROUP BY Users.user_id ORDER BY max_class_price DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Payments": [
            "payment_id",
            "user_id",
            "payment_amount",
            "payment_date",
            "class_id",
            "rental_id",
            "enrollment_id",
            "amount",
            "payment_method"
        ]
    },
    "response_text": "SELECT Users.username FROM Users\nJOIN Payments ON Users.user_id = Payments.user_id\nJOIN Classes ON Payments.class_id = Classes.class_id\nWHERE Payments.payment_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE()\nAND Classes.price = (SELECT MAX(Classes.price) FROM Classes WHERE Classes.class_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE());",
    "prompt_token_number": 534,
    "response_token_number": 81
},
{
    "id": 34126,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Participants': ['first_name', 'last_name', 'participant_id', 'gender', 'age', 'birth_year', 'date_of_birth', 'ag', 'age_group_id', 'parental_edu_id', 'language_group_id'], 'Participant_Tasks': ['task_id', 'participant_id', 'completion_date', 'score', 'completed'], 'Tasks': ['task_id', 'task_name', 'study_id', 'difficulty_level', 'duration', 'difficulty', 'task_category', 'category', 'Tower', 'Hanoi', 'Digit', 'Span', 'Working', 'Spatial', 'Symbol', 'Picture', 'Concepts', 'Coding', 'Regulation', 'Emotional']}. \n# the user question is: Retrieve the names and ages of all participants who have completed the \"Memory Game\" task and have achieved a score above the average score for that task:. \n#SQL query: SELECT Participants.first_name, Participants.last_name, Participants.age FROM Participants WHERE Participants.participant_id IN ( SELECT participant_id FROM Participant_Tasks WHERE task_id = ( SELECT task_id FROM Tasks WHERE task_name = 'Memory Game' ) AND score > ( SELECT AVG(score) FROM Participant_Tasks WHERE task_id = ( SELECT task_id FROM Tasks WHERE task_name = 'Memory Game' ) ) );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the classes that have been canceled and not rescheduled.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have been canceled and not rescheduled.",
    "output": "SELECT Classes.class_name, Locations.location_name FROM Classes INNER JOIN Locations ON Classes.location_id = Locations.location_id WHERE Classes.is_cancelled = 1 AND Classes.reschedule_date IS NULL;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Locations": [
            "location_name",
            "location_id",
            "is_available"
        ]
    },
    "response_text": "SELECT class_name FROM Classes WHERE is_cancelled = 1 AND reschedule_date IS NULL;",
    "prompt_token_number": 490,
    "response_token_number": 19
},
{
    "id": 34127,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Films': ['release_date', 'director_id', 'genre_id', 'title', 'film_id', 'duration'], 'Genres': ['name', 'genre_id'], 'Directors': ['name', 'director_id'], 'Ratings': ['user_id', 'rating_value', 'film_id', 'review_id']}. \n# the user question is: Retrieve the film titles and average ratings for comedy films released in the last 5 years, directed by either Richard Linklater or Greta Gerwig, and have an average rating above 4.0:. \n#SQL query: SELECT Films.title, AVG(Ratings.rating_value) AS average_rating FROM Films JOIN Ratings ON Films.film_id = Ratings.film_id JOIN Directors ON Films.director_id = Directors.director_id WHERE Films.genre_id = ( SELECT genre_id FROM Genres WHERE name = 'Comedy' ) AND Films.release_date >= DATE('now', '-5 years') AND (Directors.name = 'Richard Linklater' OR Directors.name = 'Greta Gerwig') GROUP BY Films.film_id HAVING AVG(Ratings.rating_value) > 4.0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have enrolled in the most classes in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have enrolled in the most classes in the last month.",
    "output": "SELECT Users.username, COUNT(*) as num_enrollments FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id WHERE Enrollments.enrollment_date >= date('now', '-1 month') GROUP BY Users.user_id ORDER BY num_enrollments DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.username, COUNT(Enrollments.class_id) AS num_classes\nFROM Users\nJOIN Enrollments ON Users.user_id = Enrollments.user_id\nWHERE Enrollments.enrollment_date >= DATE('now', '-1 month')\nGROUP BY Users.user_id\nORDER BY num_classes DESC\nLIMIT 1;",
    "prompt_token_number": 576,
    "response_token_number": 66
},
{
    "id": 34129,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Volume': ['series_id', 'id', 'title', 'publisher_id', 'issue_count', 'volume_id', 'publication_date', 'publication_year', 'release_date', 'price', 'format'], 'Series': ['publisher_id', 'title', 'id', 'universe', 'start_date', 'main_protagonist_id', 'rating'], 'Publisher': ['name', 'id', 'country', 'Image', 'Comics'], 'Review': ['rating', 'issue_id', 'id', 'user_id']}. \n# the user question is: Find the names of all volumes that have been published by Vertigo Comics and have at least one issue with a rating of 5, but none with a rating of 1.. \n#SQL query: SELECT DISTINCT v.title FROM Volume v JOIN Series s ON v.series_id = s.id JOIN Publisher p ON s.publisher_id = p.id AND p.name = 'Vertigo Comics' JOIN Issue i ON v.id = i.volume_id JOIN Review r ON i.id = r.issue_id WHERE r.rating = 5 AND v.id NOT IN ( SELECT DISTINCT v.id FROM Volume v JOIN Series s ON v.series_id = s.id JOIN Publisher p ON s.publisher_id = p.id AND p.name = 'Vertigo Comics' JOIN Issue i ON v.id = i.volume_id JOIN Review r ON i.id = r.issue_id WHERE r.rating = 1 );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has never been rented out.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment that has never been rented out.",
    "output": "SELECT Equipment.equipment_name FROM Equipment LEFT JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id GROUP BY Equipment.equipment_id HAVING COUNT(EquipmentRentals.equipment_id) = 0;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT e.equipment_name FROM Equipment e WHERE e.equipment_id NOT IN (SELECT DISTINCT er.equipment_id FROM EquipmentRentals er)",
    "prompt_token_number": 535,
    "response_token_number": 28
},
{
    "id": 34136,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']}. \n# the user question is: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fitness\" and have a budget greater than $9 million:. \n#SQL query: SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 9000000 AND Campaigns.status = 'active';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the users who have attended a class at all available locations.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended a class at all available locations.",
    "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id INNER JOIN Locations ON Classes.location_id = Locations.location_id GROUP BY Users.user_id HAVING COUNT(DISTINCT Locations.location_id) = (SELECT COUNT(DISTINCT location_id) FROM Locations);",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Locations": [
            "location_name",
            "location_id",
            "is_available"
        ]
    },
    "response_text": "SELECT DISTINCT Users.username \nFROM Users \nJOIN Enrollments ON Users.user_id = Enrollments.user_id \nJOIN Classes ON Enrollments.class_id = Classes.class_id \nWHERE Classes.location_id IN (SELECT location_id FROM Locations WHERE is_available = 1);",
    "prompt_token_number": 590,
    "response_token_number": 54
},
{
    "id": 34142,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Marine_Gastropods': ['conservation_status', 'gastropod_name', 'habitat']}. \n# the user question is: Which marine gastropods in the Marine_Gastropods table have a habitat of Mangrove Forests and are classified as Least Concern or Near Threatened?. \n#SQL query: SELECT gastropod_name FROM Marine_Gastropods WHERE habitat = 'Mangrove Forests' AND conservation_status IN ('Least Concern', 'Near Threatened');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the instructors who have taught classes at all locations.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught classes at all locations.",
    "output": "SELECT Instructors.instructor_name FROM Instructors WHERE Instructors.instructor_id IN ( SELECT DISTINCT ClassSessions.instructor_id FROM ClassSessions GROUP BY ClassSessions.instructor_id HAVING COUNT(DISTINCT ClassSessions.location_id) = ( SELECT COUNT(DISTINCT Locations.location_id) FROM Locations ) );",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Locations": [
            "location_name",
            "location_id",
            "is_available"
        ]
    },
    "response_text": "SELECT DISTINCT i.instructor_name \nFROM Instructors i \nWHERE NOT EXISTS (\n    SELECT l.location_id \n    FROM Locations l \n    WHERE NOT EXISTS (\n        SELECT cs.session_id \n        FROM ClassSessions cs\n        WHERE cs.instructor_id = i.instructor_id AND cs.location_id = l.location_id\n    )\n);",
    "prompt_token_number": 311,
    "response_token_number": 67
},
{
    "id": 34149,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'comic_books': ['rating', 'series_name', 'issue_number', 'name', 'cover_artist', 'release_date', 'writer', 'artist', 'id', 'variant_cover', 'cover_price', 'series', 'publisher', 'price', 'genre', 'crossover_event', 'publication_date']}. \n# the user question is: Retrieve the name and issue number of all comic books that have been published by DC Comics and have a price of less than $5, sorted by release date in ascending order.. \n#SQL query: SELECT name, issue_number FROM comic_books WHERE publisher = 'DC Comics' AND price < 5 ORDER BY release_date ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended classes taught by all instructors.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended classes taught by all instructors.",
    "output": "SELECT Users.user_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' GROUP BY Users.user_id HAVING COUNT(DISTINCT ClassSessions.instructor_id) = ( SELECT COUNT(*) FROM Instructors );",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT DISTINCT U.user_id, U.username \nFROM Users U \nJOIN Enrollments E ON U.user_id = E.user_id \nJOIN ClassSessions CS ON E.class_id = CS.class_id \nWHERE CS.instructor_id IN (SELECT instructor_id FROM Instructors) \nGROUP BY U.user_id, U.username \nHAVING COUNT(DISTINCT CS.instructor_id) = (SELECT COUNT(*) FROM Instructors);",
    "prompt_token_number": 463,
    "response_token_number": 84
},
{
    "id": 34150,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Customers': ['CustomerID', 'CustomerName', 'Email', 'CustomerState', 'State', 'JoinDate', 'BillingAddress', 'BillingState', 'ShippingAddress', 'LastName', 'ShippingState', 'Country', 'ShippingCountry'], 'Orders': ['OrderID', 'CustomerID', 'OrderDate', 'TotalCost', 'ShippedDate', 'ShipDate']}. \n# the user question is: Find all customers who have never placed an order:. \n#SQL query: SELECT Customers.CustomerName FROM Customers WHERE NOT EXISTS ( SELECT Orders.CustomerID FROM Orders WHERE Customers.CustomerID = Orders.CustomerID );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out for the longest total duration in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment that has been rented out for the longest total duration in the last month.",
    "output": "SELECT Equipment.equipment_name, SUM(julianday(EquipmentRentals.rental_end_time) - julianday(EquipmentRentals.rental_start_time)) as total_rental_duration FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_start_time >= date('now', '-1 month') GROUP BY Equipment.equipment_id ORDER BY total_rental_duration DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT Equipment.equipment_name, SUM(TIMESTAMPDIFF(SECOND, EquipmentRentals.rental_start_time, EquipmentRentals.rental_end_time)) AS total_duration\nFROM Equipment\nJOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id\nWHERE EquipmentRentals.rental_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY Equipment.equipment_name\nORDER BY total_duration DESC\nLIMIT 1;",
    "prompt_token_number": 314,
    "response_token_number": 93
},
{
    "id": 34154,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'employees': ['manager_id', 'gender', 'salary', 'department_id', 'employee_id', 'hire_date', 'employee_name', 'id', 'performance_rating', 'last_login_date', 'name', 'job_title', 'date_joined', 'department', 'age'], 'departments': ['Sales', 'department_name', 'department_id', 'Finance', 'name', 'department_head_id', 'IT', 'id', 'Marketing']}. \n# the user question is: Find the average salary of female employees in the Sales department.. \n#SQL query: SELECT AVG(salary) AS avg_salary FROM employees WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Sales') AND gender = 'female';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has never been rented out for more than 1 hour.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment that has never been rented out for more than 1 hour.",
    "output": "SELECT Equipment.equipment_name FROM Equipment WHERE Equipment.equipment_id NOT IN ( SELECT EquipmentRentals.equipment_id FROM EquipmentRentals WHERE (julianday(EquipmentRentals.rental_end_time) - julianday(EquipmentRentals.rental_start_time)) * 24 >= 1 );",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT equipment_name FROM Equipment WHERE equipment_id NOT IN (SELECT equipment_id FROM EquipmentRentals WHERE rental_end_time - rental_start_time > 1);",
    "prompt_token_number": 336,
    "response_token_number": 30
},
{
    "id": 34155,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Equipment': ['equipment_id', 'unit_cost', 'equipment_name', 'equipment_type', 'rental_rate', 'project_id', 'supplier_id', 'rental_price_per_day'], 'Equipment_Rentals': ['equipment_id', 'rental_return_date', 'rental_start_date', 'rental_end_date', 'equipment_rental_cost', 'rental_id', 'rental_date', 'rental_cost', 'project_id', 'end_date', 'start_date', 'task_id']}. \n# the user question is: List all the equipment that has been rented out for more than 30 days and has not been returned.. \n#SQL query: SELECT DISTINCT e.equipment_name FROM Equipment e INNER JOIN Equipment_Rentals er ON e.equipment_id = er.equipment_id WHERE er.rental_return_date IS NULL AND DATE(er.rental_start_date, '+30 days') < DATE('now');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended the most sessions in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended the most sessions in the last month.",
    "output": "SELECT Users.username, COUNT(DISTINCT ClassSessions.session_id) AS num_sessions FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id ORDER BY num_sessions DESC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT u.user_id, u.username, COUNT(e.session_id) as session_count\nFROM Users u \nJOIN Enrollments e ON u.user_id = e.user_id\nWHERE e.attendance_status = 'attended' AND e.enrollment_date BETWEEN DATE('now', '-1 month') AND DATE('now')\nGROUP BY u.user_id\nORDER BY session_count DESC\nLIMIT 1;",
    "prompt_token_number": 479,
    "response_token_number": 79
},
{
    "id": 34162,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'created_at'], 'Likes': ['user_id', 'entry_id', 'like_id', 'journal_id'], 'Entries': ['journal_id', 'content', 'title', 'entry_id', 'created_at', 'user_id', 'word_count']}. \n# the user question is: Find the users who have created entries but have not received any likes:. \n#SQL query: SELECT Users.username FROM Users JOIN Entries ON Users.user_id = Entries.user_id LEFT JOIN Likes ON Entries.entry_id = Likes.entry_id WHERE Likes.like_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught the most sessions in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught the most sessions in the last month.",
    "output": "SELECT Instructors.instructor_name, COUNT(*) as num_sessions FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_start_time >= date('now', '-1 month') GROUP BY Instructors.instructor_id ORDER BY num_sessions DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name \nFROM Instructors \nJOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id \nWHERE ClassSessions.session_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)\nGROUP BY Instructors.instructor_name \nORDER BY COUNT(*) DESC \nLIMIT 1;",
    "prompt_token_number": 321,
    "response_token_number": 62
},
{
    "id": 34165,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']}. \n# the user question is: List the names of all customers who have placed an order for a product that has a rating of 4 or higher and has been returned.. \n#SQL query: SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Rating >= 4 INNER JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the locations with the highest average class ratings in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the locations with the highest average class ratings in the last month.",
    "output": "SELECT Locations.location_name, AVG(Reviews.rating) as avg_rating FROM Locations INNER JOIN Classes ON Locations.location_id = Classes.location_id INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Reviews ON Enrollments.enrollment_id = Reviews.enrollment_id WHERE Reviews.review_date >= date('now', '-1 month') GROUP BY Locations.location_id ORDER BY avg_rating DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Locations": [
            "location_name",
            "location_id",
            "is_available"
        ]
    },
    "response_text": "SELECT location_name \nFROM Locations l \nJOIN ClassSessions cs ON l.location_id = cs.location_id \nJOIN Reviews r ON cs.class_id = r.class_id \nWHERE DATE(cs.session_date) BETWEEN DATE_SUB(NOW(), INTERVAL 1 MONTH) AND NOW() \nGROUP BY location_name \nORDER BY AVG(r.rating) DESC \nLIMIT 1;",
    "prompt_token_number": 770,
    "response_token_number": 71
},
{
    "id": 34166,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'order_details': ['product_name', 'order_id', 'product_price', 'quantity', 'order_date', 'product_id', 'unit_price'], 'products': ['product_price', 'product_name', 'product_id', 'category_id', 'unit_price', 'quantity_in_stock', 'supplier_id', 'stock_quantity', 'category', 'unit_cost', 'reorder_level', 'etching_method', 'name', 'in_stock', 'price', 'discount', 'Product', 'last_reorder_date', 'collection_id', 'id'], 'categories': ['category_name', 'category_id']}. \n# the user question is: Retrieve the number of products sold for each category in descending order of sales.. \n#SQL query: SELECT c.category_name, SUM(od.quantity) as total_sales FROM categories c INNER JOIN products p ON c.category_id = p.category_id INNER JOIN order_details od ON p.product_id = od.product_id GROUP BY c.category_id ORDER BY total_sales DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has not been rented out in the last 3 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment that has not been rented out in the last 3 months.",
    "output": "SELECT Equipment.equipment_name FROM Equipment WHERE Equipment.equipment_id NOT IN ( SELECT EquipmentRentals.equipment_id FROM EquipmentRentals WHERE EquipmentRentals.rental_start_time >= date('now', '-3 month') );",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT e.equipment_name FROM Equipment e WHERE e.equipment_id NOT IN (SELECT er.equipment_id FROM EquipmentRentals er WHERE er.rental_start_date >= DATE(NOW()) - INTERVAL 3 MONTH);",
    "prompt_token_number": 388,
    "response_token_number": 44
},
{
    "id": 34167,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Cases': ['status', 'user_id', 'title', 'date_closed', 'case_id', 'description', 'date_opened', 'verdict', 'crime_type', 'closed_date', 'open_date', 'CaseID', 'Verdict', 'Type', 'SentenceLength'], 'Suspects': ['case_id', 'suspect_id', 'status', 'last_name', 'first_name', 'age', 'false_identity_used'], 'Evidence': ['case_id', 'evidence_id', 'date_collected', 'type_of_evidence', 'blood', 'DNA', 'fingerprint', 'type', 'evidence_type', 'value'], 'Exam_Results': ['exam_type', 'evidence_id', 'result_id', 'DNA', 'handwriting', 'analysis', 'method']}. \n# the user question is: Get the number of cases where the suspect was identified by at least one of the following analyses: handwriting analysis, voice recognition analysis, or facial recognition analysis.. \n#SQL query: SELECT COUNT(DISTINCT c.case_id) as case_count FROM Cases c INNER JOIN Evidence e ON c.case_id = e.case_id INNER JOIN Exam_Results er ON e.evidence_id = er.evidence_id WHERE er.exam_type IN ('handwriting analysis', 'voice recognition analysis', 'facial recognition analysis') AND EXISTS (SELECT 1 FROM Suspects s WHERE s.case_id = c.case_id);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the instructors who have taught at least 5 different classes in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught at least 5 different classes in the last month.",
    "output": "SELECT Instructors.instructor_name FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE Enrollments.enrollment_date >= date('now', '-1 month') GROUP BY Instructors.instructor_id HAVING COUNT(DISTINCT ClassSessions.class_id) >= 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT i.instructor_name \nFROM Instructors i \nINNER JOIN ClassSessions cs ON i.instructor_id = cs.instructor_id \nWHERE cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) \nGROUP BY i.instructor_id \nHAVING COUNT(DISTINCT cs.class_id) >= 5;",
    "prompt_token_number": 586,
    "response_token_number": 65
},
{
    "id": 34168,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Order_Items': ['price', 'quantity', 'order_id', 'book_id', 'customer_id', 'publisher_id', 'is_returned', 'product_id', 'is_delivered', 'total_price', 'order_date']}. \n# the user question is: Retrieve the top 5 bestselling books of all time in terms of total number of copies sold.. \n#SQL query: SELECT b.book_title, SUM(oi.quantity) AS num_copies_sold FROM Books b JOIN Order_Items oi ON b.book_id = oi.book_id GROUP BY b.book_id ORDER BY num_copies_sold DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended the same class more than once in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended the same class more than once in the last month.",
    "output": "SELECT Users.username, Classes.class_name, COUNT(DISTINCT ClassSessions.session_id) as num_classes_attended FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id, Classes.class_id HAVING num_classes_attended > 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT e.user_id, u.username, COUNT(*) as class_count \nFROM Enrollments e \nJOIN Users u ON e.user_id = u.user_id \nWHERE e.class_id IN (SELECT class_id FROM ClassSessions WHERE session_date >= NOW() - INTERVAL 1 MONTH) \nGROUP BY e.user_id \nHAVING class_count > 1;",
    "prompt_token_number": 633,
    "response_token_number": 71
},
{
    "id": 34169,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Films': ['release_date', 'director_id', 'genre_id', 'title', 'film_id', 'duration'], 'Genres': ['name', 'genre_id'], 'Directors': ['name', 'director_id'], 'Ratings': ['user_id', 'rating_value', 'film_id', 'review_id']}. \n# the user question is: Retrieve the film titles and average ratings for comedy films released in the last 3 years, directed by either Paul Feig or Seth Rogen, and have an average rating above 4.0:. \n#SQL query: SELECT Films.title, AVG(Ratings.rating_value) AS average_rating FROM Films JOIN Directors ON Films.director_id = Directors.director_id JOIN Ratings ON Films.film_id = Ratings.film_id WHERE Films.genre_id = ( SELECT genre_id FROM Genres WHERE name = 'Comedy' ) AND Films.release_date >= DATE('now', '-3 years') AND (Directors.name = 'Paul Feig' OR Directors.name = 'Seth Rogen') GROUP BY Films.film_id HAVING AVG(Ratings.rating_value) > 4.0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Ratings': ['created_at', 'rating', 'session_id', 'class_id', 'user_id']} and \n# the user question: Find the instructors who have taught classes with the highest average rating in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught classes with the highest average rating in the last month.",
    "output": "SELECT Instructors.instructor_name, AVG(Ratings.rating) AS avg_rating FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id LEFT JOIN Ratings ON ClassSessions.session_id = Ratings.session_id WHERE Ratings.created_at BETWEEN date('now', '-1 month') AND date('now') GROUP BY Instructors.instructor_id ORDER BY avg_rating DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Ratings": [
            "created_at",
            "rating",
            "session_id",
            "class_id",
            "user_id"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name, AVG(Ratings.rating) AS average_rating \nFROM Instructors \nJOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id \nJOIN Ratings ON ClassSessions.session_id = Ratings.session_id \nWHERE ClassSessions.session_date >= DATE('now', '-1 month') \nGROUP BY Instructors.instructor_id \nHAVING AVG(Ratings.rating) = (\n  SELECT MAX(average_rating) \n  FROM (\n    SELECT AVG(Ratings.rating) AS average_rating \n    FROM Ratings \n    JOIN ClassSessions ON Ratings.session_id = ClassSessions.session_id \n    WHERE ClassSessions.session_date >= DATE('now', '-1 month') \n    GROUP BY ClassSessions.instructor_id\n  )\n);",
    "prompt_token_number": 455,
    "response_token_number": 148
},
{
    "id": 34170,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Collection': ['collection_id', 'name'], 'Movie_Collection': ['movie_id', 'collection_id']}. \n# the user question is: Retrieve the title of the movie, the name of the collection, and the release year for all movies in the \"Harry Potter\" collection that were released after the year 2005.. \n#SQL query: SELECT Movie.title, Collection.name, Movie.release_year FROM Movie JOIN Movie_Collection ON Movie.movie_id = Movie_Collection.movie_id JOIN Collection ON Movie_Collection.collection_id = Collection.collection_id WHERE Collection.name = 'Harry Potter' AND Movie.release_year > 2005;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the classes with the highest attendance in the last month, along with the corresponding location and instructor.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes with the highest attendance in the last month, along with the corresponding location and instructor.",
    "output": "SELECT Classes.class_name, Locations.location_name, Instructors.instructor_name, COUNT(*) as num_attendances FROM Classes INNER JOIN Locations ON Classes.location_id = Locations.location_id INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Instructors ON ClassSessions.instructor_id = Instructors.instructor_id WHERE Enrollments.enrollment_date >= date('now', '-1 month') GROUP BY Classes.class_id ORDER BY num_attendances DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Locations": [
            "location_name",
            "location_id",
            "is_available"
        ]
    },
    "response_text": "SELECT Classes.class_name, Locations.location_name, Instructors.instructor_name, MAX(Enrollments.num_attendees) \nFROM Classes \nJOIN Enrollments ON Classes.class_id = Enrollments.class_id \nJOIN Locations ON Classes.location_id = Locations.location_id \nJOIN Instructors ON Classes.instructor_id = Instructors.instructor_id \nWHERE Enrollments.enrollment_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE \nGROUP BY Classes.class_name, Locations.location_name, Instructors.instructor_name;",
    "prompt_token_number": 590,
    "response_token_number": 109
},
{
    "id": 34172,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Teams': ['team_name', 'team_id', 'conference_id', 'division_id', 'last_season', 'first_season', 'city_id', 'division_name', 'conference_name', 'season_id', 'head_coach_id', 'city', 'start_date', 'wins', 'losse', 'home_team_id', 'State', 'Golden', 'Warriors', 'away_team_id', 'coach_id', 'conference', 'playoff_record', 'num_mvp', 'year_founded', 'arena_id', 'player_id', 'year_end', 'winning_team_id', 'end_date', 'num_wins', 'opponent_name', 'Name', 'ID', 'Abbreviation', 'City', 'Color', 'Coach', 'Team_ID', 'Team_Name'], 'Games': ['game_id', 'game_date', 'home_team_id', 'away_team_id', 'away_team_score', 'home_team_score', 'season_id', 'arena_id', 'series_id', 'points', 'team_id', 'opponent_points', 'home_points', 'away_points', 'playoff_round', 'points_scored', 'winning_team_id', 'points_allowed', 'losing_team_id', 'round', 'opponent_team_id', 'wins', 'Star', 'losses', 'coach_id', 'game_type', 'player_id', 'win', 'loss', 'home_score', 'away_score', 'month_id', 'day_of_week', 'triple_double', 'playoff_game', 'pts', 'ast', 'three_pt', 'opp_pts', 'blk', 'stl', 'reb', 'AwayTeamScore', 'HomeTeamID', 'Season', 'AwayTeamID', 'HomeTeamScore', 'ID', 'Date', 'HalfTimeAwayTeamScore', 'HalfTimeHomeTeamScore', 'WinnerID', 'Overtime', 'Team_ID', 'Assists']}. \n# the user question is: Retrieve the top 5 teams with the most wins during the 2022 season.. \n#SQL query: SELECT Teams.Name, COUNT(*) AS Wins FROM Teams INNER JOIN Games ON (Games.HomeTeamID = Teams.ID AND Games.HomeTeamScore > Games.AwayTeamScore) OR (Games.AwayTeamID = Teams.ID AND Games.AwayTeamScore > Games.HomeTeamScore) WHERE Games.Date BETWEEN '2022-10-19' AND '2023-04-16' GROUP BY Teams.Name ORDER BY Wins DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has not been rented out in the last 6 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment that has not been rented out in the last 6 months.",
    "output": "SELECT Equipment.equipment_name FROM Equipment WHERE Equipment.equipment_id NOT IN ( SELECT EquipmentRentals.equipment_id FROM EquipmentRentals WHERE EquipmentRentals.rental_start_time >= date('now', '-6 months') );",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT Equipment.equipment_name FROM Equipment WHERE Equipment.equipment_id NOT IN (SELECT EquipmentRentals.equipment_id FROM EquipmentRentals WHERE EquipmentRentals.rental_start_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH));",
    "prompt_token_number": 704,
    "response_token_number": 47
},
{
    "id": 34173,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Employee': ['FirstName', 'EmployeeID', 'LastName', 'JobTitle', 'SupervisorID', 'State', 'Country', 'Region', 'EndYear', 'StartYear', 'Continent', 'Title', 'QuarterlySalesTarget', 'EmailAddress', 'HireDate', 'City'], 'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID'], 'SalesOrderLineItem': ['ProductID', 'UnitPrice', 'Quantity', 'OrderID', 'OrderDate', 'Price', 'OrderLineID'], 'Customer': ['CustomerName', 'CustomerID', 'Country', 'SegmentID', 'Continent', 'PhoneNumber', 'Email', 'CreditLimit', 'State', 'AddressID', 'EmailAddress', 'LoyaltyLevelID', 'FirstName', 'LastName', 'City', 'StateCode', 'CountryCode', 'RegistrationDate']}. \n# the user question is: Retrieve the list of sales orders that have been shipped to customers in the same city as the employee who processed the order, along with the employee's first and last name and the customer's first and last name, sorted by employee's last name:. \n#SQL query: SELECT Employee.FirstName as EmployeeFirstName, Employee.LastName as EmployeeLastName, Customer.FirstName as CustomerFirstName, Customer.LastName as CustomerLastName, SalesOrder.OrderDate FROM Employee JOIN SalesOrder ON Employee.EmployeeID = SalesOrder.EmployeeID JOIN SalesOrderLineItem ON SalesOrder.OrderID = SalesOrderLineItem.OrderID JOIN Customer ON SalesOrder.CustomerID = Customer.CustomerID WHERE Employee.City = Customer.City ORDER BY Employee.LastName;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the locations where classes are consistently rated highly.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the locations where classes are consistently rated highly.",
    "output": "SELECT Locations.location_name, AVG(Reviews.rating) as avg_rating FROM Locations INNER JOIN Classes ON Locations.location_id = Classes.location_id INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Reviews ON Enrollments.enrollment_id = Reviews.enrollment_id GROUP BY Locations.location_id HAVING COUNT(DISTINCT Enrollments.user_id) >= 10 AND AVG(Reviews.rating) >= 4.5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Locations": [
            "location_name",
            "location_id",
            "is_available"
        ]
    },
    "response_text": "SELECT Locations.location_name, AVG(Reviews.rating) as AvgRating\nFROM Locations\nJOIN Classes ON Locations.location_id = Classes.location_id\nJOIN Reviews ON Classes.class_id = Reviews.class_id\nGROUP BY Locations.location_name\nHAVING AVG(Reviews.rating) > 4;",
    "prompt_token_number": 802,
    "response_token_number": 56
},
{
    "id": 34188,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Employees': ['first_name', 'employee_id', 'last_name', 'hire_date', 'salary', 'job_title_id', 'department_id', 'location_id', 'job_title', 'employee_status_id', 'employee_experience', 'certification_id', 'equipment_rental_cost', 'hourly_rate', 'Salary', 'Department'], 'Job_Titles': ['job_title_name', 'job_title_id', 'Project', 'Manager', 'job_title'], 'Project_Managers': ['project_manager_id', 'employee_id', 'project_id'], 'Project_Ratings': ['rating', 'project_id', 'total_cost']}. \n# the user question is: List all the employees who have a job title of \"Project Manager\" and have managed a project with a project rating of \"Excellent\".. \n#SQL query: SELECT DISTINCT e.first_name, e.last_name FROM Employees e INNER JOIN Project_Managers pm ON e.employee_id = pm.employee_id INNER JOIN Projects p ON pm.project_manager_id = p.project_manager_id INNER JOIN Project_Ratings pr ON p.project_id = pr.project_id INNER JOIN Job_Titles jt ON e.job_title_id = jt.job_title_id WHERE jt.job_title_name = 'Project Manager' AND pr.rating = 'Excellent';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the locations where classes have the highest enrollment rate in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the locations where classes have the highest enrollment rate in the last month.",
    "output": "SELECT Locations.location_name, (COUNT(DISTINCT Enrollments.enrollment_id) * 100.0 / COUNT(DISTINCT ClassSessions.session_id)) as enrollment_rate FROM Locations INNER JOIN Classes ON Locations.location_id = Classes.location_id INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE ClassSessions.session_date >= date('now', '-1 month') GROUP BY Locations.location_id ORDER BY enrollment_rate DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Locations": [
            "location_name",
            "location_id",
            "is_available"
        ]
    },
    "response_text": "SELECT l.location_name, COUNT(e.enrollment_id) as enrollment_count\nFROM Locations l\nINNER JOIN Classes c ON l.location_id = c.location_id\nINNER JOIN Enrollments e ON c.class_id = e.class_id\nWHERE e.enrollment_date > DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY l.location_name \nORDER BY enrollment_count DESC\nLIMIT 1;",
    "prompt_token_number": 789,
    "response_token_number": 80
},
{
    "id": 34189,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Creator': ['name', 'id', 'Lee', 'Jim', 'Fabry', 'Glenn', 'McKean'], 'Review': ['rating', 'issue_id', 'id', 'user_id'], 'User': ['username', 'id'], 'User_Review': ['user_id', 'review_id', 'id'], 'Creator_Appearance': ['creator_id', 'issue_id', 'series_id', 'role', 'volume_id']}. \n# the user question is: Find the names of all users who have given a rating of 1 to an issue that has been illustrated by Frank Miller.. \n#SQL query: SELECT DISTINCT User.username FROM User JOIN User_Review ur ON User.id = ur.user_id JOIN Review r ON ur.review_id = r.id JOIN Issue i ON r.issue_id = i.id JOIN Creator_Appearance ca ON i.id = ca.issue_id JOIN Creator c ON ca.creator_id = c.id AND c.name = 'Frank Miller' WHERE r.rating = 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out the most in the last year.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment that has been rented out the most in the last year.",
    "output": "SELECT Equipment.equipment_name, COUNT(EquipmentRentals.equipment_id) as rental_count FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_start_time >= date('now', '-1 year') GROUP BY Equipment.equipment_id ORDER BY rental_count DESC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT Equipment.equipment_name \nFROM Equipment \nJOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id \nWHERE EquipmentRentals.rental_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) \nGROUP BY Equipment.equipment_id \nORDER BY COUNT(EquipmentRentals.rental_id) DESC \nLIMIT 1;",
    "prompt_token_number": 458,
    "response_token_number": 73
},
{
    "id": 34192,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Borrower': ['borrower_id', 'name', 'contact_info', 'email', 'phone_number', 'address'], 'Loan': ['borrower_id', 'lender_id', 'artwork_id', 'end_date', 'return_date', 'loan_date', 'loan_id', 'requested_return_date', 'loan_start_date', 'due_date', 'exhibition_id', 'collector_id']}. \n# the user question is: Find the names and phone numbers of all borrowers who have overdue loans.. \n#SQL query: SELECT Borrower.name, Borrower.phone_number FROM Borrower INNER JOIN Loan ON Borrower.borrower_id = Loan.borrower_id WHERE Loan.return_date IS NULL AND Loan.due_date < DATE('now');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have the highest average rating in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have the highest average rating in the last month.",
    "output": "SELECT Classes.class_name, AVG(Reviews.rating) as avg_rating FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Reviews ON Enrollments.enrollment_id = Reviews.enrollment_id WHERE Reviews.review_date >= date('now', '-1 month') GROUP BY Classes.class_id ORDER BY avg_rating DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Classes.class_name, AVG(Reviews.rating) as average_rating\nFROM Classes\nJOIN Reviews ON Classes.class_id = Reviews.class_id \nWHERE Reviews.review_date >= DATE('now', '-1 month')\nGROUP BY Classes.class_name \nORDER BY average_rating DESC \nLIMIT 1;",
    "prompt_token_number": 563,
    "response_token_number": 57
},
{
    "id": 34196,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']}. \n# the user question is: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a traffic volume greater than 1 million per month and target users interested in \"Technology\":. \n#SQL query: SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.traffic > 1000000 AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' GROUP BY Campaigns.campaign_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have the lowest average rating in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have the lowest average rating in the last month.",
    "output": "SELECT Classes.class_name, AVG(Reviews.rating) as avg_rating FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Reviews ON Enrollments.enrollment_id = Reviews.enrollment_id WHERE Reviews.review_date >= date('now', '-1 month') GROUP BY Classes.class_id HAVING AVG(Reviews.rating) < 3.5 ORDER BY avg_rating ASC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT C.class_name, AVG(R.rating) AS avg_rating\nFROM Classes C\nJOIN Reviews R ON C.class_id = R.class_id\nWHERE R.review_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE()\nGROUP BY C.class_name\nORDER BY avg_rating ASC\nLIMIT 1;",
    "prompt_token_number": 727,
    "response_token_number": 65
},
{
    "id": 34197,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Therapist_Specialties': ['therapist_id', 'specialty', 'specialty_id'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id'], 'Client_Diagnoses': ['client_id', 'diagnosis_id'], 'Diagnoses': ['id', 'name']}. \n# the user question is: Retrieve the names and number of sessions attended by all clients who have been diagnosed with PTSD and have attended at least one session with a therapist who has a specialty in Cognitive Behavioral Therapy:. \n#SQL query: SELECT c.name, COUNT(DISTINCT s.id) AS sessions_attended FROM Clients c INNER JOIN Session_Attendees sa ON c.id = sa.client_id INNER JOIN Sessions s ON sa.session_id = s.id INNER JOIN Therapists t ON s.therapist_id = t.id INNER JOIN Therapist_Specialties ts ON t.id = ts.therapist_id INNER JOIN Client_Diagnoses cd ON c.id = cd.client_id INNER JOIN Diagnoses d ON cd.diagnosis_id = d.id WHERE ts.specialty = 'Cognitive Behavioral Therapy' AND d.name = 'PTSD' GROUP BY c.id\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has the highest total rental fees in the last year.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment that has the highest total rental fees in the last year.",
    "output": "SELECT Equipment.equipment_name, SUM(EquipmentRentals.rental_fee) as total_rental_fees FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_start_time >= date('now', '-1 year') GROUP BY Equipment.equipment_id ORDER BY total_rental_fees DESC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT e.equipment_name, SUM(er.rental_fee) AS total_rental_fees\nFROM EquipmentRentals er \nINNER JOIN Equipment e ON er.equipment_id = e.equipment_id\nWHERE er.created_at >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\nGROUP BY e.equipment_name\nORDER BY total_rental_fees DESC\nLIMIT 1;",
    "prompt_token_number": 728,
    "response_token_number": 77
},
{
    "id": 34201,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'customers': ['customer_id', 'customer_address', 'customer_name', 'email', 'state', 'first_name', 'last_name', 'name', 'id', 'contact_name', 'country', 'address', 'city'], 'orders': ['customer_id', 'order_id', 'order_date', 'payment_status', 'total_amount', 'delivery_status', 'salesperson_id', 'shipping_state', 'employee_id', 'shipped_date', 'product_id', 'status'], 'order_details': ['product_name', 'order_id', 'product_price', 'quantity', 'order_date', 'product_id', 'unit_price']}. \n# the user question is: Retrieve the customer name and address of all the customers who have ordered more than 10 glass items.. \n#SQL query: SELECT c.customer_name, c.customer_address FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id INNER JOIN order_details od ON o.order_id = od.order_id WHERE od.product_name LIKE '%glass%' GROUP BY c.customer_id HAVING COUNT(*) > 10;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended classes on weekdays only in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended classes on weekdays only in the last month.",
    "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE ClassSessions.session_date >= date('now', '-1 month') AND strftime('%w', ClassSessions.session_date) NOT IN ('0', '6') GROUP BY Users.user_id HAVING COUNT(DISTINCT ClassSessions.session_id) = COUNT(DISTINCT CASE WHEN strftime('%w', ClassSessions.session_date) NOT IN ('0', '6') THEN ClassSessions.session_id END);",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT DISTINCT u.username \nFROM Users u \nINNER JOIN Enrollments e ON u.user_id = e.user_id \nINNER JOIN ClassSessions cs ON e.class_id = cs.class_id \nWHERE cs.session_date BETWEEN DATE_SUB(NOW(), INTERVAL 1 MONTH) AND NOW() \nAND DAYOFWEEK(cs.session_date) IN (2, 3, 4, 5, 6) \nAND e.attendance_status = 'attended';",
    "prompt_token_number": 510,
    "response_token_number": 92
},
{
    "id": 34203,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Films': ['release_date', 'director_id', 'genre_id', 'title', 'film_id', 'duration'], 'Genres': ['name', 'genre_id'], 'Users': ['user_id', 'email', 'username', 'film_id'], 'Reviews': ['user_id', 'film_id', 'review_id', 'rating_value']}. \n# the user question is: List the usernames and email addresses of users who have reviewed at least 5 different comedy films and have an average rating above 4.0:. \n#SQL query: SELECT Users.username, Users.email FROM Users JOIN Reviews ON Users.user_id = Reviews.user_id JOIN Films ON Reviews.film_id = Films.film_id WHERE Films.genre_id = ( SELECT genre_id FROM Genres WHERE name = 'Comedy' ) GROUP BY Users.user_id HAVING COUNT(DISTINCT Films.film_id) >= 5 AND AVG(Reviews.rating_value) > 4.0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out less than 5 times in the last year.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the equipment that has been rented out less than 5 times in the last year.",
    "output": "SELECT Equipment.equipment_name, COUNT(EquipmentRentals.equipment_id) as rental_count FROM Equipment LEFT JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id AND EquipmentRentals.rental_start_time >= date('now', '-1 year') GROUP BY Equipment.equipment_id HAVING COUNT(EquipmentRentals.equipment_id) < 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT Equipment.equipment_name, COUNT(EquipmentRentals.rental_id) AS Rental_Count FROM Equipment LEFT JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.created_at >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY Equipment.equipment_id HAVING Rental_Count < 5;",
    "prompt_token_number": 383,
    "response_token_number": 70
},
{
    "id": 34206,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'game': ['game_mode', 'price', 'name', 'publisher', 'num_players', 'rating', 'platform', 'genre', 'release_year', 'developer', 'platform_count', 'tag', 'game_name', 'release_date', 'multiplayer', 'copies_sold', 'playtime', 'year']}. \n# the user question is: List all publishers and the total number of games they have published.. \n#SQL query: SELECT publisher, COUNT(*) AS total_games FROM game GROUP BY publisher;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that are fully booked for next week.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that are fully booked for next week.",
    "output": "SELECT Classes.class_name, COUNT(DISTINCT Enrollments.user_id) as enrolled_users FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE ClassSessions.session_date >= date('now', 'weekday 0', '+7 days') AND ClassSessions.session_date < date('now', 'weekday 0', '+14 days') GROUP BY Classes.class_id HAVING COUNT(DISTINCT Enrollments.user_id) >= Classes.max_capacity;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT class_name FROM Classes WHERE start_time >= CURDATE() AND start_time < CURDATE() + INTERVAL 1 WEEK AND current_enrollment = max_capacity;",
    "prompt_token_number": 465,
    "response_token_number": 32
},
{
    "id": 34208,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue'], 'Director': ['last_name', 'director_id', 'first_name', 'country_id', 'production_company_id', 'gender'], 'Film_Director': ['film_id', 'director_id']}. \n# the user question is: Find the directors who have directed films in both 2000 and 2020:. \n#SQL query: SELECT Director.first_name, Director.last_name FROM Director WHERE EXISTS ( SELECT Film_Director.director_id FROM Film_Director INNER JOIN Film ON Film_Director.film_id = Film.film_id AND strftime('%Y', Film.release_date) = '2000' WHERE Film_Director.director_id = Director.director_id ) AND EXISTS ( SELECT Film_Director.director_id FROM Film_Director INNER JOIN Film ON Film_Director.film_id = Film.film_id AND strftime('%Y', Film.release_date) = '2020' WHERE Film_Director.director_id = Director.director_id );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught the most classes in the last year.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught the most classes in the last year.",
    "output": "SELECT Instructors.instructor_name, COUNT(DISTINCT ClassSessions.session_id) as taught_classes FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date >= date('now', '-1 year') GROUP BY Instructors.instructor_id ORDER BY taught_classes DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name, COUNT(ClassSessions.class_id) as sessions_count \nFROM Instructors \nINNER JOIN ClassSessions \nON Instructors.instructor_id = ClassSessions.instructor_id \nWHERE ClassSessions.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) \nGROUP BY Instructors.instructor_name \nORDER BY sessions_count DESC \nLIMIT 1;",
    "prompt_token_number": 459,
    "response_token_number": 75
},
{
    "id": 34209,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Employees': ['first_name', 'employee_id', 'last_name', 'job_title', 'territory_id', 'department_id', 'manager_id', 'job_title_id', 'hire_date', 'address', 'birth_date', 'phone', 'title', 'reports_to', 'address_id', 'performance_evaluation_date', 'training_expiry_date', 'schedule_update_date', 'time_off_request_date', 'performance_bonus_date', 'promotion_date', 'overtime_pay_date', 'reassignment_date', 'training_date', 'annual_leave_balance', 'skills_upgrade_date', 'compensatory_time_off_date', 'shift_length', 'last_promotion_date', 'career_development_plan_date', 'last_break_date', 'salary', 'hourly_rate', 'hourly_wage', 'status', 'skill_set', 'ShiftStart', 'ShiftEnd', 'EmployeeID', 'EmployeeName', 'HireDate', 'LastName', 'Title', 'FirstName', 'BirthDate'], 'Employee_Assignments': ['project_id', 'employee_id', 'task_id', 'end_date', 'hours_worked', 'assignment_date'], 'Projects': ['project_id', 'start_date', 'cost', 'project_name', 'end_date', 'project_manager', 'estimated_end_date', 'budget', 'completion_date', 'location_id', 'status', 'due_date']}. \n# the user question is: Find the employees who have worked on the most expensive projects.. \n#SQL query: SELECT Employees.first_name || ' ' || Employees.last_name AS employee_name, SUM(Projects.cost) AS total_project_cost FROM Employees INNER JOIN Employee_Assignments ON Employees.employee_id = Employee_Assignments.employee_id INNER JOIN Projects ON Employee_Assignments.project_id = Projects.project_id GROUP BY Employees.employee_id ORDER BY total_project_cost DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the most popular equipment in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the most popular equipment in the last month.",
    "output": "SELECT Equipment.equipment_name, COUNT(DISTINCT EquipmentRentals.rental_id) as rental_count FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_start_time >= date('now', '-1 month') GROUP BY Equipment.equipment_id ORDER BY rental_count DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "EquipmentRentals": [
            "rental_id",
            "rental_end_date",
            "user_id",
            "rental_start_date",
            "equipment_id",
            "created_at",
            "rental_cost",
            "is_broken",
            "session_id",
            "rental_start_time",
            "rental_end_time",
            "enrollment_id",
            "rental_fee"
        ],
        "Equipment": [
            "equipment_name",
            "equipment_id",
            "equipment_type"
        ]
    },
    "response_text": "SELECT Equipment.equipment_name, COUNT(EquipmentRentals.rental_id) AS rental_count \nFROM Equipment \nJOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id \nWHERE DATE(EquipmentRentals.rental_start_date) >= DATE(NOW()) - INTERVAL 1 MONTH \nGROUP BY Equipment.equipment_name \nORDER BY rental_count DESC \nLIMIT 1;",
    "prompt_token_number": 558,
    "response_token_number": 80
},
{
    "id": 34211,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['user_id', 'Project', 'project_name', 'project_id', 'created_date'], 'Logs': ['user_id', 'project_id', 'log_message', 'log_id', 'log_date', 'log_level']}. \n# the user question is: Text Query: Find the project names and the earliest log date for projects that have at least one log.. \n#SQL query: SELECT Projects.project_name, MIN(Logs.log_date) AS earliest_log_date FROM Projects LEFT JOIN Logs ON Projects.project_id = Logs.project_id WHERE Logs.log_id IS NOT NULL GROUP BY Projects.project_id, Projects.project_name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have the highest ratio of enrolled users to maximum capacity.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have the highest ratio of enrolled users to maximum capacity.",
    "output": "SELECT Classes.class_name, COUNT(DISTINCT Enrollments.user_id) as enrolled_users, Classes.max_capacity, CAST(COUNT(DISTINCT Enrollments.user_id) as float) / CAST(Classes.max_capacity as float) as ratio FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE ClassSessions.session_date >= date('now', '-1 month') GROUP BY Classes.class_id ORDER BY ratio DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Classes.class_name, (COUNT(Enrollments.user_id) / Classes.max_capacity) AS enrollment_ratio FROM Classes LEFT JOIN Enrollments ON Classes.class_id = Enrollments.class_id GROUP BY Classes.class_id, Classes.class_name ORDER BY enrollment_ratio DESC LIMIT 1;",
    "prompt_token_number": 491,
    "response_token_number": 57
},
{
    "id": 34215,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']}. \n# the user question is: Find the titles and mediums of all artwork in the \"Museum of Fine Arts\" that were created by \"Henri Matisse\".. \n#SQL query: SELECT a.title, a.medium FROM artwork AS a INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS l ON al.location_id = l.location_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id WHERE l.name = 'Museum of Fine Arts' AND ar.first_name = 'Henri' AND ar.last_name = 'Matisse' AND al.end_date IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the most popular classes among male users.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the most popular classes among male users.",
    "output": "SELECT Classes.class_name, COUNT(DISTINCT Enrollments.user_id) as enrolled_users FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Users ON Enrollments.user_id = Users.user_id WHERE Users.gender = 'Male' GROUP BY Classes.class_id ORDER BY enrolled_users DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT c.class_name, COUNT(e.user_id) AS MaleEnrollments \nFROM Classes AS c\nINNER JOIN Enrollments AS e ON c.class_id = e.class_id \nINNER JOIN Users AS u ON e.user_id = u.user_id \nWHERE u.gender = 'male' \nGROUP BY c.class_name \nORDER BY MaleEnrollments DESC;",
    "prompt_token_number": 786,
    "response_token_number": 73
},
{
    "id": 34221,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Event': ['event_id', 'name', 'date', 'location', 'description', 'campaign_id', 'state', 'city', 'venue_id', 'start_date', 'price', 'capacity', 'start_time', 'status', 'location_id', 'host_organization', 'Event_Name', 'Event_ID', 'Date_Held'], 'Attendee': ['attendee_id', 'first_name', 'last_name', 'email', 'phone_number'], 'Attendance': ['attendance_id', 'event_id', 'attendee_id']}. \n# the user question is: Retrieve the names and email addresses of all attendees who have registered for events that start within the next week, sorted by event start date:. \n#SQL query: SELECT DISTINCT Attendee.first_name, Attendee.last_name, Attendee.email, Event.start_date FROM Attendee INNER JOIN Attendance ON Attendee.attendee_id = Attendance.attendee_id INNER JOIN Event ON Attendance.event_id = Event.event_id WHERE Event.start_date BETWEEN DATE('now') AND DATE('now', '+1 week') ORDER BY Event.start_date;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have not attended a class in the last 2 weeks.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have not attended a class in the last 2 weeks.",
    "output": "SELECT Users.username FROM Users WHERE Users.user_id NOT IN ( SELECT DISTINCT Enrollments.user_id FROM Enrollments INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE ClassSessions.session_date BETWEEN date('now', '-2 weeks') AND date('now') );",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT DISTINCT Users.user_id, Users.username, Users.email \nFROM Users \nLEFT JOIN Enrollments \nON Users.user_id = Enrollments.user_id\nWHERE (Enrollments.attendance_status IS NULL OR Enrollments.attendance_status = 'Not Attended') AND (Enrollments.enrollment_date < DATE('now','-2 weeks') OR Enrollments.enrollment_date IS NULL);",
    "prompt_token_number": 514,
    "response_token_number": 81
},
{
    "id": 34222,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue'], 'Watchlist': ['date_added', 'user_id', 'film_id', 'timestamp'], 'Rating': ['user_id', 'film_id', 'score', 'rating', 'rating_id', 'genre_id']}. \n# the user question is: Find the films that have been watched by at least 3 users and have a total rating of 25 or higher:. \n#SQL query: SELECT Film.title FROM Film INNER JOIN Watchlist ON Film.film_id = Watchlist.film_id INNER JOIN Rating ON Film.film_id = Rating.film_id GROUP BY Film.film_id HAVING COUNT(DISTINCT Watchlist.user_id) > 2 AND SUM(Rating.score) >= 25;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended more than one class in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended more than one class in the last month.",
    "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id HAVING COUNT(DISTINCT ClassSessions.session_id) > 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.class_id = ClassSessions.class_id WHERE ClassSessions.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY Users.user_id HAVING COUNT(DISTINCT ClassSessions.class_id) > 1;",
    "prompt_token_number": 504,
    "response_token_number": 72
},
{
    "id": 34223,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Participant': ['participant_id', 'age', 'gender', 'education_level', 'native_language'], 'Task': ['task_id', 'task_name', 'description', 'experiment_id'], 'Trial': ['trial_id', 'session_id', 'task_id', 'trial_number', 'stimuli', 'response', 'reaction_time', 'participant_id', 'stimulus_id', 'task_name', 'completion_time'], 'TaskResult': ['task_result_id', 'task_id', 'participant_id', 'accuracy', 'average_reaction_time', 'trial_id', 'session_id', 'task_name']}. \n# the user question is: Retrieve the participant IDs along with the total number of trials and the highest accuracy achieved in the \"Memory Recall\" task, only for participants who have an education level of \"Undergraduate\" or \"Graduate\".. \n#SQL query: SELECT TaskResult.participant_id, COUNT(Trial.trial_id) AS total_trials, MAX(TaskResult.accuracy) AS highest_accuracy FROM TaskResult JOIN Task ON TaskResult.task_id = Task.task_id JOIN Trial ON TaskResult.task_id = Trial.task_id JOIN Participant ON TaskResult.participant_id = Participant.participant_id WHERE Task.task_name = 'Memory Recall' AND Participant.education_level IN ('Undergraduate', 'Graduate') GROUP BY TaskResult.participant_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Categories': ['category_id', 'category_name']} and \n# the user question: Find the users who have attended at least one class in each category.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended at least one class in each category.",
    "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id INNER JOIN Categories ON Classes.category_id = Categories.category_id GROUP BY Users.user_id HAVING COUNT(DISTINCT Categories.category_id) = ( SELECT COUNT(DISTINCT Categories.category_id) FROM Categories );",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Categories": [
            "category_id",
            "category_name"
        ]
    },
    "response_text": "SELECT Users.username\nFROM Users\nWHERE NOT EXISTS (\n    SELECT DISTINCT(category_id) \n    FROM Categories\n    WHERE NOT EXISTS (\n        SELECT Enrollments.user_id \n        FROM Enrollments \n        JOIN Classes ON Enrollments.class_id = Classes.class_id \n        WHERE Classes.category_id = Categories.category_id \n        AND Users.user_id = Enrollments.user_id\n    )\n);",
    "prompt_token_number": 685,
    "response_token_number": 80
},
{
    "id": 34224,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'SmartContractInstance': ['BlockID', 'SmartContractID', 'Creator', 'SmartContractInstanceID', 'Timestamp', 'PublicAddress', 'IsSuccess', 'Function', 'Parameter', 'GasPrice', 'Caller', 'GasUsed', 'Sender', 'ExecutionTime', 'Successful', 'User', 'EndTimestamp', 'Status', 'IsDeployed'], 'SmartContract': ['SmartContractID', 'Code', 'Balance', 'Creator', 'Name']}. \n# the user question is: Find the smart contracts that have the highest number of instances:. \n#SQL query: SELECT SmartContract.SmartContractID, COUNT(SmartContractInstance.SmartContractInstanceID) AS NumInstances FROM SmartContract JOIN SmartContractInstance ON SmartContract.SmartContractID = SmartContractInstance.SmartContractID GROUP BY SmartContract.SmartContractID ORDER BY NumInstances DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught the most classes overall.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught the most classes overall.",
    "output": "SELECT Instructors.instructor_name, COUNT(DISTINCT ClassSessions.session_id) as num_classes_taught FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id GROUP BY Instructors.instructor_id ORDER BY num_classes_taught DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT Instructors.instructor_id, COUNT(ClassSessions.session_id) AS NumClasses FROM Instructors JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id GROUP BY Instructors.instructor_id ORDER BY NumClasses DESC",
    "prompt_token_number": 373,
    "response_token_number": 46
},
{
    "id": 34226,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Match': ['team1_id', 'match_id', 'team2_id', 'venue_id', 'date', 'venue', 'winning_team_id', 'tournament_id', 'attendance', 'team', 'winning_team'], 'Referee': ['referee_name', 'referee_id'], 'Referee_Assignment': ['match_id', 'referee_id'], 'Venue': ['venue_name', 'venue_id', 'country', 'city'], 'Tournament': ['tournament_id', 'country', 'tournament_name', 'start_date', 'venue_id']}. \n# the user question is: Find the referees who have officiated matches in tournaments held in at least 39 different cities and 39 different years. \n#SQL query: SELECT Referee.referee_name FROM Referee JOIN Referee_Assignment ON Referee.referee_id = Referee_Assignment.referee_id JOIN Match ON Referee_Assignment.match_id = Match.match_id JOIN Tournament ON Match.tournament_id = Tournament.tournament_id JOIN Venue ON Tournament.venue_id = Venue.venue_id GROUP BY Referee.referee_name HAVING COUNT(DISTINCT Venue.city) >= 39 AND COUNT(DISTINCT strftime('%Y', Tournament.start_date)) >= 39;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have not reached their minimum capacity for the upcoming week.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have not reached their minimum capacity for the upcoming week.",
    "output": "SELECT Classes.class_name, Classes.min_capacity, COUNT(DISTINCT Enrollments.user_id) as enrolled_users FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE ClassSessions.session_date BETWEEN date('now') AND date('now', '+6 days') GROUP BY Classes.class_id HAVING enrolled_users < Classes.min_capacity;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Classes.class_name \nFROM Classes \nLEFT JOIN Enrollments ON Classes.class_id = Enrollments.class_id \nWHERE Classes.class_date BETWEEN DATE('now') AND DATE('now', '+7 days') \nAND Classes.min_capacity > (SELECT COUNT(Enrollments.user_id) WHERE Enrollments.class_id = Classes.class_id) \nAND Classes.is_available = 1 \nAND Classes.is_cancelled = 0;",
    "prompt_token_number": 618,
    "response_token_number": 87
},
{
    "id": 34227,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {}. \n# the user question is: Find the average heart rate of all clients during their workout sessions.. \n#SQL query: SELECT AVG(heart_rate) FROM workout_sessions;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Categories': ['category_id', 'category_name']} and \n# the user question: Find the total revenue generated from each category in the last quarter.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the total revenue generated from each category in the last quarter.",
    "output": "SELECT Categories.category_name, SUM(Enrollments.payment_amount) as total_revenue FROM Categories INNER JOIN Classes ON Categories.category_id = Classes.category_id INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE ClassSessions.session_date BETWEEN date('now', '-3 months') AND date('now') GROUP BY Categories.category_id;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Categories": [
            "category_id",
            "category_name"
        ]
    },
    "response_text": "SELECT Categories.category_name, SUM(Enrollments.payment_amount) AS Total_Revenue\nFROM Categories \nJOIN Classes ON Categories.category_id = Classes.category_id \nJOIN Enrollments ON Classes.class_id = Enrollments.class_id \nWHERE Enrollments.enrollment_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 QUARTER)\nGROUP BY Categories.category_name;",
    "prompt_token_number": 408,
    "response_token_number": 74
},
{
    "id": 34231,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director', 'runtime', 'budget', 'box_office', 'rating', 'release_date', 'imdb_rating', 'director_id', 'production_company_id', 'box_office_gross'], 'Genre': ['genre_id', 'name'], 'MovieGenre': ['movie_id', 'genre_id']}. \n# the user question is: Show the total runtime of all Western movies in the database.. \n#SQL query: SELECT SUM(Movie.runtime) AS total_runtime FROM Movie JOIN MovieGenre ON Movie.movie_id = MovieGenre.movie_id JOIN Genre ON MovieGenre.genre_id = Genre.genre_id WHERE Genre.name = 'Western';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Categories': ['category_id', 'category_name']} and \n# the user question: Find the users who have attended classes in every category.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended classes in every category.",
    "output": "SELECT Users.username FROM Users WHERE Users.user_id IN ( SELECT DISTINCT Enrollments.user_id FROM Enrollments INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id INNER JOIN Categories ON Classes.category_id = Categories.category_id GROUP BY Enrollments.user_id HAVING COUNT(DISTINCT Categories.category_id) = ( SELECT COUNT(DISTINCT Categories.category_id) FROM Categories ) );",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Categories": [
            "category_id",
            "category_name"
        ]
    },
    "response_text": "SELECT Users.user_id, Users.username FROM Users WHERE NOT EXISTS (SELECT Categories.category_id FROM Categories WHERE NOT EXISTS (SELECT Enrollments.user_id FROM Enrollments JOIN ClassSessions ON Enrollments.class_id = ClassSessions.class_id JOIN Classes ON ClassSessions.class_id = Classes.class_id WHERE Classes.category_id = Categories.category_id AND Enrollments.user_id = Users.user_id))",
    "prompt_token_number": 550,
    "response_token_number": 77
},
{
    "id": 34233,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']}. \n# the user question is: List the names of all products and the total amount of money spent on each product in the year 2022.. \n#SQL query: SELECT p.Product_Name, SUM(oi.Quantity * oi.Price) as Total_Amount_Spent FROM Product p LEFT JOIN Order_Item oi ON p.Product_ID = oi.Product_ID LEFT JOIN Order o ON oi.Order_ID = o.Order_ID AND o.Order_Date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY p.Product_ID;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the classes that are scheduled at least once every day in the next week.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that are scheduled at least once every day in the next week.",
    "output": "SELECT Classes.class_name FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id WHERE ClassSessions.session_date BETWEEN date('now', '+1 day') AND date('now', '+1 week') GROUP BY Classes.class_id HAVING COUNT(DISTINCT strftime('%Y-%m-%d', ClassSessions.session_date)) >= 7;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT c.class_name FROM Classes c\nWHERE NOT EXISTS (\n    SELECT 1 FROM (VALUES ('Monday'), ('Tuesday'), ('Wednesday'), ('Thursday'), ('Friday'), ('Saturday'), ('Sunday')) days(day)\n    WHERE NOT EXISTS (\n        SELECT 1 FROM ClassSessions cs\n        WHERE c.class_id = cs.class_id \n        AND DAYNAME(cs.session_date) = days.day\n        AND cs.session_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 1 WEEK)\n    )\n)\nGROUP BY c.class_name;",
    "prompt_token_number": 540,
    "response_token_number": 109
},
{
    "id": 34235,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']}. \n# the user question is: List the names of all suppliers who have not received any purchases for a product that has a price less than $50 and a discount of 10% or more.. \n#SQL query: SELECT DISTINCT s.Supplier_Name FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID LEFT JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID LEFT JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price < 50 AND pr.Product_Discount >= 0.1 WHERE pi.Product_ID IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught the most number of classes in the last quarter.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught the most number of classes in the last quarter.",
    "output": "SELECT Instructors.instructor_name, COUNT(DISTINCT ClassSessions.session_id) as num_classes_taught FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-3 months') AND date('now') GROUP BY Instructors.instructor_id ORDER BY num_classes_taught DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT i.instructor_name \nFROM Instructors i \nJOIN ClassSessions cs ON i.instructor_id = cs.instructor_id \nWHERE cs.session_date BETWEEN DATE_SUB(NOW(), INTERVAL 3 MONTH) AND NOW() \nGROUP BY i.instructor_name \nORDER BY COUNT(cs.class_id) DESC \nLIMIT 1;",
    "prompt_token_number": 511,
    "response_token_number": 65
},
{
    "id": 34238,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['Price', 'ProductName', 'Category', 'ProductID', 'Cost', 'CategoryID', 'SubcategoryID', 'UnitPrice', 'LastOrderDate', 'UnitsInStock', 'SupplierID', 'UnitCost', 'Discontinued', 'ReorderLevel'], 'OrderDetails': ['ProductID', 'OrderID', 'Quantity', 'UnitCost', 'UnitPrice', 'OrderDate', 'Discount'], 'Categories': ['CategoryID', 'CategoryName', 'Description', 'Name', 'ID']}. \n# the user question is: List all products with their corresponding category name and the total quantity sold, ordered by total quantity sold in descending order:. \n#SQL query: SELECT Products.ProductName, Categories.CategoryName, SUM(OrderDetails.Quantity) AS TotalQuantitySold FROM Products INNER JOIN Categories ON Products.CategoryID = Categories.CategoryID INNER JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID GROUP BY Products.ProductID, Categories.CategoryName ORDER BY TotalQuantitySold DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended the most number of classes in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended the most number of classes in the last month.",
    "output": "SELECT Users.username, COUNT(DISTINCT Enrollments.session_id) as num_classes_attended FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id ORDER BY num_classes_attended DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.user_id, Users.username, COUNT(Enrollments.class_id) AS NumberOfClasses \nFROM Users \nINNER JOIN Enrollments ON Users.user_id = Enrollments.user_id \nWHERE Enrollments.attendance_status = 'attended' AND Enrollments.date > DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)\nGROUP BY Users.user_id \nORDER BY NumberOfClasses DESC;",
    "prompt_token_number": 495,
    "response_token_number": 79
},
{
    "id": 34246,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Instructors': ['instructor_id', 'first_name', 'last_name', 'arrival_time', 'last_taught_date', 'name', 'instructor_name'], 'DanceClasses': ['end_date', 'instructor_id', 'dance_class_id', 'start_date', 'class_name', 'dance_level_id', 'dance_style_id', 'last_taught_date', 'class_date', 'name', 'max_enrollment', 'min_enrollment', 'cost_per_student', 'day_of_week', 'duration', 'start_time', 'num_enrolled', 'capacity', 'level_id', 'end_time', 'location_id', 'class_start_date', 'class_fee', 'class_id', 'class_end_date', 'class_capacity'], 'DanceStyles': ['dance_style_id', 'name', 'Ballet', 'Hip', 'Hop', 'Tango', 'Contemporary', 'Samba', 'Bollywood', 'Swing', 'Salsa', 'Bachata', 'Latin', 'Jazz', 'Tap', 'Merengue', 'Belly', 'Dance', 'Cha', 'Waltz', 'Ballroom', 'Jive', 'Rumba', 'dance_style_name', 'dance_style']}. \n# the user question is: Find the number of classes taught by each instructor in each dance style:. \n#SQL query: SELECT Instructors.instructor_name, DanceStyles.dance_style_name, COUNT(*) AS num_classes FROM Instructors INNER JOIN DanceClasses ON Instructors.instructor_id = DanceClasses.instructor_id INNER JOIN DanceStyles ON DanceClasses.dance_style_id = DanceStyles.dance_style_id GROUP BY Instructors.instructor_id, DanceStyles.dance_style_id\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended at least 5 classes in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended at least 5 classes in the last month.",
    "output": "SELECT Users.username, COUNT(DISTINCT Enrollments.session_id) as num_classes_attended FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id HAVING num_classes_attended >= 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.user_id, Users.username, COUNT(*) AS num_classes \nFROM Users \nINNER JOIN Enrollments ON Users.user_id = Enrollments.user_id \nINNER JOIN ClassSessions ON Enrollments.class_id = ClassSessions.class_id \nWHERE ClassSessions.session_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE \nAND Enrollments.attendance_status = 'attended'\nGROUP BY Users.user_id \nHAVING COUNT(*) >= 5",
    "prompt_token_number": 646,
    "response_token_number": 94
},
{
    "id": 34252,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Inventory': ['product_id', 'supplier_id', 'quantity', 'inventory_id', 'units_in_stock', 'quantity_on_hand', 'expiration_date', 'expected_arrival_date', 'quantity_on_order'], 'Suppliers': ['supplier_name', 'supplier_id', 'phone_number', 'address', 'email', 'country', 'contact_name', 'state', 'city', 'phone', 'company_name', 'Canada', 'USA', 'supplier_rating', 'zip'], 'Sale_Items': ['product_id', 'sale_id', 'quantity', 'sale_item_id', 'customer_id', 'unit_price', 'discount_code', 'sale_date', 'price'], 'Sales': ['employee_id', 'sale_id', 'sale_date', 'customer_id', 'total', 'total_amount', 'payment_method', 'total_price', 'total_spent', 'location_id', 'coupon_code', 'start_date', 'discount_percentage', 'end_date', 'product_id'], 'Product_Ratings': ['rating', 'product_id']}. \n# the user question is: Retrieve the names and total revenue for all products that have not been sold in the last 9 months and have a rating of 3 or higher, and have a supplier based in the USA.. \n#SQL query: SELECT Products.product_name, SUM(Inventory.quantity * Products.price) AS total_revenue FROM Products INNER JOIN Inventory ON Products.product_id = Inventory.product_id LEFT JOIN Sale_Items ON Products.product_id = Sale_Items.product_id INNER JOIN Product_Ratings ON Products.product_id = Product_Ratings.product_id INNER JOIN Suppliers ON Inventory.supplier_id = Suppliers.supplier_id WHERE Product_Ratings.rating >= 3 AND (Sale_Items.sale_item_id IS NULL OR Sale_Items.sale_id NOT IN ( SELECT DISTINCT Sales.sale_id FROM Sales WHERE Sales.sale_date > DATE('now', '-9 months') )) AND Suppliers.country = 'USA' GROUP BY Products.product_id ORDER BY total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Ratings': ['created_at', 'rating', 'session_id', 'class_id', 'user_id']} and \n# the user question: Find the classes with the highest average rating.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes with the highest average rating.",
    "output": "SELECT Classes.class_name, AVG(Ratings.rating) as avg_rating FROM Classes LEFT JOIN Ratings ON Classes.class_id = Ratings.class_id GROUP BY Classes.class_id ORDER BY avg_rating DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Ratings": [
            "created_at",
            "rating",
            "session_id",
            "class_id",
            "user_id"
        ]
    },
    "response_text": "SELECT Classes.class_name, AVG(Ratings.rating) AS average_rating\nFROM Classes\nINNER JOIN Ratings ON Classes.class_id = Ratings.class_id\nGROUP BY Classes.class_name\nORDER BY average_rating DESC\nLIMIT 1;",
    "prompt_token_number": 713,
    "response_token_number": 45
},
{
    "id": 34254,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Event': ['event_id', 'event_name', 'event_date', 'location_id', 'event_category_id', 'event_type_id', 'location', 'venue_id', 'start_date', 'end_date', 'category', 'event_code', 'EVT', 'organizer_id', 'duration', 'name', 'Expo', 'Tech', 'country', 'category_id', 'city', 'ticket_price', 'date', 'start_time', 'end_time', 'min_age_requirement', 'event_type', 'capacity', 'registration_deadline', 'num_attendees', 'min_age', 'duration_hours', 'registration_fee', 'price'], 'Attendee': ['attendee_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'date_of_birth', 'job_title', 'city', 'age', 'email'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID']}. \n# the user question is: What is the name and email address of the attendee who has registered for the most events in the year 2025?. \n#SQL query: SELECT Attendee.first_name, Attendee.last_name, Attendee.email_address FROM Attendee INNER JOIN Registration ON Attendee.attendee_id = Registration.attendee_id INNER JOIN Event ON Registration.event_id = Event.event_id WHERE strftime('%Y', Event.event_date) = '2025' GROUP BY Attendee.attendee_id ORDER BY COUNT(DISTINCT Event.event_id) DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Categories': ['category_id', 'category_name']} and \n# the user question: Find the instructors who have taught classes in at least 3 different categories.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught classes in at least 3 different categories.",
    "output": "SELECT Instructors.instructor_name FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id INNER JOIN Categories ON Classes.category_id = Categories.category_id GROUP BY Instructors.instructor_id HAVING COUNT(DISTINCT Categories.category_id) >= 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Categories": [
            "category_id",
            "category_name"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name \nFROM Instructors \nINNER JOIN Classes ON Instructors.instructor_id = Classes.instructor_id \nINNER JOIN Categories ON Classes.category_id = Categories.category_id \nGROUP BY Instructors.instructor_name \nHAVING COUNT(DISTINCT Categories.category_id) >= 3;",
    "prompt_token_number": 676,
    "response_token_number": 60
},
{
    "id": 34256,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {}. \n# the user question is: Retrieve the maximum and minimum depth of all sampling locations in the database:. \n#SQL query: SELECT MAX(depth), MIN(depth) FROM SamplingLocations;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Ratings': ['created_at', 'rating', 'session_id', 'class_id', 'user_id'], 'Categories': ['category_id', 'category_name']} and \n# the user question: Find the categories with the highest average class ratings.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the categories with the highest average class ratings.",
    "output": "SELECT Categories.category_name, AVG(Ratings.rating) as avg_rating FROM Categories INNER JOIN Classes ON Categories.category_id = Classes.category_id INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Ratings ON ClassSessions.session_id = Ratings.session_id GROUP BY Categories.category_id ORDER BY avg_rating DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Ratings": [
            "created_at",
            "rating",
            "session_id",
            "class_id",
            "user_id"
        ],
        "Categories": [
            "category_id",
            "category_name"
        ]
    },
    "response_text": "SELECT Categories.category_name, AVG(Ratings.rating) as Average_Rating\nFROM Ratings\nJOIN Classes ON Ratings.class_id = Classes.class_id\nJOIN Categories ON Classes.category_id = Categories.category_id\nGROUP BY Categories.category_name\nORDER BY Average_Rating DESC\nLIMIT 1;",
    "prompt_token_number": 337,
    "response_token_number": 57
},
{
    "id": 34259,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id'], 'Payments': ['billing_id', 'client_id', 'amount', 'session_id', 'date', 'payment_method', 'id', 'payment_date', 'session_attendee_id']}. \n# the user question is: Retrieve the names and email addresses of clients who have not made any payments:. \n#SQL query: SELECT c.name, c.email FROM Clients c LEFT JOIN Session_Attendees sa ON c.id = sa.client_id LEFT JOIN Payments p ON sa.id = p.session_attendee_id WHERE p.id IS NULL\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Ratings': ['created_at', 'rating', 'session_id', 'class_id', 'user_id']} and \n# the user question: Find the classes that have the highest average rating, with at least 10 ratings.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have the highest average rating, with at least 10 ratings.",
    "output": "SELECT Classes.class_name, AVG(Ratings.rating) as avg_rating FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Ratings ON ClassSessions.session_id = Ratings.session_id GROUP BY Classes.class_id HAVING COUNT(Ratings.rating) >= 10 ORDER BY avg_rating DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Ratings": [
            "created_at",
            "rating",
            "session_id",
            "class_id",
            "user_id"
        ]
    },
    "response_text": "SELECT c.class_name \nFROM Classes c \nJOIN Ratings r ON c.class_id = r.class_id \nGROUP BY c.class_name \nHAVING COUNT(*) >= 10 \nORDER BY AVG(r.rating) DESC \nLIMIT 1",
    "prompt_token_number": 611,
    "response_token_number": 46
},
{
    "id": 34263,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'plants': ['name', 'id', 'category_id', 'updated_at', 'created_at', 'description', 'min_temp', 'max_temp', 'water_requirement', 'light_requirement', 'watering_schedule', 'width', 'height', 'flowering', 'min_temp_tolerance', 'max_temp_tolerance', 'category', 'spacing_requirement', 'bloomed', 'water_usage', 'last_watered', 'sun_exposure', 'price', 'plant_date', 'harvest_date', 'bed_id', 'suitable_exposure', 'Rosemary', 'is_edible', 'species', 'plant_name', 'soil_type', 'bloom_time', 'max_height', 'flowering_season', 'plant_type', 'sunlight', 'garden_id', 'soil_ph'], 'plant_varieties': ['variety', 'id', 'Tomato', 'Roma', 'plant_id', 'updated_at', 'created_at', 'description', 'name', 'price'], 'categories': ['name', 'id', 'updated_at', 'created_at', 'Ornamental']}. \n# the user question is: Find all the plants that belong to the \"Fruit\" category and have a price less than $10.. \n#SQL query: SELECT DISTINCT plants.name FROM plants JOIN categories ON plants.category_id = categories.id JOIN plant_varieties ON plants.id = plant_varieties.plant_id WHERE categories.name = 'Fruit' AND plant_varieties.price < 10;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the instructors who have taught classes with the most bookings in the last week.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught classes with the most bookings in the last week.",
    "output": "SELECT Instructors.instructor_name, COUNT(DISTINCT Enrollments.user_id) AS num_bookings FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id LEFT JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Instructors.instructor_id ORDER BY num_bookings DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name\nFROM Instructors\nJOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id\nJOIN Enrollments ON ClassSessions.class_id = Enrollments.class_id\nWHERE ClassSessions.session_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE()\nGROUP BY Instructors.instructor_id\nORDER BY COUNT(Enrollments.enrollment_id) DESC\nLIMIT 1;",
    "prompt_token_number": 604,
    "response_token_number": 89
},
{
    "id": 34264,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Tasks': ['task_id', 'name', 'description', 'project_id', 'user_id', 'created_at', 'priority', 'updated_at', 'status', 'Completed', 'assigned_at', 'completed_at', 'due_date', 'time_spent', 'last_updated', 'category_id'], 'Events': ['event_id', 'name', 'description', 'task_id', 'created_at', 'event_type', \"User clicks on 'Forgot Password' button\", 'user_id', 'project_id', 'attendance', 'start_time', 'end_time', 'updated_at', 'location', 'confirmed']}. \n# the user question is: Get the name, description, and number of events for each task in the project with id 1 created by the user with id 1:. \n#SQL query: SELECT Tasks.name, Tasks.description, COUNT(Events.event_id) AS num_events FROM Tasks LEFT JOIN Events ON Tasks.task_id = Events.task_id WHERE Tasks.project_id = 1 AND Tasks.user_id = 1 GROUP BY Tasks.task_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Ratings': ['created_at', 'rating', 'session_id', 'class_id', 'user_id']} and \n# the user question: Find the classes that have the most ratings in the last 30 days.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have the most ratings in the last 30 days.",
    "output": "SELECT Classes.class_name, COUNT(Ratings.rating) AS num_ratings FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Ratings ON ClassSessions.session_id = Ratings.session_id WHERE Ratings.created_at BETWEEN date('now', '-30 days') AND date('now') GROUP BY Classes.class_id ORDER BY num_ratings DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Ratings": [
            "created_at",
            "rating",
            "session_id",
            "class_id",
            "user_id"
        ]
    },
    "response_text": "SELECT Classes.class_name, COUNT(Ratings.rating) AS no_of_ratings\nFROM Ratings\nJOIN Classes ON Ratings.class_id = Classes.class_id \nWHERE Ratings.created_at > DATE(NOW()) - INTERVAL 30 DAY\nGROUP BY Classes.class_name\nORDER BY no_of_ratings DESC\nLIMIT 1;",
    "prompt_token_number": 511,
    "response_token_number": 61
},
{
    "id": 34265,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Bikes': ['bike_id', 'bike_model', 'bike_type', 'color', 'manufacturer', 'last_service_date', 'max_distance', 'min_distance', 'is_available', 'maintenance_date', 'mileage', 'max_mileage', 'last_maintenance_date', 'kilometers_since_maintenance', 'status', 'station_id', 'electric', 'type', 'id', 'current_station_id', 'manufacture_date'], 'Rides': ['end_time', 'bike_id', 'duration_minutes', 'user_id', 'ride_type', 'cost', 'start_location_id', 'ride_id', 'location_id', 'start_time', 'distance_miles', 'end_location_id', 'distance', 'rental_price', 'start_station_id', 'end_station_id', 'duration', 'fare', 'end_location', 'start_location', 'price', 'distance_km']}. \n# the user question is: Which bikes have not been rented at all in the past month and are currently available?. \n#SQL query: SELECT bike_id FROM Bikes WHERE status = 'available' AND bike_id NOT IN ( SELECT DISTINCT bike_id FROM Rides WHERE start_time >= date('now', '-1 month') );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Ratings': ['created_at', 'rating', 'session_id', 'class_id', 'user_id']} and \n# the user question: Find the users who have attended at least one class in the last month, but have not rated any classes.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended at least one class in the last month, but have not rated any classes.",
    "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') AND NOT EXISTS ( SELECT 1 FROM Ratings WHERE Ratings.session_id = ClassSessions.session_id AND Ratings.user_id = Users.user_id ) GROUP BY Users.user_id;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Ratings": [
            "created_at",
            "rating",
            "session_id",
            "class_id",
            "user_id"
        ]
    },
    "response_text": "SELECT user_id FROM Enrollments WHERE enrollment_date >= date('now', '-1 month') AND user_id NOT IN (SELECT DISTINCT user_id FROM Ratings) AND is_cancelled = 0;",
    "prompt_token_number": 572,
    "response_token_number": 40
},
{
    "id": 34267,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID'], 'Customer': ['CustomerName', 'CustomerID', 'Country', 'SegmentID', 'Continent', 'PhoneNumber', 'Email', 'CreditLimit', 'State', 'AddressID', 'EmailAddress', 'LoyaltyLevelID', 'FirstName', 'LastName', 'City', 'StateCode', 'CountryCode', 'RegistrationDate']}. \n# the user question is: Retrieve the list of customers who have made purchases in the year 2023, and have an average purchase value of at least $1000, sorted by customer name:. \n#SQL query: SELECT Customer.CustomerName, AVG(SalesOrder.TotalPrice) as AvgPurchaseValue FROM Customer JOIN SalesOrder ON Customer.CustomerID = SalesOrder.CustomerID WHERE SalesOrder.Year = 2023 GROUP BY Customer.CustomerID HAVING AVG(SalesOrder.TotalPrice) >= 1000 ORDER BY Customer.CustomerName;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Categories': ['category_id', 'category_name']} and \n# the user question: Find the categories that have the most classes in the schedule for next week.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the categories that have the most classes in the schedule for next week.",
    "output": "SELECT Categories.category_name, COUNT(DISTINCT ClassSessions.class_id) AS num_classes FROM Categories INNER JOIN Classes ON Categories.category_id = Classes.category_id INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id WHERE ClassSessions.session_date BETWEEN date('now', '+1 day') AND date('now', '+7 days') GROUP BY Categories.category_id ORDER BY num_classes DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Categories": [
            "category_id",
            "category_name"
        ]
    },
    "response_text": "SELECT categories.category_name, COUNT(*) as class_count \nFROM categories \nJOIN classes \nON categories.category_id = classes.category_id \nWHERE class_date >= DATE(NOW()) AND class_date < DATE(NOW()) + INTERVAL 1 WEEK \nGROUP BY categories.category_id \nORDER BY class_count DESC LIMIT 1;",
    "prompt_token_number": 531,
    "response_token_number": 63
},
{
    "id": 34271,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'director_id', 'duration', 'release_date', 'genre', 'genre_id', 'language_id'], 'Review': ['rating', 'film_id', 'review_id']}. \n# the user question is: \"Find the total number of reviews for each film, sorted in descending order of the review count.\". \n#SQL query: SELECT Film.title, COUNT(Review.review_id) AS review_count FROM Film LEFT JOIN Review ON Film.film_id = Review.film_id GROUP BY Film.film_id ORDER BY review_count DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Categories': ['category_id', 'category_name']} and \n# the user question: Find the instructors who have taught classes in all categories in the last 3 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught classes in all categories in the last 3 months.",
    "output": "SELECT Instructors.instructor_name FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id INNER JOIN Categories ON Classes.category_id = Categories.category_id WHERE ClassSessions.session_date BETWEEN date('now', '-3 month') AND date('now') GROUP BY Instructors.instructor_id HAVING COUNT(DISTINCT Categories.category_id) = ( SELECT COUNT(DISTINCT Categories.category_id) FROM Categories );",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Categories": [
            "category_id",
            "category_name"
        ]
    },
    "response_text": "SELECT DISTINCT Instructors.instructor_name \nFROM Instructors \nJOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id\nJOIN Classes ON Classes.class_id = ClassSessions.class_id\nWHERE ClassSessions.session_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\nGROUP BY Instructors.instructor_id \nHAVING COUNT(DISTINCT Classes.category_id) = (SELECT COUNT(*) FROM Categories);",
    "prompt_token_number": 441,
    "response_token_number": 83
},
{
    "id": 34274,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Employee': ['FirstName', 'EmployeeID', 'LastName', 'JobTitle', 'SupervisorID', 'State', 'Country', 'Region', 'EndYear', 'StartYear', 'Continent', 'Title', 'QuarterlySalesTarget', 'EmailAddress', 'HireDate', 'City'], 'EmployeeDepartment': ['DepartmentID', 'EmployeeID'], 'Department': ['DepartmentName', 'DepartmentID', 'DepartmentHeadID']}. \n# the user question is: Retrieve the list of departments with the highest number of employees in the year 2023, sorted by the number of employees in descending order:. \n#SQL query: SELECT Department.DepartmentName, COUNT(EmployeeDepartment.EmployeeID) as NumEmployees FROM Department JOIN EmployeeDepartment ON Department.DepartmentID = EmployeeDepartment.DepartmentID JOIN Employee ON EmployeeDepartment.EmployeeID = Employee.EmployeeID WHERE Employee.StartYear <= 2023 AND (Employee.EndYear > 2023 OR Employee.EndYear IS NULL) GROUP BY Department.DepartmentID ORDER BY NumEmployees DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended the most classes in the last 3 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended the most classes in the last 3 months.",
    "output": "SELECT Users.username, COUNT(DISTINCT ClassSessions.session_id) AS num_classes FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-3 month') AND date('now') GROUP BY Users.user_id ORDER BY num_classes DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.user_id, Users.username, COUNT(Enrollments.class_id) as total_classes \nFROM Users JOIN Enrollments ON Users.user_id = Enrollments.user_id\nWHERE Enrollments.attendance_status = 'attended' AND Enrollments.date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) \nGROUP BY Users.user_id \nORDER BY total_classes DESC;",
    "prompt_token_number": 496,
    "response_token_number": 78
},
{
    "id": 34276,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['email', 'username', 'user_id'], 'MeditationSessions': ['duration_minutes', 'session_notes', 'session_id', 'user_id', 'session_date', 'technique_id', 'course_id', 'exercise_id', 'session_datetime'], 'MeditationTechniques': ['technique_id', 'description', 'technique_name'], 'UserMeditationTechniques': ['technique_id', 'user_id']}. \n# the user question is: Retrieve the usernames and the average duration of meditation sessions for users who have practiced the \"Breathing\" technique:. \n#SQL query: SELECT Users.username, AVG(MeditationSessions.duration_minutes) AS average_duration FROM Users JOIN UserMeditationTechniques ON Users.user_id = UserMeditationTechniques.user_id JOIN MeditationSessions ON UserMeditationTechniques.user_id = MeditationSessions.user_id JOIN MeditationTechniques ON UserMeditationTechniques.technique_id = MeditationTechniques.technique_id WHERE MeditationTechniques.technique_name = 'Breathing' GROUP BY Users.user_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Categories': ['category_id', 'category_name']} and \n# the user question: Find the instructors who have taught classes in the most categories in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught classes in the most categories in the last month.",
    "output": "SELECT Instructors.instructor_name, COUNT(DISTINCT Categories.category_id) AS num_categories FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id INNER JOIN Categories ON Classes.category_id = Categories.category_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Instructors.instructor_id ORDER BY num_categories DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Categories": [
            "category_id",
            "category_name"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name\nFROM Instructors\nJOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id\nJOIN Classes ON ClassSessions.class_id = Classes.class_id\nWHERE ClassSessions.session_date > DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)\nGROUP BY Instructors.instructor_name, Classes.category_id\nORDER BY COUNT(DISTINCT Classes.category_id) DESC\nLIMIT 1;",
    "prompt_token_number": 545,
    "response_token_number": 84
},
{
    "id": 34282,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Book': ['series_id', 'publication_year', 'title', 'id', 'author_id', 'publisher_id', 'published_year', 'word_count', 'publication_date', 'value', 'pages', 'year', 'language_id', 'publish_date', 'price', 'genre_id'], 'Book_Plot_Twist': ['plot_twist_id', 'book_id'], 'Plot_Twist': ['id', 'description'], 'Author': ['id', 'birth_year', 'name', 'gender', 'first_name', 'last_name', 'nationality', 'author_id'], 'Review': ['book_id', 'rating', 'reviewer_name', 'name', 'id', 'reader_id']}. \n# the user question is: Find all authors who have written books that have a plot twist involving an identity switch and have been reviewed by at least 2 reviewers with an average rating of 4 stars or higher.. \n#SQL query: SELECT DISTINCT Author.name FROM Author INNER JOIN Book ON Author.id = Book.author_id INNER JOIN Book_Plot_Twist AS bpt ON Book.id = bpt.book_id INNER JOIN Plot_Twist ON bpt.plot_twist_id = Plot_Twist.id AND Plot_Twist.description LIKE '%identity switch%' INNER JOIN Review ON Book.id = Review.book_id GROUP BY Author.name HAVING COUNT(DISTINCT Review.reviewer_name) >= 2 AND AVG(Review.rating) >= 4;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes with the highest revenue in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes with the highest revenue in the last month.",
    "output": "SELECT Classes.class_name, COUNT(DISTINCT Enrollments.user_id) * Classes.price AS revenue FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Classes.class_id ORDER BY revenue DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Classes.class_name, (Enrollments.payment_amount * Enrollments.num_attendees) AS Revenue \nFROM Classes \nJOIN Enrollments ON Classes.class_id = Enrollments.class_id \nWHERE Enrollments.enrollment_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)\nGROUP BY Classes.class_name \nORDER BY Revenue DESC \nLIMIT 1;",
    "prompt_token_number": 661,
    "response_token_number": 75
},
{
    "id": 34284,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Titanic': ['Age', 'Sex', 'Survived', 'Fare', 'Pclass', 'SibSp', 'Parch', 'Embarked', 'Cabin']}. \n# the user question is: What is the number of passengers in the 'Titanic' dataset who are older than 50, have a 'Pclass' of 1 or 2, and have not survived?. \n#SQL query: SELECT COUNT(*) FROM Titanic WHERE Age > 50 AND Pclass IN (1,2) AND Survived = 0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Categories': ['category_id', 'category_name']} and \n# the user question: Find the users who have attended classes in all the categories in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended classes in all the categories in the last month.",
    "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id HAVING COUNT(DISTINCT Classes.category_id) = ( SELECT COUNT(DISTINCT Categories.category_id) FROM Categories );",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Categories": [
            "category_id",
            "category_name"
        ]
    },
    "response_text": "SELECT user_id FROM Enrollments \nWHERE class_id IN (\n    SELECT class_id FROM Classes \n    WHERE category_id IN (\n        SELECT category_id FROM Categories\n    ) AND class_date BETWEEN DATEADD(month, -1, GETDATE()) AND GETDATE()\n)\nGROUP BY user_id\nHAVING COUNT(DISTINCT category_id) = (SELECT COUNT(*) FROM Categories);",
    "prompt_token_number": 529,
    "response_token_number": 76
},
{
    "id": 34286,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Customers': ['customer_id', 'customer_name', 'contact_name', 'address', 'phone', 'email', 'region_id'], 'Products': ['product_id', 'product_name', 'product_description', 'unit_price', 'weight', 'category', 'category_id', 'part_id', 'lead_time'], 'Sales': ['sale_id', 'sale_date', 'customer_id', 'employee_id', 'salesperson_id'], 'Sale_Items': ['item_id', 'sale_id', 'product_id', 'quantity_sold', 'unit_price']}. \n# the user question is: Retrieve the names and total revenue generated by each customer who has made purchases, sorted by total revenue:. \n#SQL query: SELECT Customers.customer_name, SUM(Sale_Items.quantity_sold * Products.unit_price) AS total_revenue FROM Customers JOIN Sales ON Customers.customer_id = Sales.customer_id JOIN Sale_Items ON Sales.sale_id = Sale_Items.sale_id JOIN Products ON Sale_Items.product_id = Products.product_id GROUP BY Customers.customer_id HAVING SUM(Sale_Items.quantity_sold * Products.unit_price) > 0 ORDER BY total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the most popular classes based on the number of attendees in the last 30 days.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the most popular classes based on the number of attendees in the last 30 days.",
    "output": "SELECT Classes.class_name, COUNT(DISTINCT Enrollments.user_id) AS num_attendees FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-30 days') AND date('now') GROUP BY Classes.class_id ORDER BY num_attendees DESC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Classes.class_name, COUNT(Enrollments.num_attendees) AS total_attendees \nFROM Classes \nJOIN Enrollments ON Classes.class_id = Enrollments.class_id \nWHERE Enrollments.enrollment_date BETWEEN DATE_SUB(NOW(), INTERVAL 30 DAY) AND NOW() \nGROUP BY Classes.class_id \nORDER BY total_attendees DESC;",
    "prompt_token_number": 595,
    "response_token_number": 75
},
{
    "id": 34291,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'UserPlaylists': ['playlist_id', 'user_id', 'creation_date'], 'Users': ['username', 'user_id'], 'Tracks': ['track_id', 'track_title', 'duration', 'album_id', 'track_name', 'genre_id', 'rating', 'artist_id', 'release_id'], 'PlaylistTracks': ['track_id', 'playlist_id']}. \n# the user question is: Find the users who have created playlists containing tracks with a total duration longer than 1 hour:. \n#SQL query: SELECT Users.username FROM Users JOIN UserPlaylists ON Users.user_id = UserPlaylists.user_id JOIN PlaylistTracks ON UserPlaylists.playlist_id = PlaylistTracks.playlist_id JOIN Tracks ON PlaylistTracks.track_id = Tracks.track_id GROUP BY Users.user_id HAVING SUM(Tracks.duration) > 3600; -- 3600 seconds = 1 hour\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have the most classes scheduled for the next month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have the most classes scheduled for the next month.",
    "output": "SELECT Instructors.instructor_name, COUNT(DISTINCT ClassSessions.session_id) AS num_sessions FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '+1 day') AND date('now', '+1 month') GROUP BY Instructors.instructor_id ORDER BY num_sessions DESC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name \nFROM Instructors \nJOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id \nWHERE ClassSessions.session_date BETWEEN DATE_ADD(CURRENT_DATE, INTERVAL 1 MONTH) AND DATE_ADD(CURRENT_DATE, INTERVAL 2 MONTH) \nGROUP BY Instructors.instructor_id \nORDER BY COUNT(*) DESC \nLIMIT 1;",
    "prompt_token_number": 375,
    "response_token_number": 75
},
{
    "id": 34292,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Players': ['last_name', 'player_id', 'team_id', 'first_name', 'birth_date', 'height', 'nationality', 'avg_assists', 'avg_points', 'avg_rebounds', 'ppg', 'rpg', 'apg', 'seasons_played', 'total_points', 'total_threes', 'three_pt_pct', 'games_played', 'fg_pct', 'total_fga', 'ast_per_game', 'total_3pt_att', 'total_3pt', 'country_code', 'last_year', 'first_year', 'Name', 'Age', 'Salary', 'ID', 'Position', 'Number', 'TeamID', 'IsInjured', 'JerseyNumber', 'Height', 'Weight', \"6'10''\", 'Player_ID', 'Player_Name'], 'Player_Stats': ['points', 'game_id', 'player_id', 'rebounds', 'blocks', 'assists', 'field_goals_made', 'field_goals_attempted', 'three_pointers_attempted', 'three_pointers_made', 'free_throws_made', 'team_id', 'steals', 'free_throws_attempted', 'three_pointers', 'games', 'field_goal_percentage', 'three_point_percentage', 'free_throw_percentage', 'season_id', 'personal_fouls', 'game_date', 'per', 'minutes_played', 'triple_doubles', 'points_per_game', 'assists_per_game', 'rebounds_per_game', 'steals_per_game', 'three_point_attempts', 'games_played', 'Season', 'Player_ID', 'Points', 'Three_Pointers_Made'], 'Games': ['game_id', 'game_date', 'home_team_id', 'away_team_id', 'away_team_score', 'home_team_score', 'season_id', 'arena_id', 'series_id', 'points', 'team_id', 'opponent_points', 'home_points', 'away_points', 'playoff_round', 'points_scored', 'winning_team_id', 'points_allowed', 'losing_team_id', 'round', 'opponent_team_id', 'wins', 'Star', 'losses', 'coach_id', 'game_type', 'player_id', 'win', 'loss', 'home_score', 'away_score', 'month_id', 'day_of_week', 'triple_double', 'playoff_game', 'pts', 'ast', 'three_pt', 'opp_pts', 'blk', 'stl', 'reb', 'AwayTeamScore', 'HomeTeamID', 'Season', 'AwayTeamID', 'HomeTeamScore', 'ID', 'Date', 'HalfTimeAwayTeamScore', 'HalfTimeHomeTeamScore', 'WinnerID', 'Overtime', 'Team_ID', 'Assists'], 'Seasons': ['season_id', 'year', 'start_date', 'team_name', 'team_id', 'regular_season_wins', 'season_type', 'champion_id', 'player_id', 'wins', 'losses', 'points_for', 'points_against', 'attendance', 'outcome', 'series_id', 'Regular', 'Season', 'year_end', 'year_start', 'ChampionID', 'Year', 'ID']}. \n# the user question is: Find the players who have played for at least 10 seasons and have a career scoring average of at least 20 points per game.. \n#SQL query: SELECT Players.first_name, Players.last_name, COUNT(DISTINCT Seasons.year) AS num_seasons, SUM(Player_Stats.points) / COUNT(Player_Stats.game_id) AS career_points_per_game FROM Players JOIN Player_Stats ON Players.player_id = Player_Stats.player_id JOIN Games ON Player_Stats.game_id = Games.game_id JOIN Seasons ON Games.season_id = Seasons.season_id GROUP BY Players.player_id HAVING COUNT(DISTINCT Seasons.year) >= 10 AND SUM(Player_Stats.points) / COUNT(Player_Stats.game_id) >= 20;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the users who have attended classes in all the locations in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended classes in all the locations in the last month.",
    "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN Locations ON ClassSessions.location_id = Locations.location_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id HAVING COUNT(DISTINCT Locations.location_id) = ( SELECT COUNT(DISTINCT Locations.location_id) FROM Locations );",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Locations": [
            "location_name",
            "location_id",
            "is_available"
        ]
    },
    "response_text": "SELECT Users.username\nFROM Users \nJOIN Enrollments ON Users.user_id = Enrollments.user_id \nJOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id \nJOIN Locations ON ClassSessions.location_id = Locations.location_id \nWHERE ClassSessions.session_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) \nGROUP BY Users.user_id \nHAVING COUNT(DISTINCT Locations.location_id) = (SELECT COUNT(DISTINCT location_id) FROM Locations)",
    "prompt_token_number": 1136,
    "response_token_number": 96
},
{
    "id": 34296,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Book': ['series_id', 'publication_year', 'title', 'id', 'author_id', 'publisher_id', 'published_year', 'word_count', 'publication_date', 'value', 'pages', 'year', 'language_id', 'publish_date', 'price', 'genre_id'], 'Review': ['book_id', 'rating', 'reviewer_name', 'name', 'id', 'reader_id'], 'Book_Genre': ['book_id', 'genre_id'], 'Genre': ['id', 'name']}. \n# the user question is: Find all books that have been reviewed by at least 5 reviewers with an average rating of 4 stars or higher, and have a genre of \"Suspense\".. \n#SQL query: SELECT Book.title FROM Book INNER JOIN Book_Genre AS bg ON Book.id = bg.book_id INNER JOIN Genre ON bg.genre_id = Genre.id AND Genre.name = 'Suspense' INNER JOIN Review ON Book.id = Review.book_id GROUP BY Book.title HAVING COUNT(DISTINCT Review.reviewer_name) >= 5 AND AVG(Review.rating) >= 4;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the users who have attended classes in all the locations offered by the studio.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended classes in all the locations offered by the studio.",
    "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' GROUP BY Users.user_id HAVING COUNT(DISTINCT ClassSessions.location_id) = ( SELECT COUNT(*) FROM Locations );",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Locations": [
            "location_name",
            "location_id",
            "is_available"
        ]
    },
    "response_text": "SELECT Users.user_id \nFROM Users \nJOIN Enrollments ON Users.user_id = Enrollments.user_id \nJOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id \nGROUP BY Users.user_id\nHAVING COUNT(DISTINCT ClassSessions.location_id) = (SELECT COUNT(DISTINCT location_id) FROM Locations WHERE is_available = true);",
    "prompt_token_number": 536,
    "response_token_number": 73
},
{
    "id": 34297,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'collection': ['name', 'acquisition_date', 'collection_id', 'collector_id', 'date_acquired'], 'artwork_collection': ['collection_id', 'artwork_id'], 'loan': ['return_date', 'loan_date', 'artwork_id', 'lender_id', 'location_id', 'start_date', 'artwork_location_id'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'collector': ['first_name', 'collector_id', 'last_name', 'email', 'country', 'state', 'country_of_origin']}. \n# the user question is: Find the names and email addresses of all collectors who have artwork in the \"Museum of Modern Art\" that were created between 1910 and 1920 and are not currently on loan.. \n#SQL query: SELECT DISTINCT c.first_name, c.last_name, c.email FROM collector AS c INNER JOIN collection AS co ON c.collector_id = co.collector_id INNER JOIN artwork_collection AS ac ON co.collection_id = ac.collection_id INNER JOIN artwork AS a ON ac.artwork_id = a.artwork_id INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS l ON al.location_id = l.location_id WHERE a.year_created BETWEEN 1910 AND 1920 AND l.name = 'Museum of Modern Art' AND al.end_date IS NULL AND a.artwork_id NOT IN (SELECT artwork_id FROM loan WHERE return_date IS NULL);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have the highest average rating from attendees in the last 6 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have the highest average rating from attendees in the last 6 months.",
    "output": "SELECT Classes.class_name, AVG(Reviews.rating) AS avg_rating FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id LEFT JOIN Reviews ON Enrollments.enrollment_id = Reviews.enrollment_id WHERE Reviews.rating IS NOT NULL AND Reviews.review_date BETWEEN date('now', '-6 months') AND date('now') GROUP BY Classes.class_id ORDER BY avg_rating DESC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT C.class_name, AVG(R.rating) as average_rating\nFROM Classes C  \nJOIN Reviews R ON C.class_id = R.class_id \nJOIN Enrollments E ON E.class_id = C.class_id \nWHERE E.enrollment_date BETWEEN DATE_SUB(NOW(), INTERVAL 6 MONTH) AND NOW()\nGROUP BY C.class_name\nORDER BY average_rating DESC\nLIMIT 1;",
    "prompt_token_number": 904,
    "response_token_number": 78
},
{
    "id": 34298,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Reviews': ['rating', 'project_id', 'user_id', 'avg_rating', 'review_id']}. \n# the user question is: \"Find the average rating of reviews for the project with project_id = 1.\". \n#SQL query: SELECT AVG(rating) AS average_rating FROM Reviews WHERE project_id = 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended classes on 3 or more days of the week in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended classes on 3 or more days of the week in the last month.",
    "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id, strftime('%w', ClassSessions.session_date) HAVING COUNT(DISTINCT strftime('%w', ClassSessions.session_date)) >= 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT user_id \nFROM \n   (SELECT user_id, COUNT(DISTINCT DATE(session_date)) AS days_attended \n    FROM Enrollments INNER JOIN ClassSessions ON Enrollments.class_id = ClassSessions.class_id \n    WHERE session_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND attendance_status='attended' \n    GROUP BY user_id) AS attendanceCount \nWHERE days_attended >= 3",
    "prompt_token_number": 364,
    "response_token_number": 86
},
{
    "id": 34304,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'collection': ['name', 'acquisition_date', 'collection_id', 'collector_id', 'date_acquired'], 'artwork_collection': ['collection_id', 'artwork_id'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender'], 'collector': ['first_name', 'collector_id', 'last_name', 'email', 'country', 'state', 'country_of_origin']}. \n# the user question is: Find the names and email addresses of all collectors who have artwork in the \"The Louvre\" that were created by \"Leonardo da Vinci\" and are currently on display.. \n#SQL query: SELECT DISTINCT c.first_name, c.last_name, c.email FROM collector AS c INNER JOIN collection AS co ON c.collector_id = co.collector_id INNER JOIN artwork_collection AS ac ON co.collection_id = ac.collection_id INNER JOIN artwork AS a ON ac.artwork_id = a.artwork_id INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS l ON al.location_id = l.location_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id WHERE ar.first_name = 'Leonardo' AND ar.last_name = 'da Vinci' AND l.name = 'The Louvre' AND al.end_date IS NULL AND al.on_display = 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the classes that have been offered the most times in the last year.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have been offered the most times in the last year.",
    "output": "SELECT Classes.class_name, COUNT(DISTINCT ClassSessions.session_id) AS num_sessions FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 year') AND date('now') GROUP BY Classes.class_id ORDER BY num_sessions DESC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT c.class_name, COUNT(cs.session_id) AS \"Times Offered\"\nFROM Classes AS c\nINNER JOIN ClassSessions AS cs ON c.class_id = cs.class_id\nWHERE cs.session_date BETWEEN DATE_SUB(NOW(), INTERVAL 1 YEAR) AND NOW()\nGROUP BY c.class_name\nORDER BY COUNT(cs.session_id) DESC\nLIMIT 1;",
    "prompt_token_number": 789,
    "response_token_number": 73
},
{
    "id": 34306,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director', 'runtime', 'budget', 'box_office', 'rating', 'release_date', 'imdb_rating', 'director_id', 'production_company_id', 'box_office_gross'], 'Actor': ['actor_id', 'first_name', 'last_name', 'birth_year', 'nationality', 'birthdate', 'birthplace', 'date_of_birth', 'name'], 'MovieActor': ['movie_id', 'actor_id', 'character_id', 'last_name', 'first_name', 'age_at_film', 'role'], 'Genre': ['genre_id', 'name'], 'MovieGenre': ['movie_id', 'genre_id'], 'Studio': ['studio_id', 'name', 'state'], 'MovieStudio': ['movie_id', 'studio_id']}. \n# the user question is: Show the name and nationality of all actors who played a character in a Western movie that was produced by MGM.. \n#SQL query: SELECT Actor.first_name, Actor.last_name, Actor.nationality FROM Actor JOIN MovieActor ON Actor.actor_id = MovieActor.actor_id JOIN Movie ON MovieActor.movie_id = Movie.movie_id JOIN MovieStudio ON Movie.movie_id = MovieStudio.movie_id JOIN Studio ON MovieStudio.studio_id = Studio.studio_id JOIN MovieGenre ON Movie.movie_id = MovieGenre.movie_id JOIN Genre ON MovieGenre.genre_id = Genre.genre_id WHERE Genre.name = 'Western' AND Studio.name = 'MGM';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have the highest ratio of advanced-level users to total users.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have the highest ratio of advanced-level users to total users.",
    "output": "SELECT Classes.class_name, (CAST(COUNT(CASE WHEN Users.skill_level = 'advanced' THEN 1 END) AS FLOAT) / COUNT(Enrollments.enrollment_id)) AS adv_user_ratio FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Users ON Enrollments.user_id = Users.user_id WHERE Enrollments.status = 'confirmed' GROUP BY Classes.class_id ORDER BY adv_user_ratio DESC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Classes.class_name, \n    (COUNT(CASE WHEN Users.skill_level = 'advanced' THEN 1 END)/COUNT(*)) AS ratio_advanced \nFROM Enrollments \nJOIN Users ON Enrollments.user_id = Users.user_id \nJOIN Classes ON Enrollments.class_id = Classes.class_id \nGROUP BY Classes.class_name \nORDER BY ratio_advanced DESC LIMIT 1;",
    "prompt_token_number": 710,
    "response_token_number": 77
},
{
    "id": 34307,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']}. \n# the user question is: Find the names and birthdates of all artists who have artwork in the \"Louvre Museum\" and were born after 1800.. \n#SQL query: SELECT DISTINCT ar.first_name, ar.last_name, ar.date_of_birth FROM artist AS ar INNER JOIN artwork AS a ON ar.artist_id = a.artist_id INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS lo ON al.location_id = lo.location_id WHERE ar.date_of_birth > '1800-01-01' AND lo.name = 'Louvre Museum' AND al.end_date IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught the most classes in the last 3 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught the most classes in the last 3 months.",
    "output": "SELECT Instructors.name, COUNT(DISTINCT ClassSessions.class_id) AS num_classes_taught FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-3 months') AND date('now') GROUP BY Instructors.instructor_id ORDER BY num_classes_taught DESC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT i.instructor_name, COUNT(cs.session_id) AS total_classes\nFROM Instructors AS i\nINNER JOIN ClassSessions AS cs ON i.instructor_id = cs.instructor_id\nWHERE cs.session_date >= (NOW() - INTERVAL 3 MONTH)\nGROUP BY i.instructor_name\nORDER BY total_classes DESC\nLIMIT 1;",
    "prompt_token_number": 589,
    "response_token_number": 69
},
{
    "id": 34310,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Platforms': ['platform_id', 'game_id', 'online_players'], 'Platforms': ['platform_id', 'platform_name', 'platform_release_date', 'platform_manufacturer', 'platform_publisher', 'platform_release_year', 'manufacturer_id'], 'Game_Levels': ['level_id', 'game_id'], 'Levels': ['level_name', 'level_id', 'difficulty_id', 'duration_id']}. \n# the user question is: Find the names of all games that have a level with a name containing \"New York\" and a platform that was released by Microsoft.. \n#SQL query: SELECT Games.game_title FROM Games INNER JOIN Game_Levels ON Games.game_id = Game_Levels.game_id INNER JOIN Levels ON Game_Levels.level_id = Levels.level_id INNER JOIN Game_Platforms ON Games.game_id = Game_Platforms.game_id INNER JOIN Platforms ON Game_Platforms.platform_id = Platforms.platform_id WHERE Levels.level_name LIKE '%New York%' AND Platforms.platform_manufacturer = 'Microsoft';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended the same class more than once in the last 6 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended the same class more than once in the last 6 months.",
    "output": "SELECT Users.username, Classes.class_name, COUNT(DISTINCT Enrollments.enrollment_id) AS num_attendances FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-6 months') AND date('now') GROUP BY Users.user_id, Classes.class_id HAVING num_attendances > 1 ORDER BY Users.username;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id WHERE Enrollments.enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY Users.username, Enrollments.class_id HAVING COUNT(Enrollments.class_id) > 1;",
    "prompt_token_number": 637,
    "response_token_number": 63
},
{
    "id": 34311,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'patients': ['first_name', 'last_name', 'patient_id', 'phone_number', 'email', 'phone'], 'medical_history': ['patient_id', 'medical_condition', 'diagnosis'], 'prescription': ['patient_id', 'prescription_id', 'prescription_date', 'type', 'practitioner_id'], 'prescription_items': ['formula_id', 'prescription_id'], 'herbal_formulas': ['formula_id', 'formula_name', 'price', 'num_ingredients', 'ingredients', 'name']}. \n# the user question is: Retrieve the names and email addresses of patients who have been prescribed herbal formulas containing more than 2 ingredients and have also been diagnosed with a medical condition containing the word \"hypertension\":. \n#SQL query: SELECT DISTINCT p.first_name, p.last_name, p.email FROM patients p JOIN medical_history mh ON p.patient_id = mh.patient_id JOIN prescription pr ON p.patient_id = pr.patient_id JOIN prescription_items pi ON pr.prescription_id = pi.prescription_id JOIN herbal_formulas hf ON pi.formula_id = hf.formula_id WHERE hf.num_ingredients > 2 AND mh.medical_condition LIKE '%hypertension%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the classes that have the highest average payment amount per enrolled user.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have the highest average payment amount per enrolled user.",
    "output": "SELECT Classes.class_name, AVG(Payments.amount) AS avg_payment_amount FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Payments ON Enrollments.enrollment_id = Payments.enrollment_id WHERE Enrollments.status = 'confirmed' GROUP BY Classes.class_id ORDER BY avg_payment_amount DESC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Payments": [
            "payment_id",
            "user_id",
            "payment_amount",
            "payment_date",
            "class_id",
            "rental_id",
            "enrollment_id",
            "amount",
            "payment_method"
        ]
    },
    "response_text": "SELECT C.class_name, AVG(P.payment_amount) as Avg_Payment\nFROM Classes C \nJOIN Enrollments E ON C.class_id = E.class_id\nJOIN Payments P ON P.enrollment_id = E.enrollment_id\nGROUP BY C.class_name\nORDER BY Avg_Payment DESC\nLIMIT 1;",
    "prompt_token_number": 650,
    "response_token_number": 64
},
{
    "id": 34312,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Tracks': ['track_id', 'track_title', 'duration', 'album_id', 'track_name', 'genre_id', 'rating', 'artist_id', 'release_id'], 'TrackRatings': ['track_id', 'rating', 'genre_id']}. \n# the user question is: Retrieve the tracks that have the highest average rating among the tracks with at least 10 ratings:. \n#SQL query: SELECT Tracks.track_name, AVG(TrackRatings.rating) AS avg_rating FROM Tracks JOIN TrackRatings ON Tracks.track_id = TrackRatings.track_id GROUP BY Tracks.track_id HAVING COUNT(TrackRatings.rating) >= 10 ORDER BY avg_rating DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended at least 5 classes in the last month, and the total number of classes they have attended.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended at least 5 classes in the last month, and the total number of classes they have attended.",
    "output": "SELECT Users.username, COUNT(DISTINCT Enrollments.class_id) AS num_classes_attended FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id HAVING num_classes_attended >= 5 ORDER BY num_classes_attended DESC;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.user_id, Users.username, COUNT(Enrollments.class_id) AS total_classes\nFROM Users \nJOIN Enrollments ON Users.user_id = Enrollments.user_id\nWHERE Enrollments.attendance_status = 'attended'\nAND Enrollments.enrollment_date BETWEEN DATE_SUB(NOW(), INTERVAL 1 MONTH) AND NOW()\nGROUP BY Users.user_id, Users.username\nHAVING COUNT(Enrollments.class_id) >= 5;",
    "prompt_token_number": 442,
    "response_token_number": 93
},
{
    "id": 34316,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender'], 'acquisition': ['acquisition_date', 'artwork_id', 'value', 'location_id', 'acquisition_id', 'acquisition_source', 'acquisition_type', 'year_acquired', 'name'], 'artwork_acquisition': ['artwork_id', 'location_id', 'acquisition_type', 'acquisition_id', 'acquisition_date', 'collector_id', 'date_acquired']}. \n# the user question is: Find the names and birth dates of all artists who have artwork that were acquired by \"The National Portrait Gallery\" and were created in the 18th century.. \n#SQL query: SELECT DISTINCT ar.first_name, ar.last_name, ar.birth_date FROM artist AS ar INNER JOIN artwork AS a ON ar.artist_id = a.artist_id INNER JOIN artwork_acquisition AS aa ON a.artwork_id = aa.artwork_id INNER JOIN acquisition AS ac ON aa.acquisition_id = ac.acquisition_id INNER JOIN location AS l ON ac.location_id = l.location_id WHERE l.name = 'The National Portrait Gallery' AND YEAR(a.creation_date) BETWEEN 1700 AND 1799;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended classes taught by at least 3 different instructors in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended classes taught by at least 3 different instructors in the last month.",
    "output": "SELECT Users.username, COUNT(DISTINCT ClassSessions.instructor_id) AS num_instructors FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id HAVING num_instructors >= 3 ORDER BY num_instructors DESC;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT u.username \nFROM Users u \nWHERE user_id IN (\n    SELECT e.user_id \n    FROM Enrollments e \n    JOIN ClassSessions cs ON e.class_id = cs.class_id \n    WHERE cs.session_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() \n    GROUP BY e.user_id, cs.instructor_id \n    HAVING COUNT(DISTINCT cs.instructor_id) >= 3\n);",
    "prompt_token_number": 742,
    "response_token_number": 91
},
{
    "id": 34319,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Polymorphism': ['gene_id', 'position', 'reference_sequence', 'alternate_sequence', 'polymorphism_id', 'frequency']}. \n# the user question is: Retrieve the names of all genes and their associated polymorphisms that have a frequency between 1% and 10% and are located on chromosome 381.. \n#SQL query: SELECT Gene.gene_name, Polymorphism.polymorphism_id FROM Gene JOIN Polymorphism ON Gene.gene_id = Polymorphism.gene_id WHERE Polymorphism.frequency BETWEEN 0.01 AND 0.1 AND Gene.chromosome_id = 381;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have at least 5 open spots in the next week.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have at least 5 open spots in the next week.",
    "output": "SELECT Classes.class_name, COUNT(DISTINCT Enrollments.enrollment_id) AS num_enrollments, Classes.max_capacity - COUNT(DISTINCT Enrollments.enrollment_id) AS open_spots FROM Classes INNER JOIN Enrollments ON Classes.class_id = Enrollments.class_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now') AND date('now', '+1 week') GROUP BY Classes.class_id HAVING open_spots >= 5 ORDER BY open_spots DESC;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Classes.class_name FROM Classes WHERE Classes.max_capacity - Classes.current_enrollment >= 5 AND Classes.class_date BETWEEN CURRENT_DATE AND DATE_ADD(CURRENT_DATE, INTERVAL 1 WEEK) AND Classes.is_available = 1;",
    "prompt_token_number": 563,
    "response_token_number": 45
},
{
    "id": 34320,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Show': ['show_name', 'show_id', 'Night', 'Late', 'Talk', 'host_id', 'rating', 'end_time', 'start_time', 'language'], 'Host': ['host_id', 'host_name', 'country'], 'Show_Channel': ['channel_id', 'show_id']}. \n# the user question is: \"Retrieve the names of hosts who have hosted shows on multiple channels.\". \n#SQL query: SELECT Host.host_name FROM Host INNER JOIN Show ON Host.host_id = Show.host_id INNER JOIN Show_Channel ON Show.show_id = Show_Channel.show_id GROUP BY Host.host_name HAVING COUNT(DISTINCT Show_Channel.channel_id) > 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught the most classes in the last month, and the total number of classes they have taught.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught the most classes in the last month, and the total number of classes they have taught.",
    "output": "SELECT Instructors.instructor_name, COUNT(DISTINCT ClassSessions.session_id) AS num_classes_taught FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Instructors.instructor_id ORDER BY num_classes_taught DESC;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name, COUNT(DISTINCT ClassSessions.class_id) AS total_classes \nFROM Instructors \nINNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id \nWHERE ClassSessions.session_date >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)\nGROUP BY Instructors.instructor_name\nORDER BY total_classes DESC\nLIMIT 1;",
    "prompt_token_number": 347,
    "response_token_number": 76
},
{
    "id": 34321,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'press_releases': ['title', 'id', 'sent_date', 'company_id', 'headline', 'body', 'press_release_id', 'date_sent', 'date_published', 'sentiment_score']}. \n# the user question is: Retrieve the number of press releases sent in the last quarter.. \n#SQL query: SELECT COUNT(*) AS num_press_releases FROM press_releases WHERE date_sent BETWEEN date('now', '-3 months') AND date('now')\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the most popular class sessions in terms of the number of enrollments in the last week.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the most popular class sessions in terms of the number of enrollments in the last week.",
    "output": "SELECT Classes.class_name, ClassSessions.session_date, COUNT(Enrollments.enrollment_id) AS num_enrollments FROM Classes INNER JOIN Enrollments ON Classes.class_id = Enrollments.class_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 week') AND date('now') GROUP BY Classes.class_id, ClassSessions.session_id ORDER BY num_enrollments DESC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT class_id, COUNT(*) AS num_enrollments \nFROM Enrollments \nWHERE enrollment_date BETWEEN date('now', '-7 days') AND date('now') \nGROUP BY class_id \nORDER BY num_enrollments DESC \nLIMIT 1",
    "prompt_token_number": 464,
    "response_token_number": 51
},
{
    "id": 34322,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'name', 'Product', 'price', 'category_id', 'rating', 'quantity_in_stock'], 'Categories': ['category_id', 'category_name']}. \n# the user question is: Retrieve the average price of products in each category. \n#SQL query: SELECT c.category_name, AVG(p.price) AS average_price FROM Categories c JOIN Products p ON c.category_id = p.category_id GROUP BY c.category_name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the total revenue generated from class sessions taught by each instructor in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the total revenue generated from class sessions taught by each instructor in the last month.",
    "output": "SELECT Instructors.instructor_name, SUM(Payments.amount) AS total_revenue FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Payments ON Enrollments.enrollment_id = Payments.enrollment_id WHERE Enrollments.status = 'confirmed' AND Payments.payment_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Instructors.instructor_id ORDER BY total_revenue DESC;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Payments": [
            "payment_id",
            "user_id",
            "payment_amount",
            "payment_date",
            "class_id",
            "rental_id",
            "enrollment_id",
            "amount",
            "payment_method"
        ]
    },
    "response_text": "SELECT i.instructor_name, SUM(p.payment_amount) AS total_revenue\nFROM Instructors i\nJOIN ClassSessions cs ON i.instructor_id = cs.instructor_id\nJOIN Payments p ON cs.class_id = p.class_id\nWHERE cs.session_date >= DATEADD(month, -1, GETDATE())\nGROUP BY i.instructor_name;",
    "prompt_token_number": 426,
    "response_token_number": 70
},
{
    "id": 34324,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'purchases': ['customer_id', 'product_id', 'brand_id', 'quantity', 'purchase_date', 'price', 'store_location', 'category', 'project_id']}. \n# the user question is: Find the most popular product category among customers who have made a purchase worth more than $1000.. \n#SQL query: SELECT category, COUNT(*) as num_customers FROM ( SELECT DISTINCT category, customer_id FROM purchases WHERE price * quantity > 1000 ) GROUP BY category ORDER BY num_customers DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the total revenue generated from each payment method.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the total revenue generated from each payment method.",
    "output": "SELECT Payments.payment_method, SUM(Payments.amount) AS total_revenue FROM Payments WHERE Payments.payment_date BETWEEN date('now', '-1 year') AND date('now') GROUP BY Payments.payment_method",
    "schema": "pilates",
    "processed_schema_content": {
        "Payments": [
            "payment_id",
            "user_id",
            "payment_amount",
            "payment_date",
            "class_id",
            "rental_id",
            "enrollment_id",
            "amount",
            "payment_method"
        ]
    },
    "response_text": "SELECT payment_method, SUM(payment_amount) as total_revenue FROM Payments GROUP BY payment_method;",
    "prompt_token_number": 245,
    "response_token_number": 19
},
{
    "id": 34325,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Book': ['series_id', 'publication_year', 'title', 'id', 'author_id', 'publisher_id', 'published_year', 'word_count', 'publication_date', 'value', 'pages', 'year', 'language_id', 'publish_date', 'price', 'genre_id'], 'Author': ['id', 'birth_year', 'name', 'gender', 'first_name', 'last_name', 'nationality', 'author_id'], 'Review': ['book_id', 'rating', 'reviewer_name', 'name', 'id', 'reader_id']}. \n# the user question is: Find the average rating for each author, ordered by the average rating in descending order.. \n#SQL query: SELECT Author.name, AVG(Review.rating) AS avg_rating FROM Author INNER JOIN Book ON Author.id = Book.author_id INNER JOIN Review ON Book.id = Review.book_id GROUP BY Author.id ORDER BY avg_rating DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the most popular class sessions in terms of the total duration of all enrollments in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the most popular class sessions in terms of the total duration of all enrollments in the last month.",
    "output": "SELECT Classes.class_name, ClassSessions.session_date, SUM(ClassSessions.duration_minutes) AS total_duration FROM Classes INNER JOIN Enrollments ON Classes.class_id = Enrollments.class_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Classes.class_id, ClassSessions.session_id ORDER BY total_duration DESC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT ClassSessions.session_id, SUM(Classes.duration_minutes) AS total_duration\nFROM ClassSessions \nINNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id \nINNER JOIN Classes ON ClassSessions.class_id = Classes.class_id\nWHERE Enrollments.enrollment_date >= NOW() - INTERVAL 1 MONTH\nGROUP BY ClassSessions.session_id \nORDER BY total_duration DESC \nLIMIT 1;",
    "prompt_token_number": 561,
    "response_token_number": 83
},
{
    "id": 34326,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'john_doe', 'jane_smith', 'mike_jones'], 'Projects': ['user_id', 'Project', 'project_name', 'project_id', 'created_date'], 'Instances': ['project_id', 'instance_name', 'launch_date', 'storage_id', 'user_id', 'instance_id', 'instance_type', 'region_id', 'zone_id', 'cpu_usage', 'memory_usage', 'availability_zone', 'storage_usage', 'network_bandwidth', 'status', 'cpu_count']}. \n# the user question is: Text Query: Find the project names and their respective owners for projects that have instances with a CPU count greater than 4 and memory usage exceeding 16 GB.. \n#SQL query: SELECT Projects.project_name, Users.username FROM Projects INNER JOIN Users ON Projects.user_id = Users.user_id INNER JOIN Instances ON Projects.project_id = Instances.project_id WHERE Instances.cpu_count > 4 AND Instances.memory_usage > 16;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught the most class sessions in the last 3 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught the most class sessions in the last 3 months.",
    "output": "SELECT Instructors.instructor_name, COUNT(ClassSessions.session_id) AS num_sessions_taught FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-3 months') AND date('now') GROUP BY Instructors.instructor_id ORDER BY num_sessions_taught DESC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name, COUNT(ClassSessions.session_id) AS number_of_classes \nFROM Instructors \nINNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id \nWHERE ClassSessions.session_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) \nGROUP BY Instructors.instructor_name \nORDER BY number_of_classes DESC \nLIMIT 1;",
    "prompt_token_number": 409,
    "response_token_number": 76
},
{
    "id": 34327,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Organisms': ['organism_id', 'name', 'species', 'trophic_level_id', 'body_length', 'conservation_status_id', 'plant_id', 'nutrient_level', 'nutritional_value', 'nutrient_requirement', 'ecosystem_id', 'body_mass', 'biomass', 'population', 'common_name', 'is_plant', 'is_carnivorous', 'lifespan', 'diet_type'], 'Food_Webs': ['food_web_id', 'ecosystem_id', 'organism_id']}. \n# the user question is: Find the names of all organisms that are not part of any ecosystem.. \n#SQL query: SELECT Organisms.name FROM Organisms WHERE NOT EXISTS ( SELECT 1 FROM Food_Webs WHERE Food_Webs.organism_id = Organisms.organism_id );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have enrolled in more than 3 classes in the last month and have not canceled any of their enrollments.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have enrolled in more than 3 classes in the last month and have not canceled any of their enrollments.",
    "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id WHERE Enrollments.status = 'confirmed' AND Classes.class_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id HAVING COUNT(DISTINCT Enrollments.class_id) > 3 AND COUNT(CASE WHEN Enrollments.status = 'canceled' THEN 1 ELSE NULL END) = 0",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.username\nFROM Users\nWHERE \n    (SELECT COUNT(*) \n     FROM Enrollments \n     WHERE Enrollments.user_id = Users.user_id AND Enrollments.enrollment_date >= DATEADD(month, -1, GETDATE()) AND Enrollments.is_cancelled = FALSE ) > 3;",
    "prompt_token_number": 530,
    "response_token_number": 64
},
{
    "id": 34329,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Incidents': ['reported_by_user_id', 'location_id', 'created_at', 'incident_id', 'evacuation_status', 'severity_level', 'vehicle_id', 'status', 'reported_time', 'location', 'type', 'start_time', 'assigned_to_vehicle_id', 'incident_date', 'incident_type', 'category_id', 'reporting_agency_id', 'reported_at', 'date_id', 'description', 'date', 'time'], 'Locations': ['longitude', 'location_id', 'latitude', 'location_name', 'address', 'city', 'city_id', 'location', 'state_id'], 'Cities': ['city_id', 'city_name', 'population', 'state_id', 'city']}. \n# the user question is: Retrieve the total number of incidents reported in each city for the month of April 2023.. \n#SQL query: SELECT COUNT(Incidents.incident_id) AS num_incidents, Cities.city_name FROM Incidents INNER JOIN Locations ON Incidents.location_id = Locations.location_id INNER JOIN Cities ON Locations.city_id = Cities.city_id WHERE strftime('%m', Incidents.reported_at) = '04' AND strftime('%Y', Incidents.reported_at) = '2023' GROUP BY Cities.city_name\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the average age of users who have taken classes in the studio in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the average age of users who have taken classes in the studio in the last month.",
    "output": "SELECT AVG(Users.age) AS avg_age FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now');",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT AVG(Users.age) FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.class_id = ClassSessions.class_id WHERE session_date BETWEEN date('now','-1 month') AND date('now')",
    "prompt_token_number": 554,
    "response_token_number": 54
},
{
    "id": 34330,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Billing': ['session_id', 'date', 'amount', 'id', 'start_time', 'end_time'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id'], 'Client_Diagnoses': ['client_id', 'diagnosis_id'], 'Diagnoses': ['id', 'name']}. \n# the user question is: Retrieve the names and total amount billed for all therapists who have billed for sessions with a client who has a diagnosis of obsessive-compulsive disorder and have been billed for at least six sessions during the past month, sorted in descending order by total amount billed:. \n#SQL query: SELECT t.name, SUM(b.amount) AS total_billed FROM Therapists t INNER JOIN Sessions s ON t.id = s.therapist_id INNER JOIN Billing b ON s.id = b.session_id INNER JOIN Session_Attendees sa ON s.id = sa.session_id INNER JOIN Clients c ON sa.client_id = c.id INNER JOIN Client_Diagnoses cd ON c.id = cd.client_id INNER JOIN Diagnoses d ON cd.diagnosis_id = d.id WHERE d.name = 'Obsessive-Compulsive Disorder' AND b.date >= date('now', '-1 month') GROUP BY t.id HAVING COUNT(DISTINCT s.id) >= 6 ORDER BY total_billed DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the most common reason for enrollment cancellations among users who have canceled at least one enrollment in the last quarter.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the most common reason for enrollment cancellations among users who have canceled at least one enrollment in the last quarter.",
    "output": "SELECT Enrollments.cancellation_reason, COUNT(*) AS num_cancellations FROM Enrollments WHERE Enrollments.status = 'canceled' AND Enrollments.cancellation_date BETWEEN date('now', '-3 months') AND date('now') AND Enrollments.cancellation_reason IS NOT NULL GROUP BY Enrollments.cancellation_reason ORDER BY num_cancellations DESC LIMIT 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT cancellation_reason, COUNT(*) AS Frequency \nFROM Enrollments\nWHERE is_cancelled = 1 AND cancellation_date >= date('now', '-3 month')\nGROUP BY cancellation_reason \nORDER BY Frequency DESC \nLIMIT 1;",
    "prompt_token_number": 775,
    "response_token_number": 47
},
{
    "id": 34331,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Publishers': ['PublisherID', 'PublisherName', 'SeriesID'], 'Series': ['SeriesID', 'SeriesTitle', 'PublisherID', 'AverageCoverPrice', 'AverageIssueRating', 'SeriesName'], 'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate'], 'Creators': ['CreatorID', 'CreatorName'], 'IssueCreators': ['CreatorID', 'IssueID', 'RoleName', 'Role']}. \n# the user question is: Find the top 5 most prolific writers of issues published by Marvel Comics in 2023:. \n#SQL query: SELECT Creators.CreatorName, COUNT(*) as NumIssues FROM Creators JOIN IssueCreators ON Creators.CreatorID = IssueCreators.CreatorID JOIN Issues ON IssueCreators.IssueID = Issues.IssueID JOIN Series ON Issues.SeriesID = Series.SeriesID JOIN Publishers ON Series.PublisherID = Publishers.PublisherID WHERE Publishers.PublisherName = 'Marvel Comics' AND Issues.CoverDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY Creators.CreatorID ORDER BY NumIssues DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the number of unique users who have taken a class taught by each instructor in the last 6 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the number of unique users who have taken a class taught by each instructor in the last 6 months.",
    "output": "SELECT Instructors.instructor_name, COUNT(DISTINCT Enrollments.user_id) AS num_unique_users FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-6 months') AND date('now') GROUP BY Instructors.instructor_id ORDER BY num_unique_users DESC;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name, COUNT(DISTINCT Enrollments.user_id) as NumUsers FROM Instructors JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id JOIN Enrollments ON ClassSessions.class_id = Enrollments.class_id WHERE ClassSessions.session_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) AND CURRENT_DATE GROUP BY Instructors.instructor_id;",
    "prompt_token_number": 604,
    "response_token_number": 81
},
{
    "id": 34332,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['username', 'user_id', 'email', 'john_doe', 'jane_doe', 'sarah_smith', 'tom_wilson', 'robert_king', 'alice_smith', 'jack_smith', 'jane_smith', 'mary_jones', 'joe_brown', 'james_smith', 'jessica_wong', 'david_smith', 'first_name', 'last_name', 'james_wong', 'emily_smith', 'jennifer_wilson', 'subscription', 'date_of_birth'], 'Sales': ['Sales', 'Product', 'Region', 'State', 'product_id', 'dataset_id', 'quantity', 'sale_date', 'Unit_price', 'Sale_date', 'salesperson_id', 'sale_id', 'customer_id', 'company_id', 'unit_price', 'sales_id', 'model_id'], 'Products': ['Product_name', 'Unit_price', 'product_id', 'category_id', 'product_name', 'unit_price', 'origin_state', 'manufacturer_id', 'brand_id', 'stock'], 'Categories': ['category_id', 'Category_name', 'category_name']}. \n# the user question is: What is the total revenue generated by each user in the 'Sales' table for products in the 'Clothing' category, where the sale date is in the year 2023?. \n#SQL query: SELECT Users.username, SUM(Sales.quantity * Sales.Unit_price) AS total_revenue FROM Users INNER JOIN Sales ON Users.user_id = Sales.salesperson_id INNER JOIN Products ON Sales.product_id = Products.product_id INNER JOIN Categories ON Products.category_id = Categories.category_id WHERE Categories.category_name = 'Clothing' AND strftime('%Y', Sales.sale_date) = '2023' GROUP BY Users.username;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the top 3 most popular class types among male users who have taken classes in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the top 3 most popular class types among male users who have taken classes in the last month.",
    "output": "SELECT Classes.class_type, COUNT(*) AS num_enrollments FROM Classes INNER JOIN Enrollments ON Classes.class_id = Enrollments.class_id INNER JOIN Users ON Enrollments.user_id = Users.user_id WHERE Enrollments.status = 'confirmed' AND Users.gender = 'M' AND Enrollments.enrollment_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Classes.class_type ORDER BY num_enrollments DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Classes.class_type, COUNT(*) AS count FROM Classes \nINNER JOIN Enrollments ON Classes.class_id = Enrollments.class_id \nINNER JOIN Users ON Enrollments.user_id = Users.user_id \nWHERE Users.gender = 'Male' AND Classes.class_date >= DATE('now', '-1 month') \nGROUP BY Classes.class_type \nORDER BY count DESC \nLIMIT 3;",
    "prompt_token_number": 726,
    "response_token_number": 78
},
{
    "id": 34333,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Suspects': ['suspect_name', 'case_id', 'suspect_description', 'suspect_id', 'suspect_dna', 'suspect_age'], 'Cases': ['case_status', 'case_id', 'case_description', 'case_name'], 'CrimeScenes': ['location', 'date', 'case_id', 'crime_scene_id'], 'Witnesses': ['case_id', 'witness_statement', 'witness_id', 'witness_name']}. \n# the user question is: Get the case names and the corresponding locations for cases that have at least one witness whose statement mentions the suspect's name:. \n#SQL query: SELECT c.case_name, cs.location FROM Cases c JOIN Witnesses w ON c.case_id = w.case_id JOIN Suspects s ON c.case_id = s.case_id JOIN CrimeScenes cs ON c.case_id = cs.case_id WHERE w.witness_statement LIKE '%' || s.suspect_name || '%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the total number of class enrollments in the last year that have not been canceled, and the percentage of those that were attended.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the total number of class enrollments in the last year that have not been canceled, and the percentage of those that were attended.",
    "output": "SELECT COUNT(*) AS total_enrollments, ROUND(100.0 * SUM(CASE WHEN Enrollments.attendance_status = 'attended' THEN 1 ELSE 0 END) / COUNT(*), 2) AS attendance_percentage FROM Enrollments WHERE Enrollments.status = 'confirmed' AND Enrollments.enrollment_date BETWEEN date('now', '-1 year') AND date('now');",
    "schema": "pilates",
    "processed_schema_content": {
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT COUNT(*) AS total_enrollments,\n  (SELECT COUNT(*) FROM Enrollments WHERE is_cancelled = 0 AND attendance_status = 'attended' AND enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) / COUNT(*) * 100 AS attended_percentage\nFROM Enrollments\nWHERE is_cancelled = 0 AND enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",
    "prompt_token_number": 399,
    "response_token_number": 84
},
{
    "id": 34334,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Illustration': ['user_id', 'file_size', 'date_created', 'name', 'id', 'artist_id', 'category', 'price', 'created_year', 'sold', 'created_date', 'description', 'total_sold'], 'Artist': ['email', 'country', 'name', 'id', 'Dali', 'Salvador', 'monet', 'Vincent', 'Gogh', 'van', 'last_login', 'rating']}. \n# the user question is: Retrieve the name and email of all artists who have sold at least one illustration and have not logged in for more than 6 months.. \n#SQL query: SELECT Artist.name, Artist.email FROM Artist JOIN Illustration ON Artist.id = Illustration.artist_id WHERE Illustration.sold = 1 AND Artist.last_login < DATE('now', '-6 months');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructor who has taught the highest number of classes in the last 3 months, along with the total number of classes taught.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructor who has taught the highest number of classes in the last 3 months, along with the total number of classes taught.",
    "output": "SELECT Instructors.instructor_name, COUNT(*) AS num_classes FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-3 months') AND date('now') GROUP BY Instructors.instructor_id ORDER BY num_classes DESC LIMIT 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name, COUNT(ClassSessions.session_id) AS total_classes_taught\nFROM Instructors\nJOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id\nWHERE ClassSessions.session_date >= DATE('now', '-3 months')\nGROUP BY Instructors.instructor_name\nORDER BY total_classes_taught DESC\nLIMIT 1;",
    "prompt_token_number": 385,
    "response_token_number": 73
},
{
    "id": 34335,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue'], 'Studio': ['studio_id', 'name', 'headquarters'], 'Film_Studio': ['studio_id', 'film_id'], 'Film_Genre': ['film_id', 'genre_id'], 'Genre': ['name', 'genre_id']}. \n# the user question is: Find the top-rated action films released by Warner Bros. studios:. \n#SQL query: SELECT Film.title, Film.rating FROM Film INNER JOIN Film_Genre ON Film.film_id = Film_Genre.film_id INNER JOIN Genre ON Film_Genre.genre_id = Genre.genre_id INNER JOIN Film_Studio ON Film.film_id = Film_Studio.film_id INNER JOIN Studio ON Film_Studio.studio_id = Studio.studio_id WHERE Genre.name = 'Action' AND Studio.name = 'Warner Bros.' AND Film.rating >= 8.0 ORDER BY Film.rating DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have not taken any classes in the last 6 months, along with their email addresses.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have not taken any classes in the last 6 months, along with their email addresses.",
    "output": "SELECT Users.email FROM Users WHERE Users.user_id NOT IN ( SELECT DISTINCT Enrollments.user_id FROM Enrollments INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-6 months') AND date('now') );",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.username, Users.email FROM Users LEFT JOIN Enrollments ON Users.user_id = Enrollments.user_id WHERE Enrollments.enrollment_date < DATE_SUB(CURDATE(), INTERVAL 6 MONTH) OR Enrollments.enrollment_date IS NULL;",
    "prompt_token_number": 547,
    "response_token_number": 52
},
{
    "id": 34336,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'team_id', 'completed_by', 'skill_id', 'first_name', 'manager_id', 'last_name', 'job_title', 'office_location', 'role', 'years_of_experience', 'department_id', 'salary'], 'User_Skills': ['user_id', 'skill_id', 'proficiency_level', 'skill_name'], 'Skills': ['skill_name', 'skill_id', 'Python'], 'Meeting_Attendees': ['user_id', 'meeting_id', 'attendance_status', 'attendee_id', 'attendance_date'], 'Meetings': ['start_time', 'meeting_id', 'location', 'meeting_date', 'meeting_title', 'organizer_id', 'team_id', 'meeting_time'], 'Skill_Proficiencies': ['proficiency_level', 'skill_id', 'proficiency_level_num', 'skill_name']}. \n# the user question is: Find all users who have attended a meeting with a user who has a skill with the name containing \"leadership\" and a proficiency level of \"Intermediate\" or higher:. \n#SQL query: SELECT DISTINCT Users.username FROM Users JOIN Meeting_Attendees AS Attendee1 ON Users.user_id = Attendee1.user_id JOIN Meetings ON Attendee1.meeting_id = Meetings.meeting_id JOIN Meeting_Attendees AS Attendee2 ON Meetings.meeting_id = Attendee2.meeting_id JOIN User_Skills ON Attendee2.user_id = User_Skills.user_id JOIN Skills ON User_Skills.skill_id = Skills.skill_id JOIN Skill_Proficiencies ON User_Skills.skill_id = Skill_Proficiencies.skill_id WHERE Skills.skill_name LIKE '%leadership%' AND Skill_Proficiencies.proficiency_level IN ('Intermediate', 'Expert');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the classes that have the highest average rating based on user reviews, along with the number of reviews.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have the highest average rating based on user reviews, along with the number of reviews.",
    "output": "SELECT Classes.class_type, AVG(Reviews.rating) AS avg_rating, COUNT(Reviews.review_id) AS num_reviews FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Reviews ON ClassSessions.session_id = Reviews.session_id WHERE Reviews.rating IS NOT NULL GROUP BY Classes.class_id ORDER BY avg_rating DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT Classes.class_name, AVG(Reviews.rating) AS Average_Rating, COUNT(Reviews.review_id) AS Number_of_Reviews\nFROM Classes\nJOIN Reviews ON Classes.class_id = Reviews.class_id\nGROUP BY Classes.class_name\nORDER BY Average_Rating DESC\nLIMIT 1;",
    "prompt_token_number": 682,
    "response_token_number": 58
},
{
    "id": 34338,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'celestial_bodies': ['radius', 'mass', 'name', 'type', 'number_of_moons', 'distance_from_sun', 'id', 'distance_from_earth', 'orbital_period', 'diameter', 'orbiting_body_id', 'average_surface_temperature', 'surface_temperature', 'perihelion_distance', 'period', 'semimajor_axis', 'redshift', 'velocity', 'luminosity', 'schwarzschild_radius', 'eccentricity', 'aphelion_distance', 'spin_period', 'semi_major_axis', 'surface_gravity', 'temperature', 'magnitude', 'accretion_disk_temperature', 'rotation_period', 'obliquity', 'pulse_period', 'peak_absolute_magnitude', 'albedo', 'apparent_magnitude', 'absolute_magnitude', 'spectral_type', 'discovery_year', 'spectral_class', 'distance_from_star', 'discovery_method_id', 'equilibrium_temperature', 'metallicity', 'age', 'effective_temperature', 'atmospheric_composition', 'inclination', 'parallax', 'rotation_velocity', 'axial_tilt', 'orbital_inclination', 'density', 'rotational_velocity', 'magnetic_field_strength', 'composition', 'rotational_period', 'spin', 'distance_from_galactic_center', 'binary_system', 'constellation', 'stellar_evolution_stage', 'star_cluster_type', 'galaxy', 'orbital_eccentricity', 'star_spectral_type', 'orbital_period_unit', 'diameter_unit', 'discovery_method', 'pulse_period_unit', 'distance_unit', 'radius_unit', 'avg_temperature', 'temperature_unit', 'aphelion_unit', 'perihelion_unit', 'event_horizon_unit', 'event_horizon_radius', 'luminosity_distance', 'orbit_type', 'equatorial_diameter', 'gravity_unit', 'escape_velocity', 'angle_unit', 'surface_area', 'density_unit', 'parent_body_id', 'atmospheric_pressure', 'luminosity_class', 'inner_habitable_zone', 'outer_habitable_zone', 'period_unit', 'classification', 'pressure_unit', 'surface_pressure', 'orbiting', 'distance', 'proper_motion', 'proper_motion_unit', 'mean_radius', 'mass_unit', 'temperature_range', 'Gas', 'Giant', 'brightness_temperature', 'parallax_unit', 'metallicity_unit', 'magnetic_field_unit', 'spin_parameter', 'orbiting_id', 'stellar_mass', 'stage', 'radial_velocity', 'host_star', 'accretion_rate', 'core_type']}. \n# the user question is: Retrieve the name and mass of all black holes that have an age greater than 1 billion years and a spin between 0.2 and 0.5.. \n#SQL query: SELECT name, mass FROM celestial_bodies WHERE type = 'Black Hole' AND age > 1000000000 AND spin BETWEEN 0.2 AND 0.5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the most popular time slot for classes on Saturdays, based on the number of enrollments in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the most popular time slot for classes on Saturdays, based on the number of enrollments in the last month.",
    "output": "SELECT ClassSessions.start_time FROM ClassSessions INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE Classes.class_day = 'Saturday' AND Enrollments.status = 'confirmed' AND Enrollments.enrollment_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY ClassSessions.start_time ORDER BY COUNT(*) DESC LIMIT 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT session_start_time, COUNT(*) as num_enrollments \nFROM ClassSessions\nINNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id\nWHERE EXTRACT(DAY FROM session_date) = 6 AND enrollment_date \nBETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE\nGROUP BY session_start_time\nORDER BY num_enrollments DESC\nLIMIT 1;",
    "prompt_token_number": 998,
    "response_token_number": 86
},
{
    "id": 34340,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Match': ['team1_id', 'match_id', 'team2_id', 'venue_id', 'date', 'venue', 'winning_team_id', 'tournament_id', 'attendance', 'team', 'winning_team'], 'Referee': ['referee_name', 'referee_id'], 'Referee_Assignment': ['match_id', 'referee_id'], 'Venue': ['venue_name', 'venue_id', 'country', 'city'], 'Tournament': ['tournament_id', 'country', 'tournament_name', 'start_date', 'venue_id']}. \n# the user question is: Find the referees who have officiated matches in tournaments held in at least 152 different cities and 152 different years. \n#SQL query: SELECT Referee.referee_name FROM Referee JOIN Referee_Assignment ON Referee.referee_id = Referee_Assignment.referee_id JOIN Match ON Referee_Assignment.match_id = Match.match_id JOIN Tournament ON Match.tournament_id = Tournament.tournament_id JOIN Venue ON Tournament.venue_id = Venue.venue_id GROUP BY Referee.referee_name HAVING COUNT(DISTINCT Venue.city) >= 152 AND COUNT(DISTINCT strftime('%Y', Tournament.start_date)) >= 152;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the classes that have not been reviewed by users.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have not been reviewed by users.",
    "output": "SELECT Classes.class_type FROM Classes LEFT JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Reviews ON ClassSessions.session_id = Reviews.session_id WHERE Reviews.review_id IS NULL;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Reviews": [
            "rating",
            "session_id",
            "class_id",
            "rental_id",
            "user_id",
            "comment",
            "review_id",
            "review_date",
            "review_text",
            "instructor_id",
            "enrollment_id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT Classes.class_name FROM Classes LEFT JOIN Reviews ON Classes.class_id = Reviews.class_id WHERE Reviews.review_id IS NULL;",
    "prompt_token_number": 569,
    "response_token_number": 24
},
{
    "id": 34341,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Client': ['client_id', 'first_name', 'last_name', 'email', 'phone_number', 'date_of_birth', 'gender', 'address', 'age', 'weight', 'partner_id', 'zip_code', 'name', 'startingWeight', 'phone', 'clientId'], 'Session': ['session_id', 'trainer_id', 'client_id', 'start_time', 'end_time', 'location', 'notes', 'status', 'rating', 'exercise_plan_id', 'sessionDate', 'clientId', 'duration', 'personalTrainerId', 'cost'], 'Meal': ['meal_id', 'name', 'description', 'protein_content', 'calories', 'cuisine_type', 'fat_content', 'fiber_content', 'sugar_content', 'carb_content', 'sodium_content', 'carbohydrate_content'], 'Nutrition_Plan': ['end_date', 'nutrition_plan_id', 'client_id'], 'Meal_Plan': ['nutrition_plan_id', 'meal_id', 'day_of_week', 'time_of_day', 'meal_plan_id', 'client_id', 'plan_id', 'daily_calorie_goal']}. \n# the user question is: Find the clients who have not attended a workout session in the last 2 months and have an active nutrition plan that includes a meal with more than 20 grams of protein.. \n#SQL query: SELECT DISTINCT Client.first_name, Client.last_name FROM Client JOIN Nutrition_Plan ON Client.client_id = Nutrition_Plan.client_id JOIN Meal_Plan ON Nutrition_Plan.nutrition_plan_id = Meal_Plan.nutrition_plan_id JOIN Meal ON Meal_Plan.meal_id = Meal.meal_id WHERE Meal.protein_content > 20 AND Nutrition_Plan.end_date >= DATE('now', '-2 months') AND Client.client_id NOT IN (SELECT client_id FROM Session WHERE start_time >= DATE('now', '-2 months'))\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught the same class type in the last month, and the number of times they have taught it.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught the same class type in the last month, and the number of times they have taught it.",
    "output": "SELECT Instructors.instructor_name, Classes.class_type, COUNT(*) AS num_classes FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Instructors.instructor_id, Classes.class_id HAVING COUNT(*) > 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name, Classes.class_type, COUNT(*) as taught_count \nFROM Instructors \nJOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id \nJOIN Classes ON ClassSessions.class_id = Classes.class_id \nWHERE ClassSessions.session_date >= DATE('now', '-1 month') \nGROUP BY Instructors.instructor_name, Classes.class_type \nHAVING COUNT(*) > 1;",
    "prompt_token_number": 711,
    "response_token_number": 84
},
{
    "id": 34344,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Artists': ['artist_name', 'artist_id', 'artist_genre', 'artist_country', 'country_id', 'genre_id'], 'Albums': ['artist_id', 'release_date', 'album_title', 'album_id', 'label_id', 'release_year', 'album_name', 'genre_id'], 'Labels': ['label_country', 'label_name', 'label_id']}. \n# the user question is: Find the artists who have released albums under the label \"Mau5trap\":. \n#SQL query: SELECT Artists.artist_name FROM Artists JOIN Albums ON Artists.artist_id = Albums.artist_id JOIN Labels ON Albums.label_id = Labels.label_id WHERE Labels.label_name = 'Mau5trap';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have taken classes at least once a week for the past 6 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have taken classes at least once a week for the past 6 months.",
    "output": "SELECT Users.user_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-6 months') AND date('now') GROUP BY Users.user_id HAVING COUNT(DISTINCT strftime('%Y-%W', ClassSessions.session_date)) >= 24;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.username \nFROM Users \nJOIN Enrollments ON Users.user_id = Enrollments.user_id \nJOIN ClassSessions ON Enrollments.class_id = ClassSessions.class_id \nWHERE ClassSessions.session_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE() \nGROUP BY Users.username\nHAVING COUNT(DISTINCT WEEK(ClassSessions.session_date)) >= 26;",
    "prompt_token_number": 439,
    "response_token_number": 80
},
{
    "id": 34345,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Actor': ['actor_id', 'name', 'actor_name'], 'Movie_Actor': ['movie_id', 'actor_id'], 'Box_Office': ['movie_id', 'revenue', 'budget']}. \n# the user question is: Retrieve the title of the movie and the name of the lead actor for all movies that had a budget less than $50 million and a box office revenue greater than $150 million, sorted in descending order by the box office revenue value.. \n#SQL query: SELECT Movie.title, Actor.name AS lead_actor, Box_Office.revenue FROM Movie JOIN Movie_Actor ON Movie.movie_id = Movie_Actor.movie_id JOIN Actor ON Movie_Actor.actor_id = Actor.actor_id JOIN Box_Office ON Movie.movie_id = Box_Office.movie_id WHERE Movie.budget < 50000000 AND Box_Office.revenue > 150000000 ORDER BY Box_Office.revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught classes in all time slots (morning, afternoon, evening) in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught classes in all time slots (morning, afternoon, evening) in the last month.",
    "output": "SELECT Instructors.instructor_name FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Instructors.instructor_id HAVING COUNT(DISTINCT CASE WHEN strftime('%H:%M', ClassSessions.start_time) BETWEEN '06:00' AND '11:59' THEN 'morning' WHEN strftime('%H:%M', ClassSessions.start_time) BETWEEN '12:00' AND '17:59' THEN 'afternoon' WHEN strftime('%H:%M', ClassSessions.start_time) BETWEEN '18:00' AND '23:59' THEN 'evening' END) = 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT DISTINCT Instructors.instructor_name FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date >= date('now','-1 month') AND ((ClassSessions.session_start_time BETWEEN '06:00:00' AND '11:59:59') AND (ClassSessions.session_start_time BETWEEN '12:00:00' AND '17:59:59') AND (ClassSessions.session_start_time BETWEEN '18:00:00' AND '23:59:59'));",
    "prompt_token_number": 435,
    "response_token_number": 108
},
{
    "id": 34346,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Polymorphism': ['gene_id', 'position', 'reference_sequence', 'alternate_sequence', 'polymorphism_id', 'frequency']}. \n# the user question is: Retrieve the names of all genes and their associated polymorphisms that have a frequency greater than 0.5% and are located on chromosome 50.. \n#SQL query: SELECT Gene.gene_name, Polymorphism.polymorphism_id FROM Gene JOIN Polymorphism ON Gene.gene_id = Polymorphism.gene_id WHERE Polymorphism.frequency > 0.005 AND Gene.chromosome_id = 50;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have taken at least 3 different class types in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have taken at least 3 different class types in the last month.",
    "output": "SELECT Users.user_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id HAVING COUNT(DISTINCT Classes.class_type) >= 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.user_id, Users.username \nFROM Users \nJOIN Enrollments ON Users.user_id = Enrollments.user_id \nJOIN Classes ON Enrollments.class_id = Classes.class_id \nWHERE Enrollments.enrollment_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() \nGROUP BY Users.user_id, Users.username \nHAVING COUNT(DISTINCT Classes.class_type_id) >= 3;",
    "prompt_token_number": 597,
    "response_token_number": 87
},
{
    "id": 34347,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Inventory': ['product_id', 'supplier_id', 'quantity', 'inventory_id', 'units_in_stock', 'quantity_on_hand', 'expiration_date', 'expected_arrival_date', 'quantity_on_order'], 'Suppliers': ['supplier_name', 'supplier_id', 'phone_number', 'address', 'email', 'country', 'contact_name', 'state', 'city', 'phone', 'company_name', 'Canada', 'USA', 'supplier_rating', 'zip'], 'Sale_Items': ['product_id', 'sale_id', 'quantity', 'sale_item_id', 'customer_id', 'unit_price', 'discount_code', 'sale_date', 'price'], 'Product_Ratings': ['rating', 'product_id']}. \n# the user question is: Find the names and total revenue for all products that have been sold at least 15 times and have a rating of 4 or higher, and have a supplier based in Canada or Mexico.. \n#SQL query: SELECT Products.product_name, SUM(Sale_Items.quantity * Products.price) AS total_revenue FROM Products INNER JOIN Sale_Items ON Products.product_id = Sale_Items.product_id INNER JOIN Product_Ratings ON Products.product_id = Product_Ratings.product_id INNER JOIN Inventory ON Products.product_id = Inventory.product_id INNER JOIN Suppliers ON Inventory.supplier_id = Suppliers.supplier_id WHERE Product_Ratings.rating >= 4 AND (SELECT COUNT(Sale_Items.sale_item_id) FROM Sale_Items WHERE Sale_Items.product_id = Products.product_id) >= 15 AND Suppliers.country IN ('Canada', 'Mexico') GROUP BY Products.product_id ORDER BY total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the number of active users who have not taken any classes in the last 3 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the number of active users who have not taken any classes in the last 3 months.",
    "output": "SELECT COUNT(*) AS num_inactive_users FROM Users WHERE user_id NOT IN ( SELECT DISTINCT Users.user_id FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-3 months') AND date('now') ) AND user_status = 'active';",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT COUNT(*) FROM Users WHERE user_status = 'active' AND user_id NOT IN (SELECT Enrollments.user_id FROM Enrollments WHERE enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH))",
    "prompt_token_number": 707,
    "response_token_number": 43
},
{
    "id": 34351,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'News_Article': ['category_id', 'content', 'created_at', 'title', 'user_id', 'id', 'article_id', 'date', 'published_date', 'word_count', 'updated_date', 'author_id', 'publish_date'], 'News_Author': ['id', 'name', 'published_articles_count', 'latest_published_date', 'category_count', 'author_id'], 'Article_View': ['id', 'article_id', 'view_date', 'user_id', 'num_views', 'views']}. \n# the user question is: Retrieve the names of authors who have published articles that have been viewed more than the average number of views of all articles.. \n#SQL query: SELECT DISTINCT News_Author.name FROM News_Author JOIN News_Article ON News_Author.id = News_Article.author_id JOIN Article_View ON News_Article.id = Article_View.article_id WHERE Article_View.num_views > ( SELECT AVG(Article_View.num_views) FROM Article_View );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the top 3 busiest instructors in terms of the number of classes they have taught in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the top 3 busiest instructors in terms of the number of classes they have taught in the last month.",
    "output": "SELECT Instructors.instructor_name, COUNT(*) AS num_classes_taught FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Instructors.instructor_id ORDER BY COUNT(*) DESC LIMIT 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name FROM Instructors JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE DATE(ClassSessions.session_date) > DATE(NOW()) - INTERVAL 1 MONTH GROUP BY Instructors.instructor_name ORDER BY COUNT(*) DESC LIMIT 3;",
    "prompt_token_number": 410,
    "response_token_number": 57
},
{
    "id": 34353,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'team_id', 'completed_by', 'skill_id', 'first_name', 'manager_id', 'last_name', 'job_title', 'office_location', 'role', 'years_of_experience', 'department_id', 'salary'], 'User_Skills': ['user_id', 'skill_id', 'proficiency_level', 'skill_name'], 'Skills': ['skill_name', 'skill_id', 'Python'], 'Meeting_Attendees': ['user_id', 'meeting_id', 'attendance_status', 'attendee_id', 'attendance_date'], 'Meetings': ['start_time', 'meeting_id', 'location', 'meeting_date', 'meeting_title', 'organizer_id', 'team_id', 'meeting_time'], 'Skill_Proficiencies': ['proficiency_level', 'skill_id', 'proficiency_level_num', 'skill_name']}. \n# the user question is: Find all users who have a skill with the name containing \"project management\" and a proficiency level of \"Advanced\" and have attended a meeting with the word \"planning\" in the meeting title in the last 60 days:. \n#SQL query: SELECT DISTINCT Users.username FROM Users JOIN User_Skills ON Users.user_id = User_Skills.user_id JOIN Skills ON User_Skills.skill_id = Skills.skill_id JOIN Skill_Proficiencies ON User_Skills.skill_id = Skill_Proficiencies.skill_id JOIN Meeting_Attendees ON Users.user_id = Meeting_Attendees.user_id JOIN Meetings ON Meeting_Attendees.meeting_id = Meetings.meeting_id WHERE Skills.skill_name LIKE '%project management%' AND Skill_Proficiencies.proficiency_level = 'Advanced' AND Meetings.meeting_title LIKE '%planning%' AND Meetings.meeting_date BETWEEN DATE('now', '-60 day') AND DATE('now');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the number of active users who have taken classes in each location in the last month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the number of active users who have taken classes in each location in the last month.",
    "output": "SELECT Locations.location_name, COUNT(DISTINCT Users.user_id) AS num_active_users FROM Locations INNER JOIN Classes ON Locations.location_id = Classes.location_id INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Users ON Enrollments.user_id = Users.user_id WHERE Users.user_status = 'active' AND Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Locations.location_id;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Locations": [
            "location_name",
            "location_id",
            "is_available"
        ]
    },
    "response_text": "SELECT Locations.location_name, COUNT(DISTINCT Enrollments.user_id) \nFROM Users \nJOIN Enrollments ON Users.user_id = Enrollments.user_id \nJOIN ClassSessions ON Enrollments.class_id = ClassSessions.class_id \nJOIN Locations ON ClassSessions.location_id = Locations.location_id \nWHERE Users.status = 'Active' AND Enrollments.enrollment_date BETWEEN DATE('now', '-30 day') AND DATE('now') \nGROUP BY Locations.location_name;",
    "prompt_token_number": 790,
    "response_token_number": 96
},
{
    "id": 34356,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'User': ['UserID', 'FirstName', 'LastName', 'Email', 'Password', 'Birthdate', 'Gender', 'Age', 'Height', 'BMI', 'Weight'], 'Workout': ['WorkoutID', 'UserID', 'PlanID', 'Date', 'WorkoutType', 'StartTime', 'EndTime', 'Duration', 'TimeSeconds', 'CaloriesBurned', 'WorkoutTypeID', 'Distance', 'Type', 'TotalCalories', 'USERID', 'WorkoutName', 'Steps', 'HeartRate', 'ExerciseTypeID']}. \n# the user question is: Find the total number of workouts completed by each user in the last month, grouped by user height range (shorter than 5'5\", 5'5\" to 5'10\", and taller than 5'10\"):. \n#SQL query: SELECT CASE WHEN User.Height < 65 THEN 'Shorter than 5\\'5\"' WHEN User.Height >= 65 AND User.Height < 70 THEN '5\\'5\" to 5\\'10\"' ELSE 'Taller than 5\\'10\"' END AS HeightRange, COUNT(*) AS TotalWorkoutsCompleted FROM User INNER JOIN Workout ON User.UserID = Workout.UserID WHERE Workout.Date >= DATE('now', '-1 month') GROUP BY HeightRange\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended at least one class in each of the last 3 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended at least one class in each of the last 3 months.",
    "output": "SELECT Users.user_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND STRFTIME('%Y-%m', ClassSessions.session_date) >= STRFTIME('%Y-%m', 'now', '-2 months') GROUP BY Users.user_id HAVING COUNT(DISTINCT STRFTIME('%Y-%m', ClassSessions.session_date)) = 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.user_id, Users.username\nFROM Users\nINNER JOIN Enrollments ON Users.user_id = Enrollments.user_id\nWHERE Enrollments.attendance_status = 'attended'\nAND Enrollments.enrollment_date >= DATE('now', '-3 month')\nGROUP BY Users.user_id\nHAVING COUNT(DISTINCT strftime('%Y-%m', Enrollments.enrollment_date)) = 3",
    "prompt_token_number": 563,
    "response_token_number": 82
},
{
    "id": 34358,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Customers': ['last_name', 'first_name', 'customer_id', 'city', 'country', 'state', 'email'], 'Payments': ['payment_method', 'user_id', 'customer_id', 'order_id', 'amount', 'payment_date', 'payment_id']}. \n# the user question is: \"Retrieve the customers who have made the highest payment.\". \n#SQL query: SELECT c.customer_id, c.first_name, c.last_name, p.amount FROM Customers c JOIN Payments p ON c.customer_id = p.customer_id WHERE p.amount = ( SELECT MAX(amount) FROM Payments );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the average length of time between when a user creates an account and their first class enrollment.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the average length of time between when a user creates an account and their first class enrollment.",
    "output": "SELECT AVG(julianday(Enrollments.enrollment_date) - julianday(Users.creation_date)) FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND Enrollments.enrollment_date >= Users.creation_date;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT AVG(DATEDIFF(e.enrollment_date, u.creation_date)) FROM Users u JOIN Enrollments e ON u.user_id = e.user_id WHERE e.enrollment_date = (SELECT MIN(enrollment_date) FROM Enrollments WHERE user_id = u.user_id);",
    "prompt_token_number": 415,
    "response_token_number": 55
},
{
    "id": 34359,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'john123', 'username', 'email'], 'Projects': ['status', 'end_date', 'start_date', 'project_name', 'contractor_id', 'project_id', 'user_id', 'category_id'], 'Payments': ['user_id', 'project_id', 'amount', 'payment_date', 'total_amount']}. \n# the user question is: \"Retrieve the project names and the corresponding users who have not made any payments.\". \n#SQL query: SELECT P.project_name, U.username FROM Projects P JOIN Users U ON P.user_id = U.user_id WHERE P.project_id NOT IN ( SELECT project_id FROM Payments );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have enrolled in the most number of classes in the past month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have enrolled in the most number of classes in the past month.",
    "output": "SELECT Users.user_name, COUNT(*) AS num_classes FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id ORDER BY num_classes DESC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT U.user_id, U.username \nFROM Users U \nJOIN Enrollments E ON U.user_id = E.user_id \nWHERE E.enrollment_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() \nGROUP BY E.user_id \nORDER BY COUNT(E.class_id) DESC \nLIMIT 1;",
    "prompt_token_number": 428,
    "response_token_number": 67
},
{
    "id": 34363,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']}. \n# the user question is: Find the equipment that has been rented the most.. \n#SQL query: SELECT Equipment.equipment_name, COUNT(*) as num_rentals FROM EquipmentRentals INNER JOIN Equipment ON EquipmentRentals.equipment_id = Equipment.equipment_id GROUP BY Equipment.equipment_id ORDER BY num_rentals DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the most popular instructors based on the number of classes they have taught in the past year.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the most popular instructors based on the number of classes they have taught in the past year.",
    "output": "SELECT Instructors.instructor_name, COUNT(*) AS num_classes FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 year') AND date('now') GROUP BY Instructors.instructor_id ORDER BY num_classes DESC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name, COUNT(*) as num_classes \nFROM ClassSessions \nINNER JOIN Instructors ON ClassSessions.instructor_id = Instructors.instructor_id \nWHERE ClassSessions.session_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() \nGROUP BY Instructors.instructor_id \nORDER BY num_classes DESC LIMIT 1;",
    "prompt_token_number": 356,
    "response_token_number": 73
},
{
    "id": 34369,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Tasks': ['status', 'assigned_to', 'task_id', 'project_id', 'due_date', 'user_id', 'completed', 'task_name', 'created_at', 'completed_at', 'assigned_t', 'assigned', 'date_completed', 'data_table_id', 'completion_time', 'task_description', 'category', 'completion_date', 'open_date', 'priority', 'completed_date', 'start_date', 'estimated_time', 'end_date', 'created_by', 'estimated_duration', 'cost', 'deadline', 'completed_on', 'started_on', 'duration', 'assigned_on', 'date_assigned', 'date_created'], 'Users': ['username', 'email', 'user_id', 'assigned_to', 'completed_tasks', 'total_tasks', 'user_name', 'doe', 'salary', 'num_completed_tasks'], 'Task_Logs': ['started_at', 'duration', 'task_id', 'log_id', 'start_time', 'logged_by', 'date_logged', 'date_updated', 'cost', 'user_id']}. \n# the user question is: Find the total time logged by each user on tasks in the \"completed\" status:. \n#SQL query: SELECT Users.user_name, SUM(Task_Logs.duration) AS total_time_logged FROM Users LEFT JOIN Tasks ON Users.user_id = Tasks.assigned_to LEFT JOIN Task_Logs ON Tasks.task_id = Task_Logs.task_id WHERE Tasks.status = 'completed' GROUP BY Users.user_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have the lowest attendance rates in the past month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have the lowest attendance rates in the past month.",
    "output": "SELECT Classes.class_name, COUNT(*) AS num_attendees FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') AND Enrollments.status = 'confirmed' GROUP BY Classes.class_id ORDER BY num_attendees ASC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Classes.class_name, COUNT(Enrollments.enrollment_id) / Classes.max_capacity AS attendance_rate \nFROM Classes \nLEFT JOIN Enrollments ON Classes.class_id = Enrollments.class_id \nWHERE Enrollments.enrollment_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) AND CURRENT_DATE\nGROUP BY Classes.class_id\nORDER BY attendance_rate ASC\nLIMIT 1;",
    "prompt_token_number": 665,
    "response_token_number": 80
},
{
    "id": 34371,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Project_Contractors': ['project_id', 'contractor_id', 'end_date', 'project_contractor_id', 'contract_date'], 'Contractors': ['contractor_name', 'contractor_id', 'rating'], 'Project_Contractor_Payments': ['total_amount', 'payment_amount', 'project_contractor_id']}. \n# the user question is: List all the contractors who have not been paid in full for any project.. \n#SQL query: SELECT DISTINCT c.contractor_name FROM Contractors c INNER JOIN Project_Contractors pc ON c.contractor_id = pc.contractor_id INNER JOIN Project_Contractor_Payments pcp ON pc.project_contractor_id = pcp.project_contractor_id WHERE pcp.payment_amount < pcp.total_amount;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'InstructorRatings': ['rating', 'instructor_id', 'session_id', 'user_id']} and \n# the user question: Find the users who have attended classes taught by an instructor they have rated.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended classes taught by an instructor they have rated.",
    "output": "SELECT Users.user_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN InstructorRatings ON ClassSessions.session_id = InstructorRatings.session_id WHERE Enrollments.status = 'confirmed' AND InstructorRatings.user_id = Users.user_id;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "InstructorRatings": [
            "rating",
            "instructor_id",
            "session_id",
            "user_id"
        ]
    },
    "response_text": "SELECT DISTINCT u.username FROM Users u INNER JOIN Enrollments e ON u.user_id = e.user_id INNER JOIN ClassSessions cs ON e.session_id = cs.session_id INNER JOIN InstructorRatings ir ON cs.instructor_id = ir.instructor_id WHERE ir.user_id = u.user_id;",
    "prompt_token_number": 467,
    "response_token_number": 59
},
{
    "id": 34373,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate']}. \n# the user question is: Find the number of series that have had more than 50 issues published:. \n#SQL query: SELECT COUNT(*) AS NumSeries FROM ( SELECT SeriesID FROM Issues GROUP BY SeriesID HAVING COUNT(*) > 50 );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught classes in every time slot in the past week.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught classes in every time slot in the past week.",
    "output": "SELECT Instructors.instructor_name FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 week') AND date('now') GROUP BY Instructors.instructor_id HAVING COUNT(DISTINCT ClassSessions.session_time) = ( SELECT COUNT(DISTINCT session_time) FROM ClassSessions WHERE session_date BETWEEN date('now', '-1 week') AND date('now') );",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT instructor_id FROM ClassSessions WHERE session_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE() GROUP BY instructor_id HAVING COUNT(DISTINCT session_start_time, session_end_time) = (SELECT COUNT(*) FROM (SELECT DISTINCT session_start_time, session_end_time FROM ClassSessions WHERE session_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE()) AS TimeSlots)",
    "prompt_token_number": 341,
    "response_token_number": 85
},
{
    "id": 34376,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Opportunities': ['closing_date', 'opportunity_id', 'company_id', 'stage', 'name', 'value', 'Negotiation', 'Closed', 'Won', 'Prospect', 'Qualified'], 'Contacts': ['company_id', 'first_name', 'contact_id', 'last_name', 'email']}. \n# the user question is: Find the contacts associated with opportunities that have a value higher than $100,000 and are in the 'Qualified' or 'Negotiation' stage.. \n#SQL query: SELECT c.first_name, c.last_name FROM Contacts c INNER JOIN Opportunities o ON c.company_id = o.company_id WHERE o.value > 100000 AND o.stage IN ('Qualified', 'Negotiation');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'InstructorRatings': ['rating', 'instructor_id', 'session_id', 'user_id']} and \n# the user question: Find the users who have rated at least one instructor and attended classes in the past month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have rated at least one instructor and attended classes in the past month.",
    "output": "SELECT Users.user_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') AND Users.user_id IN ( SELECT DISTINCT user_id FROM InstructorRatings ) GROUP BY Users.user_id;",
    "schema": "pilates",
    "processed_schema_content": {
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "InstructorRatings": [
            "rating",
            "instructor_id",
            "session_id",
            "user_id"
        ]
    },
    "response_text": "SELECT DISTINCT u.username FROM Users u INNER JOIN InstructorRatings ir ON u.user_id = ir.user_id INNER JOIN Enrollments e ON u.user_id = e.user_id WHERE ir.rating IS NOT NULL AND e.enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);",
    "prompt_token_number": 467,
    "response_token_number": 58
},
{
    "id": 34379,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Actor': ['actor_id', 'name', 'actor_name'], 'Movie_Actor': ['movie_id', 'actor_id'], 'Rating': ['rating_id', 'movie_id', 'source', 'rating_value', 'rating']}. \n# the user question is: Retrieve the name of the actor, the title of the movie, and the rating value from Metacritic for all movies where the actor's name contains the word \"Theron\" and the rating value is greater than 9.. \n#SQL query: SELECT Actor.name, Movie.title, Rating.rating_value FROM Movie JOIN Movie_Actor ON Movie.movie_id = Movie_Actor.movie_id JOIN Actor ON Movie_Actor.actor_id = Actor.actor_id JOIN Rating ON Movie.movie_id = Rating.movie_id WHERE Actor.name LIKE '%Theron%' AND Rating.source = 'Metacritic' AND Rating.rating_value > 9;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'InstructorRatings': ['rating', 'instructor_id', 'session_id', 'user_id']} and \n# the user question: Find the average rating for each instructor.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the average rating for each instructor.",
    "output": "SELECT Instructors.instructor_name, AVG(InstructorRatings.rating) AS avg_rating FROM Instructors LEFT JOIN InstructorRatings ON Instructors.instructor_id = InstructorRatings.instructor_id GROUP BY Instructors.instructor_id;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "InstructorRatings": [
            "rating",
            "instructor_id",
            "session_id",
            "user_id"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name, AVG(InstructorRatings.rating) AS average_rating FROM Instructors JOIN InstructorRatings ON Instructors.instructor_id = InstructorRatings.instructor_id GROUP BY Instructors.instructor_name;",
    "prompt_token_number": 373,
    "response_token_number": 45
},
{
    "id": 34381,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Publishers': ['PublisherID', 'PublisherName', 'SeriesID'], 'Series': ['SeriesID', 'SeriesTitle', 'PublisherID', 'AverageCoverPrice', 'AverageIssueRating', 'SeriesName'], 'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate'], 'Creators': ['CreatorID', 'CreatorName'], 'IssueCredits': ['IssueID', 'CreditID', 'CreatorID'], 'Credits': ['CreditName', 'CreditID']}. \n# the user question is: Find the top 5 most common letterers of issues published by Image Comics in 2026:. \n#SQL query: SELECT Creators.CreatorName, COUNT(*) as NumIssues FROM Creators JOIN IssueCredits ON Creators.CreatorID = IssueCredits.CreatorID JOIN Issues ON IssueCredits.IssueID = Issues.IssueID JOIN Series ON Issues.SeriesID = Series.SeriesID JOIN Publishers ON Series.PublisherID = Publishers.PublisherID JOIN Credits ON IssueCredits.CreditID = Credits.CreditID AND Credits.CreditName = 'Letterer' WHERE Publishers.PublisherName = 'Image Comics' AND Issues.CoverDate BETWEEN '2026-01-01' AND '2026-12-31' GROUP BY Creators.CreatorID ORDER BY NumIssues DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the number of classes each instructor has taught in the past week.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the number of classes each instructor has taught in the past week.",
    "output": "SELECT Instructors.instructor_name, COUNT(ClassSessions.session_id) AS num_classes_taught FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 week') AND date('now') GROUP BY Instructors.instructor_id;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT Instructors.instructor_name, COUNT(*) as NumberOfClasses \nFROM Instructors \nJOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id \nWHERE ClassSessions.session_date BETWEEN DATE_SUB(CURRENT_DATE, INTERVAL 7 DAY) AND CURRENT_DATE \nGROUP BY Instructors.instructor_id;",
    "prompt_token_number": 535,
    "response_token_number": 62
},
{
    "id": 34384,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'task_assignments': ['updated_at', 'task_id', 'created_at', 'assigned_to', 'due_date', 'garden_id', 'completed_at', 'id', 'garden_plant_id', 'status', 'task_type', 'plant_variety_id'], 'users': ['email', 'username', 'id', 'updated_at', 'name', 'created_at', 'role_id'], 'tasks': ['name', 'id', 'updated_at', 'description', 'created_at', 'garden_id', 'due_date', 'type', 'priority'], 'roles': ['name', 'id', 'Gardener', 'updated_at', 'description', 'created_at']}. \n# the user question is: Find all the users who have been assigned a task with a status of \"Complete\" and have a role of \"Manager\".. \n#SQL query: SELECT DISTINCT users.name FROM users JOIN task_assignments ON users.id = task_assignments.assigned_to JOIN tasks ON task_assignments.task_id = tasks.id JOIN roles ON users.role_id = roles.id WHERE task_assignments.status = 'Complete' AND roles.name = 'Manager';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the top 5 most popular classes in terms of enrollment.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the top 5 most popular classes in terms of enrollment.",
    "output": "SELECT Classes.class_name, COUNT(Enrollments.enrollment_id) AS num_enrollments FROM Classes INNER JOIN Enrollments ON Classes.class_id = Enrollments.class_id GROUP BY Classes.class_id ORDER BY num_enrollments DESC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Classes.class_name, COUNT(Enrollments.class_id) AS Enrollment_Count \nFROM Classes \nJOIN Enrollments ON Classes.class_id = Enrollments.class_id \nGROUP BY Classes.class_name \nORDER BY Enrollment_Count DESC \nLIMIT 5;",
    "prompt_token_number": 541,
    "response_token_number": 51
},
{
    "id": 34385,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Product': ['SegmentID', 'ProductName', 'ProductID', 'CompanyID', 'UnitsInStock', 'UnitPrice', 'Category', 'Price', 'Cost', 'CategoryID', 'CurrentInventoryLevel', 'UnitCost', 'Description', 'Discontinued', 'CategoryName', 'SupplierID', 'CostPrice', 'ReorderPoint', 'DiscontinuedDate', 'SubcategoryID', 'SalesPrice', 'QuantityOnHand', 'PromotionID'], 'MarketSegment': ['SegmentName', 'Consumer', 'SegmentID'], 'Company': ['IndustryID', 'CompanyName', 'CompanyID', 'Continent']}. \n# the user question is: Retrieve the list of market segments with more than 5 products and their respective companies and the number of their products, sorted by number of products in descending order:. \n#SQL query: SELECT MarketSegment.SegmentName, Company.CompanyName, COUNT(Product.ProductID) as NumProducts FROM MarketSegment JOIN Product ON MarketSegment.SegmentID = Product.SegmentID JOIN Company ON Product.CompanyID = Company.CompanyID GROUP BY MarketSegment.SegmentID, Company.CompanyID HAVING COUNT(Product.ProductID) > 5 ORDER BY NumProducts DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended at least one class in each location.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended at least one class in each location.",
    "output": "SELECT Users.user_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id GROUP BY Users.user_id HAVING COUNT(DISTINCT Classes.location_id) = ( SELECT COUNT(DISTINCT location_id) FROM Classes )",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Users.user_id FROM Users JOIN Enrollments ON Users.user_id = Enrollments.user_id JOIN ClassSessions ON Enrollments.class_id = ClassSessions.class_id GROUP BY Users.user_id HAVING COUNT(DISTINCT ClassSessions.location_id) >= (SELECT COUNT(DISTINCT location_id) FROM ClassSessions);",
    "prompt_token_number": 647,
    "response_token_number": 64
},
{
    "id": 34390,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Marine_Reptiles': ['reptile_name', 'conservation_status', 'habitat']}. \n# the user question is: Which marine reptiles in the Marine_Reptiles table have a habitat of Coral Reefs and are classified as Vulnerable or Endangered?. \n#SQL query: SELECT reptile_name FROM Marine_Reptiles WHERE habitat = 'Coral Reefs' AND conservation_status IN ('Vulnerable', 'Endangered');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught the most classes in the past month.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the instructors who have taught the most classes in the past month.",
    "output": "SELECT Instructors.instructor_name, COUNT(ClassSessions.session_id) AS num_classes FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date >= date('now', '-1 month') GROUP BY Instructors.instructor_id ORDER BY num_classes DESC;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ]
    },
    "response_text": "SELECT i.instructor_name, COUNT(c.session_id) as class_count \nFROM Instructors i \nJOIN ClassSessions c on c.instructor_id = i.instructor_id \nWHERE c.session_date BETWEEN DATE_SUB(NOW(), INTERVAL 1 MONTH) AND NOW() \nGROUP BY i.instructor_name \nORDER BY class_count DESC \nLIMIT 1;",
    "prompt_token_number": 289,
    "response_token_number": 71
},
{
    "id": 34394,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Species': ['species_id', 'name', 'common_name', 'classification_id', 'genus', 'family_id', 'scientific_name', 'class_id', 'taxonomy', 'category', 'conservation_status', 'population_trend', 'habitat', 'migration_pattern', 'min_depth_range', 'max_depth_range', 'body_size', 'body_temperature_range', 'migratory_behavior', 'species_name', 'discovery_year', 'class_name', 'is_venomous', 'order_name'], 'EnvironmentalData': ['data_id', 'location_id', 'parameter', 'value', 'unit', 'date', 'measurement_date'], 'FisheryData': ['fishery_id', 'species_id', 'fishery_name', 'catch_date', 'catch_weight', 'fishing_method', 'gear_type', 'fishing_days', 'average_length', 'catch_number', 'fish_length', 'fish_weight', 'catch_length', 'location_id', 'catch_id', 'vessel_id', 'net_mesh_size', 'method_id'], 'SpeciesData': ['sample_id', 'species_id', 'weight', 'catch_id', 'length', 'catch_date', 'depth', 'individuals_caught']}. \n# the user question is: Retrieve the names of all species caught in a location where the salinity is less than 30 ppt or greater than 35 ppt, along with the total number of individuals caught for each species:. \n#SQL query: SELECT Species.common_name, COUNT(SpeciesData.species_id) AS total_catch FROM Species INNER JOIN SpeciesData ON Species.species_id = SpeciesData.species_id INNER JOIN FisheryData ON SpeciesData.catch_id = FisheryData.catch_id INNER JOIN EnvironmentalData ON FisheryData.location_id = EnvironmentalData.location_id WHERE EnvironmentalData.parameter = 'Salinity' AND (EnvironmentalData.value < 30 OR EnvironmentalData.value > 35) GROUP BY SpeciesData.species_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the top 5 most popular classes based on the number of enrollments.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the top 5 most popular classes based on the number of enrollments.",
    "output": "SELECT Classes.class_name, COUNT(Enrollments.enrollment_id) AS num_enrollments FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id GROUP BY Classes.class_id ORDER BY num_enrollments DESC LIMIT 5;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT Classes.class_name, COUNT(Enrollments.class_id) AS number_of_enrollments \nFROM Classes \nINNER JOIN Enrollments ON Classes.class_id = Enrollments.class_id \nWHERE Enrollments.is_cancelled = 0 \nGROUP BY Classes.class_id \nORDER BY number_of_enrollments DESC \nLIMIT 5;",
    "prompt_token_number": 763,
    "response_token_number": 69
},
{
    "id": 34396,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'credit_card_transactions': ['card_id', 'amount', 'transaction_type', 'transaction_date', 'payment_amount', 'fee_amount', 'user_id', 'transaction_amount', 'transaction_id', 'card_number', 'transaction_fee', 'account_id', 'credit_card_id', 'transaction_description', 'cardholder_name', 'credit_card_balance']}. \n# the user question is: Find the total number of transactions and the average transaction amount for all credit card accounts with a balance greater than $1,000.. \n#SQL query: SELECT COUNT(*) AS total_transactions, AVG(transaction_amount) AS average_transaction_amount FROM credit_card_transactions WHERE credit_card_balance > 1000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended classes with at least 3 different instructors.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the users who have attended classes with at least 3 different instructors.",
    "output": "SELECT Users.user_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN Instructors ON ClassSessions.instructor_id = Instructors.instructor_id GROUP BY Users.user_id HAVING COUNT(DISTINCT Instructors.instructor_id) >= 3;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "Users": [
            "user_id",
            "username",
            "user_name",
            "gender",
            "status",
            "skill_level",
            "age",
            "email",
            "user_status",
            "creation_date"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT user_id FROM (\n  SELECT user_id, COUNT(DISTINCT instructor_id) AS num_instructors \n  FROM Enrollments \n  INNER JOIN ClassSessions ON Enrollments.class_id = ClassSessions.class_id \n  WHERE attendance_status = 'attended' \n  GROUP BY user_id\n) \nWHERE num_instructors >= 3;",
    "prompt_token_number": 466,
    "response_token_number": 70
},
{
    "id": 34397,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Instructors': ['dojo_id', 'instructor_name', 'instructor_id', 'specialization', 'martial_art_id', 'years_of_experience', 'rating']}. \n# the user question is: Retrieve the names of all instructors who specialize in \"Karate\" and have more than 10 years of experience:. \n#SQL query: SELECT instructor_name FROM Instructors WHERE specialization = 'Karate' AND years_of_experience > 10;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have at least one spot available for enrollment.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the classes that have at least one spot available for enrollment.",
    "output": "SELECT Classes.class_name, ClassSessions.session_date, ClassSessions.start_time FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id GROUP BY ClassSessions.session_id HAVING COUNT(Enrollments.enrollment_id) < ClassSessions.max_enrollment;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ],
        "ClassSessions": [
            "class_id",
            "session_id",
            "session_date",
            "instructor_id",
            "session_start_time",
            "session_end_time",
            "location_id",
            "start_time",
            "end_time",
            "duration_minutes",
            "session_time",
            "status",
            "max_enrollment"
        ],
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ]
    },
    "response_text": "SELECT class_name FROM Classes WHERE max_capacity > current_enrollment;",
    "prompt_token_number": 454,
    "response_token_number": 13
},
{
    "id": 34401,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['username', 'email', 'user_id', 'assigned_to', 'completed_tasks', 'total_tasks', 'user_name', 'doe', 'salary', 'num_completed_tasks'], 'Sales': ['product_id', 'price', 'quantity', 'salesperson_id', 'sale_date', 'open_date', 'task_id', 'SaleDate']}. \n# the user question is: Find the average price of products sold by each salesperson:. \n#SQL query: SELECT Users.user_name, AVG(Sales.price) AS avg_price FROM Users INNER JOIN Sales ON Users.user_id = Sales.salesperson_id GROUP BY Users.user_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'exercise': ['description', 'name', 'equipment_id', 'calories_burned', 'duration', 'id', 'difficulty_level'], 'equipment': ['id', 'name', 'equipment_type', 'equipment_id', 'equipment_name']} and \n# the user question: Retrieve the names and descriptions of all Pilates exercises that require the use of a Pilates ring.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the names and descriptions of all Pilates exercises that require the use of a Pilates ring.",
    "output": "SELECT name, description FROM exercise WHERE equipment_id = ( SELECT id FROM equipment WHERE name = 'Pilates Ring' );",
    "schema": "pilates",
    "processed_schema_content": {
        "exercise": [
            "description",
            "name",
            "equipment_id",
            "calories_burned",
            "duration",
            "id",
            "difficulty_level"
        ],
        "equipment": [
            "id",
            "name",
            "equipment_type",
            "equipment_id",
            "equipment_name"
        ]
    },
    "response_text": "SELECT exercise.name, exercise.description FROM exercise INNER JOIN equipment ON exercise.equipment_id = equipment.id WHERE exercise.description LIKE '%Pilates%' AND equipment.name = 'Pilates ring';",
    "prompt_token_number": 288,
    "response_token_number": 38
},
{
    "id": 34407,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Patient': ['patient_id', 'last_name', 'first_name', 'date_of_birth'], 'Insurance': ['insurance_provider', 'patient_id', 'policy_number', 'insurance_id', 'insurance_provider_id', 'coverage_type_id'], 'Appointment': ['chiropractor_id', 'patient_id', 'appointment_date_time', 'appointment_id', 'insurance_id'], 'Chiropractor': ['first_name', 'last_name', 'chiropractor_id'], 'Prescriptions': ['prescription_name', 'appointment_id', 'prescription_category', 'patient_id', 'medication_id']}. \n# the user question is: Find the names of all chiropractors who have had appointments with patients who have an insurance policy number starting with '98' and have also prescribed an opioid:. \n#SQL query: SELECT DISTINCT c.first_name, c.last_name FROM Chiropractor c INNER JOIN Appointment a ON c.chiropractor_id = a.chiropractor_id INNER JOIN Patient p ON a.patient_id = p.patient_id INNER JOIN Insurance i ON p.patient_id = i.patient_id INNER JOIN Prescriptions pr ON a.appointment_id = pr.appointment_id WHERE i.policy_number LIKE '98%' AND pr.prescription_category = 'Opioids';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'workout_session': ['start_time', 'id', 'client_id', 'workout_session_type_id', 'instructor_id', 'total_cost'], 'workout_session_type': ['id', 'name', 'max_capacity', 'duration']} and \n# the user question: Calculate the total number of Pilates group classes that have been scheduled for the month of April 2023.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Calculate the total number of Pilates group classes that have been scheduled for the month of April 2023.",
    "output": "SELECT COUNT(*) as num_classes FROM workout_session WHERE workout_session_type_id = ( SELECT id FROM workout_session_type WHERE name = 'Pilates Group Class' ) AND start_time BETWEEN '2023-04-01 00:00:00' AND '2023-04-30 23:59:59';",
    "schema": "pilates",
    "processed_schema_content": {
        "workout_session": [
            "start_time",
            "id",
            "client_id",
            "workout_session_type_id",
            "instructor_id",
            "total_cost"
        ],
        "workout_session_type": [
            "id",
            "name",
            "max_capacity",
            "duration"
        ]
    },
    "response_text": "SELECT COUNT(*) FROM workout_session ws INNER JOIN workout_session_type wst ON ws.workout_session_type_id = wst.id WHERE wst.name = 'Pilates' AND MONTH(ws.start_time) = 4 AND YEAR(ws.start_time) = 2023;",
    "prompt_token_number": 410,
    "response_token_number": 55
},
{
    "id": 34411,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'patients': ['first_name', 'last_name', 'patient_id', 'phone_number', 'email', 'phone'], 'appointments': ['patient_id', 'practitioner_id', 'appointment_date', 'appointment_id', 'duration_minutes', 'treatment_type', 'condition', 'treatment', 'duration', 'date'], 'prescription': ['patient_id', 'prescription_id', 'prescription_date', 'type', 'practitioner_id'], 'prescription_items': ['formula_id', 'prescription_id'], 'herbal_formulas': ['formula_id', 'formula_name', 'price', 'num_ingredients', 'ingredients', 'name']}. \n# the user question is: Retrieve the names and email addresses of patients who have been prescribed more than 1 herbal formulas containing the ingredient \"Dang Gui\" and have also been prescribed acupuncture treatments:. \n#SQL query: SELECT DISTINCT p.first_name, p.last_name, p.email FROM patients p JOIN prescription pr ON p.patient_id = pr.patient_id JOIN prescription_items pi ON pr.prescription_id = pi.prescription_id JOIN herbal_formulas hf ON pi.formula_id = hf.formula_id JOIN appointments a ON p.patient_id = a.patient_id WHERE hf.ingredients LIKE '%Dang Gui%' AND a.treatment_type = 'acupuncture' GROUP BY p.patient_id HAVING COUNT(DISTINCT pi.formula_id) > 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'workout_session': ['start_time', 'id', 'client_id', 'workout_session_type_id', 'instructor_id', 'total_cost'], 'workout_session_type': ['id', 'name', 'max_capacity', 'duration'], 'instructor': ['hourly_rate', 'first_name', 'last_name', 'certification', 'id', 'instructor_id', 'instructor_name', 'name']} and \n# the user question: Calculate the total number of Pilates private sessions that have been scheduled for each Pilates instructor.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Calculate the total number of Pilates private sessions that have been scheduled for each Pilates instructor.",
    "output": "SELECT i.first_name, i.last_name, COUNT(*) as num_sessions FROM instructor i INNER JOIN workout_session ws ON ws.instructor_id = i.id INNER JOIN workout_session_type wst ON wst.id = ws.workout_session_type_id WHERE wst.name = 'Pilates Private Session' GROUP BY i.id;",
    "schema": "pilates",
    "processed_schema_content": {
        "workout_session": [
            "start_time",
            "id",
            "client_id",
            "workout_session_type_id",
            "instructor_id",
            "total_cost"
        ],
        "workout_session_type": [
            "id",
            "name",
            "max_capacity",
            "duration"
        ],
        "instructor": [
            "hourly_rate",
            "first_name",
            "last_name",
            "certification",
            "id",
            "instructor_id",
            "instructor_name",
            "name"
        ]
    },
    "response_text": "SELECT i.first_name, i.last_name, COUNT(ws.id) as num_of_sessions\nFROM instructor i \nJOIN workout_session ws ON i.id = ws.instructor_id \nJOIN workout_session_type wst ON ws.workout_session_type_id = wst.id \nWHERE wst.name = 'Pilates private' \nGROUP BY i.id;",
    "prompt_token_number": 481,
    "response_token_number": 70
},
{
    "id": 34413,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Participants': ['first_name', 'last_name', 'participant_id', 'gender', 'age', 'birth_year', 'date_of_birth', 'ag', 'age_group_id', 'parental_edu_id', 'language_group_id'], 'Participant_Tasks': ['task_id', 'participant_id', 'completion_date', 'score', 'completed'], 'Tasks': ['task_id', 'task_name', 'study_id', 'difficulty_level', 'duration', 'difficulty', 'task_category', 'category', 'Tower', 'Hanoi', 'Digit', 'Span', 'Working', 'Spatial', 'Symbol', 'Picture', 'Concepts', 'Coding', 'Regulation', 'Emotional']}. \n# the user question is: Retrieve the names and ages of all participants who have completed a task that is not the \"Sorting Objects\" task:. \n#SQL query: SELECT Participants.first_name, Participants.last_name, Participants.age FROM Participants JOIN Participant_Tasks ON Participants.participant_id = Participant_Tasks.participant_id JOIN Tasks ON Participant_Tasks.task_id = Tasks.task_id WHERE Tasks.task_name != 'Sorting Objects';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'workout_session': ['start_time', 'id', 'client_id', 'workout_session_type_id', 'instructor_id', 'total_cost'], 'workout_session_type': ['id', 'name', 'max_capacity', 'duration']} and \n# the user question: Retrieve the total revenue generated from Pilates group classes in the month of May 2023.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the total revenue generated from Pilates group classes in the month of May 2023.",
    "output": "SELECT SUM(total_cost) as revenue FROM workout_session WHERE workout_session_type_id = ( SELECT id FROM workout_session_type WHERE name = 'Pilates Group Class' ) AND start_time BETWEEN '2023-05-01 00:00:00' AND '2023-05-31 23:59:59';",
    "schema": "pilates",
    "processed_schema_content": {
        "workout_session": [
            "start_time",
            "id",
            "client_id",
            "workout_session_type_id",
            "instructor_id",
            "total_cost"
        ],
        "workout_session_type": [
            "id",
            "name",
            "max_capacity",
            "duration"
        ]
    },
    "response_text": "SELECT SUM(workout_session.total_cost) FROM workout_session JOIN workout_session_type ON workout_session.workout_session_type_id = workout_session_type.id WHERE workout_session_type.name = 'Pilates' AND MONTH(workout_session.start_time) = 5 AND YEAR(workout_session.start_time) = 2023;",
    "prompt_token_number": 385,
    "response_token_number": 63
},
{
    "id": 34416,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'athletes': ['name', 'athlete_id', 'team_id', 'last_name', 'athlete_name', 'age'], 'coaches': ['name', 'coach_id', 'coach_name', 'email'], 'teams': ['team_id', 'coach_id', 'sport_id', 'team_name', 'team_medal', 'championship_id']}. \n# the user question is: Find the coach with the most athletes on their team.. \n#SQL query: SELECT coaches.name, COUNT(athletes.athlete_id) AS total_athletes FROM coaches INNER JOIN teams ON coaches.coach_id = teams.coach_id INNER JOIN athletes ON teams.team_id = athletes.team_id GROUP BY coaches.name ORDER BY total_athletes DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'exercise': ['description', 'name', 'equipment_id', 'calories_burned', 'duration', 'id', 'difficulty_level'], 'equipment': ['id', 'name', 'equipment_type', 'equipment_id', 'equipment_name']} and \n# the user question: Retrieve the names of all Pilates exercises that require the use of the Pilates Chair.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the names of all Pilates exercises that require the use of the Pilates Chair.",
    "output": "SELECT name FROM exercise WHERE equipment_id = ( SELECT id FROM equipment WHERE name = 'Pilates Chair' );",
    "schema": "pilates",
    "processed_schema_content": {
        "exercise": [
            "description",
            "name",
            "equipment_id",
            "calories_burned",
            "duration",
            "id",
            "difficulty_level"
        ],
        "equipment": [
            "id",
            "name",
            "equipment_type",
            "equipment_id",
            "equipment_name"
        ]
    },
    "response_text": "SELECT exercise.name FROM exercise INNER JOIN equipment ON exercise.equipment_id = equipment.id WHERE equipment.name = 'Pilates Chair' AND exercise.description LIKE '%Pilates%';",
    "prompt_token_number": 308,
    "response_token_number": 36
},
{
    "id": 34422,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Neuroimaging': ['neuroimaging_id', 'participant_id', 'scan_date', 'scan_type', 'scan_duration'], 'BrainRegion': ['region_id', 'region_name', 'hemisphere'], 'Activation': ['activation_id', 'neuroimaging_id', 'region_id', 'activation_value', 'session_id', 'participant_id']}. \n# the user question is: Retrieve the region names along with the average activation value for each region in the \"fMRI\" scans, ordered by the average activation value in descending order.. \n#SQL query: SELECT BrainRegion.region_name, AVG(Activation.activation_value) AS average_activation_value FROM BrainRegion JOIN Activation ON BrainRegion.region_id = Activation.region_id JOIN Neuroimaging ON Activation.neuroimaging_id = Neuroimaging.neuroimaging_id WHERE Neuroimaging.scan_type = 'fMRI' GROUP BY BrainRegion.region_name ORDER BY average_activation_value DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'workout_session': ['start_time', 'id', 'client_id', 'workout_session_type_id', 'instructor_id', 'total_cost'], 'workout_session_type': ['id', 'name', 'max_capacity', 'duration'], 'attendance': ['workout_session_id', 'client_id', 'attendance_time']} and \n# the user question: Retrieve the average duration of Pilates private sessions that have been attended in the past week.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the average duration of Pilates private sessions that have been attended in the past week.",
    "output": "SELECT AVG(wst.duration) AS avg_duration FROM workout_session_type wst JOIN workout_session ws ON ws.workout_session_type_id = wst.id JOIN attendance a ON a.workout_session_id = ws.id WHERE wst.name LIKE '%Pilates Private Session%' AND ws.start_time BETWEEN DATE('now', 'weekday 0', '-7 days') AND DATE('now', 'localtime');",
    "schema": "pilates",
    "processed_schema_content": {
        "workout_session": [
            "start_time",
            "id",
            "client_id",
            "workout_session_type_id",
            "instructor_id",
            "total_cost"
        ],
        "workout_session_type": [
            "id",
            "name",
            "max_capacity",
            "duration"
        ],
        "attendance": [
            "workout_session_id",
            "client_id",
            "attendance_time"
        ]
    },
    "response_text": "SELECT AVG(workout_session_type.duration) AS average_duration \nFROM workout_session \nJOIN workout_session_type ON workout_session.workout_session_type_id = workout_session_type.id \nJOIN attendance ON workout_session.id = attendance.workout_session_id \nWHERE workout_session_type.name = 'Pilates private' \nAND workout_session.start_time >= DATE(NOW()) - INTERVAL 7 DAY;",
    "prompt_token_number": 363,
    "response_token_number": 76
},
{
    "id": 34426,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Customers': ['customer_id', 'customer_name', 'company_name', 'city', 'country', 'address_id', 'first_name', 'last_name', 'region', 'contact_name', 'email', 'phone', 'registration_date', 'CustomerID', 'CustomerName'], 'Orders': ['order_total', 'customer_id', 'order_date', 'order_id', 'employee_id', 'shipper_id', 'supplier_id', 'shipped_date', 'required_date', 'shipping_cost', 'shipping_refunded', 'quantity', 'unit_price', 'product_id', 'total_amount', 'refund_issued', 'cancelled_date', 'returned_date', 'shipping_date', 'status', 'OrderDate', 'OrderStatus', 'ShippedDate', 'OrderID', 'CustomerID'], 'Products': ['product_name', 'product_id', 'category_id', 'unit_price', 'supplier_id', 'discontinued', 'price', 'units_in_stock', 'reorder_level', 'cost', 'total_sold', 'total_sales', 'discontinued_date', 'ProductName', 'ProductID', 'Product', 'C', 'B', 'SupplierID', 'CategoryID', 'UnitPrice'], 'Order_Details': ['order_id', 'product_id', 'quantity', 'unit_price', 'order_detail_id', 'cost_price', 'shift_id', 'status', 'customer_rating', 'unit_cost']}. \n# the user question is: Find the average quantity of each product ordered by each customer.. \n#SQL query: SELECT Customers.customer_name, Products.product_name, AVG(Order_Details.quantity) AS avg_quantity FROM Customers INNER JOIN Orders ON Customers.customer_id = Orders.customer_id INNER JOIN Order_Details ON Orders.order_id = Order_Details.order_id INNER JOIN Products ON Order_Details.product_id = Products.product_id GROUP BY Customers.customer_id, Products.product_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time']} and \n# the user question: Show the average duration of each type of class offered at the studio.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Show the average duration of each type of class offered at the studio.",
    "output": "SELECT Classes.type, AVG(Classes.duration) AS avg_duration FROM Classes GROUP BY Classes.type;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ]
    },
    "response_text": "SELECT class_type, AVG(duration_minutes) AS avg_duration FROM Classes GROUP BY class_type;",
    "prompt_token_number": 591,
    "response_token_number": 18
},
{
    "id": 34431,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'War': ['war_id', 'war_name', 'war_start_year'], 'Film_War': ['war_id', 'film_id', 'battle_id'], 'Genre': ['genre_name', 'genre_id'], 'Film_Genre': ['genre_id', 'film_id']}. \n# the user question is: Find the top 5 most common war film genres, along with the number of films in each genre:. \n#SQL query: SELECT Genre.genre_name, COUNT(*) AS num_films FROM Genre INNER JOIN Film_Genre ON Genre.genre_id = Film_Genre.genre_id INNER JOIN Film_War ON Film_Genre.film_id = Film_War.film_id INNER JOIN War ON Film_War.war_id = War.war_id WHERE War.war_name != 'Non-War Film' GROUP BY Genre.genre_id ORDER BY num_films DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id']} and \n# the user question: Show the name and certification of all instructors who are not certified in either Mat Pilates or Reformer.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Show the name and certification of all instructors who are not certified in either Mat Pilates or Reformer.",
    "output": "SELECT Instructors.name, Instructors.certification FROM Instructors WHERE Instructors.certification NOT IN ('Mat Pilates', 'Reformer');",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ]
    },
    "response_text": "SELECT instructor_name, certification FROM Instructors WHERE certification NOT IN ('Mat Pilates', 'Reformer');",
    "prompt_token_number": 328,
    "response_token_number": 21
},
{
    "id": 34433,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Polymorphism': ['gene_id', 'position', 'reference_sequence', 'alternate_sequence', 'polymorphism_id', 'frequency']}. \n# the user question is: Retrieve the names of all genes and their associated polymorphisms that have a frequency between 40% and 60% and are located on chromosome 431.. \n#SQL query: SELECT Gene.gene_name, Polymorphism.polymorphism_id FROM Gene JOIN Polymorphism ON Gene.gene_id = Polymorphism.gene_id WHERE Polymorphism.frequency BETWEEN 0.4 AND 0.6 AND Gene.chromosome_id = 431;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time']} and \n# the user question: Find the name and duration of all classes that are longer than 60 minutes.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and duration of all classes that are longer than 60 minutes.",
    "output": "SELECT name, duration FROM Classes WHERE duration > 60;",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ]
    },
    "response_text": "SELECT class_name, duration_minutes FROM Classes WHERE duration_minutes > 60;",
    "prompt_token_number": 411,
    "response_token_number": 15
},
{
    "id": 34435,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'orders': ['customer_id', 'order_date', 'total_amount', 'user_id', 'total_value', 'status', 'date', 'id', 'paid', 'total_price', 'shipping_country', 'affiliate_id', 'shipping_method', 'delivered_at', 'shipped_at', 'employee_id', 'order_id', 'customer_name']}. \n# the user question is: Which customer has made the most purchases?. \n#SQL query: SELECT customer_name, COUNT(*) as purchase_count FROM orders GROUP BY customer_name ORDER BY purchase_count DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time']} and \n# the user question: Get the name and type of all classes that are scheduled for weekday evenings (after 5 PM).,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Get the name and type of all classes that are scheduled for weekday evenings (after 5 PM).",
    "output": "SELECT name, type FROM Classes WHERE day_of_week IN ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday') AND time >= TIME('17:00');",
    "schema": "pilates",
    "processed_schema_content": {
        "Classes": [
            "class_name",
            "end_time",
            "instructor_id",
            "start_time",
            "class_id",
            "max_capacity",
            "is_available",
            "location_id",
            "is_cancelled",
            "min_attendees",
            "current_enrollment",
            "reschedule_date",
            "price",
            "min_capacity",
            "category_id",
            "class_type_id",
            "class_date",
            "class_type",
            "class_day",
            "duration_minutes",
            "id",
            "name",
            "date",
            "type",
            "duration",
            "day_of_week",
            "time"
        ]
    },
    "response_text": "SELECT class_name, class_type FROM Classes WHERE DAYOFWEEK(class_date) BETWEEN 2 AND 6 AND TIME(start_time) > '17:00:00'",
    "prompt_token_number": 335,
    "response_token_number": 35
},
{
    "id": 34442,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Match': ['team1_id', 'match_id', 'team2_id', 'venue_id', 'date', 'venue', 'winning_team_id', 'tournament_id', 'attendance', 'team', 'winning_team'], 'Referee': ['referee_name', 'referee_id'], 'Referee_Assignment': ['match_id', 'referee_id'], 'Venue': ['venue_name', 'venue_id', 'country', 'city'], 'Tournament': ['tournament_id', 'country', 'tournament_name', 'start_date', 'venue_id']}. \n# the user question is: Find the referees who have officiated matches in tournaments held in at least 38 different cities and 38 different years. \n#SQL query: SELECT Referee.referee_name FROM Referee JOIN Referee_Assignment ON Referee.referee_id = Referee_Assignment.referee_id JOIN Match ON Referee_Assignment.match_id = Match.match_id JOIN Tournament ON Match.tournament_id = Tournament.tournament_id JOIN Venue ON Tournament.venue_id = Venue.venue_id GROUP BY Referee.referee_name HAVING COUNT(DISTINCT Venue.city) >= 38 AND COUNT(DISTINCT strftime('%Y', Tournament.start_date)) >= 38;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Participants': ['id', 'name', 'email']} and \n# the user question: Find the name and email of the participant who has attended the most classes.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the name and email of the participant who has attended the most classes.",
    "output": "SELECT Participants.name, Participants.email FROM Participants INNER JOIN Enrollments ON Participants.id = Enrollments.participant_id GROUP BY Participants.id ORDER BY COUNT(*) DESC LIMIT 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "Enrollments": [
            "user_id",
            "class_id",
            "plan_id",
            "enrollment_date",
            "enrollment_id",
            "num_attendees",
            "is_cancelled",
            "session_id",
            "status",
            "enrollment_time",
            "payment_amount",
            "book_date",
            "updated_at",
            "cancellation_date",
            "cancellation_reason",
            "attendance_status",
            "price",
            "package_id",
            "participant_id",
            "id",
            "date"
        ],
        "Participants": [
            "id",
            "name",
            "email"
        ]
    },
    "response_text": "SELECT Participants.name, Participants.email \nFROM Participants \nJOIN Enrollments ON Participants.id = Enrollments.participant_id \nWHERE Enrollments.attendance_status = 'attended' \nGROUP BY Enrollments.participant_id \nORDER BY COUNT(Enrollments.class_id) DESC \nLIMIT 1;",
    "prompt_token_number": 459,
    "response_token_number": 62
},
{
    "id": 34445,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Recipients': ['name', 'email', 'campaign_id', 'status', 'recipient_id', 'segment_id', 'list_id', 'last_opened_at', 'city', 'country', 'state', 'last_clicked_at', 'created_at', 'subscribed_at'], 'Campaigns': ['name', 'campaign_id', 'limited', 'Sale', 't', 'our', 'miss', 'content', 'subject', 'user_id', 'segment_id', 'list_id', 'workflow_id', 'email_template_id', 'scheduled_at', 'created_at', 'sent_at'], 'Campaign_Stats': ['opens', 'campaign_id', 'created_at', 'clicks', 'clicked_at', 'opened_at', 'recipient_id', 'click_id', 'open_id', 'bounce_id', 'bounces', 'marked_as_spam', 'complaints', 'segment_id'], 'Segments': ['updated_at', 'user_id', 'created_at', 'name', 'filter_expression', 'segment_id', 'criteria', 'num_recipients']}. \n# the user question is: Retrieve the number of recipients who have opened any campaign from User ID 25 in the last 7 days and are in the \"VIP Customers\" segment, grouped by state and sorted by most opens first.. \n#SQL query: SELECT r.state, COUNT(DISTINCT r.email) as opens FROM Recipients r JOIN Segments s ON r.segment_id = s.segment_id JOIN Campaigns c ON r.campaign_id = c.campaign_id JOIN Campaign_Stats cs ON c.campaign_id = cs.campaign_id WHERE c.user_id = 25 AND s.name = 'VIP Customers' AND cs.opens > 0 AND cs.created_at > DATEADD(day, -7, GETDATE()) GROUP BY r.state ORDER BY opens DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'PilatesSessions': ['client_id', 'instructor_id', 'price']} and \n# the user question: Find the number of Pilates sessions scheduled for each instructor in the \"Instructors\" table.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the number of Pilates sessions scheduled for each instructor in the \"Instructors\" table.",
    "output": "SELECT i.name, COUNT(p.instructor_id) AS num_sessions FROM Instructors i LEFT JOIN PilatesSessions p ON i.instructor_id = p.instructor_id GROUP BY i.instructor_id;",
    "schema": "pilates",
    "processed_schema_content": {
        "Instructors": [
            "user_id",
            "instructor_id",
            "created_at",
            "certifications",
            "bio",
            "instructor_name",
            "name",
            "certification",
            "id"
        ],
        "PilatesSessions": [
            "client_id",
            "instructor_id",
            "price"
        ]
    },
    "response_text": "SELECT i.instructor_name, COUNT(p.instructor_id) as number_of_sessions \nFROM Instructors i JOIN PilatesSessions p \nON i.instructor_id = p.instructor_id \nGROUP BY i.instructor_name;",
    "prompt_token_number": 537,
    "response_token_number": 45
},
{
    "id": 34457,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Traffic_Logs': ['log_id', 'timestamp', 'reviewed', 'destination_ip_address', 'source_ip_address', 'flagged_as_security_threat', 'status', 'generated_by_firewall_id', 'destination_port_number', 'bytes_transferred', 'destination_port', 'generated_by_router_id', 'protocol', 'port_id']}. \n# the user question is: Show all network traffic logs that were generated by the firewall with ID 12345 and have a destination port number of 80 or 443, and list the associated log ID, source IP address, destination IP address, timestamp, and number of bytes transferred for each log.. \n#SQL query: SELECT tl.log_id, tl.source_ip_address, tl.destination_ip_address, tl.timestamp, tl.bytes_transferred FROM Traffic_Logs tl WHERE tl.generated_by_firewall_id = 12345 AND tl.destination_port_number IN (80, 443);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'instructors': ['instructor_email', 'instructor_phone', 'instructor_name', 'instructor_id', 'name', 'experience_years', 'id', 'email']} and \n# the user question: Get the names of the Pilates instructors who have more than 5 years of experience.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Get the names of the Pilates instructors who have more than 5 years of experience.",
    "output": "SELECT name FROM instructors WHERE experience_years > 5",
    "schema": "pilates",
    "processed_schema_content": {
        "instructors": [
            "instructor_email",
            "instructor_phone",
            "instructor_name",
            "instructor_id",
            "name",
            "experience_years",
            "id",
            "email"
        ]
    },
    "response_text": "SELECT i.instructor_name FROM instructors i WHERE i.name = 'Pilates' AND i.experience_years > 5;",
    "prompt_token_number": 328,
    "response_token_number": 26
},
{
    "id": 34463,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Artists': ['artist_name', 'artist_id', 'artist_genre', 'artist_country', 'country_id', 'genre_id'], 'Albums': ['artist_id', 'release_date', 'album_title', 'album_id', 'label_id', 'release_year', 'album_name', 'genre_id']}. \n# the user question is: Retrieve the albums and their respective artists released after the year 2000:. \n#SQL query: SELECT Albums.album_title, Artists.artist_name FROM Albums JOIN Artists ON Albums.artist_id = Artists.artist_id WHERE Albums.release_date > '2000-01-01';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'instructors': ['instructor_email', 'instructor_phone', 'instructor_name', 'instructor_id', 'name', 'experience_years', 'id', 'email'], 'classes': ['class_time', 'class_name', 'class_day', 'class_capacity', 'class_id', 'class_price', 'class_type', 'day_of_week', 'start_time', 'attendees', 'price', 'id', 'capacity', 'name', 'instructor_id', 'day']} and \n# the user question: Find all the instructors who teach Pilates classes on Mondays.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find all the instructors who teach Pilates classes on Mondays.",
    "output": "SELECT instructors.name FROM instructors JOIN classes ON instructors.instructor_id = classes.instructor_id WHERE classes.day = 'Monday' AND classes.class_type = 'Pilates';",
    "schema": "pilates",
    "processed_schema_content": {
        "instructors": [
            "instructor_email",
            "instructor_phone",
            "instructor_name",
            "instructor_id",
            "name",
            "experience_years",
            "id",
            "email"
        ],
        "classes": [
            "class_time",
            "class_name",
            "class_day",
            "class_capacity",
            "class_id",
            "class_price",
            "class_type",
            "day_of_week",
            "start_time",
            "attendees",
            "price",
            "id",
            "capacity",
            "name",
            "instructor_id",
            "day"
        ]
    },
    "response_text": "SELECT instructors.instructor_name FROM instructors JOIN classes ON instructors.instructor_id = classes.instructor_id WHERE classes.class_name = 'Pilates' AND classes.class_day = 'Monday';",
    "prompt_token_number": 322,
    "response_token_number": 37
},
{
    "id": 34465,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Team': ['team_name', 'team_id', 'country'], 'Coach': ['team_id', 'coach_name']}. \n# the user question is: Find the coaches who have coached teams from at least two different countries. \n#SQL query: SELECT Coach.coach_name FROM Coach JOIN Team ON Coach.team_id = Team.team_id GROUP BY Coach.coach_name HAVING COUNT(DISTINCT Team.country) >= 2;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'employees': ['department_id', 'name', 'salary', 'id', 'title', 'department']} and \n# the user question: Return the name and salary of the employee with the highest salary:,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Return the name and salary of the employee with the highest salary:",
    "output": "SELECT name, salary FROM employees ORDER BY salary DESC LIMIT 1;",
    "schema": "pilates",
    "processed_schema_content": {
        "employees": [
            "department_id",
            "name",
            "salary",
            "id",
            "title",
            "department"
        ]
    },
    "response_text": "SELECT name, salary FROM employees ORDER BY salary DESC LIMIT 1;",
    "prompt_token_number": 208,
    "response_token_number": 14
},
{
    "id": 34466,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months'], 'Story': ['story_id', 'headline', 'content', 'date_published', 'outlet_id', 'campaign_id', 'date', 'journalist_id', 'sentiment_score', 'body', 'views', 'shares', 'likes', 'clicks', 'impressions', 'comments', 'text', 'publication_date', 'word_count'], 'Influencer': ['influencer_id', 'first_name', 'last_name', 'email', 'phone_number', 'followers', 'profile', 'age'], 'Endorsement': ['endorsement_id', 'influencer_id', 'product_name', 'date_posted', 'campaign_id', 'fee'], 'MediaOutlet': ['outlet_id', 'name', 'outlet_type', 'state', 'city', 'contact_info', 'rating_id', 'language', 'location_id', 'email', 'circulation']}. \n# the user question is: Retrieve the names and types of all media outlets that have been featured in a story associated with a campaign that has at least one endorsement from an influencer with the keyword \"fashion\" in their profile and the campaign has been featured in a story with the sentiment score less than 0.4:. \n#SQL query: SELECT DISTINCT MediaOutlet.name, MediaOutlet.outlet_type FROM MediaOutlet INNER JOIN Story ON MediaOutlet.outlet_id = Story.outlet_id INNER JOIN Campaign ON Story.campaign_id = Campaign.campaign_id INNER JOIN Endorsement ON Campaign.campaign_id = Endorsement.campaign_id INNER JOIN Influencer ON Endorsement.influencer_id = Influencer.influencer_id WHERE Influencer.profile LIKE '%fashion%' AND Story.sentiment_score < 0.4;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'employees': ['department_id', 'name', 'salary', 'id', 'title', 'department']} and \n# the user question: Retrieve the name and salary of all employees who work in the \"Sales\" department and have a salary greater than $50,000.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Retrieve the name and salary of all employees who work in the \"Sales\" department and have a salary greater than $50,000.",
    "output": "SELECT name, salary FROM employees WHERE department = 'Sales' AND salary > 50000;",
    "schema": "pilates",
    "processed_schema_content": {
        "employees": [
            "department_id",
            "name",
            "salary",
            "id",
            "title",
            "department"
        ]
    },
    "response_text": "SELECT name, salary FROM employees WHERE department = 'Sales' AND salary > 50000;",
    "prompt_token_number": 576,
    "response_token_number": 19
},
{
    "id": 34467,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'SmartContractInstance': ['BlockID', 'SmartContractID', 'Creator', 'SmartContractInstanceID', 'Timestamp', 'PublicAddress', 'IsSuccess', 'Function', 'Parameter', 'GasPrice', 'Caller', 'GasUsed', 'Sender', 'ExecutionTime', 'Successful', 'User', 'EndTimestamp', 'Status', 'IsDeployed'], 'SmartContract': ['SmartContractID', 'Code', 'Balance', 'Creator', 'Name']}. \n# the user question is: Find the smart contracts that have the highest gas usage in the last 24 hours:. \n#SQL query: SELECT SmartContract.SmartContractID, SUM(SmartContractInstance.GasUsed) AS TotalGasUsed FROM SmartContract JOIN SmartContractInstance ON SmartContract.SmartContractID = SmartContractInstance.SmartContractID AND SmartContractInstance.Timestamp >= datetime('now', '-24 hours') GROUP BY SmartContract.SmartContractID ORDER BY TotalGasUsed DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'RiskMitigation': ['mitigation_id', 'risk_id', 'mitigation_name', 'description', 'effectiveness', 'due_date', 'assigned_to', 'status']} and \n# the user question: Text Query: \"Find the mitigation measures and their effectiveness for the risk with risk_id = 2.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Find the mitigation measures and their effectiveness for the risk with risk_id = 2.\"",
    "output": "SELECT mitigation_name, effectiveness FROM RiskMitigation WHERE risk_id = 2;",
    "schema": "risk_management",
    "processed_schema_content": {
        "RiskMitigation": [
            "mitigation_id",
            "risk_id",
            "mitigation_name",
            "description",
            "effectiveness",
            "due_date",
            "assigned_to",
            "status"
        ]
    },
    "response_text": "SELECT mitigation_name, effectiveness FROM RiskMitigation WHERE risk_id = 2",
    "prompt_token_number": 341,
    "response_token_number": 15
},
{
    "id": 34469,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'doctor': ['doctor_id', 'name', 'speciality', 'address', 'experience', 'degree', 'license', 'is_accepting_new_patients', 'specialty', 'email', 'phone_number']}. \n# the user question is: Find the names and addresses of all doctors who have a degree from a medical school in Germany and specialize in gynecology:. \n#SQL query: SELECT name, address FROM doctor WHERE degree LIKE '%Germany%' AND specialty = 'Gynecology';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve the projects along with the count of associated risks for each project.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the projects along with the count of associated risks for each project.\"",
    "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id GROUP BY Projects.project_id;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ]
    },
    "response_text": "SELECT P.project_name, COUNT(R.risk_id) AS risks_count\nFROM Projects P\nLEFT JOIN Risks R ON P.project_id = R.project_id\nGROUP BY P.project_name;",
    "prompt_token_number": 282,
    "response_token_number": 39
},
{
    "id": 34471,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Product_Ratings': ['rating', 'product_id'], 'Restocks': ['product_id', 'restock_date', 'quantity']}. \n# the user question is: Find the names and total revenue for all products that have been restocked in the last month and have a rating of 4 or 5.. \n#SQL query: SELECT Products.product_name, SUM(Restocks.quantity * Products.price) AS total_revenue FROM Products INNER JOIN Restocks ON Products.product_id = Restocks.product_id INNER JOIN Product_Ratings ON Products.product_id = Product_Ratings.product_id WHERE Restocks.restock_date >= DATE('now', '-1 month') AND Product_Ratings.rating IN (4,5) GROUP BY Products.product_id ORDER BY total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name'], 'RiskActions': ['action_id', 'risk_id', 'action_name', 'due_date', 'assigned_to', 'status']} and \n# the user question: Text Query: \"Retrieve the risk actions assigned to employee with employee_id = 3.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the risk actions assigned to employee with employee_id = 3.\"",
    "output": "SELECT RiskActions.action_name, RiskActions.due_date, RiskActions.status FROM RiskActions INNER JOIN Employees ON RiskActions.assigned_to = Employees.employee_id WHERE Employees.employee_id = 3;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Employees": [
            "employee_id",
            "department_id",
            "first_name",
            "last_name",
            "email",
            "phone_number",
            "employee_name"
        ],
        "RiskActions": [
            "action_id",
            "risk_id",
            "action_name",
            "due_date",
            "assigned_to",
            "status"
        ]
    },
    "response_text": "SELECT * FROM RiskActions WHERE assigned_to = 3;",
    "prompt_token_number": 400,
    "response_token_number": 12
},
{
    "id": 34472,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'director_id', 'duration', 'release_date', 'genre', 'genre_id', 'language_id'], 'Review': ['rating', 'film_id', 'review_id'], 'Actor': ['actor_id', 'name', 'nationality', 'birth_date'], 'Film_Actor': ['film_id', 'actor_id']}. \n# the user question is: \"Retrieve the names of actors who have appeared in films released in the same year as their birth year and have a rating higher than 8.\". \n#SQL query: SELECT Actor.name FROM Actor INNER JOIN Film_Actor ON Actor.actor_id = Film_Actor.actor_id INNER JOIN Film ON Film_Actor.film_id = Film.film_id INNER JOIN Review ON Film.film_id = Review.film_id WHERE strftime('%Y', Film.release_date) = strftime('%Y', Actor.birth_date) AND Review.rating > 8 GROUP BY Actor.actor_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'RiskCategories': ['category_id', 'category_name'], 'RiskCategoryMapping': ['mapping_id', 'risk_id', 'category_id']} and \n# the user question: Text Query: \"Retrieve the risk categories along with the count of associated risks for each category.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the risk categories along with the count of associated risks for each category.\"",
    "output": "SELECT RiskCategories.category_name, COUNT(RiskCategoryMapping.risk_id) AS risk_count FROM RiskCategories LEFT JOIN RiskCategoryMapping ON RiskCategories.category_id = RiskCategoryMapping.category_id GROUP BY RiskCategories.category_id;",
    "schema": "risk_management",
    "processed_schema_content": {
        "RiskCategories": [
            "category_id",
            "category_name"
        ],
        "RiskCategoryMapping": [
            "mapping_id",
            "risk_id",
            "category_id"
        ]
    },
    "response_text": "SELECT RiskCategories.category_name, COUNT(RiskCategoryMapping.risk_id) AS Number_of_risks FROM RiskCategories LEFT JOIN RiskCategoryMapping ON RiskCategories.category_id = RiskCategoryMapping.category_id GROUP BY RiskCategories.category_id;",
    "prompt_token_number": 329,
    "response_token_number": 46
},
{
    "id": 34474,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'price', 'manufacturer_id', 'avg_rating', 'color', 'category_id', 'review_count', 'quantity', 'max_rating', 'min_rating', 'max_review_count'], 'ProductReviews': ['rating', 'product_id', 'review_id', 'user_id', 'customer_id', 'category_id']}. \n# the user question is: \"Retrieve the products that have not received any reviews with a rating below a certain threshold.\". \n#SQL query: SELECT p.product_id, p.product_name FROM Products p LEFT JOIN ProductReviews pr ON p.product_id = pr.product_id WHERE pr.review_id IS NULL OR pr.rating >= 4.0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments']} and \n# the user question: Text Query: \"Retrieve the projects along with the average risk assessment score for each project.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the projects along with the average risk assessment score for each project.\"",
    "output": "SELECT Projects.project_name, AVG(RiskAssessment.assessment_score) AS average_score FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id LEFT JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id GROUP BY Projects.project_id;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ],
        "RiskAssessment": [
            "assessment_id",
            "risk_id",
            "assessment_date",
            "assessment_score",
            "comments"
        ]
    },
    "response_text": "SELECT p.project_id, p.project_name, AVG(ra.assessment_score) AS average_risk_assessment_score\nFROM Projects p\nLEFT JOIN Risks r ON p.project_id = r.project_id\nLEFT JOIN RiskAssessment ra ON r.risk_id = ra.risk_id\nGROUP BY p.project_id, p.project_name;",
    "prompt_token_number": 349,
    "response_token_number": 68
},
{
    "id": 34475,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'therapists': ['first_name', 'last_name', 'therapist_id', 'cnt', 'gender', 'is_available', 'specialty', 'last_login_date', 'session_count'], 'appointments': ['appointment_id', 'therapist_id', 'appointment_date', 'patient_id', 'end_time', 'start_time', 'session_duration_minutes', 'session_cost', 'satisfaction_rating', 'is_missed', 'sessions_per_week', 'session_length_minutes', 'start_date', 'attended', 'end_date', 'therapy_id'], 'patients': ['email', 'phone_number', 'last_name', 'patient_id', 'first_name', 'date_of_birth', 'gender', 'birthdate', 'start_date', 'session_count', 'age', 'therapy_start_date', 'birth_date']}. \n# the user question is: Find the patients who have seen multiple therapists and the therapists they have seen.. \n#SQL query: SELECT p.first_name || ' ' || p.last_name AS patient_name, GROUP_CONCAT(DISTINCT t.first_name || ' ' || t.last_name) AS therapist_names FROM patients p JOIN appointments a ON a.patient_id = p.patient_id JOIN therapists t ON t.therapist_id = a.therapist_id GROUP BY p.patient_id HAVING COUNT(DISTINCT t.therapist_id) > 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name'], 'Tasks': ['task_id', 'project_id', 'task_name', 'assigned_to', 'start_date', 'end_date', 'status', 'employee_id', 'priority']} and \n# the user question: Text Query: \"Retrieve the tasks and their assigned employees for Project A.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the tasks and their assigned employees for Project A.\"",
    "output": "SELECT Tasks.task_name, Employees.first_name, Employees.last_name FROM Tasks INNER JOIN Employees ON Tasks.assigned_to = Employees.employee_id INNER JOIN Projects ON Tasks.project_id = Projects.project_id WHERE Projects.project_name = 'Project A';",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Employees": [
            "employee_id",
            "department_id",
            "first_name",
            "last_name",
            "email",
            "phone_number",
            "employee_name"
        ],
        "Tasks": [
            "task_id",
            "project_id",
            "task_name",
            "assigned_to",
            "start_date",
            "end_date",
            "status",
            "employee_id",
            "priority"
        ]
    },
    "response_text": "SELECT t.task_name, CONCAT(e.first_name, ' ', e.last_name) AS employee_name FROM Tasks t JOIN Employees e ON t.assigned_to = e.employee_id JOIN Projects p ON t.project_id = p.project_id WHERE p.project_name = 'Project A';",
    "prompt_token_number": 479,
    "response_token_number": 54
},
{
    "id": 34476,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'director_id', 'duration', 'release_date', 'genre', 'genre_id', 'language_id'], 'Director': ['director_id', 'name', 'nationality'], 'Actor': ['actor_id', 'name', 'nationality', 'birth_date'], 'Film_Award': ['film_id', 'award_id'], 'Award': ['award_id', 'category', 'name'], 'Film_Actor': ['film_id', 'actor_id']}. \n# the user question is: \"Retrieve the names of actors who have appeared in films directed by Christopher Nolan and also won an Academy Award.\". \n#SQL query: SELECT Actor.name FROM Actor INNER JOIN Film_Actor ON Actor.actor_id = Film_Actor.actor_id INNER JOIN Film ON Film_Actor.film_id = Film.film_id INNER JOIN Director ON Film.director_id = Director.director_id INNER JOIN Film_Award ON Film.film_id = Film_Award.film_id INNER JOIN Award ON Film_Award.award_id = Award.award_id WHERE Director.name = 'Christopher Nolan' AND Award.name = 'Academy Award' GROUP BY Actor.actor_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskMitigation': ['mitigation_id', 'risk_id', 'mitigation_name', 'description', 'effectiveness', 'due_date', 'assigned_to', 'status'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Retrieve the risks with their associated mitigation measures and their assigned employees.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the risks with their associated mitigation measures and their assigned employees.\"",
    "output": "SELECT Risks.risk_name, RiskMitigation.mitigation_name, Employees.first_name, Employees.last_name FROM Risks INNER JOIN RiskMitigation ON Risks.risk_id = RiskMitigation.risk_id INNER JOIN Employees ON RiskMitigation.assigned_to = Employees.employee_id;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ],
        "RiskMitigation": [
            "mitigation_id",
            "risk_id",
            "mitigation_name",
            "description",
            "effectiveness",
            "due_date",
            "assigned_to",
            "status"
        ],
        "Employees": [
            "employee_id",
            "department_id",
            "first_name",
            "last_name",
            "email",
            "phone_number",
            "employee_name"
        ]
    },
    "response_text": "SELECT Risks.risk_name, RiskMitigation.mitigation_name, Employees.employee_name \nFROM Risks \nINNER JOIN RiskMitigation ON Risks.risk_id = RiskMitigation.risk_id \nINNER JOIN Employees ON Risks.assigned_to = Employees.employee_id \nGROUP BY Risks.risk_id;",
    "prompt_token_number": 454,
    "response_token_number": 63
},
{
    "id": 34477,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Test_Results': ['psychologist_id', 'score', 'test_id', 'patient_id', 'date'], 'Patients': ['name', 'patient_id', 'birthdate', 'case_id', 'age', 'date_of_birth', 'last_name', 'first_name']}. \n# the user question is: Get the top 5 patients who have taken the most psychological tests.. \n#SQL query: SELECT p.name, COUNT(*) as test_count FROM Patients p INNER JOIN Test_Results tr ON p.patient_id = tr.patient_id GROUP BY p.name ORDER BY test_count DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Tasks': ['task_id', 'project_id', 'task_name', 'assigned_to', 'start_date', 'end_date', 'status', 'employee_id', 'priority'], 'TaskRiskAssociation': ['task_risk_id', 'task_id', 'risk_id']} and \n# the user question: Text Query: \"Retrieve the tasks along with the count of associated risks for each task.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the tasks along with the count of associated risks for each task.\"",
    "output": "SELECT Tasks.task_name, COUNT(TaskRiskAssociation.risk_id) AS risk_count FROM Tasks LEFT JOIN TaskRiskAssociation ON Tasks.task_id = TaskRiskAssociation.task_id GROUP BY Tasks.task_id;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Tasks": [
            "task_id",
            "project_id",
            "task_name",
            "assigned_to",
            "start_date",
            "end_date",
            "status",
            "employee_id",
            "priority"
        ],
        "TaskRiskAssociation": [
            "task_risk_id",
            "task_id",
            "risk_id"
        ]
    },
    "response_text": "SELECT t.task_name, COUNT(*) as risk_count \nFROM Tasks t \nINNER JOIN TaskRiskAssociation tra \nON t.task_id = tra.task_id \nGROUP BY t.task_name;",
    "prompt_token_number": 281,
    "response_token_number": 37
},
{
    "id": 34478,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['UserName', 'UserID'], 'Comments': ['UserID', 'SongID', 'CommentID'], 'Songs': ['AlbumID', 'SongID', 'GenreID', 'SongTitle', 'Duration', 'SongName', 'ArtistID', 'ReleaseDate', 'ReleaseYear', 'Language', 'AvgDuration', 'AvgRating', 'CommentCount', 'Rating', 'PlayCount'], 'Albums': ['ReleaseYear', 'AlbumID', 'ArtistID', 'AlbumTitle', 'ReleaseDate', 'SongID', 'Language', 'LanguageID', 'GenreID', 'AlbumName'], 'Ratings': ['UserID', 'SongID', 'Rating', 'GenreID', 'AlbumID', 'RatingID']}. \n# the user question is: \"List the users who have commented on songs from all albums and have the highest average rating.\". \n#SQL query: SELECT Users.UserName FROM Users INNER JOIN Comments ON Users.UserID = Comments.UserID INNER JOIN Songs ON Comments.SongID = Songs.SongID INNER JOIN Ratings ON Songs.SongID = Ratings.SongID GROUP BY Users.UserID HAVING COUNT(DISTINCT Songs.AlbumID) = ( SELECT COUNT(DISTINCT AlbumID) FROM Albums ) AND AVG(Ratings.Rating) = ( SELECT MAX(AvgRating) FROM ( SELECT UserID, AVG(Rating) AS AvgRating FROM Ratings GROUP BY UserID ) AS Subquery );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments']} and \n# the user question: Text Query: \"Retrieve the projects along with the count of associated risks and the maximum assessment score for each project.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the projects along with the count of associated risks and the maximum assessment score for each project.\"",
    "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count, MAX(RiskAssessment.assessment_score) AS max_score FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id LEFT JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id GROUP BY Projects.project_id;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ],
        "RiskAssessment": [
            "assessment_id",
            "risk_id",
            "assessment_date",
            "assessment_score",
            "comments"
        ]
    },
    "response_text": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS RiskCount, MAX(RiskAssessment.assessment_score) AS MaxScore \nFROM Projects \nLEFT JOIN Risks ON Projects.project_id = Risks.project_id \nLEFT JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id \nGROUP BY Projects.project_id;",
    "prompt_token_number": 497,
    "response_token_number": 71
},
{
    "id": 34479,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']}. \n# the user question is: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $90 million:. \n#SQL query: SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 90000000 AND Campaigns.status = 'active';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments']} and \n# the user question: Text Query: \"Retrieve the projects along with the total count of associated risks and the average assessment score for each project.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the projects along with the total count of associated risks and the average assessment score for each project.\"",
    "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count, AVG(RiskAssessment.assessment_score) AS avg_score FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id LEFT JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id GROUP BY Projects.project_id;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ],
        "RiskAssessment": [
            "assessment_id",
            "risk_id",
            "assessment_date",
            "assessment_score",
            "comments"
        ]
    },
    "response_text": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS total_risks, AVG(RiskAssessment.assessment_score) AS average_score FROM Projects JOIN Risks ON Projects.project_id = Risks.project_id JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id GROUP BY Projects.project_name;",
    "prompt_token_number": 444,
    "response_token_number": 66
},
{
    "id": 34480,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']}. \n# the user question is: Find the total number of equipment rentals for each equipment type.. \n#SQL query: SELECT Equipment.equipment_type, COUNT(*) as num_rentals FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id GROUP BY Equipment.equipment_type;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments']} and \n# the user question: Text Query: \"Retrieve the projects and the average assessment score for each project, sorted by the average score in descending order.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the projects and the average assessment score for each project, sorted by the average score in descending order.\"",
    "output": "SELECT Projects.project_name, AVG(RiskAssessment.assessment_score) AS average_score FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id GROUP BY Projects.project_id ORDER BY average_score DESC;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ],
        "RiskAssessment": [
            "assessment_id",
            "risk_id",
            "assessment_date",
            "assessment_score",
            "comments"
        ]
    },
    "response_text": "SELECT Projects.project_name, AVG(RiskAssessment.assessment_score) as average_score FROM Projects \nINNER JOIN Risks ON Projects.project_id = Risks.project_id \nINNER JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id \nGROUP BY Projects.project_name \nORDER BY average_score DESC;",
    "prompt_token_number": 358,
    "response_token_number": 65
},
{
    "id": 34481,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Sites': ['site_id', 'name', 'location', 'date_discovered', 'excavated_by', 'culture_id', 'description'], 'Excavations': ['excavation_id', 'site_id', 'start_date', 'end_date', 'description', 'excavated_by'], 'Artifacts': ['artifact_id', 'excavation_id', 'name', 'type', 'description', 'weight']}. \n# the user question is: Find the site names and the count of artifacts discovered at each site, sorted in descending order of the artifact count:. \n#SQL query: SELECT Sites.name, COUNT(Artifacts.artifact_id) AS artifact_count FROM Sites JOIN Excavations ON Sites.site_id = Excavations.site_id JOIN Artifacts ON Excavations.excavation_id = Artifacts.excavation_id GROUP BY Sites.name ORDER BY artifact_count DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve the projects and the count of associated risks, sorted by the risk count in descending order.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the projects and the count of associated risks, sorted by the risk count in descending order.\"",
    "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id GROUP BY Projects.project_id ORDER BY risk_count DESC;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ]
    },
    "response_text": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count FROM Projects JOIN Risks ON Projects.project_id = Risks.project_id GROUP BY Projects.project_name ORDER BY risk_count DESC;",
    "prompt_token_number": 367,
    "response_token_number": 40
},
{
    "id": 34482,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'team_id', 'completed_by', 'skill_id', 'first_name', 'manager_id', 'last_name', 'job_title', 'office_location', 'role', 'years_of_experience', 'department_id', 'salary'], 'User_Skills': ['user_id', 'skill_id', 'proficiency_level', 'skill_name'], 'Skills': ['skill_name', 'skill_id', 'Python'], 'Meeting_Attendees': ['user_id', 'meeting_id', 'attendance_status', 'attendee_id', 'attendance_date'], 'Meetings': ['start_time', 'meeting_id', 'location', 'meeting_date', 'meeting_title', 'organizer_id', 'team_id', 'meeting_time'], 'Skill_Proficiencies': ['proficiency_level', 'skill_id', 'proficiency_level_num', 'skill_name']}. \n# the user question is: Find all users who have a skill with the name containing \"marketing\" and a proficiency level of \"Expert\" and have attended a meeting with the word \"sales\" in the meeting title in the last 30 days:. \n#SQL query: SELECT DISTINCT Users.username FROM Users JOIN User_Skills ON Users.user_id = User_Skills.user_id JOIN Skills ON User_Skills.skill_id = Skills.skill_id JOIN Skill_Proficiencies ON User_Skills.skill_id = Skill_Proficiencies.skill_id JOIN Meeting_Attendees ON Users.user_id = Meeting_Attendees.user_id JOIN Meetings ON Meeting_Attendees.meeting_id = Meetings.meeting_id WHERE Skills.skill_name LIKE '%marketing%' AND Skill_Proficiencies.proficiency_level = 'Expert' AND Meetings.meeting_title LIKE '%sales%' AND Meetings.meeting_date BETWEEN DATE('now', '-30 day') AND DATE('now');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Tasks': ['task_id', 'project_id', 'task_name', 'assigned_to', 'start_date', 'end_date', 'status', 'employee_id', 'priority']} and \n# the user question: Text Query: \"Retrieve the projects and the total count of associated tasks, sorted by the task count in descending order.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the projects and the total count of associated tasks, sorted by the task count in descending order.\"",
    "output": "SELECT Projects.project_name, COUNT(Tasks.task_id) AS task_count FROM Projects LEFT JOIN Tasks ON Projects.project_id = Tasks.project_id GROUP BY Projects.project_id ORDER BY task_count DESC;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Tasks": [
            "task_id",
            "project_id",
            "task_name",
            "assigned_to",
            "start_date",
            "end_date",
            "status",
            "employee_id",
            "priority"
        ]
    },
    "response_text": "SELECT Projects.project_name, COUNT(Tasks.task_id) AS task_count\nFROM Projects\nLEFT JOIN Tasks ON Projects.project_id = Tasks.project_id\nGROUP BY Projects.project_name\nORDER BY task_count DESC;",
    "prompt_token_number": 545,
    "response_token_number": 42
},
{
    "id": 34483,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue'], 'Film_Genre': ['film_id', 'genre_id'], 'Genre': ['name', 'genre_id'], 'Director': ['last_name', 'director_id', 'first_name', 'country_id', 'production_company_id', 'gender']}. \n# the user question is: Find the directors who have directed films in all genres:. \n#SQL query: SELECT Director.first_name, Director.last_name FROM Director WHERE ( SELECT COUNT(DISTINCT Genre.genre_id) FROM Genre WHERE Genre.genre_id NOT IN ( SELECT Film_Genre.genre_id FROM Film_Genre INNER JOIN Film ON Film_Genre.film_id = Film.film_id AND Film.director_id = Director.director_id ) ) = 0 ;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve the projects and the total count of associated risks, sorted by the risk count in ascending order.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the projects and the total count of associated risks, sorted by the risk count in ascending order.\"",
    "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id GROUP BY Projects.project_id ORDER BY risk_count ASC;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ]
    },
    "response_text": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count \nFROM Projects \nLEFT JOIN Risks ON Projects.project_id = Risks.project_id \nGROUP BY Projects.project_name \nORDER BY risk_count ASC;",
    "prompt_token_number": 405,
    "response_token_number": 45
},
{
    "id": 34484,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Designs': ['artist_id', 'design_name', 'design_id', 'design_description', 'Tree', 'designer_id', 'date_created'], 'Artists': ['artist_name', 'artist_email', 'artist_id', 'artist_phone_number', 'email', 'email_address']}. \n# the user question is: Retrieve the list of artists along with their names and the total number of designs created by each artist, where the number of designs is less than 3, sorted by number of designs in ascending order.. \n#SQL query: SELECT Artists.artist_name, COUNT(Designs.design_id) AS design_count FROM Artists LEFT JOIN Designs ON Artists.artist_id = Designs.artist_id GROUP BY Artists.artist_id HAVING design_count < 3 ORDER BY design_count ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve the projects and the count of associated risks, sorted by the risk count in descending order, for projects with a start date in the last 6 months.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the projects and the count of associated risks, sorted by the risk count in descending order, for projects with a start date in the last 6 months.\"",
    "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id WHERE Projects.start_date >= DATE('now', '-6 months') GROUP BY Projects.project_id ORDER BY risk_count DESC;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ]
    },
    "response_text": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count \nFROM Projects \nLEFT JOIN Risks ON Projects.project_id = Risks.project_id \nWHERE Projects.start_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE() \nGROUP BY Projects.project_id \nORDER BY risk_count DESC;",
    "prompt_token_number": 356,
    "response_token_number": 66
},
{
    "id": 34485,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'celestial_bodies': ['radius', 'mass', 'name', 'type', 'number_of_moons', 'distance_from_sun', 'id', 'distance_from_earth', 'orbital_period', 'diameter', 'orbiting_body_id', 'average_surface_temperature', 'surface_temperature', 'perihelion_distance', 'period', 'semimajor_axis', 'redshift', 'velocity', 'luminosity', 'schwarzschild_radius', 'eccentricity', 'aphelion_distance', 'spin_period', 'semi_major_axis', 'surface_gravity', 'temperature', 'magnitude', 'accretion_disk_temperature', 'rotation_period', 'obliquity', 'pulse_period', 'peak_absolute_magnitude', 'albedo', 'apparent_magnitude', 'absolute_magnitude', 'spectral_type', 'discovery_year', 'spectral_class', 'distance_from_star', 'discovery_method_id', 'equilibrium_temperature', 'metallicity', 'age', 'effective_temperature', 'atmospheric_composition', 'inclination', 'parallax', 'rotation_velocity', 'axial_tilt', 'orbital_inclination', 'density', 'rotational_velocity', 'magnetic_field_strength', 'composition', 'rotational_period', 'spin', 'distance_from_galactic_center', 'binary_system', 'constellation', 'stellar_evolution_stage', 'star_cluster_type', 'galaxy', 'orbital_eccentricity', 'star_spectral_type', 'orbital_period_unit', 'diameter_unit', 'discovery_method', 'pulse_period_unit', 'distance_unit', 'radius_unit', 'avg_temperature', 'temperature_unit', 'aphelion_unit', 'perihelion_unit', 'event_horizon_unit', 'event_horizon_radius', 'luminosity_distance', 'orbit_type', 'equatorial_diameter', 'gravity_unit', 'escape_velocity', 'angle_unit', 'surface_area', 'density_unit', 'parent_body_id', 'atmospheric_pressure', 'luminosity_class', 'inner_habitable_zone', 'outer_habitable_zone', 'period_unit', 'classification', 'pressure_unit', 'surface_pressure', 'orbiting', 'distance', 'proper_motion', 'proper_motion_unit', 'mean_radius', 'mass_unit', 'temperature_range', 'Gas', 'Giant', 'brightness_temperature', 'parallax_unit', 'metallicity_unit', 'magnetic_field_unit', 'spin_parameter', 'orbiting_id', 'stellar_mass', 'stage', 'radial_velocity', 'host_star', 'accretion_rate', 'core_type']}. \n# the user question is: Retrieve the name and type of all celestial bodies that have a type of 'Brown dwarf' and a surface temperature between 1000 and 2000 Kelvin.. \n#SQL query: SELECT name, type FROM celestial_bodies WHERE type = 'Brown dwarf' AND surface_temperature BETWEEN 1000 AND 2000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Tasks': ['task_id', 'project_id', 'task_name', 'assigned_to', 'start_date', 'end_date', 'status', 'employee_id', 'priority']} and \n# the user question: Text Query: \"Retrieve the projects and the total count of associated tasks, sorted by the task count in descending order, for projects with a status of 'In Progress'.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the projects and the total count of associated tasks, sorted by the task count in descending order, for projects with a status of 'In Progress'.\"",
    "output": "SELECT Projects.project_name, COUNT(Tasks.task_id) AS task_count FROM Projects LEFT JOIN Tasks ON Projects.project_id = Tasks.project_id WHERE Projects.status = 'In Progress' GROUP BY Projects.project_id ORDER BY task_count DESC;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Tasks": [
            "task_id",
            "project_id",
            "task_name",
            "assigned_to",
            "start_date",
            "end_date",
            "status",
            "employee_id",
            "priority"
        ]
    },
    "response_text": "SELECT Projects.project_name, COUNT(Tasks.task_id) as task_count \nFROM Projects \nJOIN Tasks ON Projects.project_id = Tasks.project_id \nWHERE Projects.status = 'In Progress' \nGROUP BY Projects.project_name \nORDER BY task_count DESC;",
    "prompt_token_number": 806,
    "response_token_number": 50
},
{
    "id": 34486,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'PlantSpecies': ['id', 'name', 'genus_id', 'scientific_name'], 'PlantSpeciesSoil': ['plant_soil_id', 'plant_species_id'], 'PlantSoil': ['id', 'name', 'ph', 'type', 'pH', 'ph_level', 'pH_range'], 'PlantFruit': ['id', 'name'], 'PlantSpeciesFruit': ['plant_fruit_id', 'plant_species_id'], 'species': ['origin', 'species_name', 'max_height', 'genus_id', 'common_name', 'description', 'flower_color', 'species_id', 'discovery_date', 'conservation_status_id', 'name', 'scientific_name', 'family_id']}. \n# the user question is: Find all plant species that have a fruit type of \"Pome\" and a soil type of \"Loam\":. \n#SQL query: SELECT PlantSpecies.name AS species FROM PlantSpecies JOIN PlantSpeciesFruit ON PlantSpecies.id = PlantSpeciesFruit.plant_species_id JOIN PlantFruit ON PlantSpeciesFruit.plant_fruit_id = PlantFruit.id JOIN PlantSpeciesSoil ON PlantSpecies.id = PlantSpeciesSoil.plant_species_id JOIN PlantSoil ON PlantSpeciesSoil.plant_soil_id = PlantSoil.id WHERE PlantFruit.name = 'Pome' AND PlantSoil.type = 'Loam';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve the projects and the count of associated risks, sorted by the risk count in ascending order, for projects with a status of 'Completed'.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the projects and the count of associated risks, sorted by the risk count in ascending order, for projects with a status of 'Completed'.\"",
    "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id WHERE Projects.status = 'Completed' GROUP BY Projects.project_id ORDER BY risk_count ASC;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ]
    },
    "response_text": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count \nFROM Projects \nJOIN Risks ON Projects.project_id = Risks.project_id \nWHERE Projects.status = 'Completed' \nGROUP BY Projects.project_name \nORDER BY risk_count ASC;",
    "prompt_token_number": 484,
    "response_token_number": 52
},
{
    "id": 34487,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Customer': ['CustomerName', 'CustomerID', 'Country', 'SegmentID', 'Continent', 'PhoneNumber', 'Email', 'CreditLimit', 'State', 'AddressID', 'EmailAddress', 'LoyaltyLevelID', 'FirstName', 'LastName', 'City', 'StateCode', 'CountryCode', 'RegistrationDate'], 'ProductReview': ['ProductID', 'Rating', 'CustomerID', 'ProductReviewID', 'CustomerI', 'StarRating', 'ReviewID', 'ReviewDate']}. \n# the user question is: Retrieve the list of customers and the average rating of their product reviews, where the customer is located in North America and has written at least 3 reviews, sorted by average rating in descending order:. \n#SQL query: SELECT Customer.CustomerName, AVG(ProductReview.Rating) as AverageRating FROM Customer JOIN ProductReview ON Customer.CustomerID = ProductReview.CustomerID WHERE Customer.Continent = 'North America' GROUP BY Customer.CustomerID HAVING COUNT(ProductReview.ProductReviewID) >= 3 ORDER BY AverageRating DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve the projects and the total count of associated risks, sorted by the risk count in descending order, for projects with a status of 'In Progress'.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the projects and the total count of associated risks, sorted by the risk count in descending order, for projects with a status of 'In Progress'.\"",
    "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id WHERE Projects.status = 'In Progress' GROUP BY Projects.project_id ORDER BY risk_count DESC;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ]
    },
    "response_text": "SELECT Projects.project_name, COUNT(Risks.risk_id) as RiskCount FROM Projects JOIN Risks ON Projects.project_id = Risks.project_id WHERE Projects.status = 'In Progress' GROUP BY Projects.project_id ORDER BY RiskCount DESC;",
    "prompt_token_number": 414,
    "response_token_number": 48
},
{
    "id": 34488,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Billing': ['session_id', 'date', 'amount', 'id', 'start_time', 'end_time'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id']}. \n# the user question is: Retrieve the names and total amount billed for all therapists who have billed for sessions with a client who has a history of drug addiction, sorted in descending order by total amount billed:. \n#SQL query: SELECT t.name, SUM(b.amount) AS total_billed FROM Therapists t INNER JOIN Sessions s ON t.id = s.therapist_id INNER JOIN Billing b ON s.id = b.session_id INNER JOIN Session_Attendees sa ON s.id = sa.session_id INNER JOIN Clients c ON sa.client_id = c.id WHERE c.drug_addiction_history = 1 GROUP BY t.id ORDER BY total_billed DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve the projects and the count of associated risks, sorted by the risk count in descending order, for projects with a status of 'In Progress'.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the projects and the count of associated risks, sorted by the risk count in descending order, for projects with a status of 'In Progress'.\"",
    "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id WHERE Projects.status = 'In Progress' GROUP BY Projects.project_id ORDER BY risk_count DESC;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ]
    },
    "response_text": "SELECT p.project_name, COUNT(r.risk_id) AS risk_count FROM Projects p LEFT JOIN Risks r ON p.project_id = r.project_id WHERE p.status = 'In Progress' GROUP BY p.project_id ORDER BY risk_count DESC",
    "prompt_token_number": 672,
    "response_token_number": 48
},
{
    "id": 34489,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Customers': ['name', 'customer_id', 'email', 'address'], 'Orders': ['total_amount', 'customer_id', 'order_date', 'order_id', 'processing_time', 'delivery_date']}. \n# the user question is: Get the top 5 customers with the highest total order amount. \n#SQL query: SELECT c.name, SUM(o.total_amount) AS total_order_amount FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.name ORDER BY total_order_amount DESC LIMIT 5;  These examples cover various query scenarios, such as conditional filtering, aggregations, and top N results. Adapt the queries to match your specific database structure and naming conventions as needed.\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Tasks': ['task_id', 'project_id', 'task_name', 'assigned_to', 'start_date', 'end_date', 'status', 'employee_id', 'priority']} and \n# the user question: Text Query: \"Retrieve the projects and the total count of associated tasks, sorted by the task count in descending order, for projects with a start date in the last 6 months.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the projects and the total count of associated tasks, sorted by the task count in descending order, for projects with a start date in the last 6 months.\"",
    "output": "SELECT Projects.project_name, COUNT(Tasks.task_id) AS task_count FROM Projects LEFT JOIN Tasks ON Projects.project_id = Tasks.project_id WHERE Projects.start_date >= DATE('now', '-6 months') GROUP BY Projects.project_id ORDER BY task_count DESC;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Tasks": [
            "task_id",
            "project_id",
            "task_name",
            "assigned_to",
            "start_date",
            "end_date",
            "status",
            "employee_id",
            "priority"
        ]
    },
    "response_text": "SELECT p.project_name, COUNT(t.task_id) AS total_task_count\nFROM Projects p \nJOIN Tasks t ON p.project_id = t.project_id \nWHERE p.start_date > DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nGROUP BY p.project_name\nORDER BY total_task_count DESC;",
    "prompt_token_number": 337,
    "response_token_number": 60
},
{
    "id": 34490,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Characters': ['character_id', 'game_id'], 'Characters': ['character_name', 'character_id', 'character_description']}. \n# the user question is: Find the names of all characters that have appeared in at least 3 games.. \n#SQL query: SELECT Characters.character_name, COUNT(DISTINCT Games.game_id) AS game_count FROM Characters INNER JOIN Game_Characters ON Characters.character_id = Game_Characters.character_id INNER JOIN Games ON Game_Characters.game_id = Games.game_id GROUP BY Characters.character_id HAVING COUNT(DISTINCT Games.game_id) >= 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Tasks': ['task_id', 'project_id', 'task_name', 'assigned_to', 'start_date', 'end_date', 'status', 'employee_id', 'priority']} and \n# the user question: Text Query: \"Retrieve the projects and the count of associated tasks, sorted by the task count in descending order, for projects with a status of 'In Progress'.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the projects and the count of associated tasks, sorted by the task count in descending order, for projects with a status of 'In Progress'.\"",
    "output": "SELECT Projects.project_name, COUNT(Tasks.task_id) AS task_count FROM Projects LEFT JOIN Tasks ON Projects.project_id = Tasks.project_id WHERE Projects.status = 'In Progress' GROUP BY Projects.project_id ORDER BY task_count DESC;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Tasks": [
            "task_id",
            "project_id",
            "task_name",
            "assigned_to",
            "start_date",
            "end_date",
            "status",
            "employee_id",
            "priority"
        ]
    },
    "response_text": "SELECT Projects.project_name, COUNT(Tasks.task_id) as task_count \nFROM Projects \nINNER JOIN Tasks ON Projects.project_id = Tasks.project_id \nWHERE Projects.status = 'In Progress' \nGROUP BY Projects.project_id \nORDER BY task_count DESC;",
    "prompt_token_number": 335,
    "response_token_number": 51
},
{
    "id": 34491,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'EnergySuppliers': ['supplier_name', 'supplier_id', 'contact_name', 'phone_number', 'supplier_state', 'supplier_city', 'supplier_address', 'supplier_zip', 'supplier_location'], 'EnergySources': ['source_id', 'source_name', 'last_active', 'Solar', 'Panels', 'supplier_id', 'start_date', 'end_date', 'product_id', 'source_type', 'capacity', 'source_capacity', 'user_id'], 'EnergyProduction': ['source_id', 'end_date', 'start_date', 'production_value', 'reading_id', 'meter_id', 'production_date']}. \n# the user question is: Retrieve the names of all energy suppliers and their respective sources, and the total energy production for each source for the month of August 2039, where the source type is \"hydroelectric\" and the supplier has an office in the state of Washington.. \n#SQL query: SELECT s.supplier_name, src.source_name, SUM(pr.production_value) AS total_production FROM EnergySuppliers s INNER JOIN EnergySources src ON s.supplier_id = src.supplier_id INNER JOIN EnergyProduction pr ON src.source_id = pr.source_id WHERE s.supplier_state = 'Washington' AND src.source_type = 'hydroelectric' AND pr.start_date >= '2039-08-01' AND pr.end_date <= '2039-08-31' GROUP BY s.supplier_id, src.source_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Find the projects that have at least one risk with a status of 'Open' and retrieve the project name, risk count, and the total impact score of all associated risks.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Find the projects that have at least one risk with a status of 'Open' and retrieve the project name, risk count, and the total impact score of all associated risks.\"",
    "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count, SUM(Risks.impact_score) AS total_impact_score FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id WHERE Risks.status = 'Open' GROUP BY Projects.project_id;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ]
    },
    "response_text": "SELECT p.project_name, COUNT(r.risk_id) as risk_count, SUM(r.impact_score) as total_impact_score \nFROM Projects p \nINNER JOIN Risks r ON p.project_id = r.project_id \nWHERE r.status = 'Open' \nGROUP BY p.project_name \nHAVING COUNT(r.risk_id) > 0;",
    "prompt_token_number": 496,
    "response_token_number": 71
},
{
    "id": 34492,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'registration_date', 'dataset_count', 'role'], 'Projects': ['user_id', 'project_id', 'project_name', 'dataset_count', 'dataset_id', 'creation_year', 'created_at'], 'DataSets': ['dataset_description', 'dataset_id', 'dataset_name', 'project_id', 'user_id', 'source_id'], 'Observations': ['dataset_id', 'observation_count', 'observation_id']}. \n# the user question is: Find the usernames of users who have created projects that have at least two associated datasets, and calculate the total number of observations across all datasets for each user:. \n#SQL query: SELECT Users.username, SUM(Observations.observation_count) AS total_observations FROM Users JOIN Projects ON Users.user_id = Projects.user_id JOIN DataSets ON Projects.project_id = DataSets.project_id JOIN Observations ON DataSets.dataset_id = Observations.dataset_id GROUP BY Users.user_id HAVING COUNT(DataSets.dataset_id) >= 2;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Retrieve the risks with an assessment score greater than 8 and retrieve the associated project name and the assigned employee's name.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the risks with an assessment score greater than 8 and retrieve the associated project name and the assigned employee's name.\"",
    "output": "SELECT Risks.risk_name, Projects.project_name, Employees.employee_name FROM Risks INNER JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id INNER JOIN Projects ON Risks.project_id = Projects.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id WHERE RiskAssessment.assessment_score > 8;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ],
        "RiskAssessment": [
            "assessment_id",
            "risk_id",
            "assessment_date",
            "assessment_score",
            "comments"
        ],
        "Employees": [
            "employee_id",
            "department_id",
            "first_name",
            "last_name",
            "email",
            "phone_number",
            "employee_name"
        ]
    },
    "response_text": "SELECT Projects.project_name, Employees.employee_name, Risks.risk_name\nFROM Risks\nJOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id \nJOIN Projects ON Risks.project_id = Projects.project_id \nJOIN Employees ON Projects.assigned_to = Employees.employee_id\nWHERE RiskAssessment.assessment_score > 8;",
    "prompt_token_number": 456,
    "response_token_number": 72
},
{
    "id": 34493,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'plants': ['name', 'id', 'category_id', 'updated_at', 'created_at', 'description', 'min_temp', 'max_temp', 'water_requirement', 'light_requirement', 'watering_schedule', 'width', 'height', 'flowering', 'min_temp_tolerance', 'max_temp_tolerance', 'category', 'spacing_requirement', 'bloomed', 'water_usage', 'last_watered', 'sun_exposure', 'price', 'plant_date', 'harvest_date', 'bed_id', 'suitable_exposure', 'Rosemary', 'is_edible', 'species', 'plant_name', 'soil_type', 'bloom_time', 'max_height', 'flowering_season', 'plant_type', 'sunlight', 'garden_id', 'soil_ph'], 'garden_plants': ['garden_id', 'plant_id', 'variety_id', 'id', 'updated_at', 'quantity', 'created_at', 'description', 'name', 'plant_variety_id', 'planted_on', 'plant_density', 'garden_bed_id', 'last_watered']}. \n# the user question is: Find the names of all plants in a garden bed with ID 7 that are currently flowering.. \n#SQL query: SELECT plants.name FROM plants INNER JOIN garden_plants ON plants.id = garden_plants.plant_id WHERE garden_plants.garden_bed_id = 7 AND plants.flowering = 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Find the projects that have risks with an impact score greater than 9 and retrieve the project name and the total number of associated risks.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Find the projects that have risks with an impact score greater than 9 and retrieve the project name and the total number of associated risks.\"",
    "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS total_risks FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id WHERE Risks.impact_score > 9 GROUP BY Projects.project_id;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ]
    },
    "response_text": "SELECT Projects.project_name, COUNT(Risks.risk_id) \nFROM Projects \nINNER JOIN Risks ON Projects.project_id = Risks.project_id \nWHERE Risks.impact_score > 9 \nGROUP BY Projects.project_name;",
    "prompt_token_number": 499,
    "response_token_number": 46
},
{
    "id": 34494,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'patients': ['first_name', 'last_name', 'patient_id', 'phone_number', 'email', 'phone'], 'medical_history': ['patient_id', 'medical_condition', 'diagnosis'], 'prescription': ['patient_id', 'prescription_id', 'prescription_date', 'type', 'practitioner_id'], 'prescription_items': ['formula_id', 'prescription_id'], 'herbal_formulas': ['formula_id', 'formula_name', 'price', 'num_ingredients', 'ingredients', 'name']}. \n# the user question is: Retrieve the names and email addresses of patients who have been prescribed herbal formulas containing more than 2 ingredients and have also been diagnosed with a medical condition containing the word \"insomnia\":. \n#SQL query: SELECT DISTINCT p.first_name, p.last_name, p.email FROM patients p JOIN medical_history mh ON p.patient_id = mh.patient_id JOIN prescription pr ON p.patient_id = pr.patient_id JOIN prescription_items pi ON pr.prescription_id = pi.prescription_id JOIN herbal_formulas hf ON pi.formula_id = hf.formula_id WHERE hf.num_ingredients > 2 AND mh.medical_condition LIKE '%insomnia%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Retrieve the risks with an assessment score greater than 7 and retrieve the associated project name and the assigned employee's name.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the risks with an assessment score greater than 7 and retrieve the associated project name and the assigned employee's name.\"",
    "output": "SELECT Risks.risk_name, Projects.project_name, Employees.employee_name FROM Risks INNER JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id INNER JOIN Projects ON Risks.project_id = Projects.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id WHERE RiskAssessment.assessment_score > 7;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ],
        "RiskAssessment": [
            "assessment_id",
            "risk_id",
            "assessment_date",
            "assessment_score",
            "comments"
        ],
        "Employees": [
            "employee_id",
            "department_id",
            "first_name",
            "last_name",
            "email",
            "phone_number",
            "employee_name"
        ]
    },
    "response_text": "SELECT R.risk_name, P.project_name, E.first_name, E.last_name \nFROM Risks R \nJOIN RiskAssessment RA ON R.risk_id = RA.risk_id \nJOIN Projects P ON R.project_id = P.project_id \nJOIN Employees E ON P.assigned_to = E.employee_id \nWHERE RA.assessment_score > 7;",
    "prompt_token_number": 489,
    "response_token_number": 73
},
{
    "id": 34495,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Protein': ['gene_id', 'molecular_weight', 'protein_name', 'isoelectric_point', 'protein_id', 'length', 'protein_length'], 'Pathway_Gene': ['gene_id', 'pathway_id'], 'Pathway': ['pathway_id', 'pathway_name', 'description']}. \n# the user question is: Retrieve the names of all genes and their associated proteins that have a length between 1200 and 1300 amino acids and are part of the \"Ubiquinone biosynthesis\" pathway.. \n#SQL query: SELECT Gene.gene_name, Protein.protein_name FROM Gene JOIN Protein ON Gene.gene_id = Protein.gene_id JOIN Pathway_Gene ON Gene.gene_id = Pathway_Gene.gene_id JOIN Pathway ON Pathway_Gene.pathway_id = Pathway.pathway_id WHERE Protein.length BETWEEN 1200 AND 1300 AND Pathway.pathway_name = 'Ubiquinone biosynthesis';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Find the projects that have risks with an impact of 'High' or an impact score greater than 8, and retrieve the project name and the assigned employee's name.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Find the projects that have risks with an impact of 'High' or an impact score greater than 8, and retrieve the project name and the assigned employee's name.\"",
    "output": "SELECT Projects.project_name, Employees.employee_name FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id WHERE Risks.impact = 'High' OR Risks.impact_score > 8;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ],
        "Employees": [
            "employee_id",
            "department_id",
            "first_name",
            "last_name",
            "email",
            "phone_number",
            "employee_name"
        ]
    },
    "response_text": "SELECT Projects.project_name, Employees.first_name, Employees.last_name FROM Projects JOIN Risks ON Projects.project_id = Risks.project_id JOIN Employees ON Projects.assigned_to = Employees.employee_id WHERE Risks.impact = 'High' OR Risks.impact_score > 8;",
    "prompt_token_number": 502,
    "response_token_number": 56
},
{
    "id": 34496,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'game': ['game_mode', 'price', 'name', 'publisher', 'num_players', 'rating', 'platform', 'genre', 'release_year', 'developer', 'platform_count', 'tag', 'game_name', 'release_date', 'multiplayer', 'copies_sold', 'playtime', 'year']}. \n# the user question is: Get the number of players and the publisher for all games with a rating of 8 or above.. \n#SQL query: SELECT num_players, publisher FROM game WHERE rating >= 8;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Find the projects that have risks with a likelihood of 'High' and retrieve the project name and the total number of associated risks.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Find the projects that have risks with a likelihood of 'High' and retrieve the project name and the total number of associated risks.\"",
    "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS total_risks FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id WHERE Risks.likelihood = 'High' GROUP BY Projects.project_id;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ]
    },
    "response_text": "SELECT Projects.project_name, COUNT(Risks.risk_id) \nFROM Projects \nJOIN Risks ON Projects.project_id = Risks.project_id \nWHERE Risks.likelihood = 'High' \nGROUP BY Projects.project_name;",
    "prompt_token_number": 303,
    "response_token_number": 45
},
{
    "id": 34497,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'SmartContractInstance': ['BlockID', 'SmartContractID', 'Creator', 'SmartContractInstanceID', 'Timestamp', 'PublicAddress', 'IsSuccess', 'Function', 'Parameter', 'GasPrice', 'Caller', 'GasUsed', 'Sender', 'ExecutionTime', 'Successful', 'User', 'EndTimestamp', 'Status', 'IsDeployed'], 'SmartContract': ['SmartContractID', 'Code', 'Balance', 'Creator', 'Name']}. \n# the user question is: Find the smart contracts that have the highest number of invocations in the last 30 days:. \n#SQL query: SELECT SmartContract.SmartContractID, COUNT(SmartContractInstance.SmartContractInstanceID) AS NumInvocations FROM SmartContract JOIN SmartContractInstance ON SmartContract.SmartContractID = SmartContractInstance.SmartContractID AND SmartContractInstance.Timestamp >= datetime('now', '-30 days') GROUP BY SmartContract.SmartContractID ORDER BY NumInvocations DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Find the projects that have risks with a likelihood of 'Medium' and retrieve the project name and the number of associated risks.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Find the projects that have risks with a likelihood of 'Medium' and retrieve the project name and the number of associated risks.\"",
    "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS total_risks FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id WHERE Risks.likelihood = 'Medium' GROUP BY Projects.project_name;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ]
    },
    "response_text": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS NumberOfRisks\nFROM Projects \nJOIN Risks ON Projects.project_id = Risks.project_id \nWHERE Risks.likelihood = 'Medium'\nGROUP BY Projects.project_name",
    "prompt_token_number": 393,
    "response_token_number": 47
},
{
    "id": 34498,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Tasks': ['task_id', 'task_name', 'study_id', 'difficulty_level', 'duration', 'difficulty', 'task_category', 'category', 'Tower', 'Hanoi', 'Digit', 'Span', 'Working', 'Spatial', 'Symbol', 'Picture', 'Concepts', 'Coding', 'Regulation', 'Emotional'], 'Participant_Questionnaires': ['participant_id', 'questionnaire_id', 'participant_questionnaire_id', 'completion_date', 'response_text', 'score', 'task_id', 'completion_time'], 'Questionnaires': ['questionnaire_id', 'questionnaire_name', 'category', 'task_id', 'subtest_name', 'alerting', 'network_type', 'orienting']}. \n# the user question is: Retrieve the names of all tasks and their average scores, grouped by category:. \n#SQL query: SELECT Questionnaires.category, Tasks.task_name, AVG(Participant_Questionnaires.score) AS avg_score FROM Questionnaires JOIN Tasks ON Questionnaires.task_id = Tasks.task_id JOIN Participant_Questionnaires ON Questionnaires.questionnaire_id = Participant_Questionnaires.questionnaire_id GROUP BY Questionnaires.category, Tasks.task_name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Find the projects that have risks with a likelihood of 'High' and an impact score greater than 7, and retrieve the project name and the assigned employee's name.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Find the projects that have risks with a likelihood of 'High' and an impact score greater than 7, and retrieve the project name and the assigned employee's name.\"",
    "output": "SELECT Projects.project_name, Employees.employee_name FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id WHERE Risks.likelihood = 'High' AND Risks.impact_score > 7;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ],
        "Employees": [
            "employee_id",
            "department_id",
            "first_name",
            "last_name",
            "email",
            "phone_number",
            "employee_name"
        ]
    },
    "response_text": "SELECT Projects.project_name, Employees.first_name, Employees.last_name \nFROM Projects \nJOIN Risks ON Projects.project_id = Risks.project_id \nJOIN Employees ON Projects.assigned_to = Employees.employee_id \nWHERE Risks.likelihood = 'High' AND Risks.impact_score > 7;",
    "prompt_token_number": 471,
    "response_token_number": 60
},
{
    "id": 34499,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Bikes': ['bike_id', 'bike_model', 'bike_type', 'color', 'manufacturer', 'last_service_date', 'max_distance', 'min_distance', 'is_available', 'maintenance_date', 'mileage', 'max_mileage', 'last_maintenance_date', 'kilometers_since_maintenance', 'status', 'station_id', 'electric', 'type', 'id', 'current_station_id', 'manufacture_date'], 'Rides': ['end_time', 'bike_id', 'duration_minutes', 'user_id', 'ride_type', 'cost', 'start_location_id', 'ride_id', 'location_id', 'start_time', 'distance_miles', 'end_location_id', 'distance', 'rental_price', 'start_station_id', 'end_station_id', 'duration', 'fare', 'end_location', 'start_location', 'price', 'distance_km']}. \n# the user question is: Which bikes have not been rented at all in the past month and are currently available?. \n#SQL query: SELECT bike_id FROM Bikes WHERE status = 'available' AND bike_id NOT IN ( SELECT DISTINCT bike_id FROM Rides WHERE start_time >= date('now', '-1 month') );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Find the projects that have risks with an impact score greater than 8 and retrieve the project name, the assigned employee's name, and the highest assessment score among the associated risks.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Find the projects that have risks with an impact score greater than 8 and retrieve the project name, the assigned employee's name, and the highest assessment score among the associated risks.\"",
    "output": "SELECT Projects.project_name, Employees.employee_name, MAX(RiskAssessment.assessment_score) AS highest_assessment_score FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id INNER JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id WHERE Risks.impact_score > 8 GROUP BY Projects.project_id;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ],
        "RiskAssessment": [
            "assessment_id",
            "risk_id",
            "assessment_date",
            "assessment_score",
            "comments"
        ],
        "Employees": [
            "employee_id",
            "department_id",
            "first_name",
            "last_name",
            "email",
            "phone_number",
            "employee_name"
        ]
    },
    "response_text": "SELECT Projects.project_name, Employees.employee_name, MAX(RiskAssessment.assessment_score)\nFROM Projects\nJOIN Risks ON Projects.project_id = Risks.project_id\nJOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id\nJOIN Employees ON Projects.assigned_to = Employees.employee_id\nWHERE Risks.impact_score > 8\nGROUP BY Projects.project_id, Employees.employee_name;",
    "prompt_token_number": 508,
    "response_token_number": 84
},
{
    "id": 34500,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'tasks': ['created_at', 'project_id', 'task_id', 'user_id', 'due_date', 'completed', 'started_at', 'priority', 'completion_date', 'completed_date', 'start_date', 'created_date', 'creator_id', 'assignee_id', 'completed_at', 'name', 'tags', 'assigner_id', 'assigned_by_id', 'category'], 'users': ['user_id', 'name', 'email', 'last_login_attempt', 'total_tasks', 'completed_tasks', 'assignee_id', 'role', 'last_login', 'first_name', 'last_name', 'last_login_date', 'registration_date', 'password', 'job_title', 'hire_date']}. \n# the user question is: Retrieve the names and email addresses of all users who have not been assigned any tasks yet:. \n#SQL query: SELECT name, email FROM users WHERE user_id NOT IN ( SELECT DISTINCT user_id FROM tasks );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments']} and \n# the user question: Text Query: \"Find the projects that have risks with a likelihood of 'Low' and an impact of 'Moderate', and retrieve the project name, the total number of associated risks, and the average assessment score.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Find the projects that have risks with a likelihood of 'Low' and an impact of 'Moderate', and retrieve the project name, the total number of associated risks, and the average assessment score.\"",
    "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS total_risks, AVG(RiskAssessment.assessment_score) AS average_assessment_score FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id WHERE Risks.likelihood = 'Low' AND Risks.impact = 'Moderate' GROUP BY Projects.project_id;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ],
        "RiskAssessment": [
            "assessment_id",
            "risk_id",
            "assessment_date",
            "assessment_score",
            "comments"
        ]
    },
    "response_text": "SELECT P.project_name, COUNT(R.risk_id), AVG(RA.assessment_score)\nFROM Projects P\nJOIN Risks R ON P.project_id = R.project_id\nJOIN RiskAssessment RA ON RA.risk_id = R.risk_id\nWHERE R.likelihood = 'Low' AND R.impact = 'Moderate'\nGROUP BY P.project_name;",
    "prompt_token_number": 426,
    "response_token_number": 74
},
{
    "id": 34501,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Credit_Card_Dataset': ['Credit_Limit', 'Education', 'Marital_Status', 'Gender', 'Age', 'Education_Level', 'Card_Type', 'Balance']}. \n# the user question is: What is the average value of the 'Credit Limit' column in the 'Credit Card Dataset' for each 'Education' value?. \n#SQL query: SELECT Education, AVG(Credit_Limit) FROM Credit_Card_Dataset GROUP BY Education;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Retrieve the risks that are associated with projects that have a status of 'In Progress' or 'Delayed', and retrieve the project name, the risk name, and the assigned employee's name.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the risks that are associated with projects that have a status of 'In Progress' or 'Delayed', and retrieve the project name, the risk name, and the assigned employee's name.\"",
    "output": "SELECT Projects.project_name, Risks.risk_name, Employees.employee_name FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id WHERE Projects.status = 'In Progress' OR Projects.status = 'Delayed';",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ],
        "Employees": [
            "employee_id",
            "department_id",
            "first_name",
            "last_name",
            "email",
            "phone_number",
            "employee_name"
        ]
    },
    "response_text": "SELECT Projects.project_name, Risks.risk_name, Employees.employee_name \nFROM Risks \nINNER JOIN Projects ON Risks.project_id = Projects.project_id \nINNER JOIN Employees ON Risks.assigned_to = Employees.employee_id \nWHERE Projects.status IN ('In Progress', 'Delayed');",
    "prompt_token_number": 328,
    "response_token_number": 57
},
{
    "id": 34503,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Entry_Tags': ['entry_id', 'tag_id'], 'Tags': ['name', 'tag_id']}. \n# the user question is: Retrieve the most common tags used in entries, along with their occurrence count:. \n#SQL query: SELECT Tags.name, COUNT(Entry_Tags.tag_id) AS tag_count FROM Tags INNER JOIN Entry_Tags ON Tags.tag_id = Entry_Tags.tag_id GROUP BY Tags.name ORDER BY tag_count DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments']} and \n# the user question: Text Query: \"Find the projects that have risks with a likelihood of 'High' and an impact of 'Critical', and retrieve the project name, the total number of associated risks, and the highest assessment score among them.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Find the projects that have risks with a likelihood of 'High' and an impact of 'Critical', and retrieve the project name, the total number of associated risks, and the highest assessment score among them.\"",
    "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS total_risks, MAX(RiskAssessment.assessment_score) AS highest_assessment_score FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id WHERE Risks.likelihood = 'High' AND Risks.impact = 'Critical' GROUP BY Projects.project_name;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ],
        "RiskAssessment": [
            "assessment_id",
            "risk_id",
            "assessment_date",
            "assessment_score",
            "comments"
        ]
    },
    "response_text": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count, MAX(RiskAssessment.assessment_score) AS highest_assessment_score\nFROM Projects\nINNER JOIN Risks ON Projects.project_id = Risks.project_id \nINNER JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id\nWHERE Risks.likelihood = 'High' AND Risks.impact = 'Critical'\nGROUP BY Projects.project_name;",
    "prompt_token_number": 326,
    "response_token_number": 91
},
{
    "id": 34504,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Actors': ['name', 'actor_id', 'nationality', 'birth_date', 'country_id'], 'Film_Countries': ['film_id', 'country_id', 'actor_id']}. \n# the user question is: Get the names and birth dates of actors who have appeared in films released in at least three different countries:. \n#SQL query: SELECT Actors.name, Actors.birth_date FROM Actors WHERE actor_id IN ( SELECT actor_id FROM Film_Countries GROUP BY actor_id HAVING COUNT(DISTINCT country_id) >= 3 );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Find the projects that have risks with an impact of 'High' or a likelihood of 'Medium', and retrieve the project name and the assigned employee's name.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Find the projects that have risks with an impact of 'High' or a likelihood of 'Medium', and retrieve the project name and the assigned employee's name.\"",
    "output": "SELECT Projects.project_name, Employees.employee_name FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id WHERE Risks.impact = 'High' OR Risks.likelihood = 'Medium';",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ],
        "Employees": [
            "employee_id",
            "department_id",
            "first_name",
            "last_name",
            "email",
            "phone_number",
            "employee_name"
        ]
    },
    "response_text": "SELECT Projects.project_name, Employees.employee_name \nFROM Projects \nJOIN Risks ON Projects.project_id = Risks.project_id\nJOIN Employees ON Projects.assigned_to = Employees.employee_id\nWHERE Risks.impact = 'High' OR Risks.likelihood = 'Medium';",
    "prompt_token_number": 339,
    "response_token_number": 55
},
{
    "id": 34506,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Protein': ['gene_id', 'molecular_weight', 'protein_name', 'isoelectric_point', 'protein_id', 'length', 'protein_length'], 'Pathway_Gene': ['gene_id', 'pathway_id'], 'Pathway': ['pathway_id', 'pathway_name', 'description']}. \n# the user question is: Retrieve the names of all genes and their associated proteins that have a length greater than 200 amino acids and are part of the \"apoptosis pathway\".. \n#SQL query: SELECT Gene.gene_name, Protein.protein_name FROM Gene JOIN Protein ON Gene.gene_id = Protein.gene_id JOIN Pathway_Gene ON Gene.gene_id = Pathway_Gene.gene_id JOIN Pathway ON Pathway_Gene.pathway_id = Pathway.pathway_id WHERE Protein.length > 200 AND Pathway.pathway_name = 'apoptosis pathway';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve all projects along with the total count of risks associated with each project.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve all projects along with the total count of risks associated with each project.\"",
    "output": "SELECT Projects.project_id, Projects.project_name, COUNT(Risks.risk_id) AS total_risks FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id GROUP BY Projects.project_id, Projects.project_name;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ]
    },
    "response_text": "SELECT Projects.project_name, COUNT(Risks.risk_id) as risk_count\nFROM Projects\nLEFT JOIN Risks ON Projects.project_id = Risks.project_id\nGROUP BY Projects.project_name;",
    "prompt_token_number": 438,
    "response_token_number": 39
},
{
    "id": 34507,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Show': ['show_name', 'show_id', 'Night', 'Late', 'Talk', 'host_id', 'rating', 'end_time', 'start_time', 'language'], 'Advertisement': ['duration', 'ad_id'], 'Show_Advertisement': ['show_id', 'ad_id']}. \n# the user question is: \"Find the total duration of all advertisements aired during the show 'The Morning Show'.\". \n#SQL query: SELECT SUM(Advertisement.duration) AS total_duration FROM Advertisement INNER JOIN Show_Advertisement ON Advertisement.ad_id = Show_Advertisement.ad_id INNER JOIN Show ON Show_Advertisement.show_id = Show.show_id WHERE Show.show_name = 'The Morning Show';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Find the risks that have an impact of 'High' and retrieve the project name, the risk description, and the assigned employee's name.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Find the risks that have an impact of 'High' and retrieve the project name, the risk description, and the assigned employee's name.\"",
    "output": "SELECT Projects.project_name, Risks.risk_description, Employees.employee_name FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id WHERE Risks.impact = 'High';",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ],
        "Employees": [
            "employee_id",
            "department_id",
            "first_name",
            "last_name",
            "email",
            "phone_number",
            "employee_name"
        ]
    },
    "response_text": "SELECT Projects.project_name, Risks.risk_description, Employees.employee_name \nFROM Risks \nJOIN Projects ON Risks.project_id = Projects.project_id \nJOIN Employees ON Risks.assigned_to = Employees.employee_id \nWHERE Risks.impact = 'High';",
    "prompt_token_number": 364,
    "response_token_number": 53
},
{
    "id": 34508,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id'], 'Client_Diagnoses': ['client_id', 'diagnosis_id'], 'Diagnoses': ['id', 'name']}. \n# the user question is: Retrieve the names of all therapists who have conducted sessions with clients who have been diagnosed with both depression and anxiety:. \n#SQL query: SELECT DISTINCT t.name FROM Therapists t INNER JOIN Sessions s ON t.id = s.therapist_id INNER JOIN Session_Attendees sa ON s.id = sa.session_id INNER JOIN Clients c ON sa.client_id = c.id INNER JOIN Client_Diagnoses cd ON c.id = cd.client_id INNER JOIN Diagnoses d ON cd.diagnosis_id = d.id WHERE d.name IN ('Depression', 'Anxiety') GROUP BY t.id HAVING COUNT(DISTINCT CASE WHEN d.name = 'Depression' THEN c.id END) > 0 AND COUNT(DISTINCT CASE WHEN d.name = 'Anxiety' THEN c.id END) > 0\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve the projects that have risks with an impact score greater than 7 and sort them in descending order based on the number of associated risks.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Retrieve the projects that have risks with an impact score greater than 7 and sort them in descending order based on the number of associated risks.\"",
    "output": "SELECT Projects.project_id, Projects.project_name, COUNT(Risks.risk_id) AS total_risks FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id WHERE Risks.impact_score > 7 GROUP BY Projects.project_id, Projects.project_name ORDER BY total_risks DESC;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ]
    },
    "response_text": "SELECT p.project_name, COUNT(r.risk_id) AS risk_count\nFROM Projects p \nJOIN Risks r ON p.project_id = r.project_id\nWHERE r.impact_score > 7 \nGROUP BY p.project_name \nORDER BY risk_count DESC;",
    "prompt_token_number": 711,
    "response_token_number": 53
},
{
    "id": 34509,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Programs': ['program_id', 'program_name', 'program_description', 'start_date', 'end_date', 'status', 'Program'], 'Goals': ['goal_id', 'goal_name', 'goal_description', 'goal_due_date', 'user_id', 'program_id', 'goal_target', 'goal_type', 'goal_end_date', 'goal_target_date', 'goal_start_date', 'goal_status', 'goal_value'], 'User_Stats': ['goal_id', 'stat_value', 'user_id', 'start_value', 'start_date', 'stat_date']}. \n# the user question is: Find the name and email address of all users who have achieved their \"Water Intake\" goal for at least 5 days in the last 7 days in the \"Hydration Program\":. \n#SQL query: SELECT Users.first_name, Users.last_name, Users.email FROM Users JOIN User_Stats ON Users.user_id = User_Stats.user_id JOIN Goals ON User_Stats.goal_id = Goals.goal_id JOIN Programs ON Goals.program_id = Programs.program_id WHERE Programs.program_name = 'Hydration Program' AND Goals.goal_type = 'Water Intake' AND User_Stats.stat_date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Users.user_id HAVING COUNT(*) >= 5 AND AVG(User_Stats.stat_value) >= Goals.goal_value;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Find the projects that have risks with an impact score greater than 7, and retrieve the project name, the assigned employee's name, and the total budget allocated to those risks.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Find the projects that have risks with an impact score greater than 7, and retrieve the project name, the assigned employee's name, and the total budget allocated to those risks.\"",
    "output": "SELECT Projects.project_name, Employees.employee_name, SUM(Risks.budget_allocation) AS total_budget FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id WHERE Risks.impact_score > 7 GROUP BY Projects.project_name;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ],
        "Employees": [
            "employee_id",
            "department_id",
            "first_name",
            "last_name",
            "email",
            "phone_number",
            "employee_name"
        ]
    },
    "response_text": "SELECT Projects.project_name, Employees.first_name, Employees.last_name, SUM(Risks.budget_allocation) AS Total_Risk_Budget\nFROM Projects\nJOIN Risks ON Projects.project_id = Risks.project_id\nJOIN Employees ON Projects.assigned_to = Employees.employee_id\nWHERE Risks.impact_score > 7\nGROUP BY Projects.project_id, Employees.employee_id;",
    "prompt_token_number": 557,
    "response_token_number": 75
},
{
    "id": 34510,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'News_Article': ['category_id', 'content', 'created_at', 'title', 'user_id', 'id', 'article_id', 'date', 'published_date', 'word_count', 'updated_date', 'author_id', 'publish_date'], 'User': ['id', 'name', 'email', 'janesmith', 'user_id', 'category_id', 'city_id', 'country_name', 'country'], 'Article_Read': ['article_id', 'user_id', 'id', 'read_date', 'category_id'], 'News_Author': ['id', 'name', 'published_articles_count', 'latest_published_date', 'category_count', 'author_id']}. \n# the user question is: Retrieve the names of users who have read articles by all authors who have published in the last 6 months.. \n#SQL query: SELECT User.name FROM User WHERE NOT EXISTS ( SELECT News_Author.id FROM News_Author WHERE News_Author.published_articles_count > 0 AND News_Author.latest_published_date >= DATE('now', '-6 months') AND NOT EXISTS ( SELECT News_Article.id FROM News_Article JOIN Article_Read ON News_Article.id = Article_Read.article_id WHERE News_Article.author_id = News_Author.id AND Article_Read.user_id = User.id ) );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments']} and \n# the user question: Text Query: \"Find the projects that have risks with a likelihood of 'Low' and an impact score between 4 and 6, and retrieve the project name, the number of associated risks, and the average assessment score.\",\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Text Query: \"Find the projects that have risks with a likelihood of 'Low' and an impact score between 4 and 6, and retrieve the project name, the number of associated risks, and the average assessment score.\"",
    "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS total_risks, AVG(RiskAssessment.assessment_score) AS average_assessment_score FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id WHERE Risks.likelihood = 'Low' AND Risks.impact_score BETWEEN 4 AND 6 GROUP BY Projects.project_name;",
    "schema": "risk_management",
    "processed_schema_content": {
        "Projects": [
            "project_id",
            "project_name",
            "start_date",
            "end_date",
            "assigned_to",
            "status",
            "department_id",
            "budget"
        ],
        "Risks": [
            "risk_id",
            "project_id",
            "risk_name",
            "description",
            "likelihood",
            "impact",
            "status",
            "impact_score",
            "assigned_to",
            "risk_description",
            "budget_allocation"
        ],
        "RiskAssessment": [
            "assessment_id",
            "risk_id",
            "assessment_date",
            "assessment_score",
            "comments"
        ]
    },
    "response_text": "SELECT Projects.project_name, COUNT(Risks.risk_id) as number_of_risks, AVG(RiskAssessment.assessment_score) as average_assessment_score\nFROM Projects\nINNER JOIN Risks ON Projects.project_id = Risks.project_id\nINNER JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id\nWHERE Risks.likelihood = 'Low' AND Risks.impact_score BETWEEN 4 AND 6\nGROUP BY Projects.project_name;",
    "prompt_token_number": 503,
    "response_token_number": 97
},
{
    "id": 34514,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Actor': ['actor_id', 'actor_name'], 'Character': ['character_name', 'character_id', 'gender', 'actor_name', 'military_rank_id', 'is_main_character', 'character_kills', 'film_id', 'character_death_date', 'character_birth_date', 'character_nationality', 'character_gender', 'character_death'], 'Film_Character': ['character_id', 'film_id'], 'Film_War': ['war_id', 'film_id', 'battle_id']}. \n# the user question is: Find the actors who played the same character in multiple war films, along with the number of times they played that character:. \n#SQL query: SELECT Actor.actor_name, Character.character_name, COUNT(*) AS num_films FROM Actor INNER JOIN Character ON Actor.actor_name = Character.actor_name INNER JOIN Film_Character ON Character.character_id = Film_Character.character_id INNER JOIN Film_War ON Film_Character.film_id = Film_War.film_id GROUP BY Actor.actor_name, Character.character_name HAVING COUNT(*) > 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the number of time entries made by each employee for the month of February 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the number of time entries made by each employee for the month of February 2022.",
    "output": "SELECT e.Employee_Name, COUNT(t.Time_Entry_ID) FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN '2022-02-01' AND '2022-02-28' GROUP BY e.Employee_ID;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_ID, Employee.Employee_Name, COUNT(*) AS num_entries \nFROM Employee \nINNER JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID\nWHERE MONTH(Time_Entry.Time_Entry_Date) = 2 AND YEAR(Time_Entry.Time_Entry_Date) = 2022 \nGROUP BY Employee.Employee_ID, Employee.Employee_Name;",
    "prompt_token_number": 437,
    "response_token_number": 66
},
{
    "id": 34515,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Illustrations': ['user_id', 'illustration_id', 'upload_date', 'title', 'price', 'category_id', 'discount', 'creation_date', 'artist_id', 'description'], 'Users': ['username', 'user_id', 'address_id', 'work_address_id', 'last_active_date', 'home_address_id', 'last_activity_date', 'registration_date', 'email', 'total_purchase_amount', 'user_type_id', 'country', 'name'], 'Purchase': ['user_id', 'purchase_price', 'purchase_date', 'illustration_id', 'purchase_id', 'order_id', 'shipping_address_id', 'total_amount', 'COUNT###', 'price', 'quantity', 'category_id', 'amount', 'date'], 'Illustration_ratings': ['illustration_id', 'rating_value', 'user_id', 'rating', 'purchase_id', 'rating_id', 'category_id']}. \n# the user question is: Get the details of all illustrations that have been purchased at least once and have not yet been rated:. \n#SQL query: SELECT Illustrations.title, Users.username FROM Illustrations INNER JOIN Purchase ON Illustrations.illustration_id = Purchase.illustration_id INNER JOIN Users ON Illustrations.user_id = Users.user_id LEFT JOIN Illustration_ratings ON Illustrations.illustration_id = Illustration_ratings.illustration_id WHERE Illustration_ratings.rating IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration']} and \n# the user question: List the names of all employees who have taken a leave of absence in the month of May 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all employees who have taken a leave of absence in the month of May 2022.",
    "output": "SELECT e.Employee_Name, l.Leave_Type FROM Employee e INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN '2022-05-01' AND '2022-05-31';",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name FROM Employee INNER JOIN Leave ON Employee.Employee_ID = Leave.Employee_ID WHERE Leave.Leave_Start_Date >= '2022-05-01' AND Leave.Leave_End_Date <= '2022-05-31';",
    "prompt_token_number": 504,
    "response_token_number": 47
},
{
    "id": 34516,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'player_game_performance': ['score', 'player_name', 'game_date', 'assists', 'blocks']}. \n# the user question is: Find the name of the player who has the highest average score across all games.. \n#SQL query: SELECT player_name FROM player_game_performance GROUP BY player_name ORDER BY AVG(score) DESC LIMIT 1\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date']} and \n# the user question: Find the total revenue generated from each customer for the month of March 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the total revenue generated from each customer for the month of March 2022.",
    "output": "SELECT c.Customer_Name, SUM(oi.Quantity * oi.Price) as Total_Revenue FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID AND o.Order_Date BETWEEN '2022-03-01' AND '2022-03-31' INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID GROUP BY c.Customer_ID;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ]
    },
    "response_text": "SELECT Customer.Customer_Name, SUM(Order.Order_Total_Amount) AS Total_Revenue\nFROM Customer\nJOIN Order ON Customer.Customer_ID = Order.Customer_ID\nWHERE MONTH(Order.Order_Date) = 3 AND YEAR(Order.Order_Date) = 2022\nGROUP BY Customer.Customer_Name",
    "prompt_token_number": 294,
    "response_token_number": 56
},
{
    "id": 34517,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Characters': ['CharacterID', 'CharacterName', 'CharacterGender'], 'IssueCharacters': ['IssueCharacterID', 'IssueID', 'CharacterID']}. \n# the user question is: Find all characters that have appeared in at least 5 issues:. \n#SQL query: SELECT Characters.CharacterName, COUNT(IssueCharacters.IssueID) AS AppearanceCount FROM Characters JOIN IssueCharacters ON Characters.CharacterID = IssueCharacters.CharacterID GROUP BY Characters.CharacterID HAVING COUNT(IssueCharacters.IssueID) >= 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: List the names of all employees who have worked on a project that started in February 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all employees who have worked on a project that started in February 2022.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Start_Date >= '2022-02-01' AND p.Project_Start_Date < '2022-03-01';",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name \nFROM Employee \nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nJOIN Project ON Task.Project_ID = Project.Project_ID \nWHERE MONTH(Project.Project_Start_Date) = 2 AND YEAR(Project.Project_Start_Date) = 2022;",
    "prompt_token_number": 446,
    "response_token_number": 67
},
{
    "id": 34518,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Book_Reviews': ['rating', 'book_id', 'customer_id', 'review_id', 'review_date', 'author_id'], 'Customers': ['customer_id', 'email', 'first_name', 'last_name', 'country_id', 'address', 'city', 'country', 'state', 'loyalty_level', 'York', 'customer_name', 'customer_city', 'phone', 'subscribed_to_newsletter', 'has_ordered_online']}. \n# the user question is: Retrieve the names and email addresses of customers who have not reviewed any books.. \n#SQL query: SELECT first_name, last_name, email FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Book_Reviews GROUP BY customer_id );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: List the names of employees who have worked on a project that ended in the year 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of employees who have worked on a project that ended in the year 2022.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_End_Date >= '2022-01-01' AND p.Project_End_Date < '2023-01-01';",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee_Name FROM Employee WHERE Employee_ID IN ( SELECT Employee_ID FROM Time_Entry WHERE Task_ID IN ( SELECT Task_ID FROM Task WHERE Project_ID IN ( SELECT Project_ID FROM Project WHERE YEAR(Project_End_Date) = 2022)));",
    "prompt_token_number": 488,
    "response_token_number": 47
},
{
    "id": 34520,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'password_hash', 'is_admin', 'name', 'last_login_at', 'last_login', 'created_at', 'verified', 'activated'], 'Billing_Records': ['billing_record_id', 'user_id', 'amount', 'description', 'created_at', 'payment_status', 'total_amount'], 'Support_Tickets': ['support_ticket_id', 'user_id', 'subject', 'message', 'status', 'created_at', 'updated_at', 'priority', 'ticket_id', 'is_resolved', 'closed_at', 'is_viewed', 'category', 'resolved_at']}. \n# the user question is: Retrieve the names and email addresses of all users who have created a billing record with a total amount greater than $1000 and have a support ticket with a priority of \"urgent\", sorted by the date of the last billing record created:. \n#SQL query: SELECT Users.name, Users.email, MAX(Billing_Records.created_at) AS last_billing_record_created_at FROM Users INNER JOIN Support_Tickets ON Users.user_id = Support_Tickets.user_id INNER JOIN Billing_Records ON Users.user_id = Billing_Records.user_id WHERE Billing_Records.total_amount > 1000 AND Support_Tickets.priority = 'urgent' GROUP BY Users.user_id ORDER BY last_billing_record_created_at DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration']} and \n# the user question: List the names of employees who have taken a leave of absence for more than 5 days.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of employees who have taken a leave of absence for more than 5 days.",
    "output": "SELECT e.Employee_Name, l.Leave_Type, l.Leave_Start_Date, l.Leave_End_Date FROM Employee e INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND (julianday(l.Leave_End_Date) - julianday(l.Leave_Start_Date)) + 1 > 5;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name FROM Employee INNER JOIN Leave ON Employee.Employee_ID = Leave.Employee_ID WHERE Leave.Leave_Duration > 5;",
    "prompt_token_number": 494,
    "response_token_number": 27
},
{
    "id": 34521,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'RecipeIngredients': ['ingredient_id', 'recipe_id', 'unit', 'quantity', 'measurement_id'], 'Ingredients': ['ingredient_id', 'name', 'category', 'Pasta', 'category_id', 'gluten_free', 'vegan_friendly']}. \n# the user question is: Text Query: \"Retrieve the names of the ingredients that are not used in any recipe.\". \n#SQL query: SELECT i.name FROM Ingredients i WHERE NOT EXISTS (SELECT 1 FROM RecipeIngredients ri WHERE ri.ingredient_id = i.ingredient_id);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the average number of hours worked per employee per day for the month of June 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the average number of hours worked per employee per day for the month of June 2022.",
    "output": "SELECT e.Employee_Name, AVG(t.Time_Entry_Hours) as Avg_Hours_Per_Day FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN '2022-06-01' AND '2022-06-30' GROUP BY e.Employee_ID;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee_ID, AVG(Time_Entry_Hours) as Average_Hours_Worked_Per_Day\nFROM Time_Entry\nWHERE Time_Entry_Date BETWEEN '2022-06-01' AND '2022-06-30'\nGROUP BY Employee_ID;",
    "prompt_token_number": 336,
    "response_token_number": 51
},
{
    "id": 34522,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Treatment': ['doctor_id', 'injury_id', 'exercise_id', 'treatment_type', 'treatment_id', 'patient_id', 'medication_id', 'dosage', 'treatment_date', 'duration', 'diagnosis_id', 'illness_id', 'treatment_name', 'recovery_time', 'surgery_type', 'successful', 'end_date', 'start_date', 'cost', 'recovery_date'], 'Doctor': ['doctor_id', 'last_name', 'Lee', 'Brown', 'Wilson', 'Davis', 'Kim', 'Williams', 'Patel', 'Chen', 'Rodriguez', 'first_name', 'doctor_name', 'avg_treatments', 'Doctor_ID', 'DoctorName', 'DoctorID', 'Email'], 'Diagnosis': ['diagnosis_type', 'doctor_id', 'diagnosis_id', 'diagnosis_date', 'illness_id', 'injury_id', 'patient_id', 'injury_body_part', 'diagnosis_name']}. \n# the user question is: Find the doctors who have the highest number of patients who have undergone physical therapy in the past year:. \n#SQL query: SELECT Doctor.doctor_id, Doctor.first_name, Doctor.last_name, COUNT(DISTINCT Diagnosis.patient_id) AS num_patients FROM Doctor JOIN Diagnosis ON Diagnosis.doctor_id = Doctor.doctor_id JOIN Treatment ON Treatment.diagnosis_id = Diagnosis.diagnosis_id AND Treatment.treatment_type = 'Physical Therapy' AND Treatment.treatment_date BETWEEN DATETIME('now', '-1 year') AND DATETIME('now') GROUP BY Doctor.doctor_id ORDER BY num_patients DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration']} and \n# the user question: Find the names of all employees who have not taken any leave of absence in the year 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have not taken any leave of absence in the year 2022.",
    "output": "SELECT e.Employee_Name FROM Employee e LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN '2022-01-01' AND '2022-12-31' WHERE l.Leave_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ]
    },
    "response_text": "SELECT Employee_Name FROM Employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM Leave WHERE Leave_Start_Date >= '2022-01-01' AND Leave_End_Date <= '2022-12-31');",
    "prompt_token_number": 555,
    "response_token_number": 42
},
{
    "id": 34523,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Product': ['SegmentID', 'ProductName', 'ProductID', 'CompanyID', 'UnitsInStock', 'UnitPrice', 'Category', 'Price', 'Cost', 'CategoryID', 'CurrentInventoryLevel', 'UnitCost', 'Description', 'Discontinued', 'CategoryName', 'SupplierID', 'CostPrice', 'ReorderPoint', 'DiscontinuedDate', 'SubcategoryID', 'SalesPrice', 'QuantityOnHand', 'PromotionID'], 'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID'], 'SalesOrderLineItem': ['ProductID', 'UnitPrice', 'Quantity', 'OrderID', 'OrderDate', 'Price', 'OrderLineID']}. \n# the user question is: Retrieve the list of products and the total quantity sold in the year 2023, sorted by quantity in descending order:. \n#SQL query: SELECT Product.ProductName, SUM(SalesOrderLineItem.Quantity) as TotalQuantitySold FROM Product JOIN SalesOrderLineItem ON Product.ProductID = SalesOrderLineItem.ProductID JOIN SalesOrder ON SalesOrderLineItem.OrderID = SalesOrder.OrderID WHERE SalesOrder.Year = 2023 GROUP BY Product.ProductID ORDER BY TotalQuantitySold DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: List the names of all projects and the total number of hours worked on each project by all employees.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all projects and the total number of hours worked on each project by all employees.",
    "output": "SELECT p.Project_Name, SUM(t.Time_Entry_Hours) FROM Project p LEFT JOIN Task tk ON p.Project_ID = tk.Project_ID LEFT JOIN Time_Entry t ON tk.Task_ID = t.Task_ID GROUP BY p.Project_ID;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Project.Project_Name, SUM(Time_Entry.Time_Worked) as TotalHoursWorked FROM Project JOIN Task ON Project.Project_ID = Task.Project_ID JOIN Time_Entry ON Task.Task_ID = Time_Entry.Task_ID GROUP BY Project.Project_ID;",
    "prompt_token_number": 566,
    "response_token_number": 47
},
{
    "id": 34524,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Actor': ['actor_id', 'name', 'actor_name'], 'Movie_Actor': ['movie_id', 'actor_id'], 'Rating': ['rating_id', 'movie_id', 'source', 'rating_value', 'rating']}. \n# the user question is: Retrieve the name of the actor, the title of the movie, and the rating value from Rotten Tomatoes for all movies where the actor's name contains the word \"Knightley\" and the rating value is greater than 9.. \n#SQL query: SELECT Actor.name, Movie.title, Rating.rating_value FROM Movie JOIN Movie_Actor ON Movie.movie_id = Movie_Actor.movie_id JOIN Actor ON Movie_Actor.actor_id = Actor.actor_id JOIN Rating ON Movie.movie_id = Rating.movie_id WHERE Actor.name LIKE '%Knightley%' AND Rating.source = 'Rotten Tomatoes' AND Rating.rating_value > 9;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status']} and \n# the user question: Find the total number of orders placed by each customer in the year 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the total number of orders placed by each customer in the year 2022.",
    "output": "SELECT c.Customer_Name, COUNT(o.Order_ID) FROM Customer c LEFT JOIN Order o ON c.Customer_ID = o.Customer_ID AND o.Order_Date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY c.Customer_ID;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ]
    },
    "response_text": "SELECT Customer.Customer_Name, COUNT(Order.Order_ID) AS Total_Orders\nFROM Customer JOIN Order ON Customer.Customer_ID = Order.Customer_ID\nWHERE YEAR(Order.Order_Date) = 2022 \nGROUP BY Customer.Customer_Name;",
    "prompt_token_number": 415,
    "response_token_number": 45
},
{
    "id": 34525,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'orders': ['order_date', 'order_cost', 'customer_id', 'order_id', 'employee_id', 'id', 'total_price', 'ship_date', 'shipping_time', 'order_time', 'total_amount', 'ship_country', 'order_status', 'delivery_status', 'shipped_date', 'quantity', 'date', 'product_id'], 'customers': ['customer_id', 'customer_email', 'customer_name', 'id', 'name', 'region', 'country', 'state', 'address', 'postal_code', 'email', 'city', 'phone', 'USA', 'phone_number', 'first_name', 'last_name']}. \n# the user question is: Find the top 10 customers who have made the largest purchases in terms of total order value.. \n#SQL query: SELECT c.customer_id, SUM(o.total_price) AS total_order_value FROM customers AS c JOIN orders AS o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY total_order_value DESC LIMIT 10;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: List the names of all employees who have worked on a project that lasted more than 6 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all employees who have worked on a project that lasted more than 6 months.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND (julianday(p.Project_End_Date) - julianday(p.Project_Start_Date)) + 1 > 180;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT E.Employee_Name FROM Employee AS E JOIN Time_Entry AS TE ON E.Employee_ID = TE.Employee_ID JOIN Task AS T ON TE.Task_ID = T.Task_ID JOIN Project AS P ON T.Project_ID = P.Project_ID WHERE (P.Project_End_Date - P.Project_Start_Date) > INTERVAL '6 MONTH';",
    "prompt_token_number": 550,
    "response_token_number": 64
},
{
    "id": 34526,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Performances': ['rating', 'comedian_id', 'show_id', 'performance_id', 'special_id', 'venue_id', 'production_id', 'performance_date'], 'Shows': ['year', 'show_id', 'title', 'description', 'location', 'venue_id', 'duration', 'network', 'release_date', 'Sticks', 'date_recorded', 'name', 'duration_minutes', 'recorded_year', 'date'], 'Specials': ['title', 'special_id', 'description', 'year', 'duration', 'release_year', 'show_id', 'production_id', 'release_date'], 'Venues': ['capacity', 'venue_id', 'country', 'name', 'is_live', 'city', 'state', 'type', 'seating_capacity', 'city_id', 'zip_code', 'stage_width', 'minimum_age', 'admission_fee'], 'Show_Ratings': ['rating', 'show_id', 'rating_id', 'category_id', 'comedian_id'], 'Ratings': ['rating', 'rating_id', 'show_id', 'category'], 'Categories': ['category_id', 'name', 'CategoryName', 'CategoryID']}. \n# the user question is: Retrieve the titles and release years of all specials that have been performed in shows that were recorded in theaters and have a rating of at least 8 in the \"writing\" category, but were not released in the same year as the show's recording.. \n#SQL query: SELECT DISTINCT s.title, s.release_year FROM Specials s JOIN Performances p ON p.special_id = s.special_id JOIN Venues v ON v.venue_id = p.venue_id JOIN Shows sh ON sh.show_id = p.show_id JOIN Show_Ratings sr ON sr.show_id = sh.show_id JOIN Ratings r ON r.rating_id = sr.rating_id JOIN Categories c ON c.category_id = sr.category_id WHERE v.type = 'theater' AND c.name = 'writing' AND r.rating >= 8 AND s.release_year <> strftime('%Y', sh.date_recorded);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a task that is related to product development.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a task that is related to product development.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID AND tk.Task_Name LIKE '%Product Development%';",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID JOIN Task tk ON tk.Task_ID = t.Task_ID WHERE tk.Task_Name LIKE '%product development%';",
    "prompt_token_number": 708,
    "response_token_number": 41
},
{
    "id": 34527,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {}. \n# the user question is: \"Get the initiatives and their respective project budgets that are in progress and have a budget higher than $50,000.\". \n#SQL query: SELECT `CSR Initiatives`.initiative_name, `CSR Projects`.budget FROM `CSR Initiatives` JOIN `CSR Projects` ON `CSR Initiatives`.initiative_id = `CSR Projects`.initiative_id WHERE `CSR Projects`.project_status = 'In Progress' AND `CSR Projects`.budget > 50000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration']} and \n# the user question: Find the names of all employees who have taken a sick leave for more than 3 days.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have taken a sick leave for more than 3 days.",
    "output": "SELECT e.Employee_Name FROM Employee e INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Type = 'Sick' AND (julianday(l.Leave_End_Date) - julianday(l.Leave_Start_Date)) + 1 > 3;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ]
    },
    "response_text": "SELECT `Employee`.`Employee_Name` FROM `Employee` JOIN `Leave` ON `Employee`.`Employee_ID` = `Leave`.`Employee_ID` WHERE `Leave`.`Leave_Type` = 'Sick' AND `Leave`.`Leave_Duration` > 3;",
    "prompt_token_number": 317,
    "response_token_number": 53
},
{
    "id": 34528,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Patient': ['patient_id', 'last_name', 'first_name', 'date_of_birth'], 'Insurance': ['insurance_provider', 'patient_id', 'policy_number', 'insurance_id', 'insurance_provider_id', 'coverage_type_id'], 'Appointment': ['chiropractor_id', 'patient_id', 'appointment_date_time', 'appointment_id', 'insurance_id'], 'Chiropractor': ['first_name', 'last_name', 'chiropractor_id'], 'Prescriptions': ['prescription_name', 'appointment_id', 'prescription_category', 'patient_id', 'medication_id']}. \n# the user question is: Find the names of all chiropractors who have had appointments with patients who have an insurance policy number starting with '88' and have also prescribed a painkiller:. \n#SQL query: SELECT DISTINCT c.first_name, c.last_name FROM Chiropractor c INNER JOIN Appointment a ON c.chiropractor_id = a.chiropractor_id INNER JOIN Patient p ON a.patient_id = p.patient_id INNER JOIN Insurance i ON p.patient_id = i.patient_id INNER JOIN Prescriptions pr ON a.appointment_id = pr.appointment_id WHERE i.policy_number LIKE '88%' AND pr.prescription_category = 'Painkillers';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all products along with their price and the total number of units sold in the year 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all products along with their price and the total number of units sold in the year 2022.",
    "output": "SELECT p.Product_Name, p.Product_Price, SUM(oi.Quantity) as Total_Units_Sold FROM Product p LEFT JOIN Order_Item oi ON p.Product_ID = oi.Product_ID LEFT JOIN Order o ON oi.Order_ID = o.Order_ID AND o.Order_Date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY p.Product_ID;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT p.Product_Name, p.Product_Price, SUM(oi.Quantity) \nFROM Product p INNER JOIN Order_Item oi ON p.Product_ID = oi.Product_ID \nINNER JOIN Order o ON oi.Order_ID = o.Order_ID \nWHERE YEAR(o.Order_Date) = 2022 \nGROUP BY p.Product_Name, p.Product_Price;",
    "prompt_token_number": 521,
    "response_token_number": 66
},
{
    "id": 34529,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'exoplanets': ['radius', 'name', 'discovery_date', 'orbital_period', 'mass', 'discovery_method_id', 'eccentricity', 'surface_gravity', 'surface_temperature', 'density', 'minimum_mass', 'equilibrium_temperature', 'distance_from_star', 'inclination', 'temperature', 'orbital_eccentricity', 'semi_major_axis', 'discovery_year', 'exoplanet_name', 'discovery_method', 'average_temperature', 'year_discovered'], 'discovery_methods': ['spacecraft', 'Kepler', 'id', 'name', 'velocity', 'Radial', 'Transit', 'Microlensing', 'Direct', 'Imaging', 'Velocity', 'Gravitational', 'microlensing', 'imaging', 'Hubble', 'Telescope', 'Sky', 'Sloan', 'Survey', 'Digital']}. \n# the user question is: Retrieve the name and discovery date of all exoplanets that have an equilibrium temperature between 0 and 50 degrees Celsius and were discovered by the transit method.. \n#SQL query: SELECT name, discovery_date FROM exoplanets WHERE equilibrium_temperature BETWEEN 0 AND 50 AND discovery_method_id = (SELECT id FROM discovery_methods WHERE name = 'Transit');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked for more than 8 hours on a task related to the Sales Campaign project.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked for more than 8 hours on a task related to the Sales Campaign project.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Hours > 8 INNER JOIN Task tk ON t.Task_ID = tk.Task_ID AND tk.Task_Name LIKE '%Sales Campaign%' INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name = 'Sales Campaign';",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee_Name FROM Employee WHERE Employee_ID IN (SELECT Employee_ID FROM Time_Entry WHERE Task_ID IN (SELECT Task_ID FROM Task WHERE Project_ID = (SELECT Project_ID FROM Project WHERE Project_Name = 'Sales Campaign') AND Time_Entry_Hours > 8));",
    "prompt_token_number": 611,
    "response_token_number": 53
},
{
    "id": 34531,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Books': ['book_id', 'title', 'publisher_id', 'publication_date', 'author_id', 'price', 'publication_year', 'publisher', 'stock', 'genre', 'series', 'year_published', 'release_date', 'word_count', 'avg_rating', 'A001', 'genre_id', 'stock_count', 'category_id', 'book_title', 'rating', 'available_for_purchase', 'BookID', 'BookTitle', 'PublicationYear', 'PublisherID', 'Price'], 'Book_Reviews': ['rating', 'book_id', 'customer_id', 'review_id', 'review_date', 'author_id'], 'Authors': ['first_name', 'author_id', 'last_name', 'nationality', 'author_name', 'author_city', 'AuthorID', 'AuthorName']}. \n# the user question is: Retrieve the titles and authors of books that have a total of at least 100 reviews with a rating greater than or equal to 4.. \n#SQL query: SELECT b.title, CONCAT(a.first_name, ' ', a.last_name) AS author FROM Books b JOIN Book_Reviews br ON b.book_id = br.book_id JOIN Authors a ON b.author_id = a.author_id GROUP BY b.book_id HAVING COUNT(*) >= 100 AND AVG(br.rating) >= 4;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on more than one project in the year 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on more than one project in the year 2022.",
    "output": "SELECT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Start_Date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY e.Employee_ID HAVING COUNT(DISTINCT p.Project_ID) > 1;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee_Name \nFROM Employee \nWHERE Employee_ID IN (\n   SELECT te.Employee_ID \n   FROM Time_Entry te \n   JOIN Task t ON te.Task_ID = t.Task_ID \n   JOIN Project p ON t.Project_ID = p.Project_ID \n   WHERE YEAR(p.Project_Start_Date) = 2022 \n   GROUP BY te.Employee_ID \n   HAVING COUNT(DISTINCT p.Project_ID) > 1);",
    "prompt_token_number": 613,
    "response_token_number": 85
},
{
    "id": 34532,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'loan': ['return_date', 'loan_date', 'artwork_id', 'lender_id', 'location_id', 'start_date', 'artwork_location_id'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']}. \n# the user question is: Find the titles and mediums of all artwork in the \"The Metropolitan Museum of Art\" that were created by \"Leonardo da Vinci\" and are not currently on loan.. \n#SQL query: SELECT a.title, a.medium FROM artwork AS a INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS l ON al.location_id = l.location_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id WHERE ar.last_name = 'da Vinci' AND l.name = 'The Metropolitan Museum of Art' AND al.end_date IS NULL AND a.artwork_id NOT IN (SELECT artwork_id FROM loan WHERE return_date IS NULL);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that was completed in the year 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that was completed in the year 2022.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_End_Date BETWEEN '2022-01-01' AND '2022-12-31';",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT E.Employee_Name FROM Employee E INNER JOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID INNER JOIN Task T ON TE.Task_ID = T.Task_ID INNER JOIN Project P ON T.Project_ID = P.Project_ID WHERE YEAR(P.Project_Actual_End_Date) = 2022 GROUP BY E.Employee_Name;",
    "prompt_token_number": 781,
    "response_token_number": 63
},
{
    "id": 34534,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Transaction': ['BlockID', 'Recipient', 'Sender', 'PublicAddress', 'TransactionID', 'Amount', 'Fee', 'Timestamp', 'GasFee', 'GasUsed', 'GasLimit', 'GasPrice', 'EtherAmount', 'IsSuccess', 'Value', 'Currency', 'NodeID', 'SmartContractInstanceID', 'SenderWalletID', 'RecipientWalletID', 'ReceiverWalletID', 'ConfirmationTime', 'TokenID', 'FromWalletID', 'ToWalletID', 'Status', 'Type', 'ReceiverID', 'SenderID'], 'User': ['UserID', 'Name', 'PublicAddress', 'Recipient', 'Sender', 'Country', 'Balance', 'Continent', 'Username'], 'Wallet': ['BlockID', 'Balance', 'UserID', 'WalletID', 'PublicAddress', 'Currency']}. \n# the user question is: Find the users who have the highest total transaction fees in Ether:. \n#SQL query: SELECT User.Username, SUM(Transaction.GasPrice * Transaction.GasUsed) AS TotalTransactionFees FROM User JOIN Wallet ON User.UserID = Wallet.UserID JOIN Transaction ON Wallet.PublicAddress = Transaction.Sender GROUP BY User.UserID ORDER BY TotalTransactionFees DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project for more than 200 hours.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project for more than 200 hours.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID GROUP BY e.Employee_ID, p.Project_ID HAVING SUM(t.Time_Entry_Hours) > 200;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name \nFROM Employee \nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nGROUP BY Employee.Employee_Name \nHAVING SUM(Time_Entry.Time_Worked) > 200",
    "prompt_token_number": 589,
    "response_token_number": 39
},
{
    "id": 34535,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Diagnosis': ['suspect_id', 'patient_id', 'disorder', 'disorder_subtype', 'recommendation', 'disorder_id', 'criminal_id']}. \n# the user question is: Get the total number of patients who have been diagnosed with each mental disorder.. \n#SQL query: SELECT d.disorder, COUNT(DISTINCT d.patient_id) as patient_count FROM Diagnosis d GROUP BY d.disorder;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status']} and \n# the user question: List the names of all customers who have not placed any orders in the year 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have not placed any orders in the year 2022.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c LEFT JOIN Order o ON c.Customer_ID = o.Customer_ID AND o.Order_Date BETWEEN '2022-01-01' AND '2022-12-31' WHERE o.Order_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ]
    },
    "response_text": "SELECT c.Customer_Name FROM Customer c WHERE c.Customer_ID NOT IN (SELECT o.Customer_ID FROM Order o WHERE YEAR(o.Order_Date) = 2022);",
    "prompt_token_number": 283,
    "response_token_number": 32
},
{
    "id": 34537,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']}. \n# the user question is: Find the names and birthdates of all artists who created artwork that is currently in the \"Museo del Prado\".. \n#SQL query: SELECT DISTINCT ar.first_name, ar.last_name, ar.date_of_birth FROM artist AS ar INNER JOIN artwork AS a ON ar.artist_id = a.artist_id INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS l ON al.location_id = l.location_id WHERE l.name = 'Museo del Prado' AND al.end_date IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project for more than 3 months and have not taken any leave of absence during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project for more than 3 months and have not taken any leave of absence during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND (julianday(p.Project_End_Date) - julianday(p.Project_Start_Date)) + 1 > 90 LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT e.Employee_Name \nFROM Employee AS e \nJOIN Time_Entry AS te ON e.Employee_ID = te.Employee_ID \nJOIN Task AS t ON te.Task_ID = t.Task_ID \nJOIN Project AS p ON t.Project_ID = p.Project_ID \nWHERE (DATEDIFF(MONTH, p.Project_Start_Date, IFNULL(p.Project_Actual_End_Date, NOW())) > 3) \nAND NOT EXISTS \n    (SELECT 1 \n     FROM Leave AS l \n     WHERE l.Employee_ID = e.Employee_ID \n     AND ((l.Leave_Start_Date BETWEEN p.Project_Start_Date AND IFNULL(p.Project_Actual_End_Date, NOW())) \n     OR (l.Leave_End_Date BETWEEN p.Project_Start_Date AND IFNULL(p.Project_Actual_End_Date, NOW())) ))\n;",
    "prompt_token_number": 758,
    "response_token_number": 159
},
{
    "id": 34538,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'PlantSpecies': ['id', 'name', 'genus_id', 'scientific_name'], 'PlantCommonName': ['name', 'species_id', 'id'], 'PlantSpeciesPest': ['plant_pest_id', 'plant_species_id'], 'PlantPest': ['id', 'name'], 'PlantGenus': ['id', 'family_id', 'name']}. \n# the user question is: Find all plant genera that have at least one plant species with a common name that includes the word \"herbs\" and at least one plant species with a pest called \"Thrips\":. \n#SQL query: SELECT PlantGenus.name AS genus FROM PlantGenus JOIN PlantSpecies ON PlantGenus.id = PlantSpecies.genus_id JOIN PlantCommonName ON PlantSpecies.id = PlantCommonName.species_id JOIN PlantSpeciesPest ON PlantSpecies.id = PlantSpeciesPest.plant_species_id JOIN PlantPest ON PlantSpeciesPest.plant_pest_id = PlantPest.id WHERE PlantCommonName.name LIKE '%herbs%' AND PlantPest.name = 'Thrips';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date']} and \n# the user question: List the names of all customers who have placed at least one order for a product that costs more than $200.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed at least one order for a product that costs more than $200.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID AND oi.Price > 200;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nWHERE Order_Item.Price > 200;",
    "prompt_token_number": 451,
    "response_token_number": 41
},
{
    "id": 34539,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'collection': ['name', 'acquisition_date', 'collection_id', 'collector_id', 'date_acquired'], 'artwork_collection': ['collection_id', 'artwork_id'], 'location': ['name', 'start_date', 'end_date', 'location_id', 'return_date', 'Gallery', 'Art', 'Uffizi', 'Gogh', 'Museum', 'Van', 'State', 'Hermitage', 'Paul', 'Getty', 'Fine', 'Houston', 'Arts', 'Boston', 'Institute', 'Chicago', 'Bilbao', 'Guggenheim', 'Solomon', 'Rijksmuseum', 'type', 'city', 'founded_date', 'country', 'continent'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender'], 'collector': ['first_name', 'collector_id', 'last_name', 'email', 'country', 'state', 'country_of_origin']}. \n# the user question is: Find the names and email addresses of all collectors who have artwork in the \"Guggenheim Museum\" that were created by \"Jackson Pollock\" and are currently on display.. \n#SQL query: SELECT DISTINCT c.first_name, c.last_name, c.email FROM collector AS c INNER JOIN collection AS co ON c.collector_id = co.collector_id INNER JOIN artwork_collection AS ac ON co.collection_id = ac.collection_id INNER JOIN artwork AS a ON ac.artwork_id = a.artwork_id INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN location AS l ON al.location_id = l.location_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id WHERE ar.last_name = 'Pollock' AND l.name = 'Guggenheim Museum' AND al.end_date IS NULL AND al.on_display = 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to marketing and has a project manager who is not the CEO.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to marketing and has a project manager who is not the CEO.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Manager_ID <> 1 AND p.Project_Name LIKE '%Marketing%' WHERE e.Employee_Position <> 'CEO';",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT e.Employee_Name FROM Employee AS e INNER JOIN Time_Entry AS te ON e.Employee_ID = te.Employee_ID INNER JOIN Task AS t ON te.Task_ID = t.Task_ID INNER JOIN Project AS p ON t.Project_ID = p.Project_ID WHERE p.Project_Name LIKE '%marketing%' AND p.Project_Manager_ID != (SELECT Employee_ID FROM Employee WHERE Employee_Title = 'CEO');",
    "prompt_token_number": 858,
    "response_token_number": 76
},
{
    "id": 34540,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Tickets': ['ticket_price', 'ticket_description', 'ticket_name', 'event_id', 'ticket_id', 'ticket_capacity', 'session_id', 'ticket_type', 'ticket_quantity', 'ticket_max_quantity', 'ticket_start_date', 'ticket_max_num', 'ticket_availability', 'ticket_total_quantity', 'max_attendees']}. \n# the user question is: Retrieve the name and number of available tickets for all tickets for the event with ID 6 that have an availability of at least 10.. \n#SQL query: SELECT ticket_name, ticket_availability FROM Tickets WHERE event_id = 6 AND ticket_availability >= 10;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project for more than 6 months and have taken a sick leave during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project for more than 6 months and have taken a sick leave during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND (julianday(p.Project_End_Date) - julianday(p.Project_Start_Date)) + 1 > 180 INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Type = 'Sick' AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT E.Employee_Name FROM Employee E \nJOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID \nJOIN Project P ON TE.Task_ID = P.Project_ID \nJOIN Leave L ON E.Employee_ID = L.Employee_ID \nWHERE DATEDIFF(MONTH, P.Project_Start_Date, IFNULL(P.Project_End_Date, P.Project_Actual_End_Date)) > 6 \nAND L.Leave_Type = 'Sick' \nAND (\n      (L.Leave_Start_Date BETWEEN P.Project_Start_Date AND IFNULL(P.Project_End_Date, P.Project_Actual_End_Date)) \n      OR (L.Leave_End_Date BETWEEN P.Project_Start_Date AND IFNULL(P.Project_End_Date, P.Project_Actual_End_Date))\n    )",
    "prompt_token_number": 512,
    "response_token_number": 148
},
{
    "id": 34541,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'users': ['user_id', 'name', 'email', 'last_login_attempt', 'total_tasks', 'completed_tasks', 'assignee_id', 'role', 'last_login', 'first_name', 'last_name', 'last_login_date', 'registration_date', 'password', 'job_title', 'hire_date'], 'orders': ['order_date', 'order_id', 'region', 'delivery_date', 'user_id', 'cart_id', 'shipped', 'timestamp', 'total_price', 'customer_id', 'price', 'quantity', 'total_amount']}. \n# the user question is: Retrieve the list of customers who have never made a purchase.. \n#SQL query: SELECT users.user_id, users.first_name, users.last_name FROM users WHERE users.user_id NOT IN ( SELECT DISTINCT orders.user_id FROM orders );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all products and the total amount of money spent on each product in the year 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all products and the total amount of money spent on each product in the year 2022.",
    "output": "SELECT p.Product_Name, SUM(oi.Quantity * oi.Price) as Total_Amount_Spent FROM Product p LEFT JOIN Order_Item oi ON p.Product_ID = oi.Product_ID LEFT JOIN Order o ON oi.Order_ID = o.Order_ID AND o.Order_Date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY p.Product_ID;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT Product.Product_Name, SUM(Order_Item.Price * Order_Item.Quantity) AS Total_Spent \nFROM Order_Item \nINNER JOIN Product ON Order_Item.Product_ID = Product.Product_ID \nINNER JOIN Order on Order_Item.Order_ID = Order.Order_ID \nWHERE YEAR(Order.Order_Date) = 2022 \nGROUP BY Product.Product_Name;",
    "prompt_token_number": 436,
    "response_token_number": 66
},
{
    "id": 34544,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'orders': ['customer_id', 'quantity', 'product_id', 'order_date', 'total_amount']}. \n# the user question is: Retrieve the total number of orders placed by each customer and sort them in descending order by the number of orders.. \n#SQL query: SELECT customer_id, COUNT(*) AS total_orders FROM orders GROUP BY customer_id ORDER BY total_orders DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status']} and \n# the user question: List the names of all customers and the number of orders placed by each customer in the year 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers and the number of orders placed by each customer in the year 2022.",
    "output": "SELECT c.Customer_Name, COUNT(o.Order_ID) as Num_Orders FROM Customer c LEFT JOIN Order o ON c.Customer_ID = o.Customer_ID AND o.Order_Date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY c.Customer_ID;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ]
    },
    "response_text": "SELECT Customer.Customer_Name, COUNT(Order.Order_ID) AS total_orders\nFROM Customer\nJOIN Order ON Customer.Customer_ID = Order.Customer_ID\nWHERE YEAR(Order.Order_Date) = 2022\nGROUP BY Customer.Customer_Name",
    "prompt_token_number": 276,
    "response_token_number": 44
},
{
    "id": 34545,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['Client_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'City', 'Email_Address', 'Phone_Number', 'State', 'ClientName', 'ClientID', 'Name', 'ID', 'Status', 'Balance', 'pending_case', 'legal_fees'], 'Cases': ['Case_ID', 'Case_Name', 'Case_Description', 'Client_ID', 'Case_Status', 'Lawyer_ID', 'Last_Updated', 'Date_Opened', 'Date_Closed', 'Status', 'Case_Closed_Date', 'Practice_Area_ID', 'Case_Manager_ID', 'Open_Date', 'Closed', 'Case_End_Date', 'Case_Start_Date', 'Firm_ID', 'Office_ID', 'CaseStatus', 'CaseNumber', 'ClientID', 'CaseTitle', 'CaseTypeID', 'CaseType', 'CourtName', 'ClosedDate', 'Settlement', 'ID', 'HearingDate', 'ClosingDate', 'AppealStatus', 'LawyerID', 'OpeningDate', 'verdict', 'judge_id', 'defendant_state', 'plaintiff_state', 'lawyer_id'], 'Lawyers': ['Lawyer_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'Specialization', 'Department_ID', 'City', 'Email_Address', 'Phone_Number', 'Hourly_Rate', 'Practice_Area_ID', 'Billing_Rate_ID', 'Firm_ID', 'FirmID', 'LawSchoolID', 'HourlyRate', 'Name', 'ID', 'ExperienceYears', 'years_of_experience', 'state', 'lawyer_id'], 'Tasks': ['Task_ID', 'Task_Name', 'Task_Description', 'Task_Status', 'Case_ID', 'Due_Date', 'Lawyer_ID', 'Status', 'Completion_Date', 'Practice_Area_ID', 'Paralegal_ID', 'Last_Activity_Date', 'Budgeted_Hours', 'Budget', 'Task_Deadline', 'Hourly_Rate', 'Task_Date', 'Hours_Worked', 'Task_Due_Date', 'Hours_Billed', 'Hours']}. \n# the user question is: List all the lawyers who have worked on cases for clients based in more than one city:. \n#SQL query: SELECT Lawyers.First_Name, Lawyers.Last_Name, COUNT(DISTINCT Clients.City) AS Number_of_Cities FROM Lawyers JOIN Tasks ON Lawyers.Lawyer_ID = Tasks.Lawyer_ID JOIN Cases ON Tasks.Case_ID = Cases.Case_ID JOIN Clients ON Cases.Client_ID = Clients.Client_ID GROUP BY Lawyers.Lawyer_ID HAVING COUNT(DISTINCT Clients.City) > 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project for more than 3 months and have not taken any leave of absence in the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project for more than 3 months and have not taken any leave of absence in the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND (julianday(p.Project_End_Date) - julianday(p.Project_Start_Date)) + 1 > 90 LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name \nFROM Employee \nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nJOIN Project ON Task.Project_ID = Project.Project_ID \nWHERE DATEDIFF(MONTH, Project.Project_Start_Date, Project.Project_End_Date) > 3 \nAND Employee.Employee_ID NOT IN (\n    SELECT Employee_ID FROM Leave \n    WHERE (Leave_Start_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date) \n    OR (Leave_End_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date)\n    );",
    "prompt_token_number": 938,
    "response_token_number": 117
},
{
    "id": 34547,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months'], 'Employee': ['employee_id', 'first_name', 'last_name', 'email', 'phone_number', 'title', 'department_id', 'job_id', 'salary', 'address_id', 'Email', 'Hire_Date', 'Employee_Name', 'Department_ID'], 'Task': ['task_id', 'description', 'deadline', 'employee_id', 'campaign_id', 'completed', 'priority', 'completion_date', 'completed_date']}. \n# the user question is: Retrieve the names and email addresses of all employees who have completed tasks for campaigns that have a duration of more than 6 months:. \n#SQL query: SELECT DISTINCT Employee.first_name, Employee.last_name, Employee.email FROM Employee INNER JOIN Task ON Employee.employee_id = Task.employee_id INNER JOIN Campaign ON Task.campaign_id = Campaign.campaign_id WHERE julianday(Campaign.end_date) - julianday(Campaign.start_date) > 180;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to finance and have not taken any leave of absence during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to finance and have not taken any leave of absence during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Finance%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name\nFROM Employee \nINNER JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nINNER JOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nINNER JOIN Project ON Task.Project_ID = Project.Project_ID \nLEFT JOIN Leave ON Employee.Employee_ID = Leave.Employee_ID \nAND (Project.Project_Start_Date <= Leave.Leave_Start_Date AND Project.Project_End_Date >= Leave.Leave_End_Date) \nWHERE Project.Project_Name LIKE '%finance%' AND Leave.Leave_ID IS NULL;",
    "prompt_token_number": 658,
    "response_token_number": 101
},
{
    "id": 34548,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Employees': ['first_name', 'employee_id', 'last_name', 'hire_date', 'salary', 'job_title_id', 'department_id', 'location_id', 'job_title', 'employee_status_id', 'employee_experience', 'certification_id', 'equipment_rental_cost', 'hourly_rate', 'Salary', 'Department'], 'Project_Employees': ['employee_id', 'project_id', 'end_date'], 'Project_Costs': ['project_id', 'total_cost', 'equipment_cost', 'labor_cost', 'material_cost', 'square_feet']}. \n# the user question is: List all the employees who have not worked on a project with a total cost of more than $100,000.. \n#SQL query: SELECT DISTINCT e.first_name, e.last_name FROM Employees e LEFT JOIN Project_Employees pe ON e.employee_id = pe.employee_id LEFT JOIN Project_Costs pc ON pe.project_id = pc.project_id WHERE pc.total_cost <= 100000 OR pc.total_cost IS NULL GROUP BY e.employee_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID']} and \n# the user question: List the names of all suppliers and the number of purchases made from each supplier in the year 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers and the number of purchases made from each supplier in the year 2022.",
    "output": "SELECT s.Supplier_Name, COUNT(p.Purchase_ID) as Num_Purchases FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID AND p.Purchase_Date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY s.Supplier_ID;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ]
    },
    "response_text": "SELECT s.Supplier_Name, COUNT(p.Purchase_ID) FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID WHERE YEAR(p.Purchase_Date) = 2022 GROUP BY s.Supplier_ID;",
    "prompt_token_number": 416,
    "response_token_number": 47
},
{
    "id": 34550,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Sessions': ['psychologist_id', 'patient_id', 'date', 'location', 'therapist', 'therapist_id', 'session_date', 'session_id', 'duration_minutes', 'missed', 'remote_session'], 'Therapists': ['last_name', 'therapist_id', 'first_name', 'count', 'experience_years', 'license_number'], 'Specializations': ['specialization_name', 'therapist_id']}. \n# the user question is: List all therapists who specialize in anger management and have conducted a session in the past month.. \n#SQL query: SELECT t.first_name, t.last_name FROM Therapists t INNER JOIN Specializations s ON t.therapist_id = s.therapist_id INNER JOIN Sessions ses ON t.therapist_id = ses.therapist_id WHERE s.specialization_name = 'anger management' AND ses.session_date >= date('now', '-1 month');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has been discontinued.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has been discontinued.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Discontinued';",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Status = 'discontinued';",
    "prompt_token_number": 503,
    "response_token_number": 54
},
{
    "id": 34551,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Episode': ['rating', 'show_id', 'guest_id', 'episode_number', 'episode_id', 'air_date', 'host_id', 'year', 'month', 'max_rating'], 'Show': ['show_name', 'show_id', 'Night', 'Late', 'Talk', 'host_id', 'rating', 'end_time', 'start_time', 'language'], 'Viewership': ['episode_id', 'viewer_id', 'rating', 'show_id', 'air_date'], 'Viewer': ['location', 'email', 'viewer_id', 'viewer_name', 'age_range', 'occupation', 'gender']}. \n# the user question is: \"Retrieve the names of viewers who have watched all episodes of 'The Morning Show' and have given a rating above 8.\". \n#SQL query: SELECT Viewer.viewer_name FROM Viewer INNER JOIN Viewership ON Viewer.viewer_id = Viewership.viewer_id INNER JOIN Episode ON Viewership.episode_id = Episode.episode_id INNER JOIN Show ON Episode.show_id = Show.show_id WHERE Show.show_name = 'The Morning Show' GROUP BY Viewer.viewer_name HAVING COUNT(DISTINCT Episode.episode_id) = (SELECT COUNT(*) FROM Episode WHERE show_id = Show.show_id) AND AVG(Viewership.rating) > 8;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked for more than 8 hours on a task that is related to a project with a budget of more than $10,000.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked for more than 8 hours on a task that is related to a project with a budget of more than $10,000.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Hours > 8 INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget > 10000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name \nFROM Employee \nINNER JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nINNER JOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nINNER JOIN Project ON Task.Project_ID = Project.Project_ID \nWHERE Time_Entry.Time_Entry_Hours > 8 AND Project.Project_Budget > 10000;",
    "prompt_token_number": 621,
    "response_token_number": 67
},
{
    "id": 34552,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Students': ['last_name', 'student_id', 'first_name', 'grade_level', 'teacher_id', 'gender', 'school_id'], 'Books': ['library_id', 'book_id', 'publication_date', 'book_title', 'author', 'category', 'genre'], 'Reservations': ['book_id', 'student_id', 'reservation_id', 'reservation_date', 'semester']}. \n# the user question is: \"Retrieve the list of students who have borrowed books authored by 'J.K. Rowling' or 'Stephen King'.\". \n#SQL query: SELECT Students.first_name, Students.last_name FROM Students INNER JOIN Reservations ON Students.student_id = Reservations.student_id INNER JOIN Books ON Reservations.book_id = Books.book_id WHERE Books.author IN ('J.K. Rowling', 'Stephen King');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status']} and \n# the user question: List the names of all customers who have not placed any orders in the month of March 2022 but have placed orders in the month of April 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have not placed any orders in the month of March 2022 but have placed orders in the month of April 2022.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID AND o.Order_Date BETWEEN '2022-04-01' AND '2022-04-30' LEFT JOIN Order o2 ON c.Customer_ID = o2.Customer_ID AND o2.Order_Date BETWEEN '2022-03-01' AND '2022-03-31' WHERE o2.Order_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ]
    },
    "response_text": "SELECT Customer.Customer_Name \nFROM Customer \nLEFT JOIN Order ON Customer.Customer_ID = Order.Customer_ID \nWHERE MONTH(Order.Order_Date) = 4 AND YEAR(Order.Order_Date) = 2022\nAND Customer.Customer_Name NOT IN (\n  SELECT Customer.Customer_Name \n  FROM Customer \n  INNER JOIN Order ON Customer.Customer_ID = Order.Customer_ID \n  WHERE MONTH(Order.Order_Date) = 3 AND YEAR(Order.Order_Date) = 2022\n);",
    "prompt_token_number": 376,
    "response_token_number": 92
},
{
    "id": 34553,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['director', 'release_year', 'film_id', 'title', 'box_office', 'language_id', 'runtime', 'budget', 'genre', 'based_on_true_story', 'film_title', 'film_gross', 'film_release_date', 'film_length', 'film_imdb_rating', 'film_director', 'film_runtime_minutes', 'film_release_year', 'film_worldwide_gross', 'film_budget', 'production_company_id', 'film_box_office_gross', 'film_user_rating', 'film_runtime', 'film_director_gender', 'film_box_office_rank', 'genre_id', 'film_duration', 'film_box_office_collection', 'film_running_time', 'film_country', 'film_rating', 'film_revenue', 'film_box_office', 'film_language', 'film_name', 'studio_id', 'film_production_budget'], 'Film_Director': ['director_id', 'film_id', 'director_name'], 'Director': ['director_id', 'director_name', 'gender', 'director_gender'], 'Battle': ['battle_name', 'year', 'battle_id', 'war_name', 'casualties', 'theater', 'war_id', 'date', 'countries_involved'], 'Film_Battle': ['battle_id', 'film_id']}. \n# the user question is: Find all battles from the Battle of Marathon that are featured in war films directed by Oliver Stone:. \n#SQL query: SELECT Battle.battle_name, Director.director_name FROM Film INNER JOIN Film_Battle ON Film.film_id = Film_Battle.film_id INNER JOIN Battle ON Film_Battle.battle_id = Battle.battle_id INNER JOIN Film_Director ON Film.film_id = Film_Director.film_id INNER JOIN Director ON Film_Director.director_id = Director.director_id WHERE Director.director_name = 'Oliver Stone' AND Battle.battle_name LIKE '%Battle of Marathon%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID']} and \n# the user question: List the names of all suppliers who have not received any purchases in the year 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have not received any purchases in the year 2022.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID AND p.Purchase_Date BETWEEN '2022-01-01' AND '2022-12-31' WHERE p.Purchase_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ]
    },
    "response_text": "SELECT Supplier_Name FROM Supplier WHERE Supplier_ID NOT IN (SELECT Supplier_ID FROM Purchase WHERE YEAR(Purchase_Date) = 2022);",
    "prompt_token_number": 590,
    "response_token_number": 27
},
{
    "id": 34554,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Project_Materials': ['project_id', 'material_id', 'quantity', 'total_quantity'], 'Materials': ['material_id', 'material_name', 'cost_per_unit', 'unit_of_measurement', 'unit_quantity', 'unit_cost', 'quantity', 'unit_price', 'material_type_id', 'quantity_in_stock', 'material_unit', 'quantity_available', 'reorder_level', 'stock_level'], 'Project_Ratings': ['rating', 'project_id', 'total_cost'], 'Material_Types': ['material_type_name', 'material_type_id']}. \n# the user question is: List all the projects that have been completed within the last 5 years and have a project rating of \"Excellent\" and have used materials with a material type of \"Glass\".. \n#SQL query: SELECT DISTINCT p.project_name FROM Projects p INNER JOIN Project_Ratings pr ON p.project_id = pr.project_id INNER JOIN Project_Materials pm ON p.project_id = pm.project_id INNER JOIN Materials m ON pm.material_id = m.material_id INNER JOIN Material_Types mt ON m.material_type_id = mt.material_type_id WHERE p.project_completion_date BETWEEN DATE('now', '-5 years') AND DATE('now') AND pr.rating = 'Excellent' AND mt.material_type_name = 'Glass';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to software development and have not taken any leave of absence during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to software development and have not taken any leave of absence during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Software Development%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT e.Employee_Name FROM Employee e \nINNER JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID \nINNER JOIN Task t ON te.Task_ID = t.Task_ID \nINNER JOIN Project p ON t.Project_ID = p.Project_ID \nLEFT OUTER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND (l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date OR l.Leave_End_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date) \nWHERE p.Project_Name LIKE '%software development%' AND l.Leave_ID IS NULL;",
    "prompt_token_number": 798,
    "response_token_number": 114
},
{
    "id": 34557,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Book': ['series_id', 'publication_year', 'title', 'id', 'author_id', 'publisher_id', 'published_year', 'word_count', 'publication_date', 'value', 'pages', 'year', 'language_id', 'publish_date', 'price', 'genre_id'], 'Character': ['id', 'name', 'location_id', 'description', 'occupation', 'role', 'gender'], 'Book_Character': ['book_id', 'character_id'], 'Location': ['id', 'name', 'description', 'type', 'city', 'population', 'official_language', 'country'], 'Book_Location': ['book_id', 'location_id']}. \n# the user question is: Find all books that have a location with a name containing the word \"desert\" and have a character who is a nomad.. \n#SQL query: SELECT Book.title FROM Book INNER JOIN Book_Location ON Book.id = Book_Location.book_id INNER JOIN Location ON Book_Location.location_id = Location.id AND Location.name LIKE '%desert%' INNER JOIN Book_Character ON Book.id = Book_Character.book_id INNER JOIN Character ON Book_Character.character_id = Character.id AND Character.occupation = 'Nomad';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Stock': ['Stock_Quantity', 'Product_I', 'Product_ID', 'Last_Restocked_Date']} and \n# the user question: List the names of all customers who have placed an order for a product that is in stock but has not been restocked for more than 30 days.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is in stock but has not been restocked for more than 30 days.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' LEFT JOIN Stock s ON oi.Product_ID = s.Product_ID AND (julianday('now') - julianday(s.Last_Restocked_Date)) > 30;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Stock": [
            "Stock_Quantity",
            "Product_I",
            "Product_ID",
            "Last_Restocked_Date"
        ]
    },
    "response_text": "SELECT Customer.Customer_Name \nFROM Customer \nINNER JOIN Order ON Customer.Customer_ID = Order.Customer_ID \nINNER JOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nINNER JOIN Product ON Order_Item.Product_ID = Product.Product_ID \nINNER JOIN Stock ON Product.Product_ID = Stock.Product_ID \nWHERE Stock.Stock_Quantity > 0 AND DATEDIFF(CURDATE(), Stock.Last_Restocked_Date) > 30;",
    "prompt_token_number": 593,
    "response_token_number": 87
},
{
    "id": 34558,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Sales': ['CustomerID', 'Amount', 'SaleDate', 'SaleID', 'Product', 'Description', 'ProductID', 'TransactionID', 'SalespersonID', 'Commission', 'OrderID', 'SalesRepID', 'ProductCategory', 'Product_ID', 'Quantity', 'Date', 'Customer_ID'], 'Customers': ['CustomerName', 'CustomerID', 'Phone', 'Email', 'Country', 'Address', 'City', 'ContactName', 'ContactTitle', 'Name', 'ID'], 'Orders': ['CustomerID', 'OrderDate', 'OrderID', 'TotalAmount', 'ShippedDate', 'PaidAmount', 'ShipperID', 'ShipCity', 'DeliveredDate', 'EmployeeID', 'ShipVia', 'Amount']}. \n# the user question is: Calculate the total amount of revenue for each customer, sorted by total revenue in descending order:. \n#SQL query: SELECT Customers.CustomerName, SUM(Sales.Amount) AS TotalRevenue FROM Sales INNER JOIN Orders ON Sales.OrderID = Orders.OrderID INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID GROUP BY Customers.CustomerID ORDER BY TotalRevenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to sales and have not taken any leave of absence during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to sales and have not taken any leave of absence during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Sales%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name FROM Employee \nINNER JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nINNER JOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nINNER JOIN Project ON Task.Project_ID = Project.Project_ID \nWHERE Project.Project_Name LIKE '%sales%' \nAND NOT EXISTS (SELECT 1 FROM Leave WHERE Employee.Employee_ID = Leave.Employee_ID AND ((Leave.Leave_Start_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date) OR (Leave.Leave_End_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date)));",
    "prompt_token_number": 618,
    "response_token_number": 109
},
{
    "id": 34559,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Patients': ['medical_history', 'patient_id', 'first_name', 'last_name', 'age_group', 'gender', 'Age', 'Contact_Info', 'Name', 'Diagnosis', 'Discharge_Date', 'Admission_Date', 'Address', 'Family_History', 'Patient_ID', 'Doctor_ID', 'Doctor_I', 'AdmissionDate', 'Therapy', 'date_of_birth', 'name'], 'Admissions': ['date_discharged', 'room_id', 'patient_id', 'admission_id', 'date_admitted', 'nurse_id', 'medical_record_id', 'admission_date', 'discharge_date', 'ward_id', 'num_medications', 'Unit_Type', 'Admission_Date', 'Diagnosis', 'Discharge_Date', 'Patient_ID'], 'Billing': ['amount', 'procedure_id', 'surgery_id', 'admission_id', 'amount_paid', 'date_paid']}. \n# the user question is: Find the patients who have been discharged from a room and have a remaining balance of more than $20000.. \n#SQL query: SELECT DISTINCT Patients.patient_id, Patients.first_name, Patients.last_name, Admissions.date_discharged, Billing.amount, Billing.amount_paid FROM Patients INNER JOIN Admissions ON Patients.patient_id = Admissions.patient_id LEFT JOIN Billing ON Admissions.admission_id = Billing.admission_id WHERE Admissions.date_discharged IS NOT NULL AND Billing.amount > 0 AND (Billing.amount - Billing.amount_paid) > 20000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date']} and \n# the user question: List the names of all customers and the total amount of money they have spent on all orders in the year 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers and the total amount of money they have spent on all orders in the year 2022.",
    "output": "SELECT c.Customer_Name, SUM(oi.Quantity * oi.Price) as Total_Amount_Spent FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID AND o.Order_Date BETWEEN '2022-01-01' AND '2022-12-31' INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID GROUP BY c.Customer_ID;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ]
    },
    "response_text": "SELECT Customer.Customer_Name, SUM(Order.Order_Total_Amount) as Total_Spent\nFROM Customer\nJOIN Order on Customer.Customer_ID = Order.Customer_ID\nWHERE YEAR(Order.Order_Date) = 2022\nGROUP BY Customer.Customer_Name;",
    "prompt_token_number": 543,
    "response_token_number": 48
},
{
    "id": 34562,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Sessions': ['psychologist_id', 'patient_id', 'date', 'location', 'therapist', 'therapist_id', 'session_date', 'session_id', 'duration_minutes', 'missed', 'remote_session'], 'Patients': ['name', 'patient_id', 'birthdate', 'case_id', 'age', 'date_of_birth', 'last_name', 'first_name'], 'Diagnosis': ['suspect_id', 'patient_id', 'disorder', 'disorder_subtype', 'recommendation', 'disorder_id', 'criminal_id'], 'Therapists': ['last_name', 'therapist_id', 'first_name', 'count', 'experience_years', 'license_number'], 'Specializations': ['specialization_name', 'therapist_id']}. \n# the user question is: List all therapists who have treated patients with borderline personality disorder (BPD) and have a specialization in dialectical behavior therapy (DBT).. \n#SQL query: SELECT DISTINCT t.first_name, t.last_name FROM Therapists t INNER JOIN Sessions s ON t.therapist_id = s.therapist_id INNER JOIN Patients p ON s.patient_id = p.patient_id INNER JOIN Diagnosis d ON p.patient_id = d.patient_id INNER JOIN Specializations sp ON t.therapist_id = sp.therapist_id WHERE d.disorder LIKE '%BPD%' AND sp.specialization_name LIKE '%DBT%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Stock': ['Stock_Quantity', 'Product_I', 'Product_ID', 'Last_Restocked_Date']} and \n# the user question: List the names of all customers who have placed an order for a product that is out of stock and has not been restocked for more than 7 days.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is out of stock and has not been restocked for more than 7 days.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' LEFT JOIN Stock s ON oi.Product_ID = s.Product_ID AND (julianday('now') - julianday(s.Last_Restocked_Date)) > 7;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Stock": [
            "Stock_Quantity",
            "Product_I",
            "Product_ID",
            "Last_Restocked_Date"
        ]
    },
    "response_text": "SELECT DISTINCT c.Customer_Name \nFROM Customer c \nINNER JOIN Order o ON c.Customer_ID = o.Customer_ID \nINNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID \nINNER JOIN Product p ON oi.Product_ID = p.Product_ID \nLEFT JOIN Stock s ON p.Product_ID = s.Product_ID \nWHERE p.Product_Stock = 0 AND (Current_Date - s.Last_Restocked_Date) > 7;",
    "prompt_token_number": 639,
    "response_token_number": 87
},
{
    "id": 34565,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'password_hash', 'is_admin', 'name', 'last_login_at', 'last_login', 'created_at', 'verified', 'activated'], 'Billing_Records': ['billing_record_id', 'user_id', 'amount', 'description', 'created_at', 'payment_status', 'total_amount']}. \n# the user question is: Retrieve the names and email addresses of all users who have created a billing record with a payment status of \"success\" and have logged in within the past 7 days, sorted by the date the billing record was created:. \n#SQL query: SELECT Users.name, Users.email, Billing_Records.created_at FROM Users INNER JOIN Billing_Records ON Users.user_id = Billing_Records.user_id WHERE Billing_Records.payment_status = 'success' AND (julianday('now') - julianday(Users.last_login)) <= 7 ORDER BY Billing_Records.created_at DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price greater than $50.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for a product that has a price greater than $50.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price > 50;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name FROM Supplier INNER JOIN Product ON Supplier.Supplier_ID = Product.Supplier_ID INNER JOIN Purchase_Item ON Product.Product_ID = Purchase_Item.Product_ID WHERE Product.Product_Price > 50;",
    "prompt_token_number": 501,
    "response_token_number": 42
},
{
    "id": 34566,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'News_Article': ['category_id', 'content', 'created_at', 'title', 'user_id', 'id', 'article_id', 'date', 'published_date', 'word_count', 'updated_date', 'author_id', 'publish_date'], 'User': ['id', 'name', 'email', 'janesmith', 'user_id', 'category_id', 'city_id', 'country_name', 'country'], 'Comment': ['user_id', 'article_id', 'date', 'id'], 'News_Article_Tag': ['tag_id', 'article_id', 'id'], 'News_Tag': ['id', 'name', 'tag_id', 'article_id'], 'News_Article_Topic': ['topic_id', 'article_id'], 'News_Topic': ['id', 'name']}. \n# the user question is: Retrieve the titles and content of all articles that have been written by users who have not written any comments on articles related to \"Health\" tagged with \"Fitness\" in the year 2023.. \n#SQL query: SELECT title, content FROM News_Article WHERE user_id IN ( SELECT User.id FROM User JOIN News_Article ON User.id = News_Article.user_id WHERE User.id NOT IN ( SELECT User.id FROM User JOIN Comment ON User.id = Comment.user_id JOIN News_Article ON Comment.article_id = News_Article.id JOIN News_Article_Topic ON News_Article.id = News_Article_Topic.article_id JOIN News_Topic ON News_Article_Topic.topic_id = News_Topic.id JOIN News_Article_Tag ON News_Article.id = News_Article_Tag.article_id JOIN News_Tag ON News_Article_Tag.tag_id = News_Tag.id WHERE News_Topic.name = 'Health' AND News_Tag.name = 'Fitness' AND strftime('%Y', Comment.date) = '2023' ) ) AND strftime('%Y', News_Article.date) = '2023';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on a project in the year 2022.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have not worked on a project in the year 2022.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN '2022-01-01' AND '2022-12-31' WHERE t.Time_Entry_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee_Name FROM Employee WHERE Employee_ID NOT IN ( SELECT Employee_ID FROM Time_Entry WHERE strftime('%Y', Time_Entry_Date) = '2022' );",
    "prompt_token_number": 637,
    "response_token_number": 32
},
{
    "id": 34567,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Archaeologists': ['archaeologist_id', 'name', 'specialization', 'birth_date', 'nationality'], 'Sites': ['site_id', 'name', 'location', 'date_discovered', 'excavated_by', 'culture_id', 'description'], 'Excavations': ['excavation_id', 'site_id', 'start_date', 'end_date', 'description', 'excavated_by']}. \n# the user question is: Retrieve the names of archaeologists who excavated sites discovered before the year 1900:. \n#SQL query: SELECT DISTINCT Archaeologists.name FROM Archaeologists JOIN Excavations ON Archaeologists.archaeologist_id = Excavations.excavated_by JOIN Sites ON Excavations.site_id = Sites.site_id WHERE Sites.date_discovered < '1900-01-01';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently on sale.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is currently on sale.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'On Sale';",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name FROM Customer JOIN Order ON Customer.Customer_ID = Order.Customer_ID JOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID JOIN Product ON Order_Item.Product_ID = Product.Product_ID WHERE Product.Product_Status = 'On Sale';",
    "prompt_token_number": 486,
    "response_token_number": 49
},
{
    "id": 34569,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Sale_Items': ['product_id', 'sale_id', 'quantity', 'sale_item_id', 'customer_id', 'unit_price', 'discount_code', 'sale_date', 'price'], 'Sales': ['employee_id', 'sale_id', 'sale_date', 'customer_id', 'total', 'total_amount', 'payment_method', 'total_price', 'total_spent', 'location_id', 'coupon_code', 'start_date', 'discount_percentage', 'end_date', 'product_id'], 'Returns': ['sale_item_id', 'return_date', 'return_id']}. \n# the user question is: Find the names and total revenue for all products that have been sold in the last month and have not been returned, sorted in descending order by total revenue.. \n#SQL query: SELECT Products.product_name, SUM(Sale_Items.quantity * Products.price) AS total_revenue FROM Products INNER JOIN Sale_Items ON Products.product_id = Sale_Items.product_id INNER JOIN Sales ON Sale_Items.sale_id = Sales.sale_id LEFT JOIN Returns ON Sale_Items.sale_item_id = Returns.sale_item_id WHERE Sales.sale_date BETWEEN DATE('now', '-1 month') AND DATE('now') AND Returns.return_date IS NULL GROUP BY Products.product_id ORDER BY total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Stock': ['Stock_Quantity', 'Product_I', 'Product_ID', 'Last_Restocked_Date']} and \n# the user question: List the names of all customers who have placed an order for a product that has been restocked within the last 5 days.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has been restocked within the last 5 days.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' LEFT JOIN Stock s ON oi.Product_ID = s.Product_ID AND (julianday('now') - julianday(s.Last_Restocked_Date)) <= 5;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Stock": [
            "Stock_Quantity",
            "Product_I",
            "Product_ID",
            "Last_Restocked_Date"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name FROM Customer INNER JOIN Order ON Customer.Customer_ID = Order.Customer_ID INNER JOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID INNER JOIN Product ON Order_Item.Product_ID = Product.Product_ID INNER JOIN Stock ON Product.Product_ID = Stock.Product_ID WHERE Stock.Last_Restocked_Date BETWEEN DATE('now', '-5 day') AND DATE('now');",
    "prompt_token_number": 684,
    "response_token_number": 75
},
{
    "id": 34570,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Recipes': ['RecipeID'], 'RecipeIngredients': ['RecipeID', 'IngredientID'], 'Ingredients': ['Name', 'IngredientID']}. \n# the user question is: Count the number of recipes that contain both \"chocolate\" and \"vanilla\" as ingredients:. \n#SQL query: SELECT COUNT(DISTINCT Recipes.RecipeID) AS RecipeCount FROM Recipes JOIN RecipeIngredients AS RI1 ON Recipes.RecipeID = RI1.RecipeID JOIN Ingredients AS I1 ON RI1.IngredientID = I1.IngredientID JOIN RecipeIngredients AS RI2 ON Recipes.RecipeID = RI2.RecipeID JOIN Ingredients AS I2 ON RI2.IngredientID = I2.IngredientID WHERE I1.Name = 'chocolate' AND I2.Name = 'vanilla';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to research and development and have not taken any leave of absence during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to research and development and have not taken any leave of absence during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Research and Development%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name \nFROM Employee \nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nJOIN Project ON Task.Project_ID = Project.Project_ID \nLEFT JOIN Leave ON Employee.Employee_ID = Leave.Employee_ID \nWHERE Project.Project_Name LIKE '%research and development%' \nAND (Leave.Leave_Start_Date IS NULL OR Leave.Leave_Start_Date > Project.Project_End_Date OR Leave.Leave_End_Date < Project.Project_Start_Date);",
    "prompt_token_number": 548,
    "response_token_number": 100
},
{
    "id": 34571,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'customer': ['name', 'id', 'zip_code'], 'purchase': ['store_id', 'customer_id', 'id', 'purchase_date', 'total_price']}. \n# the user question is: How many customers have never made a purchase?. \n#SQL query: SELECT COUNT(*) FROM customer c LEFT JOIN purchase p ON c.id = p.customer_id WHERE p.customer_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a price greater than $100 and is currently on sale.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has a price greater than $100 and is currently on sale.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'On Sale' AND p.Product_Price > 100;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer_Name FROM Customer WHERE Customer_ID IN (SELECT Customer_ID FROM Order WHERE Order_ID IN (SELECT Order_ID FROM Order_Item WHERE Product_ID IN (SELECT Product_ID FROM Product WHERE Product_Price > 100 AND Product_Status = 'on sale')));",
    "prompt_token_number": 402,
    "response_token_number": 52
},
{
    "id": 34573,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Incidents': ['reported_by_user_id', 'location_id', 'created_at', 'incident_id', 'evacuation_status', 'severity_level', 'vehicle_id', 'status', 'reported_time', 'location', 'type', 'start_time', 'assigned_to_vehicle_id', 'incident_date', 'incident_type', 'category_id', 'reporting_agency_id', 'reported_at', 'date_id', 'description', 'date', 'time'], 'Users': ['user_id', 'email', 'username', 'phone_number', 'email_address', 'creation_date', 'current_city_id', 'current_state_id', 'state_id']}. \n# the user question is: Retrieve the number of incidents reported by each user.. \n#SQL query: SELECT Users.username, COUNT(*) AS num_incidents FROM Incidents INNER JOIN Users ON Incidents.reported_by_user_id = Users.user_id GROUP BY Users.username\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is in stock and has a price less than $50.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is in stock and has a price less than $50.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Price < 50;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Status = 'in stock' AND Product.Product_Price < 50",
    "prompt_token_number": 510,
    "response_token_number": 61
},
{
    "id": 34575,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Employees': ['first_name', 'last_name', 'employee_id', 'department_id', 'job_title', 'hire_date', 'salary', 'department', 'birth_date', 'team', 'manager_id', 'email_address', 'phone_number', 'compliance_training_due_date', 'salary_amount', 'job_id', 'address', 'city', 'state', 'email', 'supervisor_id', 'num_projects', 'hourly_rate'], 'Orders': ['employee_id', 'total_price', 'order_date'], 'Performance_Reviews': ['employee_id', 'review_rating', 'review_date']}. \n# the user question is: Find the names and total sales revenue of all employees who have made at least one sale in the past month and have a performance review rating of 3 or higher.. \n#SQL query: SELECT e.first_name, e.last_name, SUM(o.total_price) AS total_sales_revenue FROM Employees e INNER JOIN Orders o ON e.employee_id = o.employee_id INNER JOIN Performance_Reviews pr ON e.employee_id = pr.employee_id WHERE strftime('%Y-%m', o.order_date) = strftime('%Y-%m', date('now')) AND pr.review_rating >= 3 GROUP BY e.employee_id ORDER BY total_sales_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a discount of more than 20%.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has a discount of more than 20%.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Discount > 0.2;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Discount > 20;",
    "prompt_token_number": 579,
    "response_token_number": 54
},
{
    "id": 34577,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'registration_date', 'dataset_count', 'role'], 'Projects': ['user_id', 'project_id', 'project_name', 'dataset_count', 'dataset_id', 'creation_year', 'created_at'], 'Analyses': ['method_id', 'project_id', 'analysis_id', 'analysis_name', 'dataset_id', 'confidence_score'], 'DataSets': ['dataset_description', 'dataset_id', 'dataset_name', 'project_id', 'user_id', 'source_id'], 'Results': ['analysis_id', 'result_id', 'report_id', 'result_name'], 'Visualizations': ['visualization_type', 'visualization_name', 'result_id', 'visualization_id', 'dataset_id'], 'Dashboards': ['user_id', 'dashboard_name', 'dashboard_description', 'dashboard_id', 'project_id']}. \n# the user question is: Retrieve the visualization names and their associated dashboard names for visualizations that are used in projects owned by the user with user ID 12345:. \n#SQL query: SELECT Visualizations.visualization_name, Dashboards.dashboard_name FROM Visualizations JOIN Results ON Visualizations.result_id = Results.result_id JOIN Analyses ON Results.analysis_id = Analyses.analysis_id JOIN DataSets ON Analyses.dataset_id = DataSets.dataset_id JOIN Projects ON DataSets.project_id = Projects.project_id JOIN Users ON Projects.user_id = Users.user_id JOIN Dashboards ON Projects.project_id = Dashboards.project_id WHERE Users.user_id = 12345;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that is out of stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for a product that is out of stock.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'Out of Stock';",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name \nFROM Supplier \nJOIN Product ON Supplier.Supplier_ID = Product.Supplier_ID \nJOIN Purchase_Item ON Product.Product_ID = Purchase_Item.Product_ID \nWHERE Product.Product_Stock = 0;",
    "prompt_token_number": 606,
    "response_token_number": 45
},
{
    "id": 34578,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['Price', 'ProductName', 'Category', 'ProductID', 'Cost', 'CategoryID', 'SubcategoryID', 'UnitPrice', 'LastOrderDate', 'UnitsInStock', 'SupplierID', 'UnitCost', 'Discontinued', 'ReorderLevel'], 'OrderDetails': ['ProductID', 'OrderID', 'Quantity', 'UnitCost', 'UnitPrice', 'OrderDate', 'Discount'], 'Categories': ['CategoryID', 'CategoryName', 'Description', 'Name', 'ID']}. \n# the user question is: Calculate the total revenue and profit for each category, sorted by profit in descending order:. \n#SQL query: SELECT Categories.CategoryName, SUM(OrderDetails.Quantity * OrderDetails.UnitPrice) AS TotalRevenue, SUM(OrderDetails.Quantity * (OrderDetails.UnitPrice - Products.UnitCost)) AS TotalProfit FROM Categories INNER JOIN Products ON Categories.CategoryID = Products.CategoryID INNER JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID GROUP BY Categories.CategoryName ORDER BY TotalProfit DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to customer support and have taken a leave of absence during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to customer support and have taken a leave of absence during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Customer Support%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE l.Leave_ID IS NOT NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name\nFROM Employee \nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nJOIN Project ON Task.Project_ID = Project.Project_ID \nJOIN Leave ON Employee.Employee_ID = Leave.Employee_ID \nWHERE Project.Project_Name LIKE '%customer support%' \nAND (Leave.Leave_Start_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date)\nAND (Leave.Leave_End_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date);",
    "prompt_token_number": 592,
    "response_token_number": 102
},
{
    "id": 34579,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Client': ['client_id', 'name', 'email', 'phone_number', 'industry_id', 'location_id', 'industry', 'budget', 'first_name', 'last_name', 'state', 'city', 'company_name', 'annual_revenue'], 'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months'], 'Employee': ['employee_id', 'first_name', 'last_name', 'email', 'phone_number', 'title', 'department_id', 'job_id', 'salary', 'address_id', 'Email', 'Hire_Date', 'Employee_Name', 'Department_ID'], 'Task': ['task_id', 'description', 'deadline', 'employee_id', 'campaign_id', 'completed', 'priority', 'completion_date', 'completed_date']}. \n# the user question is: Retrieve the names and email addresses of all employees who have completed tasks for campaigns sponsored by clients whose annual revenue exceeds $1 million:. \n#SQL query: SELECT DISTINCT Employee.first_name, Employee.last_name, Employee.email FROM Employee INNER JOIN Task ON Employee.employee_id = Task.employee_id INNER JOIN Campaign ON Task.campaign_id = Campaign.campaign_id INNER JOIN Client ON Campaign.client_id = Client.client_id WHERE Client.annual_revenue > 1000000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a discount of 10% or less.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has a discount of 10% or less.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Discount <= 0.1;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name FROM Customer INNER JOIN Order ON Customer.Customer_ID = Order.Customer_ID INNER JOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID INNER JOIN Product ON Order_Item.Product_ID = Product.Product_ID WHERE Product.Product_Discount <= 0.10;",
    "prompt_token_number": 650,
    "response_token_number": 54
},
{
    "id": 34581,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Event': ['event_id', 'event_name', 'event_date', 'location_id', 'event_category_id', 'event_type_id', 'location', 'venue_id', 'start_date', 'end_date', 'category', 'event_code', 'EVT', 'organizer_id', 'duration', 'name', 'Expo', 'Tech', 'country', 'category_id', 'city', 'ticket_price', 'date', 'start_time', 'end_time', 'min_age_requirement', 'event_type', 'capacity', 'registration_deadline', 'num_attendees', 'min_age', 'duration_hours', 'registration_fee', 'price'], 'Attendee': ['attendee_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'date_of_birth', 'job_title', 'city', 'age', 'email'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID'], 'Event_Session': ['session_type_id', 'event_id', 'session_id', 'speaker_id', 'rating', 'price'], 'Session_Type': ['session_type_name', 'session_type_id'], 'Event_Session_Attendee': ['registration_id', 'session_id', 'event_id', 'attendee_id', 'rating']}. \n# the user question is: What is the name and email address of the attendee who has attended the most sessions with a \"Panel Discussion\" session type in the year 2028 and has a job title of \"Consultant\"?. \n#SQL query: SELECT Attendee.first_name, Attendee.last_name, Attendee.email_address, COUNT(DISTINCT Event_Session.session_id) AS num_sessions FROM Attendee INNER JOIN Registration ON Attendee.attendee_id = Registration.attendee_id INNER JOIN Event ON Registration.event_id = Event.event_id INNER JOIN Event_Session_Attendee ON Registration.registration_id = Event_Session_Attendee.registration_id INNER JOIN Event_Session ON Event_Session_Attendee.session_id = Event_Session.session_id INNER JOIN Session_Type ON Event_Session.session_type_id = Session_Type.session_type_id WHERE Session_Type.session_type_name = 'Panel Discussion' AND strftime('%Y', Event.event_date) = '2028' AND Attendee.job_title = 'Consultant' GROUP BY Attendee.attendee_id ORDER BY num_sessions DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a price greater than $100 and is out of stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has a price greater than $100 and is out of stock.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Price > 100;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name FROM Customer INNER JOIN Order ON Customer.Customer_ID = Order.Customer_ID INNER JOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID INNER JOIN Product ON Order_Item.Product_ID = Product.Product_ID WHERE Product.Product_Price > 100 AND Product.Product_Stock = 0;",
    "prompt_token_number": 842,
    "response_token_number": 59
},
{
    "id": 34582,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'john123', 'username', 'email'], 'Projects': ['status', 'end_date', 'start_date', 'project_name', 'contractor_id', 'project_id', 'user_id', 'category_id']}. \n# the user question is: \"Retrieve the project names and their corresponding users where the user email contains the domain 'example.com'.\". \n#SQL query: SELECT P.project_name, U.username FROM Projects P JOIN Users U ON P.user_id = U.user_id WHERE U.email LIKE '%@example.com';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to finance and accounting and have not taken any leave of absence during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to finance and accounting and have not taken any leave of absence during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Finance and Accounting%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT E.Employee_Name\nFROM Employee E\nJOIN Project P ON E.Department_ID = P.Department_ID \nJOIN Task T ON P.Project_ID = T.Project_ID \nJOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID AND T.Task_ID = TE.Task_ID\nWHERE P.Project_Name LIKE '%finance%' AND P.Project_Name LIKE '%accounting%'\nAND NOT EXISTS (SELECT 1 \n                FROM Leave L \n                WHERE L.Employee_ID = E.Employee_ID \n                AND L.Leave_Start_Date BETWEEN P.Project_Start_Date AND P.Project_End_Date);",
    "prompt_token_number": 497,
    "response_token_number": 113
},
{
    "id": 34585,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'MiningPool': ['MiningPoolID', 'Name', 'ValidationCount'], 'MiningPoolMember': ['UserID', 'MiningPoolID', 'Recipient', 'Sender', 'PublicAddress', 'NodeID', 'JoinTimestamp'], 'BlockValidation': ['BlockID', 'IsValid', 'NodeID', 'Creator', 'Timestamp', 'BlockValidationID', 'PublicAddress', 'MiningPoolID', 'Penalty', 'Difficulty', 'GasLimit', 'DifficultyLevel']}. \n# the user question is: Find the mining pools that have the highest number of active members in the last 24 hours:. \n#SQL query: SELECT MiningPool.Name, COUNT(DISTINCT MiningPoolMember.UserID) AS ActiveMembers FROM MiningPool JOIN MiningPoolMember ON MiningPool.MiningPoolID = MiningPoolMember.MiningPoolID JOIN BlockValidation ON MiningPoolMember.PublicAddress = BlockValidation.Creator AND BlockValidation.IsValid AND BlockValidation.Timestamp >= datetime('now', '-24 hours') GROUP BY MiningPool.MiningPoolID ORDER BY ActiveMembers DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that is currently in stock and has a price less than $30.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for a product that is currently in stock and has a price less than $30.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'In Stock' AND pr.Product_Price < 30;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name \nFROM Supplier \nJOIN Product ON Supplier.Supplier_ID = Product.Supplier_ID \nJOIN Purchase_Item ON Product.Product_ID = Purchase_Item.Product_ID \nWHERE Product.Product_Price < 30 AND Product.Product_Stock > 0",
    "prompt_token_number": 516,
    "response_token_number": 51
},
{
    "id": 34586,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Recipients': ['name', 'email', 'campaign_id', 'status', 'recipient_id', 'segment_id', 'list_id', 'last_opened_at', 'city', 'country', 'state', 'last_clicked_at', 'created_at', 'subscribed_at'], 'Campaigns': ['name', 'campaign_id', 'limited', 'Sale', 't', 'our', 'miss', 'content', 'subject', 'user_id', 'segment_id', 'list_id', 'workflow_id', 'email_template_id', 'scheduled_at', 'created_at', 'sent_at'], 'Campaign_Stats': ['opens', 'campaign_id', 'created_at', 'clicks', 'clicked_at', 'opened_at', 'recipient_id', 'click_id', 'open_id', 'bounce_id', 'bounces', 'marked_as_spam', 'complaints', 'segment_id']}. \n# the user question is: Retrieve the email and date of the most recent open for all recipients who have opened a campaign with a subject containing the word \"Sale\" in the past day.. \n#SQL query: SELECT r.email, MAX(cs.created_at) AS most_recent_open FROM Recipients r JOIN Campaigns c ON r.campaign_id = c.campaign_id AND c.subject LIKE '%Sale%' JOIN Campaign_Stats cs ON r.recipient_id = cs.recipient_id AND cs.opens > 0 AND cs.created_at >= date('now', '-1 day') GROUP BY r.recipient_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to marketing and have taken a leave of absence during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to marketing and have taken a leave of absence during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Marketing%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE l.Leave_ID IS NOT NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT e.Employee_Name \nFROM Employee e \nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nJOIN Leave l ON e.Employee_ID = l.Employee_ID \nWHERE p.Project_Name LIKE '%marketing%' \nAND (l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date \nOR l.Leave_End_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date);",
    "prompt_token_number": 688,
    "response_token_number": 103
},
{
    "id": 34587,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Recipes': ['cooking_time', 'recipe_id', 'title', 'category_id', 'preparation_time', 'difficulty_level_id', 'creation_date', 'cuisine_type_id'], 'RecipeIngredients': ['ingredient_id', 'recipe_id', 'unit', 'quantity', 'measurement_id'], 'Ingredients': ['ingredient_id', 'name', 'category', 'Pasta', 'category_id', 'gluten_free', 'vegan_friendly'], 'DifficultyLevels': ['difficulty_level_id', 'name']}. \n# the user question is: Text Query: \"Retrieve the recipes that require 'shrimp' as the main ingredient and have a difficulty level of 'Advanced'.\". \n#SQL query: SELECT r.recipe_id, r.title FROM Recipes r JOIN RecipeIngredients ri ON r.recipe_id = ri.recipe_id JOIN Ingredients i ON ri.ingredient_id = i.ingredient_id JOIN DifficultyLevels dl ON r.difficulty_level_id = dl.difficulty_level_id WHERE i.name = 'shrimp' AND dl.name = 'Advanced';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a price greater than $200 and a discount of 10% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has a price greater than $200 and a discount of 10% or more.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price > 200 AND p.Product_Discount >= 0.1;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT c.Customer_Name \nFROM Customer c \nJOIN Order o ON c.Customer_ID = o.Customer_ID \nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID \nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Price > 200 AND p.Product_Discount >= 10;",
    "prompt_token_number": 536,
    "response_token_number": 63
},
{
    "id": 34589,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {}. \n# the user question is: Retrieve the average price of all products. \n#SQL query: SELECT AVG(price) FROM Products;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a discount of 20% or more and is currently in stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has a discount of 20% or more and is currently in stock.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount >= 0.2;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Discount >= 20 AND Product.Product_Status = 'in stock';",
    "prompt_token_number": 351,
    "response_token_number": 62
},
{
    "id": 34590,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['username', 'user_id', 'address_id', 'work_address_id', 'last_active_date', 'home_address_id', 'last_activity_date', 'registration_date', 'email', 'total_purchase_amount', 'user_type_id', 'country', 'name'], 'Orders': ['order_date', 'order_id', 'address_id', 'user_id', 'order_total', 'shipping_status', 'shipping_address_id'], 'Addresses': ['state_id', 'address_id', 'city', 'street_address', 'city_id', 'country_id'], 'States': ['country_id', 'state_id', 'state_name', 'sales_tax_rate', 'population_density', 'time_zone', 'population', 'state_code'], 'Countries': ['country_name', 'country_id', 'population', 'continent', 'country_code', 'name', 'region_id'], 'Payment_details': ['order_id', 'payment_id'], 'Payment_methods': ['payment_type', 'payment_id']}. \n# the user question is: Get the details of all orders that have been placed by users who have made at least one purchase using a payment method that has 'Bitcoin' in its name and have been shipped to an address in a country that has a country code of 'US':. \n#SQL query: SELECT Orders.order_id, Users.username, Addresses.street_address, Addresses.city, States.state_name, Countries.country_name, Payment_methods.payment_type FROM Orders INNER JOIN Users ON Orders.user_id = Users.user_id INNER JOIN Addresses ON Orders.shipping_address_id = Addresses.address_id INNER JOIN States ON Addresses.state_id = States.state_id INNER JOIN Countries ON States.country_id = Countries.country_id INNER JOIN Payment_details ON Orders.order_id = Payment_details.order_id INNER JOIN Payment_methods ON Payment_details.payment_id = Payment_methods.payment_id WHERE Payment_methods.payment_type LIKE '%Bitcoin%' AND Countries.country_code = 'US';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on any projects in the last 3 months and have not taken any leave of absence during that period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have not worked on any projects in the last 3 months and have not taken any leave of absence during that period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN DATE('now', '-3 months') AND DATE('now') LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN DATE('now', '-3 months') AND DATE('now') WHERE t.Time_Entry_ID IS NULL AND l.Leave_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name FROM Employee WHERE Employee.Employee_ID NOT IN (SELECT Time_Entry.Employee_ID FROM Time_Entry WHERE Time_Entry.Date > DATE_SUB(CURDATE(), INTERVAL 3 MONTH)) AND Employee.Employee_ID NOT IN (SELECT Leave.Employee_ID FROM Leave WHERE Leave.Leave_Start_Date BETWEEN DATE_SUB(NOW(), INTERVAL 3 MONTH) AND NOW());",
    "prompt_token_number": 649,
    "response_token_number": 70
},
{
    "id": 34591,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'EventArtists': ['artist_id', 'event_id'], 'Artists': ['artist_name', 'artist_id', 'artist_genre', 'artist_country', 'country_id', 'genre_id'], 'Albums': ['artist_id', 'release_date', 'album_title', 'album_id', 'label_id', 'release_year', 'album_name', 'genre_id']}. \n# the user question is: Retrieve the artists who have both performed at events and released albums:. \n#SQL query: SELECT Artists.artist_name FROM Artists JOIN EventArtists ON Artists.artist_id = EventArtists.artist_id JOIN Albums ON Artists.artist_id = Albums.artist_id GROUP BY Artists.artist_id HAVING COUNT(DISTINCT EventArtists.event_id) > 0 AND COUNT(DISTINCT Albums.album_id) > 0;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a price less than $50 and is currently in stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has a price less than $50 and is currently in stock.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Price < 50;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name FROM Customer JOIN Order ON Customer.Customer_ID = Order.Customer_ID JOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID JOIN Product ON Order_Item.Product_ID = Product.Product_ID WHERE Product.Product_Price < 50 AND Product.Product_Status = 'in stock';",
    "prompt_token_number": 487,
    "response_token_number": 56
},
{
    "id": 34592,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'PlantSpecies': ['id', 'name', 'genus_id', 'scientific_name'], 'PlantSpeciesUses': ['plant_species_id', 'plant_uses_id'], 'PlantUses': ['id', 'name'], 'PlantSpeciesGrowth': ['plant_species_id', 'plant_growth_id'], 'PlantGrowth': ['id', 'name'], 'PlantSpeciesLocation': ['plant_location_id', 'plant_species_id'], 'PlantLocation': ['id', 'name']}. \n# the user question is: Find all plant species that have a location requirement of \"Aquatic\", a growth requirement for \"Humidity\", and at least one use for \"Edible\":. \n#SQL query: SELECT PlantSpecies.name AS species, PlantLocation.name AS location, PlantGrowth.name AS growth, PlantUses.name AS use FROM PlantSpecies JOIN PlantSpeciesLocation ON PlantSpecies.id = PlantSpeciesLocation.plant_species_id JOIN PlantLocation ON PlantSpeciesLocation.plant_location_id = PlantLocation.id JOIN PlantSpeciesUses ON PlantSpecies.id = PlantSpeciesUses.plant_species_id JOIN PlantUses ON PlantSpeciesUses.plant_uses_id = PlantUses.id JOIN PlantSpeciesGrowth ON PlantSpecies.id = PlantSpeciesGrowth.plant_species_id JOIN PlantGrowth ON PlantSpeciesGrowth.plant_growth_id = PlantGrowth.id WHERE PlantLocation.name = 'Aquatic' AND PlantGrowth.name = 'Humidity' AND PlantUses.name = 'Edible';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to software development and have taken a leave of absence during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to software development and have taken a leave of absence during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Software Development%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE l.Leave_ID IS NOT NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name\nFROM Employee\nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID\nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID\nJOIN Project ON Task.Project_ID = Project.Project_ID\nJOIN Leave ON Employee.Employee_ID = Leave.Employee_ID\nWHERE Project.Project_Name LIKE '%software development%'\nAND (\n    (Leave.Leave_Start_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date) \n    OR \n    (Leave.Leave_End_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date)\n);",
    "prompt_token_number": 677,
    "response_token_number": 108
},
{
    "id": 34593,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue'], 'User': ['user_id', 'username', 'country_id'], 'Rating': ['user_id', 'film_id', 'score', 'rating', 'rating_id', 'genre_id']}. \n# the user question is: Find the films that were released between 2015 and 2020 and have not been rated by user \"johndoe\":. \n#SQL query: SELECT Film.title, Film.release_date FROM Film WHERE strftime('%Y', Film.release_date) BETWEEN '2015' AND '2020' AND Film.film_id NOT IN ( SELECT DISTINCT Rating.film_id FROM Rating INNER JOIN User ON Rating.user_id = User.user_id AND User.username = 'johndoe' );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that is out of stock and has a price greater than $50.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for a product that is out of stock and has a price greater than $50.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'Out of Stock' AND pr.Product_Price > 50;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT Supplier.Supplier_Name \nFROM Supplier \nWHERE Supplier.Supplier_ID IN ( \n    SELECT Purchase.Supplier_ID \n    FROM Purchase \n    JOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID \n    JOIN Product ON Purchase_Item.Product_ID = Product.Product_ID \n    WHERE Product.Product_Status = 'Out of Stock' AND Product.Product_Price > 50\n);",
    "prompt_token_number": 521,
    "response_token_number": 77
},
{
    "id": 34594,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {}. \n# the user question is: Retrieve the name and current price for all bonds:. \n#SQL query: SELECT bond_name, bond_price FROM bonds;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to human resources and have not taken any leave of absence during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to human resources and have not taken any leave of absence during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Human Resources%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT E.Employee_Name \nFROM Employee E \nJOIN Time_Entry T \nON E.Employee_ID = T.Employee_ID \nJOIN Task Ta \nON T.Task_ID = Ta.Task_ID \nJOIN Project P \nON Ta.Project_ID = P.Project_ID \nLEFT JOIN Leave L \nON E.Employee_ID = L.Employee_ID \nAND (L.Leave_Start_Date BETWEEN P.Project_Start_Date AND P.Project_End_Date \n     OR L.Leave_End_Date BETWEEN P.Project_Start_Date AND P.Project_End_Date) \nWHERE P.Project_Name LIKE '%human resources%' \nAND L.Leave_ID IS NULL;",
    "prompt_token_number": 412,
    "response_token_number": 119
},
{
    "id": 34595,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Websites': ['website_id', 'user_id', 'url', 'created_at', 'updated_at', 'name', 'domain_id', 'domain_authority_score', 'domain_created_at'], 'Pages': ['page_id', 'website_id', 'url', 'title', 'description', 'content', 'created_at', 'updated_at', 'meta_description', 'meta_keywords', 'meta_title', 'h1_tag', 'h2_tag', 'title_tag', 'canonical_url', 'description_tag', 'header_tag', 'meta_tag', 'meta_keyword', 'h1', 'heading', 'header', 'word_count', 'time_on_page', 'total_words', 'http_status_code', 'user_id', 'last_modified_date', '[website_id]'], 'Page_Stats': ['page_stat_id', 'page_id', 'visits', 'bounce_rate', 'time_on_page', 'created_at', 'updated_at', 'organic_traffic', 'load_time', 'page_speed_score', 'total_images', 'total_videos', 'page_authority_score', 'domain_authority_score', 'page_load_time', 'backlinks', 'search_query', 'search_volume']}. \n# the user question is: Retrieve the names and URLs of all websites that have at least one page with a meta description containing the word \"services\" and a time on page greater than or equal to 1020 seconds:. \n#SQL query: SELECT DISTINCT Websites.name, Websites.url FROM Websites INNER JOIN Pages ON Websites.website_id = Pages.website_id INNER JOIN Page_Stats ON Pages.page_id = Page_Stats.page_id WHERE Pages.meta_description LIKE '%services%' AND Page_Stats.time_on_page >= 1020;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a price between $50 and $100 and is currently in stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has a price between $50 and $100 and is currently in stock.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Price BETWEEN 50 AND 100;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nINNER JOIN Order ON Customer.Customer_ID = Order.Customer_ID \nINNER JOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nINNER JOIN Product ON Order_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Price BETWEEN 50 AND 100 AND Product.Product_Status = 'In Stock';",
    "prompt_token_number": 675,
    "response_token_number": 67
},
{
    "id": 34596,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Genres': ['genre_id', 'game_id'], 'Genres': ['genre_id', 'genre_name'], 'Game_Characters': ['character_id', 'game_id'], 'Characters': ['character_name', 'character_id', 'character_description']}. \n# the user question is: Find the names of all games that have a character with a name containing \"Mario\" and a genre with a name containing \"adventure\".. \n#SQL query: SELECT DISTINCT Games.game_title FROM Games INNER JOIN Game_Characters ON Games.game_id = Game_Characters.game_id INNER JOIN Characters ON Game_Characters.character_id = Characters.character_id INNER JOIN Game_Genres ON Games.game_id = Game_Genres.game_id INNER JOIN Genres ON Game_Genres.genre_id = Genres.genre_id WHERE Characters.character_name LIKE '%Mario%' AND Genres.genre_name LIKE '%adventure%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a discount of 30% or more and is currently in stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for a product that has a discount of 30% or more and is currently in stock.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'In Stock' AND pr.Product_Discount >= 0.3;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name FROM Supplier INNER JOIN Product ON Supplier.Supplier_ID = Product.Supplier_ID INNER JOIN Purchase_Item ON Product.Product_ID = Purchase_Item.Product_ID WHERE Product.Product_Discount >= 30 AND Product.Product_Status = 'in stock';",
    "prompt_token_number": 512,
    "response_token_number": 51
},
{
    "id": 34597,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Book': ['book_id', 'title', 'isbn', 'publisher_id', 'publication_date', 'rating', 'price', 'publication_year', 'author_id', 'publisher', 'author', 'weight', 'author_gender', 'language', 'author_name', 'book_title', 'format_id', 'page_count', 'id', 'num_pages'], 'Order': ['order_id', 'customer_id', 'order_date', 'status', 'store_id', 'date', 'total_amount', 'total_cost', 'total_price'], 'Order_Item': ['order_id', 'book_id', 'quantity', 'price', 'store_id', 'order_date', 'customer_id', 'unit_price', 'inventory_id', 'date', 'order_item_date'], 'Customer': ['customer_id', 'first_name', 'last_name', 'email', 'address', 'phone_number', 'zip_code', 'country_id'], 'Store_Inventory': ['store_id', 'book_id', 'quantity', 'inventory_id', 'quantity_available']}. \n# the user question is: Find the name and email address of the customer who has purchased the most books written by \"Stephen King\" in the last year.. \n#SQL query: SELECT Customer.first_name || ' ' || Customer.last_name AS customer_name, Customer.email FROM Customer JOIN Order ON Customer.customer_id = Order.customer_id JOIN Order_Item ON Order.order_id = Order_Item.order_id JOIN Store_Inventory ON Order_Item.book_id = Store_Inventory.book_id JOIN Book ON Store_Inventory.book_id = Book.book_id WHERE Book.author = 'Stephen King' AND Order.date >= DATE('now', '-1 year') GROUP BY Customer.customer_id ORDER BY SUM(Order_Item.quantity) DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to sales and have taken a leave of absence during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to sales and have taken a leave of absence during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Sales%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE l.Leave_ID IS NOT NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name \nFROM Employee \nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nJOIN Project ON Task.Project_ID = Project.Project_ID \nJOIN Leave ON Employee.Employee_ID = Leave.Employee_ID \nWHERE Project.Project_Name LIKE '%sales%' \nAND (Leave.Leave_Start_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date \nOR Leave.Leave_End_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date);",
    "prompt_token_number": 736,
    "response_token_number": 100
},
{
    "id": 34598,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Collection': ['collection_id', 'name'], 'Movie_Collection': ['movie_id', 'collection_id']}. \n# the user question is: Retrieve the title of the movie, the name of the collection, and the release year for all movies in the \"Marvel Cinematic Universe\" collection that were released before the year 2010.. \n#SQL query: SELECT Movie.title, Collection.name, Movie.release_year FROM Movie JOIN Movie_Collection ON Movie.movie_id = Movie_Collection.movie_id JOIN Collection ON Movie_Collection.collection_id = Collection.collection_id WHERE Collection.name = 'Marvel Cinematic Universe' AND Movie.release_year < 2010;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a discount of 15% or more and a price greater than $100.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has a discount of 15% or more and a price greater than $100.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price > 100 AND p.Product_Discount >= 0.15;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name FROM Customer JOIN Order ON Customer.Customer_ID = Order.Customer_ID JOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID JOIN Product ON Order_Item.Product_ID = Product.Product_ID WHERE Product.Product_Discount >= 15 AND Product.Product_Price > 100;",
    "prompt_token_number": 497,
    "response_token_number": 56
},
{
    "id": 34599,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Book': ['book_id', 'title', 'isbn', 'publisher_id', 'publication_date', 'rating', 'price', 'publication_year', 'author_id', 'publisher', 'author', 'weight', 'author_gender', 'language', 'author_name', 'book_title', 'format_id', 'page_count', 'id', 'num_pages'], 'Review': ['review_id', 'book_id', 'reviewer_id', 'rating', 'review_text', 'customer_id', 'date'], 'Customer': ['customer_id', 'first_name', 'last_name', 'email', 'address', 'phone_number', 'zip_code', 'country_id']}. \n# the user question is: Find the name and email address of the customer who has given the highest number of 5-star ratings on books written by \"J.K. Rowling\".. \n#SQL query: SELECT Customer.first_name || ' ' || Customer.last_name AS customer_name, Customer.email FROM Customer JOIN Review ON Customer.customer_id = Review.customer_id JOIN Book ON Review.book_id = Book.book_id WHERE Book.author_name = 'J.K. Rowling' AND Review.rating = 5 GROUP BY Customer.customer_id ORDER BY COUNT(Review.review_id) DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on any projects in the last 6 months and have not taken any leave of absence during that period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have not worked on any projects in the last 6 months and have not taken any leave of absence during that period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN DATE('now', '-6 months') AND DATE('now') LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN DATE('now', '-6 months') AND DATE('now') WHERE t.Time_Entry_ID IS NULL AND l.Leave_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name \nFROM Employee \nLEFT JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID AND Time_Entry.Time_Entry_Date > DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) \nLEFT JOIN Leave ON Employee.Employee_ID = Leave.Employee_ID AND (Leave.Leave_Start_Date > DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) OR Leave.Leave_End_Date < CURRENT_DATE) \nWHERE Time_Entry.Employee_ID IS NULL AND Leave.Employee_ID IS NULL;",
    "prompt_token_number": 518,
    "response_token_number": 95
},
{
    "id": 34600,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'screens': ['project_id', 'screen_id', 'name', 'created_at', 'updated_at', 'description', 'priority', 'last_updated_by', 'last_modified', 'owner_id'], 'tasks': ['created_at', 'project_id', 'task_id', 'user_id', 'due_date', 'completed', 'started_at', 'priority', 'completion_date', 'completed_date', 'start_date', 'created_date', 'creator_id', 'assignee_id', 'completed_at', 'name', 'tags', 'assigner_id', 'assigned_by_id', 'category'], 'users': ['user_id', 'name', 'email', 'last_login_attempt', 'total_tasks', 'completed_tasks', 'assignee_id', 'role', 'last_login', 'first_name', 'last_name', 'last_login_date', 'registration_date', 'password', 'job_title', 'hire_date'], 'task_screens': ['screen_id', 'task_id', 'user_id']}. \n# the user question is: Retrieve the names and descriptions of all screens that have been assigned to tasks with a priority of 'medium' and have not been completed yet, along with the name and email address of the user who has been assigned to each task, sorted by due date in ascending order:. \n#SQL query: SELECT s.name, s.description, u.name, u.email, t.due_date FROM screens s JOIN task_screens ts ON s.screen_id = ts.screen_id AND ts.task_id IN ( SELECT task_id FROM tasks WHERE priority = 'medium' AND completed = 0 ) JOIN tasks t ON ts.task_id = t.task_id JOIN users u ON t.user_id = u.user_id ORDER BY t.due_date ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price less than $100 and is currently out of stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for a product that has a price less than $100 and is currently out of stock.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'Out of Stock' AND pr.Product_Price < 100;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name \nFROM Supplier \nJOIN Product ON Supplier.Supplier_ID = Product.Supplier_ID\nJOIN Purchase_Item ON Product.Product_ID = Purchase_Item.Product_ID\nWHERE Product.Product_Price < 100 AND Product.Product_Stock = 0;",
    "prompt_token_number": 663,
    "response_token_number": 52
},
{
    "id": 34603,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Goals': ['goal_id', 'goal_name', 'goal_description', 'goal_due_date', 'user_id', 'program_id', 'goal_target', 'goal_type', 'goal_end_date', 'goal_target_date', 'goal_start_date', 'goal_status', 'goal_value'], 'Progress': ['progress_id', 'goal_id', 'user_id', 'progress_date', 'progress_value', 'date_recorded'], 'User_Workouts': ['workout_id', 'date_completed', 'user_id', 'calories_burned', 'program_id', 'duration', 'date_scheduled', 'avg_heart_rate', 'workout_date', 'workout_status', 'workout_duration']}. \n# the user question is: Find the names and email addresses of all users who have achieved at least one goal and have completed at least one workout in the last 7 days:. \n#SQL query: SELECT Users.first_name, Users.last_name, Users.email FROM Users JOIN User_Workouts ON Users.user_id = User_Workouts.user_id JOIN Goals ON Users.user_id = Goals.user_id JOIN Progress ON Goals.goal_id = Progress.goal_id WHERE Progress.progress_value >= Goals.goal_target AND User_Workouts.date_completed BETWEEN DATE('now', '-7 day') AND DATE('now');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price greater than $100 and is currently out of stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for a product that has a price greater than $100 and is currently out of stock.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'Out of Stock' AND pr.Product_Price > 100;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name \nFROM Supplier \nJOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID\nJOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID\nJOIN Product ON Purchase_Item.Product_ID = Product.Product_ID\nWHERE Product.Product_Price > 100 AND Product.Product_Stock = 0;",
    "prompt_token_number": 610,
    "response_token_number": 66
},
{
    "id": 34604,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Episode': ['rating', 'show_id', 'guest_id', 'episode_number', 'episode_id', 'air_date', 'host_id', 'year', 'month', 'max_rating'], 'Show': ['show_name', 'show_id', 'Night', 'Late', 'Talk', 'host_id', 'rating', 'end_time', 'start_time', 'language'], 'Guest': ['guest_id', 'guest_name', 'nationality', 'occupation', 'industry', 'country', 'rating'], 'Host': ['host_id', 'host_name', 'country'], 'Show_Channel': ['channel_id', 'show_id']}. \n# the user question is: \"Retrieve the names of hosts who have hosted shows on multiple channels and have interviewed guests from different industries.\". \n#SQL query: SELECT Host.host_name FROM Host INNER JOIN Show ON Host.host_id = Show.host_id INNER JOIN Show_Channel ON Show.show_id = Show_Channel.show_id INNER JOIN Episode ON Show.show_id = Episode.show_id INNER JOIN Guest ON Episode.guest_id = Guest.guest_id GROUP BY Host.host_name HAVING COUNT(DISTINCT Show_Channel.channel_id) > 1 AND COUNT(DISTINCT Guest.industry) > 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on any projects in the last 12 months and have not taken any leave of absence during that period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have not worked on any projects in the last 12 months and have not taken any leave of absence during that period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN DATE('now', '-12 months') AND DATE('now') LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN DATE('now', '-12 months') AND DATE('now') WHERE t.Time_Entry_ID IS NULL AND l.Leave_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee_Name FROM Employee LEFT JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID LEFT JOIN Leave ON Employee.Employee_ID = Leave.Employee_ID WHERE (Time_Entry.Task_ID IS NULL OR Time_Entry.Time_Entry_Date < DATE_SUB(CURRENT_DATE, INTERVAL 12 MONTH)) AND Leave.Leave_Start_Date IS NULL;",
    "prompt_token_number": 515,
    "response_token_number": 64
},
{
    "id": 34607,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'comic_books': ['rating', 'series_name', 'issue_number', 'name', 'cover_artist', 'release_date', 'writer', 'artist', 'id', 'variant_cover', 'cover_price', 'series', 'publisher', 'price', 'genre', 'crossover_event', 'publication_date']}. \n# the user question is: Retrieve the name and issue number of all comic book issues with a writer whose name starts with the letter \"J\" and a release date after January 1, 2022.. \n#SQL query: SELECT name, issue_number FROM comic_books WHERE writer LIKE 'J%' AND release_date > '2022-01-01';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a price less than $25 and is currently in stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has a price less than $25 and is currently in stock.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Price < 25;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer_Name \nFROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Price < 25 AND Product.Product_Status = 'in stock';",
    "prompt_token_number": 460,
    "response_token_number": 60
},
{
    "id": 34609,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Designs': ['artist_id', 'design_name', 'design_id', 'design_description', 'Tree', 'designer_id', 'date_created'], 'Artists': ['artist_name', 'artist_email', 'artist_id', 'artist_phone_number', 'email', 'email_address'], 'Glassware_Items': ['glassware_type_id', 'quantity', 'glassware_item_id', 'product_id', 'glassware_item_name', 'glassware_item_description', 'etching_id', 'price', 'item_name', 'material', 'glassware_item_type_id', 'stock', 'design_id', 'discontinued', 'supplier_id', 'quantity_in_stock', 'unit_price', 'quantity_supplied'], 'Etchings': ['etching_id', 'etching_date', 'order_id', 'design_id', 'etching_description', 'etching_name', 'description', 'price', 'etching_image'], 'Etching_Glassware_Items': ['etching_id', 'quantity', 'glassware_item_id', 'etching_glassware_item_id']}. \n# the user question is: Retrieve the list of designs along with the name of the artist who created them and the total quantity of glassware items with etchings associated with each design, where the quantity is greater than 20 and the artist name contains the word 'jones', sorted by quantity in descending order.. \n#SQL query: SELECT Designs.design_name, Artists.artist_name, SUM(Etching_Glassware_Items.quantity) AS total_quantity FROM Designs INNER JOIN Etchings ON Designs.design_id = Etchings.design_id INNER JOIN Etching_Glassware_Items ON Etchings.etching_id = Etching_Glassware_Items.etching_id INNER JOIN Glassware_Items ON Etching_Glassware_Items.glassware_item_id = Glassware_Items.glassware_item_id INNER JOIN Artists ON Designs.artist_id = Artists.artist_id WHERE Artists.artist_name LIKE '%jones%' GROUP BY Designs.design_id HAVING total_quantity > 20 ORDER BY total_quantity DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price greater than $200 and a discount of 20% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for a product that has a price greater than $200 and a discount of 20% or more.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price > 200 AND pr.Product_Discount >= 0.2;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name FROM Supplier INNER JOIN Product ON Supplier.Supplier_ID = Product.Supplier_ID INNER JOIN Purchase_Item ON Product.Product_ID = Purchase_Item.Product_ID WHERE Product.Product_Price > 200 AND Product.Product_Discount >= 20;",
    "prompt_token_number": 731,
    "response_token_number": 50
},
{
    "id": 34610,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'john_doe', 'jane_smith', 'mike_jones'], 'Projects': ['user_id', 'Project', 'project_name', 'project_id', 'created_date'], 'Instances': ['project_id', 'instance_name', 'launch_date', 'storage_id', 'user_id', 'instance_id', 'instance_type', 'region_id', 'zone_id', 'cpu_usage', 'memory_usage', 'availability_zone', 'storage_usage', 'network_bandwidth', 'status', 'cpu_count']}. \n# the user question is: Text Query: Retrieve the project names and their respective owners for projects that have instances with a network bandwidth exceeding 1 Gbps and memory usage greater than 8 GB.. \n#SQL query: SELECT Projects.project_name, Users.username FROM Projects INNER JOIN Users ON Projects.user_id = Users.user_id INNER JOIN Instances ON Projects.project_id = Instances.project_id WHERE Instances.network_bandwidth > 1000 AND Instances.memory_usage > 8\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to research and have not taken any leave of absence during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to research and have not taken any leave of absence during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Research%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name\nFROM Employee\nINNER JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID\nINNER JOIN Task ON Time_Entry.Task_ID = Task.Task_ID\nINNER JOIN Project ON Task.Project_ID = Project.Project_ID\nLEFT JOIN Leave ON Employee.Employee_ID = Leave.Employee_ID AND \n     (Leave.Leave_Start_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date OR \n     Leave.Leave_End_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date)\nWHERE Project.Project_Name LIKE '%research%' AND Leave.Leave_ID IS NULL",
    "prompt_token_number": 593,
    "response_token_number": 111
},
{
    "id": 34611,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Goals': ['goal_id', 'goal_name', 'goal_description', 'goal_due_date', 'user_id', 'program_id', 'goal_target', 'goal_type', 'goal_end_date', 'goal_target_date', 'goal_start_date', 'goal_status', 'goal_value'], 'User_Goals': ['goal_id', 'user_id']}. \n# the user question is: Find the name and email address of all users who have a \"Sleep\" goal with a goal value less than or equal to 7 hours:. \n#SQL query: SELECT Users.first_name, Users.last_name, Users.email FROM Users JOIN User_Goals ON Users.user_id = User_Goals.user_id JOIN Goals ON User_Goals.goal_id = Goals.goal_id WHERE Goals.goal_type = 'Sleep' AND Goals.goal_value <= 7;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a discount of 15% or more and is currently in stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has a discount of 15% or more and is currently in stock.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount >= 0.15;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name FROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Discount >= 15 AND Product.Product_Status = 'In Stock';",
    "prompt_token_number": 538,
    "response_token_number": 61
},
{
    "id": 34613,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'athlete_skills': ['skill_id', 'athlete_id', 'skill_level', 'skill_mastered', 'self_talk', 'mental_preparation', 'imagery', 'goal_setting', 'anxiety', 'focus', 'mental_toughness', 'confidence', 'motivation'], 'mental_skills': ['skill_id', 'skill_name', 'skill_description', 'athlete_id', 'Focus', 'Visualization', 'skill_mastered', 'skill_level', 'Excellent', 'High', 'Low']}. \n# the user question is: Get the name and description of all mental skills that have not been mastered by any athlete.. \n#SQL query: SELECT mental_skills.skill_name, mental_skills.skill_description FROM mental_skills WHERE mental_skills.skill_id NOT IN (SELECT skill_id FROM athlete_skills WHERE skill_mastered = 1);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price less than $50 and is currently in stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for a product that has a price less than $50 and is currently in stock.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'In Stock' AND pr.Product_Price < 50;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT Supplier.Supplier_Name \nFROM Supplier \nJOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID \nJOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID \nJOIN Product ON Purchase_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Price < 50 AND Product.Product_Stock > 0;",
    "prompt_token_number": 473,
    "response_token_number": 65
},
{
    "id": 34614,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Variation': ['gene_id', 'position', 'variation_type', 'frequency', 'variant_frequency', 'variant_id', 'variant_name', 'Type', 'Gene_ID', 'Frequency', 'ID'], 'Transcript': ['gene_id', 'coding_sequence_end', 'transcript_name', 'transcript_id', 'protein_id', 'coding_sequence_length', 'transcript_length', 'length', 'cds_length']}. \n# the user question is: Retrieve the names of all genes and their associated transcripts that have a variation of type \"splice site\" and are located on chromosome 152.. \n#SQL query: SELECT Gene.gene_name, Transcript.transcript_name FROM Gene JOIN Transcript ON Gene.gene_id = Transcript.gene_id JOIN Variation ON Gene.gene_id = Variation.gene_id WHERE Variation.variation_type = 'splice site' AND Variation.position BETWEEN Gene.start_position AND Gene.end_position AND Gene.chromosome_id = 152;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on any projects in the last 6 months and have taken at least 10 days of leave of absence during that period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have not worked on any projects in the last 6 months and have taken at least 10 days of leave of absence during that period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN DATE('now', '-6 months') AND DATE('now') LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN DATE('now', '-6 months') AND DATE('now') AND l.Leave_Duration >= 10 WHERE t.Time_Entry_ID IS NULL AND l.Leave_ID IS NOT NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name FROM Employee \nLEFT JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nLEFT JOIN Leave ON Employee.Employee_ID = Leave.Employee_ID \nWHERE Time_Entry.Time_Entry_Date < NOW() - INTERVAL 6 MONTH \nGROUP BY Employee.Employee_ID \nHAVING COUNT(Time_Entry.Task_ID) = 0 AND SUM(Leave.Leave_Duration) >= 10;",
    "prompt_token_number": 533,
    "response_token_number": 78
},
{
    "id": 34615,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'drugs': ['name', 'dosage', 'id', 'price', 'manufacturer', 'drug_name', 'drug_id']}. \n# the user question is: What is the most expensive drug in the inventory?. \n#SQL query: SELECT name FROM drugs WHERE price = (SELECT MAX(price) FROM drugs);\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a price between $75 and $100 and is currently in stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has a price between $75 and $100 and is currently in stock.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Price BETWEEN 75 AND 100;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name FROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Price BETWEEN 75 AND 100 AND Product.Product_Status = 'in stock';",
    "prompt_token_number": 389,
    "response_token_number": 63
},
{
    "id": 34617,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Tasks': ['project_id', 'task_id', 'name', 'due_date', 'status'], 'Task_Assignees': ['task_id', 'user_id', 'project_id']}. \n# the user question is: Retrieve the tasks that have not been assigned to any user and have a due date within the next 7 days.. \n#SQL query: SELECT Tasks.name FROM Tasks LEFT JOIN Task_Assignees ON Tasks.task_id = Task_Assignees.task_id WHERE Task_Assignees.task_id IS NULL AND Tasks.due_date <= DATE('now', '+7 days');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price between $100 and $150 and a discount of 10% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for a product that has a price between $100 and $150 and a discount of 10% or more.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price BETWEEN 100 AND 150 AND pr.Product_Discount >= 0.1;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name \nFROM Supplier \nJOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID \nJOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID \nJOIN Product ON Purchase_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Price BETWEEN 100 AND 150\nAND Product.Product_Discount >= 10;",
    "prompt_token_number": 430,
    "response_token_number": 70
},
{
    "id": 34618,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'News_Article': ['category_id', 'content', 'created_at', 'title', 'user_id', 'id', 'article_id', 'date', 'published_date', 'word_count', 'updated_date', 'author_id', 'publish_date'], 'User': ['id', 'name', 'email', 'janesmith', 'user_id', 'category_id', 'city_id', 'country_name', 'country'], 'Comment': ['user_id', 'article_id', 'date', 'id'], 'News_Article_Tag': ['tag_id', 'article_id', 'id'], 'News_Tag': ['id', 'name', 'tag_id', 'article_id']}. \n# the user question is: Retrieve the names and email addresses of all users who have written at least one comment on an article written by a user with the name \"John Doe\" and tagged with \"Breaking News\".. \n#SQL query: SELECT DISTINCT User.name, User.email FROM User JOIN Comment ON User.id = Comment.user_id JOIN News_Article ON Comment.article_id = News_Article.id JOIN News_Article_Tag ON News_Article.id = News_Article_Tag.article_id JOIN News_Tag ON News_Article_Tag.tag_id = News_Tag.id WHERE News_Tag.name = 'Breaking News' AND News_Article.user_id = (SELECT id FROM User WHERE name = 'John Doe');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to software development and have taken at least 5 days of leave of absence during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to software development and have taken at least 5 days of leave of absence during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Software Development%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date AND l.Leave_Duration >= 5 WHERE l.Leave_ID IS NOT NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name \nFROM Employee \nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nJOIN Project ON Task.Project_ID = Project.Project_ID \nJOIN Leave ON Employee.Employee_ID = Leave.Employee_ID \nWHERE Project.Project_Name LIKE '%software development%' \nAND Leave.Leave_Duration >=5 \nAND Leave.Leave_Start_Date >= Project.Project_Start_Date \nAND (Leave.Leave_End_Date <= Project.Project_End_Date OR Leave.Leave_End_Date <= Project.Project_Actual_End_Date);",
    "prompt_token_number": 674,
    "response_token_number": 113
},
{
    "id": 34619,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'patients': ['first_name', 'last_name', 'patient_id', 'phone_number', 'email', 'phone'], 'medical_history': ['patient_id', 'medical_condition', 'diagnosis'], 'prescription': ['patient_id', 'prescription_id', 'prescription_date', 'type', 'practitioner_id'], 'prescription_items': ['formula_id', 'prescription_id'], 'herbal_formulas': ['formula_id', 'formula_name', 'price', 'num_ingredients', 'ingredients', 'name']}. \n# the user question is: Retrieve the names and email addresses of patients who have been diagnosed with the medical condition \"anxiety\" and have not been prescribed any herbal formulas:. \n#SQL query: SELECT DISTINCT p.first_name, p.last_name, p.email FROM patients p LEFT JOIN prescription pr ON p.patient_id = pr.patient_id LEFT JOIN prescription_items pi ON pr.prescription_id = pi.prescription_id LEFT JOIN herbal_formulas hf ON pi.formula_id = hf.formula_id JOIN medical_history mh ON p.patient_id = mh.patient_id WHERE mh.medical_condition = 'anxiety' AND hf.formula_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a discount of 5% or less and is currently in stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has a discount of 5% or less and is currently in stock.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount <= 0.05;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN Order o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Discount <= 0.05 AND p.Product_Status = 'in stock';",
    "prompt_token_number": 563,
    "response_token_number": 61
},
{
    "id": 34621,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Client': ['first_name', 'last_name', 'client_id', 'date_of_birth'], 'Session': ['session_id', 'client_id', 'therapist_id', 'date', 'duration_minutes', 'location'], 'Goal': ['is_achieved', 'session_id', 'goal_description', 'goal_id', 'target_date', 'rating', 'therapist_id']}. \n# the user question is: Text: Get the clients who have achieved at least one goal and have a session scheduled in the next two weeks.   :. \n#SQL query: SELECT c.client_id, c.first_name, c.last_name FROM Client c INNER JOIN Session s ON c.client_id = s.client_id INNER JOIN Goal g ON s.session_id = g.session_id WHERE g.is_achieved = 1 AND s.date BETWEEN DATE('now') AND DATE('now', '+14 days');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price between $50 and $100 and is currently in stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for a product that has a price between $50 and $100 and is currently in stock.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'In Stock' AND pr.Product_Price BETWEEN 50 AND 100;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name\nFROM Supplier\nINNER JOIN Product ON Supplier.Supplier_ID = Product.Supplier_ID\nINNER JOIN Purchase_Item ON Product.Product_ID = Purchase_Item.Product_ID\nWHERE Product.Product_Price BETWEEN 50 AND 100 AND Product.Product_Status = 'In Stock';",
    "prompt_token_number": 489,
    "response_token_number": 57
},
{
    "id": 34622,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'appointments': ['counselor_id', 'client_id', 'appointment_date', 'appointment_id', 'appointment_time', 'appointment_status', 'cancelled', 'status', 'missed', 'fee', 'type_id', 'therapist_id', 'start_time', 'session_duration'], 'counselors': ['counselor_name', 'counselor_id', 'rating', 'years_of_experience', 'start_date']}. \n# the user question is: Find all the counselors who have never had an appointment scheduled on a Friday.. \n#SQL query: SELECT counselor_name FROM counselors WHERE counselor_id NOT IN ( SELECT DISTINCT counselor_id FROM appointments WHERE strftime('%w', appointment_date) = '5' );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to data analysis and have not taken any leave of absence during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to data analysis and have not taken any leave of absence during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Data Analysis%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee_Name FROM Employee WHERE Employee_ID IN (\n    SELECT Employee_ID FROM Time_Entry WHERE Task_ID IN (\n        SELECT Task_ID FROM Task WHERE Project_ID IN (\n            SELECT Project_ID FROM Project WHERE Project_Name LIKE '%data analysis%'\n        )\n    )\n) AND Employee_ID NOT IN (\n    SELECT Employee_ID FROM Leave WHERE (Leave_Start_Date BETWEEN Project_Start_Date AND Project_End_Date) OR (Leave_End_Date BETWEEN Project_Start_Date AND Project_End_Date)\n);",
    "prompt_token_number": 527,
    "response_token_number": 93
},
{
    "id": 34623,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email'], 'UserRoles': ['user_id', 'role_id', 'user_role_id'], 'Roles': ['role_name', 'role_id']}. \n# the user question is: Example 1: Retrieve the usernames and email addresses of users who have the same role as the user with username 'john.doe'.. \n#SQL query: SELECT U.username, U.email FROM Users U INNER JOIN UserRoles UR ON U.user_id = UR.user_id INNER JOIN Roles R ON UR.role_id = R.role_id WHERE R.role_id IN ( SELECT UR2.role_id FROM Users U2 INNER JOIN UserRoles UR2 ON U2.user_id = UR2.user_id WHERE U2.username = 'john.doe' ) AND U.username != 'john.doe';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a discount of 10% or more and is currently out of stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has a discount of 10% or more and is currently out of stock.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Discount >= 0.1;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT C.Customer_Name FROM Customer C INNER JOIN Order O ON C.Customer_ID = O.Customer_ID INNER JOIN Order_Item OI ON O.Order_ID = OI.Order_ID INNER JOIN Product P ON OI.Product_ID = P.Product_ID WHERE P.Product_Discount >= 10 AND P.Product_Stock = 0;",
    "prompt_token_number": 491,
    "response_token_number": 65
},
{
    "id": 34625,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'created_at'], 'Likes': ['user_id', 'entry_id', 'like_id', 'journal_id'], 'Entries': ['journal_id', 'content', 'title', 'entry_id', 'created_at', 'user_id', 'word_count'], 'Comments': ['user_id', 'entry_id', 'comment_id', 'journal_id', 'created_at']}. \n# the user question is: Find the usernames of users who have created entries but have not received any likes or comments:. \n#SQL query: SELECT Users.username FROM Users JOIN Entries ON Users.user_id = Entries.user_id LEFT JOIN Likes ON Entries.entry_id = Likes.entry_id LEFT JOIN Comments ON Entries.entry_id = Comments.entry_id WHERE Likes.like_id IS NULL AND Comments.comment_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a discount of 25% or more and is currently in stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for a product that has a discount of 25% or more and is currently in stock.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'In Stock' AND pr.Product_Discount >= 0.25;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name FROM Supplier JOIN Product ON Supplier.Supplier_ID=Product.Supplier_ID JOIN Purchase_Item ON Product.Product_ID=Purchase_Item.Product_ID WHERE Product.Product_Discount>=25 AND Product.Product_Status='in stock';",
    "prompt_token_number": 475,
    "response_token_number": 47
},
{
    "id": 34626,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'password', 'created_at'], 'Projects': ['project_id', 'project_name', 'description', 'user_id', 'created_at'], 'Rooms': ['room_id', 'room_name', 'project_id'], 'RoomProducts': ['room_product_id', 'room_id', 'product_id', 'quantity', 'project_id', 'supplier_id', 'order_id'], 'Reviews': ['review_id', 'user_id', 'product_id', 'rating', 'comment', 'created_at']}. \n# the user question is: Retrieve the project names and the usernames of users who have reviewed products used in those projects, sorted by the number of reviews in descending order:. \n#SQL query: SELECT Projects.project_name, Users.username, COUNT(Reviews.review_id) AS review_count FROM Projects JOIN Rooms ON Projects.project_id = Rooms.project_id JOIN RoomProducts ON Rooms.room_id = RoomProducts.room_id JOIN Reviews ON RoomProducts.product_id = Reviews.product_id JOIN Users ON Reviews.user_id = Users.user_id GROUP BY Projects.project_id, Users.user_id ORDER BY review_count DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a price greater than $200 and is currently out of stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has a price greater than $200 and is currently out of stock.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Price > 200;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Price > 200 AND Product.Product_Stock = 0;",
    "prompt_token_number": 554,
    "response_token_number": 61
},
{
    "id": 34629,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['Product_name', 'Unit_price', 'product_id', 'category_id', 'product_name', 'unit_price', 'origin_state', 'manufacturer_id', 'brand_id', 'stock'], 'Categories': ['category_id', 'Category_name', 'category_name'], 'Reviews': ['review_id', 'dataset_id', 'model_id', 'rating', 'user_id', 'product_id']}. \n# the user question is: Which categories have products with a rating higher than 4.5, and what is the average rating for each category?. \n#SQL query: SELECT Categories.category_name, AVG(Reviews.rating) AS avg_rating FROM Categories INNER JOIN Products ON Categories.category_id = Products.category_id INNER JOIN Reviews ON Products.product_id = Reviews.product_id WHERE Reviews.rating > 4.5 GROUP BY Categories.category_name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to marketing and have taken at least 3 days of leave of absence during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to marketing and have taken at least 3 days of leave of absence during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Marketing%' INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date AND l.Leave_Duration >= 3;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name \nFROM Employee \nINNER JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nINNER JOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nINNER JOIN Project ON Task.Project_ID = Project.Project_ID \nINNER JOIN Leave ON Employee.Employee_ID = Leave.Employee_ID \nWHERE Project.Project_Name LIKE '%marketing%' \nAND Leave.Leave_Duration >= 3 \nAND (Leave.Leave_Start_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date \nOR Leave.Leave_End_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date) \nGROUP BY Employee.Employee_Name;\n",
    "prompt_token_number": 554,
    "response_token_number": 120
},
{
    "id": 34630,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Network_Interfaces': ['interface_id', 'device_id', 'interface_name', 'ip_address', 'subnet_mask', 'mac_address', 'default_gateway', 'vlan_tag', 'interface_type', 'bandwidth', 'link_speed', 'ip_address_type', 'mtu', 'dns_server', 'ip_mode', 'vlan_id', 'link_status', 'speed', 'interface_speed', 'status', 'last_activity_time'], 'Firewall_Rules': ['rule_id', 'device_id', 'source_ip', 'destination_ip', 'protocol', 'action', 'destination_port', 'status', 'source_port', 'source_ip_address', 'destination_ip_address', 'rule_action'], 'Scans': ['scan_id', 'scanner_id', 'device_id', 'start_time', 'end_time']}. \n# the user question is: Find all devices that have at least one open port on port range 8088-8089 and have been scanned in the last 500 days, sorted by IP address in ascending order.. \n#SQL query: SELECT DISTINCT ni.ip_address FROM Network_Interfaces ni INNER JOIN Firewall_Rules fr ON ni.ip_address = fr.destination_ip LEFT JOIN Scans s ON ni.device_id = s.device_id AND s.end_time >= date('now', '-500 days') WHERE fr.destination_port >= 8088 AND fr.destination_port <= 8089 AND fr.action = 'allow' AND s.scan_id IS NOT NULL ORDER BY ni.ip_address ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently out of stock and has a discount of 20% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is currently out of stock and has a discount of 20% or more.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Discount >= 0.2;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Status = 'out of stock' AND Product.Product_Discount >= 20;",
    "prompt_token_number": 628,
    "response_token_number": 64
},
{
    "id": 34632,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID'], 'Customer': ['CustomerName', 'CustomerID', 'Country', 'SegmentID', 'Continent', 'PhoneNumber', 'Email', 'CreditLimit', 'State', 'AddressID', 'EmailAddress', 'LoyaltyLevelID', 'FirstName', 'LastName', 'City', 'StateCode', 'CountryCode', 'RegistrationDate']}. \n# the user question is: Retrieve the list of customers who have made purchases in the year 2023, and have an average purchase value of at least $1000, sorted by customer name:. \n#SQL query: SELECT Customer.CustomerName, AVG(SalesOrder.TotalPrice) as AvgPurchaseValue FROM Customer JOIN SalesOrder ON Customer.CustomerID = SalesOrder.CustomerID WHERE SalesOrder.Year = 2023 GROUP BY Customer.CustomerID HAVING AVG(SalesOrder.TotalPrice) >= 1000 ORDER BY Customer.CustomerName;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price between $150 and $200 and a discount of 15% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for a product that has a price between $150 and $200 and a discount of 15% or more.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price BETWEEN 150 AND 200 AND pr.Product_Discount >= 0.15;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name\nFROM Supplier\nJOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID\nJOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID\nJOIN Product ON Purchase_Item.Product_ID = Product.Product_ID\nWHERE (Product.Product_Price BETWEEN 150 AND 200) AND (Product.Product_Discount >= 15);",
    "prompt_token_number": 560,
    "response_token_number": 72
},
{
    "id": 34633,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Participants': ['first_name', 'last_name', 'participant_id', 'gender', 'age', 'birth_year', 'date_of_birth', 'ag', 'age_group_id', 'parental_edu_id', 'language_group_id'], 'Tasks': ['task_id', 'task_name', 'study_id', 'difficulty_level', 'duration', 'difficulty', 'task_category', 'category', 'Tower', 'Hanoi', 'Digit', 'Span', 'Working', 'Spatial', 'Symbol', 'Picture', 'Concepts', 'Coding', 'Regulation', 'Emotional'], 'Participant_Questionnaires': ['participant_id', 'questionnaire_id', 'participant_questionnaire_id', 'completion_date', 'response_text', 'score', 'task_id', 'completion_time'], 'Questionnaires': ['questionnaire_id', 'questionnaire_name', 'category', 'task_id', 'subtest_name', 'alerting', 'network_type', 'orienting']}. \n# the user question is: Retrieve the names and ages of participants who have completed the \"Theory of Mind\" task, and have a score within one standard deviation of the mean score for that task:. \n#SQL query: SELECT Participants.first_name, Participants.last_name, Participants.age FROM Participants JOIN Participant_Questionnaires ON Participants.participant_id = Participant_Questionnaires.participant_id JOIN Questionnaires ON Participant_Questionnaires.questionnaire_id = Questionnaires.questionnaire_id JOIN Tasks ON Questionnaires.task_id = Tasks.task_id AND Tasks.task_name = 'Theory of Mind' WHERE Participant_Questionnaires.score > ( SELECT AVG(Participant_Questionnaires.score) - STDEV(Participant_Questionnaires.score) FROM Participant_Questionnaires JOIN Questionnaires ON Participant_Questionnaires.questionnaire_id = Questionnaires.questionnaire_id JOIN Tasks ON Questionnaires.task_id = Tasks.task_id AND Tasks.task_name = 'Theory of Mind' ) AND Participant_Questionnaires.score < ( SELECT AVG(Participant_Questionnaires.score) + STDEV(Participant_Questionnaires.score) FROM Participant_Questionnaires JOIN Questionnaires ON Participant_Questionnaires.questionnaire_id = Questionnaires.questionnaire_id JOIN Tasks ON Questionnaires.task_id = Tasks.task_id AND Tasks.task_name = 'Theory of Mind' ) ORDER BY Participants.last_name, Participants.first_name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 10% or less.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 10% or less.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount <= 0.1;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name\nFROM Customer\nJOIN Order ON Customer.Customer_ID = Order.Customer_ID\nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID\nJOIN Product ON Order_Item.Product_ID = Product.Product_ID\nWHERE Product.Product_Status = 'In Stock' AND Product.Product_Discount <= 10;",
    "prompt_token_number": 795,
    "response_token_number": 63
},
{
    "id": 34635,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Publishers': ['PublisherID', 'PublisherName', 'SeriesID'], 'Series': ['SeriesID', 'SeriesTitle', 'PublisherID', 'AverageCoverPrice', 'AverageIssueRating', 'SeriesName'], 'Issues': ['IssueID', 'IssueNumber', 'CoverDate', 'SeriesID', 'CoverPrice', 'VariantCover', 'IssueTitle', 'Price', 'PublishDate', 'Stock', 'IssueRating', 'CharacterID', 'PageCount', 'LanguageID', 'Discount', 'PublicationDate', 'IssuePrice', 'Rating', 'SeriesI', 'WriterI', 'IssueName', 'Sales', 'PublishedDate'], 'Creators': ['CreatorID', 'CreatorName'], 'IssueCreators': ['CreatorID', 'IssueID', 'RoleName', 'Role'], 'IssueCredits': ['IssueID', 'CreditID', 'CreatorID'], 'Credits': ['CreditName', 'CreditID']}. \n# the user question is: Find the top 3 most common inkers of issues published by Marvel Comics in 2021:. \n#SQL query: SELECT Creators.CreatorName, COUNT(*) as NumIssues FROM Creators JOIN IssueCreators ON Creators.CreatorID = IssueCreators.CreatorID JOIN Issues ON IssueCreators.IssueID = Issues.IssueID JOIN Series ON Issues.SeriesID = Series.SeriesID JOIN Publishers ON Series.PublisherID = Publishers.PublisherID JOIN IssueCredits ON Issues.IssueID = IssueCredits.IssueID JOIN Credits ON IssueCredits.CreditID = Credits.CreditID AND Credits.CreditName = 'Inker' WHERE Publishers.PublisherName = 'Marvel Comics' AND Issues.CoverDate BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY Creators.CreatorID ORDER BY NumIssues DESC LIMIT 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that is currently in stock and has a price less than $100.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for a product that is currently in stock and has a price less than $100.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'In Stock' AND pr.Product_Price < 100;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name FROM Supplier JOIN Product ON Supplier.Supplier_ID = Product.Supplier_ID JOIN Purchase_Item ON Product.Product_ID = Purchase_Item.Product_ID WHERE Product.Product_Stock > 0 AND Product.Product_Price < 100;",
    "prompt_token_number": 676,
    "response_token_number": 48
},
{
    "id": 34636,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'created_at'], 'Journals': ['journal_id', 'user_id', 'title', 'created_at', 'entry_count', 'tag_count'], 'Categories': ['category_id', 'name'], 'Journal_Categories': ['category_id', 'journal_id'], 'Subscriptions': ['user_id', 'journal_id']}. \n# the user question is: Get the usernames of users who have subscribed to all journals in the \"Food\" category:. \n#SQL query: SELECT Users.username FROM Users WHERE NOT EXISTS ( SELECT Journals.journal_id FROM Journals INNER JOIN Journal_Categories ON Journals.journal_id = Journal_Categories.journal_id INNER JOIN Categories ON Journal_Categories.category_id = Categories.category_id WHERE Categories.name = 'Food' AND NOT EXISTS ( SELECT Subscriptions.journal_id FROM Subscriptions WHERE Subscriptions.user_id = Users.user_id AND Subscriptions.journal_id = Journals.journal_id ) );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to customer service and have not taken any leave of absence during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to customer service and have not taken any leave of absence during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Customer Service%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name FROM Employee\nWHERE NOT EXISTS ( \n    SELECT Leave.Leave_ID FROM Leave \n    WHERE Leave.Employee_ID = Employee.Employee_ID \n    AND NOT EXISTS (\n        SELECT Project.Project_ID FROM Project \n        INNER JOIN Time_Entry ON Time_Entry.Employee_ID = Employee.Employee_ID \n        AND Time_Entry.Time_Entry_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date \n        WHERE Project.Project_Name LIKE '%customer service%' \n        AND Leave.Leave_Start_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date\n        AND Leave.Leave_End_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date\n    )\n);",
    "prompt_token_number": 582,
    "response_token_number": 127
},
{
    "id": 34637,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['email', 'phone_number', 'id', 'name', 'date_of_birth', 'gender', 'referral_source_id', 'primary_care_physician_id', 'substance_abuse_history', 'depression_history', 'trauma_history', 'ptsd_diagnosis', 'addiction_history', 'personality_disorder_history', 'eating_disorder_history', 'bipolar_history', 'schizophrenia_history', 'self_harm_history', 'anxiety_history', 'eating_disorders_history', 'alcoholism_history', 'gambling_addiction_history', 'smoking_addiction_history', 'alcohol_addiction_history', 'drug_addiction_history', 'sex_addiction_history', 'ptsd_history', 'ocd_history', 'suicidal_ideation_history', 'age', 'phone', 'balance_owing', 'contact_number'], 'Sessions': ['therapist_id', 'client_id', 'id', 'date', 'location', 'name', 'duration', 'therapy_type_id', 'cost', 'start_time', 'session_type', 'rate', '', 'SessionNotes', 'SessionID', 'SessionDate', 'CounselorID'], 'Therapists': ['id', 'name', 'gender', 'email', 'phone', 'license_state', 'experience_years', 'last_name', 'is_active', 'is_licensed', 'rate_per_hour'], 'Billing': ['session_id', 'date', 'amount', 'id', 'start_time', 'end_time'], 'Session_Attendees': ['session_id', 'client_id', 'attendee_type', 'attended', 'id'], 'Client_Diagnoses': ['client_id', 'diagnosis_id'], 'Diagnoses': ['id', 'name']}. \n# the user question is: Retrieve the names and total amount billed for all therapists who have billed for sessions with a client who has a diagnosis of bipolar disorder and have been billed for at least six sessions during the past month, sorted in descending order by total amount billed:. \n#SQL query: SELECT t.name, SUM(b.amount) AS total_billed FROM Therapists t INNER JOIN Sessions s ON t.id = s.therapist_id INNER JOIN Billing b ON s.id = b.session_id INNER JOIN Session_Attendees sa ON s.id = sa.session_id INNER JOIN Clients c ON sa.client_id = c.id INNER JOIN Client_Diagnoses cd ON c.id = cd.client_id INNER JOIN Diagnoses d ON cd.diagnosis_id = d.id WHERE d.name = 'Bipolar Disorder' AND b.date >= date('now', '-1 month') GROUP BY t.id HAVING COUNT(DISTINCT s.id) >= 6 ORDER BY total_billed DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 5% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 5% or more.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount >= 0.05;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Status = 'In Stock' AND p.Product_Discount >= 0.05",
    "prompt_token_number": 893,
    "response_token_number": 64
},
{
    "id": 34639,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'products': ['category', 'price', 'name', 'id', 'White', 'Chair', 'Office', 'category_id', 'country_of_origin', 'cost', 'material', 'product_name', 'description', 'Modern Sofa', 'discontinued', 'designer_id', 'product_price', 'manufacturing_date', 'product_id', 'manufacturer', 'manufacturer_id', 'design_tool']}. \n# the user question is: Select the 'product_name' and 'price' columns from the 'products' table where the 'price' column is greater than or equal to 10 and less than or equal to 50:. \n#SQL query: SELECT product_name, price FROM products WHERE price >= 10 AND price <= 50;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to research and development and have taken at least one leave of absence during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to research and development and have taken at least one leave of absence during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Research and Development%' INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name \nFROM Employee \nINNER JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nINNER JOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nINNER JOIN Project ON Task.Project_ID = Project.Project_ID \nINNER JOIN Leave ON Employee.Employee_ID = Leave.Employee_ID \nWHERE Project.Project_Name = 'Research and Development' \nAND Leave.Leave_Start_Date >= Project.Project_Start_Date \nAND Leave.Leave_End_Date <= Project.Project_End_Date;",
    "prompt_token_number": 536,
    "response_token_number": 94
},
{
    "id": 34640,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months'], 'Story': ['story_id', 'headline', 'content', 'date_published', 'outlet_id', 'campaign_id', 'date', 'journalist_id', 'sentiment_score', 'body', 'views', 'shares', 'likes', 'clicks', 'impressions', 'comments', 'text', 'publication_date', 'word_count'], 'Influencer': ['influencer_id', 'first_name', 'last_name', 'email', 'phone_number', 'followers', 'profile', 'age'], 'Endorsement': ['endorsement_id', 'influencer_id', 'product_name', 'date_posted', 'campaign_id', 'fee'], 'MediaOutlet': ['outlet_id', 'name', 'outlet_type', 'state', 'city', 'contact_info', 'rating_id', 'language', 'location_id', 'email', 'circulation']}. \n# the user question is: Retrieve the names and types of all media outlets that have been featured in a story associated with a campaign that has at least one endorsement from an influencer with the keyword \"travel\" in their profile and the campaign has been featured in a story with the sentiment score greater than 0.6:. \n#SQL query: SELECT DISTINCT MediaOutlet.name, MediaOutlet.outlet_type FROM MediaOutlet INNER JOIN Story ON MediaOutlet.outlet_id = Story.outlet_id INNER JOIN Campaign ON Story.campaign_id = Campaign.campaign_id INNER JOIN Endorsement ON Campaign.campaign_id = Endorsement.campaign_id INNER JOIN Influencer ON Endorsement.influencer_id = Influencer.influencer_id WHERE Influencer.profile LIKE '%travel%' AND Story.sentiment_score > 0.6;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently out of stock and has a discount of 10% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is currently out of stock and has a discount of 10% or more.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Discount >= 0.1;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nINNER JOIN Order ON Customer.Customer_ID = Order.Customer_ID \nINNER JOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nINNER JOIN Product ON Order_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Status = 'out of stock' AND Product.Product_Discount >= 10;",
    "prompt_token_number": 765,
    "response_token_number": 67
},
{
    "id": 34642,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']}. \n# the user question is: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $50 billion and have been updated in the last 5000 days:. \n#SQL query: SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 50000000000 AND Creatives.updated_at BETWEEN DATE('now', '-5000 days') AND DATE('now');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price greater than $500 and a discount of 25% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for a product that has a price greater than $500 and a discount of 25% or more.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price > 500 AND pr.Product_Discount >= 0.25;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name FROM Supplier\nJOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID\nJOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID\nJOIN Product ON Purchase_Item.Product_ID = Product.Product_ID\nWHERE Product.Product_Price > 500 AND Product.Product_Discount >= 25;",
    "prompt_token_number": 492,
    "response_token_number": 65
},
{
    "id": 34643,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Goals': ['goal_id', 'goal_name', 'goal_description', 'goal_due_date', 'user_id', 'program_id', 'goal_target', 'goal_type', 'goal_end_date', 'goal_target_date', 'goal_start_date', 'goal_status', 'goal_value'], 'Progress': ['progress_id', 'goal_id', 'user_id', 'progress_date', 'progress_value', 'date_recorded']}. \n# the user question is: Find the names and email addresses of all users who have achieved their goals:. \n#SQL query: SELECT Users.first_name, Users.last_name, Users.email FROM Users JOIN Goals ON Users.user_id = Goals.user_id JOIN Progress ON Goals.goal_id = Progress.goal_id WHERE Progress.progress_value >= Goals.goal_target;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have not received any purchases for a product that has a price less than $50.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have not received any purchases for a product that has a price less than $50.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID LEFT JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID LEFT JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price < 50 WHERE pi.Product_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT Supplier.Supplier_Name FROM Supplier WHERE Supplier.Supplier_ID NOT IN (SELECT Product.Supplier_ID FROM Product JOIN Purchase_Item ON Product.Product_ID = Purchase_Item.Product_ID WHERE Product.Product_Price < 50)",
    "prompt_token_number": 500,
    "response_token_number": 42
},
{
    "id": 34644,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Gene_Publication': ['gene_id', 'publication_id'], 'Publication': ['title', 'publication_id', 'publication_date', 'journal_name']}. \n# the user question is: Retrieve the names of all publications and their associated genes that have been published in a journal with the word \"Nature Reviews Genetics\" in the name and have a gene name that contains the word \"fusion\" or \"editing\".. \n#SQL query: SELECT Publication.title, Gene.gene_name FROM Publication JOIN Gene_Publication ON Publication.publication_id = Gene_Publication.publication_id JOIN Gene ON Gene_Publication.gene_id = Gene.gene_id WHERE Publication.journal_name LIKE '%Nature Reviews Genetics%' AND (Gene.gene_name LIKE '%fusion%' OR Gene.gene_name LIKE '%editing%');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to marketing and have taken at least two leave of absences during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to marketing and have taken at least two leave of absences during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Marketing%' INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID HAVING COUNT(DISTINCT l.Leave_ID) >= 2;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name \nFROM Employee \nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nJOIN Project ON Task.Project_ID = Project.Project_ID \nJOIN Leave ON Employee.Employee_ID = Leave.Employee_ID \nWHERE Project.Project_Name LIKE '%marketing%' \nAND Leave.Leave_Start_Date >= Project.Project_Start_Date \nAND Leave.Leave_End_Date <= Project.Project_End_Date \nGROUP BY Employee.Employee_Name HAVING COUNT(Leave.Leave_ID) >= 2;",
    "prompt_token_number": 610,
    "response_token_number": 106
},
{
    "id": 34645,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'employees': ['salary', 'department', 'hire_date', 'employee_id', 'last_name', 'first_name', 'name', 'experience', 'position', 'hourly_wage']}. \n# the user question is: Find the number of employees who have joined the company in each year since 2010:. \n#SQL query: SELECT strftime('%Y', hire_date) as year, COUNT(*) as total_employees FROM employees WHERE hire_date >= '2010-01-01' GROUP BY year\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 15% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 15% or more.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount >= 0.15;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer_Name \nFROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Status = 'in stock' AND Product.Product_Discount >= 15",
    "prompt_token_number": 429,
    "response_token_number": 61
},
{
    "id": 34648,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Employees': ['first_name', 'employee_id', 'last_name', 'hire_date', 'salary', 'job_title_id', 'department_id', 'location_id', 'job_title', 'employee_status_id', 'employee_experience', 'certification_id', 'equipment_rental_cost', 'hourly_rate', 'Salary', 'Department'], 'Project_Employees': ['employee_id', 'project_id', 'end_date'], 'Task_Employees': ['employee_id', 'task_id', 'hours_worked', 'project_id', 'task_employee_id', 'task_employee_role', 'task_employee_cost', 'task_hours', 'rental_id', 'end_date'], 'Tasks': ['start_date', 'task_name', 'due_date', 'end_date', 'task_id', 'priority', 'task_status', 'project_id', 'task_priority_id', 'task_status_id', 'task_start_date', 'task_end_date', 'task_expected_completion_date', 'task_completion_percentage', 'task_estimated_cost', 'task_due_date', 'actual_end_date', 'actual_start_date', 'task_lead_id', 'actual_cost', 'employee_i', 'task_description']}. \n# the user question is: List all the employees who have worked on a project that has a duration of more than 12 months and have been assigned to a task that has a priority of high.. \n#SQL query: SELECT DISTINCT e.first_name, e.last_name FROM Employees e INNER JOIN Project_Employees pe ON e.employee_id = pe.employee_id INNER JOIN Projects p ON pe.project_id = p.project_id INNER JOIN Task_Employees te ON e.employee_id = te.employee_id INNER JOIN Tasks t ON te.task_id = t.task_id WHERE (julianday(p.end_date) - julianday(p.start_date)) > 365 AND t.priority = 'High';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 30% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 30% or more.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount >= 0.3;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Status = 'In Stock' AND p.Product_Discount >= 30;",
    "prompt_token_number": 862,
    "response_token_number": 63
},
{
    "id": 34650,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['Client_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'City', 'Email_Address', 'Phone_Number', 'State', 'ClientName', 'ClientID', 'Name', 'ID', 'Status', 'Balance', 'pending_case', 'legal_fees'], 'Cases': ['Case_ID', 'Case_Name', 'Case_Description', 'Client_ID', 'Case_Status', 'Lawyer_ID', 'Last_Updated', 'Date_Opened', 'Date_Closed', 'Status', 'Case_Closed_Date', 'Practice_Area_ID', 'Case_Manager_ID', 'Open_Date', 'Closed', 'Case_End_Date', 'Case_Start_Date', 'Firm_ID', 'Office_ID', 'CaseStatus', 'CaseNumber', 'ClientID', 'CaseTitle', 'CaseTypeID', 'CaseType', 'CourtName', 'ClosedDate', 'Settlement', 'ID', 'HearingDate', 'ClosingDate', 'AppealStatus', 'LawyerID', 'OpeningDate', 'verdict', 'judge_id', 'defendant_state', 'plaintiff_state', 'lawyer_id'], 'Case_Statuses': ['Status_Name', 'Case_ID', 'Status_Date']}. \n# the user question is: List the names of clients who have cases that were closed in the last 3 months:. \n#SQL query: SELECT DISTINCT Clients.First_Name, Clients.Last_Name FROM Clients JOIN Cases ON Clients.Client_ID = Cases.Client_ID JOIN Case_Statuses ON Cases.Case_ID = Case_Statuses.Case_ID WHERE Case_Statuses.Status_Name = 'Closed' AND (julianday('now') - julianday(Case_Statuses.Status_Date)) <= 90;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have not received any purchases for a product that has a price less than $100 and a discount of 15% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have not received any purchases for a product that has a price less than $100 and a discount of 15% or more.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID LEFT JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID LEFT JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price < 100 AND pr.Product_Discount >= 0.15 WHERE pi.Product_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name \nFROM Supplier \nWHERE Supplier.Supplier_ID NOT IN (\n    SELECT DISTINCT Purchase.Supplier_ID \n    FROM Purchase \n    JOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID\n    JOIN Product ON Purchase_Item.Product_ID = Product.Product_ID\n    WHERE Product.Product_Price < 100 AND Product.Product_Discount >= 15);\n",
    "prompt_token_number": 671,
    "response_token_number": 76
},
{
    "id": 34651,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'patient': ['email', 'phone_number', 'patient_id', 'name'], 'symptom': ['symptom_id', 'name'], 'patient_symptom': ['symptom_id', 'patient_id']}. \n# the user question is: Find the names and contact information of all patients who have reported symptoms of headaches:. \n#SQL query: SELECT patient.name, patient.phone_number, patient.email FROM patient JOIN patient_symptom ON patient.patient_id = patient_symptom.patient_id JOIN symptom ON patient_symptom.symptom_id = symptom.symptom_id WHERE symptom.name = 'Headache';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to sales and have taken at least one leave of absence during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to sales and have taken at least one leave of absence during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Sales%' INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name\nFROM Employee\nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID\nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID\nJOIN Project ON Task.Project_ID = Project.Project_ID\nJOIN Leave ON Employee.Employee_ID = Leave.Employee_ID\nWHERE Project.Project_Name LIKE '%sales%'\nAND Leave.Leave_Start_Date >= Project.Project_Start_Date\nAND Leave.Leave_End_Date <= COALESCE(Project.Project_Actual_End_Date, Project.Project_Estimated_End_Date)\nGROUP BY Employee.Employee_Name\nHAVING COUNT(Leave.Leave_ID) >= 1;",
    "prompt_token_number": 500,
    "response_token_number": 119
},
{
    "id": 34652,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Illustrations': ['user_id', 'illustration_id', 'upload_date', 'title', 'price', 'category_id', 'discount', 'creation_date', 'artist_id', 'description'], 'Users': ['username', 'user_id', 'address_id', 'work_address_id', 'last_active_date', 'home_address_id', 'last_activity_date', 'registration_date', 'email', 'total_purchase_amount', 'user_type_id', 'country', 'name'], 'Illustration_tags': ['tag_name', 'tag_id', 'illustration_id'], 'Illustration_tag_map': ['tag_id', 'illustration_id'], 'Addresses': ['state_id', 'address_id', 'city', 'street_address', 'city_id', 'country_id'], 'States': ['country_id', 'state_id', 'state_name', 'sales_tax_rate', 'population_density', 'time_zone', 'population', 'state_code']}. \n# the user question is: Get the details of all illustrations that have been uploaded by users who live in a state that has a population of at least 2 million and have been tagged with the tag 'fantasy':. \n#SQL query: SELECT Illustrations.title, Users.username, States.state_name, Illustration_tags.tag_name FROM Illustrations INNER JOIN Users ON Illustrations.user_id = Users.user_id INNER JOIN Addresses ON Users.address_id = Addresses.address_id INNER JOIN States ON Addresses.state_id = States.state_id INNER JOIN Illustration_tag_map ON Illustrations.illustration_id = Illustration_tag_map.illustration_id INNER JOIN Illustration_tags ON Illustration_tag_map.tag_id = Illustration_tags.tag_id WHERE Illustration_tags.tag_name = 'fantasy' AND States.population >= 2000000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently in stock and has a discount between 5% and 10%.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is currently in stock and has a discount between 5% and 10%.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount BETWEEN 0.05 AND 0.1;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nINNER JOIN Order ON Customer.Customer_ID = Order.Customer_ID \nINNER JOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nINNER JOIN Product ON Order_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Status = 'in stock' \nAND Product.Product_Discount BETWEEN 5 AND 10;",
    "prompt_token_number": 683,
    "response_token_number": 70
},
{
    "id": 34654,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_name', 'project_id', 'start_date', 'end_date', 'description', 'num_teams', 'created_by', 'user_i']}. \n# the user question is: What is the end date of the 'Project C'?. \n#SQL query: SELECT end_date FROM Projects WHERE project_name = 'Project C';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price between $50 and $100 and a discount of 20% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for a product that has a price between $50 and $100 and a discount of 20% or more.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price BETWEEN 50 AND 100 AND pr.Product_Discount >= 0.2;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier_Name \nFROM Supplier \nWHERE Supplier_ID IN \n    (SELECT Supplier_ID \n    FROM Purchase \n    WHERE Purchase_ID IN \n        (SELECT Purchase_ID \n        FROM Purchase_Item \n        WHERE Product_ID IN \n            (SELECT Product_ID \n            FROM Product \n            WHERE Product_Price BETWEEN 50 AND 100 AND Product_Discount >= 20)));",
    "prompt_token_number": 382,
    "response_token_number": 74
},
{
    "id": 34655,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Programs': ['program_id', 'program_name', 'program_description', 'start_date', 'end_date', 'status', 'Program'], 'Program_Workouts': ['workout_id', 'program_id'], 'User_Workouts': ['workout_id', 'date_completed', 'user_id', 'calories_burned', 'program_id', 'duration', 'date_scheduled', 'avg_heart_rate', 'workout_date', 'workout_status', 'workout_duration']}. \n# the user question is: Find the name and email address of the user who has completed the most workouts in the program with name \"Weight Lifting Program\" in the past month:. \n#SQL query: SELECT Users.first_name, Users.last_name, Users.email, COUNT(User_Workouts.workout_id) AS num_workouts_completed FROM Users JOIN User_Workouts ON Users.user_id = User_Workouts.user_id JOIN Program_Workouts ON User_Workouts.workout_id = Program_Workouts.workout_id JOIN Programs ON Program_Workouts.program_id = Programs.program_id WHERE Programs.program_name = 'Weight Lifting Program' AND User_Workouts.date_completed BETWEEN date('now', '-30 days') AND date('now') GROUP BY Users.user_id ORDER BY num_workouts_completed DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on any projects in the last year and have not taken any leave of absence during that period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have not worked on any projects in the last year and have not taken any leave of absence during that period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN DATE('now', '-1 year') AND DATE('now') LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN DATE('now', '-1 year') AND DATE('now') WHERE t.Time_Entry_ID IS NULL AND l.Leave_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name \nFROM Employee \nWHERE Employee_ID NOT IN (\n    SELECT Employee_ID \n    FROM Time_Entry\n    WHERE Time_Entry_Date BETWEEN date('now', '-1 year') AND date('now'))\nAND Employee_ID NOT IN (\n    SELECT Employee_ID \n    FROM Leave\n    WHERE Leave_Start_Date BETWEEN date('now', '-1 year') AND date('now'));",
    "prompt_token_number": 568,
    "response_token_number": 77
},
{
    "id": 34656,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Patients': ['medical_history', 'patient_id', 'first_name', 'last_name', 'age_group', 'gender', 'Age', 'Contact_Info', 'Name', 'Diagnosis', 'Discharge_Date', 'Admission_Date', 'Address', 'Family_History', 'Patient_ID', 'Doctor_ID', 'Doctor_I', 'AdmissionDate', 'Therapy', 'date_of_birth', 'name'], 'Medications': ['medication_name', 'patient_id', 'start_date', 'end_date', 'medical_record_id', 'admission_id', 'dosage', 'quantity', 'frequency', 'duration', 'medication_id', 'drug_class', 'medication_type', 'dosage_amount', 'TimeToAdminister']}. \n# the user question is: Find the patients who have been prescribed a medication with a frequency of once a day and a dosage greater than 10mg.. \n#SQL query: SELECT DISTINCT Patients.patient_id, Patients.first_name, Patients.last_name, Medications.medication_name, Medications.frequency, Medications.dosage FROM Patients INNER JOIN Medications ON Patients.patient_id = Medications.patient_id WHERE Medications.frequency = 'once a day' AND Medications.dosage > 10;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently out of stock and has a discount between 10% and 20%.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is currently out of stock and has a discount between 10% and 20%.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Discount BETWEEN 0.1 AND 0.2;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nINNER JOIN Order ON Customer.Customer_ID = Order.Customer_ID \nINNER JOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nINNER JOIN Product ON Order_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Status = 'Out of Stock' \nAND Product.Product_Discount BETWEEN 0.1 AND 0.2;",
    "prompt_token_number": 586,
    "response_token_number": 75
},
{
    "id": 34657,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Comedians': ['first_name', 'last_name', 'comedian_id', 'nationality', 'birthplace', 'country_id', 'birth_year', 'gender', 'name', 'city_id', 'school_id', 'birth_state', 'netflix_special', 'youtube_subscribers', 'experience'], 'Performances': ['rating', 'comedian_id', 'show_id', 'performance_id', 'special_id', 'venue_id', 'production_id', 'performance_date'], 'Shows': ['year', 'show_id', 'title', 'description', 'location', 'venue_id', 'duration', 'network', 'release_date', 'Sticks', 'date_recorded', 'name', 'duration_minutes', 'recorded_year', 'date'], 'Special_Networks': ['special_id', 'network_id'], 'Networks': ['network_id', 'name']}. \n# the user question is: Retrieve the names of all comedians who have performed in a show that had a rating of at least 8 and was released on HBO.. \n#SQL query: SELECT DISTINCT c.first_name, c.last_name FROM Comedians c JOIN Performances p ON p.comedian_id = c.comedian_id JOIN Shows s ON s.show_id = p.show_id JOIN Special_Networks sn ON sn.special_id = s.show_id JOIN Networks n ON n.network_id = sn.network_id WHERE n.name = 'HBO' AND p.rating >= 8;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have not received any purchases for a product that has a price less than $50 and a discount of 10% or less.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have not received any purchases for a product that has a price less than $50 and a discount of 10% or less.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID LEFT JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID LEFT JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price < 50 AND pr.Product_Discount <= 0.1 WHERE pi.Product_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT s.Supplier_Name \nFROM Supplier s \nWHERE s.Supplier_ID NOT IN (\n    SELECT p.Supplier_ID \n    FROM Purchase p JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID \n    JOIN Product pr ON pi.Product_ID = pr.Product_ID \n    WHERE pr.Product_Price < 50 AND pr.Product_Discount <= 10\n);",
    "prompt_token_number": 613,
    "response_token_number": 76
},
{
    "id": 34658,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Film': ['film_id', 'title', 'rating', 'release_date', 'runtime', 'box_office', 'director_id', 'duration_minutes', 'budget', 'release_year', 'production_company_id', 'country_id', 'year', 'length', 'is_sequel', 'runtime_minutes', 'awards', 'revenue'], 'Director': ['last_name', 'director_id', 'first_name', 'country_id', 'production_company_id', 'gender']}. \n# the user question is: Find the directors who have directed at least one film with more than 5 hours of runtime:. \n#SQL query: SELECT Director.first_name, Director.last_name FROM Director WHERE Director.director_id IN ( SELECT Film.director_id FROM Film WHERE Film.runtime_minutes > 300 );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 25% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 25% or more.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount >= 0.25;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name FROM Customer WHERE Customer.Customer_ID IN ( SELECT Order.Customer_ID FROM Order WHERE Order.Order_ID IN ( SELECT Order_Item.Order_ID FROM Order_Item WHERE Order_Item.Product_ID IN ( SELECT Product.Product_ID FROM Product WHERE Product.Product_Status = 'In Stock' AND Product.Product_Discount >= 25)));",
    "prompt_token_number": 485,
    "response_token_number": 64
},
{
    "id": 34660,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Designs': ['artist_id', 'design_name', 'design_id', 'design_description', 'Tree', 'designer_id', 'date_created'], 'Etchings': ['etching_id', 'etching_date', 'order_id', 'design_id', 'etching_description', 'etching_name', 'description', 'price', 'etching_image'], 'Etching_Glassware_Items': ['etching_id', 'quantity', 'glassware_item_id', 'etching_glassware_item_id']}. \n# the user question is: Retrieve the list of etchings along with the name of the design they are associated with and the total quantity of glassware items that have been etched with each etching, where the quantity is greater than 5, sorted by quantity in descending order.. \n#SQL query: SELECT Etchings.etching_id, Designs.design_name, SUM(Etching_Glassware_Items.quantity) AS total_items_etched FROM Etchings INNER JOIN Designs ON Etchings.design_id = Designs.design_id INNER JOIN Etching_Glassware_Items ON Etchings.etching_id = Etching_Glassware_Items.etching_id GROUP BY Etchings.etching_id HAVING total_items_etched > 5 ORDER BY total_items_etched DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price greater than $75 and a discount of 5% or less.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for a product that has a price greater than $75 and a discount of 5% or less.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price > 75 AND pr.Product_Discount <= 0.05;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name FROM Supplier INNER JOIN Product ON Supplier.Supplier_ID = Product.Supplier_ID INNER JOIN Purchase_Item ON Product.Product_ID = Purchase_Item.Product_ID WHERE Product.Product_Price > 75 AND Product.Product_Discount <= 5;",
    "prompt_token_number": 578,
    "response_token_number": 50
},
{
    "id": 34661,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Games': ['game_id', 'game_title', 'game_publisher', 'game_release_date', 'game_developer'], 'Game_Platforms': ['platform_id', 'game_id', 'online_players'], 'Platforms': ['platform_id', 'platform_name', 'platform_release_date', 'platform_manufacturer', 'platform_publisher', 'platform_release_year', 'manufacturer_id'], 'Game_Ratings': ['rating_id', 'game_id'], 'Ratings': ['rating_name', 'rating_id', 'rating_value']}. \n# the user question is: Find the names of all games that have a \"Teen\" or \"Mature\" rating and have been released on either the \"PlayStation 4\" or \"Xbox One\" platforms.. \n#SQL query: SELECT DISTINCT Games.game_title FROM Games INNER JOIN Game_Ratings ON Games.game_id = Game_Ratings.game_id INNER JOIN Ratings ON Game_Ratings.rating_id = Ratings.rating_id INNER JOIN Game_Platforms ON Games.game_id = Game_Platforms.game_id INNER JOIN Platforms ON Game_Platforms.platform_id = Platforms.platform_id WHERE (Ratings.rating_name = 'T (Teen)' OR Ratings.rating_name = 'M (Mature)') AND (Platforms.platform_name = 'PlayStation 4' OR Platforms.platform_name = 'Xbox One');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on any projects in the last 3 months and have taken at least one leave of absence during that period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have not worked on any projects in the last 3 months and have taken at least one leave of absence during that period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN DATE('now', '-3 months') AND DATE('now') LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN DATE('now', '-3 months') AND DATE('now') WHERE t.Time_Entry_ID IS NULL AND l.Leave_ID IS NOT NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name \nFROM Employee \nLEFT JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nLEFT JOIN Leave ON Employee.Employee_ID = Leave.Employee_ID \nWHERE Time_Entry.Time_Entry_Date < DATEADD(MONTH, -3, GETDATE()) \nAND Leave.Leave_Start_Date >= DATEADD(MONTH, -3, GETDATE());",
    "prompt_token_number": 535,
    "response_token_number": 74
},
{
    "id": 34662,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'EnergySuppliers': ['supplier_name', 'supplier_id', 'contact_name', 'phone_number', 'supplier_state', 'supplier_city', 'supplier_address', 'supplier_zip', 'supplier_location'], 'EnergySources': ['source_id', 'source_name', 'last_active', 'Solar', 'Panels', 'supplier_id', 'start_date', 'end_date', 'product_id', 'source_type', 'capacity', 'source_capacity', 'user_id'], 'EnergyProduction': ['source_id', 'end_date', 'start_date', 'production_value', 'reading_id', 'meter_id', 'production_date']}. \n# the user question is: Retrieve the names of all energy suppliers and their respective sources, and the total energy production for each source for the month of February 2031, where the source type is \"hydropower\" and the supplier has an office in the state of Washington.. \n#SQL query: SELECT s.supplier_name, src.source_name, SUM(pr.production_value) AS total_production FROM EnergySuppliers s INNER JOIN EnergySources src ON s.supplier_id = src.supplier_id INNER JOIN EnergyProduction pr ON src.source_id = pr.source_id WHERE s.supplier_state = 'Washington' AND src.source_type = 'hydropower' AND pr.start_date >= '2031-02-01' AND pr.end_date <= '2031-02-28' GROUP BY s.supplier_id, src.source_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently out of stock and has a discount of 30% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is currently out of stock and has a discount of 30% or more.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Discount >= 0.3;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Status = 'out of stock' AND p.Product_Discount >= 30;",
    "prompt_token_number": 622,
    "response_token_number": 64
},
{
    "id": 34664,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Project_Contractors': ['project_id', 'contractor_id', 'end_date', 'project_contractor_id', 'contract_date'], 'Employees': ['first_name', 'employee_id', 'last_name', 'hire_date', 'salary', 'job_title_id', 'department_id', 'location_id', 'job_title', 'employee_status_id', 'employee_experience', 'certification_id', 'equipment_rental_cost', 'hourly_rate', 'Salary', 'Department'], 'Project_Employees': ['employee_id', 'project_id', 'end_date'], 'Contractors': ['contractor_name', 'contractor_id', 'rating']}. \n# the user question is: List all the employees who have worked on a project that involves a contractor with a rating of at least 9.. \n#SQL query: SELECT DISTINCT e.first_name, e.last_name FROM Employees e INNER JOIN Project_Employees pe ON e.employee_id = pe.employee_id INNER JOIN Projects p ON pe.project_id = p.project_id INNER JOIN Project_Contractors pc ON p.project_id = pc.project_id INNER JOIN Contractors c ON pc.contractor_id = c.contractor_id WHERE c.rating >= 9;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price less than $100 and a discount of 5% or less, but have not received any purchases for a product that has a price greater than $100 and a discount of 10% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for a product that has a price less than $100 and a discount of 5% or less, but have not received any purchases for a product that has a price greater than $100 and a discount of 10% or more.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price < 100 AND pr.Product_Discount <= 0.05 WHERE s.Supplier_ID NOT IN ( SELECT s2.Supplier_ID FROM Supplier s2 INNER JOIN Purchase p2 ON s2.Supplier_ID = p2.Supplier_ID INNER JOIN Purchase_Item pi2 ON p2.Purchase_ID = pi2.Purchase_ID INNER JOIN Product pr2 ON pi2.Product_ID = pr2.Product_ID AND pr2.Product_Price > 100 AND pr2.Product_Discount >= 0.1 );",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT s.Supplier_Name FROM Supplier s \nINNER JOIN Product p ON s.Supplier_ID = p.Supplier_ID \nINNER JOIN Purchase_Item pi ON p.Product_ID = pi.Product_ID \nWHERE p.Product_Price < 100 AND p.Product_Discount <= 5 \nAND s.Supplier_ID NOT IN (SELECT DISTINCT s.Supplier_ID FROM Supplier s \nINNER JOIN Product p ON s.Supplier_ID = p.Supplier_ID \nINNER JOIN Purchase_Item pi ON p.Product_ID = pi.Product_ID \nWHERE p.Product_Price > 100 AND p.Product_Discount >= 10);",
    "prompt_token_number": 735,
    "response_token_number": 118
},
{
    "id": 34665,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'invoices': ['customer_id', 'total', 'invoice_date', 'vendor_id', 'payment_status', 'due_date', 'salesperson_id', 'billing_country', 'invoice_id', 'amount', 'payment_date', 'total_amount'], 'customers': ['country', 'customer_id', 'customer_name', 'support_rep_id', 'last_name', 'first_name', 'email', 'salesperson_id', 'name', 'phone', 'id', 'balance', 'customer_email'], 'invoice_items': ['total', 'product_id', 'quantity', 'track_id', 'unit_price', 'invoice_id']}. \n# the user question is: Find the number of tracks purchased by each customer:. \n#SQL query: SELECT c.first_name || ' ' || c.last_name as customer_name, COUNT(*) as total_tracks FROM customers c INNER JOIN invoices i ON c.customer_id = i.customer_id INNER JOIN invoice_items ii ON i.invoice_id = ii.invoice_id GROUP BY customer_name ORDER BY total_tracks DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 20% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 20% or more.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount >= 0.2;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT c.Customer_Name\nFROM Customer c\nINNER JOIN Order o ON c.Customer_ID = o.Customer_ID\nINNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nINNER JOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Status = 'in stock' AND p.Product_Discount >= 20",
    "prompt_token_number": 531,
    "response_token_number": 67
},
{
    "id": 34667,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Activities': ['activity_id', 'program_id', 'activity_type', 'goal_id', 'activity_category', 'activity_intensity_factor', 'activity_name', 'Strength', 'Training'], 'User_Activities': ['activity_value', 'activity_id', 'date_recorded', 'user_id', 'activity_units', 'activity_date', 'activity_duration', 'activity_intensity', 'activity_hr', 'activity_distance', 'activity_calories', 'activity_count', 'duration', 'distance', 'weight', 'heart_rate', 'date_completed', 'activity_name', 'calories_burned']}. \n# the user question is: Find the number of users who have completed a \"Swimming\" activity with a distance of at least 1 km in the last 14 days:. \n#SQL query: SELECT COUNT(DISTINCT Users.user_id) AS Number_of_Users FROM Users JOIN User_Activities ON Users.user_id = User_Activities.user_id JOIN Activities ON User_Activities.activity_id = Activities.activity_id WHERE Activities.activity_type = 'Swimming' AND User_Activities.distance >= 1 AND User_Activities.activity_date BETWEEN date('now', '-14 days') AND date('now');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have not received any purchases for a product that has a price greater than $200 and a discount of 15% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have not received any purchases for a product that has a price greater than $200 and a discount of 15% or more.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID LEFT JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID LEFT JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price > 200 AND pr.Product_Discount >= 0.15 WHERE pi.Product_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT Supplier.Supplier_Name FROM Supplier WHERE Supplier.Supplier_ID NOT IN (SELECT Product.Supplier_ID FROM Product JOIN Purchase_Item ON Product.Product_ID = Purchase_Item.Product_ID WHERE Product.Product_Price > 200 AND Product.Product_Discount >= 15);",
    "prompt_token_number": 595,
    "response_token_number": 50
},
{
    "id": 34668,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Employees': ['first_name', 'employee_id', 'last_name', 'hire_date', 'salary', 'job_title_id', 'department_id', 'location_id', 'job_title', 'employee_status_id', 'employee_experience', 'certification_id', 'equipment_rental_cost', 'hourly_rate', 'Salary', 'Department'], 'Project_Ratings': ['rating', 'project_id', 'total_cost'], 'Project_Statuses': ['project_status_name', 'project_status_id']}. \n# the user question is: List all the projects with a project rating of \"Poor\" and a project status of \"Delayed\" or \"Cancelled\", and have a project manager whose last name is \"Smith\".. \n#SQL query: SELECT DISTINCT p.project_name FROM Projects p INNER JOIN Project_Ratings pr ON p.project_id = pr.project_id INNER JOIN Project_Statuses ps ON p.project_status_id = ps.project_status_id INNER JOIN Employees e ON p.project_manager_id = e.employee_id WHERE pr.rating = 'Poor' AND ps.project_status_name IN ('Delayed', 'Cancelled') AND e.last_name = 'Smith';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently out of stock and has a discount of 50% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is currently out of stock and has a discount of 50% or more.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Discount >= 0.5;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock = 0 AND p.Product_Discount >= 50;",
    "prompt_token_number": 707,
    "response_token_number": 62
},
{
    "id": 34670,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'therapists': ['first_name', 'last_name', 'therapist_id', 'cnt', 'gender', 'is_available', 'specialty', 'last_login_date', 'session_count'], 'appointments': ['appointment_id', 'therapist_id', 'appointment_date', 'patient_id', 'end_time', 'start_time', 'session_duration_minutes', 'session_cost', 'satisfaction_rating', 'is_missed', 'sessions_per_week', 'session_length_minutes', 'start_date', 'attended', 'end_date', 'therapy_id'], 'patient_diagnoses': ['diagnosis_id', 'patient_id', 'patient_diagnosis_id', 'severity'], 'diagnoses': ['diagnosis_id', 'diagnosis_name', 'session_count'], 'payments': ['payment_id', 'payment_date', 'patient_id', 'payment_amount', 'appointment_count', 'therapist_id', 'appointment_id', 'price']}. \n# the user question is: Retrieve the names of the therapists who have treated patients with anxiety and have received payments from those patients in the past month.. \n#SQL query: SELECT DISTINCT t.first_name || ' ' || t.last_name AS therapist_name FROM therapists t JOIN appointments a ON a.therapist_id = t.therapist_id JOIN patient_diagnoses pd ON pd.patient_id = a.patient_id JOIN diagnoses d ON d.diagnosis_id = pd.diagnosis_id AND d.diagnosis_name = 'Anxiety' JOIN payments p ON p.patient_id = a.patient_id AND p.payment_date >= DATE('now', '-1 month');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have not received any purchases for a product that has a price less than $50 and a discount of 10% or more.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have not received any purchases for a product that has a price less than $50 and a discount of 10% or more.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID LEFT JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID LEFT JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price < 50 AND pr.Product_Discount >= 0.1 WHERE pi.Product_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT s.Supplier_Name \nFROM Supplier s \nLEFT JOIN Product p ON p.Supplier_ID = s.Supplier_ID \nLEFT JOIN Purchase_Item pi ON pi.Product_ID = p.Product_ID \nWHERE p.Product_Price < 50 AND p.Product_Discount >= 10 AND pi.Purchase_ID IS NULL;",
    "prompt_token_number": 633,
    "response_token_number": 63
},
{
    "id": 34671,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'account_transactions': ['amount', 'account_id', 'transaction_type', 'user_id', 'account_type', 'transaction_amount']}. \n# the user question is: Calculate the total amount of all deposits for a savings account with an account ID of 2:. \n#SQL query: SELECT SUM(amount) FROM account_transactions WHERE account_id = 2 AND transaction_type = 'Deposit';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to software development and have not taken any leave of absences during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that is related to software development and have not taken any leave of absences during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Software Development%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE l.Leave_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT E.Employee_Name \nFROM Employee E \nJOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID \nJOIN Task T ON TE.Task_ID = T.Task_ID \nJOIN Project P ON T.Project_ID = P.Project_ID \nLEFT JOIN Leave L ON E.Employee_ID = L.Employee_ID AND L.Leave_Start_Date BETWEEN P.Project_Start_Date AND IFNULL(P.Project_Actual_End_Date, P.Project_End_Date)\nWHERE P.Project_Name LIKE '%software development%' \nAND L.Employee_ID IS NULL;",
    "prompt_token_number": 460,
    "response_token_number": 102
},
{
    "id": 34672,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Menu_Items': ['Menu_Item_ID', 'Menu_Item_name', 'Description', 'Price', 'Availability', 'Recipe_ID', 'Category_ID', 'Restaurant_ID', 'Vegetarian', 'Calories', 'Menu_Category_ID'], 'Order_Items': ['Order_Item_ID', 'Order_ID', 'Menu_Item_ID', 'Quantity', 'Menu_Item_I'], 'Categories': ['Category_ID', 'Category_name']}. \n# the user question is: Retrieve the name and total revenue generated by each menu category, sorted in descending order by total revenue.. \n#SQL query: SELECT Categories.Category_name, SUM(Menu_Items.Price * Order_Items.Quantity) AS Total_revenue FROM Categories JOIN Menu_Items ON Categories.Category_ID = Menu_Items.Category_ID JOIN Order_Items ON Menu_Items.Menu_Item_ID = Order_Items.Menu_Item_ID GROUP BY Categories.Category_ID ORDER BY Total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status']} and \n# the user question: List the names of all customers who have not placed an order in the last year.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have not placed an order in the last year.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c LEFT JOIN Order o ON c.Customer_ID = o.Customer_ID AND o.Order_Date BETWEEN DATE('now', '-1 year') AND DATE('now') WHERE o.Order_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ]
    },
    "response_text": "SELECT Customer.Customer_Name\nFROM Customer \nLEFT JOIN Order ON Customer.Customer_ID = Order.Customer_ID\nWHERE Order.Order_Date < DATE_SUB(CURDATE(), INTERVAL 1 YEAR) OR Order.Order_Date IS NULL;",
    "prompt_token_number": 371,
    "response_token_number": 43
},
{
    "id": 34676,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Lawyers': ['Lawyer_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'Specialization', 'Department_ID', 'City', 'Email_Address', 'Phone_Number', 'Hourly_Rate', 'Practice_Area_ID', 'Billing_Rate_ID', 'Firm_ID', 'FirmID', 'LawSchoolID', 'HourlyRate', 'Name', 'ID', 'ExperienceYears', 'years_of_experience', 'state', 'lawyer_id'], 'Billing_Rates': ['Effective_Date', 'Lawyer_ID', 'Rate', 'Billing_Rate_ID', 'Rate_Per_Hour', 'Hourly_Rate']}. \n# the user question is: List all the lawyers and their associated billing rates:. \n#SQL query: SELECT Lawyers.First_Name, Lawyers.Last_Name, Billing_Rates.Rate FROM Lawyers JOIN Billing_Rates ON Lawyers.Lawyer_ID = Billing_Rates.Lawyer_ID;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for products that have a price less than $50 and a discount of 10% or more in the last 3 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for products that have a price less than $50 and a discount of 10% or more in the last 3 months.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID AND p.Purchase_Date BETWEEN DATE('now', '-3 months') AND DATE('now') INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price < 50 AND pr.Product_Discount >= 0.1;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name \nFROM Supplier \nJOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID \nJOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID \nJOIN Product ON Purchase_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Price < 50 AND Product.Product_Discount >= 10 AND Purchase.Purchase_Date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);",
    "prompt_token_number": 512,
    "response_token_number": 82
},
{
    "id": 34677,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Actor': ['actor_id', 'name', 'actor_name'], 'Movie_Actor': ['movie_id', 'actor_id'], 'Box_Office': ['movie_id', 'revenue', 'budget']}. \n# the user question is: Retrieve the name of the actor, the title of the movie, and the box office revenue for all movies where the actor's name contains the word \"Hathaway\" and the revenue is greater than $400 million.. \n#SQL query: SELECT Actor.name, Movie.title, Box_Office.revenue FROM Movie JOIN Movie_Actor ON Movie.movie_id = Movie_Actor.movie_id JOIN Actor ON Movie_Actor.actor_id = Actor.actor_id JOIN Box_Office ON Movie.movie_id = Box_Office.movie_id WHERE Actor.name LIKE '%Hathaway%' AND Box_Office.revenue > 400000000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on at least two projects related to software development and have not taken any leave of absences during those project periods.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on at least two projects related to software development and have not taken any leave of absences during those project periods.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Software Development%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID HAVING COUNT(DISTINCT p.Project_ID) >= 2 AND COUNT(DISTINCT l.Leave_ID) = 0;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name \nFROM Employee \nJOIN Project ON Employee.Department_ID = Project.Department_ID \nJOIN Task ON Project.Project_ID = Task.Project_ID \nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID AND Task.Task_ID = Time_Entry.Task_ID \nLEFT JOIN Leave ON Employee.Employee_ID = Leave.Employee_ID AND (Leave.Leave_Start_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date OR Leave.Leave_End_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date) \nWHERE Task.Task_Name LIKE '%software development%' \nGROUP BY Employee.Employee_Name \nHAVING COUNT(DISTINCT Project.Project_ID) >= 2 AND COUNT(Leave.Leave_ID) = 0;",
    "prompt_token_number": 596,
    "response_token_number": 139
},
{
    "id": 34678,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Cultures': ['culture_id', 'name', 'region', 'time_period'], 'HumanRemains': ['remains_id', 'excavation_id', 'location', 'age_estimate', 'sex', 'analysis_notes', 'culture_id', 'height', 'lifespan'], 'Linguistics': ['linguistics_id', 'culture_id', 'language', 'language_family', 'phonetics']}. \n# the user question is: Find the names of cultures that have at least two different linguistic studies and the average age estimate of human remains is between 25 and 50 years:. \n#SQL query: SELECT Cultures.name FROM Cultures JOIN Linguistics ON Cultures.culture_id = Linguistics.culture_id JOIN HumanRemains ON Cultures.culture_id = HumanRemains.culture_id GROUP BY Cultures.name HAVING COUNT(DISTINCT Linguistics.linguistics_id) >= 2 AND AVG(HumanRemains.age_estimate) BETWEEN 25 AND 50;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently in stock and has a price greater than $100.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is currently in stock and has a price greater than $100.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Price > 100;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Price > 100 AND Product.Product_Status = 'In Stock';",
    "prompt_token_number": 527,
    "response_token_number": 61
},
{
    "id": 34680,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'patients': ['first_name', 'last_name', 'patient_id', 'phone_number', 'email', 'phone'], 'medical_history': ['patient_id', 'medical_condition', 'diagnosis'], 'prescription': ['patient_id', 'prescription_id', 'prescription_date', 'type', 'practitioner_id'], 'prescription_items': ['formula_id', 'prescription_id'], 'herbal_formulas': ['formula_id', 'formula_name', 'price', 'num_ingredients', 'ingredients', 'name']}. \n# the user question is: Retrieve the names and email addresses of patients who have been prescribed herbal formulas containing \"Gou Qi Zi\" and have also been diagnosed with a medical condition containing the word \"anxiety\":. \n#SQL query: SELECT DISTINCT p.first_name, p.last_name, p.email FROM patients p JOIN medical_history mh ON p.patient_id = mh.patient_id JOIN prescription pr ON p.patient_id = pr.patient_id JOIN prescription_items pi ON pr.prescription_id = pi.prescription_id JOIN herbal_formulas hf ON pi.formula_id = hf.formula_id WHERE hf.formula_name LIKE '%Gou Qi Zi%' AND mh.medical_condition LIKE '%anxiety%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on at least one project that is related to marketing and at least one project that is related to software development, and have not taken any leave of absence during those project periods.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on at least one project that is related to marketing and at least one project that is related to software development, and have not taken any leave of absence during those project periods.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE p.Project_Name LIKE '%Marketing%' OR p.Project_Name LIKE '%Software Development%' GROUP BY e.Employee_ID HAVING COUNT(DISTINCT CASE WHEN p.Project_Name LIKE '%Marketing%' THEN p.Project_ID ELSE NULL END) >= 1 AND COUNT(DISTINCT CASE WHEN p.Project_Name LIKE '%Software Development%' THEN p.Project_ID ELSE NULL END) >= 1 AND COUNT(DISTINCT l.Leave_ID) = 0;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT e.Employee_Name \nFROM Employee e \nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID \nJOIN Task t ON te.Task_ID = t.Task_ID \nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE p.Project_Name LIKE '%marketing%' \nAND e.Employee_ID IN (\n    SELECT e.Employee_ID \n    FROM Employee e \n    JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID \n    JOIN Task t ON te.Task_ID = t.Task_ID \n    JOIN Project p ON t.Project_ID = p.Project_ID\n    WHERE p.Project_Name LIKE '%software development%'\n) AND e.Employee_ID NOT IN (\n    SELECT l.Employee_ID \n    FROM Leave l \n    WHERE l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date\n);",
    "prompt_token_number": 644,
    "response_token_number": 161
},
{
    "id": 34681,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Films': ['title', 'country', 'rating_id', 'director_id', 'film_id', 'synopsis', 'release_date', 'runtime', 'studio_id', 'composer_id', 'budget', 'box_office', 'imdb_rating', 'rotten_tomatoes_rating', 'mpaa_rating', 'production_company_id', 'oscar_wins', 'rating', 'rottentomatoes_rating', 'genre_id', 'runtime_minutes', 'release_year', 'The Conjuring', 'PG-13'], 'Characters': ['character_id', 'name', 'description', 'category', 'main_actor_id', 'plot_id', 'role', 'gender'], 'Films_Characters': ['character_id', 'film_id'], 'Films_Genres': ['film_id', 'genre_id'], 'Genres': ['genre_id', 'name', 'description']}. \n# the user question is: Query: Retrieve the names and descriptions of all characters in the database that have appeared in at least three horror films, along with the names of those films and their release dates, ordered by character name in ascending order.. \n#SQL query: SELECT Characters.name, GROUP_CONCAT(DISTINCT Films.title, ', ') AS films, GROUP_CONCAT(DISTINCT Films.release_date, ', ') AS release_dates FROM Characters JOIN Films_Characters ON Characters.character_id = Films_Characters.character_id JOIN Films ON Films_Characters.film_id = Films.film_id JOIN Films_Genres ON Films.film_id = Films_Genres.film_id JOIN Genres ON Films_Genres.genre_id = Genres.genre_id WHERE Genres.name = 'Horror' GROUP BY Characters.character_id HAVING COUNT(DISTINCT Films.film_id) >= 3 ORDER BY Characters.name ASC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Order_Detail': ['Order_ID', 'Product_ID', 'Product_Price', 'Product_Quantity', 'Customer_ID', 'Supplier_ID', 'Order_Detail_Date', 'Order_Detail_ID', 'Order_Detail_Price', 'Order_Detail_Quantity']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently out of stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is currently out of stock.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Detail od ON o.Order_ID = od.Order_ID INNER JOIN Product p ON od.Product_ID = p.Product_ID AND p.Product_Quantity = 0;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Order_Detail": [
            "Order_ID",
            "Product_ID",
            "Product_Price",
            "Product_Quantity",
            "Customer_ID",
            "Supplier_ID",
            "Order_Detail_Date",
            "Order_Detail_ID",
            "Order_Detail_Price",
            "Order_Detail_Quantity"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name FROM Customer JOIN Order ON Customer.Customer_ID = Order.Customer_ID JOIN Order_Detail ON Order.Order_ID = Order_Detail.Order_ID JOIN Product ON Order_Detail.Product_ID = Product.Product_ID WHERE Product.Product_Stock = 0;",
    "prompt_token_number": 704,
    "response_token_number": 49
},
{
    "id": 34682,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Websites': ['website_id', 'user_id', 'url', 'created_at', 'updated_at', 'name', 'domain_id', 'domain_authority_score', 'domain_created_at'], 'Pages': ['page_id', 'website_id', 'url', 'title', 'description', 'content', 'created_at', 'updated_at', 'meta_description', 'meta_keywords', 'meta_title', 'h1_tag', 'h2_tag', 'title_tag', 'canonical_url', 'description_tag', 'header_tag', 'meta_tag', 'meta_keyword', 'h1', 'heading', 'header', 'word_count', 'time_on_page', 'total_words', 'http_status_code', 'user_id', 'last_modified_date', '[website_id]'], 'Page_Stats': ['page_stat_id', 'page_id', 'visits', 'bounce_rate', 'time_on_page', 'created_at', 'updated_at', 'organic_traffic', 'load_time', 'page_speed_score', 'total_images', 'total_videos', 'page_authority_score', 'domain_authority_score', 'page_load_time', 'backlinks', 'search_query', 'search_volume']}. \n# the user question is: Retrieve the names and URLs of all websites that have at least one page with a word count greater than or equal to 1000 and a page speed score greater than or equal to 80:. \n#SQL query: SELECT DISTINCT Websites.name, Websites.url FROM Websites INNER JOIN Pages ON Websites.website_id = Pages.website_id INNER JOIN Page_Stats ON Pages.page_id = Page_Stats.page_id WHERE Pages.word_count >= 1000 AND Page_Stats.page_speed_score >= 80;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for products that have a price greater than $500 and a discount of less than 5%.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for products that have a price greater than $500 and a discount of less than 5%.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price > 500 AND pr.Product_Discount < 0.05;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name FROM Supplier INNER JOIN Product ON Supplier.Supplier_ID = Product.Supplier_ID INNER JOIN Purchase_Item ON Product.Product_ID = Purchase_Item.Product_ID WHERE Product.Product_Price > 500 AND Product.Product_Discount < 5;",
    "prompt_token_number": 658,
    "response_token_number": 50
},
{
    "id": 34683,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Actor': ['actor_id', 'name', 'actor_name'], 'Movie_Actor': ['movie_id', 'actor_id'], 'Rating': ['rating_id', 'movie_id', 'source', 'rating_value', 'rating']}. \n# the user question is: Retrieve the name of the actor, the title of the movie, and the rating value from Metacritic for all movies where the actor's name contains the word \"Winslet\" and the rating value is between 70 and 90.. \n#SQL query: SELECT Actor.name, Movie.title, Rating.rating_value FROM Movie JOIN Movie_Actor ON Movie.movie_id = Movie_Actor.movie_id JOIN Actor ON Movie_Actor.actor_id = Actor.actor_id JOIN Rating ON Movie.movie_id = Rating.movie_id WHERE Actor.name LIKE '%Winslet%' AND Rating.source = 'Metacritic' AND Rating.rating_value BETWEEN 70 AND 90;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on at least one project related to customer service and have taken a leave of absence during that project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on at least one project related to customer service and have taken a leave of absence during that project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Customer Service%' INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name \nFROM Employee \nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nJOIN Project ON Task.Project_ID = Project.Project_ID \nJOIN Leave ON Employee.Employee_ID = Leave.Employee_ID \nWHERE Project.Project_Name LIKE '%customer service%' \nAND ((Project.Project_Start_Date BETWEEN Leave.Leave_Start_Date AND Leave.Leave_End_Date) \nOR (Project.Project_End_Date BETWEEN Leave.Leave_Start_Date AND Leave.Leave_End_Date));",
    "prompt_token_number": 604,
    "response_token_number": 105
},
{
    "id": 34686,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Doctor': ['doctor_id', 'last_name', 'Lee', 'Brown', 'Wilson', 'Davis', 'Kim', 'Williams', 'Patel', 'Chen', 'Rodriguez', 'first_name', 'doctor_name', 'avg_treatments', 'Doctor_ID', 'DoctorName', 'DoctorID', 'Email'], 'Diagnosis': ['diagnosis_type', 'doctor_id', 'diagnosis_id', 'diagnosis_date', 'illness_id', 'injury_id', 'patient_id', 'injury_body_part', 'diagnosis_name']}. \n# the user question is: Find the doctors who have diagnosed more than 3 injuries in the last month:. \n#SQL query: SELECT Doctor.doctor_name, COUNT(DISTINCT Diagnosis.injury_id) AS num_injuries FROM Doctor JOIN Diagnosis ON Diagnosis.doctor_id = Doctor.doctor_id WHERE Diagnosis.diagnosis_date >= date('now', '-1 month') GROUP BY Doctor.doctor_id HAVING num_injuries > 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on at least two projects related to software development and have taken a leave of absence during one of those project periods.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on at least two projects related to software development and have taken a leave of absence during one of those project periods.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Software Development%' INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID HAVING COUNT(DISTINCT p.Project_ID) >= 2 AND COUNT(DISTINCT l.Leave_ID) >= 1;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name\nFROM Employee\nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID\nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID\nJOIN Project ON Task.Project_ID = Project.Project_ID\nJOIN Leave ON Employee.Employee_ID = Leave.Employee_ID\nWHERE Project.Project_Name LIKE '%software development%'\nAND Leave.Leave_Start_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date\nGROUP BY Employee.Employee_Name\nHAVING COUNT(DISTINCT Project.Project_ID) >= 2;",
    "prompt_token_number": 591,
    "response_token_number": 102
},
{
    "id": 34687,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'SalesOrder': ['OrderID', 'Year', 'CustomerID', 'OrderDate', 'TotalAmount', 'TotalPrice', 'QuarterID', 'ExpectedDeliveryDate', 'ShippedDate', 'EmployeeID', 'CountryCode', 'ReturnID', 'OfficeID', 'Discount', 'OrderNumber', 'Status', 'RegionID'], 'Customer': ['CustomerName', 'CustomerID', 'Country', 'SegmentID', 'Continent', 'PhoneNumber', 'Email', 'CreditLimit', 'State', 'AddressID', 'EmailAddress', 'LoyaltyLevelID', 'FirstName', 'LastName', 'City', 'StateCode', 'CountryCode', 'RegistrationDate']}. \n# the user question is: Retrieve the list of orders that have a discount greater than 10%, including the order number, order date, customer name, and total amount:. \n#SQL query: SELECT SalesOrder.OrderNumber, SalesOrder.OrderDate, Customer.FirstName, Customer.LastName, SalesOrder.TotalAmount FROM SalesOrder JOIN Customer ON SalesOrder.CustomerID = Customer.CustomerID WHERE SalesOrder.Discount > 0.1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently out of stock and has a price greater than $500.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is currently out of stock and has a price greater than $500.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Price > 500;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Stock = 0 AND Product.Product_Price > 500;",
    "prompt_token_number": 551,
    "response_token_number": 61
},
{
    "id": 34689,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'first_name', 'last_name', 'email', 'password', 'phone_number', 'address', 'age', 'gender', 'bmi', 'goal_id'], 'Programs': ['program_id', 'program_name', 'program_description', 'start_date', 'end_date', 'status', 'Program'], 'Goals': ['goal_id', 'goal_name', 'goal_description', 'goal_due_date', 'user_id', 'program_id', 'goal_target', 'goal_type', 'goal_end_date', 'goal_target_date', 'goal_start_date', 'goal_status', 'goal_value'], 'Progress': ['progress_id', 'goal_id', 'user_id', 'progress_date', 'progress_value', 'date_recorded']}. \n# the user question is: Find the name and email address of the user who has achieved the most progress towards their steps goal in the program with ID 5:. \n#SQL query: SELECT Users.first_name, Users.last_name, Users.email, MAX(Progress.progress_value / Goals.goal_target) AS max_progress FROM Users JOIN Goals ON Users.user_id = Goals.user_id JOIN Programs ON Goals.program_id = Programs.program_id JOIN Progress ON Goals.goal_id = Progress.goal_id WHERE Programs.program_id = 5 AND Goals.goal_type = 'Steps' AND Goals.goal_target IS NOT NULL GROUP BY Users.user_id ORDER BY max_progress DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID']} and \n# the user question: List the names of all suppliers who have not received any purchases in the last year.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have not received any purchases in the last year.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID AND p.Purchase_Date BETWEEN DATE('now', '-1 year') AND DATE('now') WHERE p.Purchase_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ]
    },
    "response_text": "SELECT Supplier_Name FROM Supplier WHERE Supplier_ID NOT IN (SELECT Supplier_ID FROM Purchase WHERE Purchase_Date >= DATEADD(year, -1, GETDATE()))",
    "prompt_token_number": 485,
    "response_token_number": 30
},
{
    "id": 34690,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'SmartContractInstance': ['BlockID', 'SmartContractID', 'Creator', 'SmartContractInstanceID', 'Timestamp', 'PublicAddress', 'IsSuccess', 'Function', 'Parameter', 'GasPrice', 'Caller', 'GasUsed', 'Sender', 'ExecutionTime', 'Successful', 'User', 'EndTimestamp', 'Status', 'IsDeployed'], 'SmartContract': ['SmartContractID', 'Code', 'Balance', 'Creator', 'Name']}. \n# the user question is: Find the smart contracts that have a high number of instances created within the last 24 hours:. \n#SQL query: SELECT SmartContract.SmartContractID, COUNT(SmartContractInstance.SmartContractInstanceID) AS TotalInstances FROM SmartContract JOIN SmartContractInstance ON SmartContract.SmartContractID = SmartContractInstance.SmartContractID AND SmartContractInstance.Timestamp >= datetime('now', '-24 hours') GROUP BY SmartContract.SmartContractID ORDER BY TotalInstances DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on at least one project that is related to marketing, has not taken any leave of absence during that project period, and have worked at least 40 hours in a week during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on at least one project that is related to marketing, has not taken any leave of absence during that project period, and have worked at least 40 hours in a week during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Marketing%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE t.Time_Worked >= 40 AND l.Leave_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name \nFROM Employee\nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nJOIN Project ON Task.Project_ID = Project.Project_ID \nLEFT JOIN Leave ON Employee.Employee_ID = Leave.Employee_ID \nAND (Leave.Leave_Start_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date \nOR Leave.Leave_End_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date)\nWHERE Project.Project_Name LIKE '%marketing%' \nAND Leave.Leave_ID IS NULL \nGROUP BY Employee.Employee_ID, strftime('%W', Time_Entry.Time_Entry_Date)\nHAVING SUM(Time_Entry.Time_Entry_Hours) >= 40",
    "prompt_token_number": 598,
    "response_token_number": 138
},
{
    "id": 34694,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'clients': ['client_id', 'first_name', 'last_name', 'email', 'phone_number', 'user_id', 'total_price', 'total_spent', 'item_price', 'quantity', 'city', 'budget', 'state', 'price', 'location', 'name', 'client_name', 'date_of_birth', 'age', 'loyalty_program', 'skin_type'], 'appointments': ['appointment_id', 'date_time', 'client_id', 'artist_id', 'invoice_id', 'total_cost', 'appointment_date', 'discount_percentage', 'photoshoot_id', 'duration', 'price', 'avg_rating', 'quantity', 'status', 'reschedule_id', 'location_id', 'appointment_start_time', 'appointment_end_time', 'order_id', 'makeup_artist_id'], 'services': ['service_id', 'service_name', 'price', 'duration', 'duration_minutes', 'name', 'category_id', 'category'], 'appointment_services': ['appointment_service_id', 'appointment_id', 'service_id', 'quantity', 'service_name', 'artist_id', 'price', 'location_id', 'duration', 'rating']}. \n# the user question is: Find the most popular hair services for clients aged between 25 and 35 years old:. \n#SQL query: SELECT services.name, COUNT(*) as total_appointments FROM services INNER JOIN appointment_services ON services.service_id = appointment_services.service_id INNER JOIN appointments ON appointment_services.appointment_id = appointments.appointment_id INNER JOIN clients ON appointments.client_id = clients.client_id WHERE services.category = 'Hair' AND clients.age BETWEEN 25 AND 35 GROUP BY services.service_id ORDER BY total_appointments DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on at least one project that is related to sales, and have taken a leave of absence during that project period, but also worked at least 30 hours in a week during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on at least one project that is related to sales, and have taken a leave of absence during that project period, but also worked at least 30 hours in a week during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Sales%' INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE t.Time_Worked >= 30;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name \nFROM Employee \nINNER JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nINNER JOIN Task ON Task.Task_ID = Time_Entry.Task_ID \nINNER JOIN Project ON Task.Project_ID = Project.Project_ID \nINNER JOIN Leave ON Employee.Employee_ID = Leave.Employee_ID \nWHERE Project.Project_Name LIKE '%sales%' \nAND (Leave.Leave_Start_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date OR Leave.Leave_End_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date)\nAND Time_Entry.Time_Entry_Hours >= 30\nAND WEEK(Time_Entry.Time_Entry_Date, 1) = WEEK(Leave.Leave_Start_Date, 1);",
    "prompt_token_number": 748,
    "response_token_number": 137
},
{
    "id": 34699,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['UserName', 'UserID'], 'Songs': ['AlbumID', 'SongID', 'GenreID', 'SongTitle', 'Duration', 'SongName', 'ArtistID', 'ReleaseDate', 'ReleaseYear', 'Language', 'AvgDuration', 'AvgRating', 'CommentCount', 'Rating', 'PlayCount'], 'Ratings': ['UserID', 'SongID', 'Rating', 'GenreID', 'AlbumID', 'RatingID']}. \n# the user question is: \"Find the songs that have been rated by all users and have a rating above 4.\". \n#SQL query: SELECT Songs.SongName FROM Songs INNER JOIN Ratings ON Songs.SongID = Ratings.SongID GROUP BY Songs.SongID HAVING COUNT(DISTINCT Ratings.UserID) = ( SELECT COUNT(DISTINCT UserID) FROM Users ) AND AVG(Ratings.Rating) > 4;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently in stock and has a price less than $100.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is currently in stock and has a price less than $100.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Price < 100;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Status = 'In Stock' AND Product.Product_Price < 100;",
    "prompt_token_number": 506,
    "response_token_number": 62
},
{
    "id": 34701,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Transaction': ['BlockID', 'Recipient', 'Sender', 'PublicAddress', 'TransactionID', 'Amount', 'Fee', 'Timestamp', 'GasFee', 'GasUsed', 'GasLimit', 'GasPrice', 'EtherAmount', 'IsSuccess', 'Value', 'Currency', 'NodeID', 'SmartContractInstanceID', 'SenderWalletID', 'RecipientWalletID', 'ReceiverWalletID', 'ConfirmationTime', 'TokenID', 'FromWalletID', 'ToWalletID', 'Status', 'Type', 'ReceiverID', 'SenderID']}. \n# the user question is: Find the average transaction fee for each day in the last 7 days:. \n#SQL query: SELECT strftime('%Y-%m-%d', Transaction.Timestamp) AS Date, AVG(Transaction.Fee) AS AvgFee FROM Transaction WHERE Transaction.Timestamp >= datetime('now', '-7 days') GROUP BY Date\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for products that have a discount greater than 10% and a price less than $500.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have received purchases for products that have a discount greater than 10% and a price less than $500.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price < 500 AND pr.Product_Discount > 0.1;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Purchase": [
            "Purchase_ID",
            "Purchase_Date",
            "Supplier_ID",
            "Employee_ID"
        ],
        "Purchase_Item": [
            "Product_ID",
            "Purchase_ID"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name\nFROM Supplier\nINNER JOIN Product ON Supplier.Supplier_ID = Product.Supplier_ID\nINNER JOIN Purchase_Item ON Product.Product_ID = Purchase_Item.Product_ID\nWHERE Product.Product_Discount > 10 AND Product.Product_Price < 500",
    "prompt_token_number": 492,
    "response_token_number": 53
},
{
    "id": 34702,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Nurses': ['first_name', 'last_name', 'nurse_id', 'Shift', 'Work_Date', 'Hours_Worked', 'Department', 'StartDate', 'name', 'email', 'experience', 'department'], 'Shifts': ['nurse_id', 'shift_id', 'date', 'admission_id', 'doctor_id', 'shift_type'], 'Certifications': ['certification_name', 'nurse_id']}. \n# the user question is: Find the nurses who have worked on the night shift and have a certification in emergency care.. \n#SQL query: SELECT Nurses.nurse_id, Nurses.first_name, Nurses.last_name, Certifications.certification_name, Shifts.date, Shifts.shift_type FROM Nurses INNER JOIN Certifications ON Nurses.nurse_id = Certifications.nurse_id INNER JOIN Shifts ON Nurses.nurse_id = Shifts.nurse_id WHERE Certifications.certification_name = 'Emergency Care' AND Shifts.shift_type = 'Night';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on at least two projects that are related to marketing and sales, have not taken any leave of absence during those project periods, and have worked at least 40 hours in a week during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on at least two projects that are related to marketing and sales, have not taken any leave of absence during those project periods, and have worked at least 40 hours in a week during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND (p.Project_Name LIKE '%Marketing%' OR p.Project_Name LIKE '%Sales%') LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE t.Time_Worked >= 40 GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(DISTINCT p.Project_ID) >= 2 AND COUNT(DISTINCT l.Leave_ID) = 0;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name\nFROM Employee\nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID\nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID\nJOIN Project ON Task.Project_ID = Project.Project_ID\nWHERE (Project.Project_Name LIKE '%marketing%' OR Project.Project_Name LIKE '%sales%')\nAND Employee.Employee_ID NOT IN (SELECT Leave.Employee_ID FROM Leave WHERE (Leave.Leave_Start_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date) OR (Leave.Leave_End_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date))\nGROUP BY Employee.Employee_Name\nHAVING COUNT(DISTINCT Project.Project_ID) >= 2 AND MAX(Time_Entry.Time_Entry_Hours) >= 40;",
    "prompt_token_number": 600,
    "response_token_number": 143
},
{
    "id": 34703,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'artwork': ['artwork_id', 'title', 'year_created', 'artist_id', 'dimensions', 'medium', 'lender_id', 'year', 'estimated_value', 'creation_date'], 'artwork_location': ['start_date', 'end_date', 'artwork_id', 'location_id', 'on_display', 'on_loan', 'artwork_location_id', 'museum_id'], 'artist': ['first_name', 'date_of_birth', 'last_name', 'artist_id', 'Kandinsky', 'van', 'Gogh', 'birth_date', 'birth_country', 'year_born', 'country_of_birth', 'birth_year', 'country_of_origin', 'gender']}. \n# the user question is: Find the titles and estimated values of all artwork that were created by \"Pablo Picasso\" and are currently on display at any location.. \n#SQL query: SELECT a.title, a.estimated_value FROM artwork AS a INNER JOIN artwork_location AS al ON a.artwork_id = al.artwork_id INNER JOIN artist AS ar ON a.artist_id = ar.artist_id WHERE ar.first_name = 'Pablo' AND ar.last_name = 'Picasso' AND al.on_display IS NOT NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed at least three orders for products that have a price greater than $1000.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed at least three orders for products that have a price greater than $1000.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price > 1000 GROUP BY c.Customer_ID, p.Product_ID HAVING COUNT(DISTINCT o.Order_ID) >= 3;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT c.Customer_Name \nFROM Customer AS c \nJOIN Order AS o ON c.Customer_ID = o.Customer_ID \nJOIN Order_Item as oi ON o.Order_ID = oi.Order_ID \nJOIN Product AS p ON oi.Product_ID = p.Product_ID \nWHERE p.Product_Price > 1000 \nGROUP BY c.Customer_Name \nHAVING COUNT(o.Order_ID) >= 3;",
    "prompt_token_number": 570,
    "response_token_number": 76
},
{
    "id": 34706,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'team_id', 'completed_by', 'skill_id', 'first_name', 'manager_id', 'last_name', 'job_title', 'office_location', 'role', 'years_of_experience', 'department_id', 'salary'], 'Tasks': ['assigned_to', 'deadline', 'project_id', 'task_id', 'priority_level', 'status', 'completed_by', 'created_at', 'completed_at', 'priority', 'created_by', 'due_date', 'user_id', 'assigned_team', 'team_id', 'started_at', 'assigned_skill', 'requested_by', 'assigned_at', 'assigned_by', 'completion_date', 'assignment_date', 'skill_name', 'task_status', 'department_name', 'task_assigned_date', 'task_completion_date'], 'User_Roles': ['user_id', 'role_id'], 'Roles': ['role_id', 'role_name']}. \n# the user question is: Find the user who has completed the most tasks in the last 365 days and has the role of \"IT Manager\":. \n#SQL query: SELECT Users.username, COUNT(Tasks.task_id) AS completed_task_count FROM Users JOIN Tasks ON Users.user_id = Tasks.completed_by JOIN User_Roles ON Users.user_id = User_Roles.user_id JOIN Roles ON User_Roles.role_id = Roles.role_id WHERE Tasks.completed_at >= DATE('now', '-365 day') AND Roles.role_name = 'IT Manager' GROUP BY Users.user_id ORDER BY completed_task_count DESC LIMIT 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed at least one order for a product that is out of stock and has a price greater than $500.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed at least one order for a product that is out of stock and has a price greater than $500.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Price > 500;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name\nFROM Customer\nJOIN Order ON Customer.Customer_ID = Order.Customer_ID\nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID\nJOIN Product ON Order_Item.Product_ID = Product.Product_ID\nWHERE Product.Product_Status = 'Out of Stock' AND Product.Product_Price > 500;",
    "prompt_token_number": 641,
    "response_token_number": 63
},
{
    "id": 34710,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Illustrations': ['user_id', 'illustration_id', 'upload_date', 'title', 'price', 'category_id', 'discount', 'creation_date', 'artist_id', 'description'], 'Users': ['username', 'user_id', 'address_id', 'work_address_id', 'last_active_date', 'home_address_id', 'last_activity_date', 'registration_date', 'email', 'total_purchase_amount', 'user_type_id', 'country', 'name'], 'Purchase': ['user_id', 'purchase_price', 'purchase_date', 'illustration_id', 'purchase_id', 'order_id', 'shipping_address_id', 'total_amount', 'COUNT###', 'price', 'quantity', 'category_id', 'amount', 'date'], 'Addresses': ['state_id', 'address_id', 'city', 'street_address', 'city_id', 'country_id'], 'States': ['country_id', 'state_id', 'state_name', 'sales_tax_rate', 'population_density', 'time_zone', 'population', 'state_code'], 'Countries': ['country_name', 'country_id', 'population', 'continent', 'country_code', 'name', 'region_id']}. \n# the user question is: Get the details of all users who have uploaded illustrations that have been purchased by users from more than 3 different countries:. \n#SQL query: SELECT Users.username, COUNT(DISTINCT Countries.country_id) AS unique_country_count FROM Users INNER JOIN Illustrations ON Users.user_id = Illustrations.user_id INNER JOIN Purchase ON Illustrations.illustration_id = Purchase.illustration_id INNER JOIN Addresses ON Purchase.shipping_address_id = Addresses.address_id INNER JOIN States ON Addresses.state_id = States.state_id INNER JOIN Countries ON States.country_id = Countries.country_id GROUP BY Users.user_id HAVING COUNT(DISTINCT Countries.country_id) > 3;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed at least one order for a product that is out of stock and has a price greater than $1000.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed at least one order for a product that is out of stock and has a price greater than $1000.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Price > 1000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Stock = 'Out of Stock' AND Product.Product_Price > 1000;",
    "prompt_token_number": 706,
    "response_token_number": 65
},
{
    "id": 34714,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Project_Materials': ['project_id', 'material_id', 'quantity', 'total_quantity'], 'Materials': ['material_id', 'material_name', 'cost_per_unit', 'unit_of_measurement', 'unit_quantity', 'unit_cost', 'quantity', 'unit_price', 'material_type_id', 'quantity_in_stock', 'material_unit', 'quantity_available', 'reorder_level', 'stock_level']}. \n# the user question is: List all the materials that have been used on more than 3 projects and have a cost per unit of less than $100.. \n#SQL query: SELECT DISTINCT m.material_name FROM Materials m INNER JOIN Project_Materials pm ON m.material_id = pm.material_id GROUP BY m.material_id HAVING COUNT(DISTINCT pm.project_id) > 3 AND m.cost_per_unit < 100;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed at least two orders for products that have a price less than $500 and a discount of at least 20%.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed at least two orders for products that have a price less than $500 and a discount of at least 20%.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price < 500 AND p.Product_Discount >= 0.2 GROUP BY c.Customer_ID, p.Product_ID HAVING COUNT(DISTINCT o.Order_ID) >= 2;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT c.Customer_Name \nFROM Customer c \nINNER JOIN Order o ON c.Customer_ID = o.Customer_ID\nINNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nINNER JOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Price < 500 AND p.Product_Discount >= 20\nGROUP BY c.Customer_ID\nHAVING COUNT(DISTINCT o.Order_ID) >= 2;",
    "prompt_token_number": 499,
    "response_token_number": 86
},
{
    "id": 34717,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Client': ['client_id', 'first_name', 'last_name', 'email', 'phone_number', 'date_of_birth', 'gender', 'address', 'age', 'weight', 'partner_id', 'zip_code', 'name', 'startingWeight', 'phone', 'clientId'], 'Assessment': ['assessment_id', 'trainer_id', 'client_id', 'date', 'weight', 'body_fat_percentage', 'lean_body_mass', 'waist_circumference', 'hip_circumference', 'chest_circumference', 'session_id', 'heart_rate'], 'Payment': ['payment_id', 'trainer_id', 'client_id', 'date', 'amount', 'payment_type']}. \n# the user question is: Find the clients who have had an assessment with a body fat percentage greater than 20% and have not made a payment in the month of April 2023.. \n#SQL query: SELECT Client.first_name, Client.last_name FROM Assessment JOIN Client ON Assessment.client_id = Client.client_id WHERE Assessment.body_fat_percentage > 20 AND Client.client_id NOT IN (SELECT client_id FROM Payment WHERE date BETWEEN '2023-04-01' AND '2023-04-30')\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on at least two projects that are related to marketing, have taken a leave of absence during at least one of those project periods, and have worked at least 25 hours in a week during the project period.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on at least two projects that are related to marketing, have taken a leave of absence during at least one of those project periods, and have worked at least 25 hours in a week during the project period.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Marketing%' INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE t.Time_Worked >= 25 GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(DISTINCT p.Project_ID) >= 2 AND COUNT(DISTINCT l.Leave_ID) >= 1;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Leave": [
            "Leave_ID",
            "Employee_ID",
            "Leave_Start_Date",
            "Leave_End_Date",
            "Leave_Type",
            "Leave_Duration"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name \nFROM Employee \nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID\nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID\nJOIN Project ON Task.Project_ID = Project.Project_ID\nJOIN Leave ON Employee.Employee_ID = Leave.Employee_ID\nWHERE Employee.Department = 'Marketing'\nAND Leave.Leave_Start_Date BETWEEN Project.Project_Start_Date AND Project.Project_End_Date\nAND Time_Entry.Time_Entry_Hours >= 25\nGROUP BY Employee.Employee_ID\nHAVING COUNT(DISTINCT Project.Project_ID) >= 2",
    "prompt_token_number": 655,
    "response_token_number": 110
},
{
    "id": 34718,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['username', 'user_id', 'email', 'john_doe', 'jane_doe', 'sarah_smith', 'tom_wilson', 'robert_king', 'alice_smith', 'jack_smith', 'jane_smith', 'mary_jones', 'joe_brown', 'james_smith', 'jessica_wong', 'david_smith', 'first_name', 'last_name', 'james_wong', 'emily_smith', 'jennifer_wilson', 'subscription', 'date_of_birth'], 'Models': ['created_by', 'model_name', 'description', 'model_id', 'modified_date', 'user_i', 'algorithm', 'project_i', 'Rating', 'Created_date', 'rating', 'creation_date', 'category_id'], 'Project_Teams': ['team_id', 'project_id', 'team_name', 'created_by', 'user_i'], 'Projects': ['project_name', 'project_id', 'start_date', 'end_date', 'description', 'num_teams', 'created_by', 'user_i']}. \n# the user question is: What are the names of the users who have created at least one project, have created at least one team, and have created at least one model?. \n#SQL query: SELECT DISTINCT Users.username FROM Users INNER JOIN Projects ON Users.user_id = Projects.created_by INNER JOIN Project_Teams ON Projects.project_id = Project_Teams.project_id INNER JOIN Models ON Users.user_id = Models.created_by GROUP BY Users.user_id HAVING COUNT(DISTINCT Projects.project_id) >= 1 AND COUNT(DISTINCT Project_Teams.team_id) >= 1 AND COUNT(DISTINCT Models.model_id) >= 1;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed at least one order for a product that is out of stock and has a price less than $100.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed at least one order for a product that is out of stock and has a price less than $100.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Price < 100;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name FROM Customer INNER JOIN Order ON Customer.Customer_ID = Order.Customer_ID INNER JOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID INNER JOIN Product ON Order_Item.Product_ID = Product.Product_ID WHERE Product.Product_Stock = 0 AND Product.Product_Price < 100;",
    "prompt_token_number": 691,
    "response_token_number": 59
},
{
    "id": 34722,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Comedians': ['first_name', 'last_name', 'comedian_id', 'nationality', 'birthplace', 'country_id', 'birth_year', 'gender', 'name', 'city_id', 'school_id', 'birth_state', 'netflix_special', 'youtube_subscribers', 'experience'], 'Performances': ['rating', 'comedian_id', 'show_id', 'performance_id', 'special_id', 'venue_id', 'production_id', 'performance_date'], 'Shows': ['year', 'show_id', 'title', 'description', 'location', 'venue_id', 'duration', 'network', 'release_date', 'Sticks', 'date_recorded', 'name', 'duration_minutes', 'recorded_year', 'date'], 'Specials': ['title', 'special_id', 'description', 'year', 'duration', 'release_year', 'show_id', 'production_id', 'release_date'], 'Special_Comedians': ['special_id', 'comedian_id']}. \n# the user question is: Retrieve the titles and release years of all shows that feature at least one comedian who has a special released in 2019.. \n#SQL query: SELECT s.title, s.year FROM Shows s JOIN Performances p ON p.show_id = s.show_id JOIN Comedians c ON c.comedian_id = p.comedian_id JOIN Special_Comedians sc ON sc.comedian_id = c.comedian_id JOIN Specials sp ON sp.special_id = sc.special_id WHERE sp.year = 2019;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed at least three orders for products that have a price greater than $500 and a discount of less than 10%.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed at least three orders for products that have a price greater than $500 and a discount of less than 10%.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price > 500 AND p.Product_Discount < 0.1 GROUP BY c.Customer_ID, p.Product_ID HAVING COUNT(DISTINCT o.Order_ID) >= 3;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT c.Customer_Name \nFROM Customer c \nJOIN Order o ON c.Customer_ID = o.Customer_ID \nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID \nJOIN Product p ON oi.Product_ID = p.Product_ID \nWHERE p.Product_Price > 500 AND p.Product_Discount < 10 \nGROUP BY c.Customer_Name \nHAVING COUNT(o.Order_ID) >= 3;",
    "prompt_token_number": 645,
    "response_token_number": 79
},
{
    "id": 34726,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Enrollments': ['student_id', 'course_id', 'enrollment_id', 'class_id', 'semester', 'enrollment_date'], 'Courses': ['course_name', 'course_id', 'teacher_id', 'department_id', 'subject_id', 'level', 'type', 'program_id'], 'Grades': ['grade', 'enrollment_id']}. \n# the user question is: \"Find the courses that have a higher average grade than the average grade of all courses.\". \n#SQL query: SELECT Courses.course_name, AVG(Grades.grade) AS average_grade FROM Courses INNER JOIN Enrollments ON Courses.course_id = Enrollments.course_id INNER JOIN Grades ON Enrollments.enrollment_id = Grades.enrollment_id GROUP BY Courses.course_name HAVING AVG(Grades.grade) > ( SELECT AVG(grade) FROM Grades );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed at least one order for products that are not in stock and have a price greater than $1000.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed at least one order for products that are not in stock and have a price greater than $1000.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Price > 1000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name\nFROM Customer\nINNER JOIN Order ON Customer.Customer_ID = Order.Customer_ID\nINNER JOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID\nINNER JOIN Product ON Order_Item.Product_ID = Product.Product_ID\nWHERE Product.Product_Status = 'Not In Stock' AND Product.Product_Price > 1000;",
    "prompt_token_number": 498,
    "response_token_number": 67
},
{
    "id": 34727,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'password', 'email', 'registration_date', 'gender', 'johnD', 'Male', 'Female', 'location', 'alice23', 'janeD'], 'Posts': ['post_id', 'user_id', 'content', 'post_date', 'num_likes', 'num_comments', 'locatio', 'location', 'post_content', 'date'], 'Likes': ['like_id', 'post_id', 'user_id', 'date']}. \n# the user question is: Find the users who have liked every post. \n#SQL query: SELECT Users.username FROM Users WHERE NOT EXISTS (SELECT post_id FROM Posts WHERE NOT EXISTS (SELECT like_id FROM Likes WHERE Likes.user_id = Users.user_id AND Likes.post_id = Posts.post_id));\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: Find the names of all products that have been sold more than 100 times in the last year and have generated a profit of more than $50,000.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all products that have been sold more than 100 times in the last year and have generated a profit of more than $50,000.",
    "output": "SELECT DISTINCT pr.Product_Name FROM Product pr INNER JOIN Order_Item oi ON pr.Product_ID = oi.Product_ID AND oi.Order_Item_Date BETWEEN DATE('now', '-1 year') AND DATE('now') GROUP BY pr.Product_ID HAVING COUNT(DISTINCT oi.Order_ID) > 100 AND SUM(oi.Quantity * (pr.Product_Price * (1 - pr.Product_Discount) - pr.Product_Cost)) > 50000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT Product.Product_Name\nFROM Product \nJOIN Order_Item ON Product.Product_ID = Order_Item.Product_ID\nWHERE Order_Item_Date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE()\nGROUP BY Product.Product_ID\nHAVING SUM(Order_Item.Quantity) > 100 AND SUM(Order_Item.Quantity * (Order_Item.Price - Product.Product_Cost)) > 50000;",
    "prompt_token_number": 398,
    "response_token_number": 78
},
{
    "id": 34728,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Event': ['event_id', 'event_name', 'event_date', 'location_id', 'event_category_id', 'event_type_id', 'location', 'venue_id', 'start_date', 'end_date', 'category', 'event_code', 'EVT', 'organizer_id', 'duration', 'name', 'Expo', 'Tech', 'country', 'category_id', 'city', 'ticket_price', 'date', 'start_time', 'end_time', 'min_age_requirement', 'event_type', 'capacity', 'registration_deadline', 'num_attendees', 'min_age', 'duration_hours', 'registration_fee', 'price'], 'Attendee': ['attendee_id', 'first_name', 'last_name', 'email_address', 'phone_number', 'date_of_birth', 'job_title', 'city', 'age', 'email'], 'Registration': ['registration_id', 'attendee_id', 'event_id', 'registration_date', 'num_tickets', 'attended', 'fee', 'registration_status', 'payment_status', 'payment_method', 'num_attendees', 'EventName', 'AttendeeID']}. \n# the user question is: What is the total number of attendees who have registered for events in the year 2023?. \n#SQL query: SELECT COUNT(DISTINCT Attendee.attendee_id) AS num_attendees FROM Attendee INNER JOIN Registration ON Attendee.attendee_id = Registration.attendee_id INNER JOIN Event ON Registration.event_id = Event.event_id WHERE strftime('%Y', Event.start_date) = '2023';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: List the names of all employees who have worked on a project that has a project budget less than $1,000,000 and has been completed in the last 3 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all employees who have worked on a project that has a project budget less than $1,000,000 and has been completed in the last 3 months.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget < 1000000 AND p.Project_End_Date BETWEEN DATE('now', '-3 months') AND DATE('now');",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name \nFROM Employee \nINNER JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nINNER JOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nINNER JOIN Project ON Task.Project_ID = Project.Project_ID \nWHERE Project.Project_Budget < 1000000 \nAND Project.Project_Status = 'Completed' \nAND Project.Project_Actual_End_Date >= DATE('now', '-3 months');",
    "prompt_token_number": 685,
    "response_token_number": 84
},
{
    "id": 34731,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'game': ['game_mode', 'price', 'name', 'publisher', 'num_players', 'rating', 'platform', 'genre', 'release_year', 'developer', 'platform_count', 'tag', 'game_name', 'release_date', 'multiplayer', 'copies_sold', 'playtime', 'year']}. \n# the user question is: Get the name, publisher and rating of all games that were released before the year 2000 and have a rating of 9 or higher.. \n#SQL query: SELECT name, publisher, rating FROM game WHERE release_year < 2000 AND rating >= 9;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address']} and \n# the user question: List the names of all suppliers who have provided at least one product that is not in stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have provided at least one product that is not in stock.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Product p ON s.Supplier_ID = p.Supplier_ID AND p.Product_Status = 'Out of Stock';",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ]
    },
    "response_text": "SELECT Supplier_Name FROM Supplier WHERE Supplier_ID IN (SELECT Supplier_ID FROM Product WHERE Product_Status = 'Not in Stock');",
    "prompt_token_number": 394,
    "response_token_number": 24
},
{
    "id": 34732,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'performance': ['comedian_id', 'rating', 'club_id', 'id', 'ticket_price', 'title', 'performance_date', 'venue_id', 'performance_id', 'time', 'date', 'name', 'show_id', 'performer_id', 'date_time'], 'comedian': ['id', 'name', 'gender', 'comedian_id', 'age', 'salary', 'years_of_experience']}. \n# the user question is: Find the number of appearances for each comedian in the database.. \n#SQL query: SELECT comedian.name, COUNT(*) FROM comedian JOIN performance ON comedian.comedian_id = performance.comedian_id GROUP BY comedian.name;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project budget between $500,000 and $1,000,000 and has been completed in the last 6 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that has a project budget between $500,000 and $1,000,000 and has been completed in the last 6 months.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget BETWEEN 500000 AND 1000000 AND p.Project_End_Date BETWEEN DATE('now', '-6 months') AND DATE('now');",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name \nFROM Employee INNER JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nINNER JOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nINNER JOIN Project ON Task.Project_ID = Project.Project_ID \nWHERE Project.Project_Budget BETWEEN 500000 AND 1000000 \nAND Project.Project_Actual_End_Date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH);",
    "prompt_token_number": 497,
    "response_token_number": 81
},
{
    "id": 34733,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Gene': ['end_position', 'start_position', 'chromosome_id', 'gene_name', 'gene_id', 'tss_position', 'chromosome', 'entrez_gene_id', 'hgnc_symbol', 'chromosome_number', 'disease_id', 'associated_disease', 'accession_number', 'Name', 'ID'], 'Polymorphism': ['gene_id', 'position', 'reference_sequence', 'alternate_sequence', 'polymorphism_id', 'frequency']}. \n# the user question is: Retrieve the names of all genes and their associated polymorphisms that have a frequency greater than 0.1% and are located on chromosome 104.. \n#SQL query: SELECT Gene.gene_name, Polymorphism.polymorphism_id FROM Gene JOIN Polymorphism ON Gene.gene_id = Polymorphism.gene_id WHERE Polymorphism.frequency > 0.001 AND Gene.chromosome_id = 104;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: List the names of all customers who have placed at least one order for products that have a price greater than $2,500 and have not been returned.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed at least one order for products that have a price greater than $2,500 and have not been returned.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price > 2500 LEFT JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID WHERE r.Return_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Return": [
            "Return_ID",
            "Order_Item_ID",
            "Order_Item_I",
            "Order_Detail_ID",
            "Order_Detail_I"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name FROM Customer\nJOIN Order ON Customer.Customer_ID = Order.Customer_ID\nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID\nJOIN Product ON Order_Item.Product_ID = Product.Product_ID\nLEFT JOIN Return ON Order_Item.Order_Item_ID = Return.Order_Item_ID\nWHERE Product.Product_Price > 2500 AND Return.Order_Item_ID IS NULL;",
    "prompt_token_number": 544,
    "response_token_number": 75
},
{
    "id": 34735,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'EnergySuppliers': ['supplier_name', 'supplier_id', 'contact_name', 'phone_number', 'supplier_state', 'supplier_city', 'supplier_address', 'supplier_zip', 'supplier_location'], 'EnergySources': ['source_id', 'source_name', 'last_active', 'Solar', 'Panels', 'supplier_id', 'start_date', 'end_date', 'product_id', 'source_type', 'capacity', 'source_capacity', 'user_id'], 'EnergyProduction': ['source_id', 'end_date', 'start_date', 'production_value', 'reading_id', 'meter_id', 'production_date']}. \n# the user question is: Retrieve the names of all energy suppliers and their respective sources, and the total energy production for each source for the month of September 2031, where the source type is \"solar\" and the supplier has an office in the state of Arizona.. \n#SQL query: SELECT s.supplier_name, src.source_name, SUM(pr.production_value) AS total_production FROM EnergySuppliers s INNER JOIN EnergySources src ON s.supplier_id = src.supplier_id INNER JOIN EnergyProduction pr ON src.source_id = pr.source_id WHERE s.supplier_state = 'Arizona' AND src.source_type = 'solar' AND pr.start_date >= '2031-09-01' AND pr.end_date <= '2031-09-30' GROUP BY s.supplier_id, src.source_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address']} and \n# the user question: List the names of all suppliers who have provided at least one product that has a rating of 5 and a price greater than $1,000.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have provided at least one product that has a rating of 5 and a price greater than $1,000.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Product p ON s.Supplier_ID = p.Supplier_ID AND p.Product_Rating = 5 AND p.Product_Price > 1000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ]
    },
    "response_text": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Product p ON s.Supplier_ID = p.Supplier_ID WHERE p.Product_Rating = 5 AND p.Product_Price > 1000;",
    "prompt_token_number": 572,
    "response_token_number": 40
},
{
    "id": 34737,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Transactions': ['Amount', 'Description', 'AccountID', 'TransactionDate', 'TransactionID', 'AssetID', 'BudgetID', 'ProjectID', 'SaleID']}. \n# the user question is: Find all transactions that have a description containing the word \"payroll\":. \n#SQL query: SELECT Transactions.TransactionDate, Transactions.Description, Transactions.Amount FROM Transactions WHERE Transactions.Description LIKE '%payroll%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: List the names of all customers who have placed at least one order for products that have a rating of 3 or less and have not been returned.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed at least one order for products that have a rating of 3 or less and have not been returned.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Rating <= 3 LEFT JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID WHERE r.Return_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Return": [
            "Return_ID",
            "Order_Item_ID",
            "Order_Item_I",
            "Order_Detail_ID",
            "Order_Detail_I"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nLEFT JOIN Return ON Order_Item.Order_Item_ID = Return.Order_Item_ID \nWHERE Product.Product_Rating <= 3 AND Return.Order_Item_ID IS NULL;",
    "prompt_token_number": 436,
    "response_token_number": 76
},
{
    "id": 34739,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Review': ['rating', 'film_id', 'review_id'], 'Actor': ['actor_id', 'name', 'nationality', 'birth_date'], 'Film_Actor': ['film_id', 'actor_id']}. \n# the user question is: \"Retrieve the names of actors who have appeared in films with an average rating above 7.\". \n#SQL query: SELECT Actor.name FROM Actor INNER JOIN Film_Actor ON Actor.actor_id = Film_Actor.actor_id INNER JOIN Review ON Film_Actor.film_id = Review.film_id GROUP BY Actor.name HAVING AVG(Review.rating) > 7;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: Find the names of all customers who have placed at least one order for products that have a price between $500 and $1,000 and have been returned.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all customers who have placed at least one order for products that have a price between $500 and $1,000 and have been returned.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price BETWEEN 500 AND 1000 INNER JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Return": [
            "Return_ID",
            "Order_Item_ID",
            "Order_Item_I",
            "Order_Detail_ID",
            "Order_Detail_I"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nINNER JOIN Order ON Customer.Customer_ID = Order.Customer_ID \nINNER JOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nINNER JOIN Product ON Order_Item.Product_ID = Product.Product_ID \nINNER JOIN Return ON Order_Item.Order_Item_ID = Return.Order_Item_ID \nWHERE Product.Product_Price BETWEEN 500 AND 1000;",
    "prompt_token_number": 479,
    "response_token_number": 75
},
{
    "id": 34740,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Equipment': ['equipment_id', 'unit_cost', 'equipment_name', 'equipment_type', 'rental_rate', 'project_id', 'supplier_id', 'rental_price_per_day'], 'Tasks': ['start_date', 'task_name', 'due_date', 'end_date', 'task_id', 'priority', 'task_status', 'project_id', 'task_priority_id', 'task_status_id', 'task_start_date', 'task_end_date', 'task_expected_completion_date', 'task_completion_percentage', 'task_estimated_cost', 'task_due_date', 'actual_end_date', 'actual_start_date', 'task_lead_id', 'actual_cost', 'employee_i', 'task_description'], 'Equipment_Rentals': ['equipment_id', 'rental_return_date', 'rental_start_date', 'rental_end_date', 'equipment_rental_cost', 'rental_id', 'rental_date', 'rental_cost', 'project_id', 'end_date', 'start_date', 'task_id']}. \n# the user question is: List all the equipment that has been rented out for more than 60 days and is due for return in the next 7 days, along with the project and task it has been assigned to.. \n#SQL query: SELECT e.equipment_name, er.start_date, er.end_date, p.project_name, t.task_name FROM Equipment e JOIN Equipment_Rentals er ON e.equipment_id = er.equipment_id JOIN Tasks t ON er.task_id = t.task_id JOIN Projects p ON t.project_id = p.project_id WHERE julianday('now') - julianday(er.start_date) > 60 AND er.end_date >= DATE('now') AND julianday(er.end_date) - julianday('now') <= 7;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all products that have never been sold.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all products that have never been sold.",
    "output": "SELECT DISTINCT pr.Product_Name FROM Product pr LEFT JOIN Order_Item oi ON pr.Product_ID = oi.Product_ID WHERE oi.Order_Item_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT Product_Name FROM Product WHERE Product_ID NOT IN (SELECT Product_ID FROM Order_Item);",
    "prompt_token_number": 739,
    "response_token_number": 18
},
{
    "id": 34741,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']}. \n# the user question is: Find the name and population density of the 5 countries with the highest population density and a population greater than 10 million:. \n#SQL query: SELECT name, population_density FROM Country WHERE population > 10000000 ORDER BY population_density DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project duration of less than 1 month and has a project budget greater than $50,000.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that has a project duration of less than 1 month and has a project budget greater than $50,000.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) < 2592000 AND p.Project_Budget > 50000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee_Name FROM Employee \nWHERE Employee_ID IN (\n    SELECT Employee_ID FROM Time_Entry \n    WHERE Task_ID IN (\n        SELECT Task_ID FROM Task \n        WHERE Project_ID IN (\n            SELECT Project_ID FROM Project \n            WHERE Project_Budget > 50000 \n            AND DATEDIFF(day, Project_Start_Date, Project_End_Date) < 30)));",
    "prompt_token_number": 625,
    "response_token_number": 75
},
{
    "id": 34742,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']}. \n# the user question is: Find the number of classes that each user has enrolled in.. \n#SQL query: SELECT Users.username, COUNT(*) as num_enrollments FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id GROUP BY Users.user_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address']} and \n# the user question: List the names of all suppliers who have provided at least one product that has a rating of 4 or higher and is in stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have provided at least one product that has a rating of 4 or higher and is in stock.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Product p ON s.Supplier_ID = p.Supplier_ID AND p.Product_Rating >= 4 AND p.Product_Status = 'In Stock';",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name \nFROM Supplier \nINNER JOIN Product \nON Supplier.Supplier_ID = Product.Supplier_ID \nWHERE Product.Product_Rating >= 4 AND Product.Product_Stock > 0;",
    "prompt_token_number": 463,
    "response_token_number": 42
},
{
    "id": 34744,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Review': ['book_id', 'rating', 'reviewer_name', 'name', 'id', 'reader_id'], 'Reader': ['name', 'id', 'favorite_author_id']}. \n# the user question is: Find the top 10 readers who have left the most reviews, along with their total review count.. \n#SQL query: SELECT Reader.name, COUNT(*) AS review_count FROM Reader INNER JOIN Review ON Reader.id = Review.reader_id GROUP BY Reader.id ORDER BY review_count DESC LIMIT 10;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: List the names of all customers who have placed at least one order for products that have a rating of 5 and have been returned.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed at least one order for products that have a rating of 5 and have been returned.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Rating = 5 INNER JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Return": [
            "Return_ID",
            "Order_Item_ID",
            "Order_Item_I",
            "Order_Detail_ID",
            "Order_Detail_I"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nJOIN Return ON Order_Item.Order_Item_ID = Return.Order_Item_ID \nWHERE Product.Product_Rating = 5;",
    "prompt_token_number": 453,
    "response_token_number": 68
},
{
    "id": 34746,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Materials': ['material_id', 'material_name', 'cost_per_unit', 'unit_of_measurement', 'unit_quantity', 'unit_cost', 'quantity', 'unit_price', 'material_type_id', 'quantity_in_stock', 'material_unit', 'quantity_available', 'reorder_level', 'stock_level'], 'Suppliers': ['supplier_id', 'supplier_name', 'supplier_state'], 'Material_Suppliers': ['material_id', 'supplier_id', 'supply_price']}. \n# the user question is: List all the materials that are supplied by the supplier named \"ABC Suppliers\".. \n#SQL query: SELECT m.material_name, ms.supply_price FROM Materials m INNER JOIN Material_Suppliers ms ON m.material_id = ms.material_id INNER JOIN Suppliers s ON ms.supplier_id = s.supplier_id WHERE s.supplier_name = 'ABC Suppliers';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: List the names of all employees who have worked on a project that has a project budget greater than $5,000,000 and has not been completed.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all employees who have worked on a project that has a project budget greater than $5,000,000 and has not been completed.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Status != 'Completed' AND p.Project_Budget > 5000000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT e.Employee_Name \nFROM Employee e \nINNER JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID \nINNER JOIN Task t ON te.Task_ID = t.Task_ID \nINNER JOIN Project p ON t.Project_ID = p.Project_ID \nWHERE p.Project_Budget > 5000000 AND p.Project_Status != 'Completed';",
    "prompt_token_number": 526,
    "response_token_number": 68
},
{
    "id": 34747,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Courses': ['course_name', 'course_id', 'teacher_id', 'department_id', 'subject_id', 'level', 'type', 'program_id'], 'Teachers': ['teacher_id', 'last_name', 'first_name', 'date_of_birth', 'teacher_name']}. \n# the user question is: \"Retrieve the list of courses that have not been taught by any teacher.\". \n#SQL query: SELECT Courses.course_name FROM Courses LEFT JOIN Teachers ON Courses.teacher_id = Teachers.teacher_id WHERE Teachers.teacher_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: Find the names of all customers who have placed at least one order for products that have a price between $100 and $500 and have not been returned.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all customers who have placed at least one order for products that have a price between $100 and $500 and have not been returned.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price BETWEEN 100 AND 500 LEFT JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID WHERE r.Return_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Return": [
            "Return_ID",
            "Order_Item_ID",
            "Order_Item_I",
            "Order_Detail_ID",
            "Order_Detail_I"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nLEFT JOIN Return ON Order_Item.Order_Item_ID = Return.Order_Item_ID \nWHERE Product.Product_Price BETWEEN 100 AND 500 AND Return.Order_Item_ID IS NULL;",
    "prompt_token_number": 460,
    "response_token_number": 78
},
{
    "id": 34749,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Show': ['rating', 'year', 'title', 'show_id', 'genre_id', 'studio_id', 'release_year', 'country_id', 'network_id', 'director_id', 'air_year', 'release_date', 'genre', 'status', 'production_type', 'producer_id', 'start_year', 'end_year'], 'Episode': ['show_id', 'episode_id', 'crew_id', 'director_id', 'writer_id', 'runtime', 'title', 'season_id', 'duration', 'episode_number', 'release_year', 'air_date', 'rating', 'id', 'tv_show_id', 'name'], 'User_Rating': ['show_id', 'user_id', 'episode_id', 'rating', 'country_id', 'genre_id', 'season_id', 'season_number', 'imdb_rating', 'rotten_tomatoes_rating'], 'Crew': ['crew_id', 'name', 'job'], 'Show_Country': ['show_id', 'country_id']}. \n# the user question is: Find the crew members who have directed or written episodes in TV shows that have been released in at least four different countries and have an average rating above 8.5.. \n#SQL query: SELECT DISTINCT Crew.name FROM Crew JOIN Episode ON Crew.crew_id = Episode.director_id OR Crew.crew_id = Episode.writer_id JOIN Show ON Episode.show_id = Show.show_id JOIN Show_Country ON Show.show_id = Show_Country.show_id JOIN User_Rating ON Episode.show_id = User_Rating.show_id AND Episode.episode_id = User_Rating.episode_id WHERE ( SELECT AVG(User_Rating.rating) FROM User_Rating WHERE User_Rating.show_id = Show.show_id ) > 8.5 AND Episode.show_id IN ( SELECT DISTINCT Show.show_id FROM Show JOIN Show_Country ON Show.show_id = Show_Country.show_id GROUP BY Show.show_id HAVING COUNT(DISTINCT Show_Country.country_id) >= 4 );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: List the names of all suppliers who have provided at least one product that has a rating of 5 and has not been returned.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have provided at least one product that has a rating of 5 and has not been returned.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Product p ON s.Supplier_ID = p.Supplier_ID AND p.Product_Rating = 5 INNER JOIN Order_Item oi ON p.Product_ID = oi.Product_ID LEFT JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID WHERE r.Return_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ],
        "Return": [
            "Return_ID",
            "Order_Item_ID",
            "Order_Item_I",
            "Order_Detail_ID",
            "Order_Detail_I"
        ]
    },
    "response_text": "SELECT DISTINCT Supplier.Supplier_Name \nFROM Supplier \nJOIN Product ON Supplier.Supplier_ID = Product.Supplier_ID \nJOIN Order_Item ON Product.Product_ID = Order_Item.Product_ID\nLEFT JOIN Return ON Order_Item.Order_Item_ID = Return.Order_Item_ID \nWHERE Product.Product_Rating = 5 AND Return.Return_ID IS NULL;",
    "prompt_token_number": 736,
    "response_token_number": 66
},
{
    "id": 34751,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Specials': ['title', 'special_id', 'description', 'year', 'duration', 'release_year', 'show_id', 'production_id', 'release_date'], 'Tags': ['tag_id', 'tag'], 'Users': ['email', 'user_id', 'username'], 'User_Reviews': ['user_id', 'review_id'], 'Reviews': ['review_id', 'performance_id', 'rating', 'special_id', 'show_id'], 'Special_Tags': ['special_id', 'tag_id']}. \n# the user question is: Retrieve the usernames of all users who have reviewed at least one special that had the tag \"character comedy\".. \n#SQL query: SELECT DISTINCT u.username FROM Users u JOIN User_Reviews ur ON ur.user_id = u.user_id JOIN Reviews r ON r.review_id = ur.review_id JOIN Specials s ON s.special_id = r.special_id JOIN Special_Tags st ON st.special_id = s.special_id JOIN Tags t ON t.tag_id = st.tag_id WHERE t.tag = 'character comedy';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on any project in the last 6 months and have a job title of \"Software Engineer\".,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have not worked on any project in the last 6 months and have a job title of \"Software Engineer\".",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN DATE('now', '-6 months') AND DATE('now') WHERE t.Time_Entry_ID IS NULL AND e.Employee_Title = 'Software Engineer';",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID WHERE e.Employee_Title = 'Software Engineer' AND (t.Time_Entry_Date < DATEADD(month, -6, GETDATE()) OR t.Time_Entry_Date IS NULL);",
    "prompt_token_number": 449,
    "response_token_number": 55
},
{
    "id": 34752,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Clients': ['Client_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'City', 'Email_Address', 'Phone_Number', 'State', 'ClientName', 'ClientID', 'Name', 'ID', 'Status', 'Balance', 'pending_case', 'legal_fees'], 'Cases': ['Case_ID', 'Case_Name', 'Case_Description', 'Client_ID', 'Case_Status', 'Lawyer_ID', 'Last_Updated', 'Date_Opened', 'Date_Closed', 'Status', 'Case_Closed_Date', 'Practice_Area_ID', 'Case_Manager_ID', 'Open_Date', 'Closed', 'Case_End_Date', 'Case_Start_Date', 'Firm_ID', 'Office_ID', 'CaseStatus', 'CaseNumber', 'ClientID', 'CaseTitle', 'CaseTypeID', 'CaseType', 'CourtName', 'ClosedDate', 'Settlement', 'ID', 'HearingDate', 'ClosingDate', 'AppealStatus', 'LawyerID', 'OpeningDate', 'verdict', 'judge_id', 'defendant_state', 'plaintiff_state', 'lawyer_id'], 'Lawyers': ['Lawyer_ID', 'First_Name', 'Last_Name', 'Email', 'Phone', 'Address', 'Specialization', 'Department_ID', 'City', 'Email_Address', 'Phone_Number', 'Hourly_Rate', 'Practice_Area_ID', 'Billing_Rate_ID', 'Firm_ID', 'FirmID', 'LawSchoolID', 'HourlyRate', 'Name', 'ID', 'ExperienceYears', 'years_of_experience', 'state', 'lawyer_id'], 'Invoices': ['Invoice_ID', 'Client_ID', 'Date', 'Amount', 'Case_ID', 'Paid_Date', 'Due_Date', 'Invoice_Date', 'Time_Entry_ID', 'Paid', 'Billed', 'Task_ID', 'Issue_Date', 'Total_Amount', 'Invoice_Number', 'Amount_Billed', 'Invoice_Status', 'Billing_Date', 'Billing_Rate_ID', 'Hours_Billed', 'Amount_Paid', 'Amount_Due', 'Bill_Date', 'ClientID', 'Status', 'Unpaid', 'IssueDate']}. \n# the user question is: List all the invoices that have not yet been paid, along with the client and lawyer associated with each invoice:. \n#SQL query: SELECT Invoices.Invoice_Number, Clients.First_Name, Clients.Last_Name, Lawyers.First_Name, Lawyers.Last_Name, Invoices.Amount FROM Invoices JOIN Cases ON Invoices.Case_ID = Cases.Case_ID JOIN Clients ON Cases.Client_ID = Clients.Client_ID JOIN Lawyers ON Cases.Lawyer_ID = Lawyers.Lawyer_ID WHERE Invoices.Invoice_Status = 'Unpaid';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project budget less than $1,000,000 and has not been completed.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that has a project budget less than $1,000,000 and has not been completed.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Status != 'Completed' AND p.Project_Budget < 1000000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name \nFROM Employee \nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nJOIN Project ON Task.Project_ID = Project.Project_ID \nWHERE Project.Project_Budget < 1000000 \nAND Project.Project_Status != 'Completed';",
    "prompt_token_number": 925,
    "response_token_number": 63
},
{
    "id": 34753,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Team': ['team_name', 'team_id', 'country'], 'Match': ['team1_id', 'match_id', 'team2_id', 'venue_id', 'date', 'venue', 'winning_team_id', 'tournament_id', 'attendance', 'team', 'winning_team'], 'Tournament_Team': ['tournament_id', 'team_id']}. \n# the user question is: Retrieve the teams that have won at least one match in every tournament they have participated in. \n#SQL query: SELECT Team.team_name FROM Team JOIN Match ON Team.team_id = Match.winning_team_id JOIN Tournament_Team ON Team.team_id = Tournament_Team.team_id GROUP BY Team.team_name HAVING COUNT(DISTINCT Tournament_Team.tournament_id) = COUNT(DISTINCT Match.tournament_id);  Note: Replace the placeholder `{tournament_id}` with the actual value when executing the SQL queries.\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: List the names of all customers who have placed at least one order for products that have a price greater than $10,000 and have been returned.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed at least one order for products that have a price greater than $10,000 and have been returned.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price > 10000 INNER JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Return": [
            "Return_ID",
            "Order_Item_ID",
            "Order_Item_I",
            "Order_Detail_ID",
            "Order_Detail_I"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nJOIN Return ON Order_Item.Order_Item_ID = Return.Order_Item_ID \nWHERE Product.Product_Price > 10000;",
    "prompt_token_number": 537,
    "response_token_number": 68
},
{
    "id": 34754,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'patients': ['email', 'phone_number', 'last_name', 'patient_id', 'first_name', 'date_of_birth', 'gender', 'birthdate', 'start_date', 'session_count', 'age', 'therapy_start_date', 'birth_date'], 'patient_diagnoses': ['diagnosis_id', 'patient_id', 'patient_diagnosis_id', 'severity']}. \n# the user question is: Find the number of patients who have not been diagnosed with any mental health disorders.. \n#SQL query: SELECT COUNT(*) AS num_patients FROM patients p LEFT JOIN patient_diagnoses pd ON pd.patient_id = p.patient_id WHERE pd.diagnosis_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address']} and \n# the user question: List the names of all suppliers who have provided products that have been ordered by customers in the state of Texas.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all suppliers who have provided products that have been ordered by customers in the state of Texas.",
    "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Product p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Order_Item oi ON p.Product_ID = oi.Product_ID INNER JOIN Order o ON oi.Order_ID = o.Order_ID INNER JOIN Customer c ON o.Customer_ID = c.Customer_ID AND c.Customer_State = 'Texas';",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Supplier": [
            "Supplier_ID",
            "Supplier_Name",
            "Supplier_Address",
            "Supplier_Phone",
            "Supplier_Country_ID",
            "Supplier_State",
            "Supplier_Rating",
            "Supplier_Country",
            "Supplier_Continent",
            "City",
            "ContactName",
            "SupplierName",
            "Fax",
            "Phone",
            "Country",
            "ContactTitle",
            "Address"
        ]
    },
    "response_text": "SELECT DISTINCT s.Supplier_Name \nFROM Supplier s \nJOIN Product p ON p.Supplier_ID = s.Supplier_ID \nJOIN Order_Item oi ON oi.Product_ID = p.Product_ID \nJOIN Order o ON o.Order_ID = oi.Order_ID \nJOIN Customer c ON c.Customer_ID = o.Customer_ID \nWHERE c.Customer_State = 'Texas';",
    "prompt_token_number": 527,
    "response_token_number": 70
},
{
    "id": 34755,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaign': ['campaign_id', 'name', 'start_date', 'end_date', 'client_id', 'Charity', 'Drive', 'Launch', 'Product', 'Rebranding', 'launch_date', 'impressions', 'completed', 'create_date', 'budget', 'brand_id', 'total_spending', 'cost', 'invoiced', 'total_budget', 'product_id', 'duration_months'], 'Story': ['story_id', 'headline', 'content', 'date_published', 'outlet_id', 'campaign_id', 'date', 'journalist_id', 'sentiment_score', 'body', 'views', 'shares', 'likes', 'clicks', 'impressions', 'comments', 'text', 'publication_date', 'word_count'], 'Influencer': ['influencer_id', 'first_name', 'last_name', 'email', 'phone_number', 'followers', 'profile', 'age'], 'Endorsement': ['endorsement_id', 'influencer_id', 'product_name', 'date_posted', 'campaign_id', 'fee'], 'MediaOutlet': ['outlet_id', 'name', 'outlet_type', 'state', 'city', 'contact_info', 'rating_id', 'language', 'location_id', 'email', 'circulation']}. \n# the user question is: Retrieve the names and types of all media outlets that have been featured in a story associated with a campaign that has at least one endorsement from an influencer with the keyword \"food\" in their profile and the campaign has been featured in a story with the sentiment score greater than 0.4:. \n#SQL query: SELECT DISTINCT MediaOutlet.name, MediaOutlet.outlet_type FROM MediaOutlet INNER JOIN Story ON MediaOutlet.outlet_id = Story.outlet_id INNER JOIN Campaign ON Story.campaign_id = Campaign.campaign_id INNER JOIN Endorsement ON Campaign.campaign_id = Endorsement.campaign_id INNER JOIN Influencer ON Endorsement.influencer_id = Influencer.influencer_id WHERE Influencer.profile LIKE '%food%' AND Story.sentiment_score > 0.4;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project duration of more than 6 months and a project budget of at least $5,000,000.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that has a project duration of more than 6 months and a project budget of at least $5,000,000.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) > 15552000 AND p.Project_Budget >= 5000000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name \nFROM Employee \nINNER JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nINNER JOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nINNER JOIN Project ON Task.Project_ID = Project.Project_ID \nWHERE Project.Project_Budget >= 5000000 \nAND DATEDIFF(month, Project.Project_Start_Date, Project.Project_End_Date) > 6;",
    "prompt_token_number": 797,
    "response_token_number": 79
},
{
    "id": 34756,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'furniture_assignments': ['furniture_id', 'room_id']}. \n# the user question is: Retrieve the name and description of all products that have not been assigned to any project and have not been reviewed:. \n#SQL query: SELECT p.name, p.description FROM products p LEFT JOIN furniture_assignments fa ON p.product_id = fa.furniture_id LEFT JOIN reviews rev ON p.product_id = rev.product_id WHERE fa.furniture_id IS NULL AND rev.review_id IS NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: List the names of all customers who have placed at least one order for products that have a rating of 4 or higher and have not been returned.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed at least one order for products that have a rating of 4 or higher and have not been returned.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Rating >= 4 LEFT JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID WHERE r.Return_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Return": [
            "Return_ID",
            "Order_Item_ID",
            "Order_Item_I",
            "Order_Detail_ID",
            "Order_Detail_I"
        ]
    },
    "response_text": "SELECT DISTINCT c.Customer_Name \nFROM Customer c \nJOIN Order o ON c.Customer_ID = o.Customer_ID \nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID \nJOIN Product p ON oi.Product_ID = p.Product_ID \nLEFT JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID \nWHERE p.Product_Rating >= 4 AND r.Order_Item_ID IS NULL;",
    "prompt_token_number": 557,
    "response_token_number": 78
},
{
    "id": 34758,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'celestial_bodies': ['radius', 'mass', 'name', 'type', 'number_of_moons', 'distance_from_sun', 'id', 'distance_from_earth', 'orbital_period', 'diameter', 'orbiting_body_id', 'average_surface_temperature', 'surface_temperature', 'perihelion_distance', 'period', 'semimajor_axis', 'redshift', 'velocity', 'luminosity', 'schwarzschild_radius', 'eccentricity', 'aphelion_distance', 'spin_period', 'semi_major_axis', 'surface_gravity', 'temperature', 'magnitude', 'accretion_disk_temperature', 'rotation_period', 'obliquity', 'pulse_period', 'peak_absolute_magnitude', 'albedo', 'apparent_magnitude', 'absolute_magnitude', 'spectral_type', 'discovery_year', 'spectral_class', 'distance_from_star', 'discovery_method_id', 'equilibrium_temperature', 'metallicity', 'age', 'effective_temperature', 'atmospheric_composition', 'inclination', 'parallax', 'rotation_velocity', 'axial_tilt', 'orbital_inclination', 'density', 'rotational_velocity', 'magnetic_field_strength', 'composition', 'rotational_period', 'spin', 'distance_from_galactic_center', 'binary_system', 'constellation', 'stellar_evolution_stage', 'star_cluster_type', 'galaxy', 'orbital_eccentricity', 'star_spectral_type', 'orbital_period_unit', 'diameter_unit', 'discovery_method', 'pulse_period_unit', 'distance_unit', 'radius_unit', 'avg_temperature', 'temperature_unit', 'aphelion_unit', 'perihelion_unit', 'event_horizon_unit', 'event_horizon_radius', 'luminosity_distance', 'orbit_type', 'equatorial_diameter', 'gravity_unit', 'escape_velocity', 'angle_unit', 'surface_area', 'density_unit', 'parent_body_id', 'atmospheric_pressure', 'luminosity_class', 'inner_habitable_zone', 'outer_habitable_zone', 'period_unit', 'classification', 'pressure_unit', 'surface_pressure', 'orbiting', 'distance', 'proper_motion', 'proper_motion_unit', 'mean_radius', 'mass_unit', 'temperature_range', 'Gas', 'Giant', 'brightness_temperature', 'parallax_unit', 'metallicity_unit', 'magnetic_field_unit', 'spin_parameter', 'orbiting_id', 'stellar_mass', 'stage', 'radial_velocity', 'host_star', 'accretion_rate', 'core_type']}. \n# the user question is: Retrieve the name and type of all celestial bodies that have a type of 'Dwarf planet' and a diameter greater than 1000 kilometers.. \n#SQL query: SELECT name, type FROM celestial_bodies WHERE type = 'Dwarf planet' AND diameter > 1000;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Order_Detail': ['Order_ID', 'Product_ID', 'Product_Price', 'Product_Quantity', 'Customer_ID', 'Supplier_ID', 'Order_Detail_Date', 'Order_Detail_ID', 'Order_Detail_Price', 'Order_Detail_Quantity']} and \n# the user question: List the names of all products that have not been ordered by any customer.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all products that have not been ordered by any customer.",
    "output": "SELECT DISTINCT p.Product_Name FROM Product p LEFT JOIN Order_Detail od ON p.Product_ID = od.Product_ID WHERE od.Order_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Order_Detail": [
            "Order_ID",
            "Product_ID",
            "Product_Price",
            "Product_Quantity",
            "Customer_ID",
            "Supplier_ID",
            "Order_Detail_Date",
            "Order_Detail_ID",
            "Order_Detail_Price",
            "Order_Detail_Quantity"
        ]
    },
    "response_text": "SELECT Product_Name FROM Product WHERE Product_ID NOT IN (SELECT Product_ID FROM Order_Detail);",
    "prompt_token_number": 848,
    "response_token_number": 18
},
{
    "id": 34759,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'News_Article': ['category_id', 'content', 'created_at', 'title', 'user_id', 'id', 'article_id', 'date', 'published_date', 'word_count', 'updated_date', 'author_id', 'publish_date'], 'User': ['id', 'name', 'email', 'janesmith', 'user_id', 'category_id', 'city_id', 'country_name', 'country'], 'Comment': ['user_id', 'article_id', 'date', 'id'], 'News_Article_Topic': ['topic_id', 'article_id'], 'News_Topic': ['id', 'name']}. \n# the user question is: Retrieve the names and email addresses of all users who have not written any articles or comments on articles related to \"Technology\" in the year 2022.. \n#SQL query: SELECT DISTINCT User.name, User.email FROM User WHERE User.id NOT IN ( SELECT DISTINCT user_id FROM Comment JOIN News_Article ON Comment.article_id = News_Article.id JOIN News_Article_Topic ON News_Article.id = News_Article_Topic.article_id JOIN News_Topic ON News_Article_Topic.topic_id = News_Topic.id WHERE News_Topic.name = 'Technology' AND strftime('%Y', Comment.date) = '2022' ) AND User.id NOT IN ( SELECT DISTINCT user_id FROM News_Article JOIN News_Article_Topic ON News_Article.id = News_Article_Topic.article_id JOIN News_Topic ON News_Article_Topic.topic_id = News_Topic.id WHERE News_Topic.name = 'Technology' AND strftime('%Y', News_Article.date) = '2022' );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on any project.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have not worked on any project.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID WHERE t.Time_Entry_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name FROM Employee WHERE Employee.Employee_ID NOT IN ( SELECT DISTINCT Employee_ID FROM Time_Entry );",
    "prompt_token_number": 575,
    "response_token_number": 21
},
{
    "id": 34760,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Cases': ['status', 'user_id', 'title', 'date_closed', 'case_id', 'description', 'date_opened', 'verdict', 'crime_type', 'closed_date', 'open_date', 'CaseID', 'Verdict', 'Type', 'SentenceLength'], 'Suspects': ['case_id', 'suspect_id', 'status', 'last_name', 'first_name', 'age', 'false_identity_used'], 'Criminal_Records': ['suspect_id', 'crime_type', 'criminal_id', 'record_id', 'substance_abuse_history', 'convicted'], 'Evidence': ['case_id', 'evidence_id', 'date_collected', 'type_of_evidence', 'blood', 'DNA', 'fingerprint', 'type', 'evidence_type', 'value'], 'Matches': ['criminal_id', 'result_id', 'suspect_i', 'case_id', 'evidence_id'], 'Victims': ['victim_id', 'case_id', 'status', 'closed', 'crime_type', 'age', 'relationship', 'physical_injury', 'injury_type', 'victim_type', 'restraining_order', 'Address', 'VictimID', 'VictimName'], 'Victim_Statements': ['victim_id', 'statement', 'case_id', 'statement_type'], 'Convictions': ['record_id', 'conviction_date', 'charge', 'crime_type']}. \n# the user question is: List all cases where the suspect has been charged with a crime and the victim has provided a statement that mentions the suspect's appearance.. \n#SQL query: SELECT c.title, c.description FROM Cases c INNER JOIN Suspects s ON c.case_id = s.case_id INNER JOIN Criminal_Records cr ON s.suspect_id = cr.criminal_id INNER JOIN Convictions con ON cr.record_id = con.record_id INNER JOIN Evidence e ON c.case_id = e.case_id INNER JOIN Matches m ON s.suspect_id = m.criminal_id AND e.evidence_id = m.evidence_id INNER JOIN Victims v ON c.case_id = v.case_id INNER JOIN Victim_Statements vs ON v.victim_id = vs.victim_id WHERE vs.statement LIKE '%appearance%' AND con.charge IS NOT NULL;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: List the names of all customers who have placed an order for a product that has been returned more than once.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has been returned more than once.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID INNER JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID WHERE (SELECT COUNT(Return_ID) FROM Return WHERE Order_Item_ID = oi.Order_Item_ID) > 1;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Return": [
            "Return_ID",
            "Order_Item_ID",
            "Order_Item_I",
            "Order_Detail_ID",
            "Order_Detail_I"
        ]
    },
    "response_text": "SELECT DISTINCT c.Customer_Name \nFROM Customer c \nJOIN Order o ON c.Customer_ID = o.Customer_ID \nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID \nJOIN Return r ON r.Order_Item_ID = oi.Order_Item_ID \nGROUP BY oi.Product_ID, c.Customer_Name \nHAVING COUNT(r.Return_ID) > 1;",
    "prompt_token_number": 811,
    "response_token_number": 70
},
{
    "id": 34762,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Issue': ['volume_id', 'id', 'title', 'number', 'release_date', 'published_year', 'publication_date', 'series_id', 'publication_year', 'page_count', 'sales', 'has_variant_cover', 'cover_price', 'cover_date', 'cover_art_id', 'variant_cover'], 'Volume': ['series_id', 'id', 'title', 'publisher_id', 'issue_count', 'volume_id', 'publication_date', 'publication_year', 'release_date', 'price', 'format'], 'Series': ['publisher_id', 'title', 'id', 'universe', 'start_date', 'main_protagonist_id', 'rating'], 'Review': ['rating', 'issue_id', 'id', 'user_id'], 'User': ['username', 'id'], 'User_Review': ['user_id', 'review_id', 'id'], 'Series_Award': ['series_id', 'award_id', 'issue_id'], 'Award': ['name', 'id']}. \n# the user question is: Find the names of all users who have written reviews for issues in volumes that have won the 'Eisner Award for Best Graphic Album: New' and have also written reviews for issues in volumes that have won the 'Eisner Award for Best Continuing Series'.. \n#SQL query: SELECT DISTINCT User.username FROM User JOIN User_Review ON User.id = User_Review.user_id JOIN Review ON User_Review.review_id = Review.id JOIN Issue ON Review.issue_id = Issue.id JOIN Volume v1 ON Issue.volume_id = v1.id JOIN Series s1 ON v1.series_id = s1.id JOIN Series_Award sa1 ON s1.id = sa1.series_id JOIN Award a1 ON sa1.award_id = a1.id AND a1.name = 'Eisner Award for Best Graphic Album: New' WHERE User.id IN ( SELECT DISTINCT User.id FROM User JOIN User_Review ON User.id = User_Review.user_id JOIN Review ON User_Review.review_id = Review.id JOIN Issue ON Review.issue_id = Issue.id JOIN Volume v2 ON Issue.volume_id = v2.id JOIN Series s2 ON v2.series_id = s2.id JOIN Series_Award sa2 ON s2.id = sa2.series_id JOIN Award a2 ON sa2.award_id = a2.id AND a2.name = 'Eisner Award for Best Continuing Series' ) GROUP BY User.id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: Find the names of all products that have been ordered by more than 5 customers.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all products that have been ordered by more than 5 customers.",
    "output": "SELECT DISTINCT p.Product_Name FROM Product p INNER JOIN Order_Item oi ON p.Product_ID = oi.Product_ID INNER JOIN Order o ON oi.Order_ID = o.Order_ID GROUP BY p.Product_ID HAVING COUNT(DISTINCT o.Customer_ID) > 5;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT Product.Product_Name\nFROM Product\nJOIN Order_Item ON Product.Product_ID = Order_Item.Product_ID\nJOIN Order ON Order_Item.Order_ID = Order.Order_ID\nGROUP BY Product.Product_Name\nHAVING COUNT(DISTINCT Order.Customer_ID) > 5;",
    "prompt_token_number": 763,
    "response_token_number": 53
},
{
    "id": 34764,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Analyses': ['method_id', 'project_id', 'analysis_id', 'analysis_name', 'dataset_id', 'confidence_score'], 'DataSets': ['dataset_description', 'dataset_id', 'dataset_name', 'project_id', 'user_id', 'source_id'], 'DatasetTags': ['dataset_id', 'tag_id'], 'Tags': ['tag_id', 'tag_name'], 'Variables': ['dataset_id', 'variable_name', 'variable_type', 'variable_id', 'variable_count']}. \n# the user question is: Get the analysis names and the associated dataset names for analyses performed on datasets associated with the tag 'Marketing' and containing at least one variable of type 'Numeric':. \n#SQL query: SELECT Analyses.analysis_name, DataSets.dataset_name FROM Analyses JOIN DataSets ON Analyses.dataset_id = DataSets.dataset_id JOIN DatasetTags ON DataSets.dataset_id = DatasetTags.dataset_id JOIN Tags ON DatasetTags.tag_id = Tags.tag_id JOIN Variables ON DataSets.dataset_id = Variables.dataset_id WHERE Tags.tag_name = 'Marketing' AND Variables.variable_type = 'Numeric';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status']} and \n# the user question: Find the names of all customers who have not placed an order in the last 6 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all customers who have not placed an order in the last 6 months.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c LEFT JOIN Order o ON c.Customer_ID = o.Customer_ID AND o.Order_Date >= date('now', '-6 months') WHERE o.Order_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ]
    },
    "response_text": "SELECT Customer.Customer_Name FROM Customer LEFT JOIN Order ON Customer.Customer_ID = Order.Customer_ID WHERE Order.Order_Date NOT BETWEEN DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND CURDATE() OR Order.Order_Date IS NULL;",
    "prompt_token_number": 420,
    "response_token_number": 45
},
{
    "id": 34765,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'therapists': ['first_name', 'last_name', 'therapist_id', 'cnt', 'gender', 'is_available', 'specialty', 'last_login_date', 'session_count'], 'appointments': ['appointment_id', 'therapist_id', 'appointment_date', 'patient_id', 'end_time', 'start_time', 'session_duration_minutes', 'session_cost', 'satisfaction_rating', 'is_missed', 'sessions_per_week', 'session_length_minutes', 'start_date', 'attended', 'end_date', 'therapy_id'], 'patients': ['email', 'phone_number', 'last_name', 'patient_id', 'first_name', 'date_of_birth', 'gender', 'birthdate', 'start_date', 'session_count', 'age', 'therapy_start_date', 'birth_date']}. \n# the user question is: Find the patients who have attended appointments with all therapists.. \n#SQL query: SELECT p.first_name || ' ' || p.last_name AS patient_name FROM patients p JOIN appointments a ON a.patient_id = p.patient_id GROUP BY p.patient_id HAVING COUNT(DISTINCT a.therapist_id) = ( SELECT COUNT(*) AS therapist_count FROM therapists );\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: List the names of all employees who have worked on a project that has a budget of at least $2,000,000 and a project duration of more than 1 year.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all employees who have worked on a project that has a budget of at least $2,000,000 and a project duration of more than 1 year.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget >= 2000000 AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) > 31536000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT e.Employee_Name\nFROM Employee e \nJOIN Time_Entry t ON e.Employee_ID = t.Employee_ID\nJOIN Task ta ON ta.Task_ID = t.Task_ID \nJOIN Project p ON p.Project_ID = ta.Project_ID \nWHERE p.Project_Budget >= 2000000 AND \nDATEDIFF(year, p.Project_Start_Date, p.Project_End_Date) > 1",
    "prompt_token_number": 602,
    "response_token_number": 76
},
{
    "id": 34766,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'plants': ['endangered', 'family_name', 'flower_color', 'height', 'plant_id', 'medicinal_use', 'native_region', 'plant_name', 'lifespan', 'edible', 'scientific_name', 'habitat', 'growth_habit', 'description', 'poisonous', 'origin_country', 'drought_tolerant', 'indoor_plant', 'bloom_time', 'edible_fruit', 'fruit_type', 'light_requirement', 'fruit_color', 'price', 'min_temp_tolerance', 'max_height', 'moisture_tolerance', 'growth_rate', 'flowering_time', 'ph_tolerance', 'spread', 'propagation', 'common_name', 'plant_type', 'bloom_period', 'bloom_color', 'hardiness_zone', 'in_stock', 'min_height', 'genus_id', 'min_temp', 'water_need', 'native_state', 'max_temp', 'light_need', 'name', 'species', 'conservation_status', 'family', 'genus', 'id', 'temperature', 'moisture', 'origin', 'mature_height', 'water_needed_per_week', 'medicinal_properties']}. \n# the user question is: Show the name and moisture tolerance of all plant species in the database that have a moisture tolerance of 'Wet' and are native to Africa or Asia.. \n#SQL query: SELECT plant_name, moisture_tolerance FROM plants WHERE moisture_tolerance = 'Wet' AND native_region IN ('Africa', 'Asia');\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: Find the names of all customers who have placed an order for a product that has a rating of 5 and has not been returned.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all customers who have placed an order for a product that has a rating of 5 and has not been returned.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Rating = 5 LEFT JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID WHERE r.Return_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Return": [
            "Return_ID",
            "Order_Item_ID",
            "Order_Item_I",
            "Order_Detail_ID",
            "Order_Detail_I"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nLEFT JOIN Return ON Order_Item.Order_Item_ID = Return.Order_Item_ID \nWHERE Product.Product_Rating = 5 AND Return.Order_Item_ID IS NULL;",
    "prompt_token_number": 667,
    "response_token_number": 76
},
{
    "id": 34769,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Enrollments': ['student_id', 'course_id', 'enrollment_id', 'class_id', 'semester', 'enrollment_date'], 'Grades': ['grade', 'enrollment_id']}. \n# the user question is: \"Find the highest grade obtained by the student with ID 2.\". \n#SQL query: SELECT MAX(Grades.grade) AS highest_grade FROM Grades INNER JOIN Enrollments ON Grades.enrollment_id = Enrollments.enrollment_id WHERE Enrollments.student_id = 2;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project budget of at least $1,000,000 and has a project duration of less than 2 years.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that has a project budget of at least $1,000,000 and has a project duration of less than 2 years.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget >= 1000000 AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) < 63072000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name \n    FROM Employee \n    JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \n    JOIN Task ON Time_Entry.Task_ID = Task.Task_ID \n    JOIN Project ON Task.Project_ID = Project.Project_ID \n    WHERE Project.Project_Budget >= 1000000 AND \n          DATEDIFF(year, Project.Project_Start_Date, Project.Project_End_Date) < 2;",
    "prompt_token_number": 465,
    "response_token_number": 82
},
{
    "id": 34771,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Websites': ['website_id', 'user_id', 'url', 'created_at', 'updated_at', 'name', 'domain_id', 'domain_authority_score', 'domain_created_at'], 'Pages': ['page_id', 'website_id', 'url', 'title', 'description', 'content', 'created_at', 'updated_at', 'meta_description', 'meta_keywords', 'meta_title', 'h1_tag', 'h2_tag', 'title_tag', 'canonical_url', 'description_tag', 'header_tag', 'meta_tag', 'meta_keyword', 'h1', 'heading', 'header', 'word_count', 'time_on_page', 'total_words', 'http_status_code', 'user_id', 'last_modified_date', '[website_id]'], 'Page_Stats': ['page_stat_id', 'page_id', 'visits', 'bounce_rate', 'time_on_page', 'created_at', 'updated_at', 'organic_traffic', 'load_time', 'page_speed_score', 'total_images', 'total_videos', 'page_authority_score', 'domain_authority_score', 'page_load_time', 'backlinks', 'search_query', 'search_volume']}. \n# the user question is: Retrieve the names and URLs of all websites that have at least one page with a canonical URL containing the word \"blog\" and a time on page greater than or equal to 120 seconds:. \n#SQL query: SELECT DISTINCT Websites.name, Websites.url FROM Websites INNER JOIN Pages ON Websites.website_id = Pages.website_id INNER JOIN Page_Stats ON Pages.page_id = Page_Stats.page_id WHERE Pages.canonical_url LIKE '%blog%' AND Page_Stats.time_on_page >= 120;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project budget of at least $500,000 and has a project duration of at least 1 year.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that has a project budget of at least $500,000 and has a project duration of at least 1 year.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget >= 500000 AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) >= 31536000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name FROM Employee INNER JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID INNER JOIN Task ON Time_Entry.Task_ID = Task.Task_ID INNER JOIN Project ON Task.Project_ID = Project.Project_ID WHERE Project.Project_Budget >= 500000 AND (Project.Project_End_Date - Project.Project_Start_Date) >= 365;",
    "prompt_token_number": 706,
    "response_token_number": 68
},
{
    "id": 34772,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']}. \n# the user question is: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $80 million:. \n#SQL query: SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 80000000 AND Campaigns.status = 'active';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: List the names of all customers who have placed an order for a product that has a rating of 4 or higher and has been returned.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has a rating of 4 or higher and has been returned.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Rating >= 4 INNER JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Return": [
            "Return_ID",
            "Order_Item_ID",
            "Order_Item_I",
            "Order_Detail_ID",
            "Order_Detail_I"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nJOIN Return ON Order_Item.Order_Item_ID = Return.Order_Item_ID \nWHERE Product.Product_Rating >= 4;",
    "prompt_token_number": 654,
    "response_token_number": 68
},
{
    "id": 34773,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'orders': ['order_date', 'order_cost', 'customer_id', 'order_id', 'employee_id', 'id', 'total_price', 'ship_date', 'shipping_time', 'order_time', 'total_amount', 'ship_country', 'order_status', 'delivery_status', 'shipped_date', 'quantity', 'date', 'product_id'], 'customers': ['customer_id', 'customer_email', 'customer_name', 'id', 'name', 'region', 'country', 'state', 'address', 'postal_code', 'email', 'city', 'phone', 'USA', 'phone_number', 'first_name', 'last_name']}. \n# the user question is: Find the total number of orders placed by each customer in the year 2022.. \n#SQL query: SELECT c.customer_id, COUNT(o.order_id) AS total_orders FROM customers AS c JOIN orders AS o ON c.customer_id = o.customer_id WHERE o.order_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY c.customer_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project status of \"Completed\" and has a project duration of at least 6 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that has a project status of \"Completed\" and has a project duration of at least 6 months.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Status = 'Completed' AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) >= 15552000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT e.Employee_Name FROM Employee AS e JOIN Time_Entry AS te ON e.Employee_ID = te.Employee_ID JOIN Task AS t ON te.Task_ID = t.Task_ID JOIN Project AS p ON t.Project_ID = p.Project_ID WHERE p.Project_Status = 'Completed' AND (p.Project_End_Date - p.Project_Start_Date)>=180;",
    "prompt_token_number": 573,
    "response_token_number": 68
},
{
    "id": 34775,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Movie': ['movie_id', 'title', 'release_year', 'director_id', 'runtime', 'production_company_id', 'budget', 'release_date', 'producer_id', 'genre'], 'Collection': ['collection_id', 'name'], 'Movie_Collection': ['movie_id', 'collection_id']}. \n# the user question is: Retrieve the title of the movie, the name of the collection, and the release year for all movies in the \"Twilight Collection\" that were released between the years 2008 and 2012.. \n#SQL query: SELECT Movie.title, Collection.name, Movie.release_year FROM Movie JOIN Movie_Collection ON Movie.movie_id = Movie_Collection.movie_id JOIN Collection ON Movie_Collection.collection_id = Collection.collection_id WHERE Collection.name = 'Twilight Collection' AND Movie.release_year BETWEEN 2008 AND 2012;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project budget of at least $2,000,000 and has a project duration of at least 2 years.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that has a project budget of at least $2,000,000 and has a project duration of at least 2 years.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget >= 2000000 AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) >= 63072000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name \nFROM Employee \nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nJOIN Project ON Task.Project_ID = Project.Project_ID \nWHERE Project.Project_Budget >= 2000000 AND (DATE_PART('year', Project.Project_End_Date) - DATE_PART('year', Project.Project_Start_Date)) >= 2;",
    "prompt_token_number": 534,
    "response_token_number": 82
},
{
    "id": 34776,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Ingredients': ['Ingredient_ID', 'Ingredient_name', 'Supplier_ID', 'Unit_ID', 'Price_per_unit', 'Unit_of_measurement', 'Unit_price', 'Date_last_purchased', 'Date_supplied', 'Description', 'Unit', 'Cost_per_unit', 'Stock_quantity', 'Quantity', 'Unit_of_measure'], 'Suppliers': ['Supplier_ID', 'Supplier_name', 'Address', 'Phone_number', 'Email', 'Contact_name', 'Date_last_contacted', 'Contact_person', 'Supplier_rating', 'Supplier_address', 'Supplier_phone'], 'Recipes': ['Recipe_ID', 'Recipe_name', 'Description', 'Difficulty_level', 'Total_cooking_time', 'Recipe_description', 'Vegetarian', 'Menu_Item_ID'], 'Recipe_Ingredients': ['Recipe_Ingredient_ID', 'Recipe_ID', 'Ingredient_ID', 'Quantity', 'Quantity_used'], 'Menu_Items': ['Menu_Item_ID', 'Menu_Item_name', 'Description', 'Price', 'Availability', 'Recipe_ID', 'Category_ID', 'Restaurant_ID', 'Vegetarian', 'Calories', 'Menu_Category_ID']}. \n# the user question is: Retrieve the name and phone number of all suppliers who provide ingredients used in a menu item called 'Cheeseburger'.. \n#SQL query: SELECT Suppliers.Supplier_name, Suppliers.Phone_number FROM Suppliers JOIN Ingredients ON Suppliers.Supplier_ID = Ingredients.Supplier_ID JOIN Recipe_Ingredients ON Ingredients.Ingredient_ID = Recipe_Ingredients.Ingredient_ID JOIN Recipes ON Recipe_Ingredients.Recipe_ID = Recipes.Recipe_ID JOIN Menu_Items ON Recipes.Recipe_name = Menu_Items.Menu_Item_name WHERE Menu_Items.Menu_Item_name = 'Cheeseburger';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all products that have not been ordered by any customers.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all products that have not been ordered by any customers.",
    "output": "SELECT DISTINCT p.Product_Name FROM Product p LEFT JOIN Order_Item oi ON p.Product_ID = oi.Product_ID WHERE oi.Order_Item_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT Product.Product_Name FROM Product LEFT JOIN Order_Item ON Product.Product_ID = Order_Item.Product_ID WHERE Order_Item.Order_ID IS NULL;",
    "prompt_token_number": 563,
    "response_token_number": 27
},
{
    "id": 34777,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Sessions': ['psychologist_id', 'patient_id', 'date', 'location', 'therapist', 'therapist_id', 'session_date', 'session_id', 'duration_minutes', 'missed', 'remote_session'], 'Patients': ['name', 'patient_id', 'birthdate', 'case_id', 'age', 'date_of_birth', 'last_name', 'first_name'], 'Diagnosis': ['suspect_id', 'patient_id', 'disorder', 'disorder_subtype', 'recommendation', 'disorder_id', 'criminal_id'], 'Therapists': ['last_name', 'therapist_id', 'first_name', 'count', 'experience_years', 'license_number'], 'Specializations': ['specialization_name', 'therapist_id']}. \n# the user question is: List all therapists who have treated patients with obsessive-compulsive disorder (OCD) and have at least one specialization in cognitive-behavioral therapy.. \n#SQL query: SELECT DISTINCT t.first_name, t.last_name FROM Therapists t INNER JOIN Sessions s ON t.therapist_id = s.therapist_id INNER JOIN Patients p ON s.patient_id = p.patient_id INNER JOIN Diagnosis d ON p.patient_id = d.patient_id INNER JOIN Specializations sp ON t.therapist_id = sp.therapist_id WHERE d.disorder LIKE '%obsessive-compulsive disorder%' AND sp.specialization_name LIKE '%cognitive-behavioral therapy%';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project status of \"In Progress\" and has a project duration of less than 1 year.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that has a project status of \"In Progress\" and has a project duration of less than 1 year.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Status = 'In Progress' AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) < 31536000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT e.Employee_Name \nFROM Employee e \nINNER JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID \nINNER JOIN Task t ON te.Task_ID = t.Task_ID \nINNER JOIN Project p ON t.Project_ID = p.Project_ID \nWHERE p.Project_Status = 'In Progress' \nAND DATEDIFF(year, p.Project_Start_Date, IFNULL(p.Project_Actual_End_Date, p.Project_Estimated_End_Date)) < 1;",
    "prompt_token_number": 655,
    "response_token_number": 92
},
{
    "id": 34778,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'movies': ['genre_id', 'budget', 'title', 'release_year', 'director_id', 'id', 'rating', 'release_date', 'runtime', 'worldwide_gross', 'director', 'year_of_release', 'worldwide_box_office_revenue', 'genre', 'movie_title', 'movie_id', 'studio_id', 'name', 'total_gross', 'production_company', 'avg_rating'], 'genres': ['id', 'name']}. \n# the user question is: Return the name and total gross of the top 10 highest-grossing horror movies, ordered by total gross in descending order.. \n#SQL query: SELECT name, total_gross FROM movies WHERE genre_id = ( SELECT id FROM genres WHERE name = 'Horror' ) ORDER BY total_gross DESC LIMIT 10;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: List the names of all customers who have placed an order for a product that has a rating of 4 or higher and has not been returned.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has a rating of 4 or higher and has not been returned.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Rating >= 4 LEFT JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID WHERE r.Return_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ],
        "Return": [
            "Return_ID",
            "Order_Item_ID",
            "Order_Item_I",
            "Order_Detail_ID",
            "Order_Detail_I"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer\nJOIN Order ON Customer.Customer_ID = Order.Customer_ID\nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID\nJOIN Product ON Order_Item.Product_ID = Product.Product_ID\nLEFT JOIN Return ON Order_Item.Order_Item_ID = Return.Order_Item_ID\nWHERE Product.Product_Rating >= 4 AND Return.Return_ID IS NULL;",
    "prompt_token_number": 519,
    "response_token_number": 75
},
{
    "id": 34779,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Websites': ['website_id', 'user_id', 'url', 'created_at', 'updated_at', 'name', 'domain_id', 'domain_authority_score', 'domain_created_at'], 'Pages': ['page_id', 'website_id', 'url', 'title', 'description', 'content', 'created_at', 'updated_at', 'meta_description', 'meta_keywords', 'meta_title', 'h1_tag', 'h2_tag', 'title_tag', 'canonical_url', 'description_tag', 'header_tag', 'meta_tag', 'meta_keyword', 'h1', 'heading', 'header', 'word_count', 'time_on_page', 'total_words', 'http_status_code', 'user_id', 'last_modified_date', '[website_id]'], 'Page_Stats': ['page_stat_id', 'page_id', 'visits', 'bounce_rate', 'time_on_page', 'created_at', 'updated_at', 'organic_traffic', 'load_time', 'page_speed_score', 'total_images', 'total_videos', 'page_authority_score', 'domain_authority_score', 'page_load_time', 'backlinks', 'search_query', 'search_volume']}. \n# the user question is: Retrieve the names and URLs of all websites that have at least one page with a time on page less than or equal to 5 seconds and a bounce rate greater than 0.95:. \n#SQL query: SELECT DISTINCT Websites.name, Websites.url FROM Websites INNER JOIN Pages ON Websites.website_id = Pages.website_id INNER JOIN Page_Stats ON Pages.page_id = Page_Stats.page_id WHERE Page_Stats.time_on_page <= 5 AND Page_Stats.bounce_rate > 0.95;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on any projects in the last year.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have not worked on any projects in the last year.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND strftime('%s', 'now') - strftime('%s', t.Time_Entry_Date) < 31536000 WHERE t.Time_Entry_ID IS NULL;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name \nFROM Employee\nLEFT JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID\nWHERE Time_Entry.Task_ID IS NULL OR Time_Entry.Time_Entry_Date <= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR);",
    "prompt_token_number": 575,
    "response_token_number": 48
},
{
    "id": 34780,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'password', 'email', 'registration_date', 'gender', 'johnD', 'Male', 'Female', 'location', 'alice23', 'janeD'], 'Groups': ['group_id', 'group_name', 'creation_date', 'focus_area', 'interest_id'], 'Group_Members': ['member_id', 'group_id', 'user_id', 'membership_status'], 'Interests': ['interest_id', 'interest_name', 'Social', 'Political', 'Science'], 'User_Interests': ['user_interest_id', 'user_id', 'interest_id'], 'Followers': ['follower_id', 'followed_id', 'user_i']}. \n# the user question is: Retrieve the usernames and the number of followers for users who have interests in 'Sociology of Culture' and are members of groups with more than 1000 members. \n#SQL query: SELECT Users.username, COUNT(Followers.follower_id) AS num_followers FROM Users INNER JOIN User_Interests ON Users.user_id = User_Interests.user_id INNER JOIN Interests ON User_Interests.interest_id = Interests.interest_id INNER JOIN Group_Members ON Users.user_id = Group_Members.user_id INNER JOIN Groups ON Group_Members.group_id = Groups.group_id INNER JOIN Followers ON Users.user_id = Followers.followed_id WHERE Interests.interest_name = 'Sociology of Culture' AND Groups.group_id IN (SELECT group_id FROM Group_Members GROUP BY group_id HAVING COUNT(user_id) > 1000) GROUP BY Users.user_id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is out of stock.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that is out of stock.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock = 0;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name FROM Customer INNER JOIN Order ON Customer.Customer_ID = Order.Customer_ID INNER JOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID INNER JOIN Product ON Order_Item.Product_ID = Product.Product_ID WHERE Product.Product_Stock = 0;",
    "prompt_token_number": 643,
    "response_token_number": 52
},
{
    "id": 34781,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'PlantSpecies': ['id', 'name', 'genus_id', 'scientific_name'], 'PlantSpeciesDisease': ['plant_disease_id', 'plant_species_id'], 'PlantDisease': ['id', 'name'], 'PlantSpeciesPest': ['plant_pest_id', 'plant_species_id'], 'PlantPest': ['id', 'name'], 'PlantGenus': ['id', 'family_id', 'name']}. \n# the user question is: Find all plant genera that have plant species with both a disease called \"Black spot\" and a pest called \"Aphids\":. \n#SQL query: SELECT PlantGenus.name AS genus FROM PlantGenus JOIN PlantSpecies ON PlantGenus.id = PlantSpecies.genus_id JOIN PlantSpeciesDisease ON PlantSpecies.id = PlantSpeciesDisease.plant_species_id JOIN PlantDisease ON PlantSpeciesDisease.plant_disease_id = PlantDisease.id JOIN PlantSpeciesPest ON PlantSpecies.id = PlantSpeciesPest.plant_species_id JOIN PlantPest ON PlantSpeciesPest.plant_pest_id = PlantPest.id WHERE PlantDisease.name = 'Black spot' AND PlantPest.name = 'Aphids' GROUP BY PlantGenus.id;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project budget of less than $500,000 and has a project duration of at least 1 year.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that has a project budget of less than $500,000 and has a project duration of at least 1 year.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget < 500000 AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) >= 31536000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT Employee.Employee_Name FROM Employee JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID JOIN Task ON Time_Entry.Task_ID = Task.Task_ID JOIN Project ON Task.Project_ID = Project.Project_ID WHERE Project.Project_Budget < 500000 AND DATEDIFF(year, Project.Project_Start_Date, Project.Project_End_Date) >= 1;",
    "prompt_token_number": 612,
    "response_token_number": 68
},
{
    "id": 34783,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Projects': ['project_name', 'project_id', 'end_date', 'start_date', 'square_footage', 'status', 'project_manager_id', 'project_status_id', 'project_completion_date', 'project_start_date', 'project_budget', 'project_end_date', 'project_deadline', 'project_location', 'supervisor_id', 'completion_date', 'Expansion', 'Highway', 'Construction', 'Building', 'Office', 'budget', 'actual_end_date', 'actual_start_date', 'State', 'Project_ID', 'Name', 'Status', 'Start_Date', 'expected_completion_date', 'Completion_Date', 'Actual_Costs', 'Project_Name', 'Budget', 'Client_ID', 'cost', 'name', 'id'], 'Project_Materials': ['project_id', 'material_id', 'quantity', 'total_quantity'], 'Materials': ['material_id', 'material_name', 'cost_per_unit', 'unit_of_measurement', 'unit_quantity', 'unit_cost', 'quantity', 'unit_price', 'material_type_id', 'quantity_in_stock', 'material_unit', 'quantity_available', 'reorder_level', 'stock_level']}. \n# the user question is: List all the projects that involve a material with a cost per unit of more than $50.. \n#SQL query: SELECT DISTINCT p.project_name FROM Projects p INNER JOIN Project_Materials pm ON p.project_id = pm.project_id INNER JOIN Materials m ON pm.material_id = m.material_id WHERE m.cost_per_unit > 50;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: Find the names of all customers who have placed an order for a product that is currently on sale.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all customers who have placed an order for a product that is currently on sale.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Sale_Price IS NOT NULL AND p.Product_Sale_Price < p.Product_Price;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Status = 'on sale';",
    "prompt_token_number": 628,
    "response_token_number": 54
},
{
    "id": 34784,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Products': ['product_id', 'product_name', 'price', 'description', 'product_description', 'supplier_id', 'category_id', 'units_in_stock', 'expiration_date', 'stock_quantity', 'expiration_id', 'discontinued', 'cost_price', 'quantity_in_stock', 'unit_price', 'unit_cost', 'brand_name', 'last_supplied_date', 'manufacturer_name', 'backorder'], 'Sale_Items': ['product_id', 'sale_id', 'quantity', 'sale_item_id', 'customer_id', 'unit_price', 'discount_code', 'sale_date', 'price'], 'Sales': ['employee_id', 'sale_id', 'sale_date', 'customer_id', 'total', 'total_amount', 'payment_method', 'total_price', 'total_spent', 'location_id', 'coupon_code', 'start_date', 'discount_percentage', 'end_date', 'product_id'], 'Product_Ratings': ['rating', 'product_id']}. \n# the user question is: Retrieve the names and total revenue for all products that have been sold at least 20 times and have a rating of 4 or higher, and were sold in the year 2024.. \n#SQL query: SELECT Products.product_name, SUM(Sale_Items.quantity * Products.price) AS total_revenue FROM Products INNER JOIN Sale_Items ON Products.product_id = Sale_Items.product_id INNER JOIN Product_Ratings ON Products.product_id = Product_Ratings.product_id INNER JOIN Sales ON Sale_Items.sale_id = Sales.sale_id WHERE Product_Ratings.rating >= 4 AND (SELECT COUNT(Sale_Items.sale_item_id) FROM Sale_Items WHERE Sale_Items.product_id = Products.product_id) >= 20 AND strftime('%Y', Sales.sale_date) = '2024' GROUP BY Products.product_id ORDER BY total_revenue DESC;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: List the names of all employees who have worked on a project that has a project budget of at least $1,000,000 and has a project duration of less than 6 months.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all employees who have worked on a project that has a project budget of at least $1,000,000 and has a project duration of less than 6 months.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget >= 1000000 AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) < 15552000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name \nFROM Employee \nINNER JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nINNER JOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nINNER JOIN Project ON Task.Project_ID = Project.Project_ID\nWHERE Project.Project_Budget >= 1000000 AND \n      (julianday(Project.Project_End_Date) - julianday(Project.Project_Start_Date)) < 180;",
    "prompt_token_number": 728,
    "response_token_number": 85
},
{
    "id": 34785,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'User': ['UserID', 'FirstName', 'LastName', 'Email', 'Password', 'Birthdate', 'Gender', 'Age', 'Height', 'BMI', 'Weight'], 'Exercise': ['ExerciseID', 'ExerciseName', 'Description', 'Image', 'CaloriesBurned', 'Distance', 'TargetMuscle', 'Category', 'ExerciseType', 'Name', 'CaloriesPerRep', 'CaloriesPerMinute', 'MuscleGroupID', 'ExerciseTypeID'], 'Workout': ['WorkoutID', 'UserID', 'PlanID', 'Date', 'WorkoutType', 'StartTime', 'EndTime', 'Duration', 'TimeSeconds', 'CaloriesBurned', 'WorkoutTypeID', 'Distance', 'Type', 'TotalCalories', 'USERID', 'WorkoutName', 'Steps', 'HeartRate', 'ExerciseTypeID'], 'WorkoutExercise': ['WorkoutID', 'ExerciseID', 'Sets', 'Reps', 'Weight', 'Duration', 'CaloriesBurned', 'NumSets', 'NumReps']}. \n# the user question is: Find the total weight lifted by each user for each exercise over the last month, grouped by age group:. \n#SQL query: SELECT CASE WHEN User.Age < 18 THEN 'Under 18' WHEN User.Age >= 18 AND User.Age < 30 THEN '18-29' WHEN User.Age >= 30 AND User.Age < 40 THEN '30-39' WHEN User.Age >= 40 AND User.Age < 50 THEN '40-49' ELSE '50 and above' END AS AgeGroup, Exercise.ExerciseName, SUM(WorkoutExercise.Sets * WorkoutExercise.Reps * WorkoutExercise.Weight) AS TotalWeightLifted FROM User INNER JOIN Workout ON User.UserID = Workout.UserID INNER JOIN WorkoutExercise ON Workout.WorkoutID = WorkoutExercise.WorkoutID INNER JOIN Exercise ON WorkoutExercise.ExerciseID = Exercise.ExerciseID WHERE Workout.Date >= DATE('now', '-30 days') GROUP BY AgeGroup, Exercise.ExerciseID ORDER BY AgeGroup, TotalWeightLifted DESC\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: List the names of all employees who have worked on a project that has a project status of \"Completed\" and has a project budget of at least $500,000.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all employees who have worked on a project that has a project status of \"Completed\" and has a project budget of at least $500,000.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Status = 'Completed' AND p.Project_Budget >= 500000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name \nFROM Employee \nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nJOIN Project ON Task.Project_ID = Project.Project_ID \nWHERE Project.Project_Status = 'Completed' \nAND Project.Project_Budget >= 500000",
    "prompt_token_number": 788,
    "response_token_number": 63
},
{
    "id": 34786,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'News_Article': ['category_id', 'content', 'created_at', 'title', 'user_id', 'id', 'article_id', 'date', 'published_date', 'word_count', 'updated_date', 'author_id', 'publish_date'], 'Article_Rating': ['rating', 'article_id', 'user_id']}. \n# the user question is: Retrieve the top 5 articles with the highest average rating that were published in the last month.. \n#SQL query: SELECT News_Article.title, AVG(Article_Rating.rating) AS avg_rating FROM News_Article JOIN Article_Rating ON News_Article.id = Article_Rating.article_id WHERE News_Article.published_date >= DATE('now', '-1 month') GROUP BY News_Article.id ORDER BY avg_rating DESC LIMIT 5;\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project status of \"In Progress\" and has a project duration of more than 1 year.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "Find the names of all employees who have worked on a project that has a project status of \"In Progress\" and has a project duration of more than 1 year.",
    "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Status = 'In Progress' AND strftime('%s', 'now') - strftime('%s', p.Project_Start_Date) > 31536000;",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Employee": [
            "Employee_ID",
            "Employee_Name",
            "Employee_Address",
            "Employee_Phone",
            "Employee_Email",
            "Department_ID",
            "Employee_Position",
            "Employee_Title",
            "Employee_Salary",
            "Job_ID",
            "Store_ID",
            "Employee_City",
            "Manager_ID",
            "Status",
            "Name",
            "Years_of_Experience",
            "Department",
            "HireDate",
            "Salary"
        ],
        "Project": [
            "Project_ID",
            "Project_Name",
            "Project_Start_Date",
            "Project_End_Date",
            "Project_Manager_ID",
            "Project_Budget",
            "Project_Actual_End_Date",
            "Project_Status",
            "Project_Estimated_End_Date",
            "Department_ID",
            "Store_ID"
        ],
        "Task": [
            "Task_ID",
            "Task_Name",
            "Project_ID",
            "Task_Status",
            "Task_Estimated_Cost",
            "Task_Estimated_End_Date",
            "Task_Actual_End_Date",
            "Task_End_Date",
            "Task_Due_Date",
            "Task_Priority"
        ],
        "Time_Entry": [
            "Time_Entry_ID",
            "Employee_ID",
            "Task_ID",
            "Time_Entry_Date",
            "Time_Entry_Hours",
            "Time_Worked",
            "Time_Spent"
        ]
    },
    "response_text": "SELECT DISTINCT Employee.Employee_Name \nFROM Employee \nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID \nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID \nJOIN Project ON Task.Project_ID = Project.Project_ID \nWHERE Project.Project_Status = \"In Progress\" \nAND julianday(Project.Project_End_Date) - julianday(Project.Project_Start_Date) > 365;",
    "prompt_token_number": 525,
    "response_token_number": 79
},
{
    "id": 34787,
    "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
    "input": "Here is an example, based on \n#the table&column(database schema) information is: {'Users': ['user_id', 'username', 'email', 'registration_date', 'dataset_count', 'role'], 'Projects': ['user_id', 'project_id', 'project_name', 'dataset_count', 'dataset_id', 'creation_year', 'created_at'], 'DataSets': ['dataset_description', 'dataset_id', 'dataset_name', 'project_id', 'user_id', 'source_id'], 'DatasetTags': ['dataset_id', 'tag_id'], 'Tags': ['tag_id', 'tag_name']}. \n# the user question is: Retrieve the dataset names and their associated tags for datasets owned by the user with username 'jane.smith':. \n#SQL query: SELECT DataSets.dataset_name, Tags.tag_name FROM DataSets JOIN DatasetTags ON DataSets.dataset_id = DatasetTags.dataset_id JOIN Tags ON DatasetTags.tag_id = Tags.tag_id JOIN Projects ON DataSets.project_id = Projects.project_id JOIN Users ON Projects.user_id = Users.user_id WHERE Users.username = 'jane.smith';\nSo for my task & question:\nBased on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a price higher than the average price of products in their product category.,\nGive me the right SQL query for the question. Only SQL query, no explaination. \n# SQL query:",
    "user_question": "List the names of all customers who have placed an order for a product that has a price higher than the average price of products in their product category.",
    "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price > (SELECT AVG(Product_Price) FROM Product WHERE Product_Category_ID = p.Product_Category_ID);",
    "schema": "business_intelligence",
    "processed_schema_content": {
        "Customer": [
            "Customer_ID",
            "Customer_Name",
            "Customer_Address",
            "Customer_Phone",
            "Customer_State",
            "Country_ID",
            "Customer_Country",
            "Customer_City",
            "Customer_Email",
            "Name",
            "Email",
            "ID"
        ],
        "Order": [
            "Order_ID",
            "Order_Date",
            "Customer_ID",
            "Employee_ID",
            "Order_Total_Amount",
            "Order_Total",
            "Order_Total_Price",
            "Store_ID",
            "Status"
        ],
        "Order_Item": [
            "Order_Item_ID",
            "Order_ID",
            "Product_ID",
            "Quantity",
            "Price",
            "Order_Item_Date"
        ],
        "Product": [
            "Product_ID",
            "Product_Name",
            "Product_Price",
            "Product_Status",
            "Product_Discount",
            "Product_Quantity",
            "Supplier_ID",
            "Product_Cost",
            "Product_Rating",
            "Product_Stock",
            "Product_Sale_Price",
            "Product_Category_ID",
            "Product_Category_I",
            "Product_Category",
            "Product_Weight",
            "Name",
            "ProductID",
            "Category",
            "Price",
            "ID"
        ]
    },
    "response_text": "SELECT DISTINCT Customer.Customer_Name \nFROM Customer \nJOIN Order ON Customer.Customer_ID = Order.Customer_ID \nJOIN Order_Item ON Order.Order_ID = Order_Item.Order_ID \nJOIN Product ON Order_Item.Product_ID = Product.Product_ID \nWHERE Product.Product_Price > (SELECT AVG(Product_Price) FROM Product WHERE Product.Product_Category = 'the product category');",
    "prompt_token_number": 532,
    "response_token_number": 68
},
