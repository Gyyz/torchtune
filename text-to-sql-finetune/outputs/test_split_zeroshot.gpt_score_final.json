[
    {
        "id": 33055,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'product_specs': ['weight', 'product_id', 'height', 'width', 'length', 'depth', 'Leather', 'material', 'color'], 'product_inventory': ['product_id', 'quantity_in_stock']} and \n# the user question: Retrieve the name and quantity in stock of all products that have a material of wood:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and quantity in stock of all products that have a material of wood:",
        "output": "SELECT p.name, pi.quantity_in_stock FROM products p JOIN product_inventory pi ON p.product_id = pi.product_id JOIN product_specs ps ON p.product_id = ps.product_id WHERE ps.material = 'wood';",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "product_specs": [
                "weight",
                "product_id",
                "height",
                "width",
                "length",
                "depth",
                "Leather",
                "material",
                "color"
            ],
            "product_inventory": [
                "product_id",
                "quantity_in_stock"
            ]
        },
        "response_text": "```sql\nSELECT p.name, pi.quantity_in_stock\nFROM products p\nJOIN product_specs ps ON p.product_id = ps.product_id\nJOIN product_inventory pi ON p.product_id = pi.product_id\nWHERE ps.material = 'wood';\n```",
        "prompt_token_number": 199,
        "response_token_number": 50,
        "response_text_processed": "SELECT p.name, pi.quantity_in_stock FROM products p JOIN product_specs ps ON p.product_id = ps.product_id JOIN product_inventory pi ON p.product_id = pi.product_id WHERE ps.material = 'wood'"
    },
    {
        "id": 33056,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products that have been reviewed at least once, sorted by average rating in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and average rating of all products that have been reviewed at least once, sorted by average rating in descending order:",
        "output": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id HAVING COUNT(r.review_id) > 0 ORDER BY avg_rating DESC;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT p.name, AVG(r.rating) AS average_rating\nFROM products p\nJOIN reviews r ON p.product_id = r.product_id\nGROUP BY p.name\nHAVING COUNT(r.review_id) > 0\nORDER BY average_rating DESC;\n```",
        "prompt_token_number": 191,
        "response_token_number": 54,
        "response_text_processed": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.name HAVING COUNT(r.review_id) > 0 ORDER BY average_rating DESC"
    },
    {
        "id": 33057,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of all products that have been added to the catalog in the past month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all products that have been added to the catalog in the past month:",
        "output": "SELECT p.name, p.price FROM products p WHERE p.added_to_catalog >= DATE('now', '-1 month');",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT name, price\nFROM products\nWHERE added_to_catalog >= NOW() - INTERVAL '1 month';\n```",
        "prompt_token_number": 156,
        "response_token_number": 25,
        "response_text_processed": "SELECT name, price FROM products WHERE added_to_catalog >= NOW() - INTERVAL '1 month'"
    },
    {
        "id": 33059,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of the most expensive product in the catalog:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of the most expensive product in the catalog:",
        "output": "SELECT name, price FROM products WHERE price = (SELECT MAX(price) FROM products);",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT name, price\nFROM products\nORDER BY price DESC\nLIMIT 1;\n```",
        "prompt_token_number": 150,
        "response_token_number": 21,
        "response_text_processed": "SELECT name, price FROM products ORDER BY price DESC LIMIT 1"
    },
    {
        "id": 33061,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products that have an average rating of at least 4.5:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and average rating of all products that have an average rating of at least 4.5:",
        "output": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id HAVING AVG(r.rating) >= 4.5;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT p.name, AVG(r.rating) AS average_rating\nFROM products p\nJOIN reviews r ON p.product_id = r.product_id\nGROUP BY p.name\nHAVING AVG(r.rating) >= 4.5;\n```",
        "prompt_token_number": 188,
        "response_token_number": 49,
        "response_text_processed": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.name HAVING AVG(r.rating) >= 4.5"
    },
    {
        "id": 33062,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'product_inventory': ['product_id', 'quantity_in_stock']} and \n# the user question: Retrieve the name and quantity in stock of all products that have a quantity in stock of less than 10:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and quantity in stock of all products that have a quantity in stock of less than 10:",
        "output": "SELECT p.name, pi.quantity_in_stock FROM products p JOIN product_inventory pi ON p.product_id = pi.product_id WHERE pi.quantity_in_stock < 10;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "product_inventory": [
                "product_id",
                "quantity_in_stock"
            ]
        },
        "response_text": "```sql\nSELECT name, quantity_in_stock \nFROM products \nWHERE quantity_in_stock < 10;\n```",
        "prompt_token_number": 171,
        "response_token_number": 22,
        "response_text_processed": "SELECT name, quantity_in_stock FROM products WHERE quantity_in_stock < 10"
    },
    {
        "id": 33063,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and total sales of all products that have been sold in the past month, sorted by total sales in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total sales of all products that have been sold in the past month, sorted by total sales in descending order:",
        "output": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_sales FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date >= DATE('now', '-1 month') GROUP BY p.product_id ORDER BY total_sales DESC;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT p.name, SUM(oi.quantity * oi.price) AS total_sales\nFROM products p\nJOIN order_items oi ON p.product_id = oi.product_id\nJOIN orders o ON oi.order_id = o.order_id\nWHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY p.name\nORDER BY total_sales DESC;\n```",
        "prompt_token_number": 248,
        "response_token_number": 76,
        "response_text_processed": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_sales FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY p.name ORDER BY total_sales DESC"
    },
    {
        "id": 33064,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of the 5 cheapest products in the catalog:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of the 5 cheapest products in the catalog:",
        "output": "SELECT name, price FROM products ORDER BY price ASC LIMIT 5;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT name, price\nFROM products\nORDER BY price ASC\nLIMIT 5;\n```",
        "prompt_token_number": 151,
        "response_token_number": 21,
        "response_text_processed": "SELECT name, price FROM products ORDER BY price ASC LIMIT 5"
    },
    {
        "id": 33065,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and total sales of all products that have been sold more than 500 times, sorted by total sales in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total sales of all products that have been sold more than 500 times, sorted by total sales in descending order:",
        "output": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_sales FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING COUNT(oi.order_item_id) > 500 ORDER BY total_sales DESC;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT p.name, SUM(oi.quantity * oi.price) AS total_sales\nFROM products p\nJOIN order_items oi ON p.product_id = oi.product_id\nGROUP BY p.name\nHAVING SUM(oi.quantity) > 500\nORDER BY total_sales DESC;\n```",
        "prompt_token_number": 194,
        "response_token_number": 59,
        "response_text_processed": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_sales FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.name HAVING SUM(oi.quantity) > 500 ORDER BY total_sales DESC"
    },
    {
        "id": 33066,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products that have been reviewed at least 10 times, sorted by average rating in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and average rating of all products that have been reviewed at least 10 times, sorted by average rating in descending order:",
        "output": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id HAVING COUNT(r.review_id) >= 10 ORDER BY avg_rating DESC;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT p.name, AVG(r.rating) AS average_rating\nFROM products p\nJOIN reviews r ON p.product_id = r.product_id\nGROUP BY p.name\nHAVING COUNT(r.review_id) >= 10\nORDER BY average_rating DESC;\n```",
        "prompt_token_number": 193,
        "response_token_number": 54,
        "response_text_processed": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.name HAVING COUNT(r.review_id) >= 10 ORDER BY average_rating DESC"
    },
    {
        "id": 33067,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'product_inventory': ['product_id', 'quantity_in_stock']} and \n# the user question: Retrieve the name and quantity in stock of all products that have a quantity in stock of more than 100:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and quantity in stock of all products that have a quantity in stock of more than 100:",
        "output": "SELECT p.name, pi.quantity_in_stock FROM products p JOIN product_inventory pi ON p.product_id = pi.product_id WHERE pi.quantity_in_stock > 100;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "product_inventory": [
                "product_id",
                "quantity_in_stock"
            ]
        },
        "response_text": "```sql\nSELECT name, quantity_in_stock\nFROM products\nWHERE quantity_in_stock > 100;\n```",
        "prompt_token_number": 171,
        "response_token_number": 22,
        "response_text_processed": "SELECT name, quantity_in_stock FROM products WHERE quantity_in_stock > 100"
    },
    {
        "id": 33068,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and total sales of all products that have been sold in the past 3 months, sorted by total sales in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total sales of all products that have been sold in the past 3 months, sorted by total sales in descending order:",
        "output": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_sales FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date >= DATE('now', '-3 months') GROUP BY p.product_id ORDER BY total_sales DESC;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT p.name, SUM(oi.quantity * oi.price) AS total_sales\nFROM products p\nJOIN order_items oi ON p.product_id = oi.product_id\nJOIN orders o ON oi.order_id = o.order_id\nWHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\nGROUP BY p.name\nORDER BY total_sales DESC;\n```",
        "prompt_token_number": 250,
        "response_token_number": 76,
        "response_text_processed": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_sales FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY p.name ORDER BY total_sales DESC"
    },
    {
        "id": 33071,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products that have been reviewed at least once, but have an average rating of less than 3.0:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and average rating of all products that have been reviewed at least once, but have an average rating of less than 3.0:",
        "output": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id HAVING COUNT(r.review_id) >= 1 AND AVG(r.rating) < 3.0;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT p.name, AVG(r.rating) AS average_rating\nFROM products p\nJOIN reviews r ON p.product_id = r.product_id\nGROUP BY p.name\nHAVING COUNT(r.review_id) > 0 AND AVG(r.rating) < 3.0;\n```",
        "prompt_token_number": 196,
        "response_token_number": 58,
        "response_text_processed": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.name HAVING COUNT(r.review_id) > 0 AND AVG(r.rating) < 3.0"
    },
    {
        "id": 33072,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'product_inventory': ['product_id', 'quantity_in_stock']} and \n# the user question: Retrieve the name and quantity in stock of all products that have a quantity in stock of exactly 0:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and quantity in stock of all products that have a quantity in stock of exactly 0:",
        "output": "SELECT p.name, pi.quantity_in_stock FROM products p JOIN product_inventory pi ON p.product_id = pi.product_id WHERE pi.quantity_in_stock = 0;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "product_inventory": [
                "product_id",
                "quantity_in_stock"
            ]
        },
        "response_text": "```sql\nSELECT name, quantity_in_stock \nFROM products \nWHERE quantity_in_stock = 0;\n```",
        "prompt_token_number": 170,
        "response_token_number": 22,
        "response_text_processed": "SELECT name, quantity_in_stock FROM products WHERE quantity_in_stock = 0"
    },
    {
        "id": 33073,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and total sales of all products that have been sold in the past week, sorted by name:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total sales of all products that have been sold in the past week, sorted by name:",
        "output": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_sales FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date >= DATE('now', '-7 days') GROUP BY p.product_id ORDER BY p.name ASC;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT p.name, SUM(oi.quantity * oi.price) AS total_sales\nFROM products p\nJOIN order_items oi ON p.product_id = oi.product_id\nJOIN orders o ON oi.order_id = o.order_id\nWHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK)\nGROUP BY p.name\nORDER BY p.name;\n```",
        "prompt_token_number": 244,
        "response_token_number": 75,
        "response_text_processed": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_sales FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK) GROUP BY p.name ORDER BY p.name"
    },
    {
        "id": 33074,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name, description, and price of all products that have a description containing the word \"luxury\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name, description, and price of all products that have a description containing the word \"luxury\":",
        "output": "SELECT name, description, price FROM products WHERE description LIKE '%luxury%';",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT name, description, price\nFROM products\nWHERE description LIKE '%luxury%';\n```",
        "prompt_token_number": 158,
        "response_token_number": 22,
        "response_text_processed": "SELECT name, description, price FROM products WHERE description LIKE '%luxury%'"
    },
    {
        "id": 33076,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'product_inventory': ['product_id', 'quantity_in_stock']} and \n# the user question: Retrieve the name and quantity in stock of all products that have a quantity in stock between 5 and 10, sorted by quantity in stock in ascending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and quantity in stock of all products that have a quantity in stock between 5 and 10, sorted by quantity in stock in ascending order:",
        "output": "SELECT p.name, pi.quantity_in_stock FROM products p JOIN product_inventory pi ON p.product_id = pi.product_id WHERE pi.quantity_in_stock BETWEEN 5 AND 10 ORDER BY pi.quantity_in_stock ASC;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "product_inventory": [
                "product_id",
                "quantity_in_stock"
            ]
        },
        "response_text": "```sql\nSELECT name, quantity_in_stock \nFROM products \nWHERE quantity_in_stock BETWEEN 5 AND 10 \nORDER BY quantity_in_stock ASC;\n```",
        "prompt_token_number": 181,
        "response_token_number": 32,
        "response_text_processed": "SELECT name, quantity_in_stock FROM products WHERE quantity_in_stock BETWEEN 5 AND 10 ORDER BY quantity_in_stock ASC"
    },
    {
        "id": 33077,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products that have an average rating of at least 4.0:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and average rating of all products that have an average rating of at least 4.0:",
        "output": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id HAVING AVG(r.rating) >= 4.0;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT p.name, AVG(r.rating) AS average_rating\nFROM products p\nJOIN reviews r ON p.product_id = r.product_id\nGROUP BY p.name\nHAVING AVG(r.rating) >= 4.0;\n```",
        "prompt_token_number": 188,
        "response_token_number": 49,
        "response_text_processed": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.name HAVING AVG(r.rating) >= 4.0"
    },
    {
        "id": 33078,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of the cheapest product in each category:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of the cheapest product in each category:",
        "output": "SELECT p.category_id, p.name, p.price FROM products p WHERE p.price = ( SELECT MIN(price) FROM products WHERE category_id = p.category_id );",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT category_id, name, MIN(price) AS price\nFROM products\nGROUP BY category_id, name;\n```",
        "prompt_token_number": 149,
        "response_token_number": 26,
        "response_text_processed": "SELECT category_id, name, MIN(price) AS price FROM products GROUP BY category_id, name"
    },
    {
        "id": 33079,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'categories': ['category_name', 'category_id', 'id', 'Bedroom', 'name']} and \n# the user question: Retrieve the name and average rating of all products in the \"Living Room\" category that have at least one review:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and average rating of all products in the \"Living Room\" category that have at least one review:",
        "output": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN categories c ON p.category_id = c.category_id JOIN reviews r ON p.product_id = r.product_id WHERE c.category_name = 'Living Room' GROUP BY p.product_id;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "categories": [
                "category_name",
                "category_id",
                "id",
                "Bedroom",
                "name"
            ]
        },
        "response_text": "```sql\nSELECT p.name, AVG(r.rating) AS average_rating\nFROM products p\nJOIN reviews r ON p.product_id = r.product_id\nJOIN categories c ON p.category_id = c.category_id\nWHERE c.category_name = 'Living Room'\nGROUP BY p.name\nHAVING COUNT(r.review_id) > 0;\n```",
        "prompt_token_number": 210,
        "response_token_number": 69,
        "response_text_processed": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id JOIN categories c ON p.category_id = c.category_id WHERE c.category_name = 'Living Room' GROUP BY p.name HAVING COUNT(r.review_id) > 0"
    },
    {
        "id": 33080,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of all products that have a price higher than the average price of all products:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all products that have a price higher than the average price of all products:",
        "output": "SELECT name, price FROM products WHERE price > (SELECT AVG(price) FROM products);",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT name, price\nFROM products\nWHERE price > (SELECT AVG(price) FROM products);\n```",
        "prompt_token_number": 157,
        "response_token_number": 23,
        "response_text_processed": "SELECT name, price FROM products WHERE price > (SELECT AVG(price) FROM products)"
    },
    {
        "id": 33081,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'product_inventory': ['product_id', 'quantity_in_stock'], 'categories': ['category_name', 'category_id', 'id', 'Bedroom', 'name']} and \n# the user question: Retrieve the name, category name, and quantity in stock of all products that have a quantity in stock less than 5, sorted by quantity in stock in ascending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name, category name, and quantity in stock of all products that have a quantity in stock less than 5, sorted by quantity in stock in ascending order:",
        "output": "SELECT p.name, c.category_name, pi.quantity_in_stock FROM products p JOIN categories c ON p.category_id = c.category_id JOIN product_inventory pi ON p.product_id = pi.product_id WHERE pi.quantity_in_stock < 5 ORDER BY pi.quantity_in_stock ASC;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "product_inventory": [
                "product_id",
                "quantity_in_stock"
            ],
            "categories": [
                "category_name",
                "category_id",
                "id",
                "Bedroom",
                "name"
            ]
        },
        "response_text": "```sql\nSELECT p.name, c.category_name, pi.quantity_in_stock\nFROM products p\nJOIN product_inventory pi ON p.product_id = pi.product_id\nJOIN categories c ON p.category_id = c.category_id\nWHERE pi.quantity_in_stock < 5\nORDER BY pi.quantity_in_stock ASC;\n```",
        "prompt_token_number": 204,
        "response_token_number": 63,
        "response_text_processed": "SELECT p.name, c.category_name, pi.quantity_in_stock FROM products p JOIN product_inventory pi ON p.product_id = pi.product_id JOIN categories c ON p.category_id = c.category_id WHERE pi.quantity_in_stock < 5 ORDER BY pi.quantity_in_stock ASC"
    },
    {
        "id": 33084,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'categories': ['category_name', 'category_id', 'id', 'Bedroom', 'name']} and \n# the user question: Retrieve the name and price of all products that have a price between $50 and $100, and that are in the \"Bedroom\" or \"Bathroom\" category:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all products that have a price between $50 and $100, and that are in the \"Bedroom\" or \"Bathroom\" category:",
        "output": "SELECT p.name, p.price FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.price BETWEEN 50 AND 100 AND c.category_name IN ('Bedroom', 'Bathroom');",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "categories": [
                "category_name",
                "category_id",
                "id",
                "Bedroom",
                "name"
            ]
        },
        "response_text": "```sql\nSELECT p.name, p.price \nFROM products p\nJOIN categories c ON p.category_id = c.category_id\nWHERE p.price BETWEEN 50 AND 100\nAND (c.category_name = 'Bedroom' OR c.category_name = 'Bathroom');\n```",
        "prompt_token_number": 192,
        "response_token_number": 56,
        "response_text_processed": "SELECT p.name, p.price FROM products p JOIN categories c ON p.category_id = c.category_id WHERE p.price BETWEEN 50 AND 100 AND (c.category_name = 'Bedroom' OR c.category_name = 'Bathroom')"
    },
    {
        "id": 33085,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and total sales of all products that have been sold at least once, sorted by total sales in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total sales of all products that have been sold at least once, sorted by total sales in descending order:",
        "output": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_sales FROM products p LEFT JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id ORDER BY total_sales DESC;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT p.name, SUM(oi.quantity * oi.price) AS total_sales\nFROM products p\nJOIN order_items oi ON p.product_id = oi.product_id\nGROUP BY p.name\nHAVING SUM(oi.quantity) > 0\nORDER BY total_sales DESC;\n```",
        "prompt_token_number": 192,
        "response_token_number": 59,
        "response_text_processed": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_sales FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.name HAVING SUM(oi.quantity) > 0 ORDER BY total_sales DESC"
    },
    {
        "id": 33088,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'categories': ['category_name', 'category_id', 'id', 'Bedroom', 'name']} and \n# the user question: Retrieve the name and average price of all products in the \"Kitchen\" category:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and average price of all products in the \"Kitchen\" category:",
        "output": "SELECT p.name, AVG(p.price) AS avg_price FROM products p JOIN categories c ON p.category_id = c.category_id WHERE c.category_name = 'Kitchen' GROUP BY p.product_id;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "categories": [
                "category_name",
                "category_id",
                "id",
                "Bedroom",
                "name"
            ]
        },
        "response_text": "```sql\nSELECT p.name, AVG(p.price) AS average_price\nFROM products p\nJOIN categories c ON p.category_id = c.category_id\nWHERE c.category_name = 'Kitchen'\nGROUP BY p.name;\n```",
        "prompt_token_number": 173,
        "response_token_number": 45,
        "response_text_processed": "SELECT p.name, AVG(p.price) AS average_price FROM products p JOIN categories c ON p.category_id = c.category_id WHERE c.category_name = 'Kitchen' GROUP BY p.name"
    },
    {
        "id": 33089,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of all products that have a rating of at least 4.5 stars, sorted by rating in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all products that have a rating of at least 4.5 stars, sorted by rating in descending order:",
        "output": "SELECT p.name, p.price, AVG(r.rating) AS avg_rating FROM products p LEFT JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id HAVING avg_rating >= 4.5 ORDER BY avg_rating DESC;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT name, price \nFROM products \nWHERE rating >= 4.5 \nORDER BY rating DESC;\n```",
        "prompt_token_number": 194,
        "response_token_number": 25,
        "response_text_processed": "SELECT name, price FROM products WHERE rating >= 4.5 ORDER BY rating DESC"
    },
    {
        "id": 33090,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and total quantity of all products that have been ordered at least once, sorted by total quantity in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total quantity of all products that have been ordered at least once, sorted by total quantity in descending order:",
        "output": "SELECT p.name, SUM(oi.quantity) AS total_quantity FROM products p LEFT JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id ORDER BY total_quantity DESC;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT p.name, SUM(oi.quantity) AS total_quantity\nFROM products p\nJOIN order_items oi ON p.product_id = oi.product_id\nGROUP BY p.name\nHAVING total_quantity > 0\nORDER BY total_quantity DESC;\n```",
        "prompt_token_number": 192,
        "response_token_number": 53,
        "response_text_processed": "SELECT p.name, SUM(oi.quantity) AS total_quantity FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.name HAVING total_quantity > 0 ORDER BY total_quantity DESC"
    },
    {
        "id": 33092,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products that have at least one review, sorted by average rating in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and average rating of all products that have at least one review, sorted by average rating in descending order:",
        "output": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id ORDER BY avg_rating DESC;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT p.name, AVG(r.rating) AS avg_rating\nFROM products p\nJOIN reviews r ON p.product_id = r.product_id\nGROUP BY p.product_id, p.name\nHAVING COUNT(r.review_id) > 0\nORDER BY avg_rating DESC;\n```",
        "prompt_token_number": 190,
        "response_token_number": 58,
        "response_text_processed": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id, p.name HAVING COUNT(r.review_id) > 0 ORDER BY avg_rating DESC"
    },
    {
        "id": 33093,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of all products that are currently out of stock:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all products that are currently out of stock:",
        "output": "SELECT name, price FROM products WHERE stock = 0;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT name, price \nFROM products\nWHERE quantity_in_stock = 0;\n```",
        "prompt_token_number": 151,
        "response_token_number": 20,
        "response_text_processed": "SELECT name, price FROM products WHERE quantity_in_stock = 0"
    },
    {
        "id": 33094,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'categories': ['category_name', 'category_id', 'id', 'Bedroom', 'name']} and \n# the user question: Retrieve the name and average rating of all products in the \"Bedroom\" category that have at least one review, sorted by average rating in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and average rating of all products in the \"Bedroom\" category that have at least one review, sorted by average rating in descending order:",
        "output": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN reviews r ON p.product_id = r.product_id JOIN categories c ON p.category_id = c.category_id WHERE c.category_name = 'Bedroom' GROUP BY p.product_id ORDER BY avg_rating DESC;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "categories": [
                "category_name",
                "category_id",
                "id",
                "Bedroom",
                "name"
            ]
        },
        "response_text": "```sql\nSELECT p.name, AVG(r.rating) AS average_rating\nFROM products p\nJOIN reviews r ON p.product_id = r.product_id\nJOIN categories c ON p.category_id = c.category_id\nWHERE c.category_name = 'Bedroom'\nGROUP BY p.name\nHAVING COUNT(r.review_id) > 0\nORDER BY average_rating DESC;\n```",
        "prompt_token_number": 218,
        "response_token_number": 75,
        "response_text_processed": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id JOIN categories c ON p.category_id = c.category_id WHERE c.category_name = 'Bedroom' GROUP BY p.name HAVING COUNT(r.review_id) > 0 ORDER BY average_rating DESC"
    },
    {
        "id": 33095,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of all products that cost less than $100 and that have a stock greater than 0:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all products that cost less than $100 and that have a stock greater than 0:",
        "output": "SELECT name, price FROM products WHERE price < 100 AND stock > 0;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT name, price \nFROM products \nWHERE price < 100 \n  AND stock > 0;\n```",
        "prompt_token_number": 160,
        "response_token_number": 25,
        "response_text_processed": "SELECT name, price FROM products WHERE price < 100 AND stock > 0"
    },
    {
        "id": 33098,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and price of all products that have been ordered at least once, but have not been reviewed:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all products that have been ordered at least once, but have not been reviewed:",
        "output": "SELECT p.name, p.price FROM products p LEFT JOIN order_items oi ON p.product_id = oi.product_id LEFT JOIN reviews r ON p.product_id = r.product_id WHERE oi.order_item_id IS NOT NULL AND r.review_id IS NULL;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT p.name, p.price \nFROM products p\nJOIN order_items oi ON p.product_id = oi.product_id\nWHERE p.product_id NOT IN (\n    SELECT DISTINCT r.product_id\n    FROM reviews r\n);\n```",
        "prompt_token_number": 219,
        "response_token_number": 49,
        "response_text_processed": "SELECT DISTINCT p.name, p.price FROM products p JOIN order_items oi ON p.product_id = oi.product_id WHERE p.product_id NOT IN ( SELECT DISTINCT r.product_id FROM reviews r )"
    },
    {
        "id": 33099,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of all products that have a discount greater than 10%:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all products that have a discount greater than 10%:",
        "output": "SELECT name, price FROM products WHERE discount > 0.1;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT name, price FROM products WHERE discount > 10;\n```",
        "prompt_token_number": 154,
        "response_token_number": 16,
        "response_text_processed": "SELECT name, price FROM products WHERE discount > 10"
    },
    {
        "id": 33101,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and price of all products that have been ordered more than 5 times in total:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all products that have been ordered more than 5 times in total:",
        "output": "SELECT p.name, p.price FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING SUM(oi.quantity) > 5;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT p.name, p.price\nFROM products p\nJOIN order_items oi ON p.product_id = oi.product_id\nGROUP BY p.product_id, p.name, p.price\nHAVING SUM(oi.quantity) > 5;\n```",
        "prompt_token_number": 187,
        "response_token_number": 51,
        "response_text_processed": "SELECT p.name, p.price FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id, p.name, p.price HAVING SUM(oi.quantity) > 5"
    },
    {
        "id": 33102,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products that have been reviewed, sorted by average rating in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and average rating of all products that have been reviewed, sorted by average rating in descending order:",
        "output": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id ORDER BY avg_rating DESC;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT p.name, AVG(r.rating) AS average_rating\nFROM products p\nJOIN reviews r ON p.product_id = r.product_id\nGROUP BY p.name\nORDER BY average_rating DESC;\n```",
        "prompt_token_number": 188,
        "response_token_number": 43,
        "response_text_processed": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.name ORDER BY average_rating DESC"
    },
    {
        "id": 33103,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and price of all products that have not been ordered in the last 60 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all products that have not been ordered in the last 60 days:",
        "output": "SELECT name, price FROM products WHERE product_id NOT IN ( SELECT oi.product_id FROM order_items oi JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date >= DATE('now', '-60 days') );",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT p.name, p.price\nFROM products p\nLEFT JOIN order_items oi ON p.product_id = oi.product_id\nLEFT JOIN orders o ON oi.order_id = o.order_id\nWHERE o.order_date IS NULL OR o.order_date < DATE_SUB(CURDATE(), INTERVAL 60 DAY);\n```",
        "prompt_token_number": 242,
        "response_token_number": 64,
        "response_text_processed": "SELECT p.name, p.price FROM products p LEFT JOIN order_items oi ON p.product_id = oi.product_id LEFT JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date IS NULL OR o.order_date < DATE_SUB(CURDATE(), INTERVAL 60 DAY)"
    },
    {
        "id": 33104,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and address of all customers who have placed an order in the last 30 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and address of all customers who have placed an order in the last 30 days:",
        "output": "SELECT c.name, c.address FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATE('now', '-30 days');",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ],
            "customers": [
                "customer_id",
                "name",
                "state",
                "customer_group",
                "address",
                "email",
                "total_value",
                "first_name",
                "last_name",
                "phone",
                "id",
                "customer_name"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.address \nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nWHERE o.order_date >= CURDATE() - INTERVAL 30 DAY;\n```",
        "prompt_token_number": 179,
        "response_token_number": 41,
        "response_text_processed": "SELECT c.name, c.address FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= CURDATE() - INTERVAL 30 DAY"
    },
    {
        "id": 33107,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and price of all products that have not been ordered by any customer:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all products that have not been ordered by any customer:",
        "output": "SELECT name, price FROM products WHERE product_id NOT IN ( SELECT DISTINCT oi.product_id FROM order_items oi );",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT p.name, p.price\nFROM products p\nLEFT JOIN order_items oi ON p.product_id = oi.product_id\nWHERE oi.product_id IS NULL;\n```",
        "prompt_token_number": 184,
        "response_token_number": 36,
        "response_text_processed": "SELECT p.name, p.price FROM products p LEFT JOIN order_items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL"
    },
    {
        "id": 33109,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and quantity of all products that have been ordered by more than 10 customers:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and quantity of all products that have been ordered by more than 10 customers:",
        "output": "SELECT p.name, SUM(oi.quantity) AS total_quantity FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id GROUP BY p.product_id HAVING COUNT(DISTINCT o.customer_id) > 10;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT p.name, SUM(oi.quantity) AS total_quantity\nFROM products p\nJOIN order_items oi ON p.product_id = oi.product_id\nJOIN orders o ON oi.order_id = o.order_id\nGROUP BY p.name\nHAVING COUNT(DISTINCT o.customer_id) > 10;\n```",
        "prompt_token_number": 241,
        "response_token_number": 65,
        "response_text_processed": "SELECT p.name, SUM(oi.quantity) AS total_quantity FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id GROUP BY p.name HAVING COUNT(DISTINCT o.customer_id) > 10"
    },
    {
        "id": 33110,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products that have at least one review:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and average rating of all products that have at least one review:",
        "output": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT p.name, AVG(r.rating) AS average_rating\nFROM products p\nJOIN reviews r ON p.product_id = r.product_id\nGROUP BY p.name\nHAVING COUNT(r.review_id) > 0;\n```",
        "prompt_token_number": 182,
        "response_token_number": 48,
        "response_text_processed": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.name HAVING COUNT(r.review_id) > 0"
    },
    {
        "id": 33113,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and email of all customers who have placed orders in the past month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all customers who have placed orders in the past month:",
        "output": "SELECT c.name, c.email FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATE('now', '-1 month') GROUP BY c.customer_id;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ],
            "customers": [
                "customer_id",
                "name",
                "state",
                "customer_group",
                "address",
                "email",
                "total_value",
                "first_name",
                "last_name",
                "phone",
                "id",
                "customer_name"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.email \nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nWHERE o.created_at >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);\n```",
        "prompt_token_number": 176,
        "response_token_number": 43,
        "response_text_processed": "SELECT c.name, c.email FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.created_at >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)"
    },
    {
        "id": 33115,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and rating of all products that have an average rating of 4 stars or higher:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and rating of all products that have an average rating of 4 stars or higher:",
        "output": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id HAVING AVG(r.rating) >= 4.0;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT p.name, AVG(r.rating) AS average_rating\nFROM products p\nJOIN reviews r ON p.product_id = r.product_id\nGROUP BY p.name\nHAVING AVG(r.rating) >= 4;\n```",
        "prompt_token_number": 186,
        "response_token_number": 47,
        "response_text_processed": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.name HAVING AVG(r.rating) >= 4"
    },
    {
        "id": 33116,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of the 3 most expensive products:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of the 3 most expensive products:",
        "output": "SELECT name, price FROM products ORDER BY price DESC LIMIT 3;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT name, price\nFROM products\nORDER BY price DESC\nLIMIT 3;\n```",
        "prompt_token_number": 149,
        "response_token_number": 21,
        "response_text_processed": "SELECT name, price FROM products ORDER BY price DESC LIMIT 3"
    },
    {
        "id": 33118,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and quantity of all products that have been ordered at least 10 times:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and quantity of all products that have been ordered at least 10 times:",
        "output": "SELECT p.name, SUM(oi.quantity) AS total_quantity FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING SUM(oi.quantity) >= 10;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT p.name, SUM(oi.quantity) as total_quantity\nFROM products p\nJOIN order_items oi ON p.product_id = oi.product_id\nGROUP BY p.name\nHAVING SUM(oi.quantity) >= 10;\n```",
        "prompt_token_number": 185,
        "response_token_number": 50,
        "response_text_processed": "SELECT p.name, SUM(oi.quantity) as total_quantity FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.name HAVING SUM(oi.quantity) >= 10"
    },
    {
        "id": 33119,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and rating of the product with the highest average rating:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and rating of the product with the highest average rating:",
        "output": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id ORDER BY AVG(r.rating) DESC LIMIT 1;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT p.name, AVG(r.rating) AS avg_rating\nFROM products p\nJOIN reviews r ON p.product_id = r.product_id\nGROUP BY p.name\nORDER BY avg_rating DESC\nLIMIT 1;\n```",
        "prompt_token_number": 180,
        "response_token_number": 47,
        "response_text_processed": "SELECT p.name, AVG(r.rating) AS avg_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.name ORDER BY avg_rating DESC LIMIT 1"
    },
    {
        "id": 33120,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and address of all customers who live in California and have ordered at least once:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and address of all customers who live in California and have ordered at least once:",
        "output": "SELECT c.name, c.address FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.state = 'California' GROUP BY c.customer_id HAVING COUNT(DISTINCT o.order_id) >= 1;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ],
            "customers": [
                "customer_id",
                "name",
                "state",
                "customer_group",
                "address",
                "email",
                "total_value",
                "first_name",
                "last_name",
                "phone",
                "id",
                "customer_name"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.address\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nWHERE c.state = 'California'\nGROUP BY c.customer_id\nHAVING COUNT(o.order_id) > 0;\n```",
        "prompt_token_number": 178,
        "response_token_number": 51,
        "response_text_processed": "SELECT c.name, c.address FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.state = 'California' GROUP BY c.customer_id HAVING COUNT(o.order_id) > 0"
    },
    {
        "id": 33121,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and quantity of all products that have been ordered but not shipped:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and quantity of all products that have been ordered but not shipped:",
        "output": "SELECT p.name, SUM(oi.quantity) AS total_quantity FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id WHERE o.shipped_date IS NULL GROUP BY p.product_id;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT p.name, oi.quantity\nFROM products p\nJOIN order_items oi ON p.product_id = oi.product_id\nJOIN orders o ON o.order_id = oi.order_id\nWHERE o.shipped_date IS NULL;\n```",
        "prompt_token_number": 238,
        "response_token_number": 48,
        "response_text_processed": "SELECT p.name, oi.quantity FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON o.order_id = oi.order_id WHERE o.shipped_date IS NULL"
    },
    {
        "id": 33123,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products that have at least 5 reviews:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and average rating of all products that have at least 5 reviews:",
        "output": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id HAVING COUNT(*) >= 5;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT p.name, AVG(r.rating) AS average_rating\nFROM products p\nJOIN reviews r ON p.product_id = r.product_id\nGROUP BY p.name\nHAVING COUNT(r.review_id) >= 5;\n```",
        "prompt_token_number": 183,
        "response_token_number": 48,
        "response_text_processed": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.name HAVING COUNT(r.review_id) >= 5"
    },
    {
        "id": 33125,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and email of all customers who have not placed any orders yet:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all customers who have not placed any orders yet:",
        "output": "SELECT c.name, c.email FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ],
            "customers": [
                "customer_id",
                "name",
                "state",
                "customer_group",
                "address",
                "email",
                "total_value",
                "first_name",
                "last_name",
                "phone",
                "id",
                "customer_name"
            ]
        },
        "response_text": "```sql\nSELECT customers.name, customers.email\nFROM customers\nLEFT JOIN orders ON customers.customer_id = orders.customer_id\nWHERE orders.order_id IS NULL;\n```",
        "prompt_token_number": 175,
        "response_token_number": 33,
        "response_text_processed": "SELECT customers.name, customers.email FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.order_id IS NULL"
    },
    {
        "id": 33126,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and total revenue of all products that have been sold at least once:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total revenue of all products that have been sold at least once:",
        "output": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_revenue FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT p.name, SUM(oi.quantity * oi.price) AS total_revenue\nFROM products p\nJOIN order_items oi ON p.product_id = oi.product_id\nGROUP BY p.name\nHAVING SUM(oi.quantity) > 0;\n```",
        "prompt_token_number": 184,
        "response_token_number": 54,
        "response_text_processed": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_revenue FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.name HAVING SUM(oi.quantity) > 0"
    },
    {
        "id": 33127,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and address of all customers who have placed orders that were shipped more than 10 days after the order date:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and address of all customers who have placed orders that were shipped more than 10 days after the order date:",
        "output": "SELECT c.name, c.address FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.shipped_date > o.order_date + 10 GROUP BY c.customer_id;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ],
            "customers": [
                "customer_id",
                "name",
                "state",
                "customer_group",
                "address",
                "email",
                "total_value",
                "first_name",
                "last_name",
                "phone",
                "id",
                "customer_name"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.address\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nWHERE DATEDIFF(o.shipped_date, o.order_date) > 10;\n```",
        "prompt_token_number": 184,
        "response_token_number": 44,
        "response_text_processed": "SELECT c.name, c.address FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE DATEDIFF(o.shipped_date, o.order_date) > 10"
    },
    {
        "id": 33128,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and average rating of all products that have been reviewed by customers from California:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and average rating of all products that have been reviewed by customers from California:",
        "output": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id JOIN customers c ON r.customer_id = c.customer_id WHERE c.state = 'California' GROUP BY p.product_id;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "customers": [
                "customer_id",
                "name",
                "state",
                "customer_group",
                "address",
                "email",
                "total_value",
                "first_name",
                "last_name",
                "phone",
                "id",
                "customer_name"
            ]
        },
        "response_text": "```sql\nSELECT p.name, AVG(r.rating) AS average_rating\nFROM products p\nJOIN reviews r ON p.product_id = r.product_id\nJOIN customers c ON r.customer_id = c.customer_id\nWHERE c.state = 'California'\nGROUP BY p.name;\n```",
        "prompt_token_number": 229,
        "response_token_number": 56,
        "response_text_processed": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id JOIN customers c ON r.customer_id = c.customer_id WHERE c.state = 'California' GROUP BY p.name"
    },
    {
        "id": 33129,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and total revenue of all completed orders in the past year, grouped by month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total revenue of all completed orders in the past year, grouped by month:",
        "output": "SELECT strftime('%Y-%m', o.order_date) AS month, SUM(oi.quantity * oi.price) AS total_revenue FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE o.shipped_date IS NOT NULL AND o.order_date >= DATE('now', '-12 months') GROUP BY month;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT \n    DATE_FORMAT(o.order_date, '%Y-%m') AS month, \n    SUM(oi.quantity * oi.price) AS total_revenue\nFROM \n    orders o\nJOIN \n    order_items oi ON o.order_id = oi.order_id\nWHERE \n    o.shipped_date IS NOT NULL\n    AND o.order_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\nGROUP BY \n    DATE_FORMAT(o.order_date, '%Y-%m');\n```",
        "prompt_token_number": 164,
        "response_token_number": 100,
        "response_text_processed": "SELECT DATE_FORMAT(o.order_date, '%Y-%m') AS month, SUM(oi.quantity * oi.price) AS total_revenue FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE o.shipped_date IS NOT NULL AND o.order_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY DATE_FORMAT(o.order_date, '%Y-%m')"
    },
    {
        "id": 33130,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and address of all customers who have purchased a product that costs more than $500:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and address of all customers who have purchased a product that costs more than $500:",
        "output": "SELECT c.name, c.address FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE p.price > 500 GROUP BY c.customer_id;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ],
            "customers": [
                "customer_id",
                "name",
                "state",
                "customer_group",
                "address",
                "email",
                "total_value",
                "first_name",
                "last_name",
                "phone",
                "id",
                "customer_name"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT customers.name, customers.address\nFROM customers\nJOIN orders ON customers.customer_id = orders.customer_id\nJOIN order_items ON orders.order_id = order_items.order_id\nJOIN products ON order_items.product_id = products.product_id\nWHERE products.price > 500;\n```",
        "prompt_token_number": 287,
        "response_token_number": 58,
        "response_text_processed": "SELECT DISTINCT customers.name, customers.address FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id WHERE products.price > 500"
    },
    {
        "id": 33131,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and total revenue of all products that have been sold more than 50 times:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total revenue of all products that have been sold more than 50 times:",
        "output": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_revenue FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING SUM(oi.quantity) > 50;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT p.name, SUM(oi.quantity * oi.price) AS total_revenue\nFROM products p\nJOIN order_items oi ON p.product_id = oi.product_id\nGROUP BY p.name\nHAVING SUM(oi.quantity) > 50;\n```",
        "prompt_token_number": 186,
        "response_token_number": 54,
        "response_text_processed": "SELECT p.name, SUM(oi.quantity * oi.price) AS total_revenue FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.name HAVING SUM(oi.quantity) > 50"
    },
    {
        "id": 33132,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and average rating of all products that have been reviewed by customers with a rating of 5:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and average rating of all products that have been reviewed by customers with a rating of 5:",
        "output": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id JOIN customers c ON r.customer_id = c.customer_id WHERE r.rating = 5 GROUP BY p.product_id;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "customers": [
                "customer_id",
                "name",
                "state",
                "customer_group",
                "address",
                "email",
                "total_value",
                "first_name",
                "last_name",
                "phone",
                "id",
                "customer_name"
            ]
        },
        "response_text": "```sql\nSELECT p.name, AVG(r.rating) AS average_rating\nFROM products p\nJOIN reviews r ON p.product_id = r.product_id\nWHERE r.rating = 5\nGROUP BY p.name;\n```",
        "prompt_token_number": 233,
        "response_token_number": 44,
        "response_text_processed": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id WHERE r.rating = 5 GROUP BY p.name"
    },
    {
        "id": 33133,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and total revenue of all completed orders in the past year, grouped by customer:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total revenue of all completed orders in the past year, grouped by customer:",
        "output": "SELECT c.name, SUM(oi.quantity * oi.price) AS total_revenue FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id WHERE o.shipped_date IS NOT NULL AND o.order_date >= DATE('now', '-12 months') GROUP BY c.customer_id;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ],
            "customers": [
                "customer_id",
                "name",
                "state",
                "customer_group",
                "address",
                "email",
                "total_value",
                "first_name",
                "last_name",
                "phone",
                "id",
                "customer_name"
            ]
        },
        "response_text": "```sql\nSELECT c.name, SUM(o.total_amount) AS total_revenue\nFROM orders o\nJOIN customers c ON o.customer_id = c.customer_id\nWHERE o.shipped_date IS NOT NULL\n  AND o.created_at >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR)\nGROUP BY c.name;\n```",
        "prompt_token_number": 209,
        "response_token_number": 65,
        "response_text_processed": "SELECT c.name, SUM(o.total_amount) AS total_revenue FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE o.shipped_date IS NOT NULL AND o.created_at >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY c.name"
    },
    {
        "id": 33135,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average price of all products that are currently out of stock:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and average price of all products that are currently out of stock:",
        "output": "SELECT p.name, AVG(p.price) AS average_price FROM products p WHERE p.quantity_in_stock = 0 GROUP BY p.product_id;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT name, AVG(price) as average_price\nFROM products\nWHERE quantity_in_stock = 0\nGROUP BY name;\n```",
        "prompt_token_number": 152,
        "response_token_number": 29,
        "response_text_processed": "SELECT name, AVG(price) as average_price FROM products WHERE quantity_in_stock = 0 GROUP BY name"
    },
    {
        "id": 33136,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and email of all customers who have reviewed a product in the past month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all customers who have reviewed a product in the past month:",
        "output": "SELECT c.name, c.email FROM customers c JOIN reviews r ON c.customer_id = r.customer_id WHERE r.review_date >= DATE('now', '-1 month') GROUP BY c.customer_id;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "customers": [
                "customer_id",
                "name",
                "state",
                "customer_group",
                "address",
                "email",
                "total_value",
                "first_name",
                "last_name",
                "phone",
                "id",
                "customer_name"
            ]
        },
        "response_text": "```sql\nSELECT customers.name, customers.email\nFROM customers\nJOIN reviews ON customers.customer_id = reviews.customer_id\nWHERE reviews.review_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);\n```",
        "prompt_token_number": 152,
        "response_token_number": 41,
        "response_text_processed": "SELECT customers.name, customers.email FROM customers JOIN reviews ON customers.customer_id = reviews.customer_id WHERE reviews.review_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)"
    },
    {
        "id": 33138,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of the 5 most expensive products:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of the 5 most expensive products:",
        "output": "SELECT name, price FROM products ORDER BY price DESC LIMIT 5;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT name, price FROM products ORDER BY price DESC LIMIT 5;\n```",
        "prompt_token_number": 149,
        "response_token_number": 18,
        "response_text_processed": "SELECT name, price FROM products ORDER BY price DESC LIMIT 5"
    },
    {
        "id": 33140,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and price of all products that are currently in stock and have not been sold in the past month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all products that are currently in stock and have not been sold in the past month:",
        "output": "SELECT name, price FROM products WHERE quantity_in_stock > 0 AND last_sold_date < DATE('now', '-1 month');",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT name, price \nFROM products \nWHERE quantity_in_stock > 0 \n  AND last_sold_date < DATE_SUB(CURDATE(), INTERVAL 1 MONTH);\n```",
        "prompt_token_number": 159,
        "response_token_number": 37,
        "response_text_processed": "SELECT name, price FROM products WHERE quantity_in_stock > 0 AND last_sold_date < DATE_SUB(CURDATE(), INTERVAL 1 MONTH)"
    },
    {
        "id": 33141,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and number of reviews for all products, sorted by the number of reviews in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and number of reviews for all products, sorted by the number of reviews in descending order:",
        "output": "SELECT p.name, COUNT(r.review_id) AS review_count FROM products p LEFT JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id ORDER BY review_count DESC;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT p.name, COUNT(r.review_id) AS review_count\nFROM products p\nLEFT JOIN reviews r ON p.product_id = r.product_id\nGROUP BY p.name\nORDER BY review_count DESC;\n```",
        "prompt_token_number": 187,
        "response_token_number": 45,
        "response_text_processed": "SELECT p.name, COUNT(r.review_id) AS review_count FROM products p LEFT JOIN reviews r ON p.product_id = r.product_id GROUP BY p.name ORDER BY review_count DESC"
    },
    {
        "id": 33142,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and total revenue of all orders in the past year, grouped by customer and sorted by total revenue in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total revenue of all orders in the past year, grouped by customer and sorted by total revenue in descending order:",
        "output": "SELECT c.name, SUM(oi.quantity * oi.price) AS total_revenue FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id WHERE o.shipped_date IS NOT NULL AND o.order_date >= DATE('now', '-12 months') GROUP BY c.customer_id ORDER BY total_revenue DESC;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ],
            "customers": [
                "customer_id",
                "name",
                "state",
                "customer_group",
                "address",
                "email",
                "total_value",
                "first_name",
                "last_name",
                "phone",
                "id",
                "customer_name"
            ]
        },
        "response_text": "```sql\nSELECT c.name AS customer_name, SUM(o.total_amount) AS total_revenue\nFROM orders o\nJOIN customers c ON o.customer_id = c.customer_id\nWHERE o.created_at >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\nGROUP BY c.customer_id, c.name\nORDER BY total_revenue DESC;\n```",
        "prompt_token_number": 216,
        "response_token_number": 69,
        "response_text_processed": "SELECT c.name AS customer_name, SUM(o.total_amount) AS total_revenue FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE o.created_at >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY c.customer_id, c.name ORDER BY total_revenue DESC"
    },
    {
        "id": 33143,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name and email of all customers who have not placed an order in the past 3 months:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all customers who have not placed an order in the past 3 months:",
        "output": "SELECT name, email FROM customers WHERE customer_id NOT IN ( SELECT DISTINCT customer_id FROM orders WHERE order_date >= DATE('now', '-3 months') );",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ],
            "customers": [
                "customer_id",
                "name",
                "state",
                "customer_group",
                "address",
                "email",
                "total_value",
                "first_name",
                "last_name",
                "phone",
                "id",
                "customer_name"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.email\nFROM customers c\nLEFT JOIN orders o ON c.customer_id = o.customer_id\nWHERE o.order_id IS NULL OR o.created_at < NOW() - INTERVAL 3 MONTH;\n```",
        "prompt_token_number": 180,
        "response_token_number": 47,
        "response_text_processed": "SELECT c.name, c.email FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL OR o.created_at < NOW() - INTERVAL 3 MONTH"
    },
    {
        "id": 33144,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price'], 'customers': ['customer_id', 'name', 'state', 'customer_group', 'address', 'email', 'total_value', 'first_name', 'last_name', 'phone', 'id', 'customer_name']} and \n# the user question: Retrieve the name, email, and total number of products purchased by each customer, sorted by the total number of products in descending order:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name, email, and total number of products purchased by each customer, sorted by the total number of products in descending order:",
        "output": "SELECT c.name, c.email, SUM(oi.quantity) AS total_products_purchased FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id GROUP BY c.customer_id ORDER BY total_products_purchased DESC;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ],
            "customers": [
                "customer_id",
                "name",
                "state",
                "customer_group",
                "address",
                "email",
                "total_value",
                "first_name",
                "last_name",
                "phone",
                "id",
                "customer_name"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.email, SUM(oi.quantity) AS total_products_purchased\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN order_items oi ON o.order_id = oi.order_id\nGROUP BY c.customer_id, c.name, c.email\nORDER BY total_products_purchased DESC;\n```",
        "prompt_token_number": 217,
        "response_token_number": 71,
        "response_text_processed": "SELECT c.name, c.email, SUM(oi.quantity) AS total_products_purchased FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id GROUP BY c.customer_id, c.name, c.email ORDER BY total_products_purchased DESC"
    },
    {
        "id": 33145,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'reviews': ['rating', 'product_id', 'review_id', 'project_id', 'user_id', 'review_date', 'customer_id'], 'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the name and average rating of all products with an average rating of 4.5 or higher:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and average rating of all products with an average rating of 4.5 or higher:",
        "output": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.product_id HAVING AVG(r.rating) >= 4.5;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "reviews": [
                "rating",
                "product_id",
                "review_id",
                "project_id",
                "user_id",
                "review_date",
                "customer_id"
            ],
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT p.name, AVG(r.rating) AS average_rating\nFROM products p\nJOIN reviews r ON p.product_id = r.product_id\nGROUP BY p.name\nHAVING AVG(r.rating) >= 4.5;\n```",
        "prompt_token_number": 187,
        "response_token_number": 49,
        "response_text_processed": "SELECT p.name, AVG(r.rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY p.name HAVING AVG(r.rating) >= 4.5"
    },
    {
        "id": 33146,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and price of all products that have been ordered more than 100 times:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all products that have been ordered more than 100 times:",
        "output": "SELECT p.name, p.price FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.product_id HAVING SUM(oi.quantity) > 100;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT p.name, p.price\nFROM products p\nJOIN order_items oi ON p.product_id = oi.product_id\nGROUP BY p.name, p.price\nHAVING SUM(oi.quantity) > 100;\n```",
        "prompt_token_number": 185,
        "response_token_number": 47,
        "response_text_processed": "SELECT p.name, p.price FROM products p JOIN order_items oi ON p.product_id = oi.product_id GROUP BY p.name, p.price HAVING SUM(oi.quantity) > 100"
    },
    {
        "id": 33147,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product'], 'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the name and price of all products that have not been ordered in the past 6 months:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all products that have not been ordered in the past 6 months:",
        "output": "SELECT name, price FROM products WHERE product_id NOT IN ( SELECT DISTINCT product_id FROM order_items JOIN orders ON order_items.order_id = orders.order_id WHERE orders.order_date >= DATE('now', '-6 months') );",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ],
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT p.name, p.price \nFROM products p\nWHERE p.product_id NOT IN (\n    SELECT oi.product_id \n    FROM order_items oi\n    JOIN orders o ON oi.order_id = o.order_id\n    WHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\n);\n```",
        "prompt_token_number": 242,
        "response_token_number": 65,
        "response_text_processed": "SELECT p.name, p.price FROM products p WHERE p.product_id NOT IN ( SELECT oi.product_id FROM order_items oi JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) )"
    },
    {
        "id": 33154,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Find the top 3 most expensive products in the database.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the top 3 most expensive products in the database.",
        "output": "SELECT name, price FROM products ORDER BY price DESC LIMIT 3;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT product_id, name, price \nFROM products \nORDER BY price DESC \nLIMIT 3;\n```",
        "prompt_token_number": 147,
        "response_token_number": 24,
        "response_text_processed": "SELECT product_id, name, price FROM products ORDER BY price DESC LIMIT 3"
    },
    {
        "id": 33156,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id'], 'orders': ['order_id', 'user_id', 'created_at', 'date', 'order_date', 'customer_id', 'shipped_date', 'id', 'rating', 'quantity', 'product_id', 'total_amount', 'ship_country', 'product']} and \n# the user question: Find all the products that were ordered more than 10 times in total.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all the products that were ordered more than 10 times in total.",
        "output": "SELECT products.name, SUM(orders.quantity) as total_orders FROM products JOIN orders ON products.id = orders.product_id GROUP BY products.id HAVING total_orders > 10;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ],
            "orders": [
                "order_id",
                "user_id",
                "created_at",
                "date",
                "order_date",
                "customer_id",
                "shipped_date",
                "id",
                "rating",
                "quantity",
                "product_id",
                "total_amount",
                "ship_country",
                "product"
            ]
        },
        "response_text": "```sql\nSELECT p.*\nFROM products p\nJOIN orders o ON p.product_id = o.product_id\nGROUP BY p.product_id\nHAVING SUM(o.quantity) > 10;\n```",
        "prompt_token_number": 205,
        "response_token_number": 39,
        "response_text_processed": "SELECT p.* FROM products p JOIN orders o ON p.product_id = o.product_id GROUP BY p.product_id HAVING SUM(o.quantity) > 10"
    },
    {
        "id": 33158,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the product ID, name, and price for all available products with a price greater than 500.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the product ID, name, and price for all available products with a price greater than 500.",
        "output": "SELECT product_id, product_name, product_price FROM products WHERE product_price > 500;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT product_id, name, price \nFROM products \nWHERE price > 500;\n```",
        "prompt_token_number": 156,
        "response_token_number": 21,
        "response_text_processed": "SELECT product_id, name, price FROM products WHERE price > 500"
    },
    {
        "id": 33159,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'order_items': ['order_id', 'product_id', 'quantity', 'price', 'order_item_id', 'order_date', 'item_price']} and \n# the user question: Retrieve the total revenue generated by each product in descending order.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the total revenue generated by each product in descending order.",
        "output": "SELECT product_id, SUM(quantity * item_price) AS revenue FROM order_items GROUP BY product_id ORDER BY revenue DESC;",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "order_items": [
                "order_id",
                "product_id",
                "quantity",
                "price",
                "order_item_id",
                "order_date",
                "item_price"
            ]
        },
        "response_text": "```sql\nSELECT product_id, SUM(quantity * item_price) AS total_revenue\nFROM order_items\nGROUP BY product_id\nORDER BY total_revenue DESC;\n```",
        "prompt_token_number": 101,
        "response_token_number": 35,
        "response_text_processed": "SELECT product_id, SUM(quantity * item_price) AS total_revenue FROM order_items GROUP BY product_id ORDER BY total_revenue DESC"
    },
    {
        "id": 33160,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['product_id', 'price', 'description', 'name', 'width', 'color', 'Brown', 'Black', 'added_to_catalog', 'category_id', 'stock', 'discount', 'quantity_in_stock', 'last_sold_date', 'id', 'rating', 'product_price', 'product_name', 'category', 'quantity', 'supplier_id']} and \n# the user question: Retrieve the number of products whose price is greater than 50 and whose category is \"Electronics\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the number of products whose price is greater than 50 and whose category is \"Electronics\".",
        "output": "SELECT COUNT(*) FROM products WHERE price > 50 AND category = 'Electronics';",
        "schema": "interior_decorating",
        "processed_schema_content": {
            "products": [
                "product_id",
                "price",
                "description",
                "name",
                "width",
                "color",
                "Brown",
                "Black",
                "added_to_catalog",
                "category_id",
                "stock",
                "discount",
                "quantity_in_stock",
                "last_sold_date",
                "id",
                "rating",
                "product_price",
                "product_name",
                "category",
                "quantity",
                "supplier_id"
            ]
        },
        "response_text": "```sql\nSELECT COUNT(*) \nFROM products \nWHERE price > 50 AND category = 'Electronics';\n```",
        "prompt_token_number": 156,
        "response_token_number": 23,
        "response_text_processed": "SELECT COUNT(*) FROM products WHERE price > 50 AND category = 'Electronics'"
    },
    {
        "id": 33165,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID']} and \n# the user question: Retrieve the names of all advertisers whose contact phone numbers contain the digits \"555\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all advertisers whose contact phone numbers contain the digits \"555\":",
        "output": "SELECT name FROM Advertisers WHERE contact_phone LIKE '%555%';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ]
        },
        "response_text": "```sql\nSELECT name \nFROM Advertisers \nWHERE contact_phone LIKE '%555%';\n```",
        "prompt_token_number": 100,
        "response_token_number": 20,
        "response_text_processed": "SELECT name FROM Advertisers WHERE contact_phone LIKE '%555%'"
    },
    {
        "id": 33166,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate']} and \n# the user question: Retrieve the name, start date, and end date of all active campaigns with a budget greater than $1 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name, start date, and end date of all active campaigns with a budget greater than $1 million:",
        "output": "SELECT name, start_date, end_date FROM Campaigns WHERE status = 'active' AND budget > 1000000;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ]
        },
        "response_text": "```sql\nSELECT name, start_date, end_date \nFROM Campaigns \nWHERE status = 'active' AND budget > 1000000;\n```",
        "prompt_token_number": 141,
        "response_token_number": 31,
        "response_text_processed": "SELECT name, start_date, end_date FROM Campaigns WHERE status = 'active' AND budget > 1000000"
    },
    {
        "id": 33167,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and type of all creatives belonging to campaigns that target users interested in \"Running\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives belonging to campaigns that target users interested in \"Running\":",
        "output": "SELECT name, type FROM Creatives WHERE campaign_id IN ( SELECT campaign_id FROM Targeting_Options WHERE targeting_type = 'interests' AND option_value = 'Running' );",
        "schema": "advertising",
        "processed_schema_content": {
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Targeting_Options ON Creatives.campaign_id = Targeting_Options.campaign_id\nWHERE Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Running';\n```",
        "prompt_token_number": 119,
        "response_token_number": 56,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Targeting_Options ON Creatives.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Running'"
    },
    {
        "id": 33168,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region']} and \n# the user question: Retrieve the name and category of all websites with more than 100,000 visitors per month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites with more than 100,000 visitors per month:",
        "output": "SELECT name, category FROM Websites WHERE traffic > 100000;",
        "schema": "advertising",
        "processed_schema_content": {
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ]
        },
        "response_text": "```sql\nSELECT name, category\nFROM Websites\nWHERE traffic > 100000;\n```",
        "prompt_token_number": 107,
        "response_token_number": 19,
        "response_text_processed": "SELECT name, category FROM Websites WHERE traffic > 100000"
    },
    {
        "id": 33170,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate']} and \n# the user question: Retrieve the names and email addresses of advertisers who have campaigns that ended in the first quarter of 2022:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and email addresses of advertisers who have campaigns that ended in the first quarter of 2022:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id WHERE Campaigns.end_date BETWEEN '2022-01-01' AND '2022-03-31';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nWHERE c.end_date BETWEEN '2022-01-01' AND '2022-03-31';\n```",
        "prompt_token_number": 165,
        "response_token_number": 55,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id WHERE c.end_date BETWEEN '2022-01-01' AND '2022-03-31'"
    },
    {
        "id": 33173,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at']} and \n# the user question: Retrieve the name and platform of all apps that have been downloaded more than 500,000 times and have a category of \"Sports\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and platform of all apps that have been downloaded more than 500,000 times and have a category of \"Sports\":",
        "output": "SELECT name, platform FROM Apps WHERE downloads > 500000 AND category = 'Sports';",
        "schema": "advertising",
        "processed_schema_content": {
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT name, platform \nFROM Apps \nWHERE downloads > 500000 \nAND category = 'Sports';\n```",
        "prompt_token_number": 109,
        "response_token_number": 25,
        "response_text_processed": "SELECT name, platform FROM Apps WHERE downloads > 500000 AND category = 'Sports'"
    },
    {
        "id": 33174,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with \"news\" in its category:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with \"news\" in its category:",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id WHERE Websites.category LIKE '%news%' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nWHERE w.category LIKE '%news%'\nGROUP BY c.name, c.budget;\n```",
        "prompt_token_number": 230,
        "response_token_number": 61,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id WHERE w.category LIKE '%news%' GROUP BY c.name, c.budget"
    },
    {
        "id": 33175,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate']} and \n# the user question: Retrieve the name, email, and phone number of all advertisers who have at least one campaign that is still active:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name, email, and phone number of all advertisers who have at least one campaign that is still active:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email, Advertisers.contact_phone FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id WHERE Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email, a.contact_phone\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nWHERE c.status = 'active';\n```",
        "prompt_token_number": 166,
        "response_token_number": 44,
        "response_text_processed": "SELECT a.name, a.contact_email, a.contact_phone FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id WHERE c.status = 'active'"
    },
    {
        "id": 33177,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at']} and \n# the user question: Retrieve the name and number of downloads of all apps that have been updated in the last month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and number of downloads of all apps that have been updated in the last month:",
        "output": "SELECT name, downloads FROM Apps WHERE updated_at BETWEEN DATE('now', '-1 month') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT name, downloads\nFROM Apps\nWHERE updated_at >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);\n```",
        "prompt_token_number": 101,
        "response_token_number": 27,
        "response_text_processed": "SELECT name, downloads FROM Apps WHERE updated_at >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)"
    },
    {
        "id": 33178,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and budget of all campaigns that target users interested in \"Fitness\" and have at least one ad placement on an app:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and budget of all campaigns that target users interested in \"Fitness\" and have at least one ad placement on an app:",
        "output": "SELECT Campaigns.name, Campaigns.budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Apps ON Ad_Placements.app_id = Apps.app_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Ad_Placements.app_id IS NOT NULL;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nJOIN Ad_Placements a ON c.campaign_id = a.campaign_id\nWHERE t.option_value = 'Fitness' AND a.app_id IS NOT NULL;\n```",
        "prompt_token_number": 242,
        "response_token_number": 65,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Targeting_Options t ON c.campaign_id = t.campaign_id JOIN Ad_Placements a ON c.campaign_id = a.campaign_id WHERE t.option_value = 'Fitness' AND a.app_id IS NOT NULL"
    },
    {
        "id": 33180,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Demographics': ['name']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on an app in the \"Food\" category and target users aged 25-45:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on an app in the \"Food\" category and target users aged 25-45:",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Apps ON Ad_Placements.app_id = Apps.app_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id JOIN Demographics ON Targeting_Options.option_value = Demographics.name WHERE Apps.category = 'Food' AND Demographics.name = 'Age: 25-45' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Demographics": [
                "name"
            ]
        },
        "response_text": "```sql\nSELECT Campaigns.name, Campaigns.budget\nFROM Campaigns\nJOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id\nJOIN Apps ON Ad_Placements.app_id = Apps.app_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Apps.category = 'Food'\nAND Targeting_Options.targeting_type = 'age'\nAND Targeting_Options.option_value = '25-45';\n```",
        "prompt_token_number": 256,
        "response_token_number": 97,
        "response_text_processed": "SELECT Campaigns.name, Campaigns.budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Apps ON Ad_Placements.app_id = Apps.app_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Apps.category = 'Food' AND Targeting_Options.targeting_type = 'age' AND Targeting_Options.option_value = '25-45'"
    },
    {
        "id": 33181,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name, category, and number of monthly visitors of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name, category, and number of monthly visitors of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\":",
        "output": "SELECT Websites.name, Websites.category, Websites.traffic FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category, w.traffic \nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \nAND t.targeting_type = 'interest' \nAND t.option_value = 'Technology';\n```",
        "prompt_token_number": 253,
        "response_token_number": 90,
        "response_text_processed": "SELECT w.name, w.category, w.traffic FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Technology'"
    },
    {
        "id": 33183,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at']} and \n# the user question: Retrieve the name and number of downloads of all apps that have been updated in the last week and have a category of \"Sports\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and number of downloads of all apps that have been updated in the last week and have a category of \"Sports\":",
        "output": "SELECT name, downloads FROM Apps WHERE updated_at BETWEEN DATE('now', '-1 week') AND DATE('now') AND category = 'Sports';",
        "schema": "advertising",
        "processed_schema_content": {
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT name, downloads \nFROM Apps \nWHERE updated_at >= CURRENT_DATE - INTERVAL '7 days' \nAND category = 'Sports';\n```",
        "prompt_token_number": 108,
        "response_token_number": 31,
        "response_text_processed": "SELECT name, downloads FROM Apps WHERE updated_at >= CURRENT_DATE - INTERVAL '7 days' AND category = 'Sports'"
    },
    {
        "id": 33184,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites and apps that have at least one active ad placement for a campaign that ended in the first quarter of 2022:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites and apps that have at least one active ad placement for a campaign that ended in the first quarter of 2022:",
        "output": "SELECT CASE WHEN Ad_Placements.website_id IS NOT NULL THEN Websites.name ELSE Apps.name END AS placement_name, CASE WHEN Ad_Placements.website_id IS NOT NULL THEN Websites.category ELSE Apps.category END AS placement_category FROM Ad_Placements LEFT JOIN Websites ON Ad_Placements.website_id = Websites.website_id LEFT JOIN Apps ON Ad_Placements.app_id = Apps.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id WHERE Campaigns.end_date BETWEEN '2022-01-01' AND '2022-03-31' AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT \n    w.name AS website_name, \n    w.category AS website_category,\n    a.name AS app_name,\n    a.category AS app_category\nFROM \n    Ad_Placements ap\nLEFT JOIN \n    Websites w ON ap.website_id = w.website_id\nLEFT JOIN \n    Apps a ON ap.app_id = a.app_id\nJOIN \n    Campaigns c ON ap.campaign_id = c.campaign_id\nWHERE \n    c.status = 'active' \n    AND c.end_date BETWEEN '2022-01-01' AND '2022-03-31'\n    AND (w.website_id IS NOT NULL OR a.app_id IS NOT NULL);\n```",
        "prompt_token_number": 258,
        "response_token_number": 140,
        "response_text_processed": "SELECT w.name AS website_name, w.category AS website_category, a.name AS app_name, a.category AS app_category FROM Ad_Placements ap LEFT JOIN Websites w ON ap.website_id = w.website_id LEFT JOIN Apps a ON ap.app_id = a.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id WHERE c.status = 'active' AND c.end_date BETWEEN '2022-01-01' AND '2022-03-31' AND (w.website_id IS NOT NULL OR a.app_id IS NOT NULL)"
    },
    {
        "id": 33185,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name, category, and traffic of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" or \"Travel\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name, category, and traffic of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" or \"Travel\":",
        "output": "SELECT Websites.name, Websites.category, Websites.traffic FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value IN ('Food', 'Travel') AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT W.name, W.category, W.traffic\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE C.status = 'active'\nAND (TO.option_value = 'Food' OR TO.option_value = 'Travel');\n```",
        "prompt_token_number": 254,
        "response_token_number": 88,
        "response_text_processed": "SELECT W.name, W.category, W.traffic FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE C.status = 'active' AND (TO.option_value = 'Food' OR TO.option_value = 'Travel')"
    },
    {
        "id": 33186,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Demographics': ['name']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with more than 1 million downloads and target users aged 18-35:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with more than 1 million downloads and target users aged 18-35:",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Apps ON Ad_Placements.app_id = Apps.app_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id JOIN Demographics ON Targeting_Options.option_value = Demographics.name WHERE Apps.downloads > 1000000 AND Demographics.name = 'Age: 18-35' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Demographics": [
                "name"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.name, c.budget \nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Apps a ON ap.app_id = a.app_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE a.downloads > 1000000\nAND t.targeting_type = 'age'\nAND t.option_value BETWEEN '18' AND '35';\n```",
        "prompt_token_number": 257,
        "response_token_number": 93,
        "response_text_processed": "SELECT DISTINCT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Apps a ON ap.app_id = a.app_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE a.downloads > 1000000 AND t.targeting_type = 'age' AND t.option_value BETWEEN '18' AND '35'"
    },
    {
        "id": 33188,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign with a budget greater than $500,000 and target users interested in \"Fitness\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign with a budget greater than $500,000 and target users interested in \"Fitness\":",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT W.name, W.category\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE C.status = 'active'\nAND C.budget > 500000\nAND TO.targeting_type = 'interest'\nAND TO.option_value = 'Fitness';\n```",
        "prompt_token_number": 257,
        "response_token_number": 94,
        "response_text_processed": "SELECT DISTINCT W.name, W.category FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE C.status = 'active' AND C.budget > 500000 AND TO.targeting_type = 'interest' AND TO.option_value = 'Fitness'"
    },
    {
        "id": 33189,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate']} and \n# the user question: Retrieve the name and email of all advertisers who have campaigns that have been active for more than 6 months:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have campaigns that have been active for more than 6 months:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id WHERE Campaigns.start_date <= DATE('now', '-6 month') AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nWHERE DATEDIFF(c.end_date, c.start_date) > 180;\n```",
        "prompt_token_number": 165,
        "response_token_number": 49,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id WHERE DATEDIFF(c.end_date, c.start_date) > 180"
    },
    {
        "id": 33190,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a traffic volume greater than 1 million per month and target users interested in \"Technology\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a traffic volume greater than 1 million per month and target users interested in \"Technology\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.traffic > 1000000 AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE w.traffic > 1000000 AND t.targeting_type = 'interest' AND t.option_value = 'Technology';\n```",
        "prompt_token_number": 259,
        "response_token_number": 87,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE w.traffic > 1000000 AND t.targeting_type = 'interest' AND t.option_value = 'Technology'"
    },
    {
        "id": 33191,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one ad placement for a campaign that ended in the last 30 days and have been downloaded more than 1 million times:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one ad placement for a campaign that ended in the last 30 days and have been downloaded more than 1 million times:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id WHERE Campaigns.end_date BETWEEN DATE('now', '-30 days') AND DATE('now') AND Apps.downloads > 1000000;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nWHERE c.end_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)\nAND a.downloads > 1000000;\n```",
        "prompt_token_number": 234,
        "response_token_number": 71,
        "response_text_processed": "SELECT DISTINCT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id WHERE c.end_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) AND a.downloads > 1000000"
    },
    {
        "id": 33192,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate']} and \n# the user question: Retrieve the name and email of all advertisers who have campaigns that are active and have a budget greater than $500,000:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have campaigns that are active and have a budget greater than $500,000:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id WHERE Campaigns.status = 'active' AND Campaigns.budget > 500000;",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ]
        },
        "response_text": "```sql\nSELECT A.name, A.contact_email \nFROM Advertisers A \nJOIN Campaigns C ON A.advertiser_id = C.advertiser_id \nWHERE C.status = 'active' AND C.budget > 500000;\n```",
        "prompt_token_number": 168,
        "response_token_number": 49,
        "response_text_processed": "SELECT A.name, A.contact_email FROM Advertisers A JOIN Campaigns C ON A.advertiser_id = C.advertiser_id WHERE C.status = 'active' AND C.budget > 500000"
    },
    {
        "id": 33194,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and traffic of all websites that have at least one active ad placement for a campaign that targets users interested in \"Fashion\" and have a budget greater than $500,000:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and traffic of all websites that have at least one active ad placement for a campaign that targets users interested in \"Fashion\" and have a budget greater than $500,000:",
        "output": "SELECT Websites.name, Websites.traffic FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.traffic\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest'\n  AND t.option_value = 'Fashion'\n  AND c.budget > 500000\n  AND c.status = 'active';\n```",
        "prompt_token_number": 259,
        "response_token_number": 97,
        "response_text_processed": "SELECT w.name, w.traffic FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Fashion' AND c.budget > 500000 AND c.status = 'active'"
    },
    {
        "id": 33195,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $1 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $1 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 1000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email \nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND c.budget > 1000000 \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Music';\n```",
        "prompt_token_number": 193,
        "response_token_number": 88,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND c.budget > 1000000 AND t.targeting_type = 'interest' AND t.option_value = 'Music'"
    },
    {
        "id": 33197,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Entertainment\" and have been active for more than 3 months:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Entertainment\" and have been active for more than 3 months:",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id WHERE Websites.category = 'Entertainment' AND Campaigns.start_date <= DATE('now', '-3 month') AND Campaigns.status = 'active' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nWHERE w.category = 'Entertainment'\n  AND DATEDIFF(c.end_date, c.start_date) > 90\nGROUP BY c.name, c.budget;\n```",
        "prompt_token_number": 241,
        "response_token_number": 79,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id WHERE w.category = 'Entertainment' AND DATEDIFF(c.end_date, c.start_date) > 90 GROUP BY c.name, c.budget"
    },
    {
        "id": 33199,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and traffic of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $500,000:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and traffic of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $500,000:",
        "output": "SELECT Websites.name, Websites.traffic FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT W.name, W.traffic\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE C.status = 'active'\nAND TO.targeting_type = 'interest'\nAND TO.option_value = 'Technology'\nAND C.budget > 500000\n```",
        "prompt_token_number": 258,
        "response_token_number": 94,
        "response_text_processed": "SELECT W.name, W.traffic FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE C.status = 'active' AND TO.targeting_type = 'interest' AND TO.option_value = 'Technology' AND C.budget > 500000 ```"
    },
    {
        "id": 33201,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and email of all advertisers who have campaigns that are active and have at least one ad placement on a website with a category of \"News\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have campaigns that are active and have at least one ad placement on a website with a category of \"News\":",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id WHERE Websites.category = 'News' AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nWHERE c.status = 'active' AND w.category = 'News';\n```",
        "prompt_token_number": 259,
        "response_token_number": 76,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id WHERE c.status = 'active' AND w.category = 'News'"
    },
    {
        "id": 33203,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $1 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $1 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 1000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Travel'\n  AND c.budget > 1000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 97,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Travel' AND c.budget > 1000000"
    },
    {
        "id": 33204,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $2 million and have been updated in the last 14 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $2 million and have been updated in the last 14 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 2000000 AND Creatives.updated_at BETWEEN DATE('now', '-14 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns ca ON c.campaign_id = ca.campaign_id\nWHERE ca.budget > 2000000\nAND c.updated_at > DATE_SUB(CURDATE(), INTERVAL 14 DAY);\n```",
        "prompt_token_number": 172,
        "response_token_number": 57,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns ca ON c.campaign_id = ca.campaign_id WHERE ca.budget > 2000000 AND c.updated_at > DATE_SUB(CURDATE(), INTERVAL 14 DAY)"
    },
    {
        "id": 33205,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and traffic of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $500,000:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and traffic of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $500,000:",
        "output": "SELECT Websites.name, Websites.traffic FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT W.name, W.traffic\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE C.status = 'active'\n  AND TO.targeting_type = 'interest'\n  AND TO.option_value = 'Food'\n  AND C.budget > 500000;\n```",
        "prompt_token_number": 258,
        "response_token_number": 98,
        "response_text_processed": "SELECT DISTINCT W.name, W.traffic FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE C.status = 'active' AND TO.targeting_type = 'interest' AND TO.option_value = 'Food' AND C.budget > 500000"
    },
    {
        "id": 33206,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and email of all advertisers who have campaigns that are active and have at least one ad placement on an app with a category of \"Business\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have campaigns that are active and have at least one ad placement on an app with a category of \"Business\":",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Apps ON Ad_Placements.app_id = Apps.app_id WHERE Apps.category = 'Business' AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Apps app ON ap.app_id = app.app_id\nWHERE c.status = 'active' AND app.category = 'Business';\n```",
        "prompt_token_number": 253,
        "response_token_number": 76,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Apps app ON ap.app_id = app.app_id WHERE c.status = 'active' AND app.category = 'Business'"
    },
    {
        "id": 33208,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have been downloaded more than 1 million times:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have been downloaded more than 1 million times:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Apps.downloads > 1000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest' AND t.option_value = 'Technology'\nAND a.downloads > 1000000\nAND c.status = 'active';\n```",
        "prompt_token_number": 252,
        "response_token_number": 94,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Technology' AND a.downloads > 1000000 AND c.status = 'active'"
    },
    {
        "id": 33210,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $1 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $1 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 1000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Fashion'\n  AND c.budget > 1000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 98,
        "response_text_processed": "SELECT DISTINCT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Fashion' AND c.budget > 1000000"
    },
    {
        "id": 33212,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with a category of \"Education\" and target users interested in \"Science\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with a category of \"Education\" and target users interested in \"Science\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Apps ON Ad_Placements.app_id = Apps.app_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Apps.category = 'Education' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Science' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget \nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Apps a ON ap.app_id = a.app_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE a.category = 'Education' \nAND t.option_value = 'Science';\n```",
        "prompt_token_number": 249,
        "response_token_number": 77,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Apps a ON ap.app_id = a.app_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE a.category = 'Education' AND t.option_value = 'Science'"
    },
    {
        "id": 33213,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $500,000:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $500,000:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Health' AND Campaigns.budget > 500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\nAND t.targeting_type = 'interest'\nAND t.option_value = 'Health'\nAND c.budget > 500000;\n```",
        "prompt_token_number": 258,
        "response_token_number": 94,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Health' AND c.budget > 500000"
    },
    {
        "id": 33214,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $3 million and have been updated in the last 21 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $3 million and have been updated in the last 21 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 3000000 AND Creatives.updated_at BETWEEN DATE('now', '-21 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns ca ON c.campaign_id = ca.campaign_id\nWHERE ca.budget > 3000000 \n  AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 21 DAY);\n```",
        "prompt_token_number": 172,
        "response_token_number": 58,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns ca ON c.campaign_id = ca.campaign_id WHERE ca.budget > 3000000 AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 21 DAY)"
    },
    {
        "id": 33215,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and traffic of all websites that have at least one active ad placement for a campaign targeting users interested in \"Pets\" and have a budget greater than $1 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and traffic of all websites that have at least one active ad placement for a campaign targeting users interested in \"Pets\" and have a budget greater than $1 million:",
        "output": "SELECT Websites.name, Websites.traffic FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Pets' AND Campaigns.budget > 1000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.traffic\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Pets' \n  AND c.budget > 1000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 101,
        "response_text_processed": "SELECT w.name, w.traffic FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Pets' AND c.budget > 1000000"
    },
    {
        "id": 33217,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Music\" and have been active for more than 6 months:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Music\" and have been active for more than 6 months:",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id WHERE Websites.category = 'Music' AND Campaigns.start_date <= DATE('now', '-6 month') AND Campaigns.status = 'active' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nWHERE w.category = 'Music'\n  AND DATEDIFF(c.end_date, c.start_date) > 180\nGROUP BY c.name, c.budget;\n```",
        "prompt_token_number": 240,
        "response_token_number": 78,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id WHERE w.category = 'Music' AND DATEDIFF(c.end_date, c.start_date) > 180 GROUP BY c.name, c.budget"
    },
    {
        "id": 33218,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have been downloaded more than 500,000 times:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have been downloaded more than 500,000 times:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Apps.downloads > 500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest' AND t.option_value = 'Food' \n  AND a.downloads > 500000 \n  AND c.status = 'active';\n```",
        "prompt_token_number": 253,
        "response_token_number": 97,
        "response_text_processed": "SELECT DISTINCT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Food' AND a.downloads > 500000 AND c.status = 'active'"
    },
    {
        "id": 33220,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $500,000:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $500,000:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT Apps.name, Apps.category\nFROM Apps\nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id\nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.status = 'active'\n  AND Campaigns.budget > 500000\n  AND Targeting_Options.targeting_type = 'interest'\n  AND Targeting_Options.option_value = 'Gaming';\n```",
        "prompt_token_number": 253,
        "response_token_number": 107,
        "response_text_processed": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Campaigns.budget > 500000 AND Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Gaming'"
    },
    {
        "id": 33221,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $3 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $3 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 3000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.option_value = 'Fashion'\n  AND c.budget > 3000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 78,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.option_value = 'Fashion' AND c.budget > 3000000"
    },
    {
        "id": 33223,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $1 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $1 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 1000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\nAND t.targeting_type = 'interest'\nAND t.option_value = 'Technology'\nAND c.budget > 1000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 95,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Technology' AND c.budget > 1000000"
    },
    {
        "id": 33225,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have been downloaded more than 1 million times:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have been downloaded more than 1 million times:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Apps.downloads > 1000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT A.name, A.category\nFROM Apps A\nJOIN Ad_Placements AP ON A.app_id = AP.app_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE T.targeting_type = 'Fitness' \n  AND A.downloads > 1000000 \n  AND C.status = 'active';\n```",
        "prompt_token_number": 252,
        "response_token_number": 90,
        "response_text_processed": "SELECT DISTINCT A.name, A.category FROM Apps A JOIN Ad_Placements AP ON A.app_id = AP.app_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options T ON C.campaign_id = T.campaign_id WHERE T.targeting_type = 'Fitness' AND A.downloads > 1000000 AND C.status = 'active'"
    },
    {
        "id": 33226,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Politics\" and have a budget greater than $5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Politics\" and have a budget greater than $5 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Politics' AND Campaigns.budget > 5000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT A.name, A.contact_email\nFROM Advertisers A\nJOIN Campaigns C ON A.advertiser_id = C.advertiser_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE T.targeting_type = 'interest' AND T.option_value = 'Politics' \nAND C.status = 'active' \nAND C.budget > 5000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 85,
        "response_text_processed": "SELECT A.name, A.contact_email FROM Advertisers A JOIN Campaigns C ON A.advertiser_id = C.advertiser_id JOIN Targeting_Options T ON C.campaign_id = T.campaign_id WHERE T.targeting_type = 'interest' AND T.option_value = 'Politics' AND C.status = 'active' AND C.budget > 5000000"
    },
    {
        "id": 33228,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $2 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $2 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 2000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Sports'\n  AND c.budget > 2000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 98,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Sports' AND c.budget > 2000000"
    },
    {
        "id": 33229,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $6 million and have been updated in the last 60 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $6 million and have been updated in the last 60 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 6000000 AND Creatives.updated_at BETWEEN DATE('now', '-60 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 6000000\nAND Creatives.updated_at >= NOW() - INTERVAL 60 DAY;\n```",
        "prompt_token_number": 172,
        "response_token_number": 58,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 6000000 AND Creatives.updated_at >= NOW() - INTERVAL 60 DAY"
    },
    {
        "id": 33230,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $1 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $1 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' AND Campaigns.budget > 1000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Apps.name, Apps.category\nFROM Apps\nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id\nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Targeting_Options.targeting_type = 'interest'\nAND Targeting_Options.option_value = 'Movies'\nAND Campaigns.status = 'active'\nAND Campaigns.budget > 1000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 105,
        "response_text_processed": "SELECT DISTINCT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Movies' AND Campaigns.status = 'active' AND Campaigns.budget > 1000000"
    },
    {
        "id": 33231,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $3 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $3 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 3000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT A.name, A.contact_email\nFROM Advertisers A\nJOIN Campaigns C ON A.advertiser_id = C.advertiser_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE C.status = 'active'\n  AND TO.targeting_type = 'interest'\n  AND TO.option_value = 'Music'\n  AND C.budget > 3000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 86,
        "response_text_processed": "SELECT A.name, A.contact_email FROM Advertisers A JOIN Campaigns C ON A.advertiser_id = C.advertiser_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE C.status = 'active' AND TO.targeting_type = 'interest' AND TO.option_value = 'Music' AND C.budget > 3000000"
    },
    {
        "id": 33232,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with a category of \"Sports\" and target users interested in \"Fitness\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with a category of \"Sports\" and target users interested in \"Fitness\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Apps ON Ad_Placements.app_id = Apps.app_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Apps.category = 'Sports' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Apps a ON ap.app_id = a.app_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE a.category = 'Sports'\nAND t.targeting_type = 'interest'\nAND t.option_value = 'Fitness';\n```",
        "prompt_token_number": 249,
        "response_token_number": 85,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Apps a ON ap.app_id = a.app_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE a.category = 'Sports' AND t.targeting_type = 'interest' AND t.option_value = 'Fitness'"
    },
    {
        "id": 33233,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $3 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $3 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 3000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id\nWHERE c.status = 'active' \n  AND topt.targeting_type = 'interest' \n  AND topt.option_value = 'Food'\n  AND c.budget > 3000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 103,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id WHERE c.status = 'active' AND topt.targeting_type = 'interest' AND topt.option_value = 'Food' AND c.budget > 3000000"
    },
    {
        "id": 33234,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $2 million and have been updated in the last 90 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $2 million and have been updated in the last 90 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 2000000 AND Creatives.updated_at BETWEEN DATE('now', '-90 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns ca ON c.campaign_id = ca.campaign_id\nWHERE ca.budget > 2000000 AND c.updated_at > NOW() - INTERVAL '90 DAY';\n```",
        "prompt_token_number": 172,
        "response_token_number": 53,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns ca ON c.campaign_id = ca.campaign_id WHERE ca.budget > 2000000 AND c.updated_at > NOW() - INTERVAL '90 DAY'"
    },
    {
        "id": 33235,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $2 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $2 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 2000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT A.name, A.category\nFROM Apps A\nJOIN Ad_Placements AP ON A.app_id = AP.app_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE T.targeting_type = 'interest' \nAND T.option_value = 'Technology'\nAND C.status = 'active'\nAND C.budget > 2000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 96,
        "response_text_processed": "SELECT DISTINCT A.name, A.category FROM Apps A JOIN Ad_Placements AP ON A.app_id = AP.app_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options T ON C.campaign_id = T.campaign_id WHERE T.targeting_type = 'interest' AND T.option_value = 'Technology' AND C.status = 'active' AND C.budget > 2000000"
    },
    {
        "id": 33236,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $4 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $4 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 4000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT A.name, A.contact_email\nFROM Advertisers A\nJOIN Campaigns C ON A.advertiser_id = C.advertiser_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE C.status = 'active'\n  AND T.targeting_type = 'interest'\n  AND T.option_value = 'Travel'\n  AND C.budget > 4000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 86,
        "response_text_processed": "SELECT A.name, A.contact_email FROM Advertisers A JOIN Campaigns C ON A.advertiser_id = C.advertiser_id JOIN Targeting_Options T ON C.campaign_id = T.campaign_id WHERE C.status = 'active' AND T.targeting_type = 'interest' AND T.option_value = 'Travel' AND C.budget > 4000000"
    },
    {
        "id": 33237,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and target users interested in \"Beauty\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and target users interested in \"Beauty\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Fashion' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Beauty' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget \nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE w.category = 'Fashion' \n  AND t.option_value = 'Beauty';\n```",
        "prompt_token_number": 255,
        "response_token_number": 78,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE w.category = 'Fashion' AND t.option_value = 'Beauty'"
    },
    {
        "id": 33238,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $1 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $1 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Health' AND Campaigns.budget > 1000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT W.name, W.category\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE C.status = 'active'\nAND TO.targeting_type = 'interest'\nAND TO.option_value = 'Health'\nAND C.budget > 1000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 95,
        "response_text_processed": "SELECT DISTINCT W.name, W.category FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE C.status = 'active' AND TO.targeting_type = 'interest' AND TO.option_value = 'Health' AND C.budget > 1000000"
    },
    {
        "id": 33239,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $3 million and have been updated in the last 120 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $3 million and have been updated in the last 120 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 3000000 AND Creatives.updated_at BETWEEN DATE('now', '-120 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 3000000 \n  AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 120 DAY);\n```",
        "prompt_token_number": 172,
        "response_token_number": 62,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 3000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 120 DAY)"
    },
    {
        "id": 33240,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Books\" and have a budget greater than $1.5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Books\" and have a budget greater than $1.5 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Books' AND Campaigns.budget > 1500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest' AND t.option_value = 'Books'\n  AND c.status = 'active'\n  AND c.budget > 1500000;\n```",
        "prompt_token_number": 253,
        "response_token_number": 96,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Books' AND c.status = 'active' AND c.budget > 1500000"
    },
    {
        "id": 33241,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Education\" and have a budget greater than $2 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Education\" and have a budget greater than $2 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Education' AND Campaigns.budget > 2000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT A.name, A.contact_email\nFROM Advertisers A\nJOIN Campaigns C ON A.advertiser_id = C.advertiser_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE C.status = 'active' \n  AND T.targeting_type = 'Education' \n  AND C.budget > 2000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 80,
        "response_text_processed": "SELECT DISTINCT A.name, A.contact_email FROM Advertisers A JOIN Campaigns C ON A.advertiser_id = C.advertiser_id JOIN Targeting_Options T ON C.campaign_id = T.campaign_id WHERE C.status = 'active' AND T.targeting_type = 'Education' AND C.budget > 2000000"
    },
    {
        "id": 33242,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with a category of \"Music\" and target users interested in \"Dance\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with a category of \"Music\" and target users interested in \"Dance\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Apps ON Ad_Placements.app_id = Apps.app_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Apps.category = 'Music' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Dance' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Apps a ON ap.app_id = a.app_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE a.category = 'Music' AND t.option_value = 'Dance';\n```",
        "prompt_token_number": 250,
        "response_token_number": 77,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Apps a ON ap.app_id = a.app_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE a.category = 'Music' AND t.option_value = 'Dance'"
    },
    {
        "id": 33243,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Business\" and have a budget greater than $2.5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Business\" and have a budget greater than $2.5 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Business' AND Campaigns.budget > 2500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Websites.name, Websites.category\nFROM Websites\nJOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id\nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.status = 'active'\n  AND Campaigns.budget > 2500000\n  AND Targeting_Options.targeting_type = 'interest'\n  AND Targeting_Options.option_value = 'Business';\n```",
        "prompt_token_number": 259,
        "response_token_number": 108,
        "response_text_processed": "SELECT DISTINCT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Campaigns.budget > 2500000 AND Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Business'"
    },
    {
        "id": 33244,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $5 million and have been updated in the last 180 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $5 million and have been updated in the last 180 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 5000000 AND Creatives.updated_at BETWEEN DATE('now', '-180 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT C.name, C.type\nFROM Creatives C\nJOIN Campaigns CA ON C.campaign_id = CA.campaign_id\nWHERE CA.budget > 5000000 AND C.updated_at >= NOW() - INTERVAL 180 DAY;\n```",
        "prompt_token_number": 172,
        "response_token_number": 53,
        "response_text_processed": "SELECT C.name, C.type FROM Creatives C JOIN Campaigns CA ON C.campaign_id = CA.campaign_id WHERE CA.budget > 5000000 AND C.updated_at >= NOW() - INTERVAL 180 DAY"
    },
    {
        "id": 33245,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $1 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $1 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 1000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT A.name, A.category\nFROM Apps A\nJOIN Ad_Placements AP ON A.app_id = AP.app_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE TO.option_value = 'Art'\n  AND C.budget > 1000000\n  AND C.status = 'active';\n```",
        "prompt_token_number": 251,
        "response_token_number": 88,
        "response_text_processed": "SELECT DISTINCT A.name, A.category FROM Apps A JOIN Ad_Placements AP ON A.app_id = AP.app_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE TO.option_value = 'Art' AND C.budget > 1000000 AND C.status = 'active'"
    },
    {
        "id": 33246,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Gaming\" and have a budget greater than $3.5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Gaming\" and have a budget greater than $3.5 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 3500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'Interest' \n  AND t.option_value = 'Gaming' \n  AND c.budget > 3500000;\n```",
        "prompt_token_number": 196,
        "response_token_number": 91,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'Interest' AND t.option_value = 'Gaming' AND c.budget > 3500000"
    },
    {
        "id": 33247,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Fitness\" or \"Yoga\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Fitness\" or \"Yoga\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Sports' AND Targeting_Options.targeting_type = 'interests' AND (Targeting_Options.option_value = 'Fitness' OR Targeting_Options.option_value = 'Yoga') GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE w.category = 'Sports'\nAND (t.option_value = 'Fitness' OR t.option_value = 'Yoga');\n```",
        "prompt_token_number": 260,
        "response_token_number": 86,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE w.category = 'Sports' AND (t.option_value = 'Fitness' OR t.option_value = 'Yoga')"
    },
    {
        "id": 33248,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $1.5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $1.5 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 1500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Fashion'\n  AND c.budget > 1500000;\n```",
        "prompt_token_number": 259,
        "response_token_number": 97,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Fashion' AND c.budget > 1500000"
    },
    {
        "id": 33249,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $2.5 million and have been updated in the last 150 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $2.5 million and have been updated in the last 150 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 2500000 AND Creatives.updated_at BETWEEN DATE('now', '-150 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT C.name, C.type\nFROM Creatives C\nINNER JOIN Campaigns CA ON C.campaign_id = CA.campaign_id\nWHERE CA.budget > 2500000\nAND C.updated_at >= DATE_SUB(CURDATE(), INTERVAL 150 DAY);\n```",
        "prompt_token_number": 174,
        "response_token_number": 58,
        "response_text_processed": "SELECT C.name, C.type FROM Creatives C INNER JOIN Campaigns CA ON C.campaign_id = CA.campaign_id WHERE CA.budget > 2500000 AND C.updated_at >= DATE_SUB(CURDATE(), INTERVAL 150 DAY)"
    },
    {
        "id": 33250,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Cooking\" and have a budget greater than $2 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Cooking\" and have a budget greater than $2 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Cooking' AND Campaigns.budget > 2000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT Apps.name, Apps.category\nFROM Apps\nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id\nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Targeting_Options.option_value = 'Cooking'\nAND Campaigns.status = 'active'\nAND Campaigns.budget > 2000000;\n```",
        "prompt_token_number": 252,
        "response_token_number": 94,
        "response_text_processed": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.option_value = 'Cooking' AND Campaigns.status = 'active' AND Campaigns.budget > 2000000"
    },
    {
        "id": 33251,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Pets\" and have a budget greater than $4.5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Pets\" and have a budget greater than $4.5 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Pets' AND Campaigns.budget > 4500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.option_value = 'Pets'\n  AND c.budget > 4500000;\n```",
        "prompt_token_number": 195,
        "response_token_number": 76,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.option_value = 'Pets' AND c.budget > 4500000"
    },
    {
        "id": 33252,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with a category of \"News\" and target users interested in \"Politics\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on an app with a category of \"News\" and target users interested in \"Politics\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Apps ON Ad_Placements.app_id = Apps.app_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Apps.category = 'News' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Politics' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT C.name, C.budget \nFROM Campaigns C\nJOIN Ad_Placements AP ON C.campaign_id = AP.campaign_id\nJOIN Apps A ON AP.app_id = A.app_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE A.category = 'News' \n  AND T.targeting_type = 'interest' \n  AND T.option_value = 'Politics';\n```",
        "prompt_token_number": 249,
        "response_token_number": 89,
        "response_text_processed": "SELECT C.name, C.budget FROM Campaigns C JOIN Ad_Placements AP ON C.campaign_id = AP.campaign_id JOIN Apps A ON AP.app_id = A.app_id JOIN Targeting_Options T ON C.campaign_id = T.campaign_id WHERE A.category = 'News' AND T.targeting_type = 'interest' AND T.option_value = 'Politics'"
    },
    {
        "id": 33253,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Home Decor\" and have a budget greater than $2 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Home Decor\" and have a budget greater than $2 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Home Decor' AND Campaigns.budget > 2000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT W.name, W.category\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE C.status = 'active'\n  AND TO.targeting_type = 'interest'\n  AND TO.option_value = 'Home Decor'\n  AND C.budget > 2000000;\n```",
        "prompt_token_number": 258,
        "response_token_number": 98,
        "response_text_processed": "SELECT W.name, W.category FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE C.status = 'active' AND TO.targeting_type = 'interest' AND TO.option_value = 'Home Decor' AND C.budget > 2000000"
    },
    {
        "id": 33254,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $3 million and have been updated in the last 200 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $3 million and have been updated in the last 200 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 3000000 AND Creatives.updated_at BETWEEN DATE('now', '-200 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 3000000\n  AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 200 DAY);\n```",
        "prompt_token_number": 172,
        "response_token_number": 62,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 3000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 200 DAY)"
    },
    {
        "id": 33255,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $3 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $3 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 3000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'Interest' AND t.option_value = 'Travel'\n  AND c.status = 'active'\n  AND c.budget > 3000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 96,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'Interest' AND t.option_value = 'Travel' AND c.status = 'active' AND c.budget > 3000000"
    },
    {
        "id": 33257,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Beauty\" and target users interested in \"Skincare\" or \"Makeup\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Beauty\" and target users interested in \"Skincare\" or \"Makeup\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Beauty' AND Targeting_Options.targeting_type = 'interests' AND (Targeting_Options.option_value = 'Skincare' OR Targeting_Options.option_value = 'Makeup') GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id\nWHERE w.category = 'Beauty'\nAND topt.option_value IN ('Skincare', 'Makeup');\n```",
        "prompt_token_number": 261,
        "response_token_number": 84,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id WHERE w.category = 'Beauty' AND topt.option_value IN ('Skincare', 'Makeup')"
    },
    {
        "id": 33258,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $2.5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $2.5 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 2500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id\nWHERE c.status = 'active' \n  AND topt.targeting_type = 'interest' \n  AND topt.option_value = 'Food' \n  AND c.budget > 2500000;\n```",
        "prompt_token_number": 259,
        "response_token_number": 104,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id WHERE c.status = 'active' AND topt.targeting_type = 'interest' AND topt.option_value = 'Food' AND c.budget > 2500000"
    },
    {
        "id": 33260,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $2.5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $2.5 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 2500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT A.name, A.category\nFROM Apps A\nJOIN Ad_Placements AP ON A.app_id = AP.app_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE T.targeting_type = 'Interest' \n  AND T.option_value = 'Fitness' \n  AND C.status = 'active' \n  AND C.budget > 2500000;\n```",
        "prompt_token_number": 253,
        "response_token_number": 100,
        "response_text_processed": "SELECT A.name, A.category FROM Apps A JOIN Ad_Placements AP ON A.app_id = AP.app_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options T ON C.campaign_id = T.campaign_id WHERE T.targeting_type = 'Interest' AND T.option_value = 'Fitness' AND C.status = 'active' AND C.budget > 2500000"
    },
    {
        "id": 33261,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $6 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $6 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 6000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT \n    Advertisers.name, \n    Advertisers.contact_email \nFROM \n    Advertisers \nJOIN \n    Campaigns \nON \n    Advertisers.advertiser_id = Campaigns.advertiser_id \nJOIN \n    Targeting_Options \nON \n    Campaigns.campaign_id = Targeting_Options.campaign_id \nWHERE \n    Campaigns.status = 'active' \n    AND Targeting_Options.targeting_type = 'Interest' \n    AND Targeting_Options.option_value = 'Music' \n    AND Campaigns.budget > 6000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 120,
        "response_text_processed": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'Interest' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 6000000"
    },
    {
        "id": 33262,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and target users interested in \"Shoes\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and target users interested in \"Shoes\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Fashion' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Shoes' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT C.name, C.budget \nFROM Campaigns C\nJOIN Ad_Placements AP ON C.campaign_id = AP.campaign_id\nJOIN Websites W ON AP.website_id = W.website_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE W.category = 'Fashion' AND TO.option_value = 'Shoes';\n```",
        "prompt_token_number": 256,
        "response_token_number": 77,
        "response_text_processed": "SELECT C.name, C.budget FROM Campaigns C JOIN Ad_Placements AP ON C.campaign_id = AP.campaign_id JOIN Websites W ON AP.website_id = W.website_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE W.category = 'Fashion' AND TO.option_value = 'Shoes'"
    },
    {
        "id": 33263,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $3 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $3 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 3000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT W.name, W.category\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE C.status = 'Active' \n  AND C.budget > 3000000 \n  AND TO.targeting_type = 'Interest' \n  AND TO.option_value = 'Technology';\n```",
        "prompt_token_number": 257,
        "response_token_number": 100,
        "response_text_processed": "SELECT DISTINCT W.name, W.category FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE C.status = 'Active' AND C.budget > 3000000 AND TO.targeting_type = 'Interest' AND TO.option_value = 'Technology'"
    },
    {
        "id": 33264,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $5 million and have been updated in the last 300 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $5 million and have been updated in the last 300 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 5000000 AND Creatives.updated_at BETWEEN DATE('now', '-300 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 5000000\nAND Creatives.updated_at >= CURRENT_DATE - INTERVAL '300 days';\n```",
        "prompt_token_number": 172,
        "response_token_number": 58,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 5000000 AND Creatives.updated_at >= CURRENT_DATE - INTERVAL '300 days'"
    },
    {
        "id": 33265,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $3.5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $3.5 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 3500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT Apps.name, Apps.category\nFROM Apps\nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id\nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.status = 'active'\n  AND Campaigns.budget > 3500000\n  AND Targeting_Options.targeting_type = 'interest'\n  AND Targeting_Options.option_value = 'Sports';\n```",
        "prompt_token_number": 253,
        "response_token_number": 107,
        "response_text_processed": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Campaigns.budget > 3500000 AND Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Sports'"
    },
    {
        "id": 33266,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Education\" and have a budget greater than $5.5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Education\" and have a budget greater than $5.5 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Education' AND Campaigns.budget > 5500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \nAND t.targeting_type = 'Education' \nAND c.budget > 5500000\nGROUP BY a.name, a.contact_email;\n```",
        "prompt_token_number": 195,
        "response_token_number": 86,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'Education' AND c.budget > 5500000 GROUP BY a.name, a.contact_email"
    },
    {
        "id": 33267,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Health\" and target users interested in \"Nutrition\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Health\" and target users interested in \"Nutrition\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Health' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Nutrition' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget \nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id\nWHERE w.category = 'Health' \n  AND topt.targeting_type = 'interest' \n  AND topt.option_value = 'Nutrition';\n```",
        "prompt_token_number": 256,
        "response_token_number": 94,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id WHERE w.category = 'Health' AND topt.targeting_type = 'interest' AND topt.option_value = 'Nutrition'"
    },
    {
        "id": 33268,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $4 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $4 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 4000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT W.name, W.category\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE TO.targeting_type = 'Interest' AND TO.option_value = 'Travel'\n  AND C.status = 'active'\n  AND C.budget > 4000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 97,
        "response_text_processed": "SELECT DISTINCT W.name, W.category FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE TO.targeting_type = 'Interest' AND TO.option_value = 'Travel' AND C.status = 'active' AND C.budget > 4000000"
    },
    {
        "id": 33269,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $6 million and have been updated in the last 350 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $6 million and have been updated in the last 350 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 6000000 AND Creatives.updated_at BETWEEN DATE('now', '-350 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 6000000\nAND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 350 DAY);\n```",
        "prompt_token_number": 172,
        "response_token_number": 61,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 6000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 350 DAY)"
    },
    {
        "id": 33270,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $4 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $4 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 4000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id\nWHERE c.status = 'active'\n  AND topt.targeting_type = 'interest'\n  AND topt.option_value = 'Gaming'\n  AND c.budget > 4000000;\n```",
        "prompt_token_number": 252,
        "response_token_number": 102,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id WHERE c.status = 'active' AND topt.targeting_type = 'interest' AND topt.option_value = 'Gaming' AND c.budget > 4000000"
    },
    {
        "id": 33271,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Books\" and have a budget greater than $6.5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Books\" and have a budget greater than $6.5 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Books' AND Campaigns.budget > 6500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Books'\n  AND c.budget > 6500000;\n```",
        "prompt_token_number": 195,
        "response_token_number": 86,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Books' AND c.budget > 6500000"
    },
    {
        "id": 33272,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Entertainment\" and target users interested in \"Movies\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Entertainment\" and target users interested in \"Movies\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Entertainment' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE w.category = 'Entertainment' AND t.option_value = 'Movies';\n```",
        "prompt_token_number": 256,
        "response_token_number": 77,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE w.category = 'Entertainment' AND t.option_value = 'Movies'"
    },
    {
        "id": 33273,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $3.5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $3.5 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 3500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.option_value = 'Art' \n  AND c.status = 'active' \n  AND c.budget > 3500000;\n```",
        "prompt_token_number": 259,
        "response_token_number": 90,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.option_value = 'Art' AND c.status = 'active' AND c.budget > 3500000"
    },
    {
        "id": 33274,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $7 million and have been updated in the last 400 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $7 million and have been updated in the last 400 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 7000000 AND Creatives.updated_at BETWEEN DATE('now', '-400 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 7000000\n  AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 400 DAY);\n```",
        "prompt_token_number": 172,
        "response_token_number": 62,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 7000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 400 DAY)"
    },
    {
        "id": 33275,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $4.5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $4.5 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 4500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Food'\n  AND c.budget > 4500000;\n```",
        "prompt_token_number": 253,
        "response_token_number": 97,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Food' AND c.budget > 4500000"
    },
    {
        "id": 33276,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Pets\" and have a budget greater than $7 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Pets\" and have a budget greater than $7 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Pets' AND Campaigns.budget > 7000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Pets' \n  AND c.budget > 7000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 90,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Pets' AND c.budget > 7000000"
    },
    {
        "id": 33277,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Finance\" and target users interested in \"Investing\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Finance\" and target users interested in \"Investing\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Finance' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Investing' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE w.category = 'Finance' AND t.option_value = 'Investing';\n```",
        "prompt_token_number": 256,
        "response_token_number": 78,
        "response_text_processed": "SELECT DISTINCT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE w.category = 'Finance' AND t.option_value = 'Investing'"
    },
    {
        "id": 33278,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Beauty\" and have a budget greater than $4.5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Beauty\" and have a budget greater than $4.5 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Beauty' AND Campaigns.budget > 4500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT W.name, W.category\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE TO.targeting_type = 'interest'\n  AND TO.option_value = 'Beauty'\n  AND C.status = 'active'\n  AND C.budget > 4500000;\n```",
        "prompt_token_number": 259,
        "response_token_number": 98,
        "response_text_processed": "SELECT DISTINCT W.name, W.category FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE TO.targeting_type = 'interest' AND TO.option_value = 'Beauty' AND C.status = 'active' AND C.budget > 4500000"
    },
    {
        "id": 33279,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $8 million and have been updated in the last 450 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $8 million and have been updated in the last 450 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 8000000 AND Creatives.updated_at BETWEEN DATE('now', '-450 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Cr.name, Cr.type\nFROM Creatives Cr\nJOIN Campaigns Ca ON Cr.campaign_id = Ca.campaign_id\nWHERE Ca.budget > 8000000 \n  AND DATEDIFF(NOW(), Cr.updated_at) <= 450;\n```",
        "prompt_token_number": 172,
        "response_token_number": 57,
        "response_text_processed": "SELECT Cr.name, Cr.type FROM Creatives Cr JOIN Campaigns Ca ON Cr.campaign_id = Ca.campaign_id WHERE Ca.budget > 8000000 AND DATEDIFF(NOW(), Cr.updated_at) <= 450"
    },
    {
        "id": 33280,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $6 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $6 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 6000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest' AND t.option_value = 'Fashion'\n  AND c.status = 'active'\n  AND c.budget > 6000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 97,
        "response_text_processed": "SELECT DISTINCT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Fashion' AND c.status = 'active' AND c.budget > 6000000"
    },
    {
        "id": 33281,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fitness\" and have a budget greater than $9 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fitness\" and have a budget greater than $9 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 9000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n    AND t.targeting_type = 'interest'\n    AND t.option_value = 'Fitness'\n    AND c.budget > 9000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 87,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Fitness' AND c.budget > 9000000"
    },
    {
        "id": 33282,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Technology\" and target users interested in \"Gadgets\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Technology\" and target users interested in \"Gadgets\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Technology' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gadgets' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT C.name, C.budget\nFROM Campaigns C\nJOIN Ad_Placements AP ON C.campaign_id = AP.campaign_id\nJOIN Websites W ON AP.website_id = W.website_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE W.category = 'Technology' AND TO.option_value = 'Gadgets';\n```",
        "prompt_token_number": 257,
        "response_token_number": 78,
        "response_text_processed": "SELECT C.name, C.budget FROM Campaigns C JOIN Ad_Placements AP ON C.campaign_id = AP.campaign_id JOIN Websites W ON AP.website_id = W.website_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE W.category = 'Technology' AND TO.option_value = 'Gadgets'"
    },
    {
        "id": 33283,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Home Decor\" and have a budget greater than $5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Home Decor\" and have a budget greater than $5 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Home Decor' AND Campaigns.budget > 5000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options to1 ON c.campaign_id = to1.campaign_id\nWHERE c.status = 'active'\n  AND to1.targeting_type = 'interest'\n  AND to1.option_value = 'Home Decor'\n  AND c.budget > 5000000;\n```",
        "prompt_token_number": 258,
        "response_token_number": 102,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options to1 ON c.campaign_id = to1.campaign_id WHERE c.status = 'active' AND to1.targeting_type = 'interest' AND to1.option_value = 'Home Decor' AND c.budget > 5000000"
    },
    {
        "id": 33286,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $8 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $8 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 8000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND c.budget > 8000000 \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Music';\n```",
        "prompt_token_number": 193,
        "response_token_number": 88,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND c.budget > 8000000 AND t.targeting_type = 'interest' AND t.option_value = 'Music'"
    },
    {
        "id": 33287,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"News\" and target users interested in \"Politics\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"News\" and target users interested in \"Politics\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'News' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Politics' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE w.category = 'News' AND t.option_value = 'Politics';\n```",
        "prompt_token_number": 255,
        "response_token_number": 76,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE w.category = 'News' AND t.option_value = 'Politics'"
    },
    {
        "id": 33288,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $6 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $6 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 6000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\nAND t.targeting_type = 'interest'\nAND t.option_value = 'Sports'\nAND c.budget > 6000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 95,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Sports' AND c.budget > 6000000"
    },
    {
        "id": 33289,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $12 million and have been updated in the last 550 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $12 million and have been updated in the last 550 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 12000000 AND Creatives.updated_at BETWEEN DATE('now', '-550 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 12000000\nAND Creatives.updated_at >= NOW() - INTERVAL 550 DAY;\n```",
        "prompt_token_number": 172,
        "response_token_number": 58,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 12000000 AND Creatives.updated_at >= NOW() - INTERVAL 550 DAY"
    },
    {
        "id": 33291,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Art\" and have a budget greater than $10 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Art\" and have a budget greater than $10 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 10000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \nAND t.targeting_type = 'interest' \nAND t.option_value = 'Art' \nAND c.budget > 10000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 86,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Art' AND c.budget > 10000000"
    },
    {
        "id": 33292,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Fitness\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Fitness\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Sports' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE w.category = 'Sports'\nAND t.option_value = 'Fitness';\n```",
        "prompt_token_number": 255,
        "response_token_number": 76,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE w.category = 'Sports' AND t.option_value = 'Fitness'"
    },
    {
        "id": 33293,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $8 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $8 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 8000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' AND t.targeting_type = 'user interest' AND t.option_value = 'Technology' AND c.budget > 8000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 95,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'user interest' AND t.option_value = 'Technology' AND c.budget > 8000000"
    },
    {
        "id": 33294,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $15 million and have been updated in the last 600 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $15 million and have been updated in the last 600 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 15000000 AND Creatives.updated_at BETWEEN DATE('now', '-600 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Campaigns\nJOIN Creatives ON Campaigns.campaign_id = Creatives.campaign_id\nWHERE Campaigns.budget > 15000000\nAND Creatives.updated_at > CURRENT_DATE - INTERVAL '600 days';\n```",
        "prompt_token_number": 172,
        "response_token_number": 58,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Campaigns JOIN Creatives ON Campaigns.campaign_id = Creatives.campaign_id WHERE Campaigns.budget > 15000000 AND Creatives.updated_at > CURRENT_DATE - INTERVAL '600 days'"
    },
    {
        "id": 33295,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $4 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $4 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 4000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT Apps.name, Apps.category\nFROM Apps\nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id\nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.status = 'active'\nAND Targeting_Options.targeting_type = 'interest'\nAND Targeting_Options.option_value = 'Food'\nAND Campaigns.budget > 4000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 104,
        "response_text_processed": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 4000000"
    },
    {
        "id": 33296,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Movies\" and have a budget greater than $12 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Movies\" and have a budget greater than $12 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' AND Campaigns.budget > 12000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.option_value = 'Movies'\n  AND c.budget > 12000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 77,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.option_value = 'Movies' AND c.budget > 12000000"
    },
    {
        "id": 33297,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Business\" and target users interested in \"Finance\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Business\" and target users interested in \"Finance\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Business' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Finance' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE w.category = 'Business'\n  AND t.option_value = 'Finance';\n```",
        "prompt_token_number": 255,
        "response_token_number": 77,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE w.category = 'Business' AND t.option_value = 'Finance'"
    },
    {
        "id": 33298,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $9 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $9 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 9000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT W.name, W.category\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE C.budget > 9000000\nAND C.status = 'active'\nAND TO.targeting_type = 'interest'\nAND TO.option_value = 'Travel';\n```",
        "prompt_token_number": 257,
        "response_token_number": 95,
        "response_text_processed": "SELECT DISTINCT W.name, W.category FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE C.budget > 9000000 AND C.status = 'active' AND TO.targeting_type = 'interest' AND TO.option_value = 'Travel'"
    },
    {
        "id": 33299,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $20 million and have been updated in the last 700 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $20 million and have been updated in the last 700 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 20000000 AND Creatives.updated_at BETWEEN DATE('now', '-700 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns ca ON c.campaign_id = ca.campaign_id\nWHERE ca.budget > 20000000\n  AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 700 DAY);\n```",
        "prompt_token_number": 172,
        "response_token_number": 58,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns ca ON c.campaign_id = ca.campaign_id WHERE ca.budget > 20000000 AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 700 DAY)"
    },
    {
        "id": 33300,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Gaming\" and have a budget greater than $15 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Gaming\" and have a budget greater than $15 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 15000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' AND t.option_value = 'Gaming' AND c.budget > 15000000\nGROUP BY a.name, a.contact_email;\n```",
        "prompt_token_number": 194,
        "response_token_number": 84,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.option_value = 'Gaming' AND c.budget > 15000000 GROUP BY a.name, a.contact_email"
    },
    {
        "id": 33301,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Entertainment\" and target users interested in \"Celebrities\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Entertainment\" and target users interested in \"Celebrities\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Entertainment' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Celebrities' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget \nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options to ON c.campaign_id = to.campaign_id\nWHERE w.category = 'Entertainment' \nAND to.targeting_type = 'Interest' \nAND to.option_value = 'Celebrities';\n```",
        "prompt_token_number": 257,
        "response_token_number": 89,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options to ON c.campaign_id = to.campaign_id WHERE w.category = 'Entertainment' AND to.targeting_type = 'Interest' AND to.option_value = 'Celebrities'"
    },
    {
        "id": 33302,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $10 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $10 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Health' AND Campaigns.budget > 10000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category \nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'user interest' \n  AND t.option_value = 'Health' \n  AND c.budget > 10000000 \n  AND c.status = 'active';\n```",
        "prompt_token_number": 257,
        "response_token_number": 100,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'user interest' AND t.option_value = 'Health' AND c.budget > 10000000 AND c.status = 'active'"
    },
    {
        "id": 33303,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $25 million and have been updated in the last 800 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $25 million and have been updated in the last 800 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 25000000 AND Creatives.updated_at BETWEEN DATE('now', '-800 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 25000000\n  AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 800 DAY);\n```",
        "prompt_token_number": 172,
        "response_token_number": 62,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 25000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 800 DAY)"
    },
    {
        "id": 33304,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $5 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 5000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT A.name, A.category\nFROM Apps A\nJOIN Ad_Placements AP ON A.app_id = AP.app_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE TO.targeting_type = 'Sports'\nAND C.budget > 5000000\nAND C.status = 'active';\n```",
        "prompt_token_number": 251,
        "response_token_number": 86,
        "response_text_processed": "SELECT A.name, A.category FROM Apps A JOIN Ad_Placements AP ON A.app_id = AP.app_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE TO.targeting_type = 'Sports' AND C.budget > 5000000 AND C.status = 'active'"
    },
    {
        "id": 33305,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $18 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $18 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 18000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest' AND t.option_value = 'Music'\n  AND c.status = 'active'\n  AND c.budget > 18000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 85,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Music' AND c.status = 'active' AND c.budget > 18000000"
    },
    {
        "id": 33306,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Home\" and have a budget greater than $7 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Home\" and have a budget greater than $7 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Home' AND Campaigns.budget > 7000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND c.budget > 7000000\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Home';\n```",
        "prompt_token_number": 257,
        "response_token_number": 98,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND c.budget > 7000000 AND t.targeting_type = 'interest' AND t.option_value = 'Home'"
    },
    {
        "id": 33307,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $30 million and have been updated in the last 900 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $30 million and have been updated in the last 900 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 30000000 AND Creatives.updated_at BETWEEN DATE('now', '-900 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns cam ON c.campaign_id = cam.campaign_id\nWHERE cam.budget > 30000000\n  AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 900 DAY);\n```",
        "prompt_token_number": 172,
        "response_token_number": 58,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns cam ON c.campaign_id = cam.campaign_id WHERE cam.budget > 30000000 AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 900 DAY)"
    },
    {
        "id": 33308,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Beauty\" and have a budget greater than $4.5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Beauty\" and have a budget greater than $4.5 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Beauty' AND Campaigns.budget > 4500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'Interest' AND t.option_value = 'Beauty'\nAND c.budget > 4500000\nAND c.status = 'active';\n```",
        "prompt_token_number": 253,
        "response_token_number": 94,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'Interest' AND t.option_value = 'Beauty' AND c.budget > 4500000 AND c.status = 'active'"
    },
    {
        "id": 33309,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Education\" and have a budget greater than $20 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Education\" and have a budget greater than $20 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Education' AND Campaigns.budget > 20000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'Education'\n  AND c.budget > 20000000\nGROUP BY a.name, a.contact_email;\n```",
        "prompt_token_number": 193,
        "response_token_number": 86,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'Education' AND c.budget > 20000000 GROUP BY a.name, a.contact_email"
    },
    {
        "id": 33310,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and target users interested in \"Shopping\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and target users interested in \"Shopping\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Fashion' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Shopping' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE w.category = 'Fashion' AND t.option_value = 'Shopping';\n```",
        "prompt_token_number": 255,
        "response_token_number": 77,
        "response_text_processed": "SELECT DISTINCT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE w.category = 'Fashion' AND t.option_value = 'Shopping'"
    },
    {
        "id": 33311,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $9 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $9 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 9000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \nAND t.targeting_type = 'interest' \nAND t.option_value = 'Technology' \nAND c.budget > 9000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 97,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Technology' AND c.budget > 9000000"
    },
    {
        "id": 33312,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $40 million and have been updated in the last 1000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $40 million and have been updated in the last 1000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 40000000 AND Creatives.updated_at BETWEEN DATE('now', '-1000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns ca ON c.campaign_id = ca.campaign_id\nWHERE ca.budget > 40000000\nAND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 1000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 58,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns ca ON c.campaign_id = ca.campaign_id WHERE ca.budget > 40000000 AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 1000 DAY)"
    },
    {
        "id": 33313,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $3.5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $3.5 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 3500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \nAND c.budget > 3500000\nAND t.option_value = 'Food';\n```",
        "prompt_token_number": 253,
        "response_token_number": 86,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND c.budget > 3500000 AND t.option_value = 'Food'"
    },
    {
        "id": 33314,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Movies\" and have a budget greater than $22 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Movies\" and have a budget greater than $22 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' AND Campaigns.budget > 22000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \nAND t.targeting_type = 'interest' \nAND t.option_value = 'Movies' \nAND c.budget > 22000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 86,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Movies' AND c.budget > 22000000"
    },
    {
        "id": 33316,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $6 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $6 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 6000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT W.name, W.category\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE C.status = 'active'\n  AND TO.targeting_type = 'interest'\n  AND TO.option_value = 'Art'\n  AND C.budget > 6000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 98,
        "response_text_processed": "SELECT DISTINCT W.name, W.category FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE C.status = 'active' AND TO.targeting_type = 'interest' AND TO.option_value = 'Art' AND C.budget > 6000000"
    },
    {
        "id": 33317,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $50 million and have been updated in the last 1200 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $50 million and have been updated in the last 1200 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 50000000 AND Creatives.updated_at BETWEEN DATE('now', '-1200 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 50000000\n  AND Creatives.updated_at >= (CURRENT_DATE - INTERVAL '1200 days');\n```",
        "prompt_token_number": 173,
        "response_token_number": 61,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 50000000 AND Creatives.updated_at >= (CURRENT_DATE - INTERVAL '1200 days')"
    },
    {
        "id": 33318,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $6 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $6 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Health' AND Campaigns.budget > 6000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category \nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.option_value = 'Health'\nAND c.status = 'active'\nAND c.budget > 6000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 85,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.option_value = 'Health' AND c.status = 'active' AND c.budget > 6000000"
    },
    {
        "id": 33319,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $25 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $25 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 25000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Fashion' AND c.budget > 25000000\nGROUP BY a.name, a.contact_email;\n```",
        "prompt_token_number": 193,
        "response_token_number": 92,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Fashion' AND c.budget > 25000000 GROUP BY a.name, a.contact_email"
    },
    {
        "id": 33320,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $11 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $11 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 11000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.option_value = 'Technology'\nAND t.targeting_type = 'interest'\nAND c.budget > 11000000\nAND c.status = 'active';\n```",
        "prompt_token_number": 257,
        "response_token_number": 94,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.option_value = 'Technology' AND t.targeting_type = 'interest' AND c.budget > 11000000 AND c.status = 'active'"
    },
    {
        "id": 33321,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $60 million and have been updated in the last 1400 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $60 million and have been updated in the last 1400 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 60000000 AND Creatives.updated_at BETWEEN DATE('now', '-1400 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 60000000\nAND Creatives.updated_at >= CURRENT_DATE - INTERVAL '1400' DAY;\n```",
        "prompt_token_number": 173,
        "response_token_number": 60,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 60000000 AND Creatives.updated_at >= CURRENT_DATE - INTERVAL '1400' DAY"
    },
    {
        "id": 33322,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $7 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $7 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 7000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Apps.name, Apps.category\nFROM Apps\nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id\nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Targeting_Options.option_value = 'Music'\nAND Campaigns.budget > 7000000\nAND Campaigns.status = 'active';\n```",
        "prompt_token_number": 251,
        "response_token_number": 94,
        "response_text_processed": "SELECT DISTINCT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.option_value = 'Music' AND Campaigns.budget > 7000000 AND Campaigns.status = 'active'"
    },
    {
        "id": 33323,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Gaming\" and have a budget greater than $30 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Gaming\" and have a budget greater than $30 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 30000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Gaming' \n  AND c.budget > 30000000\nGROUP BY a.name, a.contact_email;\n```",
        "prompt_token_number": 194,
        "response_token_number": 99,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Gaming' AND c.budget > 30000000 GROUP BY a.name, a.contact_email"
    },
    {
        "id": 33324,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $9 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $9 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 9000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Targeting_Options to ON ap.campaign_id = to.campaign_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nWHERE to.targeting_type = 'Interest' \n  AND to.option_value = 'Fitness' \n  AND c.status = 'active' \n  AND c.budget > 9000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 101,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Targeting_Options to ON ap.campaign_id = to.campaign_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id WHERE to.targeting_type = 'Interest' AND to.option_value = 'Fitness' AND c.status = 'active' AND c.budget > 9000000"
    },
    {
        "id": 33325,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $80 million and have been updated in the last 1600 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $80 million and have been updated in the last 1600 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 80000000 AND Creatives.updated_at BETWEEN DATE('now', '-1600 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 80000000 \n  AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 1600 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 63,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 80000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 1600 DAY)"
    },
    {
        "id": 33326,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Business\" and have a budget greater than $5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Business\" and have a budget greater than $5 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Business' AND Campaigns.budget > 5000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT A.name, A.category\nFROM Apps A\nJOIN Ad_Placements AP ON A.app_id = AP.app_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE T.targeting_type = 'interest' \n  AND T.option_value = 'Business'\n  AND C.status = 'active'\n  AND C.budget > 5000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 99,
        "response_text_processed": "SELECT DISTINCT A.name, A.category FROM Apps A JOIN Ad_Placements AP ON A.app_id = AP.app_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options T ON C.campaign_id = T.campaign_id WHERE T.targeting_type = 'interest' AND T.option_value = 'Business' AND C.status = 'active' AND C.budget > 5000000"
    },
    {
        "id": 33327,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $35 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $35 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 35000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'Travel' \n  AND c.budget > 35000000\nGROUP BY a.name, a.contact_email;\n```",
        "prompt_token_number": 193,
        "response_token_number": 88,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'Travel' AND c.budget > 35000000 GROUP BY a.name, a.contact_email"
    },
    {
        "id": 33328,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Food\" and target users interested in \"Cooking\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Food\" and target users interested in \"Cooking\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Food' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Cooking' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget \nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE w.category = 'Food' AND t.option_value = 'Cooking';\n```",
        "prompt_token_number": 256,
        "response_token_number": 77,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE w.category = 'Food' AND t.option_value = 'Cooking'"
    },
    {
        "id": 33329,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $10 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $10 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' AND Campaigns.budget > 10000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Movies'\n  AND c.budget > 10000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 98,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Movies' AND c.budget > 10000000"
    },
    {
        "id": 33330,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $90 million and have been updated in the last 1800 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $90 million and have been updated in the last 1800 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 90000000 AND Creatives.updated_at BETWEEN DATE('now', '-1800 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 90000000\nAND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 1800 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 62,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 90000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 1800 DAY)"
    },
    {
        "id": 33331,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $8 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $8 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 8000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'Interest' AND t.option_value = 'Fashion'\n  AND c.status = 'active'\n  AND c.budget > 8000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 96,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'Interest' AND t.option_value = 'Fashion' AND c.status = 'active' AND c.budget > 8000000"
    },
    {
        "id": 33333,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Entertainment\" and target users interested in \"TV Shows\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Entertainment\" and target users interested in \"TV Shows\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Entertainment' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'TV Shows' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE w.category = 'Entertainment' AND t.option_value = 'TV Shows';\n```",
        "prompt_token_number": 257,
        "response_token_number": 78,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE w.category = 'Entertainment' AND t.option_value = 'TV Shows'"
    },
    {
        "id": 33334,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $12 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $12 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 12000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id\nWHERE topt.targeting_type = 'interest'\n  AND topt.option_value = 'Technology'\n  AND c.status = 'active'\n  AND c.budget > 12000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 102,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id WHERE topt.targeting_type = 'interest' AND topt.option_value = 'Technology' AND c.status = 'active' AND c.budget > 12000000"
    },
    {
        "id": 33335,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $100 million and have been updated in the last 2000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $100 million and have been updated in the last 2000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 100000000 AND Creatives.updated_at BETWEEN DATE('now', '-2000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type \nFROM Creatives c\nJOIN Campaigns cp ON c.campaign_id = cp.campaign_id\nWHERE cp.budget > 100000000 \n  AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 2000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 59,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns cp ON c.campaign_id = cp.campaign_id WHERE cp.budget > 100000000 AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 2000 DAY)"
    },
    {
        "id": 33336,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Pets\" and have a budget greater than $6 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Pets\" and have a budget greater than $6 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Pets' AND Campaigns.budget > 6000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT A.name, A.category \nFROM Apps A\nJOIN Ad_Placements AP ON A.app_id = AP.app_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE T.targeting_type = 'interest' \n  AND T.option_value = 'Pets' \n  AND C.status = 'active' \n  AND C.budget > 6000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 100,
        "response_text_processed": "SELECT A.name, A.category FROM Apps A JOIN Ad_Placements AP ON A.app_id = AP.app_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options T ON C.campaign_id = T.campaign_id WHERE T.targeting_type = 'interest' AND T.option_value = 'Pets' AND C.status = 'active' AND C.budget > 6000000"
    },
    {
        "id": 33337,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Home Improvement\" and have a budget greater than $25 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Home Improvement\" and have a budget greater than $25 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Home Improvement' AND Campaigns.budget > 25000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \nAND t.targeting_type = 'interest' \nAND t.option_value = 'Home Improvement' \nAND c.budget > 25000000;\n```",
        "prompt_token_number": 194,
        "response_token_number": 88,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Home Improvement' AND c.budget > 25000000"
    },
    {
        "id": 33338,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Education\" and have a budget greater than $14 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Education\" and have a budget greater than $14 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Education' AND Campaigns.budget > 14000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options to ON c.campaign_id = to.campaign_id\nWHERE to.targeting_type = 'interest' \n  AND to.option_value = 'Education'\n  AND c.status = 'active'\n  AND c.budget > 14000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 98,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options to ON c.campaign_id = to.campaign_id WHERE to.targeting_type = 'interest' AND to.option_value = 'Education' AND c.status = 'active' AND c.budget > 14000000"
    },
    {
        "id": 33339,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $120 million and have been updated in the last 2400 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $120 million and have been updated in the last 2400 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 120000000 AND Creatives.updated_at BETWEEN DATE('now', '-2400 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT cr.name, cr.type\nFROM Creatives AS cr\nJOIN Campaigns AS ca ON cr.campaign_id = ca.campaign_id\nWHERE ca.budget > 120000000 AND cr.updated_at >= DATE_SUB(CURDATE(), INTERVAL 2400 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 59,
        "response_text_processed": "SELECT cr.name, cr.type FROM Creatives AS cr JOIN Campaigns AS ca ON cr.campaign_id = ca.campaign_id WHERE ca.budget > 120000000 AND cr.updated_at >= DATE_SUB(CURDATE(), INTERVAL 2400 DAY)"
    },
    {
        "id": 33340,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Finance\" and have a budget greater than $10 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Finance\" and have a budget greater than $10 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Finance' AND Campaigns.budget > 10000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.option_value = 'Finance'\n  AND c.status = 'active'\n  AND c.budget > 10000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 87,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.option_value = 'Finance' AND c.status = 'active' AND c.budget > 10000000"
    },
    {
        "id": 33341,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Beauty\" and have a budget greater than $30 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Beauty\" and have a budget greater than $30 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Beauty' AND Campaigns.budget > 30000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Beauty' \n  AND c.budget > 30000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 90,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Beauty' AND c.budget > 30000000"
    },
    {
        "id": 33342,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $16 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $16 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 16000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\nAND t.option_value = 'Gaming'\nAND c.budget > 16000000;\n```",
        "prompt_token_number": 258,
        "response_token_number": 86,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.option_value = 'Gaming' AND c.budget > 16000000"
    },
    {
        "id": 33344,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $12 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $12 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 12000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest' AND t.option_value = 'Food'\n  AND c.status = 'active'\n  AND c.budget > 12000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 96,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Food' AND c.status = 'active' AND c.budget > 12000000"
    },
    {
        "id": 33345,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $20 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $20 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 20000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Travel' \n  AND c.budget > 20000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 89,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Travel' AND c.budget > 20000000"
    },
    {
        "id": 33346,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Basketball\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Basketball\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Sports' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Basketball' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget \nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE w.category = 'Sports' \nAND t.option_value = 'Basketball';\n```",
        "prompt_token_number": 256,
        "response_token_number": 78,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE w.category = 'Sports' AND t.option_value = 'Basketball'"
    },
    {
        "id": 33347,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $14 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $14 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 14000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND c.budget > 14000000 \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Fashion';\n```",
        "prompt_token_number": 257,
        "response_token_number": 100,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND c.budget > 14000000 AND t.targeting_type = 'interest' AND t.option_value = 'Fashion'"
    },
    {
        "id": 33348,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $200 million and have been updated in the last 4000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $200 million and have been updated in the last 4000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 200000000 AND Creatives.updated_at BETWEEN DATE('now', '-4000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns ca ON c.campaign_id = ca.campaign_id\nWHERE ca.budget > 200000000 AND c.updated_at >= CURRENT_DATE - INTERVAL '4000 days';\n```",
        "prompt_token_number": 173,
        "response_token_number": 54,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns ca ON c.campaign_id = ca.campaign_id WHERE ca.budget > 200000000 AND c.updated_at >= CURRENT_DATE - INTERVAL '4000 days'"
    },
    {
        "id": 33349,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $8 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $8 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' AND Campaigns.budget > 8000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT Apps.name, Apps.category\nFROM Apps\nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id\nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Targeting_Options.targeting_type = 'Movies' \nAND Campaigns.status = 'active' \nAND Campaigns.budget > 8000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 96,
        "response_text_processed": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'Movies' AND Campaigns.status = 'active' AND Campaigns.budget > 8000000"
    },
    {
        "id": 33350,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $15 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $15 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 15000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'user_interest' \n  AND t.option_value = 'Technology' \n  AND c.budget > 15000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 90,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'user_interest' AND t.option_value = 'Technology' AND c.budget > 15000000"
    },
    {
        "id": 33351,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $18 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $18 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 18000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Fitness'\n  AND c.budget > 18000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 97,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Fitness' AND c.budget > 18000000"
    },
    {
        "id": 33352,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $250 million and have been updated in the last 5000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $250 million and have been updated in the last 5000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 250000000 AND Creatives.updated_at BETWEEN DATE('now', '-5000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns cp ON c.campaign_id = cp.campaign_id\nWHERE cp.budget > 250000000 AND c.updated_at >= NOW() - INTERVAL '5000 DAYS';\n```",
        "prompt_token_number": 173,
        "response_token_number": 54,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns cp ON c.campaign_id = cp.campaign_id WHERE cp.budget > 250000000 AND c.updated_at >= NOW() - INTERVAL '5000 DAYS'"
    },
    {
        "id": 33354,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Home Decor\" and have a budget greater than $25 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Home Decor\" and have a budget greater than $25 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Home Decor' AND Campaigns.budget > 25000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.option_value = 'Home Decor'\n  AND c.budget > 25000000;\n```",
        "prompt_token_number": 194,
        "response_token_number": 78,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.option_value = 'Home Decor' AND c.budget > 25000000"
    },
    {
        "id": 33355,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and target users interested in \"Clothing\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and target users interested in \"Clothing\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Fashion' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Clothing' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options to ON c.campaign_id = to.campaign_id\nWHERE w.category = 'Fashion' AND to.option_value = 'Clothing';\n```",
        "prompt_token_number": 256,
        "response_token_number": 77,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options to ON c.campaign_id = to.campaign_id WHERE w.category = 'Fashion' AND to.option_value = 'Clothing'"
    },
    {
        "id": 33357,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $300 million and have been updated in the last 6000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $300 million and have been updated in the last 6000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 300000000 AND Creatives.updated_at BETWEEN DATE('now', '-6000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type \nFROM Creatives c \nJOIN Campaigns cmp \nON c.campaign_id = cmp.campaign_id \nWHERE cmp.budget > 300000000 \nAND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 6000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 59,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns cmp ON c.campaign_id = cmp.campaign_id WHERE cmp.budget > 300000000 AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 6000 DAY)"
    },
    {
        "id": 33358,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Pets\" and have a budget greater than $7 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Pets\" and have a budget greater than $7 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Pets' AND Campaigns.budget > 7000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT A.name, A.category\nFROM Apps A\nJOIN Ad_Placements AP ON A.app_id = AP.app_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE C.status = 'active' \n  AND T.targeting_type = 'interest' \n  AND T.option_value = 'Pets'\n  AND C.budget > 7000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 100,
        "response_text_processed": "SELECT DISTINCT A.name, A.category FROM Apps A JOIN Ad_Placements AP ON A.app_id = AP.app_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options T ON C.campaign_id = T.campaign_id WHERE C.status = 'active' AND T.targeting_type = 'interest' AND T.option_value = 'Pets' AND C.budget > 7000000"
    },
    {
        "id": 33359,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Sports\" and have a budget greater than $30 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Sports\" and have a budget greater than $30 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 30000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email \nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Sports' \n  AND c.budget > 30000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 90,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Sports' AND c.budget > 30000000"
    },
    {
        "id": 33360,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $22 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $22 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 22000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT W.name, W.category\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE C.status = 'active'\n  AND TO.option_value = 'Gaming'\n  AND C.budget > 22000000;\n```",
        "prompt_token_number": 258,
        "response_token_number": 89,
        "response_text_processed": "SELECT DISTINCT W.name, W.category FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE C.status = 'active' AND TO.option_value = 'Gaming' AND C.budget > 22000000"
    },
    {
        "id": 33361,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $400 million and have been updated in the last 7000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $400 million and have been updated in the last 7000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 400000000 AND Creatives.updated_at BETWEEN DATE('now', '-7000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 400000000 AND Creatives.updated_at > DATE_SUB(CURDATE(), INTERVAL 7000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 61,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 400000000 AND Creatives.updated_at > DATE_SUB(CURDATE(), INTERVAL 7000 DAY)"
    },
    {
        "id": 33362,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $12 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $12 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 12000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.option_value = 'Travel' \n  AND c.budget > 12000000 \n  AND c.status = 'active';\n```",
        "prompt_token_number": 251,
        "response_token_number": 88,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.option_value = 'Travel' AND c.budget > 12000000 AND c.status = 'active'"
    },
    {
        "id": 33363,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $35 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $35 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 35000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT A.name, A.contact_email\nFROM Advertisers A\nJOIN Campaigns C ON A.advertiser_id = C.advertiser_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE C.status = 'active' \n  AND T.option_value = 'Food' \n  AND C.budget > 35000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 79,
        "response_text_processed": "SELECT DISTINCT A.name, A.contact_email FROM Advertisers A JOIN Campaigns C ON A.advertiser_id = C.advertiser_id JOIN Targeting_Options T ON C.campaign_id = T.campaign_id WHERE C.status = 'active' AND T.option_value = 'Food' AND C.budget > 35000000"
    },
    {
        "id": 33364,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Health\" and target users interested in \"Fitness\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Health\" and target users interested in \"Fitness\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Health' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE w.category = 'Health' AND t.option_value = 'Fitness';\n```",
        "prompt_token_number": 255,
        "response_token_number": 76,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE w.category = 'Health' AND t.option_value = 'Fitness'"
    },
    {
        "id": 33365,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $25 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $25 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' AND Campaigns.budget > 25000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Movies'\n  AND c.budget > 25000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 98,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Movies' AND c.budget > 25000000"
    },
    {
        "id": 33366,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $500 million and have been updated in the last 8000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $500 million and have been updated in the last 8000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 500000000 AND Creatives.updated_at BETWEEN DATE('now', '-8000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 500000000\n  AND Creatives.updated_at >= NOW() - INTERVAL '8000 days';\n```",
        "prompt_token_number": 173,
        "response_token_number": 60,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 500000000 AND Creatives.updated_at >= NOW() - INTERVAL '8000 days'"
    },
    {
        "id": 33367,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $15 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $15 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 15000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'Interest'\n  AND t.option_value = 'Technology'\n  AND c.budget > 15000000\n  AND c.status = 'Active';\n```",
        "prompt_token_number": 251,
        "response_token_number": 97,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'Interest' AND t.option_value = 'Technology' AND c.budget > 15000000 AND c.status = 'Active'"
    },
    {
        "id": 33368,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Art\" and have a budget greater than $40 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Art\" and have a budget greater than $40 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 40000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest' AND t.option_value = 'Art'\nAND c.status = 'active'\nAND c.budget > 40000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 83,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Art' AND c.status = 'active' AND c.budget > 40000000"
    },
    {
        "id": 33369,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Education\" and have a budget greater than $30 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Education\" and have a budget greater than $30 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Education' AND Campaigns.budget > 30000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND c.budget > 30000000\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Education';\n```",
        "prompt_token_number": 257,
        "response_token_number": 97,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND c.budget > 30000000 AND t.targeting_type = 'interest' AND t.option_value = 'Education'"
    },
    {
        "id": 33370,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $600 million and have been updated in the last 9000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $600 million and have been updated in the last 9000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 600000000 AND Creatives.updated_at BETWEEN DATE('now', '-9000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns ca ON c.campaign_id = ca.campaign_id\nWHERE ca.budget > 600000000\nAND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 9000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 58,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns ca ON c.campaign_id = ca.campaign_id WHERE ca.budget > 600000000 AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 9000 DAY)"
    },
    {
        "id": 33371,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $20 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $20 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 20000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest'\n  AND t.option_value = 'Fashion'\n  AND c.budget > 20000000\n  AND c.status = 'active';\n```",
        "prompt_token_number": 251,
        "response_token_number": 97,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Fashion' AND c.budget > 20000000 AND c.status = 'active'"
    },
    {
        "id": 33372,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $45 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $45 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 45000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT Advertisers.name, Advertisers.contact_email\nFROM Advertisers\nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.status = 'active' \n  AND Targeting_Options.targeting_type = 'Music' \n  AND Campaigns.budget > 45000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 90,
        "response_text_processed": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'Music' AND Campaigns.budget > 45000000"
    },
    {
        "id": 33373,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Home & Garden\" and have a budget greater than $35 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Home & Garden\" and have a budget greater than $35 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Home & Garden' AND Campaigns.budget > 35000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT W.name, W.category\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE TO.targeting_type = 'interest' \n  AND TO.option_value = 'Home & Garden'\n  AND C.status = 'active' \n  AND C.budget > 35000000;\n```",
        "prompt_token_number": 259,
        "response_token_number": 102,
        "response_text_processed": "SELECT DISTINCT W.name, W.category FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE TO.targeting_type = 'interest' AND TO.option_value = 'Home & Garden' AND C.status = 'active' AND C.budget > 35000000"
    },
    {
        "id": 33374,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $700 million and have been updated in the last 10000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $700 million and have been updated in the last 10000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 700000000 AND Creatives.updated_at BETWEEN DATE('now', '-10000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns ca ON c.campaign_id = ca.campaign_id\nWHERE ca.budget > 700000000 AND c.updated_at > DATE_SUB(CURRENT_DATE, INTERVAL 10000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 57,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns ca ON c.campaign_id = ca.campaign_id WHERE ca.budget > 700000000 AND c.updated_at > DATE_SUB(CURRENT_DATE, INTERVAL 10000 DAY)"
    },
    {
        "id": 33375,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $25 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $25 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 25000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Sports'\n  AND c.budget > 25000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 97,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Sports' AND c.budget > 25000000"
    },
    {
        "id": 33376,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $50 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $50 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT A.name, A.contact_email\nFROM Advertisers A\nJOIN Campaigns C ON A.advertiser_id = C.advertiser_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE C.status = 'active' \n  AND T.targeting_type = 'interest' \n  AND T.option_value = 'Travel' \n  AND C.budget > 50000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 89,
        "response_text_processed": "SELECT A.name, A.contact_email FROM Advertisers A JOIN Campaigns C ON A.advertiser_id = C.advertiser_id JOIN Targeting_Options T ON C.campaign_id = T.campaign_id WHERE C.status = 'active' AND T.targeting_type = 'interest' AND T.option_value = 'Travel' AND C.budget > 50000000"
    },
    {
        "id": 33377,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food & Drink\" and have a budget greater than $40 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food & Drink\" and have a budget greater than $40 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food & Drink' AND Campaigns.budget > 40000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT W.name, W.category\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE C.status = 'active'\n  AND TO.targeting_type = 'interest' \n  AND TO.option_value = 'Food & Drink'\n  AND C.budget > 40000000;\n```",
        "prompt_token_number": 259,
        "response_token_number": 101,
        "response_text_processed": "SELECT DISTINCT W.name, W.category FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE C.status = 'active' AND TO.targeting_type = 'interest' AND TO.option_value = 'Food & Drink' AND C.budget > 40000000"
    },
    {
        "id": 33380,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $60 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $60 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 60000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND c.budget > 60000000\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Fashion';\n```",
        "prompt_token_number": 193,
        "response_token_number": 86,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND c.budget > 60000000 AND t.targeting_type = 'interest' AND t.option_value = 'Fashion'"
    },
    {
        "id": 33381,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $50 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $50 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.option_value = 'Travel'\n  AND c.budget > 50000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 87,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.option_value = 'Travel' AND c.budget > 50000000"
    },
    {
        "id": 33382,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $900 million and have been updated in the last 12000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $900 million and have been updated in the last 12000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 900000000 AND Creatives.updated_at BETWEEN DATE('now', '-12000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns cp ON c.campaign_id = cp.campaign_id\nWHERE cp.budget > 900000000 AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 12000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 57,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns cp ON c.campaign_id = cp.campaign_id WHERE cp.budget > 900000000 AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 12000 DAY)"
    },
    {
        "id": 33383,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $40 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $40 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 40000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.option_value = 'Gaming'\n  AND c.budget > 40000000;\n```",
        "prompt_token_number": 252,
        "response_token_number": 88,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.option_value = 'Gaming' AND c.budget > 40000000"
    },
    {
        "id": 33384,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fitness\" and have a budget greater than $70 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fitness\" and have a budget greater than $70 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 70000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Fitness' \n  AND c.budget > 70000000\nGROUP BY a.name, a.contact_email;\n```",
        "prompt_token_number": 193,
        "response_token_number": 98,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Fitness' AND c.budget > 70000000 GROUP BY a.name, a.contact_email"
    },
    {
        "id": 33385,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Food & Drink\" and target users interested in \"Cooking\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Food & Drink\" and target users interested in \"Cooking\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Food & Drink' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Cooking' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id\nWHERE w.category = 'Food & Drink' \nAND topt.option_value = 'Cooking';\n```",
        "prompt_token_number": 258,
        "response_token_number": 83,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id WHERE w.category = 'Food & Drink' AND topt.option_value = 'Cooking'"
    },
    {
        "id": 33386,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $35 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $35 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 35000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest' \n  AND t.option_value = 'Technology'\n  AND c.budget > 35000000\n  AND c.status = 'active';\n```",
        "prompt_token_number": 257,
        "response_token_number": 98,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Technology' AND c.budget > 35000000 AND c.status = 'active'"
    },
    {
        "id": 33388,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $45 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $45 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 45000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps AS a\nJOIN Ad_Placements AS ap ON a.app_id = ap.app_id\nJOIN Campaigns AS c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options AS t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest' \n  AND t.option_value = 'Music' \n  AND c.status = 'active' \n  AND c.budget > 45000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 104,
        "response_text_processed": "SELECT a.name, a.category FROM Apps AS a JOIN Ad_Placements AS ap ON a.app_id = ap.app_id JOIN Campaigns AS c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options AS t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Music' AND c.status = 'active' AND c.budget > 45000000"
    },
    {
        "id": 33389,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $80 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $80 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 80000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT Advertisers.name, Advertisers.contact_email\nFROM Advertisers\nJOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.status = 'Active'\n  AND Targeting_Options.targeting_type = 'Interest'\n  AND Targeting_Options.option_value = 'Travel'\n  AND Campaigns.budget > 80000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 99,
        "response_text_processed": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'Active' AND Targeting_Options.targeting_type = 'Interest' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 80000000"
    },
    {
        "id": 33391,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.1 billion and have been updated in the last 14000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.1 billion and have been updated in the last 14000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1100000000 AND Creatives.updated_at BETWEEN DATE('now', '-14000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns cp ON c.campaign_id = cp.campaign_id\nWHERE cp.budget > 1100000000 AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 14000 DAY);\n```",
        "prompt_token_number": 175,
        "response_token_number": 58,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns cp ON c.campaign_id = cp.campaign_id WHERE cp.budget > 1100000000 AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 14000 DAY)"
    },
    {
        "id": 33392,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $50 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $50 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name AS app_name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest' AND t.option_value = 'Fitness' AND c.status = 'active' AND c.budget > 50000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 98,
        "response_text_processed": "SELECT DISTINCT a.name AS app_name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Fitness' AND c.status = 'active' AND c.budget > 50000000"
    },
    {
        "id": 33393,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $90 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $90 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 90000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.option_value = 'Technology'\n  AND c.budget > 90000000\nGROUP BY a.name, a.contact_email;\n```",
        "prompt_token_number": 193,
        "response_token_number": 86,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.option_value = 'Technology' AND c.budget > 90000000 GROUP BY a.name, a.contact_email"
    },
    {
        "id": 33394,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Football\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Football\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Sports' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Football' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE w.category = 'Sports' AND t.targeting_type = 'interest' AND t.option_value = 'Football';\n```",
        "prompt_token_number": 255,
        "response_token_number": 85,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE w.category = 'Sports' AND t.targeting_type = 'interest' AND t.option_value = 'Football'"
    },
    {
        "id": 33395,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Cooking\" and have a budget greater than $60 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Cooking\" and have a budget greater than $60 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Cooking' AND Campaigns.budget > 60000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Cooking'\n  AND c.budget > 60000000;\n```",
        "prompt_token_number": 258,
        "response_token_number": 98,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Cooking' AND c.budget > 60000000"
    },
    {
        "id": 33396,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.2 billion and have been updated in the last 15000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.2 billion and have been updated in the last 15000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1200000000 AND Creatives.updated_at BETWEEN DATE('now', '-15000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns cmp ON c.campaign_id = cmp.campaign_id\nWHERE cmp.budget > 1200000000\nAND c.updated_at >= CURRENT_DATE - INTERVAL '15000' DAY;\n```",
        "prompt_token_number": 175,
        "response_token_number": 57,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns cmp ON c.campaign_id = cmp.campaign_id WHERE cmp.budget > 1200000000 AND c.updated_at >= CURRENT_DATE - INTERVAL '15000' DAY"
    },
    {
        "id": 33397,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $60 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $60 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 60000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT A.name, A.category\nFROM Apps A\nJOIN Ad_Placements AP ON A.app_id = AP.app_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE C.status = 'active'\n  AND C.budget > 60000000\n  AND TO.targeting_type = 'interest'\n  AND TO.option_value = 'Fashion';\n```",
        "prompt_token_number": 251,
        "response_token_number": 97,
        "response_text_processed": "SELECT A.name, A.category FROM Apps A JOIN Ad_Placements AP ON A.app_id = AP.app_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE C.status = 'active' AND C.budget > 60000000 AND TO.targeting_type = 'interest' AND TO.option_value = 'Fashion'"
    },
    {
        "id": 33398,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $100 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $100 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.budget > 100000000\n  AND c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Technology';\n```",
        "prompt_token_number": 193,
        "response_token_number": 86,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.budget > 100000000 AND c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Technology'"
    },
    {
        "id": 33399,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Music\" and target users interested in \"Rock\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Music\" and target users interested in \"Rock\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Music' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Rock' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id\nWHERE w.category = 'Music' AND topt.option_value = 'Rock';\n```",
        "prompt_token_number": 255,
        "response_token_number": 79,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id WHERE w.category = 'Music' AND topt.option_value = 'Rock'"
    },
    {
        "id": 33400,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $70 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $70 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 70000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND c.budget > 70000000\n  AND t.targeting_type = 'users interested in'\n  AND t.option_value = 'Travel';\n```",
        "prompt_token_number": 257,
        "response_token_number": 100,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND c.budget > 70000000 AND t.targeting_type = 'users interested in' AND t.option_value = 'Travel'"
    },
    {
        "id": 33401,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.3 billion and have been updated in the last 16000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.3 billion and have been updated in the last 16000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1300000000 AND Creatives.updated_at BETWEEN DATE('now', '-16000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT C.name, C.type\nFROM Creatives C\nJOIN Campaigns CA ON C.campaign_id = CA.campaign_id\nWHERE CA.budget > 1300000000 AND C.updated_at >= NOW() - INTERVAL '16000' DAY;\n```",
        "prompt_token_number": 175,
        "response_token_number": 56,
        "response_text_processed": "SELECT C.name, C.type FROM Creatives C JOIN Campaigns CA ON C.campaign_id = CA.campaign_id WHERE CA.budget > 1300000000 AND C.updated_at >= NOW() - INTERVAL '16000' DAY"
    },
    {
        "id": 33402,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $70 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $70 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 70000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT A.name, A.category\nFROM Apps A\nJOIN Ad_Placements AP ON A.app_id = AP.app_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE T.targeting_type = 'interest' \n  AND T.option_value = 'Food'\n  AND C.status = 'active'\n  AND C.budget > 70000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 98,
        "response_text_processed": "SELECT A.name, A.category FROM Apps A JOIN Ad_Placements AP ON A.app_id = AP.app_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options T ON C.campaign_id = T.campaign_id WHERE T.targeting_type = 'interest' AND T.option_value = 'Food' AND C.status = 'active' AND C.budget > 70000000"
    },
    {
        "id": 33403,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Sports\" and have a budget greater than $120 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Sports\" and have a budget greater than $120 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 120000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.option_value = 'Sports'\n  AND c.budget > 120000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 77,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.option_value = 'Sports' AND c.budget > 120000000"
    },
    {
        "id": 33404,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Technology\" and target users interested in \"Gaming\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"Technology\" and target users interested in \"Gaming\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Technology' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget \nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE w.category = 'Technology' AND t.targeting_type = 'interest' AND t.option_value = 'Gaming';\n```",
        "prompt_token_number": 256,
        "response_token_number": 86,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE w.category = 'Technology' AND t.targeting_type = 'interest' AND t.option_value = 'Gaming'"
    },
    {
        "id": 33405,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $80 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $80 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 80000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Music' \n  AND c.budget > 80000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 101,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Music' AND c.budget > 80000000"
    },
    {
        "id": 33406,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.4 billion and have been updated in the last 17000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.4 billion and have been updated in the last 17000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1400000000 AND Creatives.updated_at BETWEEN DATE('now', '-17000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT C.name, C.type \nFROM Creatives C\nJOIN Campaigns CA ON C.campaign_id = CA.campaign_id\nWHERE CA.budget > 1400000000 AND C.updated_at >= NOW() - INTERVAL 17000 DAY;\n```",
        "prompt_token_number": 175,
        "response_token_number": 55,
        "response_text_processed": "SELECT C.name, C.type FROM Creatives C JOIN Campaigns CA ON C.campaign_id = CA.campaign_id WHERE CA.budget > 1400000000 AND C.updated_at >= NOW() - INTERVAL 17000 DAY"
    },
    {
        "id": 33408,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $80 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $80 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 80000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Fashion'\n  AND c.budget > 80000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 87,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Fashion' AND c.budget > 80000000"
    },
    {
        "id": 33409,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $90 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $90 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 90000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND c.budget > 90000000 \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Technology';\n```",
        "prompt_token_number": 257,
        "response_token_number": 99,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND c.budget > 90000000 AND t.targeting_type = 'interest' AND t.option_value = 'Technology'"
    },
    {
        "id": 33410,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.5 billion and have been updated in the last 18000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.5 billion and have been updated in the last 18000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1500000000 AND Creatives.updated_at BETWEEN DATE('now', '-18000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 1500000000\n  AND DATEDIFF(NOW(), Creatives.updated_at) <= 18000;\n```",
        "prompt_token_number": 175,
        "response_token_number": 63,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1500000000 AND DATEDIFF(NOW(), Creatives.updated_at) <= 18000"
    },
    {
        "id": 33411,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $60 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Health\" and have a budget greater than $60 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Health' AND Campaigns.budget > 60000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT Apps.name, Apps.category\nFROM Apps\nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id\nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.status = 'active'\n  AND Campaigns.budget > 60000000\n  AND Targeting_Options.targeting_type = 'user_interest'\n  AND Targeting_Options.option_value = 'Health';\n```",
        "prompt_token_number": 251,
        "response_token_number": 108,
        "response_text_processed": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Campaigns.budget > 60000000 AND Targeting_Options.targeting_type = 'user_interest' AND Targeting_Options.option_value = 'Health'"
    },
    {
        "id": 33412,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $110 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $110 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 110000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT A.name, A.contact_email\nFROM Advertisers A\nJOIN Campaigns C ON A.advertiser_id = C.advertiser_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE C.status = 'active'\n  AND T.targeting_type = 'interest'\n  AND T.option_value = 'Technology'\n  AND C.budget > 110000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 86,
        "response_text_processed": "SELECT A.name, A.contact_email FROM Advertisers A JOIN Campaigns C ON A.advertiser_id = C.advertiser_id JOIN Targeting_Options T ON C.campaign_id = T.campaign_id WHERE C.status = 'active' AND T.targeting_type = 'interest' AND T.option_value = 'Technology' AND C.budget > 110000000"
    },
    {
        "id": 33413,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $100 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $100 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND c.budget > 100000000\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Travel';\n```",
        "prompt_token_number": 257,
        "response_token_number": 98,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND c.budget > 100000000 AND t.targeting_type = 'interest' AND t.option_value = 'Travel'"
    },
    {
        "id": 33414,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.6 billion and have been updated in the last 19000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1.6 billion and have been updated in the last 19000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1600000000 AND Creatives.updated_at BETWEEN DATE('now', '-19000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type \nFROM Creatives \nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id \nWHERE Campaigns.budget > 1600000000 AND DATEDIFF(CURRENT_DATE, Creatives.updated_at) <= 19000;\n```",
        "prompt_token_number": 175,
        "response_token_number": 62,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1600000000 AND DATEDIFF(CURRENT_DATE, Creatives.updated_at) <= 19000"
    },
    {
        "id": 33415,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Entertainment\" and have a budget greater than $70 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Entertainment\" and have a budget greater than $70 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Entertainment' AND Campaigns.budget > 70000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.option_value = 'Entertainment' \n  AND c.budget > 70000000 \n  AND c.status = 'active';\n```",
        "prompt_token_number": 252,
        "response_token_number": 89,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.option_value = 'Entertainment' AND c.budget > 70000000 AND c.status = 'active'"
    },
    {
        "id": 33416,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $90 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $90 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 90000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Music'\n  AND c.budget > 90000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 86,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Music' AND c.budget > 90000000"
    },
    {
        "id": 33417,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $120 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $120 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 120000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\nAND t.targeting_type = 'interest'\nAND t.option_value = 'Food'\nAND c.budget > 120000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 95,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Food' AND c.budget > 120000000"
    },
    {
        "id": 33418,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $2 billion and have been updated in the last 20000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $2 billion and have been updated in the last 20000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 2000000000 AND Creatives.updated_at BETWEEN DATE('now', '-20000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns ca ON c.campaign_id = ca.campaign_id\nWHERE ca.budget > 2000000000\nAND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 20000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 59,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns ca ON c.campaign_id = ca.campaign_id WHERE ca.budget > 2000000000 AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 20000 DAY)"
    },
    {
        "id": 33419,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $50 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $50 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest' \n  AND t.option_value = 'Fashion'\n  AND c.status = 'active'\n  AND c.budget > 50000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 98,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Fashion' AND c.status = 'active' AND c.budget > 50000000"
    },
    {
        "id": 33420,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Beauty\" and have a budget greater than $80 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Beauty\" and have a budget greater than $80 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Beauty' AND Campaigns.budget > 80000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Beauty' \n  AND c.budget > 80000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 89,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Beauty' AND c.budget > 80000000"
    },
    {
        "id": 33423,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $60 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $60 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 60000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.option_value = 'Travel' \n  AND c.status = 'active' \n  AND c.budget > 60000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 90,
        "response_text_processed": "SELECT DISTINCT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.option_value = 'Travel' AND c.status = 'active' AND c.budget > 60000000"
    },
    {
        "id": 33424,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Health\" and have a budget greater than $100 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Health\" and have a budget greater than $100 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Health' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email \nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Health' \n  AND c.budget > 100000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 89,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Health' AND c.budget > 100000000"
    },
    {
        "id": 33425,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Pets\" and have a budget greater than $200 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Pets\" and have a budget greater than $200 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Pets' AND Campaigns.budget > 200000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Pets'\n  AND c.budget > 200000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 98,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Pets' AND c.budget > 200000000"
    },
    {
        "id": 33426,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $3 billion and have been updated in the last 22000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $3 billion and have been updated in the last 22000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 3000000000 AND Creatives.updated_at BETWEEN DATE('now', '-22000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Campaigns.campaign_id = Creatives.campaign_id\nWHERE Campaigns.budget > 3000000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 22000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 62,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Campaigns.campaign_id = Creatives.campaign_id WHERE Campaigns.budget > 3000000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 22000 DAY)"
    },
    {
        "id": 33427,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $150 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $150 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 150000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interests'\n  AND t.option_value = 'Technology'\n  AND c.budget > 150000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 87,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interests' AND t.option_value = 'Technology' AND c.budget > 150000000"
    },
    {
        "id": 33429,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $4 billion and have been updated in the last 23000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $4 billion and have been updated in the last 23000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 4000000000 AND Creatives.updated_at BETWEEN DATE('now', '-23000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 4000000000\n  AND Creatives.updated_at >= NOW() - INTERVAL 23000 DAY;\n```",
        "prompt_token_number": 173,
        "response_token_number": 61,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 4000000000 AND Creatives.updated_at >= NOW() - INTERVAL 23000 DAY"
    },
    {
        "id": 33430,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $80 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $80 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 80000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT A.name, A.category\nFROM Apps A\nJOIN Ad_Placements AP ON A.app_id = AP.app_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE TO.targeting_type = 'interest' \n  AND TO.option_value = 'Sports' \n  AND C.status = 'active' \n  AND C.budget > 80000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 101,
        "response_text_processed": "SELECT DISTINCT A.name, A.category FROM Apps A JOIN Ad_Placements AP ON A.app_id = AP.app_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE TO.targeting_type = 'interest' AND TO.option_value = 'Sports' AND C.status = 'active' AND C.budget > 80000000"
    },
    {
        "id": 33431,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $200 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $200 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 200000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Fashion' \n  AND c.budget > 200000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 90,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Fashion' AND c.budget > 200000000"
    },
    {
        "id": 33432,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $150 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $150 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 150000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Targeting_Options topt ON ap.campaign_id = topt.campaign_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nWHERE topt.targeting_type = 'Interest' AND topt.option_value = 'Travel'\n  AND c.status = 'Active' AND c.budget > 150000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 100,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Targeting_Options topt ON ap.campaign_id = topt.campaign_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id WHERE topt.targeting_type = 'Interest' AND topt.option_value = 'Travel' AND c.status = 'Active' AND c.budget > 150000000"
    },
    {
        "id": 33433,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $5 billion and have been updated in the last 24000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $5 billion and have been updated in the last 24000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 5000000000 AND Creatives.updated_at BETWEEN DATE('now', '-24000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type \nFROM Campaigns\nJOIN Creatives ON Campaigns.campaign_id = Creatives.campaign_id\nWHERE Campaigns.budget > 5000000000\nAND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 24000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 63,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Campaigns JOIN Creatives ON Campaigns.campaign_id = Creatives.campaign_id WHERE Campaigns.budget > 5000000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 24000 DAY)"
    },
    {
        "id": 33434,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $100 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $100 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.option_value = 'Gaming' \n  AND c.status = 'active' \n  AND c.budget > 100000000;\n```",
        "prompt_token_number": 252,
        "response_token_number": 90,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.option_value = 'Gaming' AND c.status = 'active' AND c.budget > 100000000"
    },
    {
        "id": 33435,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Movies\" and have a budget greater than $300 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Movies\" and have a budget greater than $300 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' AND Campaigns.budget > 300000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Movies' \n  AND c.budget > 300000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 89,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Movies' AND c.budget > 300000000"
    },
    {
        "id": 33436,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Books\" and have a budget greater than $250 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Books\" and have a budget greater than $250 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Books' AND Campaigns.budget > 250000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest' \n  AND t.option_value = 'Books'\n  AND c.status = 'active'\n  AND c.budget > 250000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 98,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Books' AND c.status = 'active' AND c.budget > 250000000"
    },
    {
        "id": 33437,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $6 billion and have been updated in the last 25000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $6 billion and have been updated in the last 25000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 6000000000 AND Creatives.updated_at BETWEEN DATE('now', '-25000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns ca ON c.campaign_id = ca.campaign_id\nWHERE ca.budget > 6000000000\nAND DATEDIFF(CURDATE(), c.updated_at) <= 25000;\n```",
        "prompt_token_number": 173,
        "response_token_number": 59,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns ca ON c.campaign_id = ca.campaign_id WHERE ca.budget > 6000000000 AND DATEDIFF(CURDATE(), c.updated_at) <= 25000"
    },
    {
        "id": 33438,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $75 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $75 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 75000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest' \n  AND t.option_value = 'Fitness'\n  AND c.status = 'active'\n  AND c.budget > 75000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 99,
        "response_text_processed": "SELECT DISTINCT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Fitness' AND c.status = 'active' AND c.budget > 75000000"
    },
    {
        "id": 33439,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $400 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $400 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 400000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email \nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'Food' \n  AND c.budget > 400000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 80,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'Food' AND c.budget > 400000000"
    },
    {
        "id": 33441,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $7 billion and have been updated in the last 26000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $7 billion and have been updated in the last 26000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 7000000000 AND Creatives.updated_at BETWEEN DATE('now', '-26000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 7000000000\nAND Creatives.updated_at >= CURRENT_DATE - INTERVAL '26000' DAY;\n```",
        "prompt_token_number": 173,
        "response_token_number": 61,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 7000000000 AND Creatives.updated_at >= CURRENT_DATE - INTERVAL '26000' DAY"
    },
    {
        "id": 33442,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $50 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $50 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.option_value = 'Travel'\n  AND c.status = 'active'\n  AND c.budget > 50000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 87,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.option_value = 'Travel' AND c.status = 'active' AND c.budget > 50000000"
    },
    {
        "id": 33443,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $500 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $500 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 500000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' AND t.targeting_type = 'Fashion' AND c.budget > 500000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 75,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'Fashion' AND c.budget > 500000000"
    },
    {
        "id": 33444,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $100 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $100 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT W.name, W.category\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE TO.targeting_type = 'interest'\n  AND TO.option_value = 'Art'\n  AND C.budget > 100000000\n  AND C.status = 'active';\n```",
        "prompt_token_number": 257,
        "response_token_number": 98,
        "response_text_processed": "SELECT DISTINCT W.name, W.category FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE TO.targeting_type = 'interest' AND TO.option_value = 'Art' AND C.budget > 100000000 AND C.status = 'active'"
    },
    {
        "id": 33445,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $8 billion and have been updated in the last 27000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $8 billion and have been updated in the last 27000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 8000000000 AND Creatives.updated_at BETWEEN DATE('now', '-27000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 8000000000\n  AND DATEDIFF(CURDATE(), Creatives.updated_at) <= 27000;\n```",
        "prompt_token_number": 173,
        "response_token_number": 64,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 8000000000 AND DATEDIFF(CURDATE(), Creatives.updated_at) <= 27000"
    },
    {
        "id": 33446,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $60 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $60 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 60000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT Apps.name, Apps.category\nFROM Apps\nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id\nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.status = 'active'\nAND Campaigns.budget > 60000000\nAND Targeting_Options.targeting_type = 'interest'\nAND Targeting_Options.option_value = 'Gaming';\n```",
        "prompt_token_number": 252,
        "response_token_number": 105,
        "response_text_processed": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.status = 'active' AND Campaigns.budget > 60000000 AND Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Gaming'"
    },
    {
        "id": 33447,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $1 billion:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $1 billion:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 1000000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'Interest' AND t.option_value = 'Music' \nAND c.status = 'active'\nAND c.budget > 1000000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 85,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'Interest' AND t.option_value = 'Music' AND c.status = 'active' AND c.budget > 1000000000"
    },
    {
        "id": 33448,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Cooking\" and have a budget greater than $80 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Cooking\" and have a budget greater than $80 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Cooking' AND Campaigns.budget > 80000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest' AND t.option_value = 'Cooking'\nAND c.budget > 80000000\nAND c.status = 'active';\n```",
        "prompt_token_number": 258,
        "response_token_number": 96,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Cooking' AND c.budget > 80000000 AND c.status = 'active'"
    },
    {
        "id": 33450,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $75 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $75 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 75000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest'\n  AND t.option_value = 'Sports'\n  AND c.budget > 75000000\n  AND c.status = 'active';\n```",
        "prompt_token_number": 251,
        "response_token_number": 97,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Sports' AND c.budget > 75000000 AND c.status = 'active'"
    },
    {
        "id": 33451,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $500 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $500 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 500000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT A.name, A.contact_email\nFROM Advertisers A\nJOIN Campaigns C ON A.advertiser_id = C.advertiser_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE C.status = 'active' \n  AND T.targeting_type = 'interest' \n  AND T.option_value = 'Technology'\n  AND C.budget > 500000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 89,
        "response_text_processed": "SELECT DISTINCT A.name, A.contact_email FROM Advertisers A JOIN Campaigns C ON A.advertiser_id = C.advertiser_id JOIN Targeting_Options T ON C.campaign_id = T.campaign_id WHERE C.status = 'active' AND T.targeting_type = 'interest' AND T.option_value = 'Technology' AND C.budget > 500000000"
    },
    {
        "id": 33453,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $10 billion and have been updated in the last 29000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $10 billion and have been updated in the last 29000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 10000000000 AND Creatives.updated_at BETWEEN DATE('now', '-29000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 10000000000 AND Creatives.updated_at >= NOW() - INTERVAL 29000 DAY;\n```",
        "prompt_token_number": 173,
        "response_token_number": 59,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 10000000000 AND Creatives.updated_at >= NOW() - INTERVAL 29000 DAY"
    },
    {
        "id": 33454,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $100 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $100 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'Fashion' \n  AND c.status = 'active'\n  AND c.budget > 100000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 90,
        "response_text_processed": "SELECT DISTINCT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'Fashion' AND c.status = 'active' AND c.budget > 100000000"
    },
    {
        "id": 33455,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $250 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $250 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 250000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Travel'\n  AND c.budget > 250000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 87,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Travel' AND c.budget > 250000000"
    },
    {
        "id": 33456,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $70 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $70 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 70000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest' AND t.option_value = 'Food'\n  AND c.status = 'active' AND c.budget > 70000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 95,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Food' AND c.status = 'active' AND c.budget > 70000000"
    },
    {
        "id": 33457,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $12 billion and have been updated in the last 30000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $12 billion and have been updated in the last 30000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 12000000000 AND Creatives.updated_at BETWEEN DATE('now', '-30000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns ca ON c.campaign_id = ca.campaign_id\nWHERE ca.budget > 12000000000 AND c.updated_at >= NOW() - INTERVAL '30000 days';\n```",
        "prompt_token_number": 173,
        "response_token_number": 55,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns ca ON c.campaign_id = ca.campaign_id WHERE ca.budget > 12000000000 AND c.updated_at >= NOW() - INTERVAL '30000 days'"
    },
    {
        "id": 33458,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $150 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $150 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 150000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT A.name, A.category\nFROM Apps A\nJOIN Ad_Placements AP ON A.app_id = AP.app_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE TO.targeting_type = 'interest' AND TO.option_value = 'Music'\nAND C.budget > 150000000\nAND C.status = 'active';\n```",
        "prompt_token_number": 251,
        "response_token_number": 94,
        "response_text_processed": "SELECT A.name, A.category FROM Apps A JOIN Ad_Placements AP ON A.app_id = AP.app_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE TO.targeting_type = 'interest' AND TO.option_value = 'Music' AND C.budget > 150000000 AND C.status = 'active'"
    },
    {
        "id": 33459,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fitness\" and have a budget greater than $200 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fitness\" and have a budget greater than $200 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 200000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Fitness'\n  AND c.budget > 200000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 87,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Fitness' AND c.budget > 200000000"
    },
    {
        "id": 33460,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $80 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $80 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 80000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT W.name, W.category\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE C.status = 'active' \n  AND TO.targeting_type = 'interest' \n  AND TO.option_value = 'Art' \n  AND C.budget > 80000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 101,
        "response_text_processed": "SELECT DISTINCT W.name, W.category FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE C.status = 'active' AND TO.targeting_type = 'interest' AND TO.option_value = 'Art' AND C.budget > 80000000"
    },
    {
        "id": 33461,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $15 billion and have been updated in the last 31000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $15 billion and have been updated in the last 31000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 15000000000 AND Creatives.updated_at BETWEEN DATE('now', '-31000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 15000000000 \n  AND Creatives.updated_at >= CURRENT_DATE - INTERVAL '31000 days';\n```",
        "prompt_token_number": 173,
        "response_token_number": 61,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 15000000000 AND Creatives.updated_at >= CURRENT_DATE - INTERVAL '31000 days'"
    },
    {
        "id": 33462,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $50 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $50 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Apps.name, Apps.category\nFROM Apps\nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id\nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Targeting_Options.targeting_type = 'interest' \n  AND Targeting_Options.option_value = 'Technology'\n  AND Campaigns.status = 'active'\n  AND Campaigns.budget > 50000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 109,
        "response_text_processed": "SELECT DISTINCT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interest' AND Targeting_Options.option_value = 'Technology' AND Campaigns.status = 'active' AND Campaigns.budget > 50000000"
    },
    {
        "id": 33463,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Cooking\" and have a budget greater than $300 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Cooking\" and have a budget greater than $300 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Cooking' AND Campaigns.budget > 300000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\nAND t.targeting_type = 'interest'\nAND t.option_value = 'Cooking'\nAND c.budget > 300000000;\n```",
        "prompt_token_number": 194,
        "response_token_number": 85,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Cooking' AND c.budget > 300000000"
    },
    {
        "id": 33464,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $10 billion and have been updated in the last 32000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $10 billion and have been updated in the last 32000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 10000000000 AND Creatives.updated_at BETWEEN DATE('now', '-32000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 10000000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 32000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 62,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 10000000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 32000 DAY)"
    },
    {
        "id": 33465,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $20 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $20 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 20000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT A.name, A.category\nFROM Apps A\nJOIN Ad_Placements AP ON A.app_id = AP.app_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE TO.targeting_type = 'interest' \n  AND TO.option_value = 'Travel'\n  AND C.budget > 20000000\n  AND C.status = 'active';\n```",
        "prompt_token_number": 251,
        "response_token_number": 99,
        "response_text_processed": "SELECT DISTINCT A.name, A.category FROM Apps A JOIN Ad_Placements AP ON A.app_id = AP.app_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE TO.targeting_type = 'interest' AND TO.option_value = 'Travel' AND C.budget > 20000000 AND C.status = 'active'"
    },
    {
        "id": 33466,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $150 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $150 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 150000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT A.name, A.contact_email\nFROM Advertisers A\nJOIN Campaigns C ON A.advertiser_id = C.advertiser_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE C.status = 'active' \n  AND T.targeting_type = 'interest'\n  AND T.option_value = 'Fashion'\n  AND C.budget > 150000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 87,
        "response_text_processed": "SELECT A.name, A.contact_email FROM Advertisers A JOIN Campaigns C ON A.advertiser_id = C.advertiser_id JOIN Targeting_Options T ON C.campaign_id = T.campaign_id WHERE C.status = 'active' AND T.targeting_type = 'interest' AND T.option_value = 'Fashion' AND C.budget > 150000000"
    },
    {
        "id": 33467,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $60 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $60 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 60000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options to ON c.campaign_id = to.campaign_id\nWHERE c.status = 'active'\n  AND to.targeting_type = 'interest'\n  AND to.option_value = 'Gaming'\n  AND c.budget > 60000000;\n```",
        "prompt_token_number": 258,
        "response_token_number": 99,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options to ON c.campaign_id = to.campaign_id WHERE c.status = 'active' AND to.targeting_type = 'interest' AND to.option_value = 'Gaming' AND c.budget > 60000000"
    },
    {
        "id": 33468,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $8 billion and have been updated in the last 30000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $8 billion and have been updated in the last 30000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 8000000000 AND Creatives.updated_at BETWEEN DATE('now', '-30000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns cam ON c.campaign_id = cam.campaign_id\nWHERE cam.budget > 8000000000 AND DATEDIFF(CURDATE(), c.updated_at) <= 30000;\n```",
        "prompt_token_number": 173,
        "response_token_number": 58,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns cam ON c.campaign_id = cam.campaign_id WHERE cam.budget > 8000000000 AND DATEDIFF(CURDATE(), c.updated_at) <= 30000"
    },
    {
        "id": 33469,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $30 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fitness\" and have a budget greater than $30 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness' AND Campaigns.budget > 30000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id\nWHERE topt.targeting_type = 'Interest' AND topt.option_value = 'Fitness'\n  AND c.budget > 30000000\n  AND c.status = 'active';\n```",
        "prompt_token_number": 251,
        "response_token_number": 100,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id WHERE topt.targeting_type = 'Interest' AND topt.option_value = 'Fitness' AND c.budget > 30000000 AND c.status = 'active'"
    },
    {
        "id": 33470,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $200 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Music\" and have a budget greater than $200 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 200000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' AND t.option_value = 'Music' AND c.budget > 200000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 74,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.option_value = 'Music' AND c.budget > 200000000"
    },
    {
        "id": 33471,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $75 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $75 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 75000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Food'\n  AND c.budget > 75000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 97,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Food' AND c.budget > 75000000"
    },
    {
        "id": 33472,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $12 billion and have been updated in the last 28000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $12 billion and have been updated in the last 28000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 12000000000 AND Creatives.updated_at BETWEEN DATE('now', '-28000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 12000000000\n  AND DATEDIFF(CURDATE(), Creatives.updated_at) <= 28000;\n```",
        "prompt_token_number": 173,
        "response_token_number": 64,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 12000000000 AND DATEDIFF(CURDATE(), Creatives.updated_at) <= 28000"
    },
    {
        "id": 33473,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Politics\" and have a budget greater than $300 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Politics\" and have a budget greater than $300 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Politics' AND Campaigns.budget > 300000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Politics' \n  AND c.budget > 300000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 90,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Politics' AND c.budget > 300000000"
    },
    {
        "id": 33474,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $90 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $90 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 90000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND c.budget > 90000000 \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Sports';\n```",
        "prompt_token_number": 257,
        "response_token_number": 99,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND c.budget > 90000000 AND t.targeting_type = 'interest' AND t.option_value = 'Sports'"
    },
    {
        "id": 33475,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $15 billion and have been updated in the last 25000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $15 billion and have been updated in the last 25000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 15000000000 AND Creatives.updated_at BETWEEN DATE('now', '-25000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type \nFROM Creatives c\nJOIN Campaigns ca ON c.campaign_id = ca.campaign_id\nWHERE ca.budget > 15000000000\nAND c.updated_at > DATE_SUB(CURDATE(), INTERVAL 25000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 59,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns ca ON c.campaign_id = ca.campaign_id WHERE ca.budget > 15000000000 AND c.updated_at > DATE_SUB(CURDATE(), INTERVAL 25000 DAY)"
    },
    {
        "id": 33476,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Health\" and have a budget greater than $500 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Health\" and have a budget greater than $500 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Health' AND Campaigns.budget > 500000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'Health'\n  AND c.budget > 500000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 77,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'Health' AND c.budget > 500000000"
    },
    {
        "id": 33477,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"News\" and target users interested in \"Business\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total budget of all campaigns that have at least one ad placement on a website with a category of \"News\" and target users interested in \"Business\":",
        "output": "SELECT Campaigns.name, SUM(Campaigns.budget) AS total_budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'News' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Business' GROUP BY Campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE w.category = 'News' AND t.option_value = 'Business';\n```",
        "prompt_token_number": 255,
        "response_token_number": 76,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE w.category = 'News' AND t.option_value = 'Business'"
    },
    {
        "id": 33478,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $150 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $150 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 150000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT W.name, W.category\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE C.status = 'active' \n  AND TO.targeting_type = 'interest' \n  AND TO.option_value = 'Gaming' \n  AND C.budget > 150000000;\n```",
        "prompt_token_number": 258,
        "response_token_number": 101,
        "response_text_processed": "SELECT W.name, W.category FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE C.status = 'active' AND TO.targeting_type = 'interest' AND TO.option_value = 'Gaming' AND C.budget > 150000000"
    },
    {
        "id": 33479,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $20 billion and have been updated in the last 20000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $20 billion and have been updated in the last 20000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 20000000000 AND Creatives.updated_at BETWEEN DATE('now', '-20000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns cam ON c.campaign_id = cam.campaign_id\nWHERE cam.budget > 20000000000 AND c.updated_at >= NOW() - INTERVAL '20000 days';\n```",
        "prompt_token_number": 173,
        "response_token_number": 55,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns cam ON c.campaign_id = cam.campaign_id WHERE cam.budget > 20000000000 AND c.updated_at >= NOW() - INTERVAL '20000 days'"
    },
    {
        "id": 33480,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $30 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $30 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 30000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT A.name, A.category\nFROM Apps A\nJOIN Ad_Placements AP ON A.app_id = AP.app_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE TO.targeting_type = 'Food' AND C.budget > 30000000 AND C.status = 'active';\n```",
        "prompt_token_number": 251,
        "response_token_number": 86,
        "response_text_processed": "SELECT DISTINCT A.name, A.category FROM Apps A JOIN Ad_Placements AP ON A.app_id = AP.app_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE TO.targeting_type = 'Food' AND C.budget > 30000000 AND C.status = 'active'"
    },
    {
        "id": 33481,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $100 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $100 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options to ON c.campaign_id = to.campaign_id\nWHERE c.status = 'active'\nAND to.targeting_type = 'interest'\nAND to.option_value = 'Fashion'\nAND c.budget > 100000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 95,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options to ON c.campaign_id = to.campaign_id WHERE c.status = 'active' AND to.targeting_type = 'interest' AND to.option_value = 'Fashion' AND c.budget > 100000000"
    },
    {
        "id": 33482,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $50 billion and have been updated in the last 15000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $50 billion and have been updated in the last 15000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 50000000000 AND Creatives.updated_at BETWEEN DATE('now', '-15000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT C.name, C.type\nFROM Creatives C\nJOIN Campaigns CA ON C.campaign_id = CA.campaign_id\nWHERE CA.budget > 50000000000\n  AND DATEDIFF(CURDATE(), C.updated_at) <= 15000;\n```",
        "prompt_token_number": 173,
        "response_token_number": 60,
        "response_text_processed": "SELECT C.name, C.type FROM Creatives C JOIN Campaigns CA ON C.campaign_id = CA.campaign_id WHERE CA.budget > 50000000000 AND DATEDIFF(CURDATE(), C.updated_at) <= 15000"
    },
    {
        "id": 33483,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $40 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $40 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 40000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT Apps.name, Apps.category\nFROM Apps\nJOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id\nJOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id\nJOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id\nWHERE Campaigns.budget > 40000000\nAND Campaigns.status = 'active'\nAND Targeting_Options.targeting_type = 'Interests'\nAND Targeting_Options.option_value = 'Sports';\n```",
        "prompt_token_number": 251,
        "response_token_number": 105,
        "response_text_processed": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.budget > 40000000 AND Campaigns.status = 'active' AND Targeting_Options.targeting_type = 'Interests' AND Targeting_Options.option_value = 'Sports'"
    },
    {
        "id": 33484,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $1 billion:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $1 billion:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 1000000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' AND t.targeting_type = 'Travel' AND c.budget > 1000000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 77,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'Travel' AND c.budget > 1000000000"
    },
    {
        "id": 33485,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $80 billion and have been updated in the last 10000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $80 billion and have been updated in the last 10000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 80000000000 AND Creatives.updated_at BETWEEN DATE('now', '-10000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 80000000000\nAND Creatives.updated_at >= DATE_SUB(CURRENT_DATE, INTERVAL 10000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 63,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 80000000000 AND Creatives.updated_at >= DATE_SUB(CURRENT_DATE, INTERVAL 10000 DAY)"
    },
    {
        "id": 33486,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Books\" and have a budget greater than $20 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Books\" and have a budget greater than $20 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Books' AND Campaigns.budget > 20000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.option_value = 'Books'\n  AND c.budget > 20000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 89,
        "response_text_processed": "SELECT DISTINCT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.option_value = 'Books' AND c.budget > 20000000"
    },
    {
        "id": 33488,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $300 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $300 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 300000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Art'\n  AND c.budget > 300000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 98,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Art' AND c.budget > 300000000"
    },
    {
        "id": 33489,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $100 billion and have been updated in the last 5000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $100 billion and have been updated in the last 5000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 100000000000 AND Creatives.updated_at BETWEEN DATE('now', '-5000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 100000000000 \nAND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 5000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 63,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 100000000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 5000 DAY)"
    },
    {
        "id": 33490,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $10 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $10 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 10000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest' AND t.option_value = 'Fashion' AND c.status = 'active' AND c.budget > 10000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 95,
        "response_text_processed": "SELECT DISTINCT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Fashion' AND c.status = 'active' AND c.budget > 10000000"
    },
    {
        "id": 33491,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $200 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $200 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 200000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND c.budget > 200000000\n  AND t.option_value = 'Food';\n```",
        "prompt_token_number": 193,
        "response_token_number": 76,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND c.budget > 200000000 AND t.option_value = 'Food'"
    },
    {
        "id": 33492,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $50 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $50 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND c.budget > 50000000\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Music';\n```",
        "prompt_token_number": 257,
        "response_token_number": 98,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND c.budget > 50000000 AND t.targeting_type = 'interest' AND t.option_value = 'Music'"
    },
    {
        "id": 33493,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $200 billion and have been updated in the last 20000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $200 billion and have been updated in the last 20000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 200000000000 AND Creatives.updated_at BETWEEN DATE('now', '-20000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 200000000000 AND DATEDIFF(NOW(), Creatives.updated_at) <= 20000;\n```",
        "prompt_token_number": 173,
        "response_token_number": 61,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 200000000000 AND DATEDIFF(NOW(), Creatives.updated_at) <= 20000"
    },
    {
        "id": 33495,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Sports\" and have a budget greater than $50 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Sports\" and have a budget greater than $50 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND c.budget > 50000000\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Sports';\n```",
        "prompt_token_number": 193,
        "response_token_number": 86,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND c.budget > 50000000 AND t.targeting_type = 'interest' AND t.option_value = 'Sports'"
    },
    {
        "id": 33496,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $20 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Travel\" and have a budget greater than $20 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 20000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT W.name, W.category\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE C.status = 'active' \n  AND TO.targeting_type = 'interest' \n  AND TO.option_value = 'Travel' \n  AND C.budget > 20000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 101,
        "response_text_processed": "SELECT DISTINCT W.name, W.category FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE C.status = 'active' AND TO.targeting_type = 'interest' AND TO.option_value = 'Travel' AND C.budget > 20000000"
    },
    {
        "id": 33497,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $500 billion and have been updated in the last 10000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $500 billion and have been updated in the last 10000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 500000000000 AND Creatives.updated_at BETWEEN DATE('now', '-10000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns ca ON c.campaign_id = ca.campaign_id\nWHERE ca.budget > 500000000000 AND c.updated_at >= NOW() - INTERVAL '10000 days';\n```\n",
        "prompt_token_number": 173,
        "response_token_number": 56,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns ca ON c.campaign_id = ca.campaign_id WHERE ca.budget > 500000000000 AND c.updated_at >= NOW() - INTERVAL '10000 days'"
    },
    {
        "id": 33498,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $2 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $2 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 2000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE t.targeting_type = 'interest' AND t.option_value = 'Gaming'\n  AND c.budget > 2000000\n  AND c.status = 'active';\n```",
        "prompt_token_number": 252,
        "response_token_number": 97,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE t.targeting_type = 'interest' AND t.option_value = 'Gaming' AND c.budget > 2000000 AND c.status = 'active'"
    },
    {
        "id": 33499,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $100 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Fashion\" and have a budget greater than $100 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Fashion'\n  AND c.budget > 100000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 86,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Fashion' AND c.budget > 100000000"
    },
    {
        "id": 33500,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $100 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $100 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 100000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\nAND t.targeting_type = 'interest'\nAND t.option_value = 'Music'\nAND c.budget > 100000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 95,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Music' AND c.budget > 100000000"
    },
    {
        "id": 33501,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1 trillion and have been updated in the last 5000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $1 trillion and have been updated in the last 5000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 1000000000000 AND Creatives.updated_at BETWEEN DATE('now', '-5000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type \nFROM Creatives c \nJOIN Campaigns ca ON c.campaign_id = ca.campaign_id \nWHERE ca.budget > 1000000000000 AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 5000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 59,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns ca ON c.campaign_id = ca.campaign_id WHERE ca.budget > 1000000000000 AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 5000 DAY)"
    },
    {
        "id": 33503,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $50 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $50 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Food'\n  AND c.budget > 50000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 87,
        "response_text_processed": "SELECT DISTINCT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Food' AND c.budget > 50000000"
    },
    {
        "id": 33504,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $50 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Movies\" and have a budget greater than $50 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies' AND Campaigns.budget > 50000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id\nWHERE c.status = 'active'\n  AND topt.targeting_type = 'interest'\n  AND topt.option_value = 'Movies'\n  AND c.budget > 50000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 101,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id WHERE c.status = 'active' AND topt.targeting_type = 'interest' AND topt.option_value = 'Movies' AND c.budget > 50000000"
    },
    {
        "id": 33505,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $500 billion and have been updated in the last 1000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $500 billion and have been updated in the last 1000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 500000000000 AND Creatives.updated_at BETWEEN DATE('now', '-1000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.type\nFROM Creatives c\nJOIN Campaigns cp ON c.campaign_id = cp.campaign_id\nWHERE cp.budget > 500000000000 AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 1000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 58,
        "response_text_processed": "SELECT c.name, c.type FROM Creatives c JOIN Campaigns cp ON c.campaign_id = cp.campaign_id WHERE cp.budget > 500000000000 AND c.updated_at >= DATE_SUB(CURDATE(), INTERVAL 1000 DAY)"
    },
    {
        "id": 33507,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $5 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 5000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email \nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.option_value = 'Travel' \n  AND c.budget > 5000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 78,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.option_value = 'Travel' AND c.budget > 5000000"
    },
    {
        "id": 33509,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $10 billion and have been updated in the last 2000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $10 billion and have been updated in the last 2000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 10000000000 AND Creatives.updated_at BETWEEN DATE('now', '-2000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT cr.name, cr.type\nFROM Creatives cr\nJOIN Campaigns ca ON cr.campaign_id = ca.campaign_id\nWHERE ca.budget > 10000000000 AND cr.updated_at >= DATE_SUB(CURDATE(), INTERVAL 2000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 58,
        "response_text_processed": "SELECT cr.name, cr.type FROM Creatives cr JOIN Campaigns ca ON cr.campaign_id = ca.campaign_id WHERE ca.budget > 10000000000 AND cr.updated_at >= DATE_SUB(CURDATE(), INTERVAL 2000 DAY)"
    },
    {
        "id": 33510,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $2 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Music\" and have a budget greater than $2 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Music' AND Campaigns.budget > 2000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT A.name, A.category\nFROM Apps A\nJOIN Ad_Placements AP ON A.app_id = AP.app_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE C.status = 'active'\nAND TO.option_value = 'Music'\nAND C.budget > 2000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 86,
        "response_text_processed": "SELECT DISTINCT A.name, A.category FROM Apps A JOIN Ad_Placements AP ON A.app_id = AP.app_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE C.status = 'active' AND TO.option_value = 'Music' AND C.budget > 2000000"
    },
    {
        "id": 33511,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Finance\" and have a budget greater than $20 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Finance\" and have a budget greater than $20 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Finance' AND Campaigns.budget > 20000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Finance'\n  AND c.budget > 20000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 86,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Finance' AND c.budget > 20000000"
    },
    {
        "id": 33512,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $15 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Gaming\" and have a budget greater than $15 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Gaming' AND Campaigns.budget > 15000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id\nWHERE c.status = 'active'\nAND topt.targeting_type = 'interest'\nAND topt.option_value = 'Gaming'\nAND c.budget > 15000000;\n```",
        "prompt_token_number": 258,
        "response_token_number": 100,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id WHERE c.status = 'active' AND topt.targeting_type = 'interest' AND topt.option_value = 'Gaming' AND c.budget > 15000000"
    },
    {
        "id": 33513,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $50 billion and have been updated in the last 5000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $50 billion and have been updated in the last 5000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 50000000000 AND Creatives.updated_at BETWEEN DATE('now', '-5000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT C.name, C.type\nFROM Creatives C\nJOIN Campaigns CA ON C.campaign_id = CA.campaign_id\nWHERE CA.budget > 50000000000\n  AND C.updated_at >= CURRENT_DATE - INTERVAL '5000' DAY;\n```",
        "prompt_token_number": 173,
        "response_token_number": 58,
        "response_text_processed": "SELECT C.name, C.type FROM Creatives C JOIN Campaigns CA ON C.campaign_id = CA.campaign_id WHERE CA.budget > 50000000000 AND C.updated_at >= CURRENT_DATE - INTERVAL '5000' DAY"
    },
    {
        "id": 33514,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $1 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $1 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 1000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT A.name, A.category\nFROM Apps A\nJOIN Ad_Placements AP ON A.app_id = AP.app_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE TO.targeting_type = 'Interest' \n  AND TO.option_value = 'Food' \n  AND C.status = 'active' \n  AND C.budget > 1000000;\n```",
        "prompt_token_number": 251,
        "response_token_number": 101,
        "response_text_processed": "SELECT DISTINCT A.name, A.category FROM Apps A JOIN Ad_Placements AP ON A.app_id = AP.app_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE TO.targeting_type = 'Interest' AND TO.option_value = 'Food' AND C.status = 'active' AND C.budget > 1000000"
    },
    {
        "id": 33515,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $10 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Technology\" and have a budget greater than $10 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 10000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT A.name, A.contact_email\nFROM Advertisers A\nJOIN Campaigns C ON A.advertiser_id = C.advertiser_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE C.status = 'active'\n  AND T.option_value = 'Technology'\n  AND C.budget > 10000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 77,
        "response_text_processed": "SELECT DISTINCT A.name, A.contact_email FROM Advertisers A JOIN Campaigns C ON A.advertiser_id = C.advertiser_id JOIN Targeting_Options T ON C.campaign_id = T.campaign_id WHERE C.status = 'active' AND T.option_value = 'Technology' AND C.budget > 10000000"
    },
    {
        "id": 33517,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $20 billion and have been updated in the last 3000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $20 billion and have been updated in the last 3000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 20000000000 AND Creatives.updated_at BETWEEN DATE('now', '-3000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 20000000000 \n  AND Creatives.updated_at > DATE_SUB(CURDATE(), INTERVAL 3000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 64,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 20000000000 AND Creatives.updated_at > DATE_SUB(CURDATE(), INTERVAL 3000 DAY)"
    },
    {
        "id": 33518,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Sports\" and have a budget greater than $15 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Sports\" and have a budget greater than $15 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 15000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT A.name, A.contact_email\nFROM Advertisers A\nJOIN Campaigns C ON A.advertiser_id = C.advertiser_id\nJOIN Targeting_Options T ON C.campaign_id = T.campaign_id\nWHERE C.status = 'active'\n  AND C.budget > 15000000\n  AND T.targeting_type = 'interest'\n  AND T.option_value = 'Sports';\n```",
        "prompt_token_number": 193,
        "response_token_number": 87,
        "response_text_processed": "SELECT DISTINCT A.name, A.contact_email FROM Advertisers A JOIN Campaigns C ON A.advertiser_id = C.advertiser_id JOIN Targeting_Options T ON C.campaign_id = T.campaign_id WHERE C.status = 'active' AND C.budget > 15000000 AND T.targeting_type = 'interest' AND T.option_value = 'Sports'"
    },
    {
        "id": 33519,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $2 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Fashion\" and have a budget greater than $2 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fashion' AND Campaigns.budget > 2000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'interest' \n  AND t.option_value = 'Fashion' \n  AND c.budget > 2000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 101,
        "response_text_processed": "SELECT DISTINCT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Fashion' AND c.budget > 2000000"
    },
    {
        "id": 33520,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $30 billion and have been updated in the last 1000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $30 billion and have been updated in the last 1000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 30000000000 AND Creatives.updated_at BETWEEN DATE('now', '-1000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Creatives\nJOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id\nWHERE Campaigns.budget > 30000000000\n  AND DATEDIFF(CURDATE(), Creatives.updated_at) <= 1000;\n```",
        "prompt_token_number": 173,
        "response_token_number": 64,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 30000000000 AND DATEDIFF(CURDATE(), Creatives.updated_at) <= 1000"
    },
    {
        "id": 33521,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $10 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Food\" and have a budget greater than $10 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 10000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Food'\n  AND c.budget > 10000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 87,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Food' AND c.budget > 10000000"
    },
    {
        "id": 33522,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Technology\" and have a budget greater than $5 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Technology' AND Campaigns.budget > 5000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT W.name, W.category\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE C.status = 'active'\nAND TO.targeting_type = 'interest'\nAND TO.option_value = 'Technology'\nAND C.budget > 5000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 95,
        "response_text_processed": "SELECT DISTINCT W.name, W.category FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE C.status = 'active' AND TO.targeting_type = 'interest' AND TO.option_value = 'Technology' AND C.budget > 5000000"
    },
    {
        "id": 33523,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $50 billion and have been updated in the last 500 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $50 billion and have been updated in the last 500 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 50000000000 AND Creatives.updated_at BETWEEN DATE('now', '-500 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Creatives.name, Creatives.type\nFROM Campaigns\nJOIN Creatives ON Campaigns.campaign_id = Creatives.campaign_id\nWHERE Campaigns.budget > 50000000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 500 DAY);\n```",
        "prompt_token_number": 172,
        "response_token_number": 61,
        "response_text_processed": "SELECT Creatives.name, Creatives.type FROM Campaigns JOIN Creatives ON Campaigns.campaign_id = Creatives.campaign_id WHERE Campaigns.budget > 50000000000 AND Creatives.updated_at >= DATE_SUB(CURDATE(), INTERVAL 500 DAY)"
    },
    {
        "id": 33524,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $3 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Art\" and have a budget greater than $3 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Art' AND Campaigns.budget > 3000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT W.name, W.category\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE TO.targeting_type = 'Interest' \n  AND TO.option_value = 'Art'\n  AND C.status = 'active'\n  AND C.budget > 3000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 99,
        "response_text_processed": "SELECT DISTINCT W.name, W.category FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE TO.targeting_type = 'Interest' AND TO.option_value = 'Art' AND C.status = 'active' AND C.budget > 3000000"
    },
    {
        "id": 33525,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Apps': ['name', 'platform', 'downloads', 'category', 'app_id', 'updated_at'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $2.5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all apps that have at least one active ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $2.5 million:",
        "output": "SELECT Apps.name, Apps.category FROM Apps JOIN Ad_Placements ON Apps.app_id = Ad_Placements.app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 2500000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Apps": [
                "name",
                "platform",
                "downloads",
                "category",
                "app_id",
                "updated_at"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.category\nFROM Apps a\nJOIN Ad_Placements ap ON a.app_id = ap.app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\n  AND c.budget > 2500000\n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Sports';\n```",
        "prompt_token_number": 253,
        "response_token_number": 97,
        "response_text_processed": "SELECT a.name, a.category FROM Apps a JOIN Ad_Placements ap ON a.app_id = ap.app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND c.budget > 2500000 AND t.targeting_type = 'interest' AND t.option_value = 'Sports'"
    },
    {
        "id": 33526,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Advertisers': ['name', 'contact_phone', 'contact_email', 'advertiser_id', 'AdvertiserID'], 'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value']} and \n# the user question: Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $15 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all advertisers who have at least one active campaign targeting users interested in \"Travel\" and have a budget greater than $15 million:",
        "output": "SELECT Advertisers.name, Advertisers.contact_email FROM Advertisers JOIN Campaigns ON Advertisers.advertiser_id = Campaigns.advertiser_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 15000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Advertisers": [
                "name",
                "contact_phone",
                "contact_email",
                "advertiser_id",
                "AdvertiserID"
            ],
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ]
        },
        "response_text": "```sql\nSELECT a.name, a.contact_email\nFROM Advertisers a\nJOIN Campaigns c ON a.advertiser_id = c.advertiser_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active'\nAND t.targeting_type = 'Travel'\nAND c.budget > 15000000;\n```",
        "prompt_token_number": 193,
        "response_token_number": 75,
        "response_text_processed": "SELECT a.name, a.contact_email FROM Advertisers a JOIN Campaigns c ON a.advertiser_id = c.advertiser_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'Travel' AND c.budget > 15000000"
    },
    {
        "id": 33527,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $4 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one active ad placement for a campaign targeting users interested in \"Food\" and have a budget greater than $4 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Food' AND Campaigns.budget > 4000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT w.name, w.category\nFROM Websites w\nJOIN Ad_Placements ap ON w.website_id = ap.website_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.status = 'active' \n  AND t.targeting_type = 'interest'\n  AND t.option_value = 'Food'\n  AND c.budget > 4000000;\n```",
        "prompt_token_number": 257,
        "response_token_number": 98,
        "response_text_processed": "SELECT w.name, w.category FROM Websites w JOIN Ad_Placements ap ON w.website_id = ap.website_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.status = 'active' AND t.targeting_type = 'interest' AND t.option_value = 'Food' AND c.budget > 4000000"
    },
    {
        "id": 33528,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Creatives': ['name', 'campaign_id', 'created_at', 'type', 'updated_at']} and \n# the user question: Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $20 billion and have been updated in the last 1000 days:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and type of all creatives that belong to campaigns with a budget greater than $20 billion and have been updated in the last 1000 days:",
        "output": "SELECT Creatives.name, Creatives.type FROM Creatives JOIN Campaigns ON Creatives.campaign_id = Campaigns.campaign_id WHERE Campaigns.budget > 20000000000 AND Creatives.updated_at BETWEEN DATE('now', '-1000 days') AND DATE('now');",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Creatives": [
                "name",
                "campaign_id",
                "created_at",
                "type",
                "updated_at"
            ]
        },
        "response_text": "```sql\nSELECT Cr.name, Cr.type\nFROM Creatives Cr\nJOIN Campaigns Ca ON Cr.campaign_id = Ca.campaign_id\nWHERE Ca.budget > 20000000000 AND Cr.updated_at >= DATE_SUB(CURDATE(), INTERVAL 1000 DAY);\n```",
        "prompt_token_number": 173,
        "response_token_number": 58,
        "response_text_processed": "SELECT Cr.name, Cr.type FROM Creatives Cr JOIN Campaigns Ca ON Cr.campaign_id = Ca.campaign_id WHERE Ca.budget > 20000000000 AND Cr.updated_at >= DATE_SUB(CURDATE(), INTERVAL 1000 DAY)"
    },
    {
        "id": 33529,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Fitness\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and budget of all campaigns that have at least one ad placement on a website with a category of \"Sports\" and target users interested in \"Fitness\":",
        "output": "SELECT Campaigns.name, Campaigns.budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Websites.category = 'Sports' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Fitness';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id\nWHERE w.category = 'Sports' AND topt.option_value = 'Fitness'\nGROUP BY c.name, c.budget;\n```",
        "prompt_token_number": 254,
        "response_token_number": 88,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id WHERE w.category = 'Sports' AND topt.option_value = 'Fitness' GROUP BY c.name, c.budget"
    },
    {
        "id": 33530,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Mobile_Apps': ['mobile_app_id', 'category', 'name', 'title', 'downloads', 'available_on_apple_app_store', 'available_on_google_play', 'available_on_ios', 'available_on_android']} and \n# the user question: Retrieve the name and budget of all campaigns that have at least one ad placement on a mobile app with a category of \"Entertainment\" and target users interested in \"Movies\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and budget of all campaigns that have at least one ad placement on a mobile app with a category of \"Entertainment\" and target users interested in \"Movies\":",
        "output": "SELECT Campaigns.name, Campaigns.budget FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Mobile_Apps ON Ad_Placements.mobile_app_id = Mobile_Apps.mobile_app_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Mobile_Apps.category = 'Entertainment' AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Movies';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Mobile_Apps": [
                "mobile_app_id",
                "category",
                "name",
                "title",
                "downloads",
                "available_on_apple_app_store",
                "available_on_google_play",
                "available_on_ios",
                "available_on_android"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Mobile_Apps ma ON ap.mobile_app_id = ma.mobile_app_id\nJOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id\nWHERE ma.category = 'Entertainment' AND topt.option_value = 'Movies';\n```",
        "prompt_token_number": 273,
        "response_token_number": 84,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Mobile_Apps ma ON ap.mobile_app_id = ma.mobile_app_id JOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id WHERE ma.category = 'Entertainment' AND topt.option_value = 'Movies'"
    },
    {
        "id": 33531,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and cost per click of all ad placements that belong to campaigns with a budget greater than $5 million and have a minimum target age of 25:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and cost per click of all ad placements that belong to campaigns with a budget greater than $5 million and have a minimum target age of 25:",
        "output": "SELECT Ad_Placements.name, Ad_Placements.cost_per_click FROM Ad_Placements JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Campaigns.budget > 5000000 AND Targeting_Options.targeting_type = 'age' AND Targeting_Options.option_value >= 25;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT ap.name, ap.cost_per_click\nFROM Ad_Placements ap\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id\nWHERE c.budget > 5000000 AND topt.targeting_type = 'age' AND topt.option_value >= 25;\n```",
        "prompt_token_number": 225,
        "response_token_number": 80,
        "response_text_processed": "SELECT ap.name, ap.cost_per_click FROM Ad_Placements ap JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options topt ON c.campaign_id = topt.campaign_id WHERE c.budget > 5000000 AND topt.targeting_type = 'age' AND topt.option_value >= 25"
    },
    {
        "id": 33532,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have a budget greater than $1 million and are targeting users with an interest in \"Sports\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have a budget greater than $1 million and are targeting users with an interest in \"Sports\":",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.budget > 1000000 AND Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.budget\nFROM Campaigns c\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.budget > 1000000 AND t.targeting_type = 'interest' AND t.option_value = 'Sports';\n```",
        "prompt_token_number": 242,
        "response_token_number": 59,
        "response_text_processed": "SELECT c.name, c.budget FROM Campaigns c JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.budget > 1000000 AND t.targeting_type = 'interest' AND t.option_value = 'Sports'"
    },
    {
        "id": 33533,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Mobile_Apps': ['mobile_app_id', 'category', 'name', 'title', 'downloads', 'available_on_apple_app_store', 'available_on_google_play', 'available_on_ios', 'available_on_android']} and \n# the user question: Retrieve the name and category of all mobile apps that have at least one ad placement for a campaign with a budget greater than $5 million and target users with an interest in \"Travel\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all mobile apps that have at least one ad placement for a campaign with a budget greater than $5 million and target users with an interest in \"Travel\":",
        "output": "SELECT Mobile_Apps.name, Mobile_Apps.category FROM Mobile_Apps JOIN Ad_Placements ON Mobile_Apps.mobile_app_id = Ad_Placements.mobile_app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Travel' AND Campaigns.budget > 5000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Mobile_Apps": [
                "mobile_app_id",
                "category",
                "name",
                "title",
                "downloads",
                "available_on_apple_app_store",
                "available_on_google_play",
                "available_on_ios",
                "available_on_android"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT m.name, m.category\nFROM Mobile_Apps m\nJOIN Ad_Placements ap ON m.mobile_app_id = ap.mobile_app_id\nJOIN Campaigns c ON ap.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.budget > 5000000 AND t.targeting_type = 'Interest' AND t.option_value = 'Travel';\n```",
        "prompt_token_number": 275,
        "response_token_number": 91,
        "response_text_processed": "SELECT DISTINCT m.name, m.category FROM Mobile_Apps m JOIN Ad_Placements ap ON m.mobile_app_id = ap.mobile_app_id JOIN Campaigns c ON ap.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.budget > 5000000 AND t.targeting_type = 'Interest' AND t.option_value = 'Travel'"
    },
    {
        "id": 33534,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have a budget greater than $10 million and are targeting users with an age between 18 and 24:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have a budget greater than $10 million and are targeting users with an age between 18 and 24:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.budget > 10000000 AND Targeting_Options.targeting_type = 'age' AND Targeting_Options.option_value BETWEEN 18 AND 24 GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, (c.total_spent+c.budget) AS total_cost\nFROM Campaigns c\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.budget > 10000000\nAND t.targeting_type = 'age'\nAND t.option_value BETWEEN '18' AND '24';\n```",
        "prompt_token_number": 245,
        "response_token_number": 73,
        "response_text_processed": "SELECT c.name, (c.total_spent+c.budget) AS total_cost FROM Campaigns c JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.budget > 10000000 AND t.targeting_type = 'age' AND t.option_value BETWEEN '18' AND '24'"
    },
    {
        "id": 33535,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Mobile_Apps': ['mobile_app_id', 'category', 'name', 'title', 'downloads', 'available_on_apple_app_store', 'available_on_google_play', 'available_on_ios', 'available_on_android'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have a budget greater than $1 million and have an ad placement on a mobile app with a category of \"Entertainment\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have a budget greater than $1 million and have an ad placement on a mobile app with a category of \"Entertainment\":",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Mobile_Apps ON Ad_Placements.mobile_app_id = Mobile_Apps.mobile_app_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.budget > 1000000 AND Mobile_Apps.category = 'Entertainment' GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Mobile_Apps": [
                "mobile_app_id",
                "category",
                "name",
                "title",
                "downloads",
                "available_on_apple_app_store",
                "available_on_google_play",
                "available_on_ios",
                "available_on_android"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Mobile_Apps ma ON ap.mobile_app_id = ma.mobile_app_id\nWHERE c.budget > 1000000 \n  AND ma.category = 'Entertainment';\n```",
        "prompt_token_number": 276,
        "response_token_number": 69,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Mobile_Apps ma ON ap.mobile_app_id = ma.mobile_app_id WHERE c.budget > 1000000 AND ma.category = 'Entertainment'"
    },
    {
        "id": 33536,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have a budget greater than $10 million and are targeting users in the United States:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have a budget greater than $10 million and are targeting users in the United States:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.budget > 10000000 AND Targeting_Options.targeting_type = 'location' AND Targeting_Options.option_value = 'United States' GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, (c.total_spent + SUM(ap.cost_per_click * ats.clicks + ap.cost_per_impression * ats.impressions)) AS total_cost\nFROM Campaigns c\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nJOIN Ad_Statistics ats ON c.campaign_id = ats.ad_placement_id\nJOIN Ad_Placements ap ON ats.ad_placement_id = ap.ad_placement_id\nWHERE c.budget > 10000000 AND t.option_value = 'United States'\nGROUP BY c.name, c.total_spent;\n```",
        "prompt_token_number": 240,
        "response_token_number": 124,
        "response_text_processed": "SELECT c.name, (c.total_spent + SUM(ap.cost_per_click * ats.clicks + ap.cost_per_impression * ats.impressions)) AS total_cost FROM Campaigns c JOIN Targeting_Options t ON c.campaign_id = t.campaign_id JOIN Ad_Statistics ats ON c.campaign_id = ats.ad_placement_id JOIN Ad_Placements ap ON ats.ad_placement_id = ap.ad_placement_id WHERE c.budget > 10000000 AND t.option_value = 'United States' GROUP BY c.name, c.total_spent"
    },
    {
        "id": 33537,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id']} and \n# the user question: Retrieve the name and category of all websites that have at least one ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $3 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all websites that have at least one ad placement for a campaign targeting users interested in \"Sports\" and have a budget greater than $3 million:",
        "output": "SELECT Websites.name, Websites.category FROM Websites JOIN Ad_Placements ON Websites.website_id = Ad_Placements.website_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'interests' AND Targeting_Options.option_value = 'Sports' AND Campaigns.budget > 3000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT W.name, W.category\nFROM Websites W\nJOIN Ad_Placements AP ON W.website_id = AP.website_id\nJOIN Campaigns C ON AP.campaign_id = C.campaign_id\nJOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id\nWHERE TO.targeting_type = 'interest' \nAND TO.option_value = 'Sports'\nAND C.budget > 3000000;\n```",
        "prompt_token_number": 256,
        "response_token_number": 89,
        "response_text_processed": "SELECT DISTINCT W.name, W.category FROM Websites W JOIN Ad_Placements AP ON W.website_id = AP.website_id JOIN Campaigns C ON AP.campaign_id = C.campaign_id JOIN Targeting_Options TO ON C.campaign_id = TO.campaign_id WHERE TO.targeting_type = 'interest' AND TO.option_value = 'Sports' AND C.budget > 3000000"
    },
    {
        "id": 33538,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have a budget greater than $5 million and have at least one ad placement on a website with a category of \"News\":,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have a budget greater than $5 million and have at least one ad placement on a website with a category of \"News\":",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.budget > 5000000 AND Websites.category = 'News' GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent AS total_cost\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nWHERE c.budget > 5000000\nAND w.category = 'News';\n```",
        "prompt_token_number": 259,
        "response_token_number": 66,
        "response_text_processed": "SELECT c.name, c.total_spent AS total_cost FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id WHERE c.budget > 5000000 AND w.category = 'News'"
    },
    {
        "id": 33539,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Targeting_Options': ['targeting_type', 'campaign_id', 'option_value'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Mobile_Apps': ['mobile_app_id', 'category', 'name', 'title', 'downloads', 'available_on_apple_app_store', 'available_on_google_play', 'available_on_ios', 'available_on_android']} and \n# the user question: Retrieve the name and category of all mobile apps that have at least one ad placement for a campaign with a budget greater than $8 million and target users in the United States:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and category of all mobile apps that have at least one ad placement for a campaign with a budget greater than $8 million and target users in the United States:",
        "output": "SELECT Mobile_Apps.name, Mobile_Apps.category FROM Mobile_Apps JOIN Ad_Placements ON Mobile_Apps.mobile_app_id = Ad_Placements.mobile_app_id JOIN Campaigns ON Ad_Placements.campaign_id = Campaigns.campaign_id JOIN Targeting_Options ON Campaigns.campaign_id = Targeting_Options.campaign_id WHERE Targeting_Options.targeting_type = 'location' AND Targeting_Options.option_value = 'United States' AND Campaigns.budget > 8000000 AND Campaigns.status = 'active';",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Targeting_Options": [
                "targeting_type",
                "campaign_id",
                "option_value"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Mobile_Apps": [
                "mobile_app_id",
                "category",
                "name",
                "title",
                "downloads",
                "available_on_apple_app_store",
                "available_on_google_play",
                "available_on_ios",
                "available_on_android"
            ]
        },
        "response_text": "```sql\nSELECT m.name, m.category\nFROM Mobile_Apps m\nJOIN Ad_Placements a ON m.mobile_app_id = a.mobile_app_id\nJOIN Campaigns c ON a.campaign_id = c.campaign_id\nJOIN Targeting_Options t ON c.campaign_id = t.campaign_id\nWHERE c.budget > 8000000\n  AND t.targeting_type = 'Country'\n  AND t.option_value = 'United States';\n```",
        "prompt_token_number": 273,
        "response_token_number": 94,
        "response_text_processed": "SELECT m.name, m.category FROM Mobile_Apps m JOIN Ad_Placements a ON m.mobile_app_id = a.mobile_app_id JOIN Campaigns c ON a.campaign_id = c.campaign_id JOIN Targeting_Options t ON c.campaign_id = t.campaign_id WHERE c.budget > 8000000 AND t.targeting_type = 'Country' AND t.option_value = 'United States'"
    },
    {
        "id": 33541,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and have a daily budget greater than $10,000:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and have a daily budget greater than $10,000:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.daily_budget > 10000 AND Websites.category = 'Fashion' GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nWHERE w.category = 'Fashion' AND c.daily_budget > 10000\nGROUP BY c.name, c.total_spent\nHAVING COUNT(ap.ad_placement_id) > 0;\n```",
        "prompt_token_number": 262,
        "response_token_number": 84,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id WHERE w.category = 'Fashion' AND c.daily_budget > 10000 GROUP BY c.name, c.total_spent HAVING COUNT(ap.ad_placement_id) > 0"
    },
    {
        "id": 33551,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Mobile_Apps': ['mobile_app_id', 'category', 'name', 'title', 'downloads', 'available_on_apple_app_store', 'available_on_google_play', 'available_on_ios', 'available_on_android'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement for a mobile app with a category of \"Shopping\" and have a daily budget greater than $2,000:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement for a mobile app with a category of \"Shopping\" and have a daily budget greater than $2,000:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Mobile_Apps ON Ad_Placements.mobile_app_id = Mobile_Apps.mobile_app_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.daily_budget > 2000 AND Mobile_Apps.category = 'Shopping' GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Mobile_Apps": [
                "mobile_app_id",
                "category",
                "name",
                "title",
                "downloads",
                "available_on_apple_app_store",
                "available_on_google_play",
                "available_on_ios",
                "available_on_android"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT C.name, (A.clicks * P.cost_per_click + A.impressions * P.cost_per_impression) AS total_cost\nFROM Campaigns C\nJOIN Ad_Placements P ON C.campaign_id = P.campaign_id\nJOIN Mobile_Apps M ON P.mobile_app_id = M.mobile_app_id\nJOIN Ad_Statistics A ON P.ad_placement_id = A.ad_placement_id\nWHERE M.category = 'Shopping' AND C.daily_budget > 2000\nGROUP BY C.name;\n```",
        "prompt_token_number": 280,
        "response_token_number": 106,
        "response_text_processed": "SELECT C.name, (A.clicks * P.cost_per_click + A.impressions * P.cost_per_impression) AS total_cost FROM Campaigns C JOIN Ad_Placements P ON C.campaign_id = P.campaign_id JOIN Mobile_Apps M ON P.mobile_app_id = M.mobile_app_id JOIN Ad_Statistics A ON P.ad_placement_id = A.ad_placement_id WHERE M.category = 'Shopping' AND C.daily_budget > 2000 GROUP BY C.name"
    },
    {
        "id": 33553,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Education\" and have spent more than $2 million on advertising:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Education\" and have spent more than $2 million on advertising:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 2000000 AND Websites.category = 'Education' GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nWHERE w.category = 'Education'\n  AND c.total_spent > 2000000\nGROUP BY c.name, c.total_spent;\n```",
        "prompt_token_number": 261,
        "response_token_number": 75,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id WHERE w.category = 'Education' AND c.total_spent > 2000000 GROUP BY c.name, c.total_spent"
    },
    {
        "id": 33554,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain that contains the word \"travel\" and have spent more than $500,000 on advertising:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain that contains the word \"travel\" and have spent more than $500,000 on advertising:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 500000 AND Websites.domain LIKE '%travel%' GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nWHERE w.domain LIKE '%travel%'\nAND c.total_spent > 500000\nGROUP BY c.name, c.total_spent;\n```",
        "prompt_token_number": 265,
        "response_token_number": 73,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id WHERE w.domain LIKE '%travel%' AND c.total_spent > 500000 GROUP BY c.name, c.total_spent"
    },
    {
        "id": 33557,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain that contains the word \"shopping\" and have spent more than $1 million on advertising:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain that contains the word \"shopping\" and have spent more than $1 million on advertising:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 1000000 AND Websites.domain LIKE '%shopping%' GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nWHERE w.domain LIKE '%shopping%' AND c.total_spent > 1000000\nGROUP BY c.name, c.total_spent;\n```",
        "prompt_token_number": 264,
        "response_token_number": 74,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id WHERE w.domain LIKE '%shopping%' AND c.total_spent > 1000000 GROUP BY c.name, c.total_spent"
    },
    {
        "id": 33560,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain that contains the word \"tech\" and have spent more than $1 million on advertising:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain that contains the word \"tech\" and have spent more than $1 million on advertising:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 1000000 AND Websites.domain LIKE '%tech%' GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nWHERE w.domain LIKE '%tech%'\nAND c.total_spent > 1000000;\n```",
        "prompt_token_number": 264,
        "response_token_number": 64,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id WHERE w.domain LIKE '%tech%' AND c.total_spent > 1000000"
    },
    {
        "id": 33564,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain ending in \".com\" and have spent more than $500,000 on advertising:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain ending in \".com\" and have spent more than $500,000 on advertising:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 500000 AND Websites.domain LIKE '%.com' GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nWHERE w.domain LIKE '%.com'\nAND c.total_spent > 500000\nGROUP BY c.name, c.total_spent;\n```",
        "prompt_token_number": 263,
        "response_token_number": 74,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id WHERE w.domain LIKE '%.com' AND c.total_spent > 500000 GROUP BY c.name, c.total_spent"
    },
    {
        "id": 33566,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Travel\" and have spent more than $1 million on advertising in the past month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Travel\" and have spent more than $1 million on advertising in the past month:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 1000000 AND Websites.category = 'Travel' AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent \nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nWHERE w.category = 'Travel'\nAND c.total_spent > 1000000\nAND c.end_date >= DATE_SUB(NOW(), INTERVAL 1 MONTH);\n```",
        "prompt_token_number": 265,
        "response_token_number": 79,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id WHERE w.category = 'Travel' AND c.total_spent > 1000000 AND c.end_date >= DATE_SUB(NOW(), INTERVAL 1 MONTH)"
    },
    {
        "id": 33567,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and have spent more than $500,000 on advertising in the past month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Fashion\" and have spent more than $500,000 on advertising in the past month:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 500000 AND Websites.category = 'Fashion' AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nWHERE w.category = 'Fashion'\n  AND c.total_spent > 500000\n  AND c.end_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY c.name, c.total_spent;\n```",
        "prompt_token_number": 266,
        "response_token_number": 91,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id WHERE w.category = 'Fashion' AND c.total_spent > 500000 AND c.end_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY c.name, c.total_spent"
    },
    {
        "id": 33569,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Technology\" and have spent more than $2 million on advertising in the past month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Technology\" and have spent more than $2 million on advertising in the past month:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 2000000 AND Websites.category = 'Technology' AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Ad_Statistics ads ON ap.ad_placement_id = ads.ad_placement_id\nWHERE w.category = 'Technology' \n  AND c.total_spent > 2000000\n  AND ads.date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY c.campaign_id;\n```",
        "prompt_token_number": 265,
        "response_token_number": 105,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Ad_Statistics ads ON ap.ad_placement_id = ads.ad_placement_id WHERE w.category = 'Technology' AND c.total_spent > 2000000 AND ads.date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY c.campaign_id"
    },
    {
        "id": 33572,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain containing the string \"finance\" and have spent more than $2 million on advertising in the past month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a domain containing the string \"finance\" and have spent more than $2 million on advertising in the past month:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 2000000 AND Websites.domain LIKE '%finance%' AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Ad_Statistics ast ON ap.ad_placement_id = ast.ad_placement_id\nWHERE w.domain LIKE '%finance%'\nAND ast.date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nAND c.total_spent > 2000000\nGROUP BY c.campaign_id;\n```",
        "prompt_token_number": 267,
        "response_token_number": 102,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Ad_Statistics ast ON ap.ad_placement_id = ast.ad_placement_id WHERE w.domain LIKE '%finance%' AND ast.date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND c.total_spent > 2000000 GROUP BY c.campaign_id"
    },
    {
        "id": 33577,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Travel\" and have spent more than $500,000 on advertising in the past week:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with a category of \"Travel\" and have spent more than $500,000 on advertising in the past week:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 500000 AND Websites.category = 'Travel' AND Ad_Statistics.date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Ad_Statistics ads ON ap.ad_placement_id = ads.ad_placement_id\nWHERE w.category = 'Travel'\n  AND c.total_spent > 500000\n  AND ads.date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)\nGROUP BY c.name, c.total_spent;\n```",
        "prompt_token_number": 266,
        "response_token_number": 106,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Ad_Statistics ads ON ap.ad_placement_id = ads.ad_placement_id WHERE w.category = 'Travel' AND c.total_spent > 500000 AND ads.date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY c.name, c.total_spent"
    },
    {
        "id": 33585,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Mobile_Apps': ['mobile_app_id', 'category', 'name', 'title', 'downloads', 'available_on_apple_app_store', 'available_on_google_play', 'available_on_ios', 'available_on_android'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a mobile app with a category of \"Games\" and have spent more than $1 million on advertising in the past month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a mobile app with a category of \"Games\" and have spent more than $1 million on advertising in the past month:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Mobile_Apps ON Ad_Placements.mobile_app_id = Mobile_Apps.mobile_app_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 1000000 AND Mobile_Apps.category = 'Games' AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Mobile_Apps": [
                "mobile_app_id",
                "category",
                "name",
                "title",
                "downloads",
                "available_on_apple_app_store",
                "available_on_google_play",
                "available_on_ios",
                "available_on_android"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent AS total_cost\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Mobile_Apps ma ON ap.mobile_app_id = ma.mobile_app_id\nWHERE ma.category = 'Games'\nAND c.total_spent > 1000000\nAND c.start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);\n```",
        "prompt_token_number": 283,
        "response_token_number": 87,
        "response_text_processed": "SELECT c.name, c.total_spent AS total_cost FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Mobile_Apps ma ON ap.mobile_app_id = ma.mobile_app_id WHERE ma.category = 'Games' AND c.total_spent > 1000000 AND c.start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)"
    },
    {
        "id": 33589,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement with a cost per click greater than $3.00 and have spent more than $2 million on advertising in the past month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement with a cost per click greater than $3.00 and have spent more than $2 million on advertising in the past month:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 2000000 AND Ad_Placements.cost_per_click > 3.00 AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nWHERE ap.cost_per_click > 3.00 \n  AND c.total_spent > 2000000\n  AND c.end_date >= NOW() - INTERVAL 1 MONTH;\n```",
        "prompt_token_number": 237,
        "response_token_number": 71,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id WHERE ap.cost_per_click > 3.00 AND c.total_spent > 2000000 AND c.end_date >= NOW() - INTERVAL 1 MONTH"
    },
    {
        "id": 33590,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the total number of impressions and the total cost for each campaign that has at least one ad placement on a website with a domain containing the string \"news\" and have spent more than $500,000 on advertising in the past week:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the total number of impressions and the total cost for each campaign that has at least one ad placement on a website with a domain containing the string \"news\" and have spent more than $500,000 on advertising in the past week:",
        "output": "SELECT Campaigns.name, SUM(Ad_Statistics.impressions) AS total_impressions, SUM(Ad_Placements.cost_per_impression * Ad_Statistics.impressions) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 500000 AND Websites.domain LIKE '%news%' AND Ad_Statistics.date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT \n    c.name AS campaign_name,\n    SUM(as.impressions) AS total_impressions,\n    SUM(ap.cost_per_impression * as.impressions) AS total_cost\nFROM \n    Campaigns c\nJOIN \n    Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN \n    Websites w ON ap.website_id = w.website_id\nJOIN \n    Ad_Statistics as ON ap.ad_placement_id = as.ad_placement_id\nWHERE \n    w.domain LIKE '%news%'\n    AND c.total_spent > 500000\n    AND as.date >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK)\nGROUP BY \n    c.name\nHAVING \n    COUNT(ap.ad_placement_id) > 0\n;\n```",
        "prompt_token_number": 272,
        "response_token_number": 155,
        "response_text_processed": "SELECT c.name AS campaign_name, SUM(as.impressions) AS total_impressions, SUM(ap.cost_per_impression * as.impressions) AS total_cost FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Ad_Statistics as ON ap.ad_placement_id = as.ad_placement_id WHERE w.domain LIKE '%news%' AND c.total_spent > 500000 AND as.date >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK) GROUP BY c.name HAVING COUNT(ap.ad_placement_id) > 0"
    },
    {
        "id": 33591,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement with a cost per click greater than $2.50 and have spent more than $1 million on advertising in the past month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement with a cost per click greater than $2.50 and have spent more than $1 million on advertising in the past month:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 1000000 AND Ad_Placements.cost_per_click > 2.50 AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nWHERE ap.cost_per_click > 2.50\n  AND c.total_spent > 1000000\n  AND c.end_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY c.name, c.total_spent;\n```",
        "prompt_token_number": 237,
        "response_token_number": 84,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id WHERE ap.cost_per_click > 2.50 AND c.total_spent > 1000000 AND c.end_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY c.name, c.total_spent"
    },
    {
        "id": 33592,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Mobile_Apps': ['mobile_app_id', 'category', 'name', 'title', 'downloads', 'available_on_apple_app_store', 'available_on_google_play', 'available_on_ios', 'available_on_android'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the total number of clicks and the total cost for each campaign that has at least one ad placement on a mobile app with a category of \"Entertainment\" and have spent more than $500,000 on advertising in the past week:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the total number of clicks and the total cost for each campaign that has at least one ad placement on a mobile app with a category of \"Entertainment\" and have spent more than $500,000 on advertising in the past week:",
        "output": "SELECT Campaigns.name, SUM(Ad_Statistics.clicks) AS total_clicks, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Mobile_Apps ON Ad_Placements.mobile_app_id = Mobile_Apps.mobile_app_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 500000 AND Mobile_Apps.category = 'Entertainment' AND Ad_Statistics.date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Mobile_Apps": [
                "mobile_app_id",
                "category",
                "name",
                "title",
                "downloads",
                "available_on_apple_app_store",
                "available_on_google_play",
                "available_on_ios",
                "available_on_android"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT \n    c.campaign_id, \n    SUM(a.clicks) AS total_clicks, \n    SUM(ap.cost_per_click * a.clicks + ap.cost_per_impression * a.impressions) AS total_cost\nFROM \n    Campaigns c\nJOIN \n    Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN \n    Ad_Statistics a ON ap.ad_placement_id = a.ad_placement_id\nJOIN \n    Mobile_Apps m ON ap.mobile_app_id = m.mobile_app_id\nWHERE \n    m.category = 'Entertainment' \n    AND c.total_spent > 500000 \n    AND a.date >= CURDATE() - INTERVAL 7 DAY\nGROUP BY \n    c.campaign_id;\n```",
        "prompt_token_number": 289,
        "response_token_number": 156,
        "response_text_processed": "SELECT c.campaign_id, SUM(a.clicks) AS total_clicks, SUM(ap.cost_per_click * a.clicks + ap.cost_per_impression * a.impressions) AS total_cost FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Ad_Statistics a ON ap.ad_placement_id = a.ad_placement_id JOIN Mobile_Apps m ON ap.mobile_app_id = m.mobile_app_id WHERE m.category = 'Entertainment' AND c.total_spent > 500000 AND a.date >= CURDATE() - INTERVAL 7 DAY GROUP BY c.campaign_id"
    },
    {
        "id": 33596,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the total number of clicks and the total cost for each campaign that has at least one ad placement with a cost per impression greater than $0.50 and have spent more than $500,000 on advertising in the past month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the total number of clicks and the total cost for each campaign that has at least one ad placement with a cost per impression greater than $0.50 and have spent more than $500,000 on advertising in the past month:",
        "output": "SELECT Campaigns.name, SUM(Ad_Statistics.clicks) AS total_clicks, SUM(Ad_Placements.cost_per_impression * Ad_Statistics.impressions) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 500000 AND Ad_Placements.cost_per_impression > 0.50 AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT \n    c.campaign_id, \n    SUM(a.clicks) AS total_clicks, \n    SUM(ap.cost_per_impression * a.impressions) AS total_cost\nFROM \n    Campaigns c\nJOIN \n    Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN \n    Ad_Statistics a ON ap.ad_placement_id = a.ad_placement_id\nWHERE \n    ap.cost_per_impression > 0.50 \n    AND c.total_spent > 500000\n    AND a.date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY \n    c.campaign_id\nHAVING \n    total_cost > 0;\n```",
        "prompt_token_number": 242,
        "response_token_number": 144,
        "response_text_processed": "SELECT c.campaign_id, SUM(a.clicks) AS total_clicks, SUM(ap.cost_per_impression * a.impressions) AS total_cost FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Ad_Statistics a ON ap.ad_placement_id = a.ad_placement_id WHERE ap.cost_per_impression > 0.50 AND c.total_spent > 500000 AND a.date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY c.campaign_id HAVING total_cost > 0"
    },
    {
        "id": 33600,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that is not based in the United States and have spent more than $250,000 on advertising in the past week:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that is not based in the United States and have spent more than $250,000 on advertising in the past week:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_impression * Ad_Statistics.impressions) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 250000 AND Websites.country <> 'United States' AND Ad_Statistics.date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Ad_Statistics ast ON ap.ad_placement_id = ast.ad_placement_id\nWHERE w.country <> 'United States'\nAND c.total_spent > 250000\nAND ast.date >= CURRENT_DATE - INTERVAL '7 days'\nGROUP BY c.campaign_id\nHAVING COUNT(ap.ad_placement_id) > 0;\n```",
        "prompt_token_number": 267,
        "response_token_number": 111,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Ad_Statistics ast ON ap.ad_placement_id = ast.ad_placement_id WHERE w.country <> 'United States' AND c.total_spent > 250000 AND ast.date >= CURRENT_DATE - INTERVAL '7 days' GROUP BY c.campaign_id HAVING COUNT(ap.ad_placement_id) > 0"
    },
    {
        "id": 33606,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with the word \"fashion\" in the URL and have spent more than $100,000 in the past week:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website with the word \"fashion\" in the URL and have spent more than $100,000 in the past week:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 100000 AND Websites.url LIKE '%fashion%' AND Ad_Statistics.date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nWHERE w.url LIKE '%fashion%'\nAND c.total_spent > 100000\nAND c.end_date >= NOW() - INTERVAL 1 WEEK;\n```",
        "prompt_token_number": 267,
        "response_token_number": 77,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id WHERE w.url LIKE '%fashion%' AND c.total_spent > 100000 AND c.end_date >= NOW() - INTERVAL 1 WEEK"
    },
    {
        "id": 33611,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that has the word \"news\" in the URL and have spent more than $50,000 on advertising in the past day:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that has the word \"news\" in the URL and have spent more than $50,000 on advertising in the past day:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 50000 AND Websites.url LIKE '%news%' AND Ad_Statistics.date BETWEEN date('now', '-1 day') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT \n    c.name, \n    c.total_spent \nFROM \n    Campaigns c\nJOIN \n    Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN \n    Websites w ON ap.website_id = w.website_id\nWHERE \n    w.url LIKE '%news%' \n    AND c.total_spent > 50000 \n    AND c.end_date = CURDATE();\n```",
        "prompt_token_number": 269,
        "response_token_number": 86,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id WHERE w.url LIKE '%news%' AND c.total_spent > 50000 AND c.end_date = CURDATE()"
    },
    {
        "id": 33613,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that is based in the United States and have spent more than $100,000 on advertising in the past week, sorted in descending order of total cost:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that is based in the United States and have spent more than $100,000 on advertising in the past week, sorted in descending order of total cost:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 100000 AND Websites.country = 'United States' AND Ad_Statistics.date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Campaigns.name ORDER BY total_cost DESC;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Ad_Statistics ast ON ap.ad_placement_id = ast.ad_placement_id\nWHERE w.country = 'United States'\n  AND c.total_spent > 100000\n  AND ast.date > NOW() - INTERVAL 1 WEEK\nGROUP BY c.name, c.total_spent\nORDER BY c.total_spent DESC;\n```",
        "prompt_token_number": 274,
        "response_token_number": 112,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Ad_Statistics ast ON ap.ad_placement_id = ast.ad_placement_id WHERE w.country = 'United States' AND c.total_spent > 100000 AND ast.date > NOW() - INTERVAL 1 WEEK GROUP BY c.name, c.total_spent ORDER BY c.total_spent DESC"
    },
    {
        "id": 33615,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that has the word \"shopping\" in the URL and have spent more than $10,000 on advertising in the past day:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that has the word \"shopping\" in the URL and have spent more than $10,000 on advertising in the past day:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 10000 AND Websites.url LIKE '%shopping%' AND Ad_Statistics.date BETWEEN date('now', '-1 day') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Ad_Statistics ads ON ap.ad_placement_id = ads.ad_placement_id\nWHERE w.url LIKE '%shopping%' \nAND ads.date = CURRENT_DATE - INTERVAL '1' DAY\nAND c.total_spent > 10000\nGROUP BY c.campaign_id, c.name, c.total_spent;\n```",
        "prompt_token_number": 269,
        "response_token_number": 108,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Ad_Statistics ads ON ap.ad_placement_id = ads.ad_placement_id WHERE w.url LIKE '%shopping%' AND ads.date = CURRENT_DATE - INTERVAL '1' DAY AND c.total_spent > 10000 GROUP BY c.campaign_id, c.name, c.total_spent"
    },
    {
        "id": 33617,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that is based in the United States and have spent more than $50,000 on advertising in the past week, sorted in descending order of total cost:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that is based in the United States and have spent more than $50,000 on advertising in the past week, sorted in descending order of total cost:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 50000 AND Websites.country = 'United States' AND Ad_Statistics.date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Campaigns.name ORDER BY total_cost DESC;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, SUM(ap.cost_per_click * s.clicks + ap.cost_per_impression * s.impressions) AS total_cost\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Ad_Statistics s ON ap.ad_placement_id = s.ad_placement_id\nWHERE w.country = 'United States'\n  AND s.date >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK)\n  AND c.total_spent > 50000\nGROUP BY c.name\nORDER BY total_cost DESC;\n```",
        "prompt_token_number": 274,
        "response_token_number": 127,
        "response_text_processed": "SELECT c.name, SUM(ap.cost_per_click * s.clicks + ap.cost_per_impression * s.impressions) AS total_cost FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Ad_Statistics s ON ap.ad_placement_id = s.ad_placement_id WHERE w.country = 'United States' AND s.date >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK) AND c.total_spent > 50000 GROUP BY c.name ORDER BY total_cost DESC"
    },
    {
        "id": 33618,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that is not based in the United States and have spent more than $20,000 on advertising in the past month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that is not based in the United States and have spent more than $20,000 on advertising in the past month:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 20000 AND Websites.country <> 'United States' AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Ad_Statistics ast ON ap.ad_placement_id = ast.ad_placement_id\nWHERE w.country <> 'United States'\n  AND c.total_spent > 20000\n  AND ast.date >= CURRENT_DATE - INTERVAL '1 month'\nGROUP BY c.name, c.total_spent;\n```",
        "prompt_token_number": 267,
        "response_token_number": 104,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Ad_Statistics ast ON ap.ad_placement_id = ast.ad_placement_id WHERE w.country <> 'United States' AND c.total_spent > 20000 AND ast.date >= CURRENT_DATE - INTERVAL '1 month' GROUP BY c.name, c.total_spent"
    },
    {
        "id": 33621,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that has the word \"blog\" in the URL and have spent more than $5,000 on advertising in the past day:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that has the word \"blog\" in the URL and have spent more than $5,000 on advertising in the past day:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 5000 AND Websites.url LIKE '%blog%' AND Ad_Statistics.date BETWEEN date('now', '-1 day') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.total_spent\nFROM Campaigns c\nJOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id\nJOIN Websites w ON ap.website_id = w.website_id\nJOIN Ad_Statistics ast ON ap.ad_placement_id = ast.ad_placement_id\nWHERE w.url LIKE '%blog%' AND ast.date = CURRENT_DATE - INTERVAL '1 day' AND c.total_spent > 5000\nGROUP BY c.name, c.total_spent;\n```",
        "prompt_token_number": 269,
        "response_token_number": 101,
        "response_text_processed": "SELECT c.name, c.total_spent FROM Campaigns c JOIN Ad_Placements ap ON c.campaign_id = ap.campaign_id JOIN Websites w ON ap.website_id = w.website_id JOIN Ad_Statistics ast ON ap.ad_placement_id = ast.ad_placement_id WHERE w.url LIKE '%blog%' AND ast.date = CURRENT_DATE - INTERVAL '1 day' AND c.total_spent > 5000 GROUP BY c.name, c.total_spent"
    },
    {
        "id": 33625,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Campaigns': ['end_date', 'start_date', 'name', 'status', 'budget', 'advertiser_id', 'campaign_id', 'total_spent', 'daily_budget', 'conversion_rate', 'revenue', 'CampaignID', 'AdvertiserID', 'StartDate'], 'Websites': ['name', 'traffic', 'category', 'website_id', 'url', 'domain', 'country', 'region'], 'Ad_Placements': ['website_id', 'campaign_id', 'app_id', 'mobile_app_id', 'name', 'cost_per_click', 'ad_placement_id', 'cost_per_impression', 'social_media_platform_id', 'device_id', 'social_media_id'], 'Ad_Statistics': ['ad_placement_id', 'clicks', 'date', 'impressions']} and \n# the user question: Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that has the word \"review\" in the URL, and have spent more than $15,000 on advertising in the past month:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total cost of all campaigns that have at least one ad placement on a website that has the word \"review\" in the URL, and have spent more than $15,000 on advertising in the past month:",
        "output": "SELECT Campaigns.name, SUM(Ad_Placements.cost_per_click * Ad_Statistics.clicks) AS total_cost FROM Campaigns JOIN Ad_Placements ON Campaigns.campaign_id = Ad_Placements.campaign_id JOIN Websites ON Ad_Placements.website_id = Websites.website_id JOIN Ad_Statistics ON Ad_Placements.ad_placement_id = Ad_Statistics.ad_placement_id WHERE Campaigns.total_spent > 15000 AND Websites.url LIKE '%review%' AND Ad_Statistics.date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Campaigns.name;",
        "schema": "advertising",
        "processed_schema_content": {
            "Campaigns": [
                "end_date",
                "start_date",
                "name",
                "status",
                "budget",
                "advertiser_id",
                "campaign_id",
                "total_spent",
                "daily_budget",
                "conversion_rate",
                "revenue",
                "CampaignID",
                "AdvertiserID",
                "StartDate"
            ],
            "Websites": [
                "name",
                "traffic",
                "category",
                "website_id",
                "url",
                "domain",
                "country",
                "region"
            ],
            "Ad_Placements": [
                "website_id",
                "campaign_id",
                "app_id",
                "mobile_app_id",
                "name",
                "cost_per_click",
                "ad_placement_id",
                "cost_per_impression",
                "social_media_platform_id",
                "device_id",
                "social_media_id"
            ],
            "Ad_Statistics": [
                "ad_placement_id",
                "clicks",
                "date",
                "impressions"
            ]
        },
        "response_text": "```sql\nSELECT C.name, SUM(AP.cost_per_click * S.clicks + AP.cost_per_impression * S.impressions) AS total_cost\nFROM Campaigns C\nJOIN Ad_Placements AP ON C.campaign_id = AP.campaign_id\nJOIN Websites W ON AP.website_id = W.website_id\nJOIN Ad_Statistics S ON AP.ad_placement_id = S.ad_placement_id\nWHERE W.url LIKE '%review%'\n  AND S.date >= DATEADD(month, -1, GETDATE())\nGROUP BY C.name\nHAVING SUM(AP.cost_per_click * S.clicks + AP.cost_per_impression * S.impressions) > 15000;\n```",
        "prompt_token_number": 270,
        "response_token_number": 135,
        "response_text_processed": "SELECT C.name, SUM(AP.cost_per_click * S.clicks + AP.cost_per_impression * S.impressions) AS total_cost FROM Campaigns C JOIN Ad_Placements AP ON C.campaign_id = AP.campaign_id JOIN Websites W ON AP.website_id = W.website_id JOIN Ad_Statistics S ON AP.ad_placement_id = S.ad_placement_id WHERE W.url LIKE '%review%' AND S.date >= DATEADD(month, -1, GETDATE()) GROUP BY C.name HAVING SUM(AP.cost_per_click * S.clicks + AP.cost_per_impression * S.impressions) > 15000"
    },
    {
        "id": 33626,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'customers': ['customer_id', 'name', 'email', 'phone', 'address', 'country', 'first_name', 'last_name', 'date_created', 'marketing_channel', 'customer_name'], 'orders': ['customer_id', 'date_placed', 'order_id', 'date_shipped', 'order_total', 'total_price', 'sales_channel', 'order_date', 'payment_date']} and \n# the user question: Retrieve the name and contact information of all customers who have placed an order in the past 30 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and contact information of all customers who have placed an order in the past 30 days.",
        "output": "SELECT name, email, phone FROM customers WHERE customer_id IN ( SELECT customer_id FROM orders WHERE date_placed >= DATE('now', '-30 days') );",
        "schema": "advertising",
        "processed_schema_content": {
            "customers": [
                "customer_id",
                "name",
                "email",
                "phone",
                "address",
                "country",
                "first_name",
                "last_name",
                "date_created",
                "marketing_channel",
                "customer_name"
            ],
            "orders": [
                "customer_id",
                "date_placed",
                "order_id",
                "date_shipped",
                "order_total",
                "total_price",
                "sales_channel",
                "order_date",
                "payment_date"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.email, c.phone \nFROM customers c \nJOIN orders o ON c.customer_id = o.customer_id \nWHERE o.date_placed >= NOW() - INTERVAL 30 DAY;\n```",
        "prompt_token_number": 162,
        "response_token_number": 44,
        "response_text_processed": "SELECT c.name, c.email, c.phone FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.date_placed >= NOW() - INTERVAL 30 DAY"
    },
    {
        "id": 33628,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['customer_id', 'date_placed', 'order_id', 'date_shipped', 'order_total', 'total_price', 'sales_channel', 'order_date', 'payment_date'], 'order_items': ['price', 'order_id', 'quantity', 'product_id', 'total_price', 'order_date', 'TOP']} and \n# the user question: Calculate the total revenue generated by the company in the last quarter.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Calculate the total revenue generated by the company in the last quarter.",
        "output": "SELECT SUM(price * quantity) AS total_revenue FROM order_items WHERE order_id IN ( SELECT order_id FROM orders WHERE date_placed >= DATE('now', '-3 months') );",
        "schema": "advertising",
        "processed_schema_content": {
            "orders": [
                "customer_id",
                "date_placed",
                "order_id",
                "date_shipped",
                "order_total",
                "total_price",
                "sales_channel",
                "order_date",
                "payment_date"
            ],
            "order_items": [
                "price",
                "order_id",
                "quantity",
                "product_id",
                "total_price",
                "order_date",
                "TOP"
            ]
        },
        "response_text": "```sql\nSELECT SUM(oi.total_price) AS total_revenue\nFROM orders o\nJOIN order_items oi ON o.order_id = oi.order_id\nWHERE o.date_placed >= DATEADD(QUARTER, -1, CURRENT_DATE) AND o.date_placed < CURRENT_DATE;\n```",
        "prompt_token_number": 141,
        "response_token_number": 61,
        "response_text_processed": "SELECT SUM(oi.total_price) AS total_revenue FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE o.date_placed >= DATEADD(QUARTER, -1, CURRENT_DATE) AND o.date_placed < CURRENT_DATE"
    },
    {
        "id": 33636,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['price', 'category', 'name', 'product_id', 'stock_quantity', 'product_name', 'on_sale', 'rating', 'category_id', 'id']} and \n# the user question: Retrieve the name and price of the most expensive product in each category.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of the most expensive product in each category.",
        "output": "SELECT products.name, products.price, products.category FROM products WHERE products.price = ( SELECT MAX(price) FROM products AS subquery WHERE subquery.category = products.category );",
        "schema": "advertising",
        "processed_schema_content": {
            "products": [
                "price",
                "category",
                "name",
                "product_id",
                "stock_quantity",
                "product_name",
                "on_sale",
                "rating",
                "category_id",
                "id"
            ]
        },
        "response_text": "```sql\nSELECT category, name, price\nFROM products\nWHERE (category, price) IN (\n    SELECT category, MAX(price)\n    FROM products\n    GROUP BY category\n);\n```",
        "prompt_token_number": 110,
        "response_token_number": 39,
        "response_text_processed": "SELECT category, name, price FROM products WHERE (category, price) IN ( SELECT category, MAX(price) FROM products GROUP BY category )"
    },
    {
        "id": 33638,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'customers': ['customer_id', 'name', 'email', 'phone', 'address', 'country', 'first_name', 'last_name', 'date_created', 'marketing_channel', 'customer_name'], 'orders': ['customer_id', 'date_placed', 'order_id', 'date_shipped', 'order_total', 'total_price', 'sales_channel', 'order_date', 'payment_date']} and \n# the user question: Retrieve the name and email address of customers who have ordered from the company in the last 6 months and have spent more than $500 in total.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email address of customers who have ordered from the company in the last 6 months and have spent more than $500 in total.",
        "output": "SELECT customers.name, customers.email FROM customers INNER JOIN orders ON orders.customer_id = customers.customer_id GROUP BY customers.customer_id HAVING MAX(orders.date_placed) >= DATE('now', '-6 months') AND SUM(orders.total_price) > 500;",
        "schema": "advertising",
        "processed_schema_content": {
            "customers": [
                "customer_id",
                "name",
                "email",
                "phone",
                "address",
                "country",
                "first_name",
                "last_name",
                "date_created",
                "marketing_channel",
                "customer_name"
            ],
            "orders": [
                "customer_id",
                "date_placed",
                "order_id",
                "date_shipped",
                "order_total",
                "total_price",
                "sales_channel",
                "order_date",
                "payment_date"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.name, c.email\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nWHERE o.date_placed >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nGROUP BY c.customer_id, c.name, c.email\nHAVING SUM(o.order_total) > 500;\n```",
        "prompt_token_number": 171,
        "response_token_number": 68,
        "response_text_processed": "SELECT DISTINCT c.name, c.email FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.date_placed >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY c.customer_id, c.name, c.email HAVING SUM(o.order_total) > 500"
    },
    {
        "id": 33645,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'customers': ['customer_id', 'name', 'email', 'phone', 'address', 'country', 'first_name', 'last_name', 'date_created', 'marketing_channel', 'customer_name'], 'orders': ['customer_id', 'date_placed', 'order_id', 'date_shipped', 'order_total', 'total_price', 'sales_channel', 'order_date', 'payment_date'], 'order_items': ['price', 'order_id', 'quantity', 'product_id', 'total_price', 'order_date', 'TOP']} and \n# the user question: Retrieve the total revenue generated by each country in the last quarter.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the total revenue generated by each country in the last quarter.",
        "output": "SELECT customers.country, SUM(order_items.total_price) AS revenue FROM order_items INNER JOIN orders ON order_items.order_id = orders.order_id INNER JOIN customers ON orders.customer_id = customers.customer_id WHERE orders.date_placed >= DATE('now', '-3 months') GROUP BY customers.country;",
        "schema": "advertising",
        "processed_schema_content": {
            "customers": [
                "customer_id",
                "name",
                "email",
                "phone",
                "address",
                "country",
                "first_name",
                "last_name",
                "date_created",
                "marketing_channel",
                "customer_name"
            ],
            "orders": [
                "customer_id",
                "date_placed",
                "order_id",
                "date_shipped",
                "order_total",
                "total_price",
                "sales_channel",
                "order_date",
                "payment_date"
            ],
            "order_items": [
                "price",
                "order_id",
                "quantity",
                "product_id",
                "total_price",
                "order_date",
                "TOP"
            ]
        },
        "response_text": "```sql\nSELECT c.country, SUM(oi.total_price) AS total_revenue\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nJOIN order_items oi ON o.order_id = oi.order_id\nWHERE o.order_date >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 month'\nGROUP BY c.country;\n```",
        "prompt_token_number": 183,
        "response_token_number": 72,
        "response_text_processed": "SELECT c.country, SUM(oi.total_price) AS total_revenue FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id WHERE o.order_date >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '3 month' GROUP BY c.country"
    },
    {
        "id": 33648,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'customers': ['customer_id', 'name', 'email', 'phone', 'address', 'country', 'first_name', 'last_name', 'date_created', 'marketing_channel', 'customer_name'], 'orders': ['customer_id', 'date_placed', 'order_id', 'date_shipped', 'order_total', 'total_price', 'sales_channel', 'order_date', 'payment_date'], 'order_items': ['price', 'order_id', 'quantity', 'product_id', 'total_price', 'order_date', 'TOP']} and \n# the user question: Retrieve the top 10 customers with the highest lifetime value, calculated as the sum of all their orders.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the top 10 customers with the highest lifetime value, calculated as the sum of all their orders.",
        "output": "SELECT customers.customer_id, customers.first_name, customers.last_name, SUM(order_items.total_price) AS lifetime_value FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN order_items ON orders.order_id = order_items.order_id GROUP BY customers.customer_id ORDER BY lifetime_value DESC LIMIT 10;",
        "schema": "advertising",
        "processed_schema_content": {
            "customers": [
                "customer_id",
                "name",
                "email",
                "phone",
                "address",
                "country",
                "first_name",
                "last_name",
                "date_created",
                "marketing_channel",
                "customer_name"
            ],
            "orders": [
                "customer_id",
                "date_placed",
                "order_id",
                "date_shipped",
                "order_total",
                "total_price",
                "sales_channel",
                "order_date",
                "payment_date"
            ],
            "order_items": [
                "price",
                "order_id",
                "quantity",
                "product_id",
                "total_price",
                "order_date",
                "TOP"
            ]
        },
        "response_text": "```sql\nSELECT c.customer_id, c.customer_name, SUM(o.order_total) AS lifetime_value\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nGROUP BY c.customer_id, c.customer_name\nORDER BY lifetime_value DESC\nLIMIT 10;\n```",
        "prompt_token_number": 191,
        "response_token_number": 58,
        "response_text_processed": "SELECT c.customer_id, c.customer_name, SUM(o.order_total) AS lifetime_value FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY lifetime_value DESC LIMIT 10"
    },
    {
        "id": 33649,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'customers': ['customer_id', 'name', 'email', 'phone', 'address', 'country', 'first_name', 'last_name', 'date_created', 'marketing_channel', 'customer_name']} and \n# the user question: Retrieve the number of new customers acquired through each marketing channel in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the number of new customers acquired through each marketing channel in the last month.",
        "output": "SELECT customers.marketing_channel, COUNT(*) AS num_new_customers FROM customers WHERE strftime('%Y-%m', customers.date_created) = strftime('%Y-%m', 'now', '-1 month') GROUP BY customers.marketing_channel;",
        "schema": "advertising",
        "processed_schema_content": {
            "customers": [
                "customer_id",
                "name",
                "email",
                "phone",
                "address",
                "country",
                "first_name",
                "last_name",
                "date_created",
                "marketing_channel",
                "customer_name"
            ]
        },
        "response_text": "```sql\nSELECT marketing_channel, COUNT(*) AS number_of_new_customers\nFROM customers\nWHERE date_created >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month'\n  AND date_created < DATE_TRUNC('month', CURRENT_DATE)\nGROUP BY marketing_channel;\n```",
        "prompt_token_number": 116,
        "response_token_number": 56,
        "response_text_processed": "SELECT marketing_channel, COUNT(*) AS number_of_new_customers FROM customers WHERE date_created >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND date_created < DATE_TRUNC('month', CURRENT_DATE) GROUP BY marketing_channel"
    },
    {
        "id": 33651,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'customers': ['customer_id', 'name', 'email', 'phone', 'address', 'country', 'first_name', 'last_name', 'date_created', 'marketing_channel', 'customer_name'], 'orders': ['customer_id', 'date_placed', 'order_id', 'date_shipped', 'order_total', 'total_price', 'sales_channel', 'order_date', 'payment_date'], 'order_items': ['price', 'order_id', 'quantity', 'product_id', 'total_price', 'order_date', 'TOP']} and \n# the user question: Retrieve the number of orders and the total revenue generated by each customer in the last 6 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the number of orders and the total revenue generated by each customer in the last 6 months.",
        "output": "SELECT customers.customer_id, customers.first_name, customers.last_name, COUNT(orders.order_id) AS num_orders, SUM(order_items.total_price) AS revenue FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id INNER JOIN order_items ON orders.order_id = order_items.order_id WHERE orders.date_placed >= DATE('now', '-6 months') GROUP BY customers.customer_id ORDER BY revenue DESC;",
        "schema": "advertising",
        "processed_schema_content": {
            "customers": [
                "customer_id",
                "name",
                "email",
                "phone",
                "address",
                "country",
                "first_name",
                "last_name",
                "date_created",
                "marketing_channel",
                "customer_name"
            ],
            "orders": [
                "customer_id",
                "date_placed",
                "order_id",
                "date_shipped",
                "order_total",
                "total_price",
                "sales_channel",
                "order_date",
                "payment_date"
            ],
            "order_items": [
                "price",
                "order_id",
                "quantity",
                "product_id",
                "total_price",
                "order_date",
                "TOP"
            ]
        },
        "response_text": "```sql\nSELECT \n    c.customer_id, \n    COUNT(o.order_id) AS number_of_orders, \n    SUM(o.order_total) AS total_revenue \nFROM \n    customers c \nJOIN \n    orders o ON c.customer_id = o.customer_id \nWHERE \n    o.order_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) \nGROUP BY \n    c.customer_id;\n```",
        "prompt_token_number": 190,
        "response_token_number": 82,
        "response_text_processed": "SELECT c.customer_id, COUNT(o.order_id) AS number_of_orders, SUM(o.order_total) AS total_revenue FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY c.customer_id"
    },
    {
        "id": 33652,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['customer_id', 'date_placed', 'order_id', 'date_shipped', 'order_total', 'total_price', 'sales_channel', 'order_date', 'payment_date'], 'products': ['price', 'category', 'name', 'product_id', 'stock_quantity', 'product_name', 'on_sale', 'rating', 'category_id', 'id'], 'order_items': ['price', 'order_id', 'quantity', 'product_id', 'total_price', 'order_date', 'TOP']} and \n# the user question: Retrieve the number of orders and the total revenue generated by each product category in the last year, grouped by month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the number of orders and the total revenue generated by each product category in the last year, grouped by month.",
        "output": "SELECT strftime('%Y-%m', orders.date_placed) AS month, products.category, COUNT(orders.order_id) AS num_orders, SUM(order_items.total_price) AS revenue FROM orders INNER JOIN order_items ON orders.order_id = order_items.order_id INNER JOIN products ON order_items.product_id = products.product_id WHERE orders.date_placed >= DATE('now', '-1 year') GROUP BY month, products.category ORDER BY month, revenue DESC;",
        "schema": "advertising",
        "processed_schema_content": {
            "orders": [
                "customer_id",
                "date_placed",
                "order_id",
                "date_shipped",
                "order_total",
                "total_price",
                "sales_channel",
                "order_date",
                "payment_date"
            ],
            "products": [
                "price",
                "category",
                "name",
                "product_id",
                "stock_quantity",
                "product_name",
                "on_sale",
                "rating",
                "category_id",
                "id"
            ],
            "order_items": [
                "price",
                "order_id",
                "quantity",
                "product_id",
                "total_price",
                "order_date",
                "TOP"
            ]
        },
        "response_text": "```sql\nSELECT\n    DATE_FORMAT(o.date_placed, '%Y-%m') AS month,\n    p.category,\n    COUNT(o.order_id) AS number_of_orders,\n    SUM(oi.total_price) AS total_revenue\nFROM\n    orders o\nJOIN order_items oi ON o.order_id = oi.order_id\nJOIN products p ON oi.product_id = p.product_id\nWHERE\n    o.date_placed >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\nGROUP BY\n    month,\n    p.category\nORDER BY\n    month,\n    p.category;\n```",
        "prompt_token_number": 189,
        "response_token_number": 119,
        "response_text_processed": "SELECT DATE_FORMAT(o.date_placed, '%Y-%m') AS month, p.category, COUNT(o.order_id) AS number_of_orders, SUM(oi.total_price) AS total_revenue FROM orders o JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE o.date_placed >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY month, p.category ORDER BY month, p.category"
    },
    {
        "id": 33654,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'campaigns': ['campaign_id', 'campaign_name', 'salesperson_id', 'start_date', 'budget'], 'ads': ['ad_id', 'campaign_id', 'ad_name', 'ad_copy', 'active', 'cost_per_click', 'end_date', 'bid', 'start_date', 'ad_type', 'ad_group_id', 'price', 'id'], 'ad_performance': ['date', 'clicks', 'ad_id', 'impressions', 'cost_per_conversion', 'cost', 'session_id', 'conversions', 'cost_per_click']} and \n# the user question: Retrieve the average cost per conversion for each campaign in the last 90 days, grouped by campaign.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the average cost per conversion for each campaign in the last 90 days, grouped by campaign.",
        "output": "SELECT campaigns.campaign_name, AVG(ad_performance.cost_per_conversion) AS avg_cost_per_conversion FROM campaigns INNER JOIN ads ON campaigns.campaign_id = ads.campaign_id INNER JOIN ad_performance ON ads.ad_id = ad_performance.ad_id WHERE ad_performance.date >= DATE('now', '-90 days') GROUP BY campaigns.campaign_id;",
        "schema": "advertising",
        "processed_schema_content": {
            "campaigns": [
                "campaign_id",
                "campaign_name",
                "salesperson_id",
                "start_date",
                "budget"
            ],
            "ads": [
                "ad_id",
                "campaign_id",
                "ad_name",
                "ad_copy",
                "active",
                "cost_per_click",
                "end_date",
                "bid",
                "start_date",
                "ad_type",
                "ad_group_id",
                "price",
                "id"
            ],
            "ad_performance": [
                "date",
                "clicks",
                "ad_id",
                "impressions",
                "cost_per_conversion",
                "cost",
                "session_id",
                "conversions",
                "cost_per_click"
            ]
        },
        "response_text": "```sql\nSELECT \n    c.campaign_name,\n    AVG(ap.cost_per_conversion) AS average_cost_per_conversion\nFROM \n    campaigns c\nJOIN \n    ads a ON c.campaign_id = a.campaign_id\nJOIN \n    ad_performance ap ON a.ad_id = ap.ad_id\nWHERE \n    ap.date >= CURDATE() - INTERVAL 90 DAY\nGROUP BY \n    c.campaign_name;\n```",
        "prompt_token_number": 195,
        "response_token_number": 86,
        "response_text_processed": "SELECT c.campaign_name, AVG(ap.cost_per_conversion) AS average_cost_per_conversion FROM campaigns c JOIN ads a ON c.campaign_id = a.campaign_id JOIN ad_performance ap ON a.ad_id = ap.ad_id WHERE ap.date >= CURDATE() - INTERVAL 90 DAY GROUP BY c.campaign_name"
    },
    {
        "id": 33655,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'customer': ['customer_id', 'name', 'email'], 'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id']} and \n# the user question: Retrieve the name and email of all customers who have made a purchase in the past week.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all customers who have made a purchase in the past week.",
        "output": "SELECT name, email FROM customer WHERE customer_id IN ( SELECT DISTINCT customer_id FROM purchase WHERE purchase_date >= DATE('now', '-7 days') )",
        "schema": "advertising",
        "processed_schema_content": {
            "customer": [
                "customer_id",
                "name",
                "email"
            ],
            "purchase": [
                "customer_id",
                "purchase_date",
                "sales_rep_id",
                "purchase_id",
                "payment_status",
                "store_id"
            ]
        },
        "response_text": "```sql\nSELECT customer.name, customer.email\nFROM customer\nJOIN purchase ON customer.customer_id = purchase.customer_id\nWHERE purchase.purchase_date >= NOW() - INTERVAL '7 days';\n```",
        "prompt_token_number": 117,
        "response_token_number": 38,
        "response_text_processed": "SELECT customer.name, customer.email FROM customer JOIN purchase ON customer.customer_id = purchase.customer_id WHERE purchase.purchase_date >= NOW() - INTERVAL '7 days'"
    },
    {
        "id": 33659,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id'], 'purchase_item': ['product_id', 'price', 'purchase_id', 'quantity', 'discount', 'purchase_item_id'], 'store': ['name', 'store_id', 'city']} and \n# the user question: Retrieve the name and total revenue of each store in the past week.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total revenue of each store in the past week.",
        "output": "SELECT store.name, SUM(purchase_item.price * purchase_item.quantity) AS total_revenue FROM store JOIN purchase ON store.store_id = purchase.store_id JOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id WHERE purchase.purchase_date >= DATE('now', '-7 days') GROUP BY store.store_id",
        "schema": "advertising",
        "processed_schema_content": {
            "purchase": [
                "customer_id",
                "purchase_date",
                "sales_rep_id",
                "purchase_id",
                "payment_status",
                "store_id"
            ],
            "purchase_item": [
                "product_id",
                "price",
                "purchase_id",
                "quantity",
                "discount",
                "purchase_item_id"
            ],
            "store": [
                "name",
                "store_id",
                "city"
            ]
        },
        "response_text": "```sql\nSELECT s.name, SUM(pi.price * pi.quantity * (1 - pi.discount)) AS total_revenue\nFROM purchase p\nJOIN purchase_item pi ON p.purchase_id = pi.purchase_id\nJOIN store s ON p.store_id = s.store_id\nWHERE p.purchase_date >= CURDATE() - INTERVAL 7 DAY\nGROUP BY s.name;\n```",
        "prompt_token_number": 139,
        "response_token_number": 74,
        "response_text_processed": "SELECT s.name, SUM(pi.price * pi.quantity * (1 - pi.discount)) AS total_revenue FROM purchase p JOIN purchase_item pi ON p.purchase_id = pi.purchase_id JOIN store s ON p.store_id = s.store_id WHERE p.purchase_date >= CURDATE() - INTERVAL 7 DAY GROUP BY s.name"
    },
    {
        "id": 33661,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id'], 'product': ['name', 'product_id', 'revenue', 'iPhone', 'category_id', 'brand_id', 'quantity', 'price', 'rating'], 'purchase_item': ['product_id', 'price', 'purchase_id', 'quantity', 'discount', 'purchase_item_id']} and \n# the user question: Retrieve the name and total revenue of each product sold in the past month, sorted in descending order of total revenue.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total revenue of each product sold in the past month, sorted in descending order of total revenue.",
        "output": "SELECT product.name, SUM(purchase_item.price * purchase_item.quantity) AS total_revenue FROM product JOIN purchase_item ON product.product_id = purchase_item.product_id JOIN purchase ON purchase_item.purchase_id = purchase.purchase_id WHERE purchase.purchase_date >= DATE('now', '-1 month') GROUP BY product.product_id ORDER BY total_revenue DESC",
        "schema": "advertising",
        "processed_schema_content": {
            "purchase": [
                "customer_id",
                "purchase_date",
                "sales_rep_id",
                "purchase_id",
                "payment_status",
                "store_id"
            ],
            "product": [
                "name",
                "product_id",
                "revenue",
                "iPhone",
                "category_id",
                "brand_id",
                "quantity",
                "price",
                "rating"
            ],
            "purchase_item": [
                "product_id",
                "price",
                "purchase_id",
                "quantity",
                "discount",
                "purchase_item_id"
            ]
        },
        "response_text": "```sql\nSELECT \n    p.name, \n    SUM(pi.quantity * pi.price) AS total_revenue\nFROM \n    purchase_item pi\n    JOIN product p ON pi.product_id = p.product_id\n    JOIN purchase pu ON pi.purchase_id = pu.purchase_id\nWHERE \n    pu.purchase_date >= DATEADD(MONTH, -1, GETDATE())\nGROUP BY \n    p.name\nORDER BY \n    total_revenue DESC;\n```",
        "prompt_token_number": 169,
        "response_token_number": 92,
        "response_text_processed": "SELECT p.name, SUM(pi.quantity * pi.price) AS total_revenue FROM purchase_item pi JOIN product p ON pi.product_id = p.product_id JOIN purchase pu ON pi.purchase_id = pu.purchase_id WHERE pu.purchase_date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY p.name ORDER BY total_revenue DESC"
    },
    {
        "id": 33662,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'customer': ['customer_id', 'name', 'email'], 'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id'], 'product': ['name', 'product_id', 'revenue', 'iPhone', 'category_id', 'brand_id', 'quantity', 'price', 'rating'], 'purchase_item': ['product_id', 'price', 'purchase_id', 'quantity', 'discount', 'purchase_item_id']} and \n# the user question: Retrieve the name and email of all customers who have made a purchase of a product that is currently out of stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all customers who have made a purchase of a product that is currently out of stock.",
        "output": "SELECT customer.name, customer.email FROM customer JOIN purchase ON customer.customer_id = purchase.customer_id JOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id JOIN product ON purchase_item.product_id = product.product_id WHERE product.quantity = 0",
        "schema": "advertising",
        "processed_schema_content": {
            "customer": [
                "customer_id",
                "name",
                "email"
            ],
            "purchase": [
                "customer_id",
                "purchase_date",
                "sales_rep_id",
                "purchase_id",
                "payment_status",
                "store_id"
            ],
            "product": [
                "name",
                "product_id",
                "revenue",
                "iPhone",
                "category_id",
                "brand_id",
                "quantity",
                "price",
                "rating"
            ],
            "purchase_item": [
                "product_id",
                "price",
                "purchase_id",
                "quantity",
                "discount",
                "purchase_item_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name, c.email\nFROM customer c\nJOIN purchase p ON c.customer_id = p.customer_id\nJOIN purchase_item pi ON p.purchase_id = pi.purchase_id\nJOIN product pr ON pi.product_id = pr.product_id\nWHERE pr.quantity = 0;\n```",
        "prompt_token_number": 182,
        "response_token_number": 59,
        "response_text_processed": "SELECT c.name, c.email FROM customer c JOIN purchase p ON c.customer_id = p.customer_id JOIN purchase_item pi ON p.purchase_id = pi.purchase_id JOIN product pr ON pi.product_id = pr.product_id WHERE pr.quantity = 0"
    },
    {
        "id": 33663,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id'], 'purchase_item': ['product_id', 'price', 'purchase_id', 'quantity', 'discount', 'purchase_item_id'], 'store': ['name', 'store_id', 'city']} and \n# the user question: Retrieve the name and total revenue of each store, grouped by city.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total revenue of each store, grouped by city.",
        "output": "SELECT store.city, SUM(purchase_item.price * purchase_item.quantity) AS total_revenue FROM store JOIN purchase ON store.store_id = purchase.store_id JOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id GROUP BY store.city",
        "schema": "advertising",
        "processed_schema_content": {
            "purchase": [
                "customer_id",
                "purchase_date",
                "sales_rep_id",
                "purchase_id",
                "payment_status",
                "store_id"
            ],
            "purchase_item": [
                "product_id",
                "price",
                "purchase_id",
                "quantity",
                "discount",
                "purchase_item_id"
            ],
            "store": [
                "name",
                "store_id",
                "city"
            ]
        },
        "response_text": "```sql\nSELECT s.city, s.name, SUM(pi.price * pi.quantity - pi.discount) AS total_revenue\nFROM store s\nJOIN purchase p ON s.store_id = p.store_id\nJOIN purchase_item pi ON p.purchase_id = pi.purchase_id\nGROUP BY s.city, s.name;\n```",
        "prompt_token_number": 139,
        "response_token_number": 63,
        "response_text_processed": "SELECT s.city, s.name, SUM(pi.price * pi.quantity - pi.discount) AS total_revenue FROM store s JOIN purchase p ON s.store_id = p.store_id JOIN purchase_item pi ON p.purchase_id = pi.purchase_id GROUP BY s.city, s.name"
    },
    {
        "id": 33664,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'customer': ['customer_id', 'name', 'email'], 'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id'], 'purchase_item': ['product_id', 'price', 'purchase_id', 'quantity', 'discount', 'purchase_item_id']} and \n# the user question: Retrieve the name and email of all customers who have made a purchase of a product with a discount greater than 20%.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all customers who have made a purchase of a product with a discount greater than 20%.",
        "output": "SELECT customer.name, customer.email FROM customer JOIN purchase ON customer.customer_id = purchase.customer_id JOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id WHERE purchase_item.discount > 0.2",
        "schema": "advertising",
        "processed_schema_content": {
            "customer": [
                "customer_id",
                "name",
                "email"
            ],
            "purchase": [
                "customer_id",
                "purchase_date",
                "sales_rep_id",
                "purchase_id",
                "payment_status",
                "store_id"
            ],
            "purchase_item": [
                "product_id",
                "price",
                "purchase_id",
                "quantity",
                "discount",
                "purchase_item_id"
            ]
        },
        "response_text": "```sql\nSELECT customer.name, customer.email\nFROM customer\nJOIN purchase ON customer.customer_id = purchase.customer_id\nJOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id\nWHERE purchase_item.discount > 20;\n```",
        "prompt_token_number": 150,
        "response_token_number": 46,
        "response_text_processed": "SELECT customer.name, customer.email FROM customer JOIN purchase ON customer.customer_id = purchase.customer_id JOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id WHERE purchase_item.discount > 20"
    },
    {
        "id": 33666,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'customer': ['customer_id', 'name', 'email'], 'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id'], 'product': ['name', 'product_id', 'revenue', 'iPhone', 'category_id', 'brand_id', 'quantity', 'price', 'rating'], 'purchase_item': ['product_id', 'price', 'purchase_id', 'quantity', 'discount', 'purchase_item_id']} and \n# the user question: Retrieve the name and email of all customers who have made a purchase of a product with a rating of 5 stars.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and email of all customers who have made a purchase of a product with a rating of 5 stars.",
        "output": "SELECT customer.name, customer.email FROM customer JOIN purchase ON customer.customer_id = purchase.customer_id JOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id JOIN product ON purchase_item.product_id = product.product_id WHERE product.rating = 5",
        "schema": "advertising",
        "processed_schema_content": {
            "customer": [
                "customer_id",
                "name",
                "email"
            ],
            "purchase": [
                "customer_id",
                "purchase_date",
                "sales_rep_id",
                "purchase_id",
                "payment_status",
                "store_id"
            ],
            "product": [
                "name",
                "product_id",
                "revenue",
                "iPhone",
                "category_id",
                "brand_id",
                "quantity",
                "price",
                "rating"
            ],
            "purchase_item": [
                "product_id",
                "price",
                "purchase_id",
                "quantity",
                "discount",
                "purchase_item_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT customer.name, customer.email\nFROM customer\nJOIN purchase ON customer.customer_id = purchase.customer_id\nJOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id\nJOIN product ON purchase_item.product_id = product.product_id\nWHERE product.rating = 5;\n```",
        "prompt_token_number": 183,
        "response_token_number": 58,
        "response_text_processed": "SELECT DISTINCT customer.name, customer.email FROM customer JOIN purchase ON customer.customer_id = purchase.customer_id JOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id JOIN product ON purchase_item.product_id = product.product_id WHERE product.rating = 5"
    },
    {
        "id": 33667,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id'], 'purchase_item': ['product_id', 'price', 'purchase_id', 'quantity', 'discount', 'purchase_item_id'], 'store': ['name', 'store_id', 'city']} and \n# the user question: Retrieve the name and total revenue of each store that has made sales in the past month, sorted in descending order of total revenue.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total revenue of each store that has made sales in the past month, sorted in descending order of total revenue.",
        "output": "SELECT store.name, SUM(purchase_item.price * purchase_item.quantity) AS total_revenue FROM store JOIN purchase ON store.store_id = purchase.store_id JOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id WHERE purchase.purchase_date >= DATE('now', '-1 month') GROUP BY store.store_id ORDER BY total_revenue DESC",
        "schema": "advertising",
        "processed_schema_content": {
            "purchase": [
                "customer_id",
                "purchase_date",
                "sales_rep_id",
                "purchase_id",
                "payment_status",
                "store_id"
            ],
            "purchase_item": [
                "product_id",
                "price",
                "purchase_id",
                "quantity",
                "discount",
                "purchase_item_id"
            ],
            "store": [
                "name",
                "store_id",
                "city"
            ]
        },
        "response_text": "```sql\nSELECT s.name, SUM(pi.price * pi.quantity * (1 - pi.discount)) AS total_revenue\nFROM store s\nJOIN purchase p ON s.store_id = p.store_id\nJOIN purchase_item pi ON p.purchase_id = pi.purchase_id\nWHERE p.purchase_date >= DATEADD(month, -1, GETDATE())\nGROUP BY s.name\nORDER BY total_revenue DESC;\n```",
        "prompt_token_number": 151,
        "response_token_number": 82,
        "response_text_processed": "SELECT s.name, SUM(pi.price * pi.quantity * (1 - pi.discount)) AS total_revenue FROM store s JOIN purchase p ON s.store_id = p.store_id JOIN purchase_item pi ON p.purchase_id = pi.purchase_id WHERE p.purchase_date >= DATEADD(month, -1, GETDATE()) GROUP BY s.name ORDER BY total_revenue DESC"
    },
    {
        "id": 33668,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'purchase': ['customer_id', 'purchase_date', 'sales_rep_id', 'purchase_id', 'payment_status', 'store_id'], 'purchase_item': ['product_id', 'price', 'purchase_id', 'quantity', 'discount', 'purchase_item_id'], 'store': ['name', 'store_id', 'city']} and \n# the user question: Retrieve the name and total revenue of each store that has made sales of at least $10,000 in the past month, sorted in descending order of total revenue.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and total revenue of each store that has made sales of at least $10,000 in the past month, sorted in descending order of total revenue.",
        "output": "SELECT store.name, SUM(purchase_item.price * purchase_item.quantity) AS total_revenue FROM store JOIN purchase ON store.store_id = purchase.store_id JOIN purchase_item ON purchase.purchase_id = purchase_item.purchase_id WHERE purchase.purchase_date >= DATE('now', '-1 month') GROUP BY store.store_id HAVING total_revenue >= 10000 ORDER BY total_revenue DESC",
        "schema": "advertising",
        "processed_schema_content": {
            "purchase": [
                "customer_id",
                "purchase_date",
                "sales_rep_id",
                "purchase_id",
                "payment_status",
                "store_id"
            ],
            "purchase_item": [
                "product_id",
                "price",
                "purchase_id",
                "quantity",
                "discount",
                "purchase_item_id"
            ],
            "store": [
                "name",
                "store_id",
                "city"
            ]
        },
        "response_text": "```sql\nSELECT s.name, SUM(pi.price * pi.quantity * (1 - pi.discount / 100)) AS total_revenue\nFROM purchase p\nJOIN purchase_item pi ON p.purchase_id = pi.purchase_id\nJOIN store s ON p.store_id = s.store_id\nWHERE p.purchase_date >= DATEADD(month, -1, GETDATE())\nGROUP BY s.name\nHAVING SUM(pi.price * pi.quantity * (1 - pi.discount / 100)) >= 10000\nORDER BY total_revenue DESC;\n```",
        "prompt_token_number": 158,
        "response_token_number": 108,
        "response_text_processed": "SELECT s.name, SUM(pi.price * pi.quantity * (1 - pi.discount / 100)) AS total_revenue FROM purchase p JOIN purchase_item pi ON p.purchase_id = pi.purchase_id JOIN store s ON p.store_id = s.store_id WHERE p.purchase_date >= DATEADD(month, -1, GETDATE()) GROUP BY s.name HAVING SUM(pi.price * pi.quantity * (1 - pi.discount / 100)) >= 10000 ORDER BY total_revenue DESC"
    },
    {
        "id": 33669,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'campaigns': ['campaign_id', 'campaign_name', 'salesperson_id', 'start_date', 'budget']} and \n# the user question: Find the names of all campaigns that have not yet been assigned to a salesperson.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all campaigns that have not yet been assigned to a salesperson.",
        "output": "SELECT campaign_name FROM campaigns WHERE salesperson_id IS NULL;",
        "schema": "advertising",
        "processed_schema_content": {
            "campaigns": [
                "campaign_id",
                "campaign_name",
                "salesperson_id",
                "start_date",
                "budget"
            ]
        },
        "response_text": "```sql\nSELECT campaign_name \nFROM campaigns \nWHERE salesperson_id IS NULL;\n```",
        "prompt_token_number": 99,
        "response_token_number": 18,
        "response_text_processed": "SELECT campaign_name FROM campaigns WHERE salesperson_id IS NULL"
    },
    {
        "id": 33675,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'ads': ['ad_id', 'campaign_id', 'ad_name', 'ad_copy', 'active', 'cost_per_click', 'end_date', 'bid', 'start_date', 'ad_type', 'ad_group_id', 'price', 'id'], 'ad_performance': ['date', 'clicks', 'ad_id', 'impressions', 'cost_per_conversion', 'cost', 'session_id', 'conversions', 'cost_per_click']} and \n# the user question: Find the total number of clicks generated by each ad in the last 30 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total number of clicks generated by each ad in the last 30 days.",
        "output": "SELECT ads.ad_id, ads.ad_copy, SUM(ad_performance.clicks) AS total_clicks FROM ad_performance JOIN ads ON ad_performance.ad_id = ads.ad_id WHERE ads.active = 1 AND ad_performance.date >= DATE('now', '-30 days') GROUP BY ads.ad_id ORDER BY total_clicks DESC;",
        "schema": "advertising",
        "processed_schema_content": {
            "ads": [
                "ad_id",
                "campaign_id",
                "ad_name",
                "ad_copy",
                "active",
                "cost_per_click",
                "end_date",
                "bid",
                "start_date",
                "ad_type",
                "ad_group_id",
                "price",
                "id"
            ],
            "ad_performance": [
                "date",
                "clicks",
                "ad_id",
                "impressions",
                "cost_per_conversion",
                "cost",
                "session_id",
                "conversions",
                "cost_per_click"
            ]
        },
        "response_text": "```sql\nSELECT \n    ads.ad_id, \n    SUM(ad_performance.clicks) AS total_clicks\nFROM \n    ads\nJOIN \n    ad_performance ON ads.ad_id = ad_performance.ad_id\nWHERE \n    ad_performance.date >= CURRENT_DATE - INTERVAL '30 day'\nGROUP BY \n    ads.ad_id;\n```",
        "prompt_token_number": 168,
        "response_token_number": 67,
        "response_text_processed": "SELECT ads.ad_id, SUM(ad_performance.clicks) AS total_clicks FROM ads JOIN ad_performance ON ads.ad_id = ad_performance.ad_id WHERE ad_performance.date >= CURRENT_DATE - INTERVAL '30 day' GROUP BY ads.ad_id"
    },
    {
        "id": 33680,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'ads': ['ad_id', 'campaign_id', 'ad_name', 'ad_copy', 'active', 'cost_per_click', 'end_date', 'bid', 'start_date', 'ad_type', 'ad_group_id', 'price', 'id'], 'ad_performance': ['date', 'clicks', 'ad_id', 'impressions', 'cost_per_conversion', 'cost', 'session_id', 'conversions', 'cost_per_click']} and \n# the user question: Find the average cost per click (CPC) for all active ads in the last 7 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average cost per click (CPC) for all active ads in the last 7 days.",
        "output": "SELECT AVG(ad_performance.cost_per_click) AS avg_cpc FROM ad_performance JOIN ads ON ad_performance.ad_id = ads.ad_id WHERE ads.active = 1 AND ad_performance.date >= DATE('now', '-7 days');",
        "schema": "advertising",
        "processed_schema_content": {
            "ads": [
                "ad_id",
                "campaign_id",
                "ad_name",
                "ad_copy",
                "active",
                "cost_per_click",
                "end_date",
                "bid",
                "start_date",
                "ad_type",
                "ad_group_id",
                "price",
                "id"
            ],
            "ad_performance": [
                "date",
                "clicks",
                "ad_id",
                "impressions",
                "cost_per_conversion",
                "cost",
                "session_id",
                "conversions",
                "cost_per_click"
            ]
        },
        "response_text": "```sql\nSELECT AVG(ap.cost_per_click) AS average_cpc\nFROM ad_performance ap\nJOIN ads a ON ap.ad_id = a.ad_id\nWHERE a.active = 1\nAND ap.date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY);\n```",
        "prompt_token_number": 172,
        "response_token_number": 55,
        "response_text_processed": "SELECT AVG(ap.cost_per_click) AS average_cpc FROM ad_performance ap JOIN ads a ON ap.ad_id = a.ad_id WHERE a.active = 1 AND ap.date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)"
    },
    {
        "id": 33683,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['price', 'category', 'name', 'product_id', 'stock_quantity', 'product_name', 'on_sale', 'rating', 'category_id', 'id']} and \n# the user question: Retrieve the names and prices of all products with a price greater than $50 that are not currently on sale.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and prices of all products with a price greater than $50 that are not currently on sale.",
        "output": "SELECT name, price FROM products WHERE price > 50 AND on_sale = 0;",
        "schema": "advertising",
        "processed_schema_content": {
            "products": [
                "price",
                "category",
                "name",
                "product_id",
                "stock_quantity",
                "product_name",
                "on_sale",
                "rating",
                "category_id",
                "id"
            ]
        },
        "response_text": "```sql\nSELECT product_name, price \nFROM products \nWHERE price > 50 AND on_sale = 0;\n```",
        "prompt_token_number": 118,
        "response_token_number": 25,
        "response_text_processed": "SELECT product_name, price FROM products WHERE price > 50 AND on_sale = 0"
    },
    {
        "id": 33686,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'customers': ['customer_id', 'name', 'email', 'phone', 'address', 'country', 'first_name', 'last_name', 'date_created', 'marketing_channel', 'customer_name'], 'orders': ['customer_id', 'date_placed', 'order_id', 'date_shipped', 'order_total', 'total_price', 'sales_channel', 'order_date', 'payment_date'], 'products': ['price', 'category', 'name', 'product_id', 'stock_quantity', 'product_name', 'on_sale', 'rating', 'category_id', 'id'], 'order_items': ['price', 'order_id', 'quantity', 'product_id', 'total_price', 'order_date', 'TOP']} and \n# the user question: Retrieve the top 10 customers with the highest total amount spent on orders.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the top 10 customers with the highest total amount spent on orders.",
        "output": "SELECT customers.first_name, customers.last_name, SUM(order_items.quantity * products.price) AS total_spent FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id GROUP BY customers.customer_id ORDER BY total_spent DESC LIMIT 10;",
        "schema": "advertising",
        "processed_schema_content": {
            "customers": [
                "customer_id",
                "name",
                "email",
                "phone",
                "address",
                "country",
                "first_name",
                "last_name",
                "date_created",
                "marketing_channel",
                "customer_name"
            ],
            "orders": [
                "customer_id",
                "date_placed",
                "order_id",
                "date_shipped",
                "order_total",
                "total_price",
                "sales_channel",
                "order_date",
                "payment_date"
            ],
            "products": [
                "price",
                "category",
                "name",
                "product_id",
                "stock_quantity",
                "product_name",
                "on_sale",
                "rating",
                "category_id",
                "id"
            ],
            "order_items": [
                "price",
                "order_id",
                "quantity",
                "product_id",
                "total_price",
                "order_date",
                "TOP"
            ]
        },
        "response_text": "```sql\nSELECT c.customer_id, c.name, SUM(o.order_total) AS total_spent\nFROM customers c\nJOIN orders o ON c.customer_id = o.customer_id\nGROUP BY c.customer_id, c.name\nORDER BY total_spent DESC\nLIMIT 10;\n```",
        "prompt_token_number": 223,
        "response_token_number": 58,
        "response_text_processed": "SELECT c.customer_id, c.name, SUM(o.order_total) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name ORDER BY total_spent DESC LIMIT 10"
    },
    {
        "id": 33688,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['price', 'category', 'name', 'product_id', 'stock_quantity', 'product_name', 'on_sale', 'rating', 'category_id', 'id']} and \n# the user question: Retrieve the average rating of all products in the \"home appliances\" category.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the average rating of all products in the \"home appliances\" category.",
        "output": "SELECT AVG(rating) AS avg_rating FROM products WHERE category = 'home appliances';",
        "schema": "advertising",
        "processed_schema_content": {
            "products": [
                "price",
                "category",
                "name",
                "product_id",
                "stock_quantity",
                "product_name",
                "on_sale",
                "rating",
                "category_id",
                "id"
            ]
        },
        "response_text": "```sql\nSELECT AVG(rating)\nFROM products\nWHERE category = 'home appliances';\n```",
        "prompt_token_number": 111,
        "response_token_number": 19,
        "response_text_processed": "SELECT AVG(rating) FROM products WHERE category = 'home appliances'"
    },
    {
        "id": 33696,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['price', 'category', 'name', 'product_id', 'stock_quantity', 'product_name', 'on_sale', 'rating', 'category_id', 'id']} and \n# the user question: Retrieve the name and price of all products that have a price greater than $50 and are in the electronics category. query:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and price of all products that have a price greater than $50 and are in the electronics category. query:",
        "output": "SELECT name, price FROM products WHERE price > 50 AND category = 'electronics';",
        "schema": "advertising",
        "processed_schema_content": {
            "products": [
                "price",
                "category",
                "name",
                "product_id",
                "stock_quantity",
                "product_name",
                "on_sale",
                "rating",
                "category_id",
                "id"
            ]
        },
        "response_text": "```sql\nSELECT name, price \nFROM products \nWHERE price > 50 AND category = 'electronics';\n```",
        "prompt_token_number": 122,
        "response_token_number": 23,
        "response_text_processed": "SELECT name, price FROM products WHERE price > 50 AND category = 'electronics'"
    },
    {
        "id": 33702,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Vote': ['election_id', 'voter_id', 'id'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id']} and \n# the user question: Find the total number of votes cast in the 2020 US Presidential Election:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total number of votes cast in the 2020 US Presidential Election:",
        "output": "SELECT COUNT(*) FROM Vote WHERE election_id = ( SELECT id FROM Election WHERE date = '2020-11-03' AND country_id = 1 );",
        "schema": "political_science",
        "processed_schema_content": {
            "Vote": [
                "election_id",
                "voter_id",
                "id"
            ],
            "Election": [
                "country_id",
                "id",
                "winner_party_id",
                "region",
                "date",
                "party_id",
                "year",
                "constituency_id"
            ]
        },
        "response_text": "```sql\nSELECT COUNT(*) AS total_votes\nFROM Vote\nJOIN Election ON Vote.election_id = Election.id\nWHERE Election.country_id = 'USA' AND Election.year = 2020;\n```",
        "prompt_token_number": 125,
        "response_token_number": 41,
        "response_text_processed": "SELECT COUNT(*) AS total_votes FROM Vote JOIN Election ON Vote.election_id = Election.id WHERE Election.country_id = 'USA' AND Election.year = 2020"
    },
    {
        "id": 33703,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded']} and \n# the user question: List all the political parties in the database and the total number of politicians belonging to each party:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List all the political parties in the database and the total number of politicians belonging to each party:",
        "output": "SELECT PoliticalParty.name, COUNT(*) AS num_politicians FROM Politician JOIN PoliticalParty ON Politician.political_party = PoliticalParty.id GROUP BY PoliticalParty.name;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "PoliticalParty": [
                "ideology",
                "id",
                "name",
                "political_party",
                "country_id",
                "number_of_seats",
                "number_of_members",
                "number_of_female_members",
                "total_spending",
                "total_revenue",
                "total_funding",
                "num_seats",
                "num_members",
                "date_founded"
            ]
        },
        "response_text": "```sql\nSELECT p.id, p.name, COUNT(pol.id) AS total_politicians\nFROM PoliticalParty p\nLEFT JOIN Politician pol ON p.id = pol.party_id\nGROUP BY p.id, p.name;\n```",
        "prompt_token_number": 237,
        "response_token_number": 47,
        "response_text_processed": "SELECT p.id, p.name, COUNT(pol.id) AS total_politicians FROM PoliticalParty p LEFT JOIN Politician pol ON p.id = pol.party_id GROUP BY p.id, p.name"
    },
    {
        "id": 33705,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the average area of all the countries in the database, grouped by region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average area of all the countries in the database, grouped by region:",
        "output": "SELECT region, AVG(area) FROM Country GROUP BY region;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT region, AVG(area) AS average_area\nFROM Country\nGROUP BY region;\n```",
        "prompt_token_number": 285,
        "response_token_number": 21,
        "response_text_processed": "SELECT region, AVG(area) AS average_area FROM Country GROUP BY region"
    },
    {
        "id": 33706,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id']} and \n# the user question: Find the number of elections in the database that were won by a political party with \"conservative\" in their name:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of elections in the database that were won by a political party with \"conservative\" in their name:",
        "output": "SELECT COUNT(*) FROM Election WHERE winner_party_id IN ( SELECT id FROM PoliticalParty WHERE name LIKE '%Conservative%' );",
        "schema": "political_science",
        "processed_schema_content": {
            "PoliticalParty": [
                "ideology",
                "id",
                "name",
                "political_party",
                "country_id",
                "number_of_seats",
                "number_of_members",
                "number_of_female_members",
                "total_spending",
                "total_revenue",
                "total_funding",
                "num_seats",
                "num_members",
                "date_founded"
            ],
            "Election": [
                "country_id",
                "id",
                "winner_party_id",
                "region",
                "date",
                "party_id",
                "year",
                "constituency_id"
            ]
        },
        "response_text": "```sql\nSELECT COUNT(*) \nFROM Election e\nJOIN PoliticalParty p ON e.winner_party_id = p.id\nWHERE p.name LIKE '%conservative%';\n```",
        "prompt_token_number": 186,
        "response_token_number": 35,
        "response_text_processed": "SELECT COUNT(*) FROM Election e JOIN PoliticalParty p ON e.winner_party_id = p.id WHERE p.name LIKE '%conservative%'"
    },
    {
        "id": 33709,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name of the country with the largest area:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name of the country with the largest area:",
        "output": "SELECT name FROM Country WHERE area = ( SELECT MAX(area) FROM Country );",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name \nFROM Country \nORDER BY area DESC \nLIMIT 1;\n```",
        "prompt_token_number": 280,
        "response_token_number": 19,
        "response_text_processed": "SELECT name FROM Country ORDER BY area DESC LIMIT 1"
    },
    {
        "id": 33711,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state']} and \n# the user question: List the name and birthdate of the oldest politician in the database:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the name and birthdate of the oldest politician in the database:",
        "output": "SELECT name, birthdate FROM Politician ORDER BY birthdate ASC LIMIT 1;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ]
        },
        "response_text": "```sql\nSELECT name, birthdate \nFROM Politician \nORDER BY birthdate ASC \nLIMIT 1;\n```",
        "prompt_token_number": 164,
        "response_token_number": 24,
        "response_text_processed": "SELECT name, birthdate FROM Politician ORDER BY birthdate ASC LIMIT 1"
    },
    {
        "id": 33712,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the total number of countries in each region, ordered by region name:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total number of countries in each region, ordered by region name:",
        "output": "SELECT region, COUNT(*) AS num_countries FROM Country GROUP BY region ORDER BY region ASC;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT region, COUNT(id) AS number_of_countries\nFROM Country\nGROUP BY region\nORDER BY region;\n```",
        "prompt_token_number": 284,
        "response_token_number": 26,
        "response_text_processed": "SELECT region, COUNT(id) AS number_of_countries FROM Country GROUP BY region ORDER BY region"
    },
    {
        "id": 33714,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: List the name and population of all countries with a population greater than 100 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the name and population of all countries with a population greater than 100 million:",
        "output": "SELECT name, population FROM Country WHERE population > 100000000;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population\nFROM Country\nWHERE population > 100000000;\n```",
        "prompt_token_number": 286,
        "response_token_number": 20,
        "response_text_processed": "SELECT name, population FROM Country WHERE population > 100000000"
    },
    {
        "id": 33716,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the average population density of all the countries in the \"Europe\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average population density of all the countries in the \"Europe\" region:",
        "output": "SELECT AVG(population / area) AS avg_density FROM Country WHERE region = 'Europe';",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT AVG(population_density) \nFROM Country \nWHERE region = 'Europe';\n```",
        "prompt_token_number": 285,
        "response_token_number": 20,
        "response_text_processed": "SELECT AVG(population_density) FROM Country WHERE region = 'Europe'"
    },
    {
        "id": 33722,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id']} and \n# the user question: List the names and ideologies of all the political parties in the database that have won at least one election:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names and ideologies of all the political parties in the database that have won at least one election:",
        "output": "SELECT PoliticalParty.name, PoliticalParty.ideology FROM PoliticalParty JOIN Election ON PoliticalParty.id = Election.winner_party_id GROUP BY PoliticalParty.name;",
        "schema": "political_science",
        "processed_schema_content": {
            "PoliticalParty": [
                "ideology",
                "id",
                "name",
                "political_party",
                "country_id",
                "number_of_seats",
                "number_of_members",
                "number_of_female_members",
                "total_spending",
                "total_revenue",
                "total_funding",
                "num_seats",
                "num_members",
                "date_founded"
            ],
            "Election": [
                "country_id",
                "id",
                "winner_party_id",
                "region",
                "date",
                "party_id",
                "year",
                "constituency_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT p.name, p.ideology\nFROM PoliticalParty p\nJOIN Election e ON p.id = e.winner_party_id;\n```",
        "prompt_token_number": 183,
        "response_token_number": 31,
        "response_text_processed": "SELECT DISTINCT p.name, p.ideology FROM PoliticalParty p JOIN Election e ON p.id = e.winner_party_id"
    },
    {
        "id": 33725,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 most populous countries in the \"Asia\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population of the 5 most populous countries in the \"Asia\" region:",
        "output": "SELECT name, population FROM Country WHERE region = 'Asia' ORDER BY population DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population\nFROM Country\nWHERE region = 'Asia'\nORDER BY population DESC\nLIMIT 5;\n```",
        "prompt_token_number": 288,
        "response_token_number": 27,
        "response_text_processed": "SELECT name, population FROM Country WHERE region = 'Asia' ORDER BY population DESC LIMIT 5"
    },
    {
        "id": 33728,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded']} and \n# the user question: List the name and ideology of the political party with the most politicians who were born after 1980:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the name and ideology of the political party with the most politicians who were born after 1980:",
        "output": "SELECT PoliticalParty.name, PoliticalParty.ideology FROM PoliticalParty JOIN ( SELECT political_party, COUNT(*) AS num_politicians FROM Politician WHERE birthdate > '1980-01-01' GROUP BY political_party ORDER BY num_politicians DESC LIMIT 1 ) AS max_party ON PoliticalParty.id = max_party.political_party;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "PoliticalParty": [
                "ideology",
                "id",
                "name",
                "political_party",
                "country_id",
                "number_of_seats",
                "number_of_members",
                "number_of_female_members",
                "total_spending",
                "total_revenue",
                "total_funding",
                "num_seats",
                "num_members",
                "date_founded"
            ]
        },
        "response_text": "```sql\nSELECT p2.name, p2.ideology\nFROM PoliticalParty p2\nJOIN (\n    SELECT party_id, COUNT(*) AS num_politicians\n    FROM Politician\n    WHERE birthdate > '1980-01-01'\n    GROUP BY party_id\n    ORDER BY num_politicians DESC\n    LIMIT 1\n) p1 ON p2.id = p1.party_id;\n```",
        "prompt_token_number": 239,
        "response_token_number": 86,
        "response_text_processed": "SELECT p2.name, p2.ideology FROM PoliticalParty p2 JOIN ( SELECT party_id, COUNT(*) AS num_politicians FROM Politician WHERE birthdate > '1980-01-01' GROUP BY party_id ORDER BY num_politicians DESC LIMIT 1 ) p1 ON p2.id = p1.party_id"
    },
    {
        "id": 33731,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded'], 'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id']} and \n# the user question: List the names and ideologies of all the political parties in the database that have won at least one election in the \"North America\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names and ideologies of all the political parties in the database that have won at least one election in the \"North America\" region:",
        "output": "SELECT DISTINCT PoliticalParty.name, PoliticalParty.ideology FROM PoliticalParty JOIN Election ON PoliticalParty.id = Election.winner_party_id JOIN Country ON Election.country_id = Country.id WHERE Country.region = 'North America';",
        "schema": "political_science",
        "processed_schema_content": {
            "PoliticalParty": [
                "ideology",
                "id",
                "name",
                "political_party",
                "country_id",
                "number_of_seats",
                "number_of_members",
                "number_of_female_members",
                "total_spending",
                "total_revenue",
                "total_funding",
                "num_seats",
                "num_members",
                "date_founded"
            ],
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ],
            "Election": [
                "country_id",
                "id",
                "winner_party_id",
                "region",
                "date",
                "party_id",
                "year",
                "constituency_id"
            ]
        },
        "response_text": "```sql\nSELECT p.name, p.ideology\nFROM PoliticalParty p\nJOIN Election e ON p.id = e.winner_party_id\nJOIN Country c ON e.country_id = c.id\nWHERE c.region = 'North America'\nGROUP BY p.name, p.ideology;\n```",
        "prompt_token_number": 400,
        "response_token_number": 58,
        "response_text_processed": "SELECT p.name, p.ideology FROM PoliticalParty p JOIN Election e ON p.id = e.winner_party_id JOIN Country c ON e.country_id = c.id WHERE c.region = 'North America' GROUP BY p.name, p.ideology"
    },
    {
        "id": 33732,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state']} and \n# the user question: List the name and birthdate of the youngest female politician in the database:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the name and birthdate of the youngest female politician in the database:",
        "output": "SELECT name, birthdate FROM Politician WHERE gender = 'Female' ORDER BY birthdate DESC LIMIT 1;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ]
        },
        "response_text": "```sql\nSELECT name, birthdate \nFROM Politician \nWHERE gender = 'female' \nORDER BY birthdate DESC \nLIMIT 1;\n```",
        "prompt_token_number": 165,
        "response_token_number": 31,
        "response_text_processed": "SELECT name, birthdate FROM Politician WHERE gender = 'female' ORDER BY birthdate DESC LIMIT 1"
    },
    {
        "id": 33733,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 3 least populous countries in the \"Europe\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population of the 3 least populous countries in the \"Europe\" region:",
        "output": "SELECT name, population FROM Country WHERE region = 'Europe' ORDER BY population ASC LIMIT 3;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population\nFROM Country\nWHERE region = 'Europe'\nORDER BY population ASC\nLIMIT 3;\n```",
        "prompt_token_number": 288,
        "response_token_number": 27,
        "response_text_processed": "SELECT name, population FROM Country WHERE region = 'Europe' ORDER BY population ASC LIMIT 3"
    },
    {
        "id": 33738,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 3 smallest countries in the \"South America\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and area of the 3 smallest countries in the \"South America\" region:",
        "output": "SELECT name, area FROM Country WHERE region = 'South America' ORDER BY area ASC LIMIT 3;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, area\nFROM Country\nWHERE region = 'South America'\nORDER BY area ASC\nLIMIT 3;\n```",
        "prompt_token_number": 288,
        "response_token_number": 28,
        "response_text_processed": "SELECT name, area FROM Country WHERE region = 'South America' ORDER BY area ASC LIMIT 3"
    },
    {
        "id": 33740,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 most populous countries in the \"North America\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population of the 5 most populous countries in the \"North America\" region:",
        "output": "SELECT name, population FROM Country WHERE region = 'North America' ORDER BY population DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population \nFROM Country \nWHERE region = 'North America' \nORDER BY population DESC \nLIMIT 5;\n```",
        "prompt_token_number": 289,
        "response_token_number": 29,
        "response_text_processed": "SELECT name, population FROM Country WHERE region = 'North America' ORDER BY population DESC LIMIT 5"
    },
    {
        "id": 33742,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id']} and \n# the user question: Find the total number of elections held in each country in the database:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total number of elections held in each country in the database:",
        "output": "SELECT Country.name, COUNT(*) AS num_elections FROM Country JOIN Election ON Country.id = Election.country_id GROUP BY Country.name;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ],
            "Election": [
                "country_id",
                "id",
                "winner_party_id",
                "region",
                "date",
                "party_id",
                "year",
                "constituency_id"
            ]
        },
        "response_text": "```sql\nSELECT c.name AS country_name, COUNT(e.id) AS total_elections\nFROM Country AS c\nLEFT JOIN Election AS e ON c.id = e.country_id\nGROUP BY c.name;\n```",
        "prompt_token_number": 318,
        "response_token_number": 43,
        "response_text_processed": "SELECT c.name AS country_name, COUNT(e.id) AS total_elections FROM Country AS c LEFT JOIN Election AS e ON c.id = e.country_id GROUP BY c.name"
    },
    {
        "id": 33743,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 3 least populous countries in the \"Oceania\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population of the 3 least populous countries in the \"Oceania\" region:",
        "output": "SELECT name, population FROM Country WHERE region = 'Oceania' ORDER BY population ASC LIMIT 3;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population \nFROM Country \nWHERE region = 'Oceania' \nORDER BY population ASC \nLIMIT 3;\n```",
        "prompt_token_number": 290,
        "response_token_number": 30,
        "response_text_processed": "SELECT name, population FROM Country WHERE region = 'Oceania' ORDER BY population ASC LIMIT 3"
    },
    {
        "id": 33744,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state']} and \n# the user question: List the name and birthdate of the oldest female politician in the database:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the name and birthdate of the oldest female politician in the database:",
        "output": "SELECT name, birthdate FROM Politician WHERE gender = 'Female' ORDER BY birthdate ASC LIMIT 1;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ]
        },
        "response_text": "```sql\nSELECT name, birthdate \nFROM Politician \nWHERE gender = 'female' \nORDER BY birthdate ASC \nLIMIT 1;\n```",
        "prompt_token_number": 165,
        "response_token_number": 31,
        "response_text_processed": "SELECT name, birthdate FROM Politician WHERE gender = 'female' ORDER BY birthdate ASC LIMIT 1"
    },
    {
        "id": 33747,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id']} and \n# the user question: List the names and ideologies of all the political parties in the database that have won an election in the last 5 years:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names and ideologies of all the political parties in the database that have won an election in the last 5 years:",
        "output": "SELECT DISTINCT PoliticalParty.name, PoliticalParty.ideology FROM PoliticalParty JOIN Election ON PoliticalParty.id = Election.winner_party_id WHERE Election.date >= DATE('now', '-5 years');",
        "schema": "political_science",
        "processed_schema_content": {
            "PoliticalParty": [
                "ideology",
                "id",
                "name",
                "political_party",
                "country_id",
                "number_of_seats",
                "number_of_members",
                "number_of_female_members",
                "total_spending",
                "total_revenue",
                "total_funding",
                "num_seats",
                "num_members",
                "date_founded"
            ],
            "Election": [
                "country_id",
                "id",
                "winner_party_id",
                "region",
                "date",
                "party_id",
                "year",
                "constituency_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT pp.name, pp.ideology\nFROM PoliticalParty pp\nJOIN Election e ON pp.id = e.winner_party_id\nWHERE e.date >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR);\n```",
        "prompt_token_number": 187,
        "response_token_number": 46,
        "response_text_processed": "SELECT DISTINCT pp.name, pp.ideology FROM PoliticalParty pp JOIN Election e ON pp.id = e.winner_party_id WHERE e.date >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR)"
    },
    {
        "id": 33748,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state']} and \n# the user question: List the name and birthdate of the youngest male politician in the database:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the name and birthdate of the youngest male politician in the database:",
        "output": "SELECT name, birthdate FROM Politician WHERE gender = 'Male' ORDER BY birthdate DESC LIMIT 1;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ]
        },
        "response_text": "```sql\nSELECT name, birthdate \nFROM Politician \nWHERE gender = 'male' \nORDER BY birthdate DESC \nLIMIT 1;\n```",
        "prompt_token_number": 165,
        "response_token_number": 31,
        "response_text_processed": "SELECT name, birthdate FROM Politician WHERE gender = 'male' ORDER BY birthdate DESC LIMIT 1"
    },
    {
        "id": 33749,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 3 most populous countries in the \"Africa\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population of the 3 most populous countries in the \"Africa\" region:",
        "output": "SELECT name, population FROM Country WHERE region = 'Africa' ORDER BY population DESC LIMIT 3;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population\nFROM Country\nWHERE region = 'Africa'\nORDER BY population DESC\nLIMIT 3;\n```",
        "prompt_token_number": 288,
        "response_token_number": 27,
        "response_text_processed": "SELECT name, population FROM Country WHERE region = 'Africa' ORDER BY population DESC LIMIT 3"
    },
    {
        "id": 33751,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state']} and \n# the user question: List the name and birthdate of the oldest male politician in the database:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the name and birthdate of the oldest male politician in the database:",
        "output": "SELECT name, birthdate FROM Politician WHERE gender = 'Male' ORDER BY birthdate ASC LIMIT 1;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ]
        },
        "response_text": "```sql\nSELECT name, birthdate \nFROM Politician \nWHERE gender = 'male' \nORDER BY birthdate \nLIMIT 1;\n```",
        "prompt_token_number": 165,
        "response_token_number": 30,
        "response_text_processed": "SELECT name, birthdate FROM Politician WHERE gender = 'male' ORDER BY birthdate LIMIT 1"
    },
    {
        "id": 33752,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 smallest countries in the \"Europe\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and area of the 5 smallest countries in the \"Europe\" region:",
        "output": "SELECT name, area FROM Country WHERE region = 'Europe' ORDER BY area ASC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, area\nFROM Country\nWHERE region = 'Europe'\nORDER BY area ASC\nLIMIT 5;\n```",
        "prompt_token_number": 287,
        "response_token_number": 27,
        "response_text_processed": "SELECT name, area FROM Country WHERE region = 'Europe' ORDER BY area ASC LIMIT 5"
    },
    {
        "id": 33755,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state']} and \n# the user question: List the name and birthdate of the youngest politician in the database:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the name and birthdate of the youngest politician in the database:",
        "output": "SELECT name, birthdate FROM Politician ORDER BY birthdate DESC LIMIT 1;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ]
        },
        "response_text": "```sql\nSELECT name, birthdate \nFROM Politician \nORDER BY birthdate DESC \nLIMIT 1;\n```",
        "prompt_token_number": 164,
        "response_token_number": 24,
        "response_text_processed": "SELECT name, birthdate FROM Politician ORDER BY birthdate DESC LIMIT 1"
    },
    {
        "id": 33756,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 3 most populous countries in the \"Asia\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population of the 3 most populous countries in the \"Asia\" region:",
        "output": "SELECT name, population FROM Country WHERE region = 'Asia' ORDER BY population DESC LIMIT 3;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population \nFROM Country \nWHERE region = 'Asia' \nORDER BY population DESC \nLIMIT 3;\n```",
        "prompt_token_number": 288,
        "response_token_number": 28,
        "response_text_processed": "SELECT name, population FROM Country WHERE region = 'Asia' ORDER BY population DESC LIMIT 3"
    },
    {
        "id": 33759,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 largest countries in the \"Asia\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and area of the 5 largest countries in the \"Asia\" region:",
        "output": "SELECT name, area FROM Country WHERE region = 'Asia' ORDER BY area DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, area\nFROM Country\nWHERE region = 'Asia'\nORDER BY area DESC\nLIMIT 5;\n```",
        "prompt_token_number": 287,
        "response_token_number": 27,
        "response_text_processed": "SELECT name, area FROM Country WHERE region = 'Asia' ORDER BY area DESC LIMIT 5"
    },
    {
        "id": 33762,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 3 smallest countries in the \"Australia and New Zealand\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and area of the 3 smallest countries in the \"Australia and New Zealand\" region:",
        "output": "SELECT name, area FROM Country WHERE region = 'Australia and New Zealand' ORDER BY area ASC LIMIT 3;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, area\nFROM Country\nWHERE region = 'Australia and New Zealand'\nORDER BY area ASC\nLIMIT 3;\n```",
        "prompt_token_number": 290,
        "response_token_number": 30,
        "response_text_processed": "SELECT name, area FROM Country WHERE region = 'Australia and New Zealand' ORDER BY area ASC LIMIT 3"
    },
    {
        "id": 33764,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded']} and \n# the user question: List the names and ideologies of all the political parties in the database that have at least 2 female politicians who were born in the same year:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names and ideologies of all the political parties in the database that have at least 2 female politicians who were born in the same year:",
        "output": "SELECT PoliticalParty.name, PoliticalParty.ideology FROM PoliticalParty JOIN ( SELECT political_party, COUNT(*) AS num_politicians, strftime('%Y', birthdate) AS birthyear FROM Politician WHERE gender = 'Female' GROUP BY political_party, birthyear HAVING num_politicians >= 2 ) AS party_count ON PoliticalParty.id = party_count.political_party;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "PoliticalParty": [
                "ideology",
                "id",
                "name",
                "political_party",
                "country_id",
                "number_of_seats",
                "number_of_members",
                "number_of_female_members",
                "total_spending",
                "total_revenue",
                "total_funding",
                "num_seats",
                "num_members",
                "date_founded"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT pp.name, pp.ideology\nFROM PoliticalParty pp\nJOIN Politician p ON pp.id = p.party_id\nWHERE p.id IN (\n    SELECT p1.id\n    FROM Politician p1\n    JOIN Politician p2 ON p1.birth_date = p2.birth_date\n    WHERE p1.gender = 'Female' AND p2.gender = 'Female' AND p1.id != p2.id\n    GROUP BY p1.party_id, p1.birth_date\n    HAVING COUNT(DISTINCT p1.id) >= 2\n)\n```",
        "prompt_token_number": 247,
        "response_token_number": 120,
        "response_text_processed": "SELECT DISTINCT pp.name, pp.ideology FROM PoliticalParty pp JOIN Politician p ON pp.id = p.party_id WHERE p.id IN ( SELECT p1.id FROM Politician p1 JOIN Politician p2 ON p1.birth_date = p2.birth_date WHERE p1.gender = 'Female' AND p2.gender = 'Female' AND p1.id != p2.id GROUP BY p1.party_id, p1.birth_date HAVING COUNT(DISTINCT p1.id) >= 2 ) ```"
    },
    {
        "id": 33765,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 most populous countries in the \"Europe\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population of the 5 most populous countries in the \"Europe\" region:",
        "output": "SELECT name, population FROM Country WHERE region = 'Europe' ORDER BY population DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population\nFROM Country\nWHERE region = 'Europe'\nORDER BY population DESC\nLIMIT 5;\n```",
        "prompt_token_number": 288,
        "response_token_number": 27,
        "response_text_processed": "SELECT name, population FROM Country WHERE region = 'Europe' ORDER BY population DESC LIMIT 5"
    },
    {
        "id": 33767,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded']} and \n# the user question: List the names and ideologies of all the political parties in the database that have at least 4 male politicians who were born in the same year:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names and ideologies of all the political parties in the database that have at least 4 male politicians who were born in the same year:",
        "output": "SELECT PoliticalParty.name, PoliticalParty.ideology FROM PoliticalParty JOIN ( SELECT political_party, COUNT(*) AS num_politicians, strftime('%Y', birthdate) AS birthyear FROM Politician WHERE gender = 'Male' GROUP BY political_party, birthyear HAVING num_politicians >= 4 ) AS party_count ON PoliticalParty.id = party_count.political_party;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "PoliticalParty": [
                "ideology",
                "id",
                "name",
                "political_party",
                "country_id",
                "number_of_seats",
                "number_of_members",
                "number_of_female_members",
                "total_spending",
                "total_revenue",
                "total_funding",
                "num_seats",
                "num_members",
                "date_founded"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT p.name, pp.ideology\nFROM PoliticalParty pp\nJOIN Politician p ON pp.id = p.party_id\nWHERE p.gender = 'male'\nGROUP BY p.party_id, pp.name, pp.ideology\nHAVING COUNT(DISTINCT p.id) >= 4 AND COUNT(DISTINCT YEAR(p.birthdate)) = 1;\n```",
        "prompt_token_number": 247,
        "response_token_number": 76,
        "response_text_processed": "SELECT DISTINCT p.name, pp.ideology FROM PoliticalParty pp JOIN Politician p ON pp.id = p.party_id WHERE p.gender = 'male' GROUP BY p.party_id, pp.name, pp.ideology HAVING COUNT(DISTINCT p.id) >= 4 AND COUNT(DISTINCT YEAR(p.birthdate)) = 1"
    },
    {
        "id": 33768,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 3 largest countries in the \"North America\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and area of the 3 largest countries in the \"North America\" region:",
        "output": "SELECT name, area FROM Country WHERE region = 'North America' ORDER BY area DESC LIMIT 3;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, area \nFROM Country \nWHERE region = 'North America' \nORDER BY area DESC \nLIMIT 3;\n```",
        "prompt_token_number": 288,
        "response_token_number": 29,
        "response_text_processed": "SELECT name, area FROM Country WHERE region = 'North America' ORDER BY area DESC LIMIT 3"
    },
    {
        "id": 33770,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 least populous countries in the \"South America\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population of the 5 least populous countries in the \"South America\" region:",
        "output": "SELECT name, population FROM Country WHERE region = 'South America' ORDER BY population ASC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population \nFROM Country \nWHERE region = 'South America' \nORDER BY population ASC \nLIMIT 5;\n```",
        "prompt_token_number": 289,
        "response_token_number": 29,
        "response_text_processed": "SELECT name, population FROM Country WHERE region = 'South America' ORDER BY population ASC LIMIT 5"
    },
    {
        "id": 33773,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 3 smallest countries in the \"Africa\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and area of the 3 smallest countries in the \"Africa\" region:",
        "output": "SELECT name, area FROM Country WHERE region = 'Africa' ORDER BY area ASC LIMIT 3;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, area \nFROM Country \nWHERE region = 'Africa' \nORDER BY area ASC \nLIMIT 3;\n```",
        "prompt_token_number": 287,
        "response_token_number": 28,
        "response_text_processed": "SELECT name, area FROM Country WHERE region = 'Africa' ORDER BY area ASC LIMIT 3"
    },
    {
        "id": 33781,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 least populous countries in the \"Oceania\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population of the 5 least populous countries in the \"Oceania\" region:",
        "output": "SELECT name, population FROM Country WHERE region = 'Oceania' ORDER BY population ASC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population \nFROM Country \nWHERE region = 'Oceania' \nORDER BY population ASC \nLIMIT 5;\n```",
        "prompt_token_number": 290,
        "response_token_number": 30,
        "response_text_processed": "SELECT name, population FROM Country WHERE region = 'Oceania' ORDER BY population ASC LIMIT 5"
    },
    {
        "id": 33788,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 least populous countries in the \"Africa\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population of the 5 least populous countries in the \"Africa\" region:",
        "output": "SELECT name, population FROM Country WHERE region = 'Africa' ORDER BY population ASC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population \nFROM Country\nWHERE region = 'Africa'\nORDER BY population ASC \nLIMIT 5;\n```",
        "prompt_token_number": 288,
        "response_token_number": 27,
        "response_text_processed": "SELECT name, population FROM Country WHERE region = 'Africa' ORDER BY population ASC LIMIT 5"
    },
    {
        "id": 33791,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 smallest countries in the \"Asia\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and area of the 5 smallest countries in the \"Asia\" region:",
        "output": "SELECT name, area FROM Country WHERE region = 'Asia' ORDER BY area ASC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, area \nFROM Country \nWHERE region = 'Asia' \nORDER BY area ASC \nLIMIT 5;\n```",
        "prompt_token_number": 287,
        "response_token_number": 28,
        "response_text_processed": "SELECT name, area FROM Country WHERE region = 'Asia' ORDER BY area ASC LIMIT 5"
    },
    {
        "id": 33794,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 most populous countries in the \"Oceania\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population of the 5 most populous countries in the \"Oceania\" region:",
        "output": "SELECT name, population FROM Country WHERE region = 'Oceania' ORDER BY population DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population \nFROM Country \nWHERE region = 'Oceania' \nORDER BY population DESC \nLIMIT 5;\n```",
        "prompt_token_number": 290,
        "response_token_number": 30,
        "response_text_processed": "SELECT name, population FROM Country WHERE region = 'Oceania' ORDER BY population DESC LIMIT 5"
    },
    {
        "id": 33795,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Approval': ['politician_id', 'rating', 'date', 'voter_id'], 'Voter': ['id', 'gender', 'age', 'lgbtq', 'name', 'income', 'date_of_birth']} and \n# the user question: List the name and birthdate of the politician who has the highest number of approvals from voters who identify as LGBTQ+:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the name and birthdate of the politician who has the highest number of approvals from voters who identify as LGBTQ+:",
        "output": "SELECT Politician.name, COUNT(*) AS num_approvals_lgbtq FROM Approval JOIN Politician ON Approval.politician_id = Politician.id JOIN Voter ON Approval.voter_id = Voter.id WHERE Voter.lgbtq = 1 AND Approval.rating = 'approve' GROUP BY Politician.id ORDER BY num_approvals_lgbtq DESC LIMIT 1;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "Approval": [
                "politician_id",
                "rating",
                "date",
                "voter_id"
            ],
            "Voter": [
                "id",
                "gender",
                "age",
                "lgbtq",
                "name",
                "income",
                "date_of_birth"
            ]
        },
        "response_text": "```sql\nSELECT p.name, p.birthdate\nFROM Politician p\nJOIN Approval a ON p.id = a.politician_id\nJOIN Voter v ON a.voter_id = v.id\nWHERE v.lgbtq = 'Yes'\nGROUP BY p.id\nORDER BY COUNT(a.voter_id) DESC\nLIMIT 1;\n```",
        "prompt_token_number": 222,
        "response_token_number": 71,
        "response_text_processed": "SELECT p.name, p.birthdate FROM Politician p JOIN Approval a ON p.id = a.politician_id JOIN Voter v ON a.voter_id = v.id WHERE v.lgbtq = 'Yes' GROUP BY p.id ORDER BY COUNT(a.voter_id) DESC LIMIT 1"
    },
    {
        "id": 33796,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 largest countries in the \"Europe\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and area of the 5 largest countries in the \"Europe\" region:",
        "output": "SELECT name, area FROM Country WHERE region = 'Europe' ORDER BY area DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, area \nFROM Country \nWHERE region = 'Europe' \nORDER BY area DESC \nLIMIT 5;\n```",
        "prompt_token_number": 287,
        "response_token_number": 28,
        "response_text_processed": "SELECT name, area FROM Country WHERE region = 'Europe' ORDER BY area DESC LIMIT 5"
    },
    {
        "id": 33802,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 smallest countries in the \"South America\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and area of the 5 smallest countries in the \"South America\" region:",
        "output": "SELECT name, area FROM Country WHERE region = 'South America' ORDER BY area ASC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, area\nFROM Country\nWHERE region = 'South America'\nORDER BY area ASC\nLIMIT 5;\n```",
        "prompt_token_number": 288,
        "response_token_number": 28,
        "response_text_processed": "SELECT name, area FROM Country WHERE region = 'South America' ORDER BY area ASC LIMIT 5"
    },
    {
        "id": 33805,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Approval': ['politician_id', 'rating', 'date', 'voter_id'], 'Voter': ['id', 'gender', 'age', 'lgbtq', 'name', 'income', 'date_of_birth']} and \n# the user question: List the name and birthdate of the politician who has the highest number of neutral ratings from voters in the age range of 55-64:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the name and birthdate of the politician who has the highest number of neutral ratings from voters in the age range of 55-64:",
        "output": "SELECT Politician.name, COUNT(*) AS num_neutral_55_64 FROM Approval JOIN Politician ON Approval.politician_id = Politician.id JOIN Voter ON Approval.voter_id = Voter.id WHERE Approval.rating = 'neutral' AND Voter.age BETWEEN 55 AND 64 GROUP BY Politician.id ORDER BY num_neutral_55_64 DESC LIMIT 1;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "Approval": [
                "politician_id",
                "rating",
                "date",
                "voter_id"
            ],
            "Voter": [
                "id",
                "gender",
                "age",
                "lgbtq",
                "name",
                "income",
                "date_of_birth"
            ]
        },
        "response_text": "```sql\nSELECT p.name, p.birthdate\nFROM Politician p\nJOIN Approval a ON p.id = a.politician_id\nJOIN Voter v ON a.voter_id = v.id\nWHERE v.age BETWEEN 55 AND 64 AND a.rating = 'neutral'\nGROUP BY p.name, p.birthdate\nORDER BY COUNT(a.rating) DESC\nLIMIT 1;\n```",
        "prompt_token_number": 228,
        "response_token_number": 79,
        "response_text_processed": "SELECT p.name, p.birthdate FROM Politician p JOIN Approval a ON p.id = a.politician_id JOIN Voter v ON a.voter_id = v.id WHERE v.age BETWEEN 55 AND 64 AND a.rating = 'neutral' GROUP BY p.name, p.birthdate ORDER BY COUNT(a.rating) DESC LIMIT 1"
    },
    {
        "id": 33806,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 largest countries in the \"Africa\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and area of the 5 largest countries in the \"Africa\" region:",
        "output": "SELECT name, area FROM Country WHERE region = 'Africa' ORDER BY area DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, area \nFROM Country \nWHERE region = 'Africa' \nORDER BY area DESC \nLIMIT 5;\n```",
        "prompt_token_number": 287,
        "response_token_number": 28,
        "response_text_processed": "SELECT name, area FROM Country WHERE region = 'Africa' ORDER BY area DESC LIMIT 5"
    },
    {
        "id": 33808,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 smallest countries in the \"Europe\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population of the 5 smallest countries in the \"Europe\" region:",
        "output": "SELECT name, population FROM Country WHERE region = 'Europe' ORDER BY population ASC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population \nFROM Country \nWHERE region = 'Europe' \nORDER BY area ASC \nLIMIT 5;\n```",
        "prompt_token_number": 287,
        "response_token_number": 28,
        "response_text_processed": "SELECT name, population FROM Country WHERE region = 'Europe' ORDER BY area ASC LIMIT 5"
    },
    {
        "id": 33813,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 smallest countries in the \"South America\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population of the 5 smallest countries in the \"South America\" region:",
        "output": "SELECT name, population FROM Country WHERE region = 'South America' ORDER BY population ASC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population\nFROM Country\nWHERE region = 'South America'\nORDER BY area ASC\nLIMIT 5;\n```",
        "prompt_token_number": 288,
        "response_token_number": 28,
        "response_text_processed": "SELECT name, population FROM Country WHERE region = 'South America' ORDER BY area ASC LIMIT 5"
    },
    {
        "id": 33817,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 smallest countries in the \"Africa\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population of the 5 smallest countries in the \"Africa\" region:",
        "output": "SELECT name, population FROM Country WHERE region = 'Africa' ORDER BY population ASC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population \nFROM Country \nWHERE region = 'Africa' \nORDER BY area ASC \nLIMIT 5;\n```",
        "prompt_token_number": 287,
        "response_token_number": 28,
        "response_text_processed": "SELECT name, population FROM Country WHERE region = 'Africa' ORDER BY area ASC LIMIT 5"
    },
    {
        "id": 33819,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Approval': ['politician_id', 'rating', 'date', 'voter_id'], 'Voter': ['id', 'gender', 'age', 'lgbtq', 'name', 'income', 'date_of_birth']} and \n# the user question: List the name and birthdate of the politician who has the highest number of disapprovals from voters in the age range of 55-64:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the name and birthdate of the politician who has the highest number of disapprovals from voters in the age range of 55-64:",
        "output": "SELECT Politician.name, COUNT(*) AS num_disapprovals_55_64 FROM Approval JOIN Politician ON Approval.politician_id = Politician.id JOIN Voter ON Approval.voter_id = Voter.id WHERE Approval.rating = 'disapprove' AND Voter.age BETWEEN 55 AND 64 GROUP BY Politician.id ORDER BY num_disapprovals_55_64 DESC LIMIT 1;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "Approval": [
                "politician_id",
                "rating",
                "date",
                "voter_id"
            ],
            "Voter": [
                "id",
                "gender",
                "age",
                "lgbtq",
                "name",
                "income",
                "date_of_birth"
            ]
        },
        "response_text": "```sql\nSELECT p.name, p.birthdate\nFROM Politician p\nJOIN Approval a ON p.id = a.politician_id\nJOIN Voter v ON a.voter_id = v.id\nWHERE a.rating = 'disapprove' AND v.age BETWEEN 55 AND 64\nGROUP BY p.name, p.birthdate\nORDER BY COUNT(a.rating) DESC\nLIMIT 1;\n```",
        "prompt_token_number": 229,
        "response_token_number": 81,
        "response_text_processed": "SELECT p.name, p.birthdate FROM Politician p JOIN Approval a ON p.id = a.politician_id JOIN Voter v ON a.voter_id = v.id WHERE a.rating = 'disapprove' AND v.age BETWEEN 55 AND 64 GROUP BY p.name, p.birthdate ORDER BY COUNT(a.rating) DESC LIMIT 1"
    },
    {
        "id": 33821,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Approval': ['politician_id', 'rating', 'date', 'voter_id'], 'Voter': ['id', 'gender', 'age', 'lgbtq', 'name', 'income', 'date_of_birth']} and \n# the user question: List the name and birthdate of the politician who has the highest number of approvals from voters in the age range of 65 and above:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the name and birthdate of the politician who has the highest number of approvals from voters in the age range of 65 and above:",
        "output": "SELECT Politician.name, COUNT(*) AS num_approvals_65_plus FROM Approval JOIN Politician ON Approval.politician_id = Politician.id JOIN Voter ON Approval.voter_id = Voter.id WHERE Approval.rating = 'approve' AND Voter.age >= 65 GROUP BY Politician.id ORDER BY num_approvals_65_plus DESC LIMIT 1;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "Approval": [
                "politician_id",
                "rating",
                "date",
                "voter_id"
            ],
            "Voter": [
                "id",
                "gender",
                "age",
                "lgbtq",
                "name",
                "income",
                "date_of_birth"
            ]
        },
        "response_text": "```sql\nSELECT P.name, P.birthdate \nFROM Politician P\nJOIN Approval A ON P.id = A.politician_id\nJOIN Voter V ON A.voter_id = V.id\nWHERE V.age >= 65\nGROUP BY P.id\nORDER BY COUNT(A.voter_id) DESC\nLIMIT 1;\n```",
        "prompt_token_number": 227,
        "response_token_number": 68,
        "response_text_processed": "SELECT P.name, P.birthdate FROM Politician P JOIN Approval A ON P.id = A.politician_id JOIN Voter V ON A.voter_id = V.id WHERE V.age >= 65 GROUP BY P.id ORDER BY COUNT(A.voter_id) DESC LIMIT 1"
    },
    {
        "id": 33822,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 smallest countries in the \"Oceania\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population of the 5 smallest countries in the \"Oceania\" region:",
        "output": "SELECT name, population FROM Country WHERE region = 'Oceania' ORDER BY population ASC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population \nFROM Country \nWHERE region = 'Oceania' \nORDER BY area ASC \nLIMIT 5;\n```",
        "prompt_token_number": 289,
        "response_token_number": 30,
        "response_text_processed": "SELECT name, population FROM Country WHERE region = 'Oceania' ORDER BY area ASC LIMIT 5"
    },
    {
        "id": 33824,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Approval': ['politician_id', 'rating', 'date', 'voter_id'], 'Voter': ['id', 'gender', 'age', 'lgbtq', 'name', 'income', 'date_of_birth']} and \n# the user question: List the name and birthdate of the politician who has the highest number of disapprovals from voters in the age range of 18-24:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the name and birthdate of the politician who has the highest number of disapprovals from voters in the age range of 18-24:",
        "output": "SELECT Politician.name, COUNT(*) AS num_disapprovals_18_24 FROM Approval JOIN Politician ON Approval.politician_id = Politician.id JOIN Voter ON Approval.voter_id = Voter.id WHERE Approval.rating = 'disapprove' AND Voter.age BETWEEN 18 AND 24 GROUP BY Politician.id ORDER BY num_disapprovals_18_24 DESC LIMIT 1;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "Approval": [
                "politician_id",
                "rating",
                "date",
                "voter_id"
            ],
            "Voter": [
                "id",
                "gender",
                "age",
                "lgbtq",
                "name",
                "income",
                "date_of_birth"
            ]
        },
        "response_text": "```sql\nSELECT p.name, p.birthdate\nFROM Politician p\nJOIN Approval a ON p.id = a.politician_id\nJOIN Voter v ON a.voter_id = v.id\nWHERE v.age BETWEEN 18 AND 24 AND a.rating = 'disapprove'\nGROUP BY p.id, p.name, p.birthdate\nORDER BY COUNT(a.rating) DESC\nLIMIT 1;\n```",
        "prompt_token_number": 229,
        "response_token_number": 83,
        "response_text_processed": "SELECT p.name, p.birthdate FROM Politician p JOIN Approval a ON p.id = a.politician_id JOIN Voter v ON a.voter_id = v.id WHERE v.age BETWEEN 18 AND 24 AND a.rating = 'disapprove' GROUP BY p.id, p.name, p.birthdate ORDER BY COUNT(a.rating) DESC LIMIT 1"
    },
    {
        "id": 33826,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 smallest countries in the \"Asia\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population of the 5 smallest countries in the \"Asia\" region:",
        "output": "SELECT name, population FROM Country WHERE region = 'Asia' ORDER BY population ASC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population\nFROM Country\nWHERE region = 'Asia'\nORDER BY area ASC\nLIMIT 5;\n```",
        "prompt_token_number": 287,
        "response_token_number": 27,
        "response_text_processed": "SELECT name, population FROM Country WHERE region = 'Asia' ORDER BY area ASC LIMIT 5"
    },
    {
        "id": 33830,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 largest countries in the \"Oceania\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and area of the 5 largest countries in the \"Oceania\" region:",
        "output": "SELECT name, area FROM Country WHERE region = 'Oceania' ORDER BY area DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, area\nFROM Country\nWHERE region = 'Oceania'\nORDER BY area DESC\nLIMIT 5;\n```",
        "prompt_token_number": 289,
        "response_token_number": 29,
        "response_text_processed": "SELECT name, area FROM Country WHERE region = 'Oceania' ORDER BY area DESC LIMIT 5"
    },
    {
        "id": 33849,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Approval': ['politician_id', 'rating', 'date', 'voter_id'], 'Voter': ['id', 'gender', 'age', 'lgbtq', 'name', 'income', 'date_of_birth']} and \n# the user question: List the name and birthdate of the politician who has the highest number of disapprovals from voters in the age range of 45-54:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the name and birthdate of the politician who has the highest number of disapprovals from voters in the age range of 45-54:",
        "output": "SELECT Politician.name, COUNT(*) AS num_disapprovals_45_54 FROM Approval JOIN Politician ON Approval.politician_id = Politician.id JOIN Voter ON Approval.voter_id = Voter.id WHERE Approval.rating = 'disapprove' AND Voter.age BETWEEN 45 AND 54 GROUP BY Politician.id ORDER BY num_disapprovals_45_54 DESC LIMIT 1;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "Approval": [
                "politician_id",
                "rating",
                "date",
                "voter_id"
            ],
            "Voter": [
                "id",
                "gender",
                "age",
                "lgbtq",
                "name",
                "income",
                "date_of_birth"
            ]
        },
        "response_text": "```sql\nSELECT p.name, p.birthdate\nFROM Politician p\nJOIN Approval a ON p.id = a.politician_id\nJOIN Voter v ON a.voter_id = v.id\nWHERE v.age BETWEEN 45 AND 54 AND a.rating = 'disapprove'\nGROUP BY p.name, p.birthdate\nORDER BY COUNT(a.rating) DESC\nLIMIT 1;\n```",
        "prompt_token_number": 229,
        "response_token_number": 80,
        "response_text_processed": "SELECT p.name, p.birthdate FROM Politician p JOIN Approval a ON p.id = a.politician_id JOIN Voter v ON a.voter_id = v.id WHERE v.age BETWEEN 45 AND 54 AND a.rating = 'disapprove' GROUP BY p.name, p.birthdate ORDER BY COUNT(a.rating) DESC LIMIT 1"
    },
    {
        "id": 33859,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population of the 5 largest countries in the \"Africa\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population of the 5 largest countries in the \"Africa\" region:",
        "output": "SELECT name, population FROM Country WHERE region = 'Africa' ORDER BY population DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population\nFROM Country\nWHERE region = 'Africa'\nORDER BY area DESC\nLIMIT 5;\n```",
        "prompt_token_number": 287,
        "response_token_number": 27,
        "response_text_processed": "SELECT name, population FROM Country WHERE region = 'Africa' ORDER BY area DESC LIMIT 5"
    },
    {
        "id": 33861,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 smallest countries in the \"Oceania\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and area of the 5 smallest countries in the \"Oceania\" region:",
        "output": "SELECT name, area FROM Country WHERE region = 'Oceania' ORDER BY area ASC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, area \nFROM Country \nWHERE region = 'Oceania' \nORDER BY area ASC \nLIMIT 5;\n```",
        "prompt_token_number": 289,
        "response_token_number": 30,
        "response_text_processed": "SELECT name, area FROM Country WHERE region = 'Oceania' ORDER BY area ASC LIMIT 5"
    },
    {
        "id": 33863,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and GDP of the 5 wealthiest countries in the \"Asia\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and GDP of the 5 wealthiest countries in the \"Asia\" region:",
        "output": "SELECT name, gdp FROM Country WHERE region = 'Asia' ORDER BY gdp DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, GDP\nFROM Country\nWHERE region = 'Asia'\nORDER BY GDP DESC\nLIMIT 5;\n```",
        "prompt_token_number": 287,
        "response_token_number": 27,
        "response_text_processed": "SELECT name, GDP FROM Country WHERE region = 'Asia' ORDER BY GDP DESC LIMIT 5"
    },
    {
        "id": 33866,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and GDP per capita of the 5 countries with the highest GDP and population greater than 100 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and GDP per capita of the 5 countries with the highest GDP and population greater than 100 million:",
        "output": "SELECT name, gdp_per_capita FROM Country WHERE population > 100000000 ORDER BY gdp DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, GDP_per_capita\nFROM Country\nWHERE population > 100000000\nORDER BY GDP DESC\nLIMIT 5;\n```",
        "prompt_token_number": 293,
        "response_token_number": 32,
        "response_text_processed": "SELECT name, GDP_per_capita FROM Country WHERE population > 100000000 ORDER BY GDP DESC LIMIT 5"
    },
    {
        "id": 33867,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded']} and \n# the user question: Find the name and total number of politicians in each political party in the database:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and total number of politicians in each political party in the database:",
        "output": "SELECT PoliticalParty.name, COUNT(Politician.id) AS num_members FROM PoliticalParty LEFT JOIN Politician ON PoliticalParty.id = Politician.political_party GROUP BY PoliticalParty.name;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "PoliticalParty": [
                "ideology",
                "id",
                "name",
                "political_party",
                "country_id",
                "number_of_seats",
                "number_of_members",
                "number_of_female_members",
                "total_spending",
                "total_revenue",
                "total_funding",
                "num_seats",
                "num_members",
                "date_founded"
            ]
        },
        "response_text": "```sql\nSELECT PoliticalParty.name, COUNT(Politician.id) AS total_number_of_politicians\nFROM PoliticalParty\nLEFT JOIN Politician ON PoliticalParty.id = Politician.party_id\nGROUP BY PoliticalParty.name;\n```",
        "prompt_token_number": 234,
        "response_token_number": 48,
        "response_text_processed": "SELECT PoliticalParty.name, COUNT(Politician.id) AS total_number_of_politicians FROM PoliticalParty LEFT JOIN Politician ON PoliticalParty.id = Politician.party_id GROUP BY PoliticalParty.name"
    },
    {
        "id": 33868,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and number of countries in each region in the database:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and number of countries in each region in the database:",
        "output": "SELECT region, COUNT(*) AS num_countries FROM Country GROUP BY region;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT region, COUNT(name) AS number_of_countries\nFROM Country\nGROUP BY region;\n```",
        "prompt_token_number": 283,
        "response_token_number": 22,
        "response_text_processed": "SELECT region, COUNT(name) AS number_of_countries FROM Country GROUP BY region"
    },
    {
        "id": 33870,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and GDP per capita of the 5 countries with the lowest GDP and population greater than 1 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and GDP per capita of the 5 countries with the lowest GDP and population greater than 1 million:",
        "output": "SELECT name, gdp_per_capita FROM Country WHERE population > 1000000 ORDER BY gdp_per_capita ASC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, gdp_per_capita \nFROM Country \nWHERE population > 1000000 \nORDER BY gdp ASC \nLIMIT 5;\n```",
        "prompt_token_number": 293,
        "response_token_number": 34,
        "response_text_processed": "SELECT name, gdp_per_capita FROM Country WHERE population > 1000000 ORDER BY gdp ASC LIMIT 5"
    },
    {
        "id": 33871,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population density of the 5 most densely populated countries in the database:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population density of the 5 most densely populated countries in the database:",
        "output": "SELECT name, population_density FROM Country ORDER BY population_density DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population_density\nFROM Country\nORDER BY population_density DESC\nLIMIT 5;\n```",
        "prompt_token_number": 287,
        "response_token_number": 23,
        "response_text_processed": "SELECT name, population_density FROM Country ORDER BY population_density DESC LIMIT 5"
    },
    {
        "id": 33872,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and life expectancy of the 5 countries with the highest life expectancy and a population greater than 1 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and life expectancy of the 5 countries with the highest life expectancy and a population greater than 1 million:",
        "output": "SELECT name, life_expectancy FROM Country WHERE population > 1000000 ORDER BY life_expectancy DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, life_expectancy\nFROM Country\nWHERE population > 1000000\nORDER BY life_expectancy DESC\nLIMIT 5;\n```",
        "prompt_token_number": 294,
        "response_token_number": 33,
        "response_text_processed": "SELECT name, life_expectancy FROM Country WHERE population > 1000000 ORDER BY life_expectancy DESC LIMIT 5"
    },
    {
        "id": 33873,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and GDP of the 5 countries with the highest GDP and a population greater than 10 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and GDP of the 5 countries with the highest GDP and a population greater than 10 million:",
        "output": "SELECT name, gdp FROM Country WHERE population > 10000000 ORDER BY gdp DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, GDP\nFROM Country\nWHERE population > 10000000\nORDER BY GDP DESC\nLIMIT 5;\n```",
        "prompt_token_number": 292,
        "response_token_number": 29,
        "response_text_processed": "SELECT name, GDP FROM Country WHERE population > 10000000 ORDER BY GDP DESC LIMIT 5"
    },
    {
        "id": 33874,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and literacy rate of the 5 countries with the highest literacy rate and a population greater than 5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and literacy rate of the 5 countries with the highest literacy rate and a population greater than 5 million:",
        "output": "SELECT name, literacy_rate FROM Country WHERE population > 5000000 ORDER BY literacy_rate DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, literacy_rate\nFROM Country\nWHERE population > 5000000\nORDER BY literacy_rate DESC\nLIMIT 5;\n```",
        "prompt_token_number": 294,
        "response_token_number": 31,
        "response_text_processed": "SELECT name, literacy_rate FROM Country WHERE population > 5000000 ORDER BY literacy_rate DESC LIMIT 5"
    },
    {
        "id": 33875,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and area of the 5 smallest countries in the database:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and area of the 5 smallest countries in the database:",
        "output": "SELECT name, area FROM Country ORDER BY area ASC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, area \nFROM Country \nORDER BY area \nLIMIT 5;\n```",
        "prompt_token_number": 284,
        "response_token_number": 20,
        "response_text_processed": "SELECT name, area FROM Country ORDER BY area LIMIT 5"
    },
    {
        "id": 33877,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population density of the 5 most densely populated countries in the \"Europe\" region:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population density of the 5 most densely populated countries in the \"Europe\" region:",
        "output": "SELECT name, population_density FROM Country WHERE region = 'Europe' ORDER BY population_density DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population_density\nFROM Country\nWHERE region = 'Europe'\nORDER BY population_density DESC\nLIMIT 5;\n```",
        "prompt_token_number": 290,
        "response_token_number": 29,
        "response_text_processed": "SELECT name, population_density FROM Country WHERE region = 'Europe' ORDER BY population_density DESC LIMIT 5"
    },
    {
        "id": 33878,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and GDP per capita of the 5 richest countries in the database:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and GDP per capita of the 5 richest countries in the database:",
        "output": "SELECT name, gdp_per_capita FROM Country ORDER BY gdp_per_capita DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, gdp_per_capita\nFROM Country\nORDER BY gdp_per_capita DESC\nLIMIT 5;\n```",
        "prompt_token_number": 286,
        "response_token_number": 29,
        "response_text_processed": "SELECT name, gdp_per_capita FROM Country ORDER BY gdp_per_capita DESC LIMIT 5"
    },
    {
        "id": 33879,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and HDI (Human Development Index) of the 5 countries with the highest HDI and a population greater than 20 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and HDI (Human Development Index) of the 5 countries with the highest HDI and a population greater than 20 million:",
        "output": "SELECT name, hdi FROM Country WHERE population > 20000000 ORDER BY hdi DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, hdi AS HDI \nFROM Country \nWHERE population > 20000000 \nORDER BY hdi DESC \nLIMIT 5;\n```",
        "prompt_token_number": 299,
        "response_token_number": 34,
        "response_text_processed": "SELECT name, hdi AS HDI FROM Country WHERE population > 20000000 ORDER BY hdi DESC LIMIT 5"
    },
    {
        "id": 33880,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and murder rate of the 5 countries with the highest murder rate and a population greater than 10 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and murder rate of the 5 countries with the highest murder rate and a population greater than 10 million:",
        "output": "SELECT name, murder_rate FROM Country WHERE population > 10000000 ORDER BY murder_rate DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, murder_rate\nFROM Country\nWHERE population > 10000000\nORDER BY murder_rate DESC\nLIMIT 5;\n```",
        "prompt_token_number": 294,
        "response_token_number": 31,
        "response_text_processed": "SELECT name, murder_rate FROM Country WHERE population > 10000000 ORDER BY murder_rate DESC LIMIT 5"
    },
    {
        "id": 33881,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population growth rate of the 5 countries with the highest population growth rate and a population greater than 50 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population growth rate of the 5 countries with the highest population growth rate and a population greater than 50 million:",
        "output": "SELECT name, population_growth_rate FROM Country WHERE population > 50000000 ORDER BY population_growth_rate DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population_growth_rate \nFROM Country \nWHERE population > 50000000 \nORDER BY population_growth_rate DESC \nLIMIT 5;\n```",
        "prompt_token_number": 296,
        "response_token_number": 33,
        "response_text_processed": "SELECT name, population_growth_rate FROM Country WHERE population > 50000000 ORDER BY population_growth_rate DESC LIMIT 5"
    },
    {
        "id": 33882,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and infant mortality rate of the 5 countries with the highest infant mortality rate and a population greater than 10 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and infant mortality rate of the 5 countries with the highest infant mortality rate and a population greater than 10 million:",
        "output": "SELECT name, infant_mortality_rate FROM Country WHERE population > 10000000 ORDER BY infant_mortality_rate DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, infant_mortality_rate \nFROM Country \nWHERE population > 10000000 \nORDER BY infant_mortality_rate DESC \nLIMIT 5;\n```",
        "prompt_token_number": 296,
        "response_token_number": 35,
        "response_text_processed": "SELECT name, infant_mortality_rate FROM Country WHERE population > 10000000 ORDER BY infant_mortality_rate DESC LIMIT 5"
    },
    {
        "id": 33883,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and GDP per capita of the 5 countries with the highest GDP per capita and a population greater than 1 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and GDP per capita of the 5 countries with the highest GDP per capita and a population greater than 1 million:",
        "output": "SELECT name, gdp_per_capita FROM Country WHERE population > 1000000 ORDER BY gdp_per_capita DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, gdp_per_capita \nFROM Country \nWHERE population > 1000000\nORDER BY gdp_per_capita DESC \nLIMIT 5;\n```",
        "prompt_token_number": 296,
        "response_token_number": 37,
        "response_text_processed": "SELECT name, gdp_per_capita FROM Country WHERE population > 1000000 ORDER BY gdp_per_capita DESC LIMIT 5"
    },
    {
        "id": 33884,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and poverty rate of the 5 countries with the highest poverty rate and a population greater than 50 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and poverty rate of the 5 countries with the highest poverty rate and a population greater than 50 million:",
        "output": "SELECT name, poverty_rate FROM Country WHERE population > 50000000 ORDER BY poverty_rate DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, poverty_rate\nFROM Country\nWHERE population > 50000000\nORDER BY poverty_rate DESC\nLIMIT 5;\n```",
        "prompt_token_number": 294,
        "response_token_number": 31,
        "response_text_processed": "SELECT name, poverty_rate FROM Country WHERE population > 50000000 ORDER BY poverty_rate DESC LIMIT 5"
    },
    {
        "id": 33885,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and life expectancy of the 5 countries with the highest life expectancy and a population greater than 10 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and life expectancy of the 5 countries with the highest life expectancy and a population greater than 10 million:",
        "output": "SELECT name, life_expectancy FROM Country WHERE population > 10000000 ORDER BY life_expectancy DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, life_expectancy\nFROM Country\nWHERE population > 10000000\nORDER BY life_expectancy DESC\nLIMIT 5;\n```",
        "prompt_token_number": 294,
        "response_token_number": 33,
        "response_text_processed": "SELECT name, life_expectancy FROM Country WHERE population > 10000000 ORDER BY life_expectancy DESC LIMIT 5"
    },
    {
        "id": 33886,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and unemployment rate of the 5 countries with the highest unemployment rate and a population greater than 20 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and unemployment rate of the 5 countries with the highest unemployment rate and a population greater than 20 million:",
        "output": "SELECT name, unemployment_rate FROM Country WHERE population > 20000000 ORDER BY unemployment_rate DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, unemployment_rate\nFROM Country\nWHERE population > 20000000\nORDER BY unemployment_rate DESC\nLIMIT 5;\n```",
        "prompt_token_number": 294,
        "response_token_number": 31,
        "response_text_processed": "SELECT name, unemployment_rate FROM Country WHERE population > 20000000 ORDER BY unemployment_rate DESC LIMIT 5"
    },
    {
        "id": 33887,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population density of the 5 countries with the highest population density and a population greater than 1 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population density of the 5 countries with the highest population density and a population greater than 1 million:",
        "output": "SELECT name, population_density FROM Country WHERE population > 1000000 ORDER BY population_density DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population_density\nFROM Country\nWHERE population > 1000000\nORDER BY population_density DESC\nLIMIT 5;\n```",
        "prompt_token_number": 294,
        "response_token_number": 31,
        "response_text_processed": "SELECT name, population_density FROM Country WHERE population > 1000000 ORDER BY population_density DESC LIMIT 5"
    },
    {
        "id": 33888,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and homicide rate of the 5 countries with the highest homicide rate and a population greater than 5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and homicide rate of the 5 countries with the highest homicide rate and a population greater than 5 million:",
        "output": "SELECT name, homicide_rate FROM Country WHERE population > 5000000 ORDER BY homicide_rate DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, homicide_rate \nFROM Country \nWHERE population > 5000000 \nORDER BY homicide_rate DESC \nLIMIT 5;\n```",
        "prompt_token_number": 294,
        "response_token_number": 31,
        "response_text_processed": "SELECT name, homicide_rate FROM Country WHERE population > 5000000 ORDER BY homicide_rate DESC LIMIT 5"
    },
    {
        "id": 33889,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and GDP per capita of the 5 countries with the highest GDP per capita and a population greater than 10 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and GDP per capita of the 5 countries with the highest GDP per capita and a population greater than 10 million:",
        "output": "SELECT name, gdp_per_capita FROM Country WHERE population > 10000000 ORDER BY gdp_per_capita DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, gdp_per_capita\nFROM Country\nWHERE population > 10000000\nORDER BY gdp_per_capita DESC\nLIMIT 5;\n```",
        "prompt_token_number": 296,
        "response_token_number": 37,
        "response_text_processed": "SELECT name, gdp_per_capita FROM Country WHERE population > 10000000 ORDER BY gdp_per_capita DESC LIMIT 5"
    },
    {
        "id": 33890,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and literacy rate of the 5 countries with the highest literacy rate and a population greater than 1 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and literacy rate of the 5 countries with the highest literacy rate and a population greater than 1 million:",
        "output": "SELECT name, literacy_rate FROM Country WHERE population > 1000000 ORDER BY literacy_rate DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, literacy_rate\nFROM Country\nWHERE population > 1000000\nORDER BY literacy_rate DESC\nLIMIT 5;\n```",
        "prompt_token_number": 294,
        "response_token_number": 31,
        "response_text_processed": "SELECT name, literacy_rate FROM Country WHERE population > 1000000 ORDER BY literacy_rate DESC LIMIT 5"
    },
    {
        "id": 33891,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded']} and \n# the user question: Find the name and average approval rating of the 5 political parties with the highest average approval rating:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and average approval rating of the 5 political parties with the highest average approval rating:",
        "output": "SELECT PoliticalParty.name, AVG(Politician.approval_rating) AS avg_approval_rating FROM PoliticalParty JOIN Politician ON PoliticalParty.id = Politician.party_id GROUP BY PoliticalParty.id ORDER BY avg_approval_rating DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "PoliticalParty": [
                "ideology",
                "id",
                "name",
                "political_party",
                "country_id",
                "number_of_seats",
                "number_of_members",
                "number_of_female_members",
                "total_spending",
                "total_revenue",
                "total_funding",
                "num_seats",
                "num_members",
                "date_founded"
            ]
        },
        "response_text": "```sql\nSELECT pp.name, AVG(p.approval_rating) AS average_approval_rating\nFROM PoliticalParty pp\nJOIN Politician p ON pp.id = p.party_id\nGROUP BY pp.name\nORDER BY average_approval_rating DESC\nLIMIT 5;\n```",
        "prompt_token_number": 238,
        "response_token_number": 53,
        "response_text_processed": "SELECT pp.name, AVG(p.approval_rating) AS average_approval_rating FROM PoliticalParty pp JOIN Politician p ON pp.id = p.party_id GROUP BY pp.name ORDER BY average_approval_rating DESC LIMIT 5"
    },
    {
        "id": 33892,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and GDP of the 5 countries with the highest GDP and a population greater than 50 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and GDP of the 5 countries with the highest GDP and a population greater than 50 million:",
        "output": "SELECT name, gdp FROM Country WHERE population > 50000000 ORDER BY gdp DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, GDP \nFROM Country \nWHERE population > 50000000 \nORDER BY GDP DESC \nLIMIT 5;\n```",
        "prompt_token_number": 292,
        "response_token_number": 29,
        "response_text_processed": "SELECT name, GDP FROM Country WHERE population > 50000000 ORDER BY GDP DESC LIMIT 5"
    },
    {
        "id": 33894,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state']} and \n# the user question: Find the names of all the politicians in the database who were born in the same country they currently represent:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all the politicians in the database who were born in the same country they currently represent:",
        "output": "SELECT name FROM Politician WHERE birth_country_id = represented_country_id;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ]
        },
        "response_text": "```sql\nSELECT name \nFROM Politician \nWHERE birth_country_id = represented_country_id;\n```",
        "prompt_token_number": 171,
        "response_token_number": 20,
        "response_text_processed": "SELECT name FROM Politician WHERE birth_country_id = represented_country_id"
    },
    {
        "id": 33895,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and population density of the 5 countries with the highest population density and a population greater than 10 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and population density of the 5 countries with the highest population density and a population greater than 10 million:",
        "output": "SELECT name, population_density FROM Country WHERE population > 10000000 ORDER BY population_density DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population_density\nFROM Country\nWHERE population > 10000000\nORDER BY population_density DESC\nLIMIT 5;\n```",
        "prompt_token_number": 294,
        "response_token_number": 31,
        "response_text_processed": "SELECT name, population_density FROM Country WHERE population > 10000000 ORDER BY population_density DESC LIMIT 5"
    },
    {
        "id": 33896,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and unemployment rate of the 5 countries with the highest unemployment rate and a population greater than 1 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and unemployment rate of the 5 countries with the highest unemployment rate and a population greater than 1 million:",
        "output": "SELECT name, unemployment_rate FROM Country WHERE population > 1000000 ORDER BY unemployment_rate DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, unemployment_rate\nFROM Country\nWHERE population > 1000000\nORDER BY unemployment_rate DESC\nLIMIT 5;\n```",
        "prompt_token_number": 294,
        "response_token_number": 31,
        "response_text_processed": "SELECT name, unemployment_rate FROM Country WHERE population > 1000000 ORDER BY unemployment_rate DESC LIMIT 5"
    },
    {
        "id": 33897,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and birthdates of all the politicians in the database who have served as president of their country:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and birthdates of all the politicians in the database who have served as president of their country:",
        "output": "SELECT name, birthdate FROM Politician WHERE id IN ( SELECT president_id FROM Country WHERE president_id IS NOT NULL );",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT p.name, p.birthdate\nFROM Politician p\nJOIN Country c ON p.id = c.president_id;\n```",
        "prompt_token_number": 382,
        "response_token_number": 29,
        "response_text_processed": "SELECT p.name, p.birthdate FROM Politician p JOIN Country c ON p.id = c.president_id"
    },
    {
        "id": 33898,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and average years of education of the 5 countries with the highest average years of education and a population greater than 10 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and average years of education of the 5 countries with the highest average years of education and a population greater than 10 million:",
        "output": "SELECT name, AVG(years_of_education) FROM Country WHERE population > 10000000 GROUP BY name ORDER BY AVG(years_of_education) DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, years_of_education\nFROM Country\nWHERE population > 10000000\nORDER BY years_of_education DESC\nLIMIT 5;\n```",
        "prompt_token_number": 298,
        "response_token_number": 35,
        "response_text_processed": "SELECT name, years_of_education FROM Country WHERE population > 10000000 ORDER BY years_of_education DESC LIMIT 5"
    },
    {
        "id": 33899,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and birthdates of all the politicians in the database who have served as prime minister of their country:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and birthdates of all the politicians in the database who have served as prime minister of their country:",
        "output": "SELECT name, birthdate FROM Politician WHERE id IN ( SELECT prime_minister_id FROM Country WHERE prime_minister_id IS NOT NULL );",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT Politician.name, Politician.birthdate\nFROM Politician \nJOIN Country ON Politician.id = Country.prime_minister_id;\n```",
        "prompt_token_number": 383,
        "response_token_number": 32,
        "response_text_processed": "SELECT Politician.name, Politician.birthdate FROM Politician JOIN Country ON Politician.id = Country.prime_minister_id"
    },
    {
        "id": 33901,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and birthdates of all the politicians in the database who have served as chancellor of their country:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and birthdates of all the politicians in the database who have served as chancellor of their country:",
        "output": "SELECT name, birthdate FROM Politician WHERE id IN ( SELECT chancellor_id FROM Country WHERE chancellor_id IS NOT NULL );",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT p.name, p.birthdate\nFROM Politician p\nJOIN Country c ON p.id = c.chancellor_id;\n```",
        "prompt_token_number": 382,
        "response_token_number": 29,
        "response_text_processed": "SELECT p.name, p.birthdate FROM Politician p JOIN Country c ON p.id = c.chancellor_id"
    },
    {
        "id": 33902,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and HDI (Human Development Index) of the 5 countries with the highest HDI and a population greater than 1 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and HDI (Human Development Index) of the 5 countries with the highest HDI and a population greater than 1 million:",
        "output": "SELECT name, HDI FROM Country WHERE population > 1000000 ORDER BY HDI DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, hdi \nFROM Country \nWHERE population > 1000000 \nORDER BY hdi DESC \nLIMIT 5;\n```",
        "prompt_token_number": 299,
        "response_token_number": 31,
        "response_text_processed": "SELECT name, hdi FROM Country WHERE population > 1000000 ORDER BY hdi DESC LIMIT 5"
    },
    {
        "id": 33903,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: List the names and birthdates of all the politicians in the database who have served as president of their country:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names and birthdates of all the politicians in the database who have served as president of their country:",
        "output": "SELECT name, birthdate FROM Politician WHERE id IN ( SELECT president_id FROM Country WHERE president_id IS NOT NULL );",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT P.name, P.birthdate\nFROM Politician P\nJOIN Country C ON P.id = C.president_id;\n```",
        "prompt_token_number": 382,
        "response_token_number": 29,
        "response_text_processed": "SELECT P.name, P.birthdate FROM Politician P JOIN Country C ON P.id = C.president_id"
    },
    {
        "id": 33904,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and literacy rate of the 5 countries with the highest literacy rate and a population greater than 10 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and literacy rate of the 5 countries with the highest literacy rate and a population greater than 10 million:",
        "output": "SELECT name, literacy_rate FROM Country WHERE population > 10000000 ORDER BY literacy_rate DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, literacy_rate\nFROM Country\nWHERE population > 10000000\nORDER BY literacy_rate DESC\nLIMIT 5;\n```",
        "prompt_token_number": 294,
        "response_token_number": 31,
        "response_text_processed": "SELECT name, literacy_rate FROM Country WHERE population > 10000000 ORDER BY literacy_rate DESC LIMIT 5"
    },
    {
        "id": 33907,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and GDP per capita of the 5 countries with the highest GDP per capita and a population greater than 5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and GDP per capita of the 5 countries with the highest GDP per capita and a population greater than 5 million:",
        "output": "SELECT name, GDP_per_capita FROM Country WHERE population > 5000000 ORDER BY GDP_per_capita DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, gdp_per_capita\nFROM Country\nWHERE population > 5000000\nORDER BY gdp_per_capita DESC\nLIMIT 5;\n```",
        "prompt_token_number": 296,
        "response_token_number": 37,
        "response_text_processed": "SELECT name, gdp_per_capita FROM Country WHERE population > 5000000 ORDER BY gdp_per_capita DESC LIMIT 5"
    },
    {
        "id": 33908,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and unemployment rate of the 5 countries with the highest unemployment rate and a population greater than 2 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and unemployment rate of the 5 countries with the highest unemployment rate and a population greater than 2 million:",
        "output": "SELECT name, unemployment_rate FROM Country WHERE population > 2000000 ORDER BY unemployment_rate DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, unemployment_rate\nFROM Country\nWHERE population > 2000000\nORDER BY unemployment_rate DESC\nLIMIT 5;\n```",
        "prompt_token_number": 294,
        "response_token_number": 31,
        "response_text_processed": "SELECT name, unemployment_rate FROM Country WHERE population > 2000000 ORDER BY unemployment_rate DESC LIMIT 5"
    },
    {
        "id": 33909,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: List the names and birthdates of all the politicians in the database who have served as prime minister of their country:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names and birthdates of all the politicians in the database who have served as prime minister of their country:",
        "output": "SELECT name, birthdate FROM Politician WHERE id IN ( SELECT prime_minister_id FROM Country WHERE prime_minister_id IS NOT NULL );",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT P.name, P.birthdate\nFROM Politician P\nJOIN Country C ON P.id = C.prime_minister_id;\n```",
        "prompt_token_number": 383,
        "response_token_number": 31,
        "response_text_processed": "SELECT P.name, P.birthdate FROM Politician P JOIN Country C ON P.id = C.prime_minister_id"
    },
    {
        "id": 33910,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and murder rates per 100,000 people of the 5 countries with the highest murder rates and a population greater than 1 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and murder rates per 100,000 people of the 5 countries with the highest murder rates and a population greater than 1 million:",
        "output": "SELECT name, murder_rate_per_100k FROM Country WHERE population > 1000000 ORDER BY murder_rate_per_100k DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, murder_rate_per_100k\nFROM Country\nWHERE population > 1000000\nORDER BY murder_rate_per_100k DESC\nLIMIT 5;\n```",
        "prompt_token_number": 300,
        "response_token_number": 39,
        "response_text_processed": "SELECT name, murder_rate_per_100k FROM Country WHERE population > 1000000 ORDER BY murder_rate_per_100k DESC LIMIT 5"
    },
    {
        "id": 33911,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and percentage of population living in poverty of the 5 countries with the highest percentage of population living in poverty and a population greater than 5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and percentage of population living in poverty of the 5 countries with the highest percentage of population living in poverty and a population greater than 5 million:",
        "output": "SELECT name, percent_poverty FROM Country WHERE population > 5000000 ORDER BY percent_poverty DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, percent_poverty\nFROM Country\nWHERE population > 5000000\nORDER BY percent_poverty DESC\nLIMIT 5;\n```",
        "prompt_token_number": 302,
        "response_token_number": 33,
        "response_text_processed": "SELECT name, percent_poverty FROM Country WHERE population > 5000000 ORDER BY percent_poverty DESC LIMIT 5"
    },
    {
        "id": 33912,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and HDI (Human Development Index) values of the 5 countries with the highest HDI and a population greater than 10 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and HDI (Human Development Index) values of the 5 countries with the highest HDI and a population greater than 10 million:",
        "output": "SELECT name, HDI FROM Country WHERE population > 10000000 ORDER BY HDI DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, HDI\nFROM Country\nWHERE population > 10000000\nORDER BY HDI DESC\nLIMIT 5;\n```",
        "prompt_token_number": 300,
        "response_token_number": 31,
        "response_text_processed": "SELECT name, HDI FROM Country WHERE population > 10000000 ORDER BY HDI DESC LIMIT 5"
    },
    {
        "id": 33913,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: List the names and total military expenditure of the 5 countries with the highest military expenditure and a population greater than 50 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names and total military expenditure of the 5 countries with the highest military expenditure and a population greater than 50 million:",
        "output": "SELECT name, total_military_expenditure FROM Country WHERE population > 50000000 ORDER BY total_military_expenditure DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, total_military_expenditure \nFROM Country \nWHERE population > 50000000 \nORDER BY total_military_expenditure DESC \nLIMIT 5;\n```",
        "prompt_token_number": 295,
        "response_token_number": 39,
        "response_text_processed": "SELECT name, total_military_expenditure FROM Country WHERE population > 50000000 ORDER BY total_military_expenditure DESC LIMIT 5"
    },
    {
        "id": 33914,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: List the names and GDP per capita of the 5 countries with the highest GDP per capita and a population greater than 5 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names and GDP per capita of the 5 countries with the highest GDP per capita and a population greater than 5 million:",
        "output": "SELECT name, GDP_per_capita FROM Country WHERE population > 5000000 ORDER BY GDP_per_capita DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, gdp_per_capita\nFROM Country\nWHERE population > 5000000\nORDER BY gdp_per_capita DESC\nLIMIT 5;\n```",
        "prompt_token_number": 296,
        "response_token_number": 37,
        "response_text_processed": "SELECT name, gdp_per_capita FROM Country WHERE population > 5000000 ORDER BY gdp_per_capita DESC LIMIT 5"
    },
    {
        "id": 33915,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the name and number of confirmed COVID-19 cases per million people of the 5 countries with the highest number of confirmed cases and a population greater than 20 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and number of confirmed COVID-19 cases per million people of the 5 countries with the highest number of confirmed cases and a population greater than 20 million:",
        "output": "SELECT name, confirmed_cases_per_million FROM Country WHERE population > 20000000 ORDER BY confirmed_cases_per_million DESC LIMIT 5;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, confirmed_cases_per_million \nFROM Country \nWHERE population > 20000000 \nORDER BY confirmed_cases_per_million DESC \nLIMIT 5;\n```",
        "prompt_token_number": 304,
        "response_token_number": 37,
        "response_text_processed": "SELECT name, confirmed_cases_per_million FROM Country WHERE population > 20000000 ORDER BY confirmed_cases_per_million DESC LIMIT 5"
    },
    {
        "id": 33918,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: List the names and GDP growth rates of all the countries in the database that had a negative GDP growth rate in the last year:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names and GDP growth rates of all the countries in the database that had a negative GDP growth rate in the last year:",
        "output": "SELECT name, GDP_growth_rate FROM Country WHERE GDP_growth_rate < 0;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, GDP_growth_rate \nFROM Country \nWHERE GDP_growth_rate < 0 AND year = (SELECT MAX(year) FROM Country);\n```",
        "prompt_token_number": 295,
        "response_token_number": 32,
        "response_text_processed": "SELECT name, GDP_growth_rate FROM Country WHERE GDP_growth_rate < 0 AND year = (SELECT MAX(year) FROM Country)"
    },
    {
        "id": 33919,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and total number of confirmed COVID-19 deaths of all the countries in the database that have a population greater than 100 million:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and total number of confirmed COVID-19 deaths of all the countries in the database that have a population greater than 100 million:",
        "output": "SELECT name, total_deaths FROM Country WHERE population > 100000000;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, total_deaths \nFROM Country \nWHERE population > 100000000;\n```",
        "prompt_token_number": 298,
        "response_token_number": 22,
        "response_text_processed": "SELECT name, total_deaths FROM Country WHERE population > 100000000"
    },
    {
        "id": 33922,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Candidate': ['name', 'total_votes', 'id', 'party_id', 'expenses', 'election_id', 'is_winner', 'election_year'], 'ElectionResult': ['candidate_id', 'total_votes', 'votes_received', 'political_party_id', 'total_spending', 'election_id', 'votes', 'year', 'num_votes', 'id', 'position', 'percent_vote', 'party_id', 'is_winner']} and \n# the user question: List the names and total number of votes of all the candidates in the database who won the elections with a majority vote:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names and total number of votes of all the candidates in the database who won the elections with a majority vote:",
        "output": "SELECT name, total_votes FROM Candidate WHERE id IN ( SELECT candidate_id FROM ElectionResult WHERE CAST(votes_received AS FLOAT) / total_votes > 0.5 );",
        "schema": "political_science",
        "processed_schema_content": {
            "Candidate": [
                "name",
                "total_votes",
                "id",
                "party_id",
                "expenses",
                "election_id",
                "is_winner",
                "election_year"
            ],
            "ElectionResult": [
                "candidate_id",
                "total_votes",
                "votes_received",
                "political_party_id",
                "total_spending",
                "election_id",
                "votes",
                "year",
                "num_votes",
                "id",
                "position",
                "percent_vote",
                "party_id",
                "is_winner"
            ]
        },
        "response_text": "```sql\nSELECT C.name, C.total_votes\nFROM Candidate C\nJOIN ElectionResult ER ON C.id = ER.candidate_id\nWHERE C.is_winner = 1 AND C.total_votes > (SELECT SUM(ER2.votes) / 2 FROM ElectionResult ER2 WHERE ER2.election_id = C.election_id);\n```",
        "prompt_token_number": 174,
        "response_token_number": 70,
        "response_text_processed": "SELECT C.name, C.total_votes FROM Candidate C JOIN ElectionResult ER ON C.id = ER.candidate_id WHERE C.is_winner = 1 AND C.total_votes > (SELECT SUM(ER2.votes) / 2 FROM ElectionResult ER2 WHERE ER2.election_id = C.election_id)"
    },
    {
        "id": 33923,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id'], 'ElectionResult': ['candidate_id', 'total_votes', 'votes_received', 'political_party_id', 'total_spending', 'election_id', 'votes', 'year', 'num_votes', 'id', 'position', 'percent_vote', 'party_id', 'is_winner']} and \n# the user question: List the names and total spending of all the political parties in the database that spent more than $5 million in the last election:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names and total spending of all the political parties in the database that spent more than $5 million in the last election:",
        "output": "SELECT name, total_spending FROM PoliticalParty WHERE id IN ( SELECT political_party_id FROM ElectionResult WHERE election_id = ( SELECT id FROM Election ORDER BY date DESC LIMIT 1 ) AND total_spending > 5000000 );",
        "schema": "political_science",
        "processed_schema_content": {
            "PoliticalParty": [
                "ideology",
                "id",
                "name",
                "political_party",
                "country_id",
                "number_of_seats",
                "number_of_members",
                "number_of_female_members",
                "total_spending",
                "total_revenue",
                "total_funding",
                "num_seats",
                "num_members",
                "date_founded"
            ],
            "Election": [
                "country_id",
                "id",
                "winner_party_id",
                "region",
                "date",
                "party_id",
                "year",
                "constituency_id"
            ],
            "ElectionResult": [
                "candidate_id",
                "total_votes",
                "votes_received",
                "political_party_id",
                "total_spending",
                "election_id",
                "votes",
                "year",
                "num_votes",
                "id",
                "position",
                "percent_vote",
                "party_id",
                "is_winner"
            ]
        },
        "response_text": "```sql\nSELECT p.name, p.total_spending \nFROM PoliticalParty p\nJOIN ElectionResult er ON p.id = er.political_party_id\nJOIN Election e ON er.election_id = e.id\nWHERE e.year = (SELECT MAX(year) FROM Election)\n  AND p.total_spending > 5000000;\n```",
        "prompt_token_number": 247,
        "response_token_number": 68,
        "response_text_processed": "SELECT p.name, p.total_spending FROM PoliticalParty p JOIN ElectionResult er ON p.id = er.political_party_id JOIN Election e ON er.election_id = e.id WHERE e.year = (SELECT MAX(year) FROM Election) AND p.total_spending > 5000000"
    },
    {
        "id": 33938,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and average life expectancies of all the countries in the database for the last 10 years:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and average life expectancies of all the countries in the database for the last 10 years:",
        "output": "SELECT name, AVG(life_expectancy) AS avg_life_expectancy FROM ( SELECT name, life_expectancy FROM Country AS c1 WHERE year >= (SELECT MAX(year) - 9 FROM Country) ORDER BY year DESC ) GROUP BY name;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, AVG(life_expectancy) AS avg_life_expectancy\nFROM Country\nWHERE year >= (SELECT MAX(year) FROM Country) - 9\nGROUP BY name;\n```",
        "prompt_token_number": 291,
        "response_token_number": 41,
        "response_text_processed": "SELECT name, AVG(life_expectancy) AS avg_life_expectancy FROM Country WHERE year >= (SELECT MAX(year) FROM Country) - 9 GROUP BY name"
    },
    {
        "id": 33941,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: List the names and GDPs of all the countries in the database that have a GDP per capita above $50,000:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names and GDPs of all the countries in the database that have a GDP per capita above $50,000:",
        "output": "SELECT name, gdp FROM Country WHERE gdp / population > 50000;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, gdp\nFROM Country\nWHERE gdp_per_capita > 50000;\n```",
        "prompt_token_number": 294,
        "response_token_number": 24,
        "response_text_processed": "SELECT name, gdp FROM Country WHERE gdp_per_capita > 50000"
    },
    {
        "id": 33943,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and average temperatures of all the countries in the database for the last 5 years:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and average temperatures of all the countries in the database for the last 5 years:",
        "output": "SELECT name, AVG(temperature) AS avg_temperature FROM ( SELECT name, temperature FROM Country AS c1 WHERE year >= (SELECT MAX(year) - 4 FROM Country) ORDER BY year DESC ) GROUP BY name;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, AVG(temperature) AS average_temperature\nFROM Country\nWHERE year >= (YEAR(CURDATE()) - 5)\nGROUP BY name;\n```",
        "prompt_token_number": 289,
        "response_token_number": 35,
        "response_text_processed": "SELECT name, AVG(temperature) AS average_temperature FROM Country WHERE year >= (YEAR(CURDATE()) - 5) GROUP BY name"
    },
    {
        "id": 33944,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Country': ['area', 'region', 'name', 'population', 'coastline', 'id', 'gdp', 'gdp_per_capita', 'population_density', 'life_expectancy', 'literacy_rate', 'internet_penetration_rate', 'hdi', 'murder_rate', 'population_growth_rate', 'infant_mortality_rate', 'poverty_rate', 'unemployment_rate', 'homicide_rate', 'homicides_per_100k', 'president_id', 'years_of_education', 'prime_minister_id', 'median_age', 'chancellor_id', 'HDI', 'CO2_emissions_per_capita', 'GDP_per_capita', 'murder_rate_per_100k', 'percent_poverty', 'total_military_expenditure', 'confirmed_cases_per_million', 'human_development_index', 'GDP_growth_rate', 'total_deaths', 'GDP', 'capital_city', 'year', 'temperature', 'land_area']} and \n# the user question: Find the names and current population of all the countries in the database that have a land area of more than 1 million square kilometers:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and current population of all the countries in the database that have a land area of more than 1 million square kilometers:",
        "output": "SELECT name, population FROM Country WHERE land_area > 1000000;",
        "schema": "political_science",
        "processed_schema_content": {
            "Country": [
                "area",
                "region",
                "name",
                "population",
                "coastline",
                "id",
                "gdp",
                "gdp_per_capita",
                "population_density",
                "life_expectancy",
                "literacy_rate",
                "internet_penetration_rate",
                "hdi",
                "murder_rate",
                "population_growth_rate",
                "infant_mortality_rate",
                "poverty_rate",
                "unemployment_rate",
                "homicide_rate",
                "homicides_per_100k",
                "president_id",
                "years_of_education",
                "prime_minister_id",
                "median_age",
                "chancellor_id",
                "HDI",
                "CO2_emissions_per_capita",
                "GDP_per_capita",
                "murder_rate_per_100k",
                "percent_poverty",
                "total_military_expenditure",
                "confirmed_cases_per_million",
                "human_development_index",
                "GDP_growth_rate",
                "total_deaths",
                "GDP",
                "capital_city",
                "year",
                "temperature",
                "land_area"
            ]
        },
        "response_text": "```sql\nSELECT name, population \nFROM Country \nWHERE land_area > 1000000;\n```",
        "prompt_token_number": 296,
        "response_token_number": 21,
        "response_text_processed": "SELECT name, population FROM Country WHERE land_area > 1000000"
    },
    {
        "id": 33946,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Speech': ['politician_id', 'topic', 'id']} and \n# the user question: Find the names and number of speeches given by all the politicians in the database:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and number of speeches given by all the politicians in the database:",
        "output": "SELECT p.name, COUNT(*) AS num_speeches FROM Politician p JOIN Speech s ON p.id = s.politician_id GROUP BY p.id;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "Speech": [
                "politician_id",
                "topic",
                "id"
            ]
        },
        "response_text": "```sql\nSELECT P.name, COUNT(S.id) AS speech_count\nFROM Politician P\nLEFT JOIN Speech S ON P.id = S.politician_id\nGROUP BY P.name;\n```",
        "prompt_token_number": 180,
        "response_token_number": 40,
        "response_text_processed": "SELECT P.name, COUNT(S.id) AS speech_count FROM Politician P LEFT JOIN Speech S ON P.id = S.politician_id GROUP BY P.name"
    },
    {
        "id": 33950,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Speech': ['politician_id', 'topic', 'id']} and \n# the user question: List the names of the politicians who have given speeches on education and the total number of speeches given on this topic:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of the politicians who have given speeches on education and the total number of speeches given on this topic:",
        "output": "SELECT p.name, COUNT(*) AS num_speeches FROM Politician p JOIN Speech s ON p.id = s.politician_id WHERE s.topic = 'education' GROUP BY p.id;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "Speech": [
                "politician_id",
                "topic",
                "id"
            ]
        },
        "response_text": "```sql\nSELECT p.name, COUNT(s.id) AS total_speeches\nFROM Politician p\nJOIN Speech s ON p.id = s.politician_id\nWHERE s.topic = 'education'\nGROUP BY p.name;\n```",
        "prompt_token_number": 187,
        "response_token_number": 48,
        "response_text_processed": "SELECT p.name, COUNT(s.id) AS total_speeches FROM Politician p JOIN Speech s ON p.id = s.politician_id WHERE s.topic = 'education' GROUP BY p.name"
    },
    {
        "id": 33951,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded']} and \n# the user question: Find the names of the political parties in the database and the number of politicians belonging to each party:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of the political parties in the database and the number of politicians belonging to each party:",
        "output": "SELECT pp.name, COUNT(*) AS num_politicians FROM PoliticalParty pp JOIN Politician p ON pp.id = p.party_id GROUP BY pp.id;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "PoliticalParty": [
                "ideology",
                "id",
                "name",
                "political_party",
                "country_id",
                "number_of_seats",
                "number_of_members",
                "number_of_female_members",
                "total_spending",
                "total_revenue",
                "total_funding",
                "num_seats",
                "num_members",
                "date_founded"
            ]
        },
        "response_text": "```sql\nSELECT pp.name, COUNT(p.id) AS number_of_politicians\nFROM PoliticalParty pp\nLEFT JOIN Politician p ON pp.id = p.party_id\nGROUP BY pp.name;\n```",
        "prompt_token_number": 238,
        "response_token_number": 42,
        "response_text_processed": "SELECT pp.name, COUNT(p.id) AS number_of_politicians FROM PoliticalParty pp LEFT JOIN Politician p ON pp.id = p.party_id GROUP BY pp.name"
    },
    {
        "id": 33952,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Voter': ['id', 'gender', 'age', 'lgbtq', 'name', 'income', 'date_of_birth']} and \n# the user question: List the names and the date of birth of the voters who are over 18 years old:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names and the date of birth of the voters who are over 18 years old:",
        "output": "SELECT name, date_of_birth FROM Voter WHERE (strftime('%Y', 'now') - strftime('%Y', date_of_birth)) >= 18;",
        "schema": "political_science",
        "processed_schema_content": {
            "Voter": [
                "id",
                "gender",
                "age",
                "lgbtq",
                "name",
                "income",
                "date_of_birth"
            ]
        },
        "response_text": "```sql\nSELECT name, date_of_birth\nFROM Voter\nWHERE age > 18;\n```",
        "prompt_token_number": 108,
        "response_token_number": 20,
        "response_text_processed": "SELECT name, date_of_birth FROM Voter WHERE age > 18"
    },
    {
        "id": 33955,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded'], 'Donation': ['politician_id', 'amount', 'donor', 'political_party_id', 'donor_type', 'party_id', 'year']} and \n# the user question: Find the names and total amount donated to each political party in the database:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names and total amount donated to each political party in the database:",
        "output": "SELECT pp.name, SUM(d.amount) AS total_donations FROM PoliticalParty pp JOIN Donation d ON pp.id = d.party_id GROUP BY pp.id;",
        "schema": "political_science",
        "processed_schema_content": {
            "PoliticalParty": [
                "ideology",
                "id",
                "name",
                "political_party",
                "country_id",
                "number_of_seats",
                "number_of_members",
                "number_of_female_members",
                "total_spending",
                "total_revenue",
                "total_funding",
                "num_seats",
                "num_members",
                "date_founded"
            ],
            "Donation": [
                "politician_id",
                "amount",
                "donor",
                "political_party_id",
                "donor_type",
                "party_id",
                "year"
            ]
        },
        "response_text": "```sql\nSELECT p.name, SUM(d.amount) AS total_donated\nFROM PoliticalParty p\nJOIN Donation d ON p.id = d.political_party_id\nGROUP BY p.name;\n```",
        "prompt_token_number": 175,
        "response_token_number": 40,
        "response_text_processed": "SELECT p.name, SUM(d.amount) AS total_donated FROM PoliticalParty p JOIN Donation d ON p.id = d.political_party_id GROUP BY p.name"
    },
    {
        "id": 33956,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Vote': ['election_id', 'voter_id', 'id'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id'], 'Voter': ['id', 'gender', 'age', 'lgbtq', 'name', 'income', 'date_of_birth']} and \n# the user question: Find the average age of the voters who have voted in the elections held after 2000:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average age of the voters who have voted in the elections held after 2000:",
        "output": "SELECT AVG(v.age) AS avg_age FROM Voter v JOIN Vote vo ON v.id = vo.voter_id JOIN Election e ON vo.election_id = e.id WHERE e.year > 2000;",
        "schema": "political_science",
        "processed_schema_content": {
            "Vote": [
                "election_id",
                "voter_id",
                "id"
            ],
            "Election": [
                "country_id",
                "id",
                "winner_party_id",
                "region",
                "date",
                "party_id",
                "year",
                "constituency_id"
            ],
            "Voter": [
                "id",
                "gender",
                "age",
                "lgbtq",
                "name",
                "income",
                "date_of_birth"
            ]
        },
        "response_text": "```sql\nSELECT AVG(Voter.age) AS average_age\nFROM Voter\nJOIN Vote ON Voter.id = Vote.voter_id\nJOIN Election ON Vote.election_id = Election.id\nWHERE Election.year > 2000;\n```",
        "prompt_token_number": 158,
        "response_token_number": 47,
        "response_text_processed": "SELECT AVG(Voter.age) AS average_age FROM Voter JOIN Vote ON Voter.id = Vote.voter_id JOIN Election ON Vote.election_id = Election.id WHERE Election.year > 2000"
    },
    {
        "id": 33957,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Candidate': ['name', 'total_votes', 'id', 'party_id', 'expenses', 'election_id', 'is_winner', 'election_year'], 'ElectionResult': ['candidate_id', 'total_votes', 'votes_received', 'political_party_id', 'total_spending', 'election_id', 'votes', 'year', 'num_votes', 'id', 'position', 'percent_vote', 'party_id', 'is_winner']} and \n# the user question: Find the names of the candidates who have participated in the most number of elections:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of the candidates who have participated in the most number of elections:",
        "output": "SELECT c.name, COUNT(*) AS num_elections FROM ElectionResult er JOIN Candidate c ON er.candidate_id = c.id GROUP BY c.id ORDER BY num_elections DESC LIMIT 10;",
        "schema": "political_science",
        "processed_schema_content": {
            "Candidate": [
                "name",
                "total_votes",
                "id",
                "party_id",
                "expenses",
                "election_id",
                "is_winner",
                "election_year"
            ],
            "ElectionResult": [
                "candidate_id",
                "total_votes",
                "votes_received",
                "political_party_id",
                "total_spending",
                "election_id",
                "votes",
                "year",
                "num_votes",
                "id",
                "position",
                "percent_vote",
                "party_id",
                "is_winner"
            ]
        },
        "response_text": "```sql\nSELECT c.name\nFROM Candidate c\nJOIN (\n    SELECT candidate_id, COUNT(DISTINCT election_id) as election_count\n    FROM ElectionResult\n    GROUP BY candidate_id\n    ORDER BY election_count DESC\n    LIMIT 1\n) er ON c.id = er.candidate_id;\n```",
        "prompt_token_number": 166,
        "response_token_number": 64,
        "response_text_processed": "SELECT c.name FROM Candidate c JOIN ( SELECT candidate_id, COUNT(DISTINCT election_id) as election_count FROM ElectionResult GROUP BY candidate_id ORDER BY election_count DESC LIMIT 1 ) er ON c.id = er.candidate_id"
    },
    {
        "id": 33958,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'PoliticalParty': ['ideology', 'id', 'name', 'political_party', 'country_id', 'number_of_seats', 'number_of_members', 'number_of_female_members', 'total_spending', 'total_revenue', 'total_funding', 'num_seats', 'num_members', 'date_founded'], 'Donation': ['politician_id', 'amount', 'donor', 'political_party_id', 'donor_type', 'party_id', 'year']} and \n# the user question: List the names of the political parties that have received more than $10,000 in donations:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of the political parties that have received more than $10,000 in donations:",
        "output": "SELECT pp.name FROM PoliticalParty pp JOIN Donation d ON pp.id = d.party_id GROUP BY pp.id HAVING SUM(d.amount) > 10000;",
        "schema": "political_science",
        "processed_schema_content": {
            "PoliticalParty": [
                "ideology",
                "id",
                "name",
                "political_party",
                "country_id",
                "number_of_seats",
                "number_of_members",
                "number_of_female_members",
                "total_spending",
                "total_revenue",
                "total_funding",
                "num_seats",
                "num_members",
                "date_founded"
            ],
            "Donation": [
                "politician_id",
                "amount",
                "donor",
                "political_party_id",
                "donor_type",
                "party_id",
                "year"
            ]
        },
        "response_text": "```sql\nSELECT p.name \nFROM PoliticalParty p\nJOIN Donation d ON p.id = d.political_party_id\nGROUP BY p.name\nHAVING SUM(d.amount) > 10000;\n```",
        "prompt_token_number": 179,
        "response_token_number": 42,
        "response_text_processed": "SELECT p.name FROM PoliticalParty p JOIN Donation d ON p.id = d.political_party_id GROUP BY p.name HAVING SUM(d.amount) > 10000"
    },
    {
        "id": 33959,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Speech': ['politician_id', 'topic', 'id']} and \n# the user question: Find the number of speeches given by each politician on each topic:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of speeches given by each politician on each topic:",
        "output": "SELECT p.name, s.topic, COUNT(*) AS num_speeches FROM Politician p JOIN Speech s ON p.id = s.politician_id GROUP BY p.id, s.topic;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "Speech": [
                "politician_id",
                "topic",
                "id"
            ]
        },
        "response_text": "```sql\nSELECT\n    p.name AS politician_name,\n    s.topic,\n    COUNT(s.id) AS speech_count\nFROM\n    Politician p\nJOIN\n    Speech s ON p.id = s.politician_id\nGROUP BY\n    p.name,\n    s.topic;\n```",
        "prompt_token_number": 177,
        "response_token_number": 59,
        "response_text_processed": "SELECT p.name AS politician_name, s.topic, COUNT(s.id) AS speech_count FROM Politician p JOIN Speech s ON p.id = s.politician_id GROUP BY p.name, s.topic"
    },
    {
        "id": 33960,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Vote': ['election_id', 'voter_id', 'id'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id'], 'Constituency': ['name', 'id']} and \n# the user question: Find the total number of votes cast in each constituency in the 2019 election:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total number of votes cast in each constituency in the 2019 election:",
        "output": "SELECT c.name, COUNT(*) AS num_votes FROM Constituency c JOIN Election e ON c.id = e.constituency_id JOIN Vote v ON e.id = v.election_id WHERE e.year = 2019 GROUP BY c.id;",
        "schema": "political_science",
        "processed_schema_content": {
            "Vote": [
                "election_id",
                "voter_id",
                "id"
            ],
            "Election": [
                "country_id",
                "id",
                "winner_party_id",
                "region",
                "date",
                "party_id",
                "year",
                "constituency_id"
            ],
            "Constituency": [
                "name",
                "id"
            ]
        },
        "response_text": "```sql\nSELECT c.name AS constituency_name, COUNT(v.id) AS total_votes\nFROM Vote v\nJOIN Election e ON v.election_id = e.id\nJOIN Constituency c ON e.constituency_id = c.id\nWHERE e.year = 2019\nGROUP BY c.name;\n```",
        "prompt_token_number": 138,
        "response_token_number": 63,
        "response_text_processed": "SELECT c.name AS constituency_name, COUNT(v.id) AS total_votes FROM Vote v JOIN Election e ON v.election_id = e.id JOIN Constituency c ON e.constituency_id = c.id WHERE e.year = 2019 GROUP BY c.name"
    },
    {
        "id": 33961,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id'], 'ElectionResult': ['candidate_id', 'total_votes', 'votes_received', 'political_party_id', 'total_spending', 'election_id', 'votes', 'year', 'num_votes', 'id', 'position', 'percent_vote', 'party_id', 'is_winner'], 'Constituency': ['name', 'id']} and \n# the user question: List the names of all the politicians who have won more than one election from the same constituency:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all the politicians who have won more than one election from the same constituency:",
        "output": "SELECT p.name, c.name, COUNT(*) AS num_wins FROM Politician p JOIN ElectionResult er ON p.id = er.candidate_id JOIN Election e ON er.election_id = e.id JOIN Constituency c ON e.constituency_id = c.id WHERE er.position = 'winner' GROUP BY p.id, c.id HAVING COUNT(*) > 1;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "Election": [
                "country_id",
                "id",
                "winner_party_id",
                "region",
                "date",
                "party_id",
                "year",
                "constituency_id"
            ],
            "ElectionResult": [
                "candidate_id",
                "total_votes",
                "votes_received",
                "political_party_id",
                "total_spending",
                "election_id",
                "votes",
                "year",
                "num_votes",
                "id",
                "position",
                "percent_vote",
                "party_id",
                "is_winner"
            ],
            "Constituency": [
                "name",
                "id"
            ]
        },
        "response_text": "```sql\nSELECT p.name\nFROM Politician p\nJOIN ElectionResult er ON p.id = er.candidate_id\nJOIN Election e ON er.election_id = e.id\nWHERE er.is_winner = 'yes'\nGROUP BY p.name, e.constituency_id\nHAVING COUNT(DISTINCT e.id) > 1;\n```",
        "prompt_token_number": 275,
        "response_token_number": 70,
        "response_text_processed": "SELECT p.name FROM Politician p JOIN ElectionResult er ON p.id = er.candidate_id JOIN Election e ON er.election_id = e.id WHERE er.is_winner = 'yes' GROUP BY p.name, e.constituency_id HAVING COUNT(DISTINCT e.id) > 1"
    },
    {
        "id": 33963,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'Speech': ['politician_id', 'topic', 'id'], 'PoliticalExperience': ['politician_id', 'id', 'position', 'start_date']} and \n# the user question: List the names of all the ministers who have given speeches on corruption:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all the ministers who have given speeches on corruption:",
        "output": "SELECT p.name, s.topic FROM Politician p JOIN PoliticalExperience pe ON p.id = pe.politician_id JOIN Speech s ON p.id = s.politician_id WHERE pe.position = 'minister' AND s.topic = 'corruption';",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "Speech": [
                "politician_id",
                "topic",
                "id"
            ],
            "PoliticalExperience": [
                "politician_id",
                "id",
                "position",
                "start_date"
            ]
        },
        "response_text": "```sql\nSELECT p.name\nFROM Politician p\nJOIN PoliticalExperience pe ON p.id = pe.politician_id\nJOIN Speech s ON p.id = s.politician_id\nWHERE pe.position = 'Minister' AND s.topic = 'corruption';\n```",
        "prompt_token_number": 197,
        "response_token_number": 56,
        "response_text_processed": "SELECT p.name FROM Politician p JOIN PoliticalExperience pe ON p.id = pe.politician_id JOIN Speech s ON p.id = s.politician_id WHERE pe.position = 'Minister' AND s.topic = 'corruption'"
    },
    {
        "id": 33966,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Donation': ['politician_id', 'amount', 'donor', 'political_party_id', 'donor_type', 'party_id', 'year'], 'Party': ['name', 'id']} and \n# the user question: Find the name of the party that received the most donations in the past year:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name of the party that received the most donations in the past year:",
        "output": "SELECT p.name, SUM(d.amount) AS total_donations FROM Party p JOIN Donation d ON p.id = d.party_id WHERE d.year >= strftime('%Y', 'now', '-1 year') GROUP BY p.id ORDER BY total_donations DESC LIMIT 1;",
        "schema": "political_science",
        "processed_schema_content": {
            "Donation": [
                "politician_id",
                "amount",
                "donor",
                "political_party_id",
                "donor_type",
                "party_id",
                "year"
            ],
            "Party": [
                "name",
                "id"
            ]
        },
        "response_text": "```sql\nSELECT Party.name \nFROM Donation \nJOIN Party ON Donation.political_party_id = Party.id \nWHERE Donation.year = (SELECT MAX(year) FROM Donation) \nGROUP BY Party.name \nORDER BY SUM(Donation.amount) DESC \nLIMIT 1;\n```",
        "prompt_token_number": 117,
        "response_token_number": 54,
        "response_text_processed": "SELECT Party.name FROM Donation JOIN Party ON Donation.political_party_id = Party.id WHERE Donation.year = (SELECT MAX(year) FROM Donation) GROUP BY Party.name ORDER BY SUM(Donation.amount) DESC LIMIT 1"
    },
    {
        "id": 33968,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id'], 'Candidate': ['name', 'total_votes', 'id', 'party_id', 'expenses', 'election_id', 'is_winner', 'election_year'], 'ElectionResult': ['candidate_id', 'total_votes', 'votes_received', 'political_party_id', 'total_spending', 'election_id', 'votes', 'year', 'num_votes', 'id', 'position', 'percent_vote', 'party_id', 'is_winner'], 'Party': ['name', 'id']} and \n# the user question: Find the average number of votes received by each party in the 2016 election:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average number of votes received by each party in the 2016 election:",
        "output": "SELECT p.name, AVG(er.num_votes) AS avg_votes FROM Party p JOIN Candidate c ON p.id = c.party_id JOIN ElectionResult er ON c.id = er.candidate_id JOIN Election e ON er.election_id = e.id WHERE e.year = 2016 GROUP BY p.id;",
        "schema": "political_science",
        "processed_schema_content": {
            "Election": [
                "country_id",
                "id",
                "winner_party_id",
                "region",
                "date",
                "party_id",
                "year",
                "constituency_id"
            ],
            "Candidate": [
                "name",
                "total_votes",
                "id",
                "party_id",
                "expenses",
                "election_id",
                "is_winner",
                "election_year"
            ],
            "ElectionResult": [
                "candidate_id",
                "total_votes",
                "votes_received",
                "political_party_id",
                "total_spending",
                "election_id",
                "votes",
                "year",
                "num_votes",
                "id",
                "position",
                "percent_vote",
                "party_id",
                "is_winner"
            ],
            "Party": [
                "name",
                "id"
            ]
        },
        "response_text": "```sql\nSELECT p.name AS party_name, AVG(er.votes_received) AS average_votes\nFROM Party p\nJOIN ElectionResult er ON p.id = er.party_id\nJOIN Election e ON er.election_id = e.id\nWHERE e.year = 2016\nGROUP BY p.name;\n```",
        "prompt_token_number": 211,
        "response_token_number": 62,
        "response_text_processed": "SELECT p.name AS party_name, AVG(er.votes_received) AS average_votes FROM Party p JOIN ElectionResult er ON p.id = er.party_id JOIN Election e ON er.election_id = e.id WHERE e.year = 2016 GROUP BY p.name"
    },
    {
        "id": 33970,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state'], 'ElectionResult': ['candidate_id', 'total_votes', 'votes_received', 'political_party_id', 'total_spending', 'election_id', 'votes', 'year', 'num_votes', 'id', 'position', 'percent_vote', 'party_id', 'is_winner']} and \n# the user question: List the names of all the politicians who have never won an election:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all the politicians who have never won an election:",
        "output": "SELECT p.name FROM Politician p LEFT JOIN ElectionResult er ON p.id = er.candidate_id WHERE er.candidate_id IS NULL;",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ],
            "ElectionResult": [
                "candidate_id",
                "total_votes",
                "votes_received",
                "political_party_id",
                "total_spending",
                "election_id",
                "votes",
                "year",
                "num_votes",
                "id",
                "position",
                "percent_vote",
                "party_id",
                "is_winner"
            ]
        },
        "response_text": "```sql\nSELECT P.name\nFROM Politician P\nWHERE P.id NOT IN (\n    SELECT E.candidate_id\n    FROM ElectionResult E\n    WHERE E.is_winner = 1\n);\n```",
        "prompt_token_number": 223,
        "response_token_number": 42,
        "response_text_processed": "SELECT P.name FROM Politician P WHERE P.id NOT IN ( SELECT E.candidate_id FROM ElectionResult E WHERE E.is_winner = 1 )"
    },
    {
        "id": 33971,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Candidate': ['name', 'total_votes', 'id', 'party_id', 'expenses', 'election_id', 'is_winner', 'election_year'], 'Party': ['name', 'id']} and \n# the user question: List the names of all the political parties that have never participated in an election:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all the political parties that have never participated in an election:",
        "output": "SELECT p.name FROM Party p LEFT JOIN Candidate c ON p.id = c.party_id WHERE c.party_id IS NULL;",
        "schema": "political_science",
        "processed_schema_content": {
            "Candidate": [
                "name",
                "total_votes",
                "id",
                "party_id",
                "expenses",
                "election_id",
                "is_winner",
                "election_year"
            ],
            "Party": [
                "name",
                "id"
            ]
        },
        "response_text": "```sql\nSELECT name\nFROM Party\nWHERE id NOT IN (SELECT DISTINCT party_id FROM Candidate);\n```",
        "prompt_token_number": 116,
        "response_token_number": 22,
        "response_text_processed": "SELECT name FROM Party WHERE id NOT IN (SELECT DISTINCT party_id FROM Candidate)"
    },
    {
        "id": 33973,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Politician': ['political_party', 'name', 'birthdate', 'gender', 'id', 'education_level', 'birth_state', 'birth_city', 'industry', 'years_experience', 'approval_rating', 'party_id', 'birth_country_id', 'represented_country_id', 'party_affiliation', 'start_date', 'end_date', 'twitter_verified', 'twitter_followers', 'birth_date', 'date_of_birth', 'state']} and \n# the user question: Find the name and date of birth of the oldest politician:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and date of birth of the oldest politician:",
        "output": "SELECT name, date_of_birth FROM Politician WHERE date_of_birth = (SELECT MIN(date_of_birth) FROM Politician);",
        "schema": "political_science",
        "processed_schema_content": {
            "Politician": [
                "political_party",
                "name",
                "birthdate",
                "gender",
                "id",
                "education_level",
                "birth_state",
                "birth_city",
                "industry",
                "years_experience",
                "approval_rating",
                "party_id",
                "birth_country_id",
                "represented_country_id",
                "party_affiliation",
                "start_date",
                "end_date",
                "twitter_verified",
                "twitter_followers",
                "birth_date",
                "date_of_birth",
                "state"
            ]
        },
        "response_text": "```sql\nSELECT name, birth_date \nFROM Politician \nORDER BY birth_date ASC \nLIMIT 1;\n```",
        "prompt_token_number": 162,
        "response_token_number": 24,
        "response_text_processed": "SELECT name, birth_date FROM Politician ORDER BY birth_date ASC LIMIT 1"
    },
    {
        "id": 33974,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Election': ['country_id', 'id', 'winner_party_id', 'region', 'date', 'party_id', 'year', 'constituency_id'], 'ElectionResult': ['candidate_id', 'total_votes', 'votes_received', 'political_party_id', 'total_spending', 'election_id', 'votes', 'year', 'num_votes', 'id', 'position', 'percent_vote', 'party_id', 'is_winner'], 'Constituency': ['name', 'id']} and \n# the user question: List the names of all the constituencies where at least two different political parties have won elections:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all the constituencies where at least two different political parties have won elections:",
        "output": "SELECT c.name FROM Constituency c JOIN Election e ON c.id = e.constituency_id JOIN ElectionResult er ON e.id = er.election_id GROUP BY c.id HAVING COUNT(DISTINCT er.party_id) >= 2;",
        "schema": "political_science",
        "processed_schema_content": {
            "Election": [
                "country_id",
                "id",
                "winner_party_id",
                "region",
                "date",
                "party_id",
                "year",
                "constituency_id"
            ],
            "ElectionResult": [
                "candidate_id",
                "total_votes",
                "votes_received",
                "political_party_id",
                "total_spending",
                "election_id",
                "votes",
                "year",
                "num_votes",
                "id",
                "position",
                "percent_vote",
                "party_id",
                "is_winner"
            ],
            "Constituency": [
                "name",
                "id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.name\nFROM Constituency c\nJOIN Election e ON c.id = e.constituency_id\nJOIN ElectionResult er ON e.id = er.election_id\nWHERE er.is_winner = 1\nGROUP BY c.name, er.party_id\nHAVING COUNT(DISTINCT er.party_id) >= 2;\n```",
        "prompt_token_number": 184,
        "response_token_number": 72,
        "response_text_processed": "SELECT DISTINCT c.name FROM Constituency c JOIN Election e ON c.id = e.constituency_id JOIN ElectionResult er ON e.id = er.election_id WHERE er.is_winner = 1 GROUP BY c.name, er.party_id HAVING COUNT(DISTINCT er.party_id) >= 2"
    },
    {
        "id": 33979,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'legislators': ['political_party', 'name', 'email', 'phone_number', 'committee', 'committee_name', 'id']} and \n# the user question: Retrieve the names and committee assignments of all the legislators who serve on the education committee.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and committee assignments of all the legislators who serve on the education committee.",
        "output": "SELECT name, committee_name FROM legislators WHERE committee_name = 'Education Committee';",
        "schema": "political_science",
        "processed_schema_content": {
            "legislators": [
                "political_party",
                "name",
                "email",
                "phone_number",
                "committee",
                "committee_name",
                "id"
            ]
        },
        "response_text": "```sql\nSELECT name, committee\nFROM legislators\nWHERE committee_name = 'education';\n```",
        "prompt_token_number": 104,
        "response_token_number": 19,
        "response_text_processed": "SELECT name, committee FROM legislators WHERE committee_name = 'education'"
    },
    {
        "id": 33983,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'products': ['price', 'id', 'quantity', 'name', 'stock_quantity', 'supplier_id', 'store_id', 'category_id', 'product_name']} and \n# the user question: Select the \"name\" and \"price\" of all products in the \"products\" table where the \"price\" is greater than 100 and sort the results in descending order by price:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Select the \"name\" and \"price\" of all products in the \"products\" table where the \"price\" is greater than 100 and sort the results in descending order by price:",
        "output": "SELECT name, price FROM products WHERE price > 100 ORDER BY price DESC;",
        "schema": "political_science",
        "processed_schema_content": {
            "products": [
                "price",
                "id",
                "quantity",
                "name",
                "stock_quantity",
                "supplier_id",
                "store_id",
                "category_id",
                "product_name"
            ]
        },
        "response_text": "```sql\nSELECT name, price \nFROM products \nWHERE price > 100 \nORDER BY price DESC;\n```",
        "prompt_token_number": 132,
        "response_token_number": 23,
        "response_text_processed": "SELECT name, price FROM products WHERE price > 100 ORDER BY price DESC"
    },
    {
        "id": 33984,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['total_amount', 'customer_id', 'total', 'order_date', 'salesperson_id', 'product_id', 'shipped_date']} and \n# the user question: Show me the total revenue earned by each salesperson in the year 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Show me the total revenue earned by each salesperson in the year 2022.",
        "output": "SELECT salesperson_id, SUM(total) as total_revenue FROM orders WHERE YEAR(order_date) = 2022 GROUP BY salesperson_id",
        "schema": "political_science",
        "processed_schema_content": {
            "orders": [
                "total_amount",
                "customer_id",
                "total",
                "order_date",
                "salesperson_id",
                "product_id",
                "shipped_date"
            ]
        },
        "response_text": "```sql\nSELECT salesperson_id, SUM(total_amount) AS total_revenue\nFROM orders\nWHERE YEAR(order_date) = 2022\nGROUP BY salesperson_id;\n```",
        "prompt_token_number": 107,
        "response_token_number": 37,
        "response_text_processed": "SELECT salesperson_id, SUM(total_amount) AS total_revenue FROM orders WHERE YEAR(order_date) = 2022 GROUP BY salesperson_id"
    },
    {
        "id": 33985,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'orders': ['total_amount', 'customer_id', 'total', 'order_date', 'salesperson_id', 'product_id', 'shipped_date'], 'products': ['price', 'id', 'quantity', 'name', 'stock_quantity', 'supplier_id', 'store_id', 'category_id', 'product_name']} and \n# the user question: Which products have been ordered by at least 10 different customers?,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Which products have been ordered by at least 10 different customers?",
        "output": "SELECT products.name, COUNT(DISTINCT orders.customer_id) as count FROM orders JOIN products ON orders.product_id = products.id GROUP BY products.name HAVING count >= 10;",
        "schema": "political_science",
        "processed_schema_content": {
            "orders": [
                "total_amount",
                "customer_id",
                "total",
                "order_date",
                "salesperson_id",
                "product_id",
                "shipped_date"
            ],
            "products": [
                "price",
                "id",
                "quantity",
                "name",
                "stock_quantity",
                "supplier_id",
                "store_id",
                "category_id",
                "product_name"
            ]
        },
        "response_text": "```sql\nSELECT p.product_name \nFROM products p \nJOIN orders o ON p.id = o.product_id \nGROUP BY p.product_name \nHAVING COUNT(DISTINCT o.customer_id) >= 10;\n```",
        "prompt_token_number": 138,
        "response_token_number": 44,
        "response_text_processed": "SELECT p.product_name FROM products p JOIN orders o ON p.id = o.product_id GROUP BY p.product_name HAVING COUNT(DISTINCT o.customer_id) >= 10"
    },
    {
        "id": 33988,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find all equipment rentals that are currently checked out.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all equipment rentals that are currently checked out.",
        "output": "SELECT EquipmentRentals.rental_id, Users.username, Equipment.equipment_name, EquipmentRentals.rental_start_date, EquipmentRentals.rental_end_date FROM EquipmentRentals INNER JOIN Equipment ON EquipmentRentals.equipment_id = Equipment.equipment_id INNER JOIN Users ON EquipmentRentals.user_id = Users.user_id WHERE EquipmentRentals.rental_start_date <= CURRENT_DATE AND EquipmentRentals.rental_end_date >= CURRENT_DATE;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT *\nFROM EquipmentRentals\nWHERE rental_end_date IS NULL;\n```",
        "prompt_token_number": 191,
        "response_token_number": 18,
        "response_text_processed": "SELECT * FROM EquipmentRentals WHERE rental_end_date IS NULL"
    },
    {
        "id": 33989,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the average rating for each class.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average rating for each class.",
        "output": "SELECT Classes.class_name, AVG(Reviews.rating) AS avg_rating FROM Classes LEFT JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Reviews ON ClassSessions.session_id = Reviews.session_id GROUP BY Classes.class_id;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT class_id, AVG(rating) AS average_rating\nFROM Reviews\nGROUP BY class_id;\n```",
        "prompt_token_number": 285,
        "response_token_number": 24,
        "response_text_processed": "SELECT class_id, AVG(rating) AS average_rating FROM Reviews GROUP BY class_id"
    },
    {
        "id": 33990,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find all users who have enrolled in more than one class.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all users who have enrolled in more than one class.",
        "output": "SELECT Users.username, COUNT(*) as num_enrollments FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id GROUP BY Users.user_id HAVING COUNT(*) > 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT u.*\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nGROUP BY u.user_id\nHAVING COUNT(DISTINCT e.class_id) > 1;\n```",
        "prompt_token_number": 201,
        "response_token_number": 45,
        "response_text_processed": "SELECT u.* FROM Users u JOIN Enrollments e ON u.user_id = e.user_id GROUP BY u.user_id HAVING COUNT(DISTINCT e.class_id) > 1"
    },
    {
        "id": 33991,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the most popular equipment rental based on the number of times it has been rented.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the most popular equipment rental based on the number of times it has been rented.",
        "output": "SELECT Equipment.equipment_name, COUNT(*) as num_rentals FROM EquipmentRentals INNER JOIN Equipment ON EquipmentRentals.equipment_id = Equipment.equipment_id GROUP BY EquipmentRentals.equipment_id ORDER BY num_rentals DESC LIMIT 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_name, COUNT(*) AS rental_count\nFROM EquipmentRentals er\nJOIN Equipment e ON er.equipment_id = e.equipment_id\nGROUP BY e.equipment_name\nORDER BY rental_count DESC\nLIMIT 1;\n```",
        "prompt_token_number": 160,
        "response_token_number": 53,
        "response_text_processed": "SELECT e.equipment_name, COUNT(*) AS rental_count FROM EquipmentRentals er JOIN Equipment e ON er.equipment_id = e.equipment_id GROUP BY e.equipment_name ORDER BY rental_count DESC LIMIT 1"
    },
    {
        "id": 33994,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id']} and \n# the user question: Find the top-rated instructors.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the top-rated instructors.",
        "output": "SELECT Instructors.instructor_id, Users.username, AVG(Reviews.rating) as avg_rating FROM Instructors INNER JOIN Classes ON Instructors.instructor_id = Classes.instructor_id INNER JOIN Reviews ON Classes.class_id = Reviews.class_id INNER JOIN Users ON Instructors.user_id = Users.user_id GROUP BY Instructors.instructor_id ORDER BY avg_rating DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ]
        },
        "response_text": "```sql\nSELECT i.instructor_name, AVG(r.rating) AS average_rating\nFROM Instructors i\nJOIN Reviews r ON i.instructor_id = r.instructor_id\nGROUP BY i.instructor_name\nORDER BY average_rating DESC\nLIMIT 10;\n```",
        "prompt_token_number": 301,
        "response_token_number": 54,
        "response_text_processed": "SELECT i.instructor_name, AVG(r.rating) AS average_rating FROM Instructors i JOIN Reviews r ON i.instructor_id = r.instructor_id GROUP BY i.instructor_name ORDER BY average_rating DESC LIMIT 10"
    },
    {
        "id": 33995,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the total revenue generated by each class.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total revenue generated by each class.",
        "output": "SELECT Classes.class_name, SUM(Payments.payment_amount) as total_revenue FROM Classes INNER JOIN Payments ON Classes.class_id = Payments.class_id GROUP BY Classes.class_id;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Payments": [
                "payment_id",
                "user_id",
                "payment_amount",
                "payment_date",
                "class_id",
                "rental_id",
                "enrollment_id",
                "amount",
                "payment_method"
            ]
        },
        "response_text": "```sql\nSELECT \n    C.class_name,\n    SUM(P.payment_amount) AS total_revenue\nFROM \n    Classes C\nJOIN \n    Payments P ON C.class_id = P.class_id\nGROUP BY \n    C.class_name;\n```",
        "prompt_token_number": 219,
        "response_token_number": 50,
        "response_text_processed": "SELECT C.class_name, SUM(P.payment_amount) AS total_revenue FROM Classes C JOIN Payments P ON C.class_id = P.class_id GROUP BY C.class_name"
    },
    {
        "id": 33997,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee']} and \n# the user question: Find all users who have rented equipment more than once.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all users who have rented equipment more than once.",
        "output": "SELECT Users.username, COUNT(*) as num_rentals FROM Users INNER JOIN EquipmentRentals ON Users.user_id = EquipmentRentals.user_id GROUP BY Users.user_id HAVING COUNT(*) > 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, u.user_name, COUNT(er.rental_id) as rental_count\nFROM Users u\nJOIN EquipmentRentals er ON u.user_id = er.user_id\nGROUP BY u.user_id, u.username, u.user_name\nHAVING COUNT(er.rental_id) > 1;\n```",
        "prompt_token_number": 177,
        "response_token_number": 71,
        "response_text_processed": "SELECT u.user_id, u.username, u.user_name, COUNT(er.rental_id) as rental_count FROM Users u JOIN EquipmentRentals er ON u.user_id = er.user_id GROUP BY u.user_id, u.username, u.user_name HAVING COUNT(er.rental_id) > 1"
    },
    {
        "id": 34000,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id']} and \n# the user question: Find the number of reviews and the average rating for each class.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of reviews and the average rating for each class.",
        "output": "SELECT Classes.class_name, COUNT(*) as num_reviews, AVG(Reviews.rating) as avg_rating FROM Classes INNER JOIN Reviews ON Classes.class_id = Reviews.class_id GROUP BY Classes.class_id;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ]
        },
        "response_text": "```sql\nSELECT \n    Classes.class_id, \n    COUNT(Reviews.review_id) AS num_reviews, \n    AVG(Reviews.rating) AS average_rating\nFROM \n    Classes\nLEFT JOIN \n    Reviews \nON \n    Classes.class_id = Reviews.class_id\nGROUP BY \n    Classes.class_id;\n```",
        "prompt_token_number": 231,
        "response_token_number": 64,
        "response_text_processed": "SELECT Classes.class_id, COUNT(Reviews.review_id) AS num_reviews, AVG(Reviews.rating) AS average_rating FROM Classes LEFT JOIN Reviews ON Classes.class_id = Reviews.class_id GROUP BY Classes.class_id"
    },
    {
        "id": 34001,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id']} and \n# the user question: Find the top-rated equipment based on the average rating of its rentals.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the top-rated equipment based on the average rating of its rentals.",
        "output": "SELECT Equipment.equipment_name, AVG(Reviews.rating) as avg_rating FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id INNER JOIN Reviews ON EquipmentRentals.rental_id = Reviews.rental_id GROUP BY Equipment.equipment_id ORDER BY avg_rating DESC LIMIT 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_name, AVG(r.rating) AS average_rating\nFROM EquipmentRentals er\nJOIN Reviews r ON er.rental_id = r.rental_id\nJOIN Equipment e ON er.equipment_id = e.equipment_id\nGROUP BY e.equipment_name\nORDER BY average_rating DESC\nLIMIT 1;\n```",
        "prompt_token_number": 205,
        "response_token_number": 71,
        "response_text_processed": "SELECT e.equipment_name, AVG(r.rating) AS average_rating FROM EquipmentRentals er JOIN Reviews r ON er.rental_id = r.rental_id JOIN Equipment e ON er.equipment_id = e.equipment_id GROUP BY e.equipment_name ORDER BY average_rating DESC LIMIT 1"
    },
    {
        "id": 34002,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the number of classes that each user has enrolled in.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of classes that each user has enrolled in.",
        "output": "SELECT Users.username, COUNT(*) as num_enrollments FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id GROUP BY Users.user_id;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, COUNT(e.class_id) AS num_classes\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nGROUP BY u.user_id, u.username;\n```",
        "prompt_token_number": 201,
        "response_token_number": 48,
        "response_text_processed": "SELECT u.user_id, u.username, COUNT(e.class_id) AS num_classes FROM Users u JOIN Enrollments e ON u.user_id = e.user_id GROUP BY u.user_id, u.username"
    },
    {
        "id": 34003,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee']} and \n# the user question: Find the number of equipment rentals that have been made in each month of the year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of equipment rentals that have been made in each month of the year.",
        "output": "SELECT strftime('%m-%Y', EquipmentRentals.created_at) AS month, COUNT(*) as num_rentals FROM EquipmentRentals GROUP BY month;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ]
        },
        "response_text": "```sql\nSELECT\n    DATE_FORMAT(rental_start_date, '%Y-%m') AS month,\n    COUNT(*) AS number_of_rentals\nFROM\n    EquipmentRentals\nGROUP BY\n    DATE_FORMAT(rental_start_date, '%Y-%m');\n```",
        "prompt_token_number": 145,
        "response_token_number": 56,
        "response_text_processed": "SELECT DATE_FORMAT(rental_start_date, '%Y-%m') AS month, COUNT(*) AS number_of_rentals FROM EquipmentRentals GROUP BY DATE_FORMAT(rental_start_date, '%Y-%m')"
    },
    {
        "id": 34005,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find all users who have made payments in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all users who have made payments in the last month.",
        "output": "SELECT Users.username, SUM(Payments.payment_amount) as total_payments FROM Users INNER JOIN Payments ON Users.user_id = Payments.user_id WHERE Payments.payment_date >= date('now', '-1 month') GROUP BY Users.user_id;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Payments": [
                "payment_id",
                "user_id",
                "payment_amount",
                "payment_date",
                "class_id",
                "rental_id",
                "enrollment_id",
                "amount",
                "payment_method"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Users.* \nFROM Users\nJOIN Payments ON Users.user_id = Payments.user_id\nWHERE Payments.payment_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);\n```",
        "prompt_token_number": 148,
        "response_token_number": 39,
        "response_text_processed": "SELECT DISTINCT Users.* FROM Users JOIN Payments ON Users.user_id = Payments.user_id WHERE Payments.payment_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)"
    },
    {
        "id": 34006,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'WorkoutPlans': ['plan_id', 'plan_name', 'is_available']} and \n# the user question: Find the most popular workout plans based on the number of enrollments.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the most popular workout plans based on the number of enrollments.",
        "output": "SELECT WorkoutPlans.plan_name, COUNT(*) as num_enrollments FROM WorkoutPlans INNER JOIN Enrollments ON WorkoutPlans.plan_id = Enrollments.plan_id GROUP BY WorkoutPlans.plan_id ORDER BY num_enrollments DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "WorkoutPlans": [
                "plan_id",
                "plan_name",
                "is_available"
            ]
        },
        "response_text": "```sql\nSELECT WP.plan_id, WP.plan_name, COUNT(E.enrollment_id) AS enrollment_count\nFROM WorkoutPlans WP\nJOIN Enrollments E ON WP.plan_id = E.plan_id\nGROUP BY WP.plan_id, WP.plan_name\nORDER BY enrollment_count DESC;\n```",
        "prompt_token_number": 182,
        "response_token_number": 58,
        "response_text_processed": "SELECT WP.plan_id, WP.plan_name, COUNT(E.enrollment_id) AS enrollment_count FROM WorkoutPlans WP JOIN Enrollments E ON WP.plan_id = E.plan_id GROUP BY WP.plan_id, WP.plan_name ORDER BY enrollment_count DESC"
    },
    {
        "id": 34007,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has not been rented in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment that has not been rented in the last month.",
        "output": "SELECT Equipment.equipment_name FROM Equipment LEFT JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_id IS NULL OR EquipmentRentals.rental_end_date < date('now', '-1 month');",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_name\nFROM Equipment e\nLEFT JOIN EquipmentRentals er ON e.equipment_id = er.equipment_id AND er.rental_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nWHERE er.equipment_id IS NULL;\n```",
        "prompt_token_number": 156,
        "response_token_number": 57,
        "response_text_processed": "SELECT e.equipment_name FROM Equipment e LEFT JOIN EquipmentRentals er ON e.equipment_id = er.equipment_id AND er.rental_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) WHERE er.equipment_id IS NULL"
    },
    {
        "id": 34009,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time']} and \n# the user question: Find the number of workouts that are available each day of the week.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of workouts that are available each day of the week.",
        "output": "SELECT strftime('%w', Classes.start_time) AS day_of_week, COUNT(*) as num_workouts FROM Classes WHERE Classes.is_available = 1 GROUP BY day_of_week;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ]
        },
        "response_text": "```sql\nSELECT class_day, COUNT(*) AS available_workouts\nFROM Classes\nWHERE is_available = 1\nGROUP BY class_day;\n```",
        "prompt_token_number": 184,
        "response_token_number": 30,
        "response_text_processed": "SELECT class_day, COUNT(*) AS available_workouts FROM Classes WHERE is_available = 1 GROUP BY class_day"
    },
    {
        "id": 34012,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find all equipment that is currently rented.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all equipment that is currently rented.",
        "output": "SELECT Equipment.equipment_name, EquipmentRentals.rental_start_date, EquipmentRentals.rental_end_date FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_end_date >= CURRENT_DATE;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_name\nFROM EquipmentRentals er\nJOIN Equipment e ON er.equipment_id = e.equipment_id\nWHERE er.rental_end_date IS NULL OR (er.rental_end_date > CURRENT_DATE OR (er.rental_end_date = CURRENT_DATE AND er.rental_end_time > CURRENT_TIME));\n```",
        "prompt_token_number": 151,
        "response_token_number": 72,
        "response_text_processed": "SELECT e.equipment_name FROM EquipmentRentals er JOIN Equipment e ON er.equipment_id = e.equipment_id WHERE er.rental_end_date IS NULL OR (er.rental_end_date > CURRENT_DATE OR (er.rental_end_date = CURRENT_DATE AND er.rental_end_time > CURRENT_TIME))"
    },
    {
        "id": 34013,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date']} and \n# the user question: Find the instructors who have taught the most classes.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught the most classes.",
        "output": "SELECT Instructors.instructor_id, Users.username, COUNT(*) as num_classes_taught FROM Instructors INNER JOIN Classes ON Instructors.instructor_id = Classes.instructor_id INNER JOIN Users ON Instructors.user_id = Users.user_id GROUP BY Instructors.instructor_id ORDER BY num_classes_taught DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ]
        },
        "response_text": "```sql\nSELECT i.instructor_name, COUNT(*) AS class_count\nFROM Classes c\nJOIN Instructors i ON c.instructor_id = i.instructor_id\nGROUP BY i.instructor_name\nORDER BY class_count DESC\nLIMIT 1;\n```",
        "prompt_token_number": 257,
        "response_token_number": 52,
        "response_text_processed": "SELECT i.instructor_name, COUNT(*) AS class_count FROM Classes c JOIN Instructors i ON c.instructor_id = i.instructor_id GROUP BY i.instructor_name ORDER BY class_count DESC LIMIT 1"
    },
    {
        "id": 34014,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment rental with the highest total rental cost.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment rental with the highest total rental cost.",
        "output": "SELECT Equipment.equipment_name, SUM(EquipmentRentals.rental_cost) as total_rental_cost FROM EquipmentRentals INNER JOIN Equipment ON EquipmentRentals.equipment_id = Equipment.equipment_id GROUP BY EquipmentRentals.equipment_id ORDER BY total_rental_cost DESC LIMIT 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT * \nFROM EquipmentRentals\nORDER BY rental_cost DESC\nLIMIT 1;\n```",
        "prompt_token_number": 154,
        "response_token_number": 22,
        "response_text_processed": "SELECT * FROM EquipmentRentals ORDER BY rental_cost DESC LIMIT 1"
    },
    {
        "id": 34018,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee']} and \n# the user question: Find the total revenue generated by equipment rentals in each month of the year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total revenue generated by equipment rentals in each month of the year.",
        "output": "SELECT strftime('%m-%Y', EquipmentRentals.rental_start_date) AS month, SUM(EquipmentRentals.rental_cost) as total_revenue FROM EquipmentRentals GROUP BY month;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ]
        },
        "response_text": "```sql\nSELECT \n    DATE_FORMAT(rental_start_date, '%Y-%m') AS rental_month, \n    SUM(rental_cost + rental_fee) AS total_revenue\nFROM \n    EquipmentRentals\nGROUP BY \n    rental_month\nORDER BY \n    rental_month;\n```",
        "prompt_token_number": 143,
        "response_token_number": 61,
        "response_text_processed": "SELECT DATE_FORMAT(rental_start_date, '%Y-%m') AS rental_month, SUM(rental_cost + rental_fee) AS total_revenue FROM EquipmentRentals GROUP BY rental_month ORDER BY rental_month"
    },
    {
        "id": 34021,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id']} and \n# the user question: Find the classes that have not been reviewed.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have not been reviewed.",
        "output": "SELECT Classes.class_name, Classes.start_time FROM Classes LEFT JOIN Reviews ON Classes.class_id = Reviews.class_id WHERE Reviews.class_id IS NULL;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ]
        },
        "response_text": "```sql\nSELECT class_id, class_name, start_time, end_time\nFROM Classes\nWHERE class_id NOT IN (\n    SELECT class_id\n    FROM Reviews\n);\n```",
        "prompt_token_number": 227,
        "response_token_number": 36,
        "response_text_processed": "SELECT class_id, class_name, start_time, end_time FROM Classes WHERE class_id NOT IN ( SELECT class_id FROM Reviews )"
    },
    {
        "id": 34024,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the total revenue generated by each type of equipment.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total revenue generated by each type of equipment.",
        "output": "SELECT Equipment.equipment_type, SUM(Payments.payment_amount) as total_revenue FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id INNER JOIN Payments ON EquipmentRentals.rental_id = Payments.rental_id GROUP BY Equipment.equipment_type;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ],
            "Payments": [
                "payment_id",
                "user_id",
                "payment_amount",
                "payment_date",
                "class_id",
                "rental_id",
                "enrollment_id",
                "amount",
                "payment_method"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_type, SUM(er.rental_cost) AS total_revenue\nFROM EquipmentRentals er\nJOIN Equipment e ON er.equipment_id = e.equipment_id\nGROUP BY e.equipment_type;\n```",
        "prompt_token_number": 194,
        "response_token_number": 49,
        "response_text_processed": "SELECT e.equipment_type, SUM(er.rental_cost) AS total_revenue FROM EquipmentRentals er JOIN Equipment e ON er.equipment_id = e.equipment_id GROUP BY e.equipment_type"
    },
    {
        "id": 34025,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id']} and \n# the user question: Find the users who have reviewed the most classes.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have reviewed the most classes.",
        "output": "SELECT Users.username, COUNT(*) as num_reviews FROM Users INNER JOIN Reviews ON Users.user_id = Reviews.user_id GROUP BY Users.user_id ORDER BY num_reviews DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.user_name, COUNT(r.review_id) AS review_count\nFROM Users u\nJOIN Reviews r ON u.user_id = r.user_id\nGROUP BY u.user_id, u.user_name\nORDER BY review_count DESC\nLIMIT 1;\n```",
        "prompt_token_number": 154,
        "response_token_number": 58,
        "response_text_processed": "SELECT u.user_id, u.user_name, COUNT(r.review_id) AS review_count FROM Users u JOIN Reviews r ON u.user_id = r.user_id GROUP BY u.user_id, u.user_name ORDER BY review_count DESC LIMIT 1"
    },
    {
        "id": 34026,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee']} and \n# the user question: Find the number of equipment rentals that have been made in each hour of the day.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of equipment rentals that have been made in each hour of the day.",
        "output": "SELECT strftime('%H', EquipmentRentals.created_at) AS hour, COUNT(*) as num_rentals FROM EquipmentRentals GROUP BY hour;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ]
        },
        "response_text": "```sql\nSELECT DATEPART(HOUR, rental_start_time) AS hour_of_day, COUNT(*) AS rental_count\nFROM EquipmentRentals\nGROUP BY DATEPART(HOUR, rental_start_time)\nORDER BY hour_of_day;\n```",
        "prompt_token_number": 145,
        "response_token_number": 47,
        "response_text_processed": "SELECT DATEPART(HOUR, rental_start_time) AS hour_of_day, COUNT(*) AS rental_count FROM EquipmentRentals GROUP BY DATEPART(HOUR, rental_start_time) ORDER BY hour_of_day"
    },
    {
        "id": 34027,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the classes that have not been enrolled in by any user.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have not been enrolled in by any user.",
        "output": "SELECT Classes.class_name, Locations.location_name FROM Classes INNER JOIN Locations ON Classes.location_id = Locations.location_id LEFT JOIN Enrollments ON Classes.class_id = Enrollments.class_id WHERE Enrollments.enrollment_id IS NULL;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Locations": [
                "location_name",
                "location_id",
                "is_available"
            ]
        },
        "response_text": "```sql\nSELECT *\nFROM Classes c\nWHERE c.class_id NOT IN (\n    SELECT e.class_id\n    FROM Enrollments e\n);\n```",
        "prompt_token_number": 291,
        "response_token_number": 31,
        "response_text_processed": "SELECT * FROM Classes c WHERE c.class_id NOT IN ( SELECT e.class_id FROM Enrollments e )"
    },
    {
        "id": 34031,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id']} and \n# the user question: Find the number of reviews and the average rating for each equipment rental.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of reviews and the average rating for each equipment rental.",
        "output": "SELECT Equipment.equipment_name, EquipmentRentals.rental_start_date, EquipmentRentals.rental_end_date, COUNT(*) as num_reviews, AVG(Reviews.rating) as avg_rating FROM EquipmentRentals INNER JOIN Equipment ON EquipmentRentals.equipment_id = Equipment.equipment_id INNER JOIN Reviews ON EquipmentRentals.rental_id = Reviews.rental_id GROUP BY EquipmentRentals.rental_id;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ]
        },
        "response_text": "```sql\nSELECT \n    er.rental_id,\n    COUNT(r.review_id) AS number_of_reviews,\n    AVG(r.rating) AS average_rating\nFROM \n    EquipmentRentals er\nLEFT JOIN \n    Reviews r ON er.rental_id = r.rental_id\nGROUP BY \n    er.rental_id;\n```",
        "prompt_token_number": 205,
        "response_token_number": 70,
        "response_text_processed": "SELECT er.rental_id, COUNT(r.review_id) AS number_of_reviews, AVG(r.rating) AS average_rating FROM EquipmentRentals er LEFT JOIN Reviews r ON er.rental_id = r.rental_id GROUP BY er.rental_id"
    },
    {
        "id": 34033,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented the most.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment that has been rented the most.",
        "output": "SELECT Equipment.equipment_name, COUNT(*) as num_rentals FROM EquipmentRentals INNER JOIN Equipment ON EquipmentRentals.equipment_id = Equipment.equipment_id GROUP BY Equipment.equipment_id ORDER BY num_rentals DESC LIMIT 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_name\nFROM EquipmentRentals er\nJOIN Equipment e ON er.equipment_id = e.equipment_id\nGROUP BY e.equipment_name\nORDER BY COUNT(er.rental_id) DESC\nLIMIT 1;\n```",
        "prompt_token_number": 153,
        "response_token_number": 52,
        "response_text_processed": "SELECT e.equipment_name FROM EquipmentRentals er JOIN Equipment e ON er.equipment_id = e.equipment_id GROUP BY e.equipment_name ORDER BY COUNT(er.rental_id) DESC LIMIT 1"
    },
    {
        "id": 34034,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have enrolled in classes at every available time slot.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have enrolled in classes at every available time slot.",
        "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id WHERE Classes.is_available = 1 GROUP BY Users.user_id HAVING COUNT(DISTINCT Classes.start_time) = (SELECT COUNT(DISTINCT Classes.start_time) FROM Classes WHERE is_available = 1);",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT user_id\nFROM Enrollments e1\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Classes c\n    WHERE c.is_available = TRUE\n    AND NOT EXISTS (\n        SELECT 1\n        FROM Enrollments e2\n        WHERE e2.class_id = c.class_id\n        AND e2.user_id = e1.user_id\n    )\n)\nGROUP BY user_id;\n```",
        "prompt_token_number": 315,
        "response_token_number": 86,
        "response_text_processed": "SELECT user_id FROM Enrollments e1 WHERE NOT EXISTS ( SELECT 1 FROM Classes c WHERE c.is_available = TRUE AND NOT EXISTS ( SELECT 1 FROM Enrollments e2 WHERE e2.class_id = c.class_id AND e2.user_id = e1.user_id ) ) GROUP BY user_id"
    },
    {
        "id": 34036,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the most active users based on the number of classes they have enrolled in.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the most active users based on the number of classes they have enrolled in.",
        "output": "SELECT Users.username, COUNT(*) as num_enrollments FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id GROUP BY Users.user_id ORDER BY num_enrollments DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT U.user_id, U.username, COUNT(E.class_id) AS num_classes_enrolled\nFROM Users U\nJOIN Enrollments E ON U.user_id = E.user_id\nGROUP BY U.user_id, U.username\nORDER BY num_classes_enrolled DESC;\n```",
        "prompt_token_number": 205,
        "response_token_number": 58,
        "response_text_processed": "SELECT U.user_id, U.username, COUNT(E.class_id) AS num_classes_enrolled FROM Users U JOIN Enrollments E ON U.user_id = E.user_id GROUP BY U.user_id, U.username ORDER BY num_classes_enrolled DESC"
    },
    {
        "id": 34037,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time']} and \n# the user question: Find the classes that are scheduled for the next week.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that are scheduled for the next week.",
        "output": "SELECT Classes.class_name, Classes.start_time, Classes.end_time FROM Classes WHERE Classes.start_time >= date('now') AND Classes.start_time < date('now', '+7 days');",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ]
        },
        "response_text": "```sql\nSELECT * \nFROM Classes \nWHERE class_date BETWEEN CURDATE() + INTERVAL 1 DAY AND CURDATE() + INTERVAL 7 DAY \n   AND is_cancelled = 0\n```",
        "prompt_token_number": 181,
        "response_token_number": 41,
        "response_text_processed": "SELECT * FROM Classes WHERE class_date BETWEEN CURDATE() + INTERVAL 1 DAY AND CURDATE() + INTERVAL 7 DAY AND is_cancelled = 0 ```"
    },
    {
        "id": 34038,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'WorkoutPlans': ['plan_id', 'plan_name', 'is_available']} and \n# the user question: Find the users who have enrolled in all available workout plans.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have enrolled in all available workout plans.",
        "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN WorkoutPlans ON Enrollments.plan_id = WorkoutPlans.plan_id WHERE WorkoutPlans.is_available = 1 GROUP BY Users.user_id HAVING COUNT(DISTINCT WorkoutPlans.plan_id) = (SELECT COUNT(*) FROM WorkoutPlans WHERE is_available = 1);",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "WorkoutPlans": [
                "plan_id",
                "plan_name",
                "is_available"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, u.user_name\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nJOIN WorkoutPlans w ON e.plan_id = w.plan_id\nWHERE w.is_available = 1\nGROUP BY u.user_id, u.username, u.user_name\nHAVING COUNT(DISTINCT w.plan_id) = (SELECT COUNT(plan_id) FROM WorkoutPlans WHERE is_available = 1);\n```",
        "prompt_token_number": 218,
        "response_token_number": 95,
        "response_text_processed": "SELECT u.user_id, u.username, u.user_name FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN WorkoutPlans w ON e.plan_id = w.plan_id WHERE w.is_available = 1 GROUP BY u.user_id, u.username, u.user_name HAVING COUNT(DISTINCT w.plan_id) = (SELECT COUNT(plan_id) FROM WorkoutPlans WHERE is_available = 1)"
    },
    {
        "id": 34039,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id']} and \n# the user question: Find the classes that have not been taught by any instructor.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have not been taught by any instructor.",
        "output": "SELECT Classes.class_name, Classes.start_time FROM Classes LEFT JOIN Instructors ON Classes.instructor_id = Instructors.instructor_id WHERE Instructors.instructor_id IS NULL;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ]
        },
        "response_text": "```sql\nSELECT class_name\nFROM Classes\nWHERE instructor_id IS NULL;\n```",
        "prompt_token_number": 221,
        "response_token_number": 17,
        "response_text_processed": "SELECT class_name FROM Classes WHERE instructor_id IS NULL"
    },
    {
        "id": 34040,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee']} and \n# the user question: Find the total number of equipment rentals for each month of the year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total number of equipment rentals for each month of the year.",
        "output": "SELECT strftime('%m-%Y', EquipmentRentals.created_at) AS month, COUNT(*) as num_rentals FROM EquipmentRentals GROUP BY month;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ]
        },
        "response_text": "```sql\nSELECT DATE_FORMAT(rental_start_date, '%Y-%m') AS month, COUNT(*) AS total_rentals\nFROM EquipmentRentals\nGROUP BY month\nORDER BY month;\n```",
        "prompt_token_number": 142,
        "response_token_number": 41,
        "response_text_processed": "SELECT DATE_FORMAT(rental_start_date, '%Y-%m') AS month, COUNT(*) AS total_rentals FROM EquipmentRentals GROUP BY month ORDER BY month"
    },
    {
        "id": 34042,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id']} and \n# the user question: Find the users who have reviewed the same class more than once.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have reviewed the same class more than once.",
        "output": "SELECT Users.username, Reviews.class_id, COUNT(*) as num_reviews FROM Users INNER JOIN Reviews ON Users.user_id = Reviews.user_id GROUP BY Users.user_id, Reviews.class_id HAVING COUNT(*) > 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, u.user_name\nFROM Users u\nJOIN Reviews r ON u.user_id = r.user_id\nGROUP BY u.user_id, r.class_id\nHAVING COUNT(r.review_id) > 1;\n```",
        "prompt_token_number": 157,
        "response_token_number": 53,
        "response_text_processed": "SELECT u.user_id, u.username, u.user_name FROM Users u JOIN Reviews r ON u.user_id = r.user_id GROUP BY u.user_id, r.class_id HAVING COUNT(r.review_id) > 1"
    },
    {
        "id": 34044,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id']} and \n# the user question: Find the total number of reviews and the average rating for each instructor.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total number of reviews and the average rating for each instructor.",
        "output": "SELECT Instructors.instructor_id, Users.username, COUNT(*) as num_reviews, AVG(Reviews.rating) as avg_rating FROM Instructors INNER JOIN Classes ON Instructors.instructor_id = Classes.instructor_id INNER JOIN Reviews ON Classes.class_id = Reviews.class_id INNER JOIN Users ON Instructors.user_id = Users.user_id GROUP BY Instructors.instructor_id;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ]
        },
        "response_text": "```sql\nSELECT \n    i.instructor_id, \n    COUNT(r.review_id) AS total_reviews, \n    AVG(r.rating) AS average_rating \nFROM \n    Instructors i \nJOIN \n    Reviews r ON i.instructor_id = r.instructor_id \nGROUP BY \n    i.instructor_id;\n```",
        "prompt_token_number": 309,
        "response_token_number": 65,
        "response_text_processed": "SELECT i.instructor_id, COUNT(r.review_id) AS total_reviews, AVG(r.rating) AS average_rating FROM Instructors i JOIN Reviews r ON i.instructor_id = r.instructor_id GROUP BY i.instructor_id"
    },
    {
        "id": 34048,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'WorkoutPlans': ['plan_id', 'plan_name', 'is_available']} and \n# the user question: Find the most popular workout plans for the current month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the most popular workout plans for the current month.",
        "output": "SELECT WorkoutPlans.plan_name, COUNT(*) as num_enrollments FROM WorkoutPlans INNER JOIN Enrollments ON WorkoutPlans.plan_id = Enrollments.plan_id WHERE strftime('%m-%Y', Enrollments.enrollment_date) = strftime('%m-%Y', 'now') GROUP BY WorkoutPlans.plan_id ORDER BY num_enrollments DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "WorkoutPlans": [
                "plan_id",
                "plan_name",
                "is_available"
            ]
        },
        "response_text": "```sql\nSELECT wp.plan_name, COUNT(e.enrollment_id) AS enrollment_count\nFROM Enrollments e\nJOIN WorkoutPlans wp ON e.plan_id = wp.plan_id\nWHERE e.enrollment_date >= DATE_FORMAT(CURDATE(), '%Y-%m-01')\n  AND e.enrollment_date < DATE_FORMAT(CURDATE() + INTERVAL 1 MONTH, '%Y-%m-01')\nGROUP BY wp.plan_id, wp.plan_name\nORDER BY enrollment_count DESC;\n```",
        "prompt_token_number": 179,
        "response_token_number": 99,
        "response_text_processed": "SELECT wp.plan_name, COUNT(e.enrollment_id) AS enrollment_count FROM Enrollments e JOIN WorkoutPlans wp ON e.plan_id = wp.plan_id WHERE e.enrollment_date >= DATE_FORMAT(CURDATE(), '%Y-%m-01') AND e.enrollment_date < DATE_FORMAT(CURDATE() + INTERVAL 1 MONTH, '%Y-%m-01') GROUP BY wp.plan_id, wp.plan_name ORDER BY enrollment_count DESC"
    },
    {
        "id": 34049,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the total number of equipment rentals for each equipment type.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total number of equipment rentals for each equipment type.",
        "output": "SELECT Equipment.equipment_type, COUNT(*) as num_rentals FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id GROUP BY Equipment.equipment_type;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT Equipment.equipment_type, COUNT(*) AS total_rentals\nFROM EquipmentRentals\nJOIN Equipment ON EquipmentRentals.equipment_id = Equipment.equipment_id\nGROUP BY Equipment.equipment_type;\n```",
        "prompt_token_number": 155,
        "response_token_number": 44,
        "response_text_processed": "SELECT Equipment.equipment_type, COUNT(*) AS total_rentals FROM EquipmentRentals JOIN Equipment ON EquipmentRentals.equipment_id = Equipment.equipment_id GROUP BY Equipment.equipment_type"
    },
    {
        "id": 34050,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have enrolled in all available classes.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have enrolled in all available classes.",
        "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id WHERE Classes.is_available = 1 GROUP BY Users.user_id HAVING COUNT(DISTINCT Classes.class_id) = (SELECT COUNT(*) FROM Classes WHERE is_available = 1);",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, u.user_name\nFROM Users u\nWHERE NOT EXISTS (\n    SELECT 1\n    FROM Classes c\n    WHERE c.is_available = 1\n      AND NOT EXISTS (\n          SELECT 1\n          FROM Enrollments e\n          WHERE e.user_id = u.user_id\n            AND e.class_id = c.class_id\n      )\n);\n```",
        "prompt_token_number": 312,
        "response_token_number": 83,
        "response_text_processed": "SELECT u.user_id, u.username, u.user_name FROM Users u WHERE NOT EXISTS ( SELECT 1 FROM Classes c WHERE c.is_available = 1 AND NOT EXISTS ( SELECT 1 FROM Enrollments e WHERE e.user_id = u.user_id AND e.class_id = c.class_id ) )"
    },
    {
        "id": 34053,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the most popular equipment type for the current month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the most popular equipment type for the current month.",
        "output": "SELECT Equipment.equipment_type, COUNT(*) as num_rentals FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE strftime('%m-%Y', EquipmentRentals.rental_start_date) = strftime('%m-%Y', 'now') GROUP BY Equipment.equipment_type ORDER BY num_rentals DESC LIMIT 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_type, COUNT(er.equipment_id) AS rental_count\nFROM EquipmentRentals er\nJOIN Equipment e ON er.equipment_id = e.equipment_id\nWHERE DATE_FORMAT(er.rental_start_date, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m')\nGROUP BY e.equipment_type\nORDER BY rental_count DESC\nLIMIT 1;\n```",
        "prompt_token_number": 154,
        "response_token_number": 84,
        "response_text_processed": "SELECT e.equipment_type, COUNT(er.equipment_id) AS rental_count FROM EquipmentRentals er JOIN Equipment e ON er.equipment_id = e.equipment_id WHERE DATE_FORMAT(er.rental_start_date, '%Y-%m') = DATE_FORMAT(CURDATE(), '%Y-%m') GROUP BY e.equipment_type ORDER BY rental_count DESC LIMIT 1"
    },
    {
        "id": 34055,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have been enrolled in by at least 3 users.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have been enrolled in by at least 3 users.",
        "output": "SELECT Classes.class_name, COUNT(*) as num_enrollments FROM Classes INNER JOIN Enrollments ON Classes.class_id = Enrollments.class_id GROUP BY Classes.class_id HAVING COUNT(*) >= 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT c.class_name, c.class_id\nFROM Classes c\nJOIN Enrollments e ON c.class_id = e.class_id\nGROUP BY c.class_name, c.class_id\nHAVING COUNT(e.user_id) >= 3;\n```",
        "prompt_token_number": 278,
        "response_token_number": 52,
        "response_text_processed": "SELECT c.class_name, c.class_id FROM Classes c JOIN Enrollments e ON c.class_id = e.class_id GROUP BY c.class_name, c.class_id HAVING COUNT(e.user_id) >= 3"
    },
    {
        "id": 34056,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the classes that have not been reviewed by any user.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have not been reviewed by any user.",
        "output": "SELECT Classes.class_name, Locations.location_name FROM Classes INNER JOIN Locations ON Classes.location_id = Locations.location_id LEFT JOIN Reviews ON Classes.class_id = Reviews.class_id WHERE Reviews.review_id IS NULL;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ],
            "Locations": [
                "location_name",
                "location_id",
                "is_available"
            ]
        },
        "response_text": "```sql\nSELECT c.*\nFROM Classes c\nLEFT JOIN Reviews r ON c.class_id = r.class_id\nWHERE r.class_id IS NULL;\n```",
        "prompt_token_number": 245,
        "response_token_number": 31,
        "response_text_processed": "SELECT c.* FROM Classes c LEFT JOIN Reviews r ON c.class_id = r.class_id WHERE r.class_id IS NULL"
    },
    {
        "id": 34061,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have enrolled in classes that start after 5pm.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have enrolled in classes that start after 5pm.",
        "output": "SELECT Users.username, Classes.class_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id WHERE Classes.start_time >= '17:00:00';",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Users.user_id, Users.username, Users.user_name\nFROM Users\nJOIN Enrollments ON Users.user_id = Enrollments.user_id\nJOIN Classes ON Enrollments.class_id = Classes.class_id\nWHERE Classes.start_time > '17:00:00';\n```",
        "prompt_token_number": 316,
        "response_token_number": 60,
        "response_text_processed": "SELECT DISTINCT Users.user_id, Users.username, Users.user_name FROM Users JOIN Enrollments ON Users.user_id = Enrollments.user_id JOIN Classes ON Enrollments.class_id = Classes.class_id WHERE Classes.start_time > '17:00:00'"
    },
    {
        "id": 34062,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have not enrolled in any class.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have not enrolled in any class.",
        "output": "SELECT Users.username FROM Users LEFT JOIN Enrollments ON Users.user_id = Enrollments.user_id WHERE Enrollments.enrollment_id IS NULL;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT *\nFROM Users\nWHERE user_id NOT IN (\n    SELECT user_id\n    FROM Enrollments\n);\n```",
        "prompt_token_number": 200,
        "response_token_number": 27,
        "response_text_processed": "SELECT * FROM Users WHERE user_id NOT IN ( SELECT user_id FROM Enrollments )"
    },
    {
        "id": 34063,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the most popular equipment types based on the number of rentals.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the most popular equipment types based on the number of rentals.",
        "output": "SELECT Equipment.equipment_type, COUNT(*) as num_rentals FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id GROUP BY Equipment.equipment_type ORDER BY num_rentals DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_type, COUNT(er.equipment_id) AS rental_count\nFROM EquipmentRentals er\nJOIN Equipment e ON er.equipment_id = e.equipment_id\nGROUP BY e.equipment_type\nORDER BY rental_count DESC;\n```",
        "prompt_token_number": 156,
        "response_token_number": 53,
        "response_text_processed": "SELECT e.equipment_type, COUNT(er.equipment_id) AS rental_count FROM EquipmentRentals er JOIN Equipment e ON er.equipment_id = e.equipment_id GROUP BY e.equipment_type ORDER BY rental_count DESC"
    },
    {
        "id": 34064,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the users who have made payments for a class that has been cancelled.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have made payments for a class that has been cancelled.",
        "output": "SELECT Users.username, Payments.payment_amount FROM Users INNER JOIN Payments ON Users.user_id = Payments.user_id INNER JOIN Classes ON Payments.class_id = Classes.class_id WHERE Classes.is_cancelled = 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Payments": [
                "payment_id",
                "user_id",
                "payment_amount",
                "payment_date",
                "class_id",
                "rental_id",
                "enrollment_id",
                "amount",
                "payment_method"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Users.*\nFROM Users\nJOIN Payments ON Users.user_id = Payments.user_id\nJOIN Classes ON Payments.class_id = Classes.class_id\nWHERE Classes.is_cancelled = 1;\n```",
        "prompt_token_number": 263,
        "response_token_number": 42,
        "response_text_processed": "SELECT DISTINCT Users.* FROM Users JOIN Payments ON Users.user_id = Payments.user_id JOIN Classes ON Payments.class_id = Classes.class_id WHERE Classes.is_cancelled = 1"
    },
    {
        "id": 34066,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have enrolled in a class that has been cancelled.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have enrolled in a class that has been cancelled.",
        "output": "SELECT Users.username, Classes.class_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id WHERE Classes.is_cancelled = 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT u.user_id, u.username, u.user_name\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nJOIN Classes c ON e.class_id = c.class_id\nWHERE c.is_cancelled = 1;\n```",
        "prompt_token_number": 315,
        "response_token_number": 56,
        "response_text_processed": "SELECT DISTINCT u.user_id, u.username, u.user_name FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN Classes c ON e.class_id = c.class_id WHERE c.is_cancelled = 1"
    },
    {
        "id": 34068,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have enrolled in more than one class in the last week.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have enrolled in more than one class in the last week.",
        "output": "SELECT Users.username, COUNT(*) as num_enrollments FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id WHERE Classes.start_time >= date('now', '-7 days') GROUP BY Users.user_id HAVING COUNT(*) > 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT \n    u.user_id, \n    u.username, \n    u.user_name\nFROM \n    Users u\nJOIN \n    Enrollments e ON u.user_id = e.user_id\nWHERE \n    e.enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK)\nGROUP BY \n    u.user_id, \n    u.username, \n    u.user_name\nHAVING \n    COUNT(DISTINCT e.class_id) > 1;\n```",
        "prompt_token_number": 317,
        "response_token_number": 98,
        "response_text_processed": "SELECT u.user_id, u.username, u.user_name FROM Users u JOIN Enrollments e ON u.user_id = e.user_id WHERE e.enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK) GROUP BY u.user_id, u.username, u.user_name HAVING COUNT(DISTINCT e.class_id) > 1"
    },
    {
        "id": 34069,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the users who have not made payments for a class that has already ended.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have not made payments for a class that has already ended.",
        "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id LEFT JOIN Payments ON Enrollments.enrollment_id = Payments.enrollment_id WHERE Classes.end_time < date('now') AND Payments.payment_id IS NULL;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Payments": [
                "payment_id",
                "user_id",
                "payment_amount",
                "payment_date",
                "class_id",
                "rental_id",
                "enrollment_id",
                "amount",
                "payment_method"
            ]
        },
        "response_text": "```sql\nSELECT u.username, u.user_name, u.email\nFROM Users u\nWHERE u.user_id NOT IN (\n    SELECT DISTINCT p.user_id\n    FROM Payments p\n    WHERE p.class_id IN (\n        SELECT c.class_id\n        FROM Classes c\n        WHERE c.end_time < NOW()\n    )\n);\n```",
        "prompt_token_number": 357,
        "response_token_number": 67,
        "response_text_processed": "SELECT u.username, u.user_name, u.email FROM Users u WHERE u.user_id NOT IN ( SELECT DISTINCT p.user_id FROM Payments p WHERE p.class_id IN ( SELECT c.class_id FROM Classes c WHERE c.end_time < NOW() ) )"
    },
    {
        "id": 34072,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date']} and \n# the user question: Find the instructors who have taught classes in multiple locations.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught classes in multiple locations.",
        "output": "SELECT Instructors.instructor_id, Users.username, COUNT(DISTINCT Classes.location_id) as num_locations FROM Instructors INNER JOIN Classes ON Instructors.instructor_id = Classes.instructor_id INNER JOIN Users ON Instructors.user_id = Users.user_id GROUP BY Instructors.instructor_id HAVING COUNT(DISTINCT Classes.location_id) > 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ]
        },
        "response_text": "```sql\nSELECT i.instructor_id, i.instructor_name\nFROM Instructors i\nJOIN Classes c ON i.instructor_id = c.instructor_id\nGROUP BY i.instructor_id, i.instructor_name\nHAVING COUNT(DISTINCT c.location_id) > 1;\n```",
        "prompt_token_number": 258,
        "response_token_number": 60,
        "response_text_processed": "SELECT i.instructor_id, i.instructor_name FROM Instructors i JOIN Classes c ON i.instructor_id = c.instructor_id GROUP BY i.instructor_id, i.instructor_name HAVING COUNT(DISTINCT c.location_id) > 1"
    },
    {
        "id": 34075,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out the most.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment that has been rented out the most.",
        "output": "SELECT Equipment.equipment_name, COUNT(*) as num_rentals FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id GROUP BY Equipment.equipment_id ORDER BY num_rentals DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_name \nFROM EquipmentRentals er \nJOIN Equipment e ON er.equipment_id = e.equipment_id \nGROUP BY e.equipment_name \nORDER BY COUNT(er.rental_id) DESC \nLIMIT 1;\n```",
        "prompt_token_number": 154,
        "response_token_number": 52,
        "response_text_processed": "SELECT e.equipment_name FROM EquipmentRentals er JOIN Equipment e ON er.equipment_id = e.equipment_id GROUP BY e.equipment_name ORDER BY COUNT(er.rental_id) DESC LIMIT 1"
    },
    {
        "id": 34079,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the users who have made payments for classes that are fully enrolled.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have made payments for classes that are fully enrolled.",
        "output": "SELECT Users.username, Classes.class_name, Payments.payment_amount FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id INNER JOIN Payments ON Enrollments.enrollment_id = Payments.enrollment_id WHERE Classes.current_enrollment >= Classes.max_capacity;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Payments": [
                "payment_id",
                "user_id",
                "payment_amount",
                "payment_date",
                "class_id",
                "rental_id",
                "enrollment_id",
                "amount",
                "payment_method"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT u.user_id, u.username, u.user_name\nFROM Users u\nJOIN Payments p ON u.user_id = p.user_id\nJOIN Enrollments e ON p.enrollment_id = e.enrollment_id\nJOIN Classes c ON e.class_id = c.class_id\nWHERE c.current_enrollment >= c.max_capacity;\n```",
        "prompt_token_number": 355,
        "response_token_number": 71,
        "response_text_processed": "SELECT DISTINCT u.user_id, u.username, u.user_name FROM Users u JOIN Payments p ON u.user_id = p.user_id JOIN Enrollments e ON p.enrollment_id = e.enrollment_id JOIN Classes c ON e.class_id = c.class_id WHERE c.current_enrollment >= c.max_capacity"
    },
    {
        "id": 34080,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has never been rented.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment that has never been rented.",
        "output": "SELECT Equipment.equipment_name FROM Equipment LEFT JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_id IS NULL;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT equipment_name\nFROM Equipment\nWHERE equipment_id NOT IN (SELECT DISTINCT equipment_id FROM EquipmentRentals);\n```",
        "prompt_token_number": 152,
        "response_token_number": 26,
        "response_text_processed": "SELECT equipment_name FROM Equipment WHERE equipment_id NOT IN (SELECT DISTINCT equipment_id FROM EquipmentRentals)"
    },
    {
        "id": 34082,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have reviewed a class that they have not enrolled in.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have reviewed a class that they have not enrolled in.",
        "output": "SELECT Users.username, Classes.class_name FROM Users INNER JOIN Reviews ON Users.user_id = Reviews.user_id INNER JOIN Classes ON Reviews.class_id = Classes.class_id LEFT JOIN Enrollments ON Classes.class_id = Enrollments.class_id AND Enrollments.user_id = Users.user_id WHERE Enrollments.enrollment_id IS NULL;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT u.user_id, u.username, u.user_name\nFROM Users u\nJOIN Reviews r ON u.user_id = r.user_id\nLEFT JOIN Enrollments e ON r.user_id = e.user_id AND r.class_id = e.class_id\nWHERE e.enrollment_id IS NULL;\n```",
        "prompt_token_number": 364,
        "response_token_number": 64,
        "response_text_processed": "SELECT DISTINCT u.user_id, u.username, u.user_name FROM Users u JOIN Reviews r ON u.user_id = r.user_id LEFT JOIN Enrollments e ON r.user_id = e.user_id AND r.class_id = e.class_id WHERE e.enrollment_id IS NULL"
    },
    {
        "id": 34084,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the users who have made payments for classes that start in the future.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have made payments for classes that start in the future.",
        "output": "SELECT Users.username, Classes.class_name, Payments.payment_amount, Classes.start_time FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id INNER JOIN Payments ON Enrollments.enrollment_id = Payments.enrollment_id WHERE Classes.start_time > date('now') ORDER BY Classes.start_time ASC;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Payments": [
                "payment_id",
                "user_id",
                "payment_amount",
                "payment_date",
                "class_id",
                "rental_id",
                "enrollment_id",
                "amount",
                "payment_method"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT u.*\nFROM Users u\nJOIN Payments p ON u.user_id = p.user_id\nJOIN Classes c ON p.class_id = c.class_id\nWHERE c.start_time > CURRENT_TIMESTAMP;\n```",
        "prompt_token_number": 356,
        "response_token_number": 44,
        "response_text_processed": "SELECT DISTINCT u.* FROM Users u JOIN Payments p ON u.user_id = p.user_id JOIN Classes c ON p.class_id = c.class_id WHERE c.start_time > CURRENT_TIMESTAMP"
    },
    {
        "id": 34088,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out for the longest period of time.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment that has been rented out for the longest period of time.",
        "output": "SELECT Equipment.equipment_name, EquipmentRentals.rental_start_time, EquipmentRentals.rental_end_time, julianday(EquipmentRentals.rental_end_time) - julianday(EquipmentRentals.rental_start_time) AS rental_duration FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id ORDER BY rental_duration DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT eq.equipment_name\nFROM Equipment eq\nJOIN EquipmentRentals er ON eq.equipment_id = er.equipment_id\nORDER BY (er.rental_end_date + er.rental_end_time) - (er.rental_start_date + er.rental_start_time) DESC\nLIMIT 1;\n```",
        "prompt_token_number": 158,
        "response_token_number": 69,
        "response_text_processed": "SELECT eq.equipment_name FROM Equipment eq JOIN EquipmentRentals er ON eq.equipment_id = er.equipment_id ORDER BY (er.rental_end_date + er.rental_end_time) - (er.rental_start_date + er.rental_start_time) DESC LIMIT 1"
    },
    {
        "id": 34089,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have been reviewed by users who have not attended those classes.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have been reviewed by users who have not attended those classes.",
        "output": "SELECT Users.username, Reviews.review_text, Classes.class_name FROM Users INNER JOIN Reviews ON Users.user_id = Reviews.user_id INNER JOIN Classes ON Reviews.class_id = Classes.class_id LEFT JOIN Enrollments ON Users.user_id = Enrollments.user_id AND Classes.class_id = Enrollments.class_id WHERE Enrollments.enrollment_id IS NULL;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.class_id, c.class_name\nFROM Classes c\nJOIN Reviews r ON c.class_id = r.class_id\nLEFT JOIN Enrollments e ON r.user_id = e.user_id AND r.class_id = e.class_id\nWHERE e.enrollment_id IS NULL;\n```",
        "prompt_token_number": 365,
        "response_token_number": 61,
        "response_text_processed": "SELECT DISTINCT c.class_id, c.class_name FROM Classes c JOIN Reviews r ON c.class_id = r.class_id LEFT JOIN Enrollments e ON r.user_id = e.user_id AND r.class_id = e.class_id WHERE e.enrollment_id IS NULL"
    },
    {
        "id": 34090,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the users who have made payments for classes that have not been cancelled and start in the next 7 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have made payments for classes that have not been cancelled and start in the next 7 days.",
        "output": "SELECT Users.username, Classes.class_name, Payments.payment_amount, Classes.start_time FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id INNER JOIN Payments ON Enrollments.enrollment_id = Payments.enrollment_id WHERE Classes.is_cancelled = 0 AND Classes.start_time BETWEEN date('now') AND date('now', '+7 days') ORDER BY Classes.start_time ASC;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Payments": [
                "payment_id",
                "user_id",
                "payment_amount",
                "payment_date",
                "class_id",
                "rental_id",
                "enrollment_id",
                "amount",
                "payment_method"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT U.user_id, U.username, U.user_name, U.email\nFROM Users U\nJOIN Payments P ON U.user_id = P.user_id\nJOIN Classes C ON P.class_id = C.class_id\nWHERE C.is_cancelled = 0\nAND C.start_time >= NOW()\nAND C.start_time < DATE_ADD(NOW(), INTERVAL 7 DAY);\n```",
        "prompt_token_number": 364,
        "response_token_number": 79,
        "response_text_processed": "SELECT DISTINCT U.user_id, U.username, U.user_name, U.email FROM Users U JOIN Payments P ON U.user_id = P.user_id JOIN Classes C ON P.class_id = C.class_id WHERE C.is_cancelled = 0 AND C.start_time >= NOW() AND C.start_time < DATE_ADD(NOW(), INTERVAL 7 DAY)"
    },
    {
        "id": 34092,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have enrolled in classes taught by an instructor who has been reviewed in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have enrolled in classes taught by an instructor who has been reviewed in the last month.",
        "output": "SELECT DISTINCT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id INNER JOIN Instructors ON Classes.instructor_id = Instructors.instructor_id INNER JOIN Reviews ON Instructors.instructor_id = Reviews.instructor_id WHERE Reviews.review_date >= date('now', '-1 month');",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT u.user_id, u.username, u.user_name\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nJOIN Classes c ON e.class_id = c.class_id\nJOIN Reviews r ON c.instructor_id = r.instructor_id\nWHERE r.review_date >= DATEADD(MONTH, -1, GETDATE());\n```",
        "prompt_token_number": 409,
        "response_token_number": 78,
        "response_text_processed": "SELECT DISTINCT u.user_id, u.username, u.user_name FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN Classes c ON e.class_id = c.class_id JOIN Reviews r ON c.instructor_id = r.instructor_id WHERE r.review_date >= DATEADD(MONTH, -1, GETDATE())"
    },
    {
        "id": 34093,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out for more than 3 hours.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment that has been rented out for more than 3 hours.",
        "output": "SELECT Equipment.equipment_name, EquipmentRentals.rental_start_time, EquipmentRentals.rental_end_time, julianday(EquipmentRentals.rental_end_time) - julianday(EquipmentRentals.rental_start_time) AS rental_duration FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE rental_duration > 3.0/24.0;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT E.equipment_name\nFROM EquipmentRentals ER\nJOIN Equipment E ON ER.equipment_id = E.equipment_id\nWHERE TIMESTAMPDIFF(HOUR, CONCAT(ER.rental_start_date, ' ', ER.rental_start_time), CONCAT(ER.rental_end_date, ' ', ER.rental_end_time)) > 3;\n```",
        "prompt_token_number": 158,
        "response_token_number": 76,
        "response_text_processed": "SELECT E.equipment_name FROM EquipmentRentals ER JOIN Equipment E ON ER.equipment_id = E.equipment_id WHERE TIMESTAMPDIFF(HOUR, CONCAT(ER.rental_start_date, ' ', ER.rental_start_time), CONCAT(ER.rental_end_date, ' ', ER.rental_end_time)) > 3"
    },
    {
        "id": 34097,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have more than 5 users enrolled.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have more than 5 users enrolled.",
        "output": "SELECT Classes.class_name, COUNT(*) as num_enrollments FROM Classes INNER JOIN Enrollments ON Classes.class_id = Enrollments.class_id GROUP BY Classes.class_id HAVING num_enrollments > 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT c.*\nFROM Classes c\nJOIN Enrollments e ON c.class_id = e.class_id\nGROUP BY c.class_id\nHAVING COUNT(e.user_id) > 5;\n```",
        "prompt_token_number": 275,
        "response_token_number": 42,
        "response_text_processed": "SELECT c.* FROM Classes c JOIN Enrollments e ON c.class_id = e.class_id GROUP BY c.class_id HAVING COUNT(e.user_id) > 5"
    },
    {
        "id": 34098,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the users who have made payments for more than one class in the same day.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have made payments for more than one class in the same day.",
        "output": "SELECT Users.username, COUNT(DISTINCT Classes.class_id) as num_classes, Payments.payment_amount, Payments.payment_date FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id INNER JOIN Payments ON Enrollments.enrollment_id = Payments.enrollment_id GROUP BY Users.user_id, Payments.payment_date HAVING num_classes > 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Payments": [
                "payment_id",
                "user_id",
                "payment_amount",
                "payment_date",
                "class_id",
                "rental_id",
                "enrollment_id",
                "amount",
                "payment_method"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, u.user_name\nFROM Users u\nJOIN Payments p ON u.user_id = p.user_id\nGROUP BY u.user_id, u.username, u.user_name, p.payment_date\nHAVING COUNT(DISTINCT p.class_id) > 1;\n```",
        "prompt_token_number": 358,
        "response_token_number": 63,
        "response_text_processed": "SELECT u.user_id, u.username, u.user_name FROM Users u JOIN Payments p ON u.user_id = p.user_id GROUP BY u.user_id, u.username, u.user_name, p.payment_date HAVING COUNT(DISTINCT p.class_id) > 1"
    },
    {
        "id": 34100,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out the most in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment that has been rented out the most in the last month.",
        "output": "SELECT Equipment.equipment_name, COUNT(*) as num_rentals FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_start_time >= date('now', '-1 month') GROUP BY Equipment.equipment_id ORDER BY num_rentals DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_name, COUNT(er.equipment_id) AS rental_count\nFROM EquipmentRentals er\nJOIN Equipment e ON er.equipment_id = e.equipment_id\nWHERE er.rental_start_date >= DATEADD(month, -1, GETDATE())\nGROUP BY e.equipment_name\nORDER BY rental_count DESC\nLIMIT 1;\n```",
        "prompt_token_number": 158,
        "response_token_number": 75,
        "response_text_processed": "SELECT e.equipment_name, COUNT(er.equipment_id) AS rental_count FROM EquipmentRentals er JOIN Equipment e ON er.equipment_id = e.equipment_id WHERE er.rental_start_date >= DATEADD(month, -1, GETDATE()) GROUP BY e.equipment_name ORDER BY rental_count DESC LIMIT 1"
    },
    {
        "id": 34104,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the classes that have not been cancelled and have not reached their maximum capacity.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have not been cancelled and have not reached their maximum capacity.",
        "output": "SELECT Classes.class_name, Locations.location_name, Classes.max_capacity - COUNT(Enrollments.enrollment_id) as num_spots_available FROM Classes INNER JOIN Locations ON Classes.location_id = Locations.location_id LEFT JOIN Enrollments ON Classes.class_id = Enrollments.class_id WHERE Classes.is_cancelled = 0 AND Classes.max_capacity > COUNT(Enrollments.enrollment_id) GROUP BY Classes.class_id;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Locations": [
                "location_name",
                "location_id",
                "is_available"
            ]
        },
        "response_text": "```sql\nSELECT * \nFROM Classes \nWHERE is_cancelled = 0 AND current_enrollment < max_capacity;\n```",
        "prompt_token_number": 294,
        "response_token_number": 25,
        "response_text_processed": "SELECT * FROM Classes WHERE is_cancelled = 0 AND current_enrollment < max_capacity"
    },
    {
        "id": 34105,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out the least in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment that has been rented out the least in the last month.",
        "output": "SELECT Equipment.equipment_name, COUNT(*) as num_rentals FROM Equipment LEFT JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_start_time >= date('now', '-1 month') OR EquipmentRentals.rental_start_time IS NULL GROUP BY Equipment.equipment_id ORDER BY num_rentals ASC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_name\nFROM EquipmentRentals er\nJOIN Equipment e ON er.equipment_id = e.equipment_id\nWHERE er.rental_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY e.equipment_id\nORDER BY COUNT(er.rental_id) ASC\nLIMIT 1;\n```",
        "prompt_token_number": 158,
        "response_token_number": 71,
        "response_text_processed": "SELECT e.equipment_name FROM EquipmentRentals er JOIN Equipment e ON er.equipment_id = e.equipment_id WHERE er.rental_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY e.equipment_id ORDER BY COUNT(er.rental_id) ASC LIMIT 1"
    },
    {
        "id": 34108,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the classes that have been cancelled and have not been rescheduled.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have been cancelled and have not been rescheduled.",
        "output": "SELECT Classes.class_name, Locations.location_name, Classes.start_time, Classes.end_time FROM Classes INNER JOIN Locations ON Classes.location_id = Locations.location_id WHERE Classes.is_cancelled = 1 AND Classes.reschedule_date IS NULL;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Locations": [
                "location_name",
                "location_id",
                "is_available"
            ]
        },
        "response_text": "```sql\nSELECT * \nFROM Classes \nWHERE is_cancelled = 1 AND reschedule_date IS NULL;\n```",
        "prompt_token_number": 199,
        "response_token_number": 24,
        "response_text_processed": "SELECT * FROM Classes WHERE is_cancelled = 1 AND reschedule_date IS NULL"
    },
    {
        "id": 34112,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the users who have attended classes at all available locations.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended classes at all available locations.",
        "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id INNER JOIN Locations ON Classes.location_id = Locations.location_id WHERE Classes.is_available = 1 GROUP BY Users.user_id HAVING COUNT(DISTINCT Locations.location_id) = (SELECT COUNT(DISTINCT location_id) FROM Locations);",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Locations": [
                "location_name",
                "location_id",
                "is_available"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nJOIN Classes c ON e.class_id = c.class_id\nJOIN Locations l ON c.location_id = l.location_id\nWHERE e.attendance_status = 'attended' AND l.is_available = 1\nGROUP BY u.user_id, u.username\nHAVING COUNT(DISTINCT l.location_id) = (SELECT COUNT(*) FROM Locations WHERE is_available = 1);\n```",
        "prompt_token_number": 328,
        "response_token_number": 104,
        "response_text_processed": "SELECT u.user_id, u.username FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN Classes c ON e.class_id = c.class_id JOIN Locations l ON c.location_id = l.location_id WHERE e.attendance_status = 'attended' AND l.is_available = 1 GROUP BY u.user_id, u.username HAVING COUNT(DISTINCT l.location_id) = (SELECT COUNT(*) FROM Locations WHERE is_available = 1)"
    },
    {
        "id": 34113,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out for the longest duration in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment that has been rented out for the longest duration in the last month.",
        "output": "SELECT Equipment.equipment_name, SUM(julianday(EquipmentRentals.rental_end_time) - julianday(EquipmentRentals.rental_start_time)) as total_rental_days FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_start_time >= date('now', '-1 month') GROUP BY Equipment.equipment_id ORDER BY total_rental_days DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_name\nFROM EquipmentRentals er\nJOIN Equipment e ON er.equipment_id = e.equipment_id\nWHERE er.rental_start_date >= NOW() - INTERVAL 1 MONTH\nORDER BY (TIMESTAMPDIFF(SECOND, CONCAT(er.rental_start_date, ' ', er.rental_start_time), CONCAT(er.rental_end_date, ' ', er.rental_end_time))) DESC\nLIMIT 1;\n```",
        "prompt_token_number": 160,
        "response_token_number": 95,
        "response_text_processed": "SELECT e.equipment_name FROM EquipmentRentals er JOIN Equipment e ON er.equipment_id = e.equipment_id WHERE er.rental_start_date >= NOW() - INTERVAL 1 MONTH ORDER BY (TIMESTAMPDIFF(SECOND, CONCAT(er.rental_start_date, ' ', er.rental_start_time), CONCAT(er.rental_end_date, ' ', er.rental_end_time))) DESC LIMIT 1"
    },
    {
        "id": 34115,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have the highest average rating.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have the highest average rating.",
        "output": "SELECT Classes.class_name, AVG(Reviews.rating) as avg_rating FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Reviews ON Enrollments.enrollment_id = Reviews.enrollment_id GROUP BY Classes.class_id ORDER BY avg_rating DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT c.class_id, c.class_name, AVG(r.rating) AS avg_rating\nFROM Classes c\nJOIN Reviews r ON c.class_id = r.class_id\nGROUP BY c.class_id, c.class_name\nORDER BY avg_rating DESC\nLIMIT 1;\n```",
        "prompt_token_number": 380,
        "response_token_number": 57,
        "response_text_processed": "SELECT c.class_id, c.class_name, AVG(r.rating) AS avg_rating FROM Classes c JOIN Reviews r ON c.class_id = r.class_id GROUP BY c.class_id, c.class_name ORDER BY avg_rating DESC LIMIT 1"
    },
    {
        "id": 34116,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended the most classes in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended the most classes in the last month.",
        "output": "SELECT Users.username, COUNT(Enrollments.enrollment_id) AS num_enrollments FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id ORDER BY num_enrollments DESC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT U.user_id, U.username, COUNT(E.class_id) AS attended_classes\nFROM Users U\nJOIN Enrollments E ON U.user_id = E.user_id\nWHERE E.attendance_status = 'attended' \n  AND E.enrollment_date >= DATEADD(MONTH, -1, GETDATE())\nGROUP BY U.user_id, U.username\nORDER BY attended_classes DESC\nLIMIT 1;\n```",
        "prompt_token_number": 262,
        "response_token_number": 87,
        "response_text_processed": "SELECT U.user_id, U.username, COUNT(E.class_id) AS attended_classes FROM Users U JOIN Enrollments E ON U.user_id = E.user_id WHERE E.attendance_status = 'attended' AND E.enrollment_date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY U.user_id, U.username ORDER BY attended_classes DESC LIMIT 1"
    },
    {
        "id": 34118,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the classes that have been reviewed by users and have an average rating of at least 4.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have been reviewed by users and have an average rating of at least 4.",
        "output": "SELECT Classes.class_name, Locations.location_name, AVG(Reviews.rating) as avg_rating FROM Classes INNER JOIN Locations ON Classes.location_id = Locations.location_id LEFT JOIN Reviews ON Classes.class_id = Reviews.class_id GROUP BY Classes.class_id HAVING AVG(Reviews.rating) >= 4;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ],
            "Locations": [
                "location_name",
                "location_id",
                "is_available"
            ]
        },
        "response_text": "```sql\nSELECT Classes.class_id, Classes.class_name, AVG(Reviews.rating) as average_rating\nFROM Classes\nJOIN Reviews ON Classes.class_id = Reviews.class_id\nGROUP BY Classes.class_id, Classes.class_name\nHAVING AVG(Reviews.rating) >= 4;\n```",
        "prompt_token_number": 253,
        "response_token_number": 57,
        "response_text_processed": "SELECT Classes.class_id, Classes.class_name, AVG(Reviews.rating) as average_rating FROM Classes JOIN Reviews ON Classes.class_id = Reviews.class_id GROUP BY Classes.class_id, Classes.class_name HAVING AVG(Reviews.rating) >= 4"
    },
    {
        "id": 34119,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out for the shortest duration in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment that has been rented out for the shortest duration in the last month.",
        "output": "SELECT Equipment.equipment_name, EquipmentRentals.rental_start_time, EquipmentRentals.rental_end_time, julianday(EquipmentRentals.rental_end_time) - julianday(EquipmentRentals.rental_start_time) as rental_duration FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_end_time >= date('now', '-1 month') ORDER BY rental_duration ASC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_name\nFROM EquipmentRentals er\nJOIN Equipment e ON er.equipment_id = e.equipment_id\nWHERE er.rental_start_date >= DATEADD(month, -1, GETDATE())\nORDER BY DATEDIFF(minute, er.rental_start_date, er.rental_end_date) ASC\nLIMIT 1;\n```",
        "prompt_token_number": 160,
        "response_token_number": 76,
        "response_text_processed": "SELECT e.equipment_name FROM EquipmentRentals er JOIN Equipment e ON er.equipment_id = e.equipment_id WHERE er.rental_start_date >= DATEADD(month, -1, GETDATE()) ORDER BY DATEDIFF(minute, er.rental_start_date, er.rental_end_date) ASC LIMIT 1"
    },
    {
        "id": 34123,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the users who have made payments for the most expensive classes in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have made payments for the most expensive classes in the last month.",
        "output": "SELECT Users.username, MAX(Classes.price) as max_class_price FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id INNER JOIN Payments ON Enrollments.enrollment_id = Payments.enrollment_id WHERE Payments.payment_date >= date('now', '-1 month') GROUP BY Users.user_id ORDER BY max_class_price DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Payments": [
                "payment_id",
                "user_id",
                "payment_amount",
                "payment_date",
                "class_id",
                "rental_id",
                "enrollment_id",
                "amount",
                "payment_method"
            ]
        },
        "response_text": "```sql\nSELECT Users.user_id, Users.username, Users.user_name\nFROM Users\nJOIN Payments ON Users.user_id = Payments.user_id\nJOIN Classes ON Payments.class_id = Classes.class_id\nWHERE Payments.payment_date >= NOW() - INTERVAL 1 MONTH\nAND Classes.price = (\n    SELECT MAX(price)\n    FROM Classes\n    WHERE class_id IN (\n        SELECT class_id\n        FROM Payments\n        WHERE payment_date >= NOW() - INTERVAL 1 MONTH\n    )\n);\n```",
        "prompt_token_number": 358,
        "response_token_number": 99,
        "response_text_processed": "SELECT Users.user_id, Users.username, Users.user_name FROM Users JOIN Payments ON Users.user_id = Payments.user_id JOIN Classes ON Payments.class_id = Classes.class_id WHERE Payments.payment_date >= NOW() - INTERVAL 1 MONTH AND Classes.price = ( SELECT MAX(price) FROM Classes WHERE class_id IN ( SELECT class_id FROM Payments WHERE payment_date >= NOW() - INTERVAL 1 MONTH ) )"
    },
    {
        "id": 34126,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the classes that have been canceled and not rescheduled.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have been canceled and not rescheduled.",
        "output": "SELECT Classes.class_name, Locations.location_name FROM Classes INNER JOIN Locations ON Classes.location_id = Locations.location_id WHERE Classes.is_cancelled = 1 AND Classes.reschedule_date IS NULL;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Locations": [
                "location_name",
                "location_id",
                "is_available"
            ]
        },
        "response_text": "```sql\nSELECT * \nFROM Classes \nWHERE is_cancelled = 1 AND reschedule_date IS NULL;\n```",
        "prompt_token_number": 197,
        "response_token_number": 24,
        "response_text_processed": "SELECT * FROM Classes WHERE is_cancelled = 1 AND reschedule_date IS NULL"
    },
    {
        "id": 34127,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have enrolled in the most classes in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have enrolled in the most classes in the last month.",
        "output": "SELECT Users.username, COUNT(*) as num_enrollments FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id WHERE Enrollments.enrollment_date >= date('now', '-1 month') GROUP BY Users.user_id ORDER BY num_enrollments DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT U.user_id, U.username, COUNT(E.class_id) AS class_count\nFROM Users U\nJOIN Enrollments E ON U.user_id = E.user_id\nWHERE E.enrollment_date >= DATEADD(month, -1, GETDATE())\nGROUP BY U.user_id, U.username\nORDER BY class_count DESC\nLIMIT 1;\n```",
        "prompt_token_number": 316,
        "response_token_number": 74,
        "response_text_processed": "SELECT U.user_id, U.username, COUNT(E.class_id) AS class_count FROM Users U JOIN Enrollments E ON U.user_id = E.user_id WHERE E.enrollment_date >= DATEADD(month, -1, GETDATE()) GROUP BY U.user_id, U.username ORDER BY class_count DESC LIMIT 1"
    },
    {
        "id": 34129,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has never been rented out.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment that has never been rented out.",
        "output": "SELECT Equipment.equipment_name FROM Equipment LEFT JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id GROUP BY Equipment.equipment_id HAVING COUNT(EquipmentRentals.equipment_id) = 0;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_name\nFROM Equipment e\nLEFT JOIN EquipmentRentals er ON e.equipment_id = er.equipment_id\nWHERE er.equipment_id IS NULL;\n```",
        "prompt_token_number": 153,
        "response_token_number": 39,
        "response_text_processed": "SELECT e.equipment_name FROM Equipment e LEFT JOIN EquipmentRentals er ON e.equipment_id = er.equipment_id WHERE er.equipment_id IS NULL"
    },
    {
        "id": 34136,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the users who have attended a class at all available locations.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended a class at all available locations.",
        "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id INNER JOIN Locations ON Classes.location_id = Locations.location_id GROUP BY Users.user_id HAVING COUNT(DISTINCT Locations.location_id) = (SELECT COUNT(DISTINCT location_id) FROM Locations);",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Locations": [
                "location_name",
                "location_id",
                "is_available"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username \nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nJOIN Classes c ON e.class_id = c.class_id\nJOIN Locations l ON c.location_id = l.location_id\nWHERE e.attendance_status = 'attended' AND l.is_available = 1\nGROUP BY u.user_id, u.username\nHAVING COUNT(DISTINCT l.location_id) = (SELECT COUNT(location_id) FROM Locations WHERE is_available = 1);\n```",
        "prompt_token_number": 329,
        "response_token_number": 106,
        "response_text_processed": "SELECT u.user_id, u.username FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN Classes c ON e.class_id = c.class_id JOIN Locations l ON c.location_id = l.location_id WHERE e.attendance_status = 'attended' AND l.is_available = 1 GROUP BY u.user_id, u.username HAVING COUNT(DISTINCT l.location_id) = (SELECT COUNT(location_id) FROM Locations WHERE is_available = 1)"
    },
    {
        "id": 34142,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the instructors who have taught classes at all locations.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught classes at all locations.",
        "output": "SELECT Instructors.instructor_name FROM Instructors WHERE Instructors.instructor_id IN ( SELECT DISTINCT ClassSessions.instructor_id FROM ClassSessions GROUP BY ClassSessions.instructor_id HAVING COUNT(DISTINCT ClassSessions.location_id) = ( SELECT COUNT(DISTINCT Locations.location_id) FROM Locations ) );",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Locations": [
                "location_name",
                "location_id",
                "is_available"
            ]
        },
        "response_text": "```sql\nSELECT I.instructor_id, I.instructor_name\nFROM Instructors I\nWHERE NOT EXISTS (\n    SELECT L.location_id\n    FROM Locations L\n    WHERE L.is_available = 1\n    AND NOT EXISTS (\n        SELECT 1\n        FROM ClassSessions CS\n        WHERE CS.instructor_id = I.instructor_id\n        AND CS.location_id = L.location_id\n    )\n);\n```",
        "prompt_token_number": 182,
        "response_token_number": 85,
        "response_text_processed": "SELECT I.instructor_id, I.instructor_name FROM Instructors I WHERE NOT EXISTS ( SELECT L.location_id FROM Locations L WHERE L.is_available = 1 AND NOT EXISTS ( SELECT 1 FROM ClassSessions CS WHERE CS.instructor_id = I.instructor_id AND CS.location_id = L.location_id ) )"
    },
    {
        "id": 34149,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended classes taught by all instructors.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended classes taught by all instructors.",
        "output": "SELECT Users.user_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' GROUP BY Users.user_id HAVING COUNT(DISTINCT ClassSessions.instructor_id) = ( SELECT COUNT(*) FROM Instructors );",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT U.user_id, U.username, U.user_name\nFROM Users U\nWHERE NOT EXISTS (\n    SELECT I.instructor_id\n    FROM Instructors I\n    WHERE NOT EXISTS (\n        SELECT E.user_id\n        FROM Enrollments E\n        JOIN ClassSessions CS ON E.class_id = CS.class_id\n        WHERE E.user_id = U.user_id AND CS.instructor_id = I.instructor_id\n    )\n);\n```",
        "prompt_token_number": 299,
        "response_token_number": 92,
        "response_text_processed": "SELECT U.user_id, U.username, U.user_name FROM Users U WHERE NOT EXISTS ( SELECT I.instructor_id FROM Instructors I WHERE NOT EXISTS ( SELECT E.user_id FROM Enrollments E JOIN ClassSessions CS ON E.class_id = CS.class_id WHERE E.user_id = U.user_id AND CS.instructor_id = I.instructor_id ) )"
    },
    {
        "id": 34150,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out for the longest total duration in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment that has been rented out for the longest total duration in the last month.",
        "output": "SELECT Equipment.equipment_name, SUM(julianday(EquipmentRentals.rental_end_time) - julianday(EquipmentRentals.rental_start_time)) as total_rental_duration FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_start_time >= date('now', '-1 month') GROUP BY Equipment.equipment_id ORDER BY total_rental_duration DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_name \nFROM EquipmentRentals er \nJOIN Equipment e ON er.equipment_id = e.equipment_id \nWHERE er.rental_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY e.equipment_id\nORDER BY SUM(TIMESTAMPDIFF(MINUTE, CONCAT(er.rental_start_date, ' ', er.rental_start_time), CONCAT(er.rental_end_date, ' ', er.rental_end_time))) DESC\nLIMIT 1;\n```",
        "prompt_token_number": 161,
        "response_token_number": 106,
        "response_text_processed": "SELECT e.equipment_name FROM EquipmentRentals er JOIN Equipment e ON er.equipment_id = e.equipment_id WHERE er.rental_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY e.equipment_id ORDER BY SUM(TIMESTAMPDIFF(MINUTE, CONCAT(er.rental_start_date, ' ', er.rental_start_time), CONCAT(er.rental_end_date, ' ', er.rental_end_time))) DESC LIMIT 1"
    },
    {
        "id": 34154,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has never been rented out for more than 1 hour.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment that has never been rented out for more than 1 hour.",
        "output": "SELECT Equipment.equipment_name FROM Equipment WHERE Equipment.equipment_id NOT IN ( SELECT EquipmentRentals.equipment_id FROM EquipmentRentals WHERE (julianday(EquipmentRentals.rental_end_time) - julianday(EquipmentRentals.rental_start_time)) * 24 >= 1 );",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_name\nFROM Equipment e\nLEFT JOIN EquipmentRentals er ON e.equipment_id = er.equipment_id\nWHERE er.equipment_id IS NULL OR\n      TIMESTAMPDIFF(MINUTE, CONCAT(er.rental_start_date, ' ', er.rental_start_time), CONCAT(er.rental_end_date, ' ', er.rental_end_time)) <= 60\nGROUP BY e.equipment_id\nHAVING COUNT(er.equipment_id) = (\n    SELECT COUNT(*)\n    FROM EquipmentRentals er2\n    WHERE er2.equipment_id = e.equipment_id\n);\n```",
        "prompt_token_number": 159,
        "response_token_number": 129,
        "response_text_processed": "SELECT e.equipment_name FROM Equipment e LEFT JOIN EquipmentRentals er ON e.equipment_id = er.equipment_id WHERE er.equipment_id IS NULL OR TIMESTAMPDIFF(MINUTE, CONCAT(er.rental_start_date, ' ', er.rental_start_time), CONCAT(er.rental_end_date, ' ', er.rental_end_time)) <= 60 GROUP BY e.equipment_id HAVING COUNT(er.equipment_id) = ( SELECT COUNT(*) FROM EquipmentRentals er2 WHERE er2.equipment_id = e.equipment_id )"
    },
    {
        "id": 34155,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended the most sessions in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended the most sessions in the last month.",
        "output": "SELECT Users.username, COUNT(DISTINCT ClassSessions.session_id) AS num_sessions FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id ORDER BY num_sessions DESC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, u.user_name, COUNT(e.session_id) AS attended_sessions\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nJOIN ClassSessions cs ON e.session_id = cs.session_id\nWHERE e.attendance_status = 'attended'\nAND cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY u.user_id, u.username, u.user_name\nORDER BY attended_sessions DESC\nLIMIT 1;\n```",
        "prompt_token_number": 262,
        "response_token_number": 104,
        "response_text_processed": "SELECT u.user_id, u.username, u.user_name, COUNT(e.session_id) AS attended_sessions FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN ClassSessions cs ON e.session_id = cs.session_id WHERE e.attendance_status = 'attended' AND cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY u.user_id, u.username, u.user_name ORDER BY attended_sessions DESC LIMIT 1"
    },
    {
        "id": 34162,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught the most sessions in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught the most sessions in the last month.",
        "output": "SELECT Instructors.instructor_name, COUNT(*) as num_sessions FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_start_time >= date('now', '-1 month') GROUP BY Instructors.instructor_id ORDER BY num_sessions DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT I.instructor_name, COUNT(CS.session_id) AS session_count\nFROM Instructors I\nJOIN ClassSessions CS ON I.instructor_id = CS.instructor_id\nWHERE CS.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY I.instructor_name\nORDER BY session_count DESC;\n```",
        "prompt_token_number": 170,
        "response_token_number": 69,
        "response_text_processed": "SELECT I.instructor_name, COUNT(CS.session_id) AS session_count FROM Instructors I JOIN ClassSessions CS ON I.instructor_id = CS.instructor_id WHERE CS.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY I.instructor_name ORDER BY session_count DESC"
    },
    {
        "id": 34165,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the locations with the highest average class ratings in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the locations with the highest average class ratings in the last month.",
        "output": "SELECT Locations.location_name, AVG(Reviews.rating) as avg_rating FROM Locations INNER JOIN Classes ON Locations.location_id = Classes.location_id INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Reviews ON Enrollments.enrollment_id = Reviews.enrollment_id WHERE Reviews.review_date >= date('now', '-1 month') GROUP BY Locations.location_id ORDER BY avg_rating DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Locations": [
                "location_name",
                "location_id",
                "is_available"
            ]
        },
        "response_text": "```sql\nSELECT l.location_name, AVG(r.rating) AS avg_rating\nFROM Reviews r\nJOIN Classes c ON r.class_id = c.class_id\nJOIN Locations l ON c.location_id = l.location_id\nWHERE r.review_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY l.location_name\nORDER BY avg_rating DESC\nLIMIT 1;\n```",
        "prompt_token_number": 399,
        "response_token_number": 77,
        "response_text_processed": "SELECT l.location_name, AVG(r.rating) AS avg_rating FROM Reviews r JOIN Classes c ON r.class_id = c.class_id JOIN Locations l ON c.location_id = l.location_id WHERE r.review_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY l.location_name ORDER BY avg_rating DESC LIMIT 1"
    },
    {
        "id": 34166,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has not been rented out in the last 3 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment that has not been rented out in the last 3 months.",
        "output": "SELECT Equipment.equipment_name FROM Equipment WHERE Equipment.equipment_id NOT IN ( SELECT EquipmentRentals.equipment_id FROM EquipmentRentals WHERE EquipmentRentals.rental_start_time >= date('now', '-3 month') );",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_name\nFROM Equipment e\nLEFT JOIN EquipmentRentals er ON e.equipment_id = er.equipment_id\nWHERE er.rental_end_date IS NULL OR er.rental_end_date < DATE_SUB(CURDATE(), INTERVAL 3 MONTH);\n```",
        "prompt_token_number": 159,
        "response_token_number": 59,
        "response_text_processed": "SELECT e.equipment_name FROM Equipment e LEFT JOIN EquipmentRentals er ON e.equipment_id = er.equipment_id WHERE er.rental_end_date IS NULL OR er.rental_end_date < DATE_SUB(CURDATE(), INTERVAL 3 MONTH)"
    },
    {
        "id": 34167,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the instructors who have taught at least 5 different classes in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught at least 5 different classes in the last month.",
        "output": "SELECT Instructors.instructor_name FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE Enrollments.enrollment_date >= date('now', '-1 month') GROUP BY Instructors.instructor_id HAVING COUNT(DISTINCT ClassSessions.class_id) >= 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT i.instructor_name\nFROM Instructors i\nJOIN ClassSessions cs ON i.instructor_id = cs.instructor_id\nWHERE cs.session_date >= DATEADD(month, -1, GETDATE())\nGROUP BY i.instructor_name\nHAVING COUNT(DISTINCT cs.class_id) >= 5;\n```",
        "prompt_token_number": 266,
        "response_token_number": 66,
        "response_text_processed": "SELECT i.instructor_name FROM Instructors i JOIN ClassSessions cs ON i.instructor_id = cs.instructor_id WHERE cs.session_date >= DATEADD(month, -1, GETDATE()) GROUP BY i.instructor_name HAVING COUNT(DISTINCT cs.class_id) >= 5"
    },
    {
        "id": 34168,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended the same class more than once in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended the same class more than once in the last month.",
        "output": "SELECT Users.username, Classes.class_name, COUNT(DISTINCT ClassSessions.session_id) as num_classes_attended FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id, Classes.class_id HAVING num_classes_attended > 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.user_name, COUNT(e.class_id) AS times_attended\nFROM Enrollments e\nJOIN Users u ON e.user_id = u.user_id\nWHERE e.attendance_status = 'attended'\n  AND e.enrollment_date >= DATEADD(month, -1, GETDATE())\nGROUP BY u.user_id, u.user_name, e.class_id\nHAVING COUNT(e.class_id) > 1;\n```",
        "prompt_token_number": 377,
        "response_token_number": 92,
        "response_text_processed": "SELECT u.user_id, u.user_name, COUNT(e.class_id) AS times_attended FROM Enrollments e JOIN Users u ON e.user_id = u.user_id WHERE e.attendance_status = 'attended' AND e.enrollment_date >= DATEADD(month, -1, GETDATE()) GROUP BY u.user_id, u.user_name, e.class_id HAVING COUNT(e.class_id) > 1"
    },
    {
        "id": 34169,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Ratings': ['created_at', 'rating', 'session_id', 'class_id', 'user_id']} and \n# the user question: Find the instructors who have taught classes with the highest average rating in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught classes with the highest average rating in the last month.",
        "output": "SELECT Instructors.instructor_name, AVG(Ratings.rating) AS avg_rating FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id LEFT JOIN Ratings ON ClassSessions.session_id = Ratings.session_id WHERE Ratings.created_at BETWEEN date('now', '-1 month') AND date('now') GROUP BY Instructors.instructor_id ORDER BY avg_rating DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Ratings": [
                "created_at",
                "rating",
                "session_id",
                "class_id",
                "user_id"
            ]
        },
        "response_text": "```sql\nSELECT \n    I.instructor_name\nFROM \n    Instructors I\nJOIN \n    ClassSessions CS ON I.instructor_id = CS.instructor_id\nJOIN \n    Ratings R ON CS.session_id = R.session_id\nWHERE \n    R.created_at >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)\nGROUP BY \n    I.instructor_id, I.instructor_name\nORDER BY \n    AVG(R.rating) DESC\nLIMIT 1;\n```",
        "prompt_token_number": 196,
        "response_token_number": 96,
        "response_text_processed": "SELECT I.instructor_name FROM Instructors I JOIN ClassSessions CS ON I.instructor_id = CS.instructor_id JOIN Ratings R ON CS.session_id = R.session_id WHERE R.created_at >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH) GROUP BY I.instructor_id, I.instructor_name ORDER BY AVG(R.rating) DESC LIMIT 1"
    },
    {
        "id": 34170,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the classes with the highest attendance in the last month, along with the corresponding location and instructor.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes with the highest attendance in the last month, along with the corresponding location and instructor.",
        "output": "SELECT Classes.class_name, Locations.location_name, Instructors.instructor_name, COUNT(*) as num_attendances FROM Classes INNER JOIN Locations ON Classes.location_id = Locations.location_id INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Instructors ON ClassSessions.instructor_id = Instructors.instructor_id WHERE Enrollments.enrollment_date >= date('now', '-1 month') GROUP BY Classes.class_id ORDER BY num_attendances DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Locations": [
                "location_name",
                "location_id",
                "is_available"
            ]
        },
        "response_text": "```sql\nWITH last_month_classes AS (\n    SELECT \n        E.class_id,\n        C.location_id,\n        C.instructor_id,\n        SUM(E.num_attendees) AS total_attendance\n    FROM \n        Enrollments E\n    JOIN \n        Classes C ON E.class_id = C.class_id\n    WHERE \n        E.enrollment_date >= DATEADD(month, -1, GETDATE())\n    GROUP BY \n        E.class_id, C.location_id, C.instructor_id\n)\nSELECT \n    C.class_name,\n    L.location_name,\n    I.instructor_name,\n    LMC.total_attendance\nFROM \n    last_month_classes LMC\nJOIN \n    Classes C ON LMC.class_id = C.class_id\nJOIN \n    Locations L ON LMC.location_id = L.location_id\nJOIN \n    Instructors I ON LMC.instructor_id = I.instructor_id\nORDER BY \n    LMC.total_attendance DESC\nLIMIT 1;\n```",
        "prompt_token_number": 396,
        "response_token_number": 201,
        "response_text_processed": "SELECT E.class_id, C.location_id, C.instructor_id, SUM(E.num_attendees) AS total_attendance FROM Enrollments E JOIN Classes C ON E.class_id = C.class_id WHERE E.enrollment_date >= DATEADD(month, -1, GETDATE()) GROUP BY E.class_id, C.location_id, C.instructor_id ) SELECT C.class_name, L.location_name, I.instructor_name, LMC.total_attendance FROM last_month_classes LMC JOIN Classes C ON LMC.class_id = C.class_id JOIN Locations L ON LMC.location_id = L.location_id JOIN Instructors I ON LMC.instructor_id = I.instructor_id ORDER BY LMC.total_attendance DESC LIMIT 1"
    },
    {
        "id": 34172,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has not been rented out in the last 6 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment that has not been rented out in the last 6 months.",
        "output": "SELECT Equipment.equipment_name FROM Equipment WHERE Equipment.equipment_id NOT IN ( SELECT EquipmentRentals.equipment_id FROM EquipmentRentals WHERE EquipmentRentals.rental_start_time >= date('now', '-6 months') );",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_name\nFROM Equipment e\nLEFT JOIN EquipmentRentals er ON e.equipment_id = er.equipment_id\nAND er.rental_start_date >= DATEADD(MONTH, -6, GETDATE())\nWHERE er.equipment_id IS NULL;\n```",
        "prompt_token_number": 159,
        "response_token_number": 59,
        "response_text_processed": "SELECT e.equipment_name FROM Equipment e LEFT JOIN EquipmentRentals er ON e.equipment_id = er.equipment_id AND er.rental_start_date >= DATEADD(MONTH, -6, GETDATE()) WHERE er.equipment_id IS NULL"
    },
    {
        "id": 34173,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the locations where classes are consistently rated highly.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the locations where classes are consistently rated highly.",
        "output": "SELECT Locations.location_name, AVG(Reviews.rating) as avg_rating FROM Locations INNER JOIN Classes ON Locations.location_id = Classes.location_id INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Reviews ON Enrollments.enrollment_id = Reviews.enrollment_id GROUP BY Locations.location_id HAVING COUNT(DISTINCT Enrollments.user_id) >= 10 AND AVG(Reviews.rating) >= 4.5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Locations": [
                "location_name",
                "location_id",
                "is_available"
            ]
        },
        "response_text": "```sql\nSELECT l.location_name\nFROM Locations l\nJOIN Classes c ON l.location_id = c.location_id\nJOIN Reviews r ON c.class_id = r.class_id\nGROUP BY l.location_name\nHAVING AVG(r.rating) >= 4.5; \n```",
        "prompt_token_number": 395,
        "response_token_number": 56,
        "response_text_processed": "SELECT l.location_name FROM Locations l JOIN Classes c ON l.location_id = c.location_id JOIN Reviews r ON c.class_id = r.class_id GROUP BY l.location_name HAVING AVG(r.rating) >= 4.5"
    },
    {
        "id": 34188,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the locations where classes have the highest enrollment rate in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the locations where classes have the highest enrollment rate in the last month.",
        "output": "SELECT Locations.location_name, (COUNT(DISTINCT Enrollments.enrollment_id) * 100.0 / COUNT(DISTINCT ClassSessions.session_id)) as enrollment_rate FROM Locations INNER JOIN Classes ON Locations.location_id = Classes.location_id INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE ClassSessions.session_date >= date('now', '-1 month') GROUP BY Locations.location_id ORDER BY enrollment_rate DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Locations": [
                "location_name",
                "location_id",
                "is_available"
            ]
        },
        "response_text": "```sql\nSELECT l.location_name, COUNT(e.enrollment_id) AS total_enrollments\nFROM Classes c\nJOIN Enrollments e ON c.class_id = e.class_id\nJOIN Locations l ON c.location_id = l.location_id\nWHERE e.enrollment_date >= DATEADD(month, -1, GETDATE())\nAND e.is_cancelled = 0\nGROUP BY l.location_name\nORDER BY total_enrollments DESC\nLIMIT 1;\n```",
        "prompt_token_number": 352,
        "response_token_number": 94,
        "response_text_processed": "SELECT l.location_name, COUNT(e.enrollment_id) AS total_enrollments FROM Classes c JOIN Enrollments e ON c.class_id = e.class_id JOIN Locations l ON c.location_id = l.location_id WHERE e.enrollment_date >= DATEADD(month, -1, GETDATE()) AND e.is_cancelled = 0 GROUP BY l.location_name ORDER BY total_enrollments DESC LIMIT 1"
    },
    {
        "id": 34189,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out the most in the last year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment that has been rented out the most in the last year.",
        "output": "SELECT Equipment.equipment_name, COUNT(EquipmentRentals.equipment_id) as rental_count FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_start_time >= date('now', '-1 year') GROUP BY Equipment.equipment_id ORDER BY rental_count DESC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_name, COUNT(er.equipment_id) AS rental_count\nFROM EquipmentRentals er\nJOIN Equipment e ON er.equipment_id = e.equipment_id\nWHERE er.rental_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\nGROUP BY e.equipment_id, e.equipment_name\nORDER BY rental_count DESC\nLIMIT 1;\n```",
        "prompt_token_number": 158,
        "response_token_number": 81,
        "response_text_processed": "SELECT e.equipment_name, COUNT(er.equipment_id) AS rental_count FROM EquipmentRentals er JOIN Equipment e ON er.equipment_id = e.equipment_id WHERE er.rental_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.equipment_id, e.equipment_name ORDER BY rental_count DESC LIMIT 1"
    },
    {
        "id": 34192,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have the highest average rating in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have the highest average rating in the last month.",
        "output": "SELECT Classes.class_name, AVG(Reviews.rating) as avg_rating FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Reviews ON Enrollments.enrollment_id = Reviews.enrollment_id WHERE Reviews.review_date >= date('now', '-1 month') GROUP BY Classes.class_id ORDER BY avg_rating DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT \n    c.class_id, \n    c.class_name, \n    AVG(r.rating) AS average_rating\nFROM \n    Classes c\nJOIN \n    Reviews r ON c.class_id = r.class_id\nWHERE \n    r.review_date >= NOW() - INTERVAL 1 MONTH\nGROUP BY \n    c.class_id, c.class_name\nORDER BY \n    average_rating DESC\nLIMIT 1;\n```",
        "prompt_token_number": 384,
        "response_token_number": 86,
        "response_text_processed": "SELECT c.class_id, c.class_name, AVG(r.rating) AS average_rating FROM Classes c JOIN Reviews r ON c.class_id = r.class_id WHERE r.review_date >= NOW() - INTERVAL 1 MONTH GROUP BY c.class_id, c.class_name ORDER BY average_rating DESC LIMIT 1"
    },
    {
        "id": 34196,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have the lowest average rating in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have the lowest average rating in the last month.",
        "output": "SELECT Classes.class_name, AVG(Reviews.rating) as avg_rating FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Reviews ON Enrollments.enrollment_id = Reviews.enrollment_id WHERE Reviews.review_date >= date('now', '-1 month') GROUP BY Classes.class_id HAVING AVG(Reviews.rating) < 3.5 ORDER BY avg_rating ASC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT \n    c.class_name, \n    AVG(r.rating) AS avg_rating\nFROM \n    Classes c\nJOIN \n    Reviews r ON c.class_id = r.class_id\nWHERE \n    r.review_date >= DATEADD(month, -1, GETDATE())\nGROUP BY \n    c.class_name\nORDER BY \n    avg_rating ASC\nLIMIT 1;\n```",
        "prompt_token_number": 384,
        "response_token_number": 78,
        "response_text_processed": "SELECT c.class_name, AVG(r.rating) AS avg_rating FROM Classes c JOIN Reviews r ON c.class_id = r.class_id WHERE r.review_date >= DATEADD(month, -1, GETDATE()) GROUP BY c.class_name ORDER BY avg_rating ASC LIMIT 1"
    },
    {
        "id": 34197,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has the highest total rental fees in the last year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment that has the highest total rental fees in the last year.",
        "output": "SELECT Equipment.equipment_name, SUM(EquipmentRentals.rental_fee) as total_rental_fees FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_start_time >= date('now', '-1 year') GROUP BY Equipment.equipment_id ORDER BY total_rental_fees DESC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_name\nFROM EquipmentRentals er\nJOIN Equipment e ON er.equipment_id = e.equipment_id\nWHERE er.rental_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\nGROUP BY e.equipment_id, e.equipment_name\nORDER BY SUM(er.rental_fee) DESC\nLIMIT 1;\n```",
        "prompt_token_number": 158,
        "response_token_number": 76,
        "response_text_processed": "SELECT e.equipment_name FROM EquipmentRentals er JOIN Equipment e ON er.equipment_id = e.equipment_id WHERE er.rental_start_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY e.equipment_id, e.equipment_name ORDER BY SUM(er.rental_fee) DESC LIMIT 1"
    },
    {
        "id": 34201,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended classes on weekdays only in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended classes on weekdays only in the last month.",
        "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE ClassSessions.session_date >= date('now', '-1 month') AND strftime('%w', ClassSessions.session_date) NOT IN ('0', '6') GROUP BY Users.user_id HAVING COUNT(DISTINCT ClassSessions.session_id) = COUNT(DISTINCT CASE WHEN strftime('%w', ClassSessions.session_date) NOT IN ('0', '6') THEN ClassSessions.session_id END);",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT u.user_id, u.username, u.user_name, u.gender, u.status, u.skill_level, u.age, u.email, u.user_status, u.creation_date\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nJOIN ClassSessions cs ON e.class_id = cs.class_id\nWHERE e.attendance_status = 'attended'\n  AND e.is_cancelled = 0\n  AND cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\n  AND DAYOFWEEK(cs.session_date) BETWEEN 2 AND 6;\n```",
        "prompt_token_number": 263,
        "response_token_number": 125,
        "response_text_processed": "SELECT DISTINCT u.user_id, u.username, u.user_name, u.gender, u.status, u.skill_level, u.age, u.email, u.user_status, u.creation_date FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN ClassSessions cs ON e.class_id = cs.class_id WHERE e.attendance_status = 'attended' AND e.is_cancelled = 0 AND cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND DAYOFWEEK(cs.session_date) BETWEEN 2 AND 6"
    },
    {
        "id": 34203,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the equipment that has been rented out less than 5 times in the last year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the equipment that has been rented out less than 5 times in the last year.",
        "output": "SELECT Equipment.equipment_name, COUNT(EquipmentRentals.equipment_id) as rental_count FROM Equipment LEFT JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id AND EquipmentRentals.rental_start_time >= date('now', '-1 year') GROUP BY Equipment.equipment_id HAVING COUNT(EquipmentRentals.equipment_id) < 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT e.equipment_name\nFROM Equipment e\nJOIN EquipmentRentals er ON e.equipment_id = er.equipment_id\nWHERE er.rental_start_date >= DATEADD(year, -1, GETDATE())\nGROUP BY e.equipment_id, e.equipment_name\nHAVING COUNT(er.rental_id) < 5;\n```",
        "prompt_token_number": 161,
        "response_token_number": 73,
        "response_text_processed": "SELECT e.equipment_name FROM Equipment e JOIN EquipmentRentals er ON e.equipment_id = er.equipment_id WHERE er.rental_start_date >= DATEADD(year, -1, GETDATE()) GROUP BY e.equipment_id, e.equipment_name HAVING COUNT(er.rental_id) < 5"
    },
    {
        "id": 34206,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that are fully booked for next week.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that are fully booked for next week.",
        "output": "SELECT Classes.class_name, COUNT(DISTINCT Enrollments.user_id) as enrolled_users FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE ClassSessions.session_date >= date('now', 'weekday 0', '+7 days') AND ClassSessions.session_date < date('now', 'weekday 0', '+14 days') GROUP BY Classes.class_id HAVING COUNT(DISTINCT Enrollments.user_id) >= Classes.max_capacity;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT \n    c.class_id,\n    c.class_name,\n    c.class_date,\n    c.start_time,\n    c.end_time,\n    c.current_enrollment,\n    c.max_capacity\nFROM \n    Classes c\nWHERE \n    c.class_date BETWEEN CURDATE() + INTERVAL (7 - DAYOFWEEK(CURDATE())) DAY AND CURDATE() + INTERVAL (13 - DAYOFWEEK(CURDATE())) DAY\n    AND c.current_enrollment >= c.max_capacity\n    AND c.is_cancelled = 0;\n```",
        "prompt_token_number": 333,
        "response_token_number": 112,
        "response_text_processed": "SELECT c.class_id, c.class_name, c.class_date, c.start_time, c.end_time, c.current_enrollment, c.max_capacity FROM Classes c WHERE c.class_date BETWEEN CURDATE() + INTERVAL (7 - DAYOFWEEK(CURDATE())) DAY AND CURDATE() + INTERVAL (13 - DAYOFWEEK(CURDATE())) DAY AND c.current_enrollment >= c.max_capacity AND c.is_cancelled = 0"
    },
    {
        "id": 34208,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught the most classes in the last year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught the most classes in the last year.",
        "output": "SELECT Instructors.instructor_name, COUNT(DISTINCT ClassSessions.session_id) as taught_classes FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date >= date('now', '-1 year') GROUP BY Instructors.instructor_id ORDER BY taught_classes DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT i.instructor_id, i.instructor_name, COUNT(cs.class_id) AS class_count\nFROM Instructors i\nJOIN ClassSessions cs ON i.instructor_id = cs.instructor_id\nWHERE cs.session_date >= DATEADD(year, -1, GETDATE())\nGROUP BY i.instructor_id, i.instructor_name\nORDER BY class_count DESC;\n```",
        "prompt_token_number": 170,
        "response_token_number": 77,
        "response_text_processed": "SELECT i.instructor_id, i.instructor_name, COUNT(cs.class_id) AS class_count FROM Instructors i JOIN ClassSessions cs ON i.instructor_id = cs.instructor_id WHERE cs.session_date >= DATEADD(year, -1, GETDATE()) GROUP BY i.instructor_id, i.instructor_name ORDER BY class_count DESC"
    },
    {
        "id": 34209,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'EquipmentRentals': ['rental_id', 'rental_end_date', 'user_id', 'rental_start_date', 'equipment_id', 'created_at', 'rental_cost', 'is_broken', 'session_id', 'rental_start_time', 'rental_end_time', 'enrollment_id', 'rental_fee'], 'Equipment': ['equipment_name', 'equipment_id', 'equipment_type']} and \n# the user question: Find the most popular equipment in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the most popular equipment in the last month.",
        "output": "SELECT Equipment.equipment_name, COUNT(DISTINCT EquipmentRentals.rental_id) as rental_count FROM Equipment INNER JOIN EquipmentRentals ON Equipment.equipment_id = EquipmentRentals.equipment_id WHERE EquipmentRentals.rental_start_time >= date('now', '-1 month') GROUP BY Equipment.equipment_id ORDER BY rental_count DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "EquipmentRentals": [
                "rental_id",
                "rental_end_date",
                "user_id",
                "rental_start_date",
                "equipment_id",
                "created_at",
                "rental_cost",
                "is_broken",
                "session_id",
                "rental_start_time",
                "rental_end_time",
                "enrollment_id",
                "rental_fee"
            ],
            "Equipment": [
                "equipment_name",
                "equipment_id",
                "equipment_type"
            ]
        },
        "response_text": "```sql\nSELECT E.equipment_name, COUNT(ER.equipment_id) AS rental_count\nFROM EquipmentRentals ER\nJOIN Equipment E ON ER.equipment_id = E.equipment_id\nWHERE ER.rental_start_date >= DATEADD(month, -1, GETDATE())\nGROUP BY E.equipment_name\nORDER BY rental_count DESC\nLIMIT 1;\n```",
        "prompt_token_number": 153,
        "response_token_number": 76,
        "response_text_processed": "SELECT E.equipment_name, COUNT(ER.equipment_id) AS rental_count FROM EquipmentRentals ER JOIN Equipment E ON ER.equipment_id = E.equipment_id WHERE ER.rental_start_date >= DATEADD(month, -1, GETDATE()) GROUP BY E.equipment_name ORDER BY rental_count DESC LIMIT 1"
    },
    {
        "id": 34211,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have the highest ratio of enrolled users to maximum capacity.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have the highest ratio of enrolled users to maximum capacity.",
        "output": "SELECT Classes.class_name, COUNT(DISTINCT Enrollments.user_id) as enrolled_users, Classes.max_capacity, CAST(COUNT(DISTINCT Enrollments.user_id) as float) / CAST(Classes.max_capacity as float) as ratio FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE ClassSessions.session_date >= date('now', '-1 month') GROUP BY Classes.class_id ORDER BY ratio DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT \n    c.class_id, \n    c.class_name, \n    (COUNT(e.user_id) / c.max_capacity) AS enrolled_to_capacity_ratio\nFROM \n    Classes c\nJOIN \n    Enrollments e ON c.class_id = e.class_id\nWHERE \n    e.is_cancelled = 0\nGROUP BY \n    c.class_id, c.class_name, c.max_capacity\nORDER BY \n    enrolled_to_capacity_ratio DESC\nLIMIT 1;\n```",
        "prompt_token_number": 337,
        "response_token_number": 99,
        "response_text_processed": "SELECT c.class_id, c.class_name, (COUNT(e.user_id) / c.max_capacity) AS enrolled_to_capacity_ratio FROM Classes c JOIN Enrollments e ON c.class_id = e.class_id WHERE e.is_cancelled = 0 GROUP BY c.class_id, c.class_name, c.max_capacity ORDER BY enrolled_to_capacity_ratio DESC LIMIT 1"
    },
    {
        "id": 34215,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the most popular classes among male users.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the most popular classes among male users.",
        "output": "SELECT Classes.class_name, COUNT(DISTINCT Enrollments.user_id) as enrolled_users FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Users ON Enrollments.user_id = Users.user_id WHERE Users.gender = 'Male' GROUP BY Classes.class_id ORDER BY enrolled_users DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT C.class_name, COUNT(E.user_id) AS enrollment_count\nFROM Classes C\nINNER JOIN Enrollments E ON C.class_id = E.class_id\nINNER JOIN Users U ON E.user_id = U.user_id\nWHERE U.gender = 'male'\nGROUP BY C.class_name\nORDER BY enrollment_count DESC;\n```",
        "prompt_token_number": 369,
        "response_token_number": 69,
        "response_text_processed": "SELECT C.class_name, COUNT(E.user_id) AS enrollment_count FROM Classes C INNER JOIN Enrollments E ON C.class_id = E.class_id INNER JOIN Users U ON E.user_id = U.user_id WHERE U.gender = 'male' GROUP BY C.class_name ORDER BY enrollment_count DESC"
    },
    {
        "id": 34221,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have not attended a class in the last 2 weeks.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have not attended a class in the last 2 weeks.",
        "output": "SELECT Users.username FROM Users WHERE Users.user_id NOT IN ( SELECT DISTINCT Enrollments.user_id FROM Enrollments INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE ClassSessions.session_date BETWEEN date('now', '-2 weeks') AND date('now') );",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT \n    u.user_id, \n    u.username, \n    u.user_name, \n    u.email \nFROM \n    Users u\nLEFT JOIN \n    Enrollments e ON u.user_id = e.user_id \nLEFT JOIN \n    ClassSessions cs ON e.session_id = cs.session_id \nWHERE \n    (cs.session_date < CURRENT_DATE - INTERVAL '2 weeks' OR cs.session_date IS NULL)\n    AND u.user_id NOT IN (\n        SELECT \n            e.user_id \n        FROM \n            Enrollments e\n        JOIN \n            ClassSessions cs ON e.session_id = cs.session_id \n        WHERE \n            cs.session_date >= CURRENT_DATE - INTERVAL '2 weeks'\n    )\nGROUP BY \n    u.user_id;\n```",
        "prompt_token_number": 264,
        "response_token_number": 156,
        "response_text_processed": "SELECT u.user_id, u.username, u.user_name, u.email FROM Users u LEFT JOIN Enrollments e ON u.user_id = e.user_id LEFT JOIN ClassSessions cs ON e.session_id = cs.session_id WHERE (cs.session_date < CURRENT_DATE - INTERVAL '2 weeks' OR cs.session_date IS NULL) AND u.user_id NOT IN ( SELECT e.user_id FROM Enrollments e JOIN ClassSessions cs ON e.session_id = cs.session_id WHERE cs.session_date >= CURRENT_DATE - INTERVAL '2 weeks' ) GROUP BY u.user_id"
    },
    {
        "id": 34222,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended more than one class in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended more than one class in the last month.",
        "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id HAVING COUNT(DISTINCT ClassSessions.session_id) > 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, u.user_name\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nJOIN ClassSessions cs ON e.session_id = cs.session_id\nWHERE e.attendance_status = 'attended' \n  AND cs.session_date >= DATEADD(month, -1, GETDATE())\nGROUP BY u.user_id, u.username, u.user_name\nHAVING COUNT(DISTINCT cs.class_id) > 1;\n```",
        "prompt_token_number": 263,
        "response_token_number": 100,
        "response_text_processed": "SELECT u.user_id, u.username, u.user_name FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN ClassSessions cs ON e.session_id = cs.session_id WHERE e.attendance_status = 'attended' AND cs.session_date >= DATEADD(month, -1, GETDATE()) GROUP BY u.user_id, u.username, u.user_name HAVING COUNT(DISTINCT cs.class_id) > 1"
    },
    {
        "id": 34223,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Categories': ['category_id', 'category_name']} and \n# the user question: Find the users who have attended at least one class in each category.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended at least one class in each category.",
        "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id INNER JOIN Categories ON Classes.category_id = Categories.category_id GROUP BY Users.user_id HAVING COUNT(DISTINCT Categories.category_id) = ( SELECT COUNT(DISTINCT Categories.category_id) FROM Categories );",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Categories": [
                "category_id",
                "category_name"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, u.user_name\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nJOIN Classes c ON e.class_id = c.class_id\nJOIN Categories cat ON c.category_id = cat.category_id\nWHERE e.attendance_status = 'attended'\nGROUP BY u.user_id, u.username, u.user_name\nHAVING COUNT(DISTINCT cat.category_id) = (SELECT COUNT(*) FROM Categories);\n```",
        "prompt_token_number": 385,
        "response_token_number": 98,
        "response_text_processed": "SELECT u.user_id, u.username, u.user_name FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN Classes c ON e.class_id = c.class_id JOIN Categories cat ON c.category_id = cat.category_id WHERE e.attendance_status = 'attended' GROUP BY u.user_id, u.username, u.user_name HAVING COUNT(DISTINCT cat.category_id) = (SELECT COUNT(*) FROM Categories)"
    },
    {
        "id": 34224,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught the most classes overall.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught the most classes overall.",
        "output": "SELECT Instructors.instructor_name, COUNT(DISTINCT ClassSessions.session_id) as num_classes_taught FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id GROUP BY Instructors.instructor_id ORDER BY num_classes_taught DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT i.instructor_name, COUNT(cs.session_id) AS total_classes\nFROM Instructors i\nJOIN ClassSessions cs ON i.instructor_id = cs.instructor_id\nGROUP BY i.instructor_name\nORDER BY total_classes DESC\nLIMIT 1;\n```",
        "prompt_token_number": 167,
        "response_token_number": 56,
        "response_text_processed": "SELECT i.instructor_name, COUNT(cs.session_id) AS total_classes FROM Instructors i JOIN ClassSessions cs ON i.instructor_id = cs.instructor_id GROUP BY i.instructor_name ORDER BY total_classes DESC LIMIT 1"
    },
    {
        "id": 34226,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have not reached their minimum capacity for the upcoming week.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have not reached their minimum capacity for the upcoming week.",
        "output": "SELECT Classes.class_name, Classes.min_capacity, COUNT(DISTINCT Enrollments.user_id) as enrolled_users FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE ClassSessions.session_date BETWEEN date('now') AND date('now', '+6 days') GROUP BY Classes.class_id HAVING enrolled_users < Classes.min_capacity;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT *\nFROM Classes\nWHERE current_enrollment < min_capacity\n  AND class_date >= CURDATE()\n  AND class_date < CURDATE() + INTERVAL 7 DAY;\n```",
        "prompt_token_number": 337,
        "response_token_number": 39,
        "response_text_processed": "SELECT * FROM Classes WHERE current_enrollment < min_capacity AND class_date >= CURDATE() AND class_date < CURDATE() + INTERVAL 7 DAY"
    },
    {
        "id": 34227,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Categories': ['category_id', 'category_name']} and \n# the user question: Find the total revenue generated from each category in the last quarter.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total revenue generated from each category in the last quarter.",
        "output": "SELECT Categories.category_name, SUM(Enrollments.payment_amount) as total_revenue FROM Categories INNER JOIN Classes ON Categories.category_id = Classes.category_id INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE ClassSessions.session_date BETWEEN date('now', '-3 months') AND date('now') GROUP BY Categories.category_id;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Categories": [
                "category_id",
                "category_name"
            ]
        },
        "response_text": "```sql\nSELECT \n    cat.category_name, \n    SUM(e.payment_amount) AS total_revenue \nFROM \n    Enrollments e\nJOIN \n    Classes c ON e.class_id = c.class_id\nJOIN \n    Categories cat ON c.category_id = cat.category_id\nWHERE \n    e.enrollment_date >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter'\n    AND e.enrollment_date < DATE_TRUNC('quarter', CURRENT_DATE)\nGROUP BY \n    cat.category_name;\n```",
        "prompt_token_number": 346,
        "response_token_number": 104,
        "response_text_processed": "SELECT cat.category_name, SUM(e.payment_amount) AS total_revenue FROM Enrollments e JOIN Classes c ON e.class_id = c.class_id JOIN Categories cat ON c.category_id = cat.category_id WHERE e.enrollment_date >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter' AND e.enrollment_date < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY cat.category_name"
    },
    {
        "id": 34231,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Categories': ['category_id', 'category_name']} and \n# the user question: Find the users who have attended classes in every category.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended classes in every category.",
        "output": "SELECT Users.username FROM Users WHERE Users.user_id IN ( SELECT DISTINCT Enrollments.user_id FROM Enrollments INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id INNER JOIN Categories ON Classes.category_id = Categories.category_id GROUP BY Enrollments.user_id HAVING COUNT(DISTINCT Categories.category_id) = ( SELECT COUNT(DISTINCT Categories.category_id) FROM Categories ) );",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Categories": [
                "category_id",
                "category_name"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.user_name\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nJOIN Classes c ON e.class_id = c.class_id\nJOIN Categories cat ON c.category_id = cat.category_id\nGROUP BY u.user_id, u.user_name\nHAVING COUNT(DISTINCT c.category_id) = (SELECT COUNT(*) FROM Categories);\n```",
        "prompt_token_number": 382,
        "response_token_number": 83,
        "response_text_processed": "SELECT u.user_id, u.user_name FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN Classes c ON e.class_id = c.class_id JOIN Categories cat ON c.category_id = cat.category_id GROUP BY u.user_id, u.user_name HAVING COUNT(DISTINCT c.category_id) = (SELECT COUNT(*) FROM Categories)"
    },
    {
        "id": 34233,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the classes that are scheduled at least once every day in the next week.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that are scheduled at least once every day in the next week.",
        "output": "SELECT Classes.class_name FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id WHERE ClassSessions.session_date BETWEEN date('now', '+1 day') AND date('now', '+1 week') GROUP BY Classes.class_id HAVING COUNT(DISTINCT strftime('%Y-%m-%d', ClassSessions.session_date)) >= 7;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT c.class_id, c.class_name\nFROM Classes c\nJOIN ClassSessions cs ON c.class_id = cs.class_id\nWHERE cs.session_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '6 days'\nGROUP BY c.class_id, c.class_name\nHAVING COUNT(DISTINCT cs.session_date) = 7;\n```",
        "prompt_token_number": 245,
        "response_token_number": 70,
        "response_text_processed": "SELECT c.class_id, c.class_name FROM Classes c JOIN ClassSessions cs ON c.class_id = cs.class_id WHERE cs.session_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '6 days' GROUP BY c.class_id, c.class_name HAVING COUNT(DISTINCT cs.session_date) = 7"
    },
    {
        "id": 34235,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught the most number of classes in the last quarter.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught the most number of classes in the last quarter.",
        "output": "SELECT Instructors.instructor_name, COUNT(DISTINCT ClassSessions.session_id) as num_classes_taught FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-3 months') AND date('now') GROUP BY Instructors.instructor_id ORDER BY num_classes_taught DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT i.instructor_name, COUNT(cs.class_id) AS classes_taught\nFROM Instructors i\nJOIN ClassSessions cs ON i.instructor_id = cs.instructor_id\nWHERE cs.session_date >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter'\n  AND cs.session_date < DATE_TRUNC('quarter', CURRENT_DATE)\nGROUP BY i.instructor_name\nORDER BY classes_taught DESC\nLIMIT 1;\n```",
        "prompt_token_number": 172,
        "response_token_number": 91,
        "response_text_processed": "SELECT i.instructor_name, COUNT(cs.class_id) AS classes_taught FROM Instructors i JOIN ClassSessions cs ON i.instructor_id = cs.instructor_id WHERE cs.session_date >= DATE_TRUNC('quarter', CURRENT_DATE) - INTERVAL '1 quarter' AND cs.session_date < DATE_TRUNC('quarter', CURRENT_DATE) GROUP BY i.instructor_name ORDER BY classes_taught DESC LIMIT 1"
    },
    {
        "id": 34238,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended the most number of classes in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended the most number of classes in the last month.",
        "output": "SELECT Users.username, COUNT(DISTINCT Enrollments.session_id) as num_classes_attended FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id ORDER BY num_classes_attended DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT \n    U.user_id,\n    U.username,\n    COUNT(E.class_id) AS classes_attended\nFROM \n    Users U\nJOIN \n    Enrollments E ON U.user_id = E.user_id\nWHERE \n    E.date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND\n    E.date < DATE_TRUNC('month', CURRENT_DATE)\nGROUP BY \n    U.user_id, \n    U.username\nORDER BY \n    classes_attended DESC\nLIMIT 1;\n```",
        "prompt_token_number": 264,
        "response_token_number": 108,
        "response_text_processed": "SELECT U.user_id, U.username, COUNT(E.class_id) AS classes_attended FROM Users U JOIN Enrollments E ON U.user_id = E.user_id WHERE E.date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND E.date < DATE_TRUNC('month', CURRENT_DATE) GROUP BY U.user_id, U.username ORDER BY classes_attended DESC LIMIT 1"
    },
    {
        "id": 34246,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended at least 5 classes in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended at least 5 classes in the last month.",
        "output": "SELECT Users.username, COUNT(DISTINCT Enrollments.session_id) as num_classes_attended FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id HAVING num_classes_attended >= 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, u.user_name, COUNT(e.class_id) AS classes_attended\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nJOIN ClassSessions cs ON e.class_id = cs.class_id\nWHERE e.attendance_status = 'attended'\n  AND cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY u.user_id, u.username, u.user_name\nHAVING classes_attended >= 5;\n```",
        "prompt_token_number": 264,
        "response_token_number": 105,
        "response_text_processed": "SELECT u.user_id, u.username, u.user_name, COUNT(e.class_id) AS classes_attended FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN ClassSessions cs ON e.class_id = cs.class_id WHERE e.attendance_status = 'attended' AND cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY u.user_id, u.username, u.user_name HAVING classes_attended >= 5"
    },
    {
        "id": 34252,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Ratings': ['created_at', 'rating', 'session_id', 'class_id', 'user_id']} and \n# the user question: Find the classes with the highest average rating.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes with the highest average rating.",
        "output": "SELECT Classes.class_name, AVG(Ratings.rating) as avg_rating FROM Classes LEFT JOIN Ratings ON Classes.class_id = Ratings.class_id GROUP BY Classes.class_id ORDER BY avg_rating DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Ratings": [
                "created_at",
                "rating",
                "session_id",
                "class_id",
                "user_id"
            ]
        },
        "response_text": "```sql\nSELECT c.class_name, AVG(r.rating) as average_rating\nFROM Classes c\nJOIN Ratings r ON c.class_id = r.class_id\nGROUP BY c.class_id, c.class_name\nORDER BY average_rating DESC;\n```",
        "prompt_token_number": 202,
        "response_token_number": 49,
        "response_text_processed": "SELECT c.class_name, AVG(r.rating) as average_rating FROM Classes c JOIN Ratings r ON c.class_id = r.class_id GROUP BY c.class_id, c.class_name ORDER BY average_rating DESC"
    },
    {
        "id": 34254,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Categories': ['category_id', 'category_name']} and \n# the user question: Find the instructors who have taught classes in at least 3 different categories.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught classes in at least 3 different categories.",
        "output": "SELECT Instructors.instructor_name FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id INNER JOIN Categories ON Classes.category_id = Categories.category_id GROUP BY Instructors.instructor_id HAVING COUNT(DISTINCT Categories.category_id) >= 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Categories": [
                "category_id",
                "category_name"
            ]
        },
        "response_text": "```sql\nSELECT i.instructor_name\nFROM Instructors i\nJOIN Classes c ON i.instructor_id = c.instructor_id\nGROUP BY i.instructor_name\nHAVING COUNT(DISTINCT c.category_id) >= 3;\n```",
        "prompt_token_number": 294,
        "response_token_number": 50,
        "response_text_processed": "SELECT i.instructor_name FROM Instructors i JOIN Classes c ON i.instructor_id = c.instructor_id GROUP BY i.instructor_name HAVING COUNT(DISTINCT c.category_id) >= 3"
    },
    {
        "id": 34256,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Ratings': ['created_at', 'rating', 'session_id', 'class_id', 'user_id'], 'Categories': ['category_id', 'category_name']} and \n# the user question: Find the categories with the highest average class ratings.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the categories with the highest average class ratings.",
        "output": "SELECT Categories.category_name, AVG(Ratings.rating) as avg_rating FROM Categories INNER JOIN Classes ON Categories.category_id = Classes.category_id INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Ratings ON ClassSessions.session_id = Ratings.session_id GROUP BY Categories.category_id ORDER BY avg_rating DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Ratings": [
                "created_at",
                "rating",
                "session_id",
                "class_id",
                "user_id"
            ],
            "Categories": [
                "category_id",
                "category_name"
            ]
        },
        "response_text": "```sql\nSELECT c.category_name, AVG(r.rating) as average_rating\nFROM Ratings r\nJOIN Classes cl ON r.class_id = cl.class_id\nJOIN Categories c ON cl.category_id = c.category_id\nGROUP BY c.category_name\nORDER BY average_rating DESC\nLIMIT 1;\n```",
        "prompt_token_number": 273,
        "response_token_number": 61,
        "response_text_processed": "SELECT c.category_name, AVG(r.rating) as average_rating FROM Ratings r JOIN Classes cl ON r.class_id = cl.class_id JOIN Categories c ON cl.category_id = c.category_id GROUP BY c.category_name ORDER BY average_rating DESC LIMIT 1"
    },
    {
        "id": 34259,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Ratings': ['created_at', 'rating', 'session_id', 'class_id', 'user_id']} and \n# the user question: Find the classes that have the highest average rating, with at least 10 ratings.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have the highest average rating, with at least 10 ratings.",
        "output": "SELECT Classes.class_name, AVG(Ratings.rating) as avg_rating FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Ratings ON ClassSessions.session_id = Ratings.session_id GROUP BY Classes.class_id HAVING COUNT(Ratings.rating) >= 10 ORDER BY avg_rating DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Ratings": [
                "created_at",
                "rating",
                "session_id",
                "class_id",
                "user_id"
            ]
        },
        "response_text": "```sql\nSELECT \n    c.class_name, \n    AVG(r.rating) AS avg_rating\nFROM \n    Classes c\nJOIN \n    Ratings r ON c.class_id = r.class_id\nGROUP BY \n    c.class_name\nHAVING \n    COUNT(r.rating) >= 10\nORDER BY \n    avg_rating DESC\nLIMIT 1;\n```",
        "prompt_token_number": 269,
        "response_token_number": 73,
        "response_text_processed": "SELECT c.class_name, AVG(r.rating) AS avg_rating FROM Classes c JOIN Ratings r ON c.class_id = r.class_id GROUP BY c.class_name HAVING COUNT(r.rating) >= 10 ORDER BY avg_rating DESC LIMIT 1"
    },
    {
        "id": 34263,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the instructors who have taught classes with the most bookings in the last week.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught classes with the most bookings in the last week.",
        "output": "SELECT Instructors.instructor_name, COUNT(DISTINCT Enrollments.user_id) AS num_bookings FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id LEFT JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-7 days') AND date('now') GROUP BY Instructors.instructor_id ORDER BY num_bookings DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nWITH LastWeekSessions AS (\n    SELECT session_id, instructor_id\n    FROM ClassSessions\n    WHERE session_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)\n),\nSessionEnrollments AS (\n    SELECT session_id, COUNT(*) as total_bookings\n    FROM Enrollments\n    WHERE is_cancelled = 0 AND session_id IN (SELECT session_id FROM LastWeekSessions)\n    GROUP BY session_id\n),\nInstructorBookings AS (\n    SELECT LWS.instructor_id, SUM(SE.total_bookings) as instructor_bookings\n    FROM LastWeekSessions LWS\n    JOIN SessionEnrollments SE ON LWS.session_id = SE.session_id\n    GROUP BY LWS.instructor_id\n)\nSELECT I.instructor_name\nFROM Instructors I\nJOIN InstructorBookings IB ON I.instructor_id = IB.instructor_id\nORDER BY IB.instructor_bookings DESC\nLIMIT 1;\n```",
        "prompt_token_number": 265,
        "response_token_number": 192,
        "response_text_processed": "SELECT session_id, instructor_id FROM ClassSessions WHERE session_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) ), SessionEnrollments AS ( SELECT session_id, COUNT(*) as total_bookings FROM Enrollments WHERE is_cancelled = 0 AND session_id IN (SELECT session_id FROM LastWeekSessions) GROUP BY session_id ), InstructorBookings AS ( SELECT LWS.instructor_id, SUM(SE.total_bookings) as instructor_bookings FROM LastWeekSessions LWS JOIN SessionEnrollments SE ON LWS.session_id = SE.session_id GROUP BY LWS.instructor_id ) SELECT I.instructor_name FROM Instructors I JOIN InstructorBookings IB ON I.instructor_id = IB.instructor_id ORDER BY IB.instructor_bookings DESC LIMIT 1"
    },
    {
        "id": 34264,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Ratings': ['created_at', 'rating', 'session_id', 'class_id', 'user_id']} and \n# the user question: Find the classes that have the most ratings in the last 30 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have the most ratings in the last 30 days.",
        "output": "SELECT Classes.class_name, COUNT(Ratings.rating) AS num_ratings FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Ratings ON ClassSessions.session_id = Ratings.session_id WHERE Ratings.created_at BETWEEN date('now', '-30 days') AND date('now') GROUP BY Classes.class_id ORDER BY num_ratings DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Ratings": [
                "created_at",
                "rating",
                "session_id",
                "class_id",
                "user_id"
            ]
        },
        "response_text": "```sql\nSELECT \n    c.class_name, \n    COUNT(r.rating) AS rating_count\nFROM \n    Classes c\nJOIN \n    Ratings r ON c.class_id = r.class_id\nWHERE \n    r.created_at >= NOW() - INTERVAL 30 DAY\nGROUP BY \n    c.class_name\nORDER BY \n    rating_count DESC\nLIMIT 1;\n```",
        "prompt_token_number": 267,
        "response_token_number": 76,
        "response_text_processed": "SELECT c.class_name, COUNT(r.rating) AS rating_count FROM Classes c JOIN Ratings r ON c.class_id = r.class_id WHERE r.created_at >= NOW() - INTERVAL 30 DAY GROUP BY c.class_name ORDER BY rating_count DESC LIMIT 1"
    },
    {
        "id": 34265,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Ratings': ['created_at', 'rating', 'session_id', 'class_id', 'user_id']} and \n# the user question: Find the users who have attended at least one class in the last month, but have not rated any classes.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended at least one class in the last month, but have not rated any classes.",
        "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') AND NOT EXISTS ( SELECT 1 FROM Ratings WHERE Ratings.session_id = ClassSessions.session_id AND Ratings.user_id = Users.user_id ) GROUP BY Users.user_id;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Ratings": [
                "created_at",
                "rating",
                "session_id",
                "class_id",
                "user_id"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, u.user_name\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nLEFT JOIN Ratings r ON u.user_id = r.user_id AND e.session_id = r.session_id\nWHERE e.enrollment_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month'\n  AND r.rating IS NULL;\n```",
        "prompt_token_number": 293,
        "response_token_number": 82,
        "response_text_processed": "SELECT u.user_id, u.username, u.user_name FROM Users u JOIN Enrollments e ON u.user_id = e.user_id LEFT JOIN Ratings r ON u.user_id = r.user_id AND e.session_id = r.session_id WHERE e.enrollment_date >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '1 month' AND r.rating IS NULL"
    },
    {
        "id": 34267,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Categories': ['category_id', 'category_name']} and \n# the user question: Find the categories that have the most classes in the schedule for next week.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the categories that have the most classes in the schedule for next week.",
        "output": "SELECT Categories.category_name, COUNT(DISTINCT ClassSessions.class_id) AS num_classes FROM Categories INNER JOIN Classes ON Categories.category_id = Classes.category_id INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id WHERE ClassSessions.session_date BETWEEN date('now', '+1 day') AND date('now', '+7 days') GROUP BY Categories.category_id ORDER BY num_classes DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Categories": [
                "category_id",
                "category_name"
            ]
        },
        "response_text": "```sql\nSELECT c.category_name, COUNT(*) as class_count\nFROM Classes AS cl\nJOIN Categories AS c ON cl.category_id = c.category_id\nWHERE cl.class_date BETWEEN DATE(NOW()) + INTERVAL 1 WEEK AND DATE(NOW()) + INTERVAL 2 WEEK\nGROUP BY c.category_name\nORDER BY class_count DESC\nLIMIT 1;\n```",
        "prompt_token_number": 255,
        "response_token_number": 74,
        "response_text_processed": "SELECT c.category_name, COUNT(*) as class_count FROM Classes AS cl JOIN Categories AS c ON cl.category_id = c.category_id WHERE cl.class_date BETWEEN DATE(NOW()) + INTERVAL 1 WEEK AND DATE(NOW()) + INTERVAL 2 WEEK GROUP BY c.category_name ORDER BY class_count DESC LIMIT 1"
    },
    {
        "id": 34271,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Categories': ['category_id', 'category_name']} and \n# the user question: Find the instructors who have taught classes in all categories in the last 3 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught classes in all categories in the last 3 months.",
        "output": "SELECT Instructors.instructor_name FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id INNER JOIN Categories ON Classes.category_id = Categories.category_id WHERE ClassSessions.session_date BETWEEN date('now', '-3 month') AND date('now') GROUP BY Instructors.instructor_id HAVING COUNT(DISTINCT Categories.category_id) = ( SELECT COUNT(DISTINCT Categories.category_id) FROM Categories );",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Categories": [
                "category_id",
                "category_name"
            ]
        },
        "response_text": "```sql\nSELECT i.instructor_name\nFROM Instructors i\nJOIN Classes c ON i.instructor_id = c.instructor_id\nJOIN Categories ca ON c.category_id = ca.category_id\nWHERE c.class_date >= DATEADD(MONTH, -3, GETDATE())\nGROUP BY i.instructor_id, i.instructor_name\nHAVING COUNT(DISTINCT c.category_id) = (SELECT COUNT(*) FROM Categories);\n```",
        "prompt_token_number": 296,
        "response_token_number": 88,
        "response_text_processed": "SELECT i.instructor_name FROM Instructors i JOIN Classes c ON i.instructor_id = c.instructor_id JOIN Categories ca ON c.category_id = ca.category_id WHERE c.class_date >= DATEADD(MONTH, -3, GETDATE()) GROUP BY i.instructor_id, i.instructor_name HAVING COUNT(DISTINCT c.category_id) = (SELECT COUNT(*) FROM Categories)"
    },
    {
        "id": 34274,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended the most classes in the last 3 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended the most classes in the last 3 months.",
        "output": "SELECT Users.username, COUNT(DISTINCT ClassSessions.session_id) AS num_classes FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-3 month') AND date('now') GROUP BY Users.user_id ORDER BY num_classes DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT U.user_id, U.username, COUNT(E.class_id) AS attended_classes\nFROM Enrollments E\nJOIN Users U ON E.user_id = U.user_id\nWHERE E.attendance_status = 'attended'\n  AND E.enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\nGROUP BY U.user_id, U.username\nORDER BY attended_classes DESC\nLIMIT 1;\n```",
        "prompt_token_number": 264,
        "response_token_number": 85,
        "response_text_processed": "SELECT U.user_id, U.username, COUNT(E.class_id) AS attended_classes FROM Enrollments E JOIN Users U ON E.user_id = U.user_id WHERE E.attendance_status = 'attended' AND E.enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY U.user_id, U.username ORDER BY attended_classes DESC LIMIT 1"
    },
    {
        "id": 34276,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Categories': ['category_id', 'category_name']} and \n# the user question: Find the instructors who have taught classes in the most categories in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught classes in the most categories in the last month.",
        "output": "SELECT Instructors.instructor_name, COUNT(DISTINCT Categories.category_id) AS num_categories FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id INNER JOIN Categories ON Classes.category_id = Categories.category_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Instructors.instructor_id ORDER BY num_categories DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Categories": [
                "category_id",
                "category_name"
            ]
        },
        "response_text": "```sql\nSELECT \n    i.instructor_name,\n    COUNT(DISTINCT c.category_id) AS category_count\nFROM \n    Instructors i\nJOIN \n    Classes c ON i.instructor_id = c.instructor_id\nWHERE \n    c.class_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) \n    AND c.is_cancelled = 0\nGROUP BY \n    i.instructor_name\nORDER BY \n    category_count DESC\nLIMIT 1;\n```",
        "prompt_token_number": 295,
        "response_token_number": 98,
        "response_text_processed": "SELECT i.instructor_name, COUNT(DISTINCT c.category_id) AS category_count FROM Instructors i JOIN Classes c ON i.instructor_id = c.instructor_id WHERE c.class_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND c.is_cancelled = 0 GROUP BY i.instructor_name ORDER BY category_count DESC LIMIT 1"
    },
    {
        "id": 34282,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes with the highest revenue in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes with the highest revenue in the last month.",
        "output": "SELECT Classes.class_name, COUNT(DISTINCT Enrollments.user_id) * Classes.price AS revenue FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Classes.class_id ORDER BY revenue DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT c.class_name, SUM(e.payment_amount) as total_revenue\nFROM Classes c\nJOIN Enrollments e ON c.class_id = e.class_id\nWHERE e.enrollment_date >= DATEADD(MONTH, -1, GETDATE()) AND e.is_cancelled = 0\nGROUP BY c.class_name\nORDER BY total_revenue DESC\nLIMIT 1;\n```",
        "prompt_token_number": 334,
        "response_token_number": 81,
        "response_text_processed": "SELECT c.class_name, SUM(e.payment_amount) as total_revenue FROM Classes c JOIN Enrollments e ON c.class_id = e.class_id WHERE e.enrollment_date >= DATEADD(MONTH, -1, GETDATE()) AND e.is_cancelled = 0 GROUP BY c.class_name ORDER BY total_revenue DESC LIMIT 1"
    },
    {
        "id": 34284,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Categories': ['category_id', 'category_name']} and \n# the user question: Find the users who have attended classes in all the categories in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended classes in all the categories in the last month.",
        "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id HAVING COUNT(DISTINCT Classes.category_id) = ( SELECT COUNT(DISTINCT Categories.category_id) FROM Categories );",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Categories": [
                "category_id",
                "category_name"
            ]
        },
        "response_text": "```sql\nWITH CategoryCount AS (\n    SELECT COUNT(*) AS total_categories\n    FROM Categories\n),\nUserCategoryAttendance AS (\n    SELECT e.user_id, COUNT(DISTINCT c.category_id) AS attended_categories\n    FROM Enrollments e\n    JOIN Classes c ON e.class_id = c.class_id\n    WHERE e.attendance_status = 'attended'\n    AND e.enrollment_date >= DATEADD(MONTH, -1, GETDATE())\n    GROUP BY e.user_id\n)\nSELECT u.user_id, u.username, u.user_name\nFROM Users u\nJOIN UserCategoryAttendance uca ON u.user_id = uca.user_id\nJOIN CategoryCount cc ON uca.attended_categories = cc.total_categories;\n```",
        "prompt_token_number": 387,
        "response_token_number": 149,
        "response_text_processed": "SELECT COUNT(*) AS total_categories FROM Categories ), UserCategoryAttendance AS ( SELECT e.user_id, COUNT(DISTINCT c.category_id) AS attended_categories FROM Enrollments e JOIN Classes c ON e.class_id = c.class_id WHERE e.attendance_status = 'attended' AND e.enrollment_date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY e.user_id ) SELECT u.user_id, u.username, u.user_name FROM Users u JOIN UserCategoryAttendance uca ON u.user_id = uca.user_id JOIN CategoryCount cc ON uca.attended_categories = cc.total_categories"
    },
    {
        "id": 34286,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the most popular classes based on the number of attendees in the last 30 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the most popular classes based on the number of attendees in the last 30 days.",
        "output": "SELECT Classes.class_name, COUNT(DISTINCT Enrollments.user_id) AS num_attendees FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-30 days') AND date('now') GROUP BY Classes.class_id ORDER BY num_attendees DESC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT c.class_name, COUNT(e.user_id) AS num_attendees\nFROM Classes c\nJOIN Enrollments e ON c.class_id = e.class_id\nWHERE e.enrollment_date >= NOW() - INTERVAL 30 DAY\nGROUP BY c.class_name\nORDER BY num_attendees DESC;\n```",
        "prompt_token_number": 340,
        "response_token_number": 66,
        "response_text_processed": "SELECT c.class_name, COUNT(e.user_id) AS num_attendees FROM Classes c JOIN Enrollments e ON c.class_id = e.class_id WHERE e.enrollment_date >= NOW() - INTERVAL 30 DAY GROUP BY c.class_name ORDER BY num_attendees DESC"
    },
    {
        "id": 34291,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have the most classes scheduled for the next month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have the most classes scheduled for the next month.",
        "output": "SELECT Instructors.instructor_name, COUNT(DISTINCT ClassSessions.session_id) AS num_sessions FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '+1 day') AND date('now', '+1 month') GROUP BY Instructors.instructor_id ORDER BY num_sessions DESC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT i.instructor_name, COUNT(cs.session_id) AS class_count\nFROM Instructors i\nJOIN ClassSessions cs ON i.instructor_id = cs.instructor_id\nWHERE cs.session_date >= DATE_TRUNC('month', CURRENT_DATE + INTERVAL '1 month')\n  AND cs.session_date < DATE_TRUNC('month', CURRENT_DATE + INTERVAL '2 month')\nGROUP BY i.instructor_name\nORDER BY class_count DESC\nLIMIT 1;\n```",
        "prompt_token_number": 170,
        "response_token_number": 93,
        "response_text_processed": "SELECT i.instructor_name, COUNT(cs.session_id) AS class_count FROM Instructors i JOIN ClassSessions cs ON i.instructor_id = cs.instructor_id WHERE cs.session_date >= DATE_TRUNC('month', CURRENT_DATE + INTERVAL '1 month') AND cs.session_date < DATE_TRUNC('month', CURRENT_DATE + INTERVAL '2 month') GROUP BY i.instructor_name ORDER BY class_count DESC LIMIT 1"
    },
    {
        "id": 34292,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the users who have attended classes in all the locations in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended classes in all the locations in the last month.",
        "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN Locations ON ClassSessions.location_id = Locations.location_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id HAVING COUNT(DISTINCT Locations.location_id) = ( SELECT COUNT(DISTINCT Locations.location_id) FROM Locations );",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Locations": [
                "location_name",
                "location_id",
                "is_available"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, u.user_name\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nJOIN ClassSessions cs ON e.session_id = cs.session_id\nJOIN Locations l ON cs.location_id = l.location_id\nWHERE e.attendance_status = 'attended'\n  AND e.enrollment_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE()\nGROUP BY u.user_id, u.username, u.user_name\nHAVING COUNT(DISTINCT l.location_id) = (SELECT COUNT(*) FROM Locations WHERE is_available = 1);\n```",
        "prompt_token_number": 279,
        "response_token_number": 127,
        "response_text_processed": "SELECT u.user_id, u.username, u.user_name FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN ClassSessions cs ON e.session_id = cs.session_id JOIN Locations l ON cs.location_id = l.location_id WHERE e.attendance_status = 'attended' AND e.enrollment_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() GROUP BY u.user_id, u.username, u.user_name HAVING COUNT(DISTINCT l.location_id) = (SELECT COUNT(*) FROM Locations WHERE is_available = 1)"
    },
    {
        "id": 34296,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the users who have attended classes in all the locations offered by the studio.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended classes in all the locations offered by the studio.",
        "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' GROUP BY Users.user_id HAVING COUNT(DISTINCT ClassSessions.location_id) = ( SELECT COUNT(*) FROM Locations );",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Locations": [
                "location_name",
                "location_id",
                "is_available"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, u.user_name\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nJOIN ClassSessions cs ON e.class_id = cs.class_id\nJOIN Locations l ON cs.location_id = l.location_id\nGROUP BY u.user_id, u.username, u.user_name\nHAVING COUNT(DISTINCT l.location_id) = (SELECT COUNT(*) FROM Locations);\n```",
        "prompt_token_number": 279,
        "response_token_number": 90,
        "response_text_processed": "SELECT u.user_id, u.username, u.user_name FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN ClassSessions cs ON e.class_id = cs.class_id JOIN Locations l ON cs.location_id = l.location_id GROUP BY u.user_id, u.username, u.user_name HAVING COUNT(DISTINCT l.location_id) = (SELECT COUNT(*) FROM Locations)"
    },
    {
        "id": 34297,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have the highest average rating from attendees in the last 6 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have the highest average rating from attendees in the last 6 months.",
        "output": "SELECT Classes.class_name, AVG(Reviews.rating) AS avg_rating FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id LEFT JOIN Reviews ON Enrollments.enrollment_id = Reviews.enrollment_id WHERE Reviews.rating IS NOT NULL AND Reviews.review_date BETWEEN date('now', '-6 months') AND date('now') GROUP BY Classes.class_id ORDER BY avg_rating DESC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT \n    C.class_name, \n    AVG(R.rating) AS average_rating\nFROM \n    Reviews R\nJOIN \n    Classes C ON R.class_id = C.class_id\nWHERE \n    R.review_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nGROUP BY \n    C.class_name\nORDER BY \n    average_rating DESC\nLIMIT 1;\n```",
        "prompt_token_number": 388,
        "response_token_number": 79,
        "response_text_processed": "SELECT C.class_name, AVG(R.rating) AS average_rating FROM Reviews R JOIN Classes C ON R.class_id = C.class_id WHERE R.review_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY C.class_name ORDER BY average_rating DESC LIMIT 1"
    },
    {
        "id": 34298,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended classes on 3 or more days of the week in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended classes on 3 or more days of the week in the last month.",
        "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id, strftime('%w', ClassSessions.session_date) HAVING COUNT(DISTINCT strftime('%w', ClassSessions.session_date)) >= 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, COUNT(DISTINCT cs.session_date) AS days_attended\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nJOIN ClassSessions cs ON e.session_id = cs.session_id\nWHERE e.attendance_status = 'attended'\n  AND cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY u.user_id, u.username\nHAVING COUNT(DISTINCT cs.session_date) >= 3;\n```",
        "prompt_token_number": 269,
        "response_token_number": 105,
        "response_text_processed": "SELECT u.user_id, u.username, COUNT(DISTINCT cs.session_date) AS days_attended FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN ClassSessions cs ON e.session_id = cs.session_id WHERE e.attendance_status = 'attended' AND cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY u.user_id, u.username HAVING COUNT(DISTINCT cs.session_date) >= 3"
    },
    {
        "id": 34304,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the classes that have been offered the most times in the last year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have been offered the most times in the last year.",
        "output": "SELECT Classes.class_name, COUNT(DISTINCT ClassSessions.session_id) AS num_sessions FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 year') AND date('now') GROUP BY Classes.class_id ORDER BY num_sessions DESC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT c.class_name, COUNT(cs.session_id) AS session_count\nFROM Classes c\nJOIN ClassSessions cs ON c.class_id = cs.class_id\nWHERE cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\nGROUP BY c.class_name\nORDER BY session_count DESC\nLIMIT 1;\n```",
        "prompt_token_number": 244,
        "response_token_number": 67,
        "response_text_processed": "SELECT c.class_name, COUNT(cs.session_id) AS session_count FROM Classes c JOIN ClassSessions cs ON c.class_id = cs.class_id WHERE cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY c.class_name ORDER BY session_count DESC LIMIT 1"
    },
    {
        "id": 34306,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have the highest ratio of advanced-level users to total users.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have the highest ratio of advanced-level users to total users.",
        "output": "SELECT Classes.class_name, (CAST(COUNT(CASE WHEN Users.skill_level = 'advanced' THEN 1 END) AS FLOAT) / COUNT(Enrollments.enrollment_id)) AS adv_user_ratio FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Users ON Enrollments.user_id = Users.user_id WHERE Enrollments.status = 'confirmed' GROUP BY Classes.class_id ORDER BY adv_user_ratio DESC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT \n    C.class_name, \n    (SUM(CASE WHEN U.skill_level = 'advanced' THEN 1 ELSE 0 END) / COUNT(E.user_id)) AS advanced_ratio\nFROM \n    Classes C\nJOIN \n    Enrollments E ON C.class_id = E.class_id\nJOIN \n    Users U ON E.user_id = U.user_id\nGROUP BY \n    C.class_id\nORDER BY \n    advanced_ratio DESC\nLIMIT 1;\n```",
        "prompt_token_number": 376,
        "response_token_number": 99,
        "response_text_processed": "SELECT C.class_name, (SUM(CASE WHEN U.skill_level = 'advanced' THEN 1 ELSE 0 END) / COUNT(E.user_id)) AS advanced_ratio FROM Classes C JOIN Enrollments E ON C.class_id = E.class_id JOIN Users U ON E.user_id = U.user_id GROUP BY C.class_id ORDER BY advanced_ratio DESC LIMIT 1"
    },
    {
        "id": 34307,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught the most classes in the last 3 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught the most classes in the last 3 months.",
        "output": "SELECT Instructors.name, COUNT(DISTINCT ClassSessions.class_id) AS num_classes_taught FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-3 months') AND date('now') GROUP BY Instructors.instructor_id ORDER BY num_classes_taught DESC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT i.instructor_name, COUNT(cs.session_id) AS class_count\nFROM Instructors i\nJOIN ClassSessions cs ON i.instructor_id = cs.instructor_id\nWHERE cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\nGROUP BY i.instructor_name\nORDER BY class_count DESC;\n```",
        "prompt_token_number": 172,
        "response_token_number": 68,
        "response_text_processed": "SELECT i.instructor_name, COUNT(cs.session_id) AS class_count FROM Instructors i JOIN ClassSessions cs ON i.instructor_id = cs.instructor_id WHERE cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY i.instructor_name ORDER BY class_count DESC"
    },
    {
        "id": 34310,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended the same class more than once in the last 6 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended the same class more than once in the last 6 months.",
        "output": "SELECT Users.username, Classes.class_name, COUNT(DISTINCT Enrollments.enrollment_id) AS num_attendances FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-6 months') AND date('now') GROUP BY Users.user_id, Classes.class_id HAVING num_attendances > 1 ORDER BY Users.username;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT \n    u.user_id, \n    u.username\nFROM \n    Users u\nJOIN \n    Enrollments e\nON \n    u.user_id = e.user_id\nJOIN \n    Classes c\nON \n    e.class_id = c.class_id\nWHERE \n    e.attendance_status = 'attended'\n    AND e.enrollment_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH)\nGROUP BY \n    u.user_id, e.class_id\nHAVING \n    COUNT(*) > 1;\n```",
        "prompt_token_number": 379,
        "response_token_number": 109,
        "response_text_processed": "SELECT u.user_id, u.username FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN Classes c ON e.class_id = c.class_id WHERE e.attendance_status = 'attended' AND e.enrollment_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH) GROUP BY u.user_id, e.class_id HAVING COUNT(*) > 1"
    },
    {
        "id": 34311,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the classes that have the highest average payment amount per enrolled user.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have the highest average payment amount per enrolled user.",
        "output": "SELECT Classes.class_name, AVG(Payments.amount) AS avg_payment_amount FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Payments ON Enrollments.enrollment_id = Payments.enrollment_id WHERE Enrollments.status = 'confirmed' GROUP BY Classes.class_id ORDER BY avg_payment_amount DESC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Payments": [
                "payment_id",
                "user_id",
                "payment_amount",
                "payment_date",
                "class_id",
                "rental_id",
                "enrollment_id",
                "amount",
                "payment_method"
            ]
        },
        "response_text": "```sql\nSELECT c.class_id, c.class_name, AVG(p.payment_amount) AS avg_payment_per_user\nFROM Classes c\nJOIN Enrollments e ON c.class_id = e.class_id\nJOIN Payments p ON e.enrollment_id = p.enrollment_id\nGROUP BY c.class_id, c.class_name\nORDER BY avg_payment_per_user DESC\nLIMIT 1;\n```",
        "prompt_token_number": 376,
        "response_token_number": 78,
        "response_text_processed": "SELECT c.class_id, c.class_name, AVG(p.payment_amount) AS avg_payment_per_user FROM Classes c JOIN Enrollments e ON c.class_id = e.class_id JOIN Payments p ON e.enrollment_id = p.enrollment_id GROUP BY c.class_id, c.class_name ORDER BY avg_payment_per_user DESC LIMIT 1"
    },
    {
        "id": 34312,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended at least 5 classes in the last month, and the total number of classes they have attended.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended at least 5 classes in the last month, and the total number of classes they have attended.",
        "output": "SELECT Users.username, COUNT(DISTINCT Enrollments.class_id) AS num_classes_attended FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id HAVING num_classes_attended >= 5 ORDER BY num_classes_attended DESC;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, COUNT(e.class_id) AS total_classes_attended\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nWHERE e.enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nAND e.attendance_status = 'attended'\nGROUP BY u.user_id, u.username\nHAVING COUNT(e.class_id) >= 5;\n```",
        "prompt_token_number": 274,
        "response_token_number": 87,
        "response_text_processed": "SELECT u.user_id, u.username, COUNT(e.class_id) AS total_classes_attended FROM Users u JOIN Enrollments e ON u.user_id = e.user_id WHERE e.enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND e.attendance_status = 'attended' GROUP BY u.user_id, u.username HAVING COUNT(e.class_id) >= 5"
    },
    {
        "id": 34316,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended classes taught by at least 3 different instructors in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended classes taught by at least 3 different instructors in the last month.",
        "output": "SELECT Users.username, COUNT(DISTINCT ClassSessions.instructor_id) AS num_instructors FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id HAVING num_instructors >= 3 ORDER BY num_instructors DESC;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT e.user_id\nFROM Enrollments e\nJOIN ClassSessions cs ON e.session_id = cs.session_id\nJOIN Users u ON e.user_id = u.user_id\nWHERE cs.session_date >= DATEADD(month, -1, GETDATE()) \nGROUP BY e.user_id\nHAVING COUNT(DISTINCT cs.instructor_id) >= 3;\n```",
        "prompt_token_number": 268,
        "response_token_number": 77,
        "response_text_processed": "SELECT e.user_id FROM Enrollments e JOIN ClassSessions cs ON e.session_id = cs.session_id JOIN Users u ON e.user_id = u.user_id WHERE cs.session_date >= DATEADD(month, -1, GETDATE()) GROUP BY e.user_id HAVING COUNT(DISTINCT cs.instructor_id) >= 3"
    },
    {
        "id": 34319,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have at least 5 open spots in the next week.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have at least 5 open spots in the next week.",
        "output": "SELECT Classes.class_name, COUNT(DISTINCT Enrollments.enrollment_id) AS num_enrollments, Classes.max_capacity - COUNT(DISTINCT Enrollments.enrollment_id) AS open_spots FROM Classes INNER JOIN Enrollments ON Classes.class_id = Enrollments.class_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now') AND date('now', '+1 week') GROUP BY Classes.class_id HAVING open_spots >= 5 ORDER BY open_spots DESC;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT c.*\nFROM Classes c\nWHERE c.class_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY)\n    AND (c.max_capacity - c.current_enrollment) >= 5;\n```",
        "prompt_token_number": 338,
        "response_token_number": 47,
        "response_text_processed": "SELECT c.* FROM Classes c WHERE c.class_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY) AND (c.max_capacity - c.current_enrollment) >= 5"
    },
    {
        "id": 34320,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught the most classes in the last month, and the total number of classes they have taught.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught the most classes in the last month, and the total number of classes they have taught.",
        "output": "SELECT Instructors.instructor_name, COUNT(DISTINCT ClassSessions.session_id) AS num_classes_taught FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Instructors.instructor_id ORDER BY num_classes_taught DESC;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT \n    i.instructor_name,\n    COUNT(cs.class_id) AS total_classes\nFROM \n    Instructors i\nJOIN \n    ClassSessions cs ON i.instructor_id = cs.instructor_id\nWHERE \n    cs.session_date >= DATEADD(MONTH, -1, GETDATE())\nGROUP BY \n    i.instructor_name\nORDER BY \n    total_classes DESC\n```",
        "prompt_token_number": 180,
        "response_token_number": 82,
        "response_text_processed": "SELECT i.instructor_name, COUNT(cs.class_id) AS total_classes FROM Instructors i JOIN ClassSessions cs ON i.instructor_id = cs.instructor_id WHERE cs.session_date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY i.instructor_name ORDER BY total_classes DESC ```"
    },
    {
        "id": 34321,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the most popular class sessions in terms of the number of enrollments in the last week.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the most popular class sessions in terms of the number of enrollments in the last week.",
        "output": "SELECT Classes.class_name, ClassSessions.session_date, COUNT(Enrollments.enrollment_id) AS num_enrollments FROM Classes INNER JOIN Enrollments ON Classes.class_id = Enrollments.class_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 week') AND date('now') GROUP BY Classes.class_id, ClassSessions.session_id ORDER BY num_enrollments DESC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT \n    cs.class_id,\n    cs.session_id,\n    COUNT(e.enrollment_id) AS num_enrollments\nFROM \n    ClassSessions cs\nJOIN \n    Enrollments e ON cs.class_id = e.class_id AND cs.session_id = e.session_id\nWHERE \n    e.enrollment_date >= DATEADD(week, -1, GETDATE())\nGROUP BY \n    cs.class_id, cs.session_id\nORDER BY \n    num_enrollments DESC;\n```",
        "prompt_token_number": 341,
        "response_token_number": 101,
        "response_text_processed": "SELECT cs.class_id, cs.session_id, COUNT(e.enrollment_id) AS num_enrollments FROM ClassSessions cs JOIN Enrollments e ON cs.class_id = e.class_id AND cs.session_id = e.session_id WHERE e.enrollment_date >= DATEADD(week, -1, GETDATE()) GROUP BY cs.class_id, cs.session_id ORDER BY num_enrollments DESC"
    },
    {
        "id": 34322,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the total revenue generated from class sessions taught by each instructor in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total revenue generated from class sessions taught by each instructor in the last month.",
        "output": "SELECT Instructors.instructor_name, SUM(Payments.amount) AS total_revenue FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Payments ON Enrollments.enrollment_id = Payments.enrollment_id WHERE Enrollments.status = 'confirmed' AND Payments.payment_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Instructors.instructor_id ORDER BY total_revenue DESC;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Payments": [
                "payment_id",
                "user_id",
                "payment_amount",
                "payment_date",
                "class_id",
                "rental_id",
                "enrollment_id",
                "amount",
                "payment_method"
            ]
        },
        "response_text": "```sql\nSELECT \n    i.instructor_name, \n    SUM(p.payment_amount) AS total_revenue\nFROM \n    Instructors i\nJOIN \n    ClassSessions cs ON i.instructor_id = cs.instructor_id\nJOIN \n    Enrollments e ON cs.class_id = e.class_id\nJOIN \n    Payments p ON e.enrollment_id = p.enrollment_id\nWHERE \n    cs.session_date >= DATEADD(MONTH, -1, GETDATE())\nGROUP BY \n    i.instructor_name;\n``` ",
        "prompt_token_number": 306,
        "response_token_number": 109,
        "response_text_processed": "SELECT i.instructor_name, SUM(p.payment_amount) AS total_revenue FROM Instructors i JOIN ClassSessions cs ON i.instructor_id = cs.instructor_id JOIN Enrollments e ON cs.class_id = e.class_id JOIN Payments p ON e.enrollment_id = p.enrollment_id WHERE cs.session_date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY i.instructor_name"
    },
    {
        "id": 34324,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Payments': ['payment_id', 'user_id', 'payment_amount', 'payment_date', 'class_id', 'rental_id', 'enrollment_id', 'amount', 'payment_method']} and \n# the user question: Find the total revenue generated from each payment method.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total revenue generated from each payment method.",
        "output": "SELECT Payments.payment_method, SUM(Payments.amount) AS total_revenue FROM Payments WHERE Payments.payment_date BETWEEN date('now', '-1 year') AND date('now') GROUP BY Payments.payment_method",
        "schema": "pilates",
        "processed_schema_content": {
            "Payments": [
                "payment_id",
                "user_id",
                "payment_amount",
                "payment_date",
                "class_id",
                "rental_id",
                "enrollment_id",
                "amount",
                "payment_method"
            ]
        },
        "response_text": "```sql\nSELECT payment_method, SUM(payment_amount) AS total_revenue\nFROM Payments\nGROUP BY payment_method;\n```",
        "prompt_token_number": 108,
        "response_token_number": 25,
        "response_text_processed": "SELECT payment_method, SUM(payment_amount) AS total_revenue FROM Payments GROUP BY payment_method"
    },
    {
        "id": 34325,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the most popular class sessions in terms of the total duration of all enrollments in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the most popular class sessions in terms of the total duration of all enrollments in the last month.",
        "output": "SELECT Classes.class_name, ClassSessions.session_date, SUM(ClassSessions.duration_minutes) AS total_duration FROM Classes INNER JOIN Enrollments ON Classes.class_id = Enrollments.class_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Classes.class_id, ClassSessions.session_id ORDER BY total_duration DESC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT \n    cs.session_id, \n    cs.class_id,\n    SUM(cs.duration_minutes * e.num_attendees) AS total_duration\nFROM \n    ClassSessions cs\nJOIN \n    Enrollments e ON cs.session_id = e.session_id\nWHERE \n    e.enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY \n    cs.session_id, cs.class_id\nORDER BY \n    total_duration DESC;\n```",
        "prompt_token_number": 343,
        "response_token_number": 95,
        "response_text_processed": "SELECT cs.session_id, cs.class_id, SUM(cs.duration_minutes * e.num_attendees) AS total_duration FROM ClassSessions cs JOIN Enrollments e ON cs.session_id = e.session_id WHERE e.enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY cs.session_id, cs.class_id ORDER BY total_duration DESC"
    },
    {
        "id": 34326,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught the most class sessions in the last 3 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught the most class sessions in the last 3 months.",
        "output": "SELECT Instructors.instructor_name, COUNT(ClassSessions.session_id) AS num_sessions_taught FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-3 months') AND date('now') GROUP BY Instructors.instructor_id ORDER BY num_sessions_taught DESC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT i.instructor_name, COUNT(cs.session_id) AS session_count\nFROM Instructors i\nJOIN ClassSessions cs ON i.instructor_id = cs.instructor_id\nWHERE cs.session_date >= DATEADD(MONTH, -3, GETDATE())\nGROUP BY i.instructor_name\nORDER BY session_count DESC;\n```",
        "prompt_token_number": 173,
        "response_token_number": 69,
        "response_text_processed": "SELECT i.instructor_name, COUNT(cs.session_id) AS session_count FROM Instructors i JOIN ClassSessions cs ON i.instructor_id = cs.instructor_id WHERE cs.session_date >= DATEADD(MONTH, -3, GETDATE()) GROUP BY i.instructor_name ORDER BY session_count DESC"
    },
    {
        "id": 34327,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have enrolled in more than 3 classes in the last month and have not canceled any of their enrollments.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have enrolled in more than 3 classes in the last month and have not canceled any of their enrollments.",
        "output": "SELECT Users.username FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN Classes ON Enrollments.class_id = Classes.class_id WHERE Enrollments.status = 'confirmed' AND Classes.class_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id HAVING COUNT(DISTINCT Enrollments.class_id) > 3 AND COUNT(CASE WHEN Enrollments.status = 'canceled' THEN 1 ELSE NULL END) = 0",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, u.user_name\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nWHERE e.enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\n  AND e.is_cancelled = 0\nGROUP BY u.user_id, u.username, u.user_name\nHAVING COUNT(e.enrollment_id) > 3;\n```",
        "prompt_token_number": 327,
        "response_token_number": 86,
        "response_text_processed": "SELECT u.user_id, u.username, u.user_name FROM Users u JOIN Enrollments e ON u.user_id = e.user_id WHERE e.enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND e.is_cancelled = 0 GROUP BY u.user_id, u.username, u.user_name HAVING COUNT(e.enrollment_id) > 3"
    },
    {
        "id": 34329,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the average age of users who have taken classes in the studio in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average age of users who have taken classes in the studio in the last month.",
        "output": "SELECT AVG(Users.age) AS avg_age FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now');",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT AVG(u.age) AS average_age\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nJOIN ClassSessions cs ON e.class_id = cs.class_id\nWHERE cs.session_date >= DATEADD(month, -1, GETDATE()) AND cs.session_date <= GETDATE();\n```\n",
        "prompt_token_number": 266,
        "response_token_number": 68,
        "response_text_processed": "SELECT AVG(u.age) AS average_age FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN ClassSessions cs ON e.class_id = cs.class_id WHERE cs.session_date >= DATEADD(month, -1, GETDATE()) AND cs.session_date <= GETDATE()"
    },
    {
        "id": 34330,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the most common reason for enrollment cancellations among users who have canceled at least one enrollment in the last quarter.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the most common reason for enrollment cancellations among users who have canceled at least one enrollment in the last quarter.",
        "output": "SELECT Enrollments.cancellation_reason, COUNT(*) AS num_cancellations FROM Enrollments WHERE Enrollments.status = 'canceled' AND Enrollments.cancellation_date BETWEEN date('now', '-3 months') AND date('now') AND Enrollments.cancellation_reason IS NOT NULL GROUP BY Enrollments.cancellation_reason ORDER BY num_cancellations DESC LIMIT 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT cancellation_reason, COUNT(*) as cancellation_count\nFROM Enrollments\nWHERE cancellation_date >= DATE_SUB(CURDATE(), INTERVAL QUARTER(CURDATE()) QUARTER)\nGROUP BY cancellation_reason\nORDER BY cancellation_count DESC\nLIMIT 1;\n```",
        "prompt_token_number": 174,
        "response_token_number": 56,
        "response_text_processed": "SELECT cancellation_reason, COUNT(*) as cancellation_count FROM Enrollments WHERE cancellation_date >= DATE_SUB(CURDATE(), INTERVAL QUARTER(CURDATE()) QUARTER) GROUP BY cancellation_reason ORDER BY cancellation_count DESC LIMIT 1"
    },
    {
        "id": 34331,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the number of unique users who have taken a class taught by each instructor in the last 6 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of unique users who have taken a class taught by each instructor in the last 6 months.",
        "output": "SELECT Instructors.instructor_name, COUNT(DISTINCT Enrollments.user_id) AS num_unique_users FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-6 months') AND date('now') GROUP BY Instructors.instructor_id ORDER BY num_unique_users DESC;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT \n    i.instructor_name,\n    COUNT(DISTINCT e.user_id) AS unique_users\nFROM \n    Instructors i\nJOIN \n    ClassSessions cs ON i.instructor_id = cs.instructor_id\nJOIN \n    Enrollments e ON cs.class_id = e.class_id\nWHERE \n    e.status = 'completed' \n    AND cs.session_date >= DATEADD(MONTH, -6, GETDATE())\nGROUP BY \n    i.instructor_name;\n```",
        "prompt_token_number": 271,
        "response_token_number": 102,
        "response_text_processed": "SELECT i.instructor_name, COUNT(DISTINCT e.user_id) AS unique_users FROM Instructors i JOIN ClassSessions cs ON i.instructor_id = cs.instructor_id JOIN Enrollments e ON cs.class_id = e.class_id WHERE e.status = 'completed' AND cs.session_date >= DATEADD(MONTH, -6, GETDATE()) GROUP BY i.instructor_name"
    },
    {
        "id": 34332,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the top 3 most popular class types among male users who have taken classes in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the top 3 most popular class types among male users who have taken classes in the last month.",
        "output": "SELECT Classes.class_type, COUNT(*) AS num_enrollments FROM Classes INNER JOIN Enrollments ON Classes.class_id = Enrollments.class_id INNER JOIN Users ON Enrollments.user_id = Users.user_id WHERE Enrollments.status = 'confirmed' AND Users.gender = 'M' AND Enrollments.enrollment_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Classes.class_type ORDER BY num_enrollments DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT c.class_type, COUNT(e.enrollment_id) AS enrollment_count\nFROM Enrollments e\nJOIN Classes c ON e.class_id = c.class_id\nJOIN Users u ON e.user_id = u.user_id\nWHERE u.gender = 'male'\n  AND e.enrollment_date >= NOW() - INTERVAL 1 MONTH\nGROUP BY c.class_type\nORDER BY enrollment_count DESC\nLIMIT 3;\n```",
        "prompt_token_number": 322,
        "response_token_number": 87,
        "response_text_processed": "SELECT c.class_type, COUNT(e.enrollment_id) AS enrollment_count FROM Enrollments e JOIN Classes c ON e.class_id = c.class_id JOIN Users u ON e.user_id = u.user_id WHERE u.gender = 'male' AND e.enrollment_date >= NOW() - INTERVAL 1 MONTH GROUP BY c.class_type ORDER BY enrollment_count DESC LIMIT 3"
    },
    {
        "id": 34333,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the total number of class enrollments in the last year that have not been canceled, and the percentage of those that were attended.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total number of class enrollments in the last year that have not been canceled, and the percentage of those that were attended.",
        "output": "SELECT COUNT(*) AS total_enrollments, ROUND(100.0 * SUM(CASE WHEN Enrollments.attendance_status = 'attended' THEN 1 ELSE 0 END) / COUNT(*), 2) AS attendance_percentage FROM Enrollments WHERE Enrollments.status = 'confirmed' AND Enrollments.enrollment_date BETWEEN date('now', '-1 year') AND date('now');",
        "schema": "pilates",
        "processed_schema_content": {
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT \n    COUNT(*) AS total_enrollments,\n    (SUM(CASE WHEN attendance_status = 'attended' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_attended\nFROM \n    Enrollments\nWHERE \n    is_cancelled = 0 \n    AND enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);\n```",
        "prompt_token_number": 178,
        "response_token_number": 82,
        "response_text_processed": "SELECT COUNT(*) AS total_enrollments, (SUM(CASE WHEN attendance_status = 'attended' THEN 1 ELSE 0 END) * 100.0 / COUNT(*)) AS percentage_attended FROM Enrollments WHERE is_cancelled = 0 AND enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)"
    },
    {
        "id": 34334,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructor who has taught the highest number of classes in the last 3 months, along with the total number of classes taught.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructor who has taught the highest number of classes in the last 3 months, along with the total number of classes taught.",
        "output": "SELECT Instructors.instructor_name, COUNT(*) AS num_classes FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-3 months') AND date('now') GROUP BY Instructors.instructor_id ORDER BY num_classes DESC LIMIT 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT i.instructor_name, COUNT(cs.session_id) AS total_classes\nFROM Instructors i\nJOIN ClassSessions cs ON i.instructor_id = cs.instructor_id\nWHERE cs.session_date >= NOW() - INTERVAL 3 MONTH\nGROUP BY i.instructor_name\nORDER BY total_classes DESC\nLIMIT 1;\n```",
        "prompt_token_number": 183,
        "response_token_number": 69,
        "response_text_processed": "SELECT i.instructor_name, COUNT(cs.session_id) AS total_classes FROM Instructors i JOIN ClassSessions cs ON i.instructor_id = cs.instructor_id WHERE cs.session_date >= NOW() - INTERVAL 3 MONTH GROUP BY i.instructor_name ORDER BY total_classes DESC LIMIT 1"
    },
    {
        "id": 34335,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have not taken any classes in the last 6 months, along with their email addresses.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have not taken any classes in the last 6 months, along with their email addresses.",
        "output": "SELECT Users.email FROM Users WHERE Users.user_id NOT IN ( SELECT DISTINCT Enrollments.user_id FROM Enrollments INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-6 months') AND date('now') );",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT U.user_id, U.username, U.email \nFROM Users U\nLEFT JOIN Enrollments E ON U.user_id = E.user_id \nLEFT JOIN ClassSessions CS ON E.session_id = CS.session_id \nWHERE (E.session_id IS NULL OR CS.session_date < DATEADD(month, -6, GETDATE()))\nAND U.user_id NOT IN (\n    SELECT user_id \n    FROM Enrollments E2\n    JOIN ClassSessions CS2 ON E2.session_id = CS2.session_id \n    WHERE CS2.session_date >= DATEADD(month, -6, GETDATE())\n);\n```",
        "prompt_token_number": 270,
        "response_token_number": 125,
        "response_text_processed": "SELECT U.user_id, U.username, U.email FROM Users U LEFT JOIN Enrollments E ON U.user_id = E.user_id LEFT JOIN ClassSessions CS ON E.session_id = CS.session_id WHERE (E.session_id IS NULL OR CS.session_date < DATEADD(month, -6, GETDATE())) AND U.user_id NOT IN ( SELECT user_id FROM Enrollments E2 JOIN ClassSessions CS2 ON E2.session_id = CS2.session_id WHERE CS2.session_date >= DATEADD(month, -6, GETDATE()) )"
    },
    {
        "id": 34336,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the classes that have the highest average rating based on user reviews, along with the number of reviews.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have the highest average rating based on user reviews, along with the number of reviews.",
        "output": "SELECT Classes.class_type, AVG(Reviews.rating) AS avg_rating, COUNT(Reviews.review_id) AS num_reviews FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Reviews ON ClassSessions.session_id = Reviews.session_id WHERE Reviews.rating IS NOT NULL GROUP BY Classes.class_id ORDER BY avg_rating DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT \n    c.class_name, \n    AVG(r.rating) AS average_rating, \n    COUNT(r.review_id) AS number_of_reviews\nFROM \n    Classes c\nJOIN \n    Reviews r ON c.class_id = r.class_id\nGROUP BY \n    c.class_name\nORDER BY \n    average_rating DESC\nLIMIT 1;\n```",
        "prompt_token_number": 298,
        "response_token_number": 73,
        "response_text_processed": "SELECT c.class_name, AVG(r.rating) AS average_rating, COUNT(r.review_id) AS number_of_reviews FROM Classes c JOIN Reviews r ON c.class_id = r.class_id GROUP BY c.class_name ORDER BY average_rating DESC LIMIT 1"
    },
    {
        "id": 34338,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the most popular time slot for classes on Saturdays, based on the number of enrollments in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the most popular time slot for classes on Saturdays, based on the number of enrollments in the last month.",
        "output": "SELECT ClassSessions.start_time FROM ClassSessions INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE Classes.class_day = 'Saturday' AND Enrollments.status = 'confirmed' AND Enrollments.enrollment_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY ClassSessions.start_time ORDER BY COUNT(*) DESC LIMIT 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT\n    c.start_time,\n    COUNT(e.enrollment_id) AS enrollment_count\nFROM\n    Classes c\nJOIN\n    Enrollments e ON c.class_id = e.class_id\nWHERE\n    c.class_day = 'Saturday'\n    AND e.enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY\n    c.start_time\nORDER BY\n    enrollment_count DESC\nLIMIT 1;\n```",
        "prompt_token_number": 345,
        "response_token_number": 92,
        "response_text_processed": "SELECT c.start_time, COUNT(e.enrollment_id) AS enrollment_count FROM Classes c JOIN Enrollments e ON c.class_id = e.class_id WHERE c.class_day = 'Saturday' AND e.enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY c.start_time ORDER BY enrollment_count DESC LIMIT 1"
    },
    {
        "id": 34340,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Reviews': ['rating', 'session_id', 'class_id', 'rental_id', 'user_id', 'comment', 'review_id', 'review_date', 'review_text', 'instructor_id', 'enrollment_id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the classes that have not been reviewed by users.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have not been reviewed by users.",
        "output": "SELECT Classes.class_type FROM Classes LEFT JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Reviews ON ClassSessions.session_id = Reviews.session_id WHERE Reviews.review_id IS NULL;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Reviews": [
                "rating",
                "session_id",
                "class_id",
                "rental_id",
                "user_id",
                "comment",
                "review_id",
                "review_date",
                "review_text",
                "instructor_id",
                "enrollment_id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT c.*\nFROM Classes c\nLEFT JOIN Reviews r ON c.class_id = r.class_id\nWHERE r.review_id IS NULL;\n```",
        "prompt_token_number": 288,
        "response_token_number": 31,
        "response_text_processed": "SELECT c.* FROM Classes c LEFT JOIN Reviews r ON c.class_id = r.class_id WHERE r.review_id IS NULL"
    },
    {
        "id": 34341,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught the same class type in the last month, and the number of times they have taught it.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught the same class type in the last month, and the number of times they have taught it.",
        "output": "SELECT Instructors.instructor_name, Classes.class_type, COUNT(*) AS num_classes FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Instructors.instructor_id, Classes.class_id HAVING COUNT(*) > 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT \n    i.instructor_name, \n    c.class_type, \n    COUNT(cs.session_id) AS times_taught\nFROM \n    Instructors i\nJOIN \n    Classes c ON i.instructor_id = c.instructor_id\nJOIN \n    ClassSessions cs ON c.class_id = cs.class_id\nWHERE \n    cs.session_date >= DATEADD(month, -1, GETDATE())\nGROUP BY \n    i.instructor_name, \n    c.class_type\nHAVING \n    COUNT(cs.session_id) > 1\nORDER BY \n    times_taught DESC;\n```",
        "prompt_token_number": 293,
        "response_token_number": 122,
        "response_text_processed": "SELECT i.instructor_name, c.class_type, COUNT(cs.session_id) AS times_taught FROM Instructors i JOIN Classes c ON i.instructor_id = c.instructor_id JOIN ClassSessions cs ON c.class_id = cs.class_id WHERE cs.session_date >= DATEADD(month, -1, GETDATE()) GROUP BY i.instructor_name, c.class_type HAVING COUNT(cs.session_id) > 1 ORDER BY times_taught DESC"
    },
    {
        "id": 34344,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have taken classes at least once a week for the past 6 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have taken classes at least once a week for the past 6 months.",
        "output": "SELECT Users.user_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-6 months') AND date('now') GROUP BY Users.user_id HAVING COUNT(DISTINCT strftime('%Y-%W', ClassSessions.session_date)) >= 24;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, u.user_name, COUNT(e.class_id) AS classes_taken\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nJOIN ClassSessions cs ON e.session_id = cs.session_id\nWHERE e.is_cancelled = 0\nAND cs.session_date >= CURDATE() - INTERVAL 6 MONTH\nGROUP BY u.user_id, u.username, u.user_name\nHAVING COUNT(DISTINCT WEEK(cs.session_date)) >= 24;\n```",
        "prompt_token_number": 267,
        "response_token_number": 107,
        "response_text_processed": "SELECT u.user_id, u.username, u.user_name, COUNT(e.class_id) AS classes_taken FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN ClassSessions cs ON e.session_id = cs.session_id WHERE e.is_cancelled = 0 AND cs.session_date >= CURDATE() - INTERVAL 6 MONTH GROUP BY u.user_id, u.username, u.user_name HAVING COUNT(DISTINCT WEEK(cs.session_date)) >= 24"
    },
    {
        "id": 34345,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught classes in all time slots (morning, afternoon, evening) in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught classes in all time slots (morning, afternoon, evening) in the last month.",
        "output": "SELECT Instructors.instructor_name FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Instructors.instructor_id HAVING COUNT(DISTINCT CASE WHEN strftime('%H:%M', ClassSessions.start_time) BETWEEN '06:00' AND '11:59' THEN 'morning' WHEN strftime('%H:%M', ClassSessions.start_time) BETWEEN '12:00' AND '17:59' THEN 'afternoon' WHEN strftime('%H:%M', ClassSessions.start_time) BETWEEN '18:00' AND '23:59' THEN 'evening' END) = 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT i.instructor_name\nFROM Instructors i\nJOIN ClassSessions cs ON i.instructor_id = cs.instructor_id\nWHERE cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY i.instructor_id, i.instructor_name\nHAVING COUNT(DISTINCT \n    CASE \n        WHEN TIME(cs.session_start_time) BETWEEN '06:00:00' AND '11:59:59' THEN 'Morning' \n        WHEN TIME(cs.session_start_time) BETWEEN '12:00:00' AND '17:59:59' THEN 'Afternoon' \n        WHEN TIME(cs.session_start_time) BETWEEN '18:00:00' AND '23:59:59' THEN 'Evening' \n    END\n) = 3;\n```",
        "prompt_token_number": 180,
        "response_token_number": 165,
        "response_text_processed": "SELECT i.instructor_name FROM Instructors i JOIN ClassSessions cs ON i.instructor_id = cs.instructor_id WHERE cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY i.instructor_id, i.instructor_name HAVING COUNT(DISTINCT CASE WHEN TIME(cs.session_start_time) BETWEEN '06:00:00' AND '11:59:59' THEN 'Morning' WHEN TIME(cs.session_start_time) BETWEEN '12:00:00' AND '17:59:59' THEN 'Afternoon' WHEN TIME(cs.session_start_time) BETWEEN '18:00:00' AND '23:59:59' THEN 'Evening' END ) = 3"
    },
    {
        "id": 34346,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have taken at least 3 different class types in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have taken at least 3 different class types in the last month.",
        "output": "SELECT Users.user_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id HAVING COUNT(DISTINCT Classes.class_type) >= 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT U.user_id, U.username, COUNT(DISTINCT C.class_type_id) AS unique_class_types\nFROM Enrollments E\nJOIN Users U ON E.user_id = U.user_id\nJOIN Classes C ON E.class_id = C.class_id\nWHERE E.enrollment_date >= DATEADD(MONTH, -1, GETDATE())\nGROUP BY U.user_id, U.username\nHAVING COUNT(DISTINCT C.class_type_id) >= 3;\n```",
        "prompt_token_number": 378,
        "response_token_number": 98,
        "response_text_processed": "SELECT U.user_id, U.username, COUNT(DISTINCT C.class_type_id) AS unique_class_types FROM Enrollments E JOIN Users U ON E.user_id = U.user_id JOIN Classes C ON E.class_id = C.class_id WHERE E.enrollment_date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY U.user_id, U.username HAVING COUNT(DISTINCT C.class_type_id) >= 3"
    },
    {
        "id": 34347,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the number of active users who have not taken any classes in the last 3 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of active users who have not taken any classes in the last 3 months.",
        "output": "SELECT COUNT(*) AS num_inactive_users FROM Users WHERE user_id NOT IN ( SELECT DISTINCT Users.user_id FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-3 months') AND date('now') ) AND user_status = 'active';",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT COUNT(*) AS number_of_active_users\nFROM Users u\nWHERE u.user_status = 'active'\nAND NOT EXISTS (\n    SELECT 1\n    FROM Enrollments e\n    JOIN ClassSessions cs ON e.session_id = cs.session_id\n    WHERE e.user_id = u.user_id\n    AND cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\n);\n```",
        "prompt_token_number": 267,
        "response_token_number": 83,
        "response_text_processed": "SELECT COUNT(*) AS number_of_active_users FROM Users u WHERE u.user_status = 'active' AND NOT EXISTS ( SELECT 1 FROM Enrollments e JOIN ClassSessions cs ON e.session_id = cs.session_id WHERE e.user_id = u.user_id AND cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) )"
    },
    {
        "id": 34351,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the top 3 busiest instructors in terms of the number of classes they have taught in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the top 3 busiest instructors in terms of the number of classes they have taught in the last month.",
        "output": "SELECT Instructors.instructor_name, COUNT(*) AS num_classes_taught FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Instructors.instructor_id ORDER BY COUNT(*) DESC LIMIT 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT \n    i.instructor_name, \n    COUNT(cs.session_id) AS class_count\nFROM \n    Instructors i\nJOIN \n    ClassSessions cs ON i.instructor_id = cs.instructor_id\nWHERE \n    cs.session_date >= DATEADD(MONTH, -1, GETDATE())\nGROUP BY \n    i.instructor_id, i.instructor_name\nORDER BY \n    class_count DESC\nLIMIT 3;\n```",
        "prompt_token_number": 178,
        "response_token_number": 92,
        "response_text_processed": "SELECT i.instructor_name, COUNT(cs.session_id) AS class_count FROM Instructors i JOIN ClassSessions cs ON i.instructor_id = cs.instructor_id WHERE cs.session_date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY i.instructor_id, i.instructor_name ORDER BY class_count DESC LIMIT 3"
    },
    {
        "id": 34353,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Locations': ['location_name', 'location_id', 'is_available']} and \n# the user question: Find the number of active users who have taken classes in each location in the last month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of active users who have taken classes in each location in the last month.",
        "output": "SELECT Locations.location_name, COUNT(DISTINCT Users.user_id) AS num_active_users FROM Locations INNER JOIN Classes ON Locations.location_id = Classes.location_id INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id INNER JOIN Users ON Enrollments.user_id = Users.user_id WHERE Users.user_status = 'active' AND Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Locations.location_id;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Locations": [
                "location_name",
                "location_id",
                "is_available"
            ]
        },
        "response_text": "```sql\nSELECT l.location_name, COUNT(DISTINCT e.user_id) AS active_users\nFROM Enrollments e\nJOIN Classes c ON e.class_id = c.class_id\nJOIN Locations l ON c.location_id = l.location_id\nJOIN Users u ON e.user_id = u.user_id\nWHERE e.enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\n  AND u.user_status = 'active'\nGROUP BY l.location_name;\n```",
        "prompt_token_number": 393,
        "response_token_number": 95,
        "response_text_processed": "SELECT l.location_name, COUNT(DISTINCT e.user_id) AS active_users FROM Enrollments e JOIN Classes c ON e.class_id = c.class_id JOIN Locations l ON c.location_id = l.location_id JOIN Users u ON e.user_id = u.user_id WHERE e.enrollment_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND u.user_status = 'active' GROUP BY l.location_name"
    },
    {
        "id": 34356,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended at least one class in each of the last 3 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended at least one class in each of the last 3 months.",
        "output": "SELECT Users.user_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND STRFTIME('%Y-%m', ClassSessions.session_date) >= STRFTIME('%Y-%m', 'now', '-2 months') GROUP BY Users.user_id HAVING COUNT(DISTINCT STRFTIME('%Y-%m', ClassSessions.session_date)) = 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, u.user_name\nFROM Users u\nWHERE EXISTS (\n    SELECT 1\n    FROM Enrollments e\n    JOIN ClassSessions cs ON e.class_id = cs.class_id\n    WHERE e.user_id = u.user_id \n      AND e.is_cancelled = FALSE\n      AND cs.session_date >= DATEADD(MONTH, -3, GETDATE())\n      AND cs.session_date < DATEADD(MONTH, -2, GETDATE())\n)\nAND EXISTS (\n    SELECT 1\n    FROM Enrollments e\n    JOIN ClassSessions cs ON e.class_id = cs.class_id\n    WHERE e.user_id = u.user_id \n      AND e.is_cancelled = FALSE\n      AND cs.session_date >= DATEADD(MONTH, -2, GETDATE())\n      AND cs.session_date < DATEADD(MONTH, -1, GETDATE())\n)\nAND EXISTS (\n    SELECT 1\n    FROM Enrollments e\n    JOIN ClassSessions cs ON e.class_id = cs.class_id\n    WHERE e.user_id = u.user_id \n      AND e.is_cancelled = FALSE\n      AND cs.session_date >= DATEADD(MONTH, -1, GETDATE())\n      AND cs.session_date < GETDATE()\n);\n```",
        "prompt_token_number": 267,
        "response_token_number": 266,
        "response_text_processed": "SELECT u.user_id, u.username, u.user_name FROM Users u WHERE EXISTS ( SELECT 1 FROM Enrollments e JOIN ClassSessions cs ON e.class_id = cs.class_id WHERE e.user_id = u.user_id AND e.is_cancelled = FALSE AND cs.session_date >= DATEADD(MONTH, -3, GETDATE()) AND cs.session_date < DATEADD(MONTH, -2, GETDATE()) ) AND EXISTS ( SELECT 1 FROM Enrollments e JOIN ClassSessions cs ON e.class_id = cs.class_id WHERE e.user_id = u.user_id AND e.is_cancelled = FALSE AND cs.session_date >= DATEADD(MONTH, -2, GETDATE()) AND cs.session_date < DATEADD(MONTH, -1, GETDATE()) ) AND EXISTS ( SELECT 1 FROM Enrollments e JOIN ClassSessions cs ON e.class_id = cs.class_id WHERE e.user_id = u.user_id AND e.is_cancelled = FALSE AND cs.session_date >= DATEADD(MONTH, -1, GETDATE()) AND cs.session_date < GETDATE() )"
    },
    {
        "id": 34358,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the average length of time between when a user creates an account and their first class enrollment.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average length of time between when a user creates an account and their first class enrollment.",
        "output": "SELECT AVG(julianday(Enrollments.enrollment_date) - julianday(Users.creation_date)) FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND Enrollments.enrollment_date >= Users.creation_date;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT AVG(DATEDIFF(e.enrollment_date, u.creation_date)) AS average_days\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nGROUP BY u.user_id\nORDER BY e.enrollment_date ASC\nLIMIT 1;\n```",
        "prompt_token_number": 267,
        "response_token_number": 58,
        "response_text_processed": "SELECT AVG(DATEDIFF(e.enrollment_date, u.creation_date)) AS average_days FROM Users u JOIN Enrollments e ON u.user_id = e.user_id GROUP BY u.user_id ORDER BY e.enrollment_date ASC LIMIT 1"
    },
    {
        "id": 34359,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have enrolled in the most number of classes in the past month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have enrolled in the most number of classes in the past month.",
        "output": "SELECT Users.user_name, COUNT(*) AS num_classes FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE Enrollments.status = 'confirmed' AND ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') GROUP BY Users.user_id ORDER BY num_classes DESC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT U.user_id, U.username, COUNT(E.class_id) AS class_count\nFROM Users U\nJOIN Enrollments E ON U.user_id = E.user_id\nWHERE E.enrollment_date >= DATEADD(MONTH, -1, GETDATE())\nGROUP BY U.user_id, U.username\nORDER BY class_count DESC\nLIMIT 1;\n```",
        "prompt_token_number": 265,
        "response_token_number": 76,
        "response_text_processed": "SELECT U.user_id, U.username, COUNT(E.class_id) AS class_count FROM Users U JOIN Enrollments E ON U.user_id = E.user_id WHERE E.enrollment_date >= DATEADD(MONTH, -1, GETDATE()) GROUP BY U.user_id, U.username ORDER BY class_count DESC LIMIT 1"
    },
    {
        "id": 34363,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the most popular instructors based on the number of classes they have taught in the past year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the most popular instructors based on the number of classes they have taught in the past year.",
        "output": "SELECT Instructors.instructor_name, COUNT(*) AS num_classes FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 year') AND date('now') GROUP BY Instructors.instructor_id ORDER BY num_classes DESC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT I.instructor_name, COUNT(CS.session_id) AS classes_taught\nFROM Instructors I\nJOIN ClassSessions CS ON I.instructor_id = CS.instructor_id\nWHERE CS.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\nGROUP BY I.instructor_name\nORDER BY classes_taught DESC;\n```",
        "prompt_token_number": 175,
        "response_token_number": 71,
        "response_text_processed": "SELECT I.instructor_name, COUNT(CS.session_id) AS classes_taught FROM Instructors I JOIN ClassSessions CS ON I.instructor_id = CS.instructor_id WHERE CS.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY I.instructor_name ORDER BY classes_taught DESC"
    },
    {
        "id": 34369,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have the lowest attendance rates in the past month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have the lowest attendance rates in the past month.",
        "output": "SELECT Classes.class_name, COUNT(*) AS num_attendees FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') AND Enrollments.status = 'confirmed' GROUP BY Classes.class_id ORDER BY num_attendees ASC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT \n    c.class_id, \n    c.class_name, \n    (ce.enrolled_count::float / c.max_capacity) AS attendance_rate\nFROM \n    Classes c\nJOIN \n    (SELECT \n         class_id, \n         COUNT(*) AS enrolled_count \n     FROM \n         Enrollments \n     WHERE \n         enrollment_date >= CURRENT_DATE - INTERVAL '1 month' \n         AND is_cancelled = false \n     GROUP BY \n         class_id) ce \nON \n    c.class_id = ce.class_id\nORDER BY \n    attendance_rate ASC\nLIMIT 1;\n```",
        "prompt_token_number": 336,
        "response_token_number": 124,
        "response_text_processed": "SELECT c.class_id, c.class_name, (ce.enrolled_count::float / c.max_capacity) AS attendance_rate FROM Classes c JOIN (SELECT class_id, COUNT(*) AS enrolled_count FROM Enrollments WHERE enrollment_date >= CURRENT_DATE - INTERVAL '1 month' AND is_cancelled = false GROUP BY class_id) ce ON c.class_id = ce.class_id ORDER BY attendance_rate ASC LIMIT 1"
    },
    {
        "id": 34371,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'InstructorRatings': ['rating', 'instructor_id', 'session_id', 'user_id']} and \n# the user question: Find the users who have attended classes taught by an instructor they have rated.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended classes taught by an instructor they have rated.",
        "output": "SELECT Users.user_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN InstructorRatings ON ClassSessions.session_id = InstructorRatings.session_id WHERE Enrollments.status = 'confirmed' AND InstructorRatings.user_id = Users.user_id;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "InstructorRatings": [
                "rating",
                "instructor_id",
                "session_id",
                "user_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT u.*\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nJOIN InstructorRatings ir ON u.user_id = ir.user_id \n    AND e.session_id = ir.session_id\nJOIN ClassSessions cs ON e.session_id = cs.session_id \n    AND cs.instructor_id = ir.instructor_id;\n```",
        "prompt_token_number": 285,
        "response_token_number": 75,
        "response_text_processed": "SELECT DISTINCT u.* FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN InstructorRatings ir ON u.user_id = ir.user_id AND e.session_id = ir.session_id JOIN ClassSessions cs ON e.session_id = cs.session_id AND cs.instructor_id = ir.instructor_id"
    },
    {
        "id": 34373,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught classes in every time slot in the past week.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught classes in every time slot in the past week.",
        "output": "SELECT Instructors.instructor_name FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 week') AND date('now') GROUP BY Instructors.instructor_id HAVING COUNT(DISTINCT ClassSessions.session_time) = ( SELECT COUNT(DISTINCT session_time) FROM ClassSessions WHERE session_date BETWEEN date('now', '-1 week') AND date('now') );",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT instructor_id\nFROM ClassSessions\nWHERE session_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)\nGROUP BY instructor_id\nHAVING COUNT(DISTINCT session_start_time) = (\n    SELECT COUNT(DISTINCT session_start_time)\n    FROM ClassSessions\n    WHERE session_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)\n);\n```",
        "prompt_token_number": 172,
        "response_token_number": 76,
        "response_text_processed": "SELECT instructor_id FROM ClassSessions WHERE session_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY instructor_id HAVING COUNT(DISTINCT session_start_time) = ( SELECT COUNT(DISTINCT session_start_time) FROM ClassSessions WHERE session_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) )"
    },
    {
        "id": 34376,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'InstructorRatings': ['rating', 'instructor_id', 'session_id', 'user_id']} and \n# the user question: Find the users who have rated at least one instructor and attended classes in the past month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have rated at least one instructor and attended classes in the past month.",
        "output": "SELECT Users.user_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 month') AND date('now') AND Users.user_id IN ( SELECT DISTINCT user_id FROM InstructorRatings ) GROUP BY Users.user_id;",
        "schema": "pilates",
        "processed_schema_content": {
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "InstructorRatings": [
                "rating",
                "instructor_id",
                "session_id",
                "user_id"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT U.user_id, U.username, U.user_name, U.email\nFROM Users U\nJOIN InstructorRatings IR ON U.user_id = IR.user_id\nJOIN Enrollments E ON U.user_id = E.user_id\nJOIN ClassSessions CS ON E.class_id = CS.class_id\nWHERE E.attendance_status = 'attended' \n  AND CS.session_date >= DATEADD(month, -1, GETDATE());\n```",
        "prompt_token_number": 288,
        "response_token_number": 91,
        "response_text_processed": "SELECT DISTINCT U.user_id, U.username, U.user_name, U.email FROM Users U JOIN InstructorRatings IR ON U.user_id = IR.user_id JOIN Enrollments E ON U.user_id = E.user_id JOIN ClassSessions CS ON E.class_id = CS.class_id WHERE E.attendance_status = 'attended' AND CS.session_date >= DATEADD(month, -1, GETDATE())"
    },
    {
        "id": 34379,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'InstructorRatings': ['rating', 'instructor_id', 'session_id', 'user_id']} and \n# the user question: Find the average rating for each instructor.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average rating for each instructor.",
        "output": "SELECT Instructors.instructor_name, AVG(InstructorRatings.rating) AS avg_rating FROM Instructors LEFT JOIN InstructorRatings ON Instructors.instructor_id = InstructorRatings.instructor_id GROUP BY Instructors.instructor_id;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "InstructorRatings": [
                "rating",
                "instructor_id",
                "session_id",
                "user_id"
            ]
        },
        "response_text": "```sql\nSELECT instructor_id, AVG(rating) AS average_rating \nFROM InstructorRatings \nGROUP BY instructor_id;\n```",
        "prompt_token_number": 127,
        "response_token_number": 26,
        "response_text_processed": "SELECT instructor_id, AVG(rating) AS average_rating FROM InstructorRatings GROUP BY instructor_id"
    },
    {
        "id": 34381,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the number of classes each instructor has taught in the past week.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of classes each instructor has taught in the past week.",
        "output": "SELECT Instructors.instructor_name, COUNT(ClassSessions.session_id) AS num_classes_taught FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date BETWEEN date('now', '-1 week') AND date('now') GROUP BY Instructors.instructor_id;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT \n    i.instructor_name, \n    COUNT(cs.session_id) AS class_count\nFROM \n    Instructors i\nJOIN \n    ClassSessions cs ON i.instructor_id = cs.instructor_id\nWHERE \n    cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)\nGROUP BY \n    i.instructor_id, i.instructor_name;\n```",
        "prompt_token_number": 170,
        "response_token_number": 79,
        "response_text_processed": "SELECT i.instructor_name, COUNT(cs.session_id) AS class_count FROM Instructors i JOIN ClassSessions cs ON i.instructor_id = cs.instructor_id WHERE cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) GROUP BY i.instructor_id, i.instructor_name"
    },
    {
        "id": 34384,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the top 5 most popular classes in terms of enrollment.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the top 5 most popular classes in terms of enrollment.",
        "output": "SELECT Classes.class_name, COUNT(Enrollments.enrollment_id) AS num_enrollments FROM Classes INNER JOIN Enrollments ON Classes.class_id = Enrollments.class_id GROUP BY Classes.class_id ORDER BY num_enrollments DESC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT c.class_name, COUNT(e.enrollment_id) as enrollment_count\nFROM Classes c\nJOIN Enrollments e ON c.class_id = e.class_id\nGROUP BY c.class_name\nORDER BY enrollment_count DESC\nLIMIT 5;\n```",
        "prompt_token_number": 276,
        "response_token_number": 53,
        "response_text_processed": "SELECT c.class_name, COUNT(e.enrollment_id) as enrollment_count FROM Classes c JOIN Enrollments e ON c.class_id = e.class_id GROUP BY c.class_name ORDER BY enrollment_count DESC LIMIT 5"
    },
    {
        "id": 34385,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended at least one class in each location.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended at least one class in each location.",
        "output": "SELECT Users.user_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN Classes ON ClassSessions.class_id = Classes.class_id GROUP BY Users.user_id HAVING COUNT(DISTINCT Classes.location_id) = ( SELECT COUNT(DISTINCT location_id) FROM Classes )",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT u.user_id, u.username, u.user_name\nFROM Users u\nJOIN Enrollments e ON u.user_id = e.user_id\nJOIN ClassSessions cs ON e.class_id = cs.class_id AND e.session_id = cs.session_id\nJOIN (\n    SELECT location_id\n    FROM ClassSessions\n    GROUP BY location_id\n) locs\nON cs.location_id = locs.location_id\nGROUP BY u.user_id, u.username, u.user_name\nHAVING COUNT(DISTINCT cs.location_id) = \n(\n    SELECT COUNT(DISTINCT location_id)\n    FROM ClassSessions\n);\n```",
        "prompt_token_number": 374,
        "response_token_number": 128,
        "response_text_processed": "SELECT u.user_id, u.username, u.user_name FROM Users u JOIN Enrollments e ON u.user_id = e.user_id JOIN ClassSessions cs ON e.class_id = cs.class_id AND e.session_id = cs.session_id JOIN ( SELECT location_id FROM ClassSessions GROUP BY location_id ) locs ON cs.location_id = locs.location_id GROUP BY u.user_id, u.username, u.user_name HAVING COUNT(DISTINCT cs.location_id) = ( SELECT COUNT(DISTINCT location_id) FROM ClassSessions )"
    },
    {
        "id": 34390,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment']} and \n# the user question: Find the instructors who have taught the most classes in the past month.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the instructors who have taught the most classes in the past month.",
        "output": "SELECT Instructors.instructor_name, COUNT(ClassSessions.session_id) AS num_classes FROM Instructors INNER JOIN ClassSessions ON Instructors.instructor_id = ClassSessions.instructor_id WHERE ClassSessions.session_date >= date('now', '-1 month') GROUP BY Instructors.instructor_id ORDER BY num_classes DESC;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ]
        },
        "response_text": "```sql\nSELECT \n    i.instructor_name, COUNT(cs.session_id) AS class_count\nFROM \n    Instructors i\nJOIN\n    ClassSessions cs ON i.instructor_id = cs.instructor_id\nWHERE \n    cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY \n    i.instructor_name\nORDER BY \n    class_count DESC\nLIMIT 1;\n```",
        "prompt_token_number": 170,
        "response_token_number": 84,
        "response_text_processed": "SELECT i.instructor_name, COUNT(cs.session_id) AS class_count FROM Instructors i JOIN ClassSessions cs ON i.instructor_id = cs.instructor_id WHERE cs.session_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY i.instructor_name ORDER BY class_count DESC LIMIT 1"
    },
    {
        "id": 34394,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the top 5 most popular classes based on the number of enrollments.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the top 5 most popular classes based on the number of enrollments.",
        "output": "SELECT Classes.class_name, COUNT(Enrollments.enrollment_id) AS num_enrollments FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id INNER JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id GROUP BY Classes.class_id ORDER BY num_enrollments DESC LIMIT 5;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT c.class_name, COUNT(e.enrollment_id) AS num_enrollments\nFROM Classes c\nJOIN Enrollments e ON c.class_id = e.class_id\nGROUP BY c.class_id, c.class_name\nORDER BY num_enrollments DESC\nLIMIT 5;\n```",
        "prompt_token_number": 338,
        "response_token_number": 61,
        "response_text_processed": "SELECT c.class_name, COUNT(e.enrollment_id) AS num_enrollments FROM Classes c JOIN Enrollments e ON c.class_id = e.class_id GROUP BY c.class_id, c.class_name ORDER BY num_enrollments DESC LIMIT 5"
    },
    {
        "id": 34396,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'Users': ['user_id', 'username', 'user_name', 'gender', 'status', 'skill_level', 'age', 'email', 'user_status', 'creation_date'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the users who have attended classes with at least 3 different instructors.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the users who have attended classes with at least 3 different instructors.",
        "output": "SELECT Users.user_name FROM Users INNER JOIN Enrollments ON Users.user_id = Enrollments.user_id INNER JOIN ClassSessions ON Enrollments.session_id = ClassSessions.session_id INNER JOIN Instructors ON ClassSessions.instructor_id = Instructors.instructor_id GROUP BY Users.user_id HAVING COUNT(DISTINCT Instructors.instructor_id) >= 3;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "Users": [
                "user_id",
                "username",
                "user_name",
                "gender",
                "status",
                "skill_level",
                "age",
                "email",
                "user_status",
                "creation_date"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT e.user_id\nFROM Enrollments e\nJOIN ClassSessions cs ON e.class_id = cs.class_id\nGROUP BY e.user_id\nHAVING COUNT(DISTINCT cs.instructor_id) >= 3;\n```",
        "prompt_token_number": 302,
        "response_token_number": 49,
        "response_text_processed": "SELECT e.user_id FROM Enrollments e JOIN ClassSessions cs ON e.class_id = cs.class_id GROUP BY e.user_id HAVING COUNT(DISTINCT cs.instructor_id) >= 3"
    },
    {
        "id": 34397,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time'], 'ClassSessions': ['class_id', 'session_id', 'session_date', 'instructor_id', 'session_start_time', 'session_end_time', 'location_id', 'start_time', 'end_time', 'duration_minutes', 'session_time', 'status', 'max_enrollment'], 'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date']} and \n# the user question: Find the classes that have at least one spot available for enrollment.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the classes that have at least one spot available for enrollment.",
        "output": "SELECT Classes.class_name, ClassSessions.session_date, ClassSessions.start_time FROM Classes INNER JOIN ClassSessions ON Classes.class_id = ClassSessions.class_id LEFT JOIN Enrollments ON ClassSessions.session_id = Enrollments.session_id GROUP BY ClassSessions.session_id HAVING COUNT(Enrollments.enrollment_id) < ClassSessions.max_enrollment;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ],
            "ClassSessions": [
                "class_id",
                "session_id",
                "session_date",
                "instructor_id",
                "session_start_time",
                "session_end_time",
                "location_id",
                "start_time",
                "end_time",
                "duration_minutes",
                "session_time",
                "status",
                "max_enrollment"
            ],
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ]
        },
        "response_text": "```sql\nSELECT class_name, class_id\nFROM Classes\nWHERE current_enrollment < max_capacity;\n```",
        "prompt_token_number": 335,
        "response_token_number": 22,
        "response_text_processed": "SELECT class_name, class_id FROM Classes WHERE current_enrollment < max_capacity"
    },
    {
        "id": 34401,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'exercise': ['description', 'name', 'equipment_id', 'calories_burned', 'duration', 'id', 'difficulty_level'], 'equipment': ['id', 'name', 'equipment_type', 'equipment_id', 'equipment_name']} and \n# the user question: Retrieve the names and descriptions of all Pilates exercises that require the use of a Pilates ring.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names and descriptions of all Pilates exercises that require the use of a Pilates ring.",
        "output": "SELECT name, description FROM exercise WHERE equipment_id = ( SELECT id FROM equipment WHERE name = 'Pilates Ring' );",
        "schema": "pilates",
        "processed_schema_content": {
            "exercise": [
                "description",
                "name",
                "equipment_id",
                "calories_burned",
                "duration",
                "id",
                "difficulty_level"
            ],
            "equipment": [
                "id",
                "name",
                "equipment_type",
                "equipment_id",
                "equipment_name"
            ]
        },
        "response_text": "```sql\nSELECT e.name, e.description\nFROM exercise e\nJOIN equipment eq ON e.equipment_id = eq.id\nWHERE e.name LIKE '%Pilates%' AND eq.equipment_name = 'Pilates ring';\n```",
        "prompt_token_number": 129,
        "response_token_number": 48,
        "response_text_processed": "SELECT e.name, e.description FROM exercise e JOIN equipment eq ON e.equipment_id = eq.id WHERE e.name LIKE '%Pilates%' AND eq.equipment_name = 'Pilates ring'"
    },
    {
        "id": 34407,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'workout_session': ['start_time', 'id', 'client_id', 'workout_session_type_id', 'instructor_id', 'total_cost'], 'workout_session_type': ['id', 'name', 'max_capacity', 'duration']} and \n# the user question: Calculate the total number of Pilates group classes that have been scheduled for the month of April 2023.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Calculate the total number of Pilates group classes that have been scheduled for the month of April 2023.",
        "output": "SELECT COUNT(*) as num_classes FROM workout_session WHERE workout_session_type_id = ( SELECT id FROM workout_session_type WHERE name = 'Pilates Group Class' ) AND start_time BETWEEN '2023-04-01 00:00:00' AND '2023-04-30 23:59:59';",
        "schema": "pilates",
        "processed_schema_content": {
            "workout_session": [
                "start_time",
                "id",
                "client_id",
                "workout_session_type_id",
                "instructor_id",
                "total_cost"
            ],
            "workout_session_type": [
                "id",
                "name",
                "max_capacity",
                "duration"
            ]
        },
        "response_text": "```sql\nSELECT COUNT(*) \nFROM workout_session ws\nJOIN workout_session_type wst ON ws.workout_session_type_id = wst.id\nWHERE wst.name = 'Pilates' \nAND ws.start_time BETWEEN '2023-04-01' AND '2023-04-30 23:59:59'\nAND wst.max_capacity > 1;\n```",
        "prompt_token_number": 131,
        "response_token_number": 79,
        "response_text_processed": "SELECT COUNT(*) FROM workout_session ws JOIN workout_session_type wst ON ws.workout_session_type_id = wst.id WHERE wst.name = 'Pilates' AND ws.start_time BETWEEN '2023-04-01' AND '2023-04-30 23:59:59' AND wst.max_capacity > 1"
    },
    {
        "id": 34411,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'workout_session': ['start_time', 'id', 'client_id', 'workout_session_type_id', 'instructor_id', 'total_cost'], 'workout_session_type': ['id', 'name', 'max_capacity', 'duration'], 'instructor': ['hourly_rate', 'first_name', 'last_name', 'certification', 'id', 'instructor_id', 'instructor_name', 'name']} and \n# the user question: Calculate the total number of Pilates private sessions that have been scheduled for each Pilates instructor.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Calculate the total number of Pilates private sessions that have been scheduled for each Pilates instructor.",
        "output": "SELECT i.first_name, i.last_name, COUNT(*) as num_sessions FROM instructor i INNER JOIN workout_session ws ON ws.instructor_id = i.id INNER JOIN workout_session_type wst ON wst.id = ws.workout_session_type_id WHERE wst.name = 'Pilates Private Session' GROUP BY i.id;",
        "schema": "pilates",
        "processed_schema_content": {
            "workout_session": [
                "start_time",
                "id",
                "client_id",
                "workout_session_type_id",
                "instructor_id",
                "total_cost"
            ],
            "workout_session_type": [
                "id",
                "name",
                "max_capacity",
                "duration"
            ],
            "instructor": [
                "hourly_rate",
                "first_name",
                "last_name",
                "certification",
                "id",
                "instructor_id",
                "instructor_name",
                "name"
            ]
        },
        "response_text": "```sql\nSELECT i.first_name, i.last_name, COUNT(ws.id) AS total_pilates_sessions\nFROM workout_session ws\nJOIN workout_session_type wst ON ws.workout_session_type_id = wst.id\nJOIN instructor i ON ws.instructor_id = i.id\nWHERE wst.name = 'Pilates' AND wst.max_capacity = 1\nGROUP BY i.first_name, i.last_name;\n```",
        "prompt_token_number": 165,
        "response_token_number": 88,
        "response_text_processed": "SELECT i.first_name, i.last_name, COUNT(ws.id) AS total_pilates_sessions FROM workout_session ws JOIN workout_session_type wst ON ws.workout_session_type_id = wst.id JOIN instructor i ON ws.instructor_id = i.id WHERE wst.name = 'Pilates' AND wst.max_capacity = 1 GROUP BY i.first_name, i.last_name"
    },
    {
        "id": 34413,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'workout_session': ['start_time', 'id', 'client_id', 'workout_session_type_id', 'instructor_id', 'total_cost'], 'workout_session_type': ['id', 'name', 'max_capacity', 'duration']} and \n# the user question: Retrieve the total revenue generated from Pilates group classes in the month of May 2023.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the total revenue generated from Pilates group classes in the month of May 2023.",
        "output": "SELECT SUM(total_cost) as revenue FROM workout_session WHERE workout_session_type_id = ( SELECT id FROM workout_session_type WHERE name = 'Pilates Group Class' ) AND start_time BETWEEN '2023-05-01 00:00:00' AND '2023-05-31 23:59:59';",
        "schema": "pilates",
        "processed_schema_content": {
            "workout_session": [
                "start_time",
                "id",
                "client_id",
                "workout_session_type_id",
                "instructor_id",
                "total_cost"
            ],
            "workout_session_type": [
                "id",
                "name",
                "max_capacity",
                "duration"
            ]
        },
        "response_text": "```sql\nSELECT SUM(ws.total_cost) AS total_revenue\nFROM workout_session ws\nJOIN workout_session_type wst ON ws.workout_session_type_id = wst.id\nWHERE wst.name = 'Pilates' \n  AND ws.start_time BETWEEN '2023-05-01' AND '2023-05-31';\n```",
        "prompt_token_number": 128,
        "response_token_number": 72,
        "response_text_processed": "SELECT SUM(ws.total_cost) AS total_revenue FROM workout_session ws JOIN workout_session_type wst ON ws.workout_session_type_id = wst.id WHERE wst.name = 'Pilates' AND ws.start_time BETWEEN '2023-05-01' AND '2023-05-31'"
    },
    {
        "id": 34416,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'exercise': ['description', 'name', 'equipment_id', 'calories_burned', 'duration', 'id', 'difficulty_level'], 'equipment': ['id', 'name', 'equipment_type', 'equipment_id', 'equipment_name']} and \n# the user question: Retrieve the names of all Pilates exercises that require the use of the Pilates Chair.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the names of all Pilates exercises that require the use of the Pilates Chair.",
        "output": "SELECT name FROM exercise WHERE equipment_id = ( SELECT id FROM equipment WHERE name = 'Pilates Chair' );",
        "schema": "pilates",
        "processed_schema_content": {
            "exercise": [
                "description",
                "name",
                "equipment_id",
                "calories_burned",
                "duration",
                "id",
                "difficulty_level"
            ],
            "equipment": [
                "id",
                "name",
                "equipment_type",
                "equipment_id",
                "equipment_name"
            ]
        },
        "response_text": "```sql\nSELECT e.name\nFROM exercise e\nJOIN equipment eq ON e.equipment_id = eq.id\nWHERE e.name LIKE '%Pilates%'\nAND eq.name = 'Pilates Chair';\n```",
        "prompt_token_number": 127,
        "response_token_number": 43,
        "response_text_processed": "SELECT e.name FROM exercise e JOIN equipment eq ON e.equipment_id = eq.id WHERE e.name LIKE '%Pilates%' AND eq.name = 'Pilates Chair'"
    },
    {
        "id": 34422,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'workout_session': ['start_time', 'id', 'client_id', 'workout_session_type_id', 'instructor_id', 'total_cost'], 'workout_session_type': ['id', 'name', 'max_capacity', 'duration'], 'attendance': ['workout_session_id', 'client_id', 'attendance_time']} and \n# the user question: Retrieve the average duration of Pilates private sessions that have been attended in the past week.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the average duration of Pilates private sessions that have been attended in the past week.",
        "output": "SELECT AVG(wst.duration) AS avg_duration FROM workout_session_type wst JOIN workout_session ws ON ws.workout_session_type_id = wst.id JOIN attendance a ON a.workout_session_id = ws.id WHERE wst.name LIKE '%Pilates Private Session%' AND ws.start_time BETWEEN DATE('now', 'weekday 0', '-7 days') AND DATE('now', 'localtime');",
        "schema": "pilates",
        "processed_schema_content": {
            "workout_session": [
                "start_time",
                "id",
                "client_id",
                "workout_session_type_id",
                "instructor_id",
                "total_cost"
            ],
            "workout_session_type": [
                "id",
                "name",
                "max_capacity",
                "duration"
            ],
            "attendance": [
                "workout_session_id",
                "client_id",
                "attendance_time"
            ]
        },
        "response_text": "```sql\nSELECT AVG(wst.duration) AS average_duration\nFROM workout_session ws\nJOIN workout_session_type wst ON ws.workout_session_type_id = wst.id\nJOIN attendance att ON ws.id = att.workout_session_id\nWHERE wst.name = 'Pilates' AND ws.start_time >= NOW() - INTERVAL 7 DAY;\n```",
        "prompt_token_number": 144,
        "response_token_number": 73,
        "response_text_processed": "SELECT AVG(wst.duration) AS average_duration FROM workout_session ws JOIN workout_session_type wst ON ws.workout_session_type_id = wst.id JOIN attendance att ON ws.id = att.workout_session_id WHERE wst.name = 'Pilates' AND ws.start_time >= NOW() - INTERVAL 7 DAY"
    },
    {
        "id": 34426,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time']} and \n# the user question: Show the average duration of each type of class offered at the studio.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Show the average duration of each type of class offered at the studio.",
        "output": "SELECT Classes.type, AVG(Classes.duration) AS avg_duration FROM Classes GROUP BY Classes.type;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ]
        },
        "response_text": "```sql\nSELECT class_type, AVG(duration_minutes) AS average_duration\nFROM Classes\nGROUP BY class_type;\n```",
        "prompt_token_number": 184,
        "response_token_number": 24,
        "response_text_processed": "SELECT class_type, AVG(duration_minutes) AS average_duration FROM Classes GROUP BY class_type"
    },
    {
        "id": 34431,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id']} and \n# the user question: Show the name and certification of all instructors who are not certified in either Mat Pilates or Reformer.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Show the name and certification of all instructors who are not certified in either Mat Pilates or Reformer.",
        "output": "SELECT Instructors.name, Instructors.certification FROM Instructors WHERE Instructors.certification NOT IN ('Mat Pilates', 'Reformer');",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ]
        },
        "response_text": "```sql\nSELECT name, certification\nFROM Instructors\nWHERE certification NOT IN ('Mat Pilates', 'Reformer');\n```",
        "prompt_token_number": 118,
        "response_token_number": 26,
        "response_text_processed": "SELECT name, certification FROM Instructors WHERE certification NOT IN ('Mat Pilates', 'Reformer')"
    },
    {
        "id": 34433,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time']} and \n# the user question: Find the name and duration of all classes that are longer than 60 minutes.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and duration of all classes that are longer than 60 minutes.",
        "output": "SELECT name, duration FROM Classes WHERE duration > 60;",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ]
        },
        "response_text": "```sql\nSELECT class_name AS name, duration_minutes AS duration\nFROM Classes\nWHERE duration_minutes > 60;\n```",
        "prompt_token_number": 186,
        "response_token_number": 25,
        "response_text_processed": "SELECT class_name AS name, duration_minutes AS duration FROM Classes WHERE duration_minutes > 60"
    },
    {
        "id": 34435,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Classes': ['class_name', 'end_time', 'instructor_id', 'start_time', 'class_id', 'max_capacity', 'is_available', 'location_id', 'is_cancelled', 'min_attendees', 'current_enrollment', 'reschedule_date', 'price', 'min_capacity', 'category_id', 'class_type_id', 'class_date', 'class_type', 'class_day', 'duration_minutes', 'id', 'name', 'date', 'type', 'duration', 'day_of_week', 'time']} and \n# the user question: Get the name and type of all classes that are scheduled for weekday evenings (after 5 PM).,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the name and type of all classes that are scheduled for weekday evenings (after 5 PM).",
        "output": "SELECT name, type FROM Classes WHERE day_of_week IN ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday') AND time >= TIME('17:00');",
        "schema": "pilates",
        "processed_schema_content": {
            "Classes": [
                "class_name",
                "end_time",
                "instructor_id",
                "start_time",
                "class_id",
                "max_capacity",
                "is_available",
                "location_id",
                "is_cancelled",
                "min_attendees",
                "current_enrollment",
                "reschedule_date",
                "price",
                "min_capacity",
                "category_id",
                "class_type_id",
                "class_date",
                "class_type",
                "class_day",
                "duration_minutes",
                "id",
                "name",
                "date",
                "type",
                "duration",
                "day_of_week",
                "time"
            ]
        },
        "response_text": "```sql\nSELECT name, type \nFROM Classes \nWHERE class_day IN ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday') \nAND TIME(start_time) > '17:00:00';\n```",
        "prompt_token_number": 191,
        "response_token_number": 45,
        "response_text_processed": "SELECT name, type FROM Classes WHERE class_day IN ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday') AND TIME(start_time) > '17:00:00'"
    },
    {
        "id": 34442,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Enrollments': ['user_id', 'class_id', 'plan_id', 'enrollment_date', 'enrollment_id', 'num_attendees', 'is_cancelled', 'session_id', 'status', 'enrollment_time', 'payment_amount', 'book_date', 'updated_at', 'cancellation_date', 'cancellation_reason', 'attendance_status', 'price', 'package_id', 'participant_id', 'id', 'date'], 'Participants': ['id', 'name', 'email']} and \n# the user question: Find the name and email of the participant who has attended the most classes.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the name and email of the participant who has attended the most classes.",
        "output": "SELECT Participants.name, Participants.email FROM Participants INNER JOIN Enrollments ON Participants.id = Enrollments.participant_id GROUP BY Participants.id ORDER BY COUNT(*) DESC LIMIT 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "Enrollments": [
                "user_id",
                "class_id",
                "plan_id",
                "enrollment_date",
                "enrollment_id",
                "num_attendees",
                "is_cancelled",
                "session_id",
                "status",
                "enrollment_time",
                "payment_amount",
                "book_date",
                "updated_at",
                "cancellation_date",
                "cancellation_reason",
                "attendance_status",
                "price",
                "package_id",
                "participant_id",
                "id",
                "date"
            ],
            "Participants": [
                "id",
                "name",
                "email"
            ]
        },
        "response_text": "```sql\nSELECT p.name, p.email\nFROM Participants p\nJOIN Enrollments e ON p.id = e.participant_id\nWHERE e.attendance_status = 'attended'\nGROUP BY p.id, p.name, p.email\nORDER BY COUNT(e.class_id) DESC\nLIMIT 1;\n```",
        "prompt_token_number": 178,
        "response_token_number": 62,
        "response_text_processed": "SELECT p.name, p.email FROM Participants p JOIN Enrollments e ON p.id = e.participant_id WHERE e.attendance_status = 'attended' GROUP BY p.id, p.name, p.email ORDER BY COUNT(e.class_id) DESC LIMIT 1"
    },
    {
        "id": 34445,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Instructors': ['user_id', 'instructor_id', 'created_at', 'certifications', 'bio', 'instructor_name', 'name', 'certification', 'id'], 'PilatesSessions': ['client_id', 'instructor_id', 'price']} and \n# the user question: Find the number of Pilates sessions scheduled for each instructor in the \"Instructors\" table.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of Pilates sessions scheduled for each instructor in the \"Instructors\" table.",
        "output": "SELECT i.name, COUNT(p.instructor_id) AS num_sessions FROM Instructors i LEFT JOIN PilatesSessions p ON i.instructor_id = p.instructor_id GROUP BY i.instructor_id;",
        "schema": "pilates",
        "processed_schema_content": {
            "Instructors": [
                "user_id",
                "instructor_id",
                "created_at",
                "certifications",
                "bio",
                "instructor_name",
                "name",
                "certification",
                "id"
            ],
            "PilatesSessions": [
                "client_id",
                "instructor_id",
                "price"
            ]
        },
        "response_text": "```sql\nSELECT I.instructor_id, COUNT(P.client_id) AS session_count\nFROM Instructors I\nLEFT JOIN PilatesSessions P ON I.instructor_id = P.instructor_id\nGROUP BY I.instructor_id;\n```",
        "prompt_token_number": 134,
        "response_token_number": 48,
        "response_text_processed": "SELECT I.instructor_id, COUNT(P.client_id) AS session_count FROM Instructors I LEFT JOIN PilatesSessions P ON I.instructor_id = P.instructor_id GROUP BY I.instructor_id"
    },
    {
        "id": 34457,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'instructors': ['instructor_email', 'instructor_phone', 'instructor_name', 'instructor_id', 'name', 'experience_years', 'id', 'email']} and \n# the user question: Get the names of the Pilates instructors who have more than 5 years of experience.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Get the names of the Pilates instructors who have more than 5 years of experience.",
        "output": "SELECT name FROM instructors WHERE experience_years > 5",
        "schema": "pilates",
        "processed_schema_content": {
            "instructors": [
                "instructor_email",
                "instructor_phone",
                "instructor_name",
                "instructor_id",
                "name",
                "experience_years",
                "id",
                "email"
            ]
        },
        "response_text": "```sql\nSELECT instructor_name \nFROM instructors \nWHERE experience_years > 5 \nAND name = 'Pilates';\n```",
        "prompt_token_number": 113,
        "response_token_number": 26,
        "response_text_processed": "SELECT instructor_name FROM instructors WHERE experience_years > 5 AND name = 'Pilates'"
    },
    {
        "id": 34463,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'instructors': ['instructor_email', 'instructor_phone', 'instructor_name', 'instructor_id', 'name', 'experience_years', 'id', 'email'], 'classes': ['class_time', 'class_name', 'class_day', 'class_capacity', 'class_id', 'class_price', 'class_type', 'day_of_week', 'start_time', 'attendees', 'price', 'id', 'capacity', 'name', 'instructor_id', 'day']} and \n# the user question: Find all the instructors who teach Pilates classes on Mondays.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find all the instructors who teach Pilates classes on Mondays.",
        "output": "SELECT instructors.name FROM instructors JOIN classes ON instructors.instructor_id = classes.instructor_id WHERE classes.day = 'Monday' AND classes.class_type = 'Pilates';",
        "schema": "pilates",
        "processed_schema_content": {
            "instructors": [
                "instructor_email",
                "instructor_phone",
                "instructor_name",
                "instructor_id",
                "name",
                "experience_years",
                "id",
                "email"
            ],
            "classes": [
                "class_time",
                "class_name",
                "class_day",
                "class_capacity",
                "class_id",
                "class_price",
                "class_type",
                "day_of_week",
                "start_time",
                "attendees",
                "price",
                "id",
                "capacity",
                "name",
                "instructor_id",
                "day"
            ]
        },
        "response_text": "```sql\nSELECT i.*\nFROM instructors i\nJOIN classes c ON i.instructor_id = c.instructor_id\nWHERE c.class_type = 'Pilates' AND c.day_of_week = 'Monday';\n```",
        "prompt_token_number": 171,
        "response_token_number": 44,
        "response_text_processed": "SELECT i.* FROM instructors i JOIN classes c ON i.instructor_id = c.instructor_id WHERE c.class_type = 'Pilates' AND c.day_of_week = 'Monday'"
    },
    {
        "id": 34465,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'employees': ['department_id', 'name', 'salary', 'id', 'title', 'department']} and \n# the user question: Return the name and salary of the employee with the highest salary:,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Return the name and salary of the employee with the highest salary:",
        "output": "SELECT name, salary FROM employees ORDER BY salary DESC LIMIT 1;",
        "schema": "pilates",
        "processed_schema_content": {
            "employees": [
                "department_id",
                "name",
                "salary",
                "id",
                "title",
                "department"
            ]
        },
        "response_text": "```sql\nSELECT name, salary \nFROM employees \nORDER BY salary DESC \nLIMIT 1;\n```",
        "prompt_token_number": 94,
        "response_token_number": 21,
        "response_text_processed": "SELECT name, salary FROM employees ORDER BY salary DESC LIMIT 1"
    },
    {
        "id": 34466,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'employees': ['department_id', 'name', 'salary', 'id', 'title', 'department']} and \n# the user question: Retrieve the name and salary of all employees who work in the \"Sales\" department and have a salary greater than $50,000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Retrieve the name and salary of all employees who work in the \"Sales\" department and have a salary greater than $50,000.",
        "output": "SELECT name, salary FROM employees WHERE department = 'Sales' AND salary > 50000;",
        "schema": "pilates",
        "processed_schema_content": {
            "employees": [
                "department_id",
                "name",
                "salary",
                "id",
                "title",
                "department"
            ]
        },
        "response_text": "```sql\nSELECT name, salary\nFROM employees\nWHERE department = 'Sales' AND salary > 50000;\n```",
        "prompt_token_number": 107,
        "response_token_number": 25,
        "response_text_processed": "SELECT name, salary FROM employees WHERE department = 'Sales' AND salary > 50000"
    },
    {
        "id": 34467,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'RiskMitigation': ['mitigation_id', 'risk_id', 'mitigation_name', 'description', 'effectiveness', 'due_date', 'assigned_to', 'status']} and \n# the user question: Text Query: \"Find the mitigation measures and their effectiveness for the risk with risk_id = 2.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Find the mitigation measures and their effectiveness for the risk with risk_id = 2.\"",
        "output": "SELECT mitigation_name, effectiveness FROM RiskMitigation WHERE risk_id = 2;",
        "schema": "risk_management",
        "processed_schema_content": {
            "RiskMitigation": [
                "mitigation_id",
                "risk_id",
                "mitigation_name",
                "description",
                "effectiveness",
                "due_date",
                "assigned_to",
                "status"
            ]
        },
        "response_text": "```sql\nSELECT mitigation_name, effectiveness \nFROM RiskMitigation \nWHERE risk_id = 2;\n```",
        "prompt_token_number": 116,
        "response_token_number": 22,
        "response_text_processed": "SELECT mitigation_name, effectiveness FROM RiskMitigation WHERE risk_id = 2"
    },
    {
        "id": 34469,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve the projects along with the count of associated risks for each project.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the projects along with the count of associated risks for each project.\"",
        "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id GROUP BY Projects.project_id;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ]
        },
        "response_text": "```sql\nSELECT \n    P.project_id, \n    P.project_name, \n    COUNT(R.risk_id) AS risk_count\nFROM \n    Projects P\nLEFT JOIN \n    Risks R ON P.project_id = R.project_id\nGROUP BY \n    P.project_id, \n    P.project_name;\n```",
        "prompt_token_number": 153,
        "response_token_number": 65,
        "response_text_processed": "SELECT P.project_id, P.project_name, COUNT(R.risk_id) AS risk_count FROM Projects P LEFT JOIN Risks R ON P.project_id = R.project_id GROUP BY P.project_id, P.project_name"
    },
    {
        "id": 34471,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name'], 'RiskActions': ['action_id', 'risk_id', 'action_name', 'due_date', 'assigned_to', 'status']} and \n# the user question: Text Query: \"Retrieve the risk actions assigned to employee with employee_id = 3.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the risk actions assigned to employee with employee_id = 3.\"",
        "output": "SELECT RiskActions.action_name, RiskActions.due_date, RiskActions.status FROM RiskActions INNER JOIN Employees ON RiskActions.assigned_to = Employees.employee_id WHERE Employees.employee_id = 3;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Employees": [
                "employee_id",
                "department_id",
                "first_name",
                "last_name",
                "email",
                "phone_number",
                "employee_name"
            ],
            "RiskActions": [
                "action_id",
                "risk_id",
                "action_name",
                "due_date",
                "assigned_to",
                "status"
            ]
        },
        "response_text": "```sql\nSELECT *\nFROM RiskActions\nWHERE assigned_to = 3;\n```",
        "prompt_token_number": 133,
        "response_token_number": 17,
        "response_text_processed": "SELECT * FROM RiskActions WHERE assigned_to = 3"
    },
    {
        "id": 34472,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'RiskCategories': ['category_id', 'category_name'], 'RiskCategoryMapping': ['mapping_id', 'risk_id', 'category_id']} and \n# the user question: Text Query: \"Retrieve the risk categories along with the count of associated risks for each category.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the risk categories along with the count of associated risks for each category.\"",
        "output": "SELECT RiskCategories.category_name, COUNT(RiskCategoryMapping.risk_id) AS risk_count FROM RiskCategories LEFT JOIN RiskCategoryMapping ON RiskCategories.category_id = RiskCategoryMapping.category_id GROUP BY RiskCategories.category_id;",
        "schema": "risk_management",
        "processed_schema_content": {
            "RiskCategories": [
                "category_id",
                "category_name"
            ],
            "RiskCategoryMapping": [
                "mapping_id",
                "risk_id",
                "category_id"
            ]
        },
        "response_text": "```sql\nSELECT rc.category_id, rc.category_name, COUNT(rcm.risk_id) AS risk_count\nFROM RiskCategories rc\nLEFT JOIN RiskCategoryMapping rcm ON rc.category_id = rcm.category_id\nGROUP BY rc.category_id, rc.category_name;\n```",
        "prompt_token_number": 106,
        "response_token_number": 56,
        "response_text_processed": "SELECT rc.category_id, rc.category_name, COUNT(rcm.risk_id) AS risk_count FROM RiskCategories rc LEFT JOIN RiskCategoryMapping rcm ON rc.category_id = rcm.category_id GROUP BY rc.category_id, rc.category_name"
    },
    {
        "id": 34474,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments']} and \n# the user question: Text Query: \"Retrieve the projects along with the average risk assessment score for each project.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the projects along with the average risk assessment score for each project.\"",
        "output": "SELECT Projects.project_name, AVG(RiskAssessment.assessment_score) AS average_score FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id LEFT JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id GROUP BY Projects.project_id;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ],
            "RiskAssessment": [
                "assessment_id",
                "risk_id",
                "assessment_date",
                "assessment_score",
                "comments"
            ]
        },
        "response_text": "```sql\nSELECT \n    P.project_id, \n    P.project_name, \n    AVG(RA.assessment_score) AS average_risk_assessment_score\nFROM \n    Projects P\nLEFT JOIN \n    Risks R ON P.project_id = R.project_id\nLEFT JOIN \n    RiskAssessment RA ON R.risk_id = RA.risk_id\nGROUP BY \n    P.project_id, \n    P.project_name;\n```",
        "prompt_token_number": 177,
        "response_token_number": 89,
        "response_text_processed": "SELECT P.project_id, P.project_name, AVG(RA.assessment_score) AS average_risk_assessment_score FROM Projects P LEFT JOIN Risks R ON P.project_id = R.project_id LEFT JOIN RiskAssessment RA ON R.risk_id = RA.risk_id GROUP BY P.project_id, P.project_name"
    },
    {
        "id": 34475,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name'], 'Tasks': ['task_id', 'project_id', 'task_name', 'assigned_to', 'start_date', 'end_date', 'status', 'employee_id', 'priority']} and \n# the user question: Text Query: \"Retrieve the tasks and their assigned employees for Project A.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the tasks and their assigned employees for Project A.\"",
        "output": "SELECT Tasks.task_name, Employees.first_name, Employees.last_name FROM Tasks INNER JOIN Employees ON Tasks.assigned_to = Employees.employee_id INNER JOIN Projects ON Tasks.project_id = Projects.project_id WHERE Projects.project_name = 'Project A';",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Employees": [
                "employee_id",
                "department_id",
                "first_name",
                "last_name",
                "email",
                "phone_number",
                "employee_name"
            ],
            "Tasks": [
                "task_id",
                "project_id",
                "task_name",
                "assigned_to",
                "start_date",
                "end_date",
                "status",
                "employee_id",
                "priority"
            ]
        },
        "response_text": "```sql\nSELECT T.task_name, E.employee_name\nFROM Tasks T\nJOIN Projects P ON T.project_id = P.project_id\nJOIN Employees E ON T.assigned_to = E.employee_id\nWHERE P.project_name = 'Project A';\n```",
        "prompt_token_number": 173,
        "response_token_number": 51,
        "response_text_processed": "SELECT T.task_name, E.employee_name FROM Tasks T JOIN Projects P ON T.project_id = P.project_id JOIN Employees E ON T.assigned_to = E.employee_id WHERE P.project_name = 'Project A'"
    },
    {
        "id": 34476,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskMitigation': ['mitigation_id', 'risk_id', 'mitigation_name', 'description', 'effectiveness', 'due_date', 'assigned_to', 'status'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Retrieve the risks with their associated mitigation measures and their assigned employees.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the risks with their associated mitigation measures and their assigned employees.\"",
        "output": "SELECT Risks.risk_name, RiskMitigation.mitigation_name, Employees.first_name, Employees.last_name FROM Risks INNER JOIN RiskMitigation ON Risks.risk_id = RiskMitigation.risk_id INNER JOIN Employees ON RiskMitigation.assigned_to = Employees.employee_id;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ],
            "RiskMitigation": [
                "mitigation_id",
                "risk_id",
                "mitigation_name",
                "description",
                "effectiveness",
                "due_date",
                "assigned_to",
                "status"
            ],
            "Employees": [
                "employee_id",
                "department_id",
                "first_name",
                "last_name",
                "email",
                "phone_number",
                "employee_name"
            ]
        },
        "response_text": "```sql\nSELECT \n    r.risk_id, \n    r.risk_name, \n    r.description AS risk_description, \n    r.likelihood, \n    r.impact, \n    r.status AS risk_status, \n    r.impact_score, \n    r.budget_allocation,\n    e_r.first_name AS risk_assigned_first_name, \n    e_r.last_name AS risk_assigned_last_name,\n    rm.mitigation_id, \n    rm.mitigation_name, \n    rm.description AS mitigation_description, \n    rm.effectiveness, \n    rm.due_date, \n    rm.status AS mitigation_status, \n    e_rm.first_name AS mitigation_assigned_first_name, \n    e_rm.last_name AS mitigation_assigned_last_name\nFROM \n    Risks r\nLEFT JOIN \n    Employees e_r ON r.assigned_to = e_r.employee_id\nLEFT JOIN \n    RiskMitigation rm ON r.risk_id = rm.risk_id\nLEFT JOIN \n    Employees e_rm ON rm.assigned_to = e_rm.employee_id;\n```",
        "prompt_token_number": 186,
        "response_token_number": 212,
        "response_text_processed": "SELECT r.risk_id, r.risk_name, r.description AS risk_description, r.likelihood, r.impact, r.status AS risk_status, r.impact_score, r.budget_allocation, e_r.first_name AS risk_assigned_first_name, e_r.last_name AS risk_assigned_last_name, rm.mitigation_id, rm.mitigation_name, rm.description AS mitigation_description, rm.effectiveness, rm.due_date, rm.status AS mitigation_status, e_rm.first_name AS mitigation_assigned_first_name, e_rm.last_name AS mitigation_assigned_last_name FROM Risks r LEFT JOIN Employees e_r ON r.assigned_to = e_r.employee_id LEFT JOIN RiskMitigation rm ON r.risk_id = rm.risk_id LEFT JOIN Employees e_rm ON rm.assigned_to = e_rm.employee_id"
    },
    {
        "id": 34477,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Tasks': ['task_id', 'project_id', 'task_name', 'assigned_to', 'start_date', 'end_date', 'status', 'employee_id', 'priority'], 'TaskRiskAssociation': ['task_risk_id', 'task_id', 'risk_id']} and \n# the user question: Text Query: \"Retrieve the tasks along with the count of associated risks for each task.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the tasks along with the count of associated risks for each task.\"",
        "output": "SELECT Tasks.task_name, COUNT(TaskRiskAssociation.risk_id) AS risk_count FROM Tasks LEFT JOIN TaskRiskAssociation ON Tasks.task_id = TaskRiskAssociation.task_id GROUP BY Tasks.task_id;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Tasks": [
                "task_id",
                "project_id",
                "task_name",
                "assigned_to",
                "start_date",
                "end_date",
                "status",
                "employee_id",
                "priority"
            ],
            "TaskRiskAssociation": [
                "task_risk_id",
                "task_id",
                "risk_id"
            ]
        },
        "response_text": "```sql\nSELECT T.task_id, T.task_name, COUNT(TRA.risk_id) AS risk_count\nFROM Tasks T\nLEFT JOIN TaskRiskAssociation TRA ON T.task_id = TRA.task_id\nGROUP BY T.task_id, T.task_name;\n```",
        "prompt_token_number": 132,
        "response_token_number": 55,
        "response_text_processed": "SELECT T.task_id, T.task_name, COUNT(TRA.risk_id) AS risk_count FROM Tasks T LEFT JOIN TaskRiskAssociation TRA ON T.task_id = TRA.task_id GROUP BY T.task_id, T.task_name"
    },
    {
        "id": 34478,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments']} and \n# the user question: Text Query: \"Retrieve the projects along with the count of associated risks and the maximum assessment score for each project.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the projects along with the count of associated risks and the maximum assessment score for each project.\"",
        "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count, MAX(RiskAssessment.assessment_score) AS max_score FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id LEFT JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id GROUP BY Projects.project_id;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ],
            "RiskAssessment": [
                "assessment_id",
                "risk_id",
                "assessment_date",
                "assessment_score",
                "comments"
            ]
        },
        "response_text": "```sql\nSELECT \n    P.project_id, \n    P.project_name, \n    COUNT(R.risk_id) AS risk_count, \n    MAX(RA.assessment_score) AS max_assessment_score\nFROM \n    Projects P\nLEFT JOIN \n    Risks R ON P.project_id = R.project_id\nLEFT JOIN \n    RiskAssessment RA ON R.risk_id = RA.risk_id\nGROUP BY \n    P.project_id, \n    P.project_name;\n```",
        "prompt_token_number": 182,
        "response_token_number": 99,
        "response_text_processed": "SELECT P.project_id, P.project_name, COUNT(R.risk_id) AS risk_count, MAX(RA.assessment_score) AS max_assessment_score FROM Projects P LEFT JOIN Risks R ON P.project_id = R.project_id LEFT JOIN RiskAssessment RA ON R.risk_id = RA.risk_id GROUP BY P.project_id, P.project_name"
    },
    {
        "id": 34479,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments']} and \n# the user question: Text Query: \"Retrieve the projects along with the total count of associated risks and the average assessment score for each project.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the projects along with the total count of associated risks and the average assessment score for each project.\"",
        "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count, AVG(RiskAssessment.assessment_score) AS avg_score FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id LEFT JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id GROUP BY Projects.project_id;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ],
            "RiskAssessment": [
                "assessment_id",
                "risk_id",
                "assessment_date",
                "assessment_score",
                "comments"
            ]
        },
        "response_text": "```sql\nSELECT p.project_id, p.project_name, COUNT(r.risk_id) AS total_risks, AVG(ra.assessment_score) AS average_assessment_score\nFROM Projects p\nLEFT JOIN Risks r ON p.project_id = r.project_id\nLEFT JOIN RiskAssessment ra ON r.risk_id = ra.risk_id\nGROUP BY p.project_id, p.project_name;\n```",
        "prompt_token_number": 183,
        "response_token_number": 81,
        "response_text_processed": "SELECT p.project_id, p.project_name, COUNT(r.risk_id) AS total_risks, AVG(ra.assessment_score) AS average_assessment_score FROM Projects p LEFT JOIN Risks r ON p.project_id = r.project_id LEFT JOIN RiskAssessment ra ON r.risk_id = ra.risk_id GROUP BY p.project_id, p.project_name"
    },
    {
        "id": 34480,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments']} and \n# the user question: Text Query: \"Retrieve the projects and the average assessment score for each project, sorted by the average score in descending order.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the projects and the average assessment score for each project, sorted by the average score in descending order.\"",
        "output": "SELECT Projects.project_name, AVG(RiskAssessment.assessment_score) AS average_score FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id GROUP BY Projects.project_id ORDER BY average_score DESC;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ],
            "RiskAssessment": [
                "assessment_id",
                "risk_id",
                "assessment_date",
                "assessment_score",
                "comments"
            ]
        },
        "response_text": "```sql\nSELECT p.project_name, AVG(ra.assessment_score) AS average_assessment_score\nFROM Projects p\nJOIN Risks r ON p.project_id = r.project_id\nJOIN RiskAssessment ra ON r.risk_id = ra.risk_id\nGROUP BY p.project_name\nORDER BY average_assessment_score DESC;\n```",
        "prompt_token_number": 184,
        "response_token_number": 68,
        "response_text_processed": "SELECT p.project_name, AVG(ra.assessment_score) AS average_assessment_score FROM Projects p JOIN Risks r ON p.project_id = r.project_id JOIN RiskAssessment ra ON r.risk_id = ra.risk_id GROUP BY p.project_name ORDER BY average_assessment_score DESC"
    },
    {
        "id": 34481,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve the projects and the count of associated risks, sorted by the risk count in descending order.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the projects and the count of associated risks, sorted by the risk count in descending order.\"",
        "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id GROUP BY Projects.project_id ORDER BY risk_count DESC;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ]
        },
        "response_text": "```sql\nSELECT p.project_id, p.project_name, COUNT(r.risk_id) AS risk_count\nFROM Projects p\nLEFT JOIN Risks r ON p.project_id = r.project_id\nGROUP BY p.project_id, p.project_name\nORDER BY risk_count DESC;\n```",
        "prompt_token_number": 158,
        "response_token_number": 57,
        "response_text_processed": "SELECT p.project_id, p.project_name, COUNT(r.risk_id) AS risk_count FROM Projects p LEFT JOIN Risks r ON p.project_id = r.project_id GROUP BY p.project_id, p.project_name ORDER BY risk_count DESC"
    },
    {
        "id": 34482,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Tasks': ['task_id', 'project_id', 'task_name', 'assigned_to', 'start_date', 'end_date', 'status', 'employee_id', 'priority']} and \n# the user question: Text Query: \"Retrieve the projects and the total count of associated tasks, sorted by the task count in descending order.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the projects and the total count of associated tasks, sorted by the task count in descending order.\"",
        "output": "SELECT Projects.project_name, COUNT(Tasks.task_id) AS task_count FROM Projects LEFT JOIN Tasks ON Projects.project_id = Tasks.project_id GROUP BY Projects.project_id ORDER BY task_count DESC;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Tasks": [
                "task_id",
                "project_id",
                "task_name",
                "assigned_to",
                "start_date",
                "end_date",
                "status",
                "employee_id",
                "priority"
            ]
        },
        "response_text": "```sql\nSELECT Projects.project_id, Projects.project_name, COUNT(Tasks.task_id) AS task_count\nFROM Projects\nLEFT JOIN Tasks ON Projects.project_id = Tasks.project_id\nGROUP BY Projects.project_id, Projects.project_name\nORDER BY task_count DESC;\n```",
        "prompt_token_number": 152,
        "response_token_number": 54,
        "response_text_processed": "SELECT Projects.project_id, Projects.project_name, COUNT(Tasks.task_id) AS task_count FROM Projects LEFT JOIN Tasks ON Projects.project_id = Tasks.project_id GROUP BY Projects.project_id, Projects.project_name ORDER BY task_count DESC"
    },
    {
        "id": 34483,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve the projects and the total count of associated risks, sorted by the risk count in ascending order.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the projects and the total count of associated risks, sorted by the risk count in ascending order.\"",
        "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id GROUP BY Projects.project_id ORDER BY risk_count ASC;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ]
        },
        "response_text": "```sql\nSELECT p.project_id, p.project_name, COUNT(r.risk_id) AS risk_count\nFROM Projects p\nLEFT JOIN Risks r ON p.project_id = r.project_id\nGROUP BY p.project_id, p.project_name\nORDER BY risk_count ASC;\n```",
        "prompt_token_number": 159,
        "response_token_number": 57,
        "response_text_processed": "SELECT p.project_id, p.project_name, COUNT(r.risk_id) AS risk_count FROM Projects p LEFT JOIN Risks r ON p.project_id = r.project_id GROUP BY p.project_id, p.project_name ORDER BY risk_count ASC"
    },
    {
        "id": 34484,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve the projects and the count of associated risks, sorted by the risk count in descending order, for projects with a start date in the last 6 months.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the projects and the count of associated risks, sorted by the risk count in descending order, for projects with a start date in the last 6 months.\"",
        "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id WHERE Projects.start_date >= DATE('now', '-6 months') GROUP BY Projects.project_id ORDER BY risk_count DESC;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ]
        },
        "response_text": "```sql\nSELECT P.project_id, P.project_name, COUNT(R.risk_id) AS risk_count\nFROM Projects P\nLEFT JOIN Risks R ON P.project_id = R.project_id\nWHERE P.start_date >= DATEADD(month, -6, GETDATE())\nGROUP BY P.project_id, P.project_name\nORDER BY risk_count DESC;\n```",
        "prompt_token_number": 171,
        "response_token_number": 72,
        "response_text_processed": "SELECT P.project_id, P.project_name, COUNT(R.risk_id) AS risk_count FROM Projects P LEFT JOIN Risks R ON P.project_id = R.project_id WHERE P.start_date >= DATEADD(month, -6, GETDATE()) GROUP BY P.project_id, P.project_name ORDER BY risk_count DESC"
    },
    {
        "id": 34485,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Tasks': ['task_id', 'project_id', 'task_name', 'assigned_to', 'start_date', 'end_date', 'status', 'employee_id', 'priority']} and \n# the user question: Text Query: \"Retrieve the projects and the total count of associated tasks, sorted by the task count in descending order, for projects with a status of 'In Progress'.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the projects and the total count of associated tasks, sorted by the task count in descending order, for projects with a status of 'In Progress'.\"",
        "output": "SELECT Projects.project_name, COUNT(Tasks.task_id) AS task_count FROM Projects LEFT JOIN Tasks ON Projects.project_id = Tasks.project_id WHERE Projects.status = 'In Progress' GROUP BY Projects.project_id ORDER BY task_count DESC;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Tasks": [
                "task_id",
                "project_id",
                "task_name",
                "assigned_to",
                "start_date",
                "end_date",
                "status",
                "employee_id",
                "priority"
            ]
        },
        "response_text": "```sql\nSELECT p.project_id, p.project_name, COUNT(t.task_id) AS task_count\nFROM Projects p\nJOIN Tasks t ON p.project_id = t.project_id\nWHERE p.status = 'In Progress'\nGROUP BY p.project_id, p.project_name\nORDER BY task_count DESC;\n```",
        "prompt_token_number": 163,
        "response_token_number": 62,
        "response_text_processed": "SELECT p.project_id, p.project_name, COUNT(t.task_id) AS task_count FROM Projects p JOIN Tasks t ON p.project_id = t.project_id WHERE p.status = 'In Progress' GROUP BY p.project_id, p.project_name ORDER BY task_count DESC"
    },
    {
        "id": 34486,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve the projects and the count of associated risks, sorted by the risk count in ascending order, for projects with a status of 'Completed'.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the projects and the count of associated risks, sorted by the risk count in ascending order, for projects with a status of 'Completed'.\"",
        "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id WHERE Projects.status = 'Completed' GROUP BY Projects.project_id ORDER BY risk_count ASC;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ]
        },
        "response_text": "```sql\nSELECT p.project_id, p.project_name, COUNT(r.risk_id) AS risk_count\nFROM Projects p\nLEFT JOIN Risks r ON p.project_id = r.project_id\nWHERE p.status = 'Completed'\nGROUP BY p.project_id, p.project_name\nORDER BY risk_count ASC;\n```",
        "prompt_token_number": 168,
        "response_token_number": 64,
        "response_text_processed": "SELECT p.project_id, p.project_name, COUNT(r.risk_id) AS risk_count FROM Projects p LEFT JOIN Risks r ON p.project_id = r.project_id WHERE p.status = 'Completed' GROUP BY p.project_id, p.project_name ORDER BY risk_count ASC"
    },
    {
        "id": 34487,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve the projects and the total count of associated risks, sorted by the risk count in descending order, for projects with a status of 'In Progress'.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the projects and the total count of associated risks, sorted by the risk count in descending order, for projects with a status of 'In Progress'.\"",
        "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id WHERE Projects.status = 'In Progress' GROUP BY Projects.project_id ORDER BY risk_count DESC;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ]
        },
        "response_text": "```sql\nSELECT \n    p.project_name, \n    COUNT(r.risk_id) AS risk_count\nFROM \n    Projects p\nLEFT JOIN \n    Risks r ON p.project_id = r.project_id\nWHERE \n    p.status = 'In Progress'\nGROUP BY \n    p.project_name\nORDER BY \n    risk_count DESC;\n```",
        "prompt_token_number": 170,
        "response_token_number": 71,
        "response_text_processed": "SELECT p.project_name, COUNT(r.risk_id) AS risk_count FROM Projects p LEFT JOIN Risks r ON p.project_id = r.project_id WHERE p.status = 'In Progress' GROUP BY p.project_name ORDER BY risk_count DESC"
    },
    {
        "id": 34488,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve the projects and the count of associated risks, sorted by the risk count in descending order, for projects with a status of 'In Progress'.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the projects and the count of associated risks, sorted by the risk count in descending order, for projects with a status of 'In Progress'.\"",
        "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id WHERE Projects.status = 'In Progress' GROUP BY Projects.project_id ORDER BY risk_count DESC;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ]
        },
        "response_text": "```sql\nSELECT p.project_id, p.project_name, COUNT(r.risk_id) AS risk_count\nFROM Projects p\nLEFT JOIN Risks r ON p.project_id = r.project_id\nWHERE p.status = 'In Progress'\nGROUP BY p.project_id, p.project_name\nORDER BY risk_count DESC;\n```",
        "prompt_token_number": 169,
        "response_token_number": 65,
        "response_text_processed": "SELECT p.project_id, p.project_name, COUNT(r.risk_id) AS risk_count FROM Projects p LEFT JOIN Risks r ON p.project_id = r.project_id WHERE p.status = 'In Progress' GROUP BY p.project_id, p.project_name ORDER BY risk_count DESC"
    },
    {
        "id": 34489,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Tasks': ['task_id', 'project_id', 'task_name', 'assigned_to', 'start_date', 'end_date', 'status', 'employee_id', 'priority']} and \n# the user question: Text Query: \"Retrieve the projects and the total count of associated tasks, sorted by the task count in descending order, for projects with a start date in the last 6 months.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the projects and the total count of associated tasks, sorted by the task count in descending order, for projects with a start date in the last 6 months.\"",
        "output": "SELECT Projects.project_name, COUNT(Tasks.task_id) AS task_count FROM Projects LEFT JOIN Tasks ON Projects.project_id = Tasks.project_id WHERE Projects.start_date >= DATE('now', '-6 months') GROUP BY Projects.project_id ORDER BY task_count DESC;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Tasks": [
                "task_id",
                "project_id",
                "task_name",
                "assigned_to",
                "start_date",
                "end_date",
                "status",
                "employee_id",
                "priority"
            ]
        },
        "response_text": "```sql\nSELECT \n    p.project_id, \n    p.project_name, \n    COUNT(t.task_id) AS task_count\nFROM \n    Projects p\nLEFT JOIN \n    Tasks t ON p.project_id = t.project_id\nWHERE \n    p.start_date >= DATEADD(month, -6, GETDATE())\nGROUP BY \n    p.project_id, p.project_name\nORDER BY \n    task_count DESC;\n```",
        "prompt_token_number": 165,
        "response_token_number": 86,
        "response_text_processed": "SELECT p.project_id, p.project_name, COUNT(t.task_id) AS task_count FROM Projects p LEFT JOIN Tasks t ON p.project_id = t.project_id WHERE p.start_date >= DATEADD(month, -6, GETDATE()) GROUP BY p.project_id, p.project_name ORDER BY task_count DESC"
    },
    {
        "id": 34490,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Tasks': ['task_id', 'project_id', 'task_name', 'assigned_to', 'start_date', 'end_date', 'status', 'employee_id', 'priority']} and \n# the user question: Text Query: \"Retrieve the projects and the count of associated tasks, sorted by the task count in descending order, for projects with a status of 'In Progress'.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the projects and the count of associated tasks, sorted by the task count in descending order, for projects with a status of 'In Progress'.\"",
        "output": "SELECT Projects.project_name, COUNT(Tasks.task_id) AS task_count FROM Projects LEFT JOIN Tasks ON Projects.project_id = Tasks.project_id WHERE Projects.status = 'In Progress' GROUP BY Projects.project_id ORDER BY task_count DESC;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Tasks": [
                "task_id",
                "project_id",
                "task_name",
                "assigned_to",
                "start_date",
                "end_date",
                "status",
                "employee_id",
                "priority"
            ]
        },
        "response_text": "```sql\nSELECT p.project_id, p.project_name, COUNT(t.task_id) AS task_count\nFROM Projects p\nLEFT JOIN Tasks t ON p.project_id = t.project_id\nWHERE p.status = 'In Progress'\nGROUP BY p.project_id, p.project_name\nORDER BY task_count DESC;\n```",
        "prompt_token_number": 162,
        "response_token_number": 63,
        "response_text_processed": "SELECT p.project_id, p.project_name, COUNT(t.task_id) AS task_count FROM Projects p LEFT JOIN Tasks t ON p.project_id = t.project_id WHERE p.status = 'In Progress' GROUP BY p.project_id, p.project_name ORDER BY task_count DESC"
    },
    {
        "id": 34491,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Find the projects that have at least one risk with a status of 'Open' and retrieve the project name, risk count, and the total impact score of all associated risks.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Find the projects that have at least one risk with a status of 'Open' and retrieve the project name, risk count, and the total impact score of all associated risks.\"",
        "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS risk_count, SUM(Risks.impact_score) AS total_impact_score FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id WHERE Risks.status = 'Open' GROUP BY Projects.project_id;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ]
        },
        "response_text": "```sql\nSELECT P.project_name, COUNT(R.risk_id) AS risk_count, SUM(R.impact_score) AS total_impact_score\nFROM Projects P\nJOIN Risks R ON P.project_id = R.project_id\nWHERE R.status = 'Open'\nGROUP BY P.project_id, P.project_name;\n```",
        "prompt_token_number": 174,
        "response_token_number": 65,
        "response_text_processed": "SELECT P.project_name, COUNT(R.risk_id) AS risk_count, SUM(R.impact_score) AS total_impact_score FROM Projects P JOIN Risks R ON P.project_id = R.project_id WHERE R.status = 'Open' GROUP BY P.project_id, P.project_name"
    },
    {
        "id": 34492,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Retrieve the risks with an assessment score greater than 8 and retrieve the associated project name and the assigned employee's name.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the risks with an assessment score greater than 8 and retrieve the associated project name and the assigned employee's name.\"",
        "output": "SELECT Risks.risk_name, Projects.project_name, Employees.employee_name FROM Risks INNER JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id INNER JOIN Projects ON Risks.project_id = Projects.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id WHERE RiskAssessment.assessment_score > 8;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ],
            "RiskAssessment": [
                "assessment_id",
                "risk_id",
                "assessment_date",
                "assessment_score",
                "comments"
            ],
            "Employees": [
                "employee_id",
                "department_id",
                "first_name",
                "last_name",
                "email",
                "phone_number",
                "employee_name"
            ]
        },
        "response_text": "```sql\nSELECT \n    Risks.risk_name, \n    Projects.project_name, \n    Employees.employee_name\nFROM \n    Risks\nJOIN \n    Projects ON Risks.project_id = Projects.project_id\nJOIN \n    Employees ON Risks.assigned_to = Employees.employee_id\nJOIN \n    RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id\nWHERE \n    RiskAssessment.assessment_score > 8;\n```",
        "prompt_token_number": 217,
        "response_token_number": 93,
        "response_text_processed": "SELECT Risks.risk_name, Projects.project_name, Employees.employee_name FROM Risks JOIN Projects ON Risks.project_id = Projects.project_id JOIN Employees ON Risks.assigned_to = Employees.employee_id JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id WHERE RiskAssessment.assessment_score > 8"
    },
    {
        "id": 34493,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Find the projects that have risks with an impact score greater than 9 and retrieve the project name and the total number of associated risks.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Find the projects that have risks with an impact score greater than 9 and retrieve the project name and the total number of associated risks.\"",
        "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS total_risks FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id WHERE Risks.impact_score > 9 GROUP BY Projects.project_id;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ]
        },
        "response_text": "```sql\nSELECT P.project_name, COUNT(R.risk_id) AS total_risks\nFROM Projects P\nJOIN Risks R ON P.project_id = R.project_id\nWHERE R.impact_score > 9\nGROUP BY P.project_id, P.project_name;\n```",
        "prompt_token_number": 166,
        "response_token_number": 56,
        "response_text_processed": "SELECT P.project_name, COUNT(R.risk_id) AS total_risks FROM Projects P JOIN Risks R ON P.project_id = R.project_id WHERE R.impact_score > 9 GROUP BY P.project_id, P.project_name"
    },
    {
        "id": 34494,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Retrieve the risks with an assessment score greater than 7 and retrieve the associated project name and the assigned employee's name.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the risks with an assessment score greater than 7 and retrieve the associated project name and the assigned employee's name.\"",
        "output": "SELECT Risks.risk_name, Projects.project_name, Employees.employee_name FROM Risks INNER JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id INNER JOIN Projects ON Risks.project_id = Projects.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id WHERE RiskAssessment.assessment_score > 7;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ],
            "RiskAssessment": [
                "assessment_id",
                "risk_id",
                "assessment_date",
                "assessment_score",
                "comments"
            ],
            "Employees": [
                "employee_id",
                "department_id",
                "first_name",
                "last_name",
                "email",
                "phone_number",
                "employee_name"
            ]
        },
        "response_text": "```sql\nSELECT \n    r.risk_name, \n    p.project_name, \n    e.employee_name\nFROM \n    Risks r\nJOIN \n    RiskAssessment ra ON r.risk_id = ra.risk_id\nJOIN \n    Projects p ON r.project_id = p.project_id\nJOIN \n    Employees e ON r.assigned_to = e.employee_id\nWHERE \n    ra.assessment_score > 7;\n```",
        "prompt_token_number": 217,
        "response_token_number": 89,
        "response_text_processed": "SELECT r.risk_name, p.project_name, e.employee_name FROM Risks r JOIN RiskAssessment ra ON r.risk_id = ra.risk_id JOIN Projects p ON r.project_id = p.project_id JOIN Employees e ON r.assigned_to = e.employee_id WHERE ra.assessment_score > 7"
    },
    {
        "id": 34495,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Find the projects that have risks with an impact of 'High' or an impact score greater than 8, and retrieve the project name and the assigned employee's name.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Find the projects that have risks with an impact of 'High' or an impact score greater than 8, and retrieve the project name and the assigned employee's name.\"",
        "output": "SELECT Projects.project_name, Employees.employee_name FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id WHERE Risks.impact = 'High' OR Risks.impact_score > 8;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ],
            "Employees": [
                "employee_id",
                "department_id",
                "first_name",
                "last_name",
                "email",
                "phone_number",
                "employee_name"
            ]
        },
        "response_text": "```sql\nSELECT p.project_name, e.employee_name\nFROM Projects p\nJOIN Risks r ON p.project_id = r.project_id\nJOIN Employees e ON p.assigned_to = e.employee_id\nWHERE r.impact = 'High' OR r.impact_score > 8;\n```",
        "prompt_token_number": 203,
        "response_token_number": 60,
        "response_text_processed": "SELECT p.project_name, e.employee_name FROM Projects p JOIN Risks r ON p.project_id = r.project_id JOIN Employees e ON p.assigned_to = e.employee_id WHERE r.impact = 'High' OR r.impact_score > 8"
    },
    {
        "id": 34496,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Find the projects that have risks with a likelihood of 'High' and retrieve the project name and the total number of associated risks.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Find the projects that have risks with a likelihood of 'High' and retrieve the project name and the total number of associated risks.\"",
        "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS total_risks FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id WHERE Risks.likelihood = 'High' GROUP BY Projects.project_id;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ]
        },
        "response_text": "```sql\nSELECT p.project_name, COUNT(r.risk_id) AS total_risks\nFROM Projects p\nJOIN Risks r ON p.project_id = r.project_id\nWHERE r.likelihood = 'High'\nGROUP BY p.project_name;\n```",
        "prompt_token_number": 165,
        "response_token_number": 51,
        "response_text_processed": "SELECT p.project_name, COUNT(r.risk_id) AS total_risks FROM Projects p JOIN Risks r ON p.project_id = r.project_id WHERE r.likelihood = 'High' GROUP BY p.project_name"
    },
    {
        "id": 34497,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Find the projects that have risks with a likelihood of 'Medium' and retrieve the project name and the number of associated risks.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Find the projects that have risks with a likelihood of 'Medium' and retrieve the project name and the number of associated risks.\"",
        "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS total_risks FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id WHERE Risks.likelihood = 'Medium' GROUP BY Projects.project_name;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ]
        },
        "response_text": "```sql\nSELECT p.project_name, COUNT(r.risk_id) AS number_of_risks\nFROM Projects p\nJOIN Risks r ON p.project_id = r.project_id\nWHERE r.likelihood = 'Medium'\nGROUP BY p.project_id, p.project_name;\n```",
        "prompt_token_number": 164,
        "response_token_number": 56,
        "response_text_processed": "SELECT p.project_name, COUNT(r.risk_id) AS number_of_risks FROM Projects p JOIN Risks r ON p.project_id = r.project_id WHERE r.likelihood = 'Medium' GROUP BY p.project_id, p.project_name"
    },
    {
        "id": 34498,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Find the projects that have risks with a likelihood of 'High' and an impact score greater than 7, and retrieve the project name and the assigned employee's name.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Find the projects that have risks with a likelihood of 'High' and an impact score greater than 7, and retrieve the project name and the assigned employee's name.\"",
        "output": "SELECT Projects.project_name, Employees.employee_name FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id WHERE Risks.likelihood = 'High' AND Risks.impact_score > 7;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ],
            "Employees": [
                "employee_id",
                "department_id",
                "first_name",
                "last_name",
                "email",
                "phone_number",
                "employee_name"
            ]
        },
        "response_text": "```sql\nSELECT p.project_name, e.employee_name\nFROM Projects p\nJOIN Risks r ON p.project_id = r.project_id\nJOIN Employees e ON p.assigned_to = e.employee_id\nWHERE r.likelihood = 'High' AND r.impact_score > 7;\n```",
        "prompt_token_number": 203,
        "response_token_number": 60,
        "response_text_processed": "SELECT p.project_name, e.employee_name FROM Projects p JOIN Risks r ON p.project_id = r.project_id JOIN Employees e ON p.assigned_to = e.employee_id WHERE r.likelihood = 'High' AND r.impact_score > 7"
    },
    {
        "id": 34499,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Find the projects that have risks with an impact score greater than 8 and retrieve the project name, the assigned employee's name, and the highest assessment score among the associated risks.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Find the projects that have risks with an impact score greater than 8 and retrieve the project name, the assigned employee's name, and the highest assessment score among the associated risks.\"",
        "output": "SELECT Projects.project_name, Employees.employee_name, MAX(RiskAssessment.assessment_score) AS highest_assessment_score FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id INNER JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id WHERE Risks.impact_score > 8 GROUP BY Projects.project_id;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ],
            "RiskAssessment": [
                "assessment_id",
                "risk_id",
                "assessment_date",
                "assessment_score",
                "comments"
            ],
            "Employees": [
                "employee_id",
                "department_id",
                "first_name",
                "last_name",
                "email",
                "phone_number",
                "employee_name"
            ]
        },
        "response_text": "```sql\nSELECT p.project_name, e.employee_name, MAX(ra.assessment_score) AS highest_assessment_score\nFROM Projects p\nJOIN Risks r ON p.project_id = r.project_id\nJOIN Employees e ON p.assigned_to = e.employee_id\nJOIN RiskAssessment ra ON r.risk_id = ra.risk_id\nWHERE r.impact_score > 8\nGROUP BY p.project_name, e.employee_name;\n```",
        "prompt_token_number": 229,
        "response_token_number": 90,
        "response_text_processed": "SELECT p.project_name, e.employee_name, MAX(ra.assessment_score) AS highest_assessment_score FROM Projects p JOIN Risks r ON p.project_id = r.project_id JOIN Employees e ON p.assigned_to = e.employee_id JOIN RiskAssessment ra ON r.risk_id = ra.risk_id WHERE r.impact_score > 8 GROUP BY p.project_name, e.employee_name"
    },
    {
        "id": 34500,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments']} and \n# the user question: Text Query: \"Find the projects that have risks with a likelihood of 'Low' and an impact of 'Moderate', and retrieve the project name, the total number of associated risks, and the average assessment score.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Find the projects that have risks with a likelihood of 'Low' and an impact of 'Moderate', and retrieve the project name, the total number of associated risks, and the average assessment score.\"",
        "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS total_risks, AVG(RiskAssessment.assessment_score) AS average_assessment_score FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id WHERE Risks.likelihood = 'Low' AND Risks.impact = 'Moderate' GROUP BY Projects.project_id;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ],
            "RiskAssessment": [
                "assessment_id",
                "risk_id",
                "assessment_date",
                "assessment_score",
                "comments"
            ]
        },
        "response_text": "```sql\nSELECT \n    P.project_name, \n    COUNT(R.risk_id) AS total_risks, \n    AVG(RA.assessment_score) AS avg_assessment_score\nFROM \n    Projects P\nJOIN \n    Risks R ON P.project_id = R.project_id\nJOIN \n    RiskAssessment RA ON R.risk_id = RA.risk_id\nWHERE \n    R.likelihood = 'Low' \n    AND R.impact = 'Moderate'\nGROUP BY \n    P.project_name;\n```",
        "prompt_token_number": 203,
        "response_token_number": 107,
        "response_text_processed": "SELECT P.project_name, COUNT(R.risk_id) AS total_risks, AVG(RA.assessment_score) AS avg_assessment_score FROM Projects P JOIN Risks R ON P.project_id = R.project_id JOIN RiskAssessment RA ON R.risk_id = RA.risk_id WHERE R.likelihood = 'Low' AND R.impact = 'Moderate' GROUP BY P.project_name"
    },
    {
        "id": 34501,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Retrieve the risks that are associated with projects that have a status of 'In Progress' or 'Delayed', and retrieve the project name, the risk name, and the assigned employee's name.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the risks that are associated with projects that have a status of 'In Progress' or 'Delayed', and retrieve the project name, the risk name, and the assigned employee's name.\"",
        "output": "SELECT Projects.project_name, Risks.risk_name, Employees.employee_name FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id WHERE Projects.status = 'In Progress' OR Projects.status = 'Delayed';",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ],
            "Employees": [
                "employee_id",
                "department_id",
                "first_name",
                "last_name",
                "email",
                "phone_number",
                "employee_name"
            ]
        },
        "response_text": "```sql\nSELECT P.project_name, R.risk_name, E.employee_name\nFROM Risks R\nJOIN Projects P ON R.project_id = P.project_id\nJOIN Employees E ON R.assigned_to = E.employee_id\nWHERE P.status IN ('In Progress', 'Delayed');\n```",
        "prompt_token_number": 207,
        "response_token_number": 59,
        "response_text_processed": "SELECT P.project_name, R.risk_name, E.employee_name FROM Risks R JOIN Projects P ON R.project_id = P.project_id JOIN Employees E ON R.assigned_to = E.employee_id WHERE P.status IN ('In Progress', 'Delayed')"
    },
    {
        "id": 34503,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments']} and \n# the user question: Text Query: \"Find the projects that have risks with a likelihood of 'High' and an impact of 'Critical', and retrieve the project name, the total number of associated risks, and the highest assessment score among them.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Find the projects that have risks with a likelihood of 'High' and an impact of 'Critical', and retrieve the project name, the total number of associated risks, and the highest assessment score among them.\"",
        "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS total_risks, MAX(RiskAssessment.assessment_score) AS highest_assessment_score FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id WHERE Risks.likelihood = 'High' AND Risks.impact = 'Critical' GROUP BY Projects.project_name;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ],
            "RiskAssessment": [
                "assessment_id",
                "risk_id",
                "assessment_date",
                "assessment_score",
                "comments"
            ]
        },
        "response_text": "```sql\nSELECT \n    P.project_name, \n    COUNT(R.risk_id) AS total_risks, \n    MAX(RA.assessment_score) AS highest_assessment_score\nFROM \n    Projects P\nJOIN \n    Risks R ON P.project_id = R.project_id\nJOIN \n    RiskAssessment RA ON R.risk_id = RA.risk_id\nWHERE \n    R.likelihood = 'High' \n    AND R.impact = 'Critical'\nGROUP BY \n    P.project_id\nORDER BY \n    P.project_name;\n```",
        "prompt_token_number": 204,
        "response_token_number": 114,
        "response_text_processed": "SELECT P.project_name, COUNT(R.risk_id) AS total_risks, MAX(RA.assessment_score) AS highest_assessment_score FROM Projects P JOIN Risks R ON P.project_id = R.project_id JOIN RiskAssessment RA ON R.risk_id = RA.risk_id WHERE R.likelihood = 'High' AND R.impact = 'Critical' GROUP BY P.project_id ORDER BY P.project_name"
    },
    {
        "id": 34504,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Find the projects that have risks with an impact of 'High' or a likelihood of 'Medium', and retrieve the project name and the assigned employee's name.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Find the projects that have risks with an impact of 'High' or a likelihood of 'Medium', and retrieve the project name and the assigned employee's name.\"",
        "output": "SELECT Projects.project_name, Employees.employee_name FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id WHERE Risks.impact = 'High' OR Risks.likelihood = 'Medium';",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ],
            "Employees": [
                "employee_id",
                "department_id",
                "first_name",
                "last_name",
                "email",
                "phone_number",
                "employee_name"
            ]
        },
        "response_text": "```sql\nSELECT p.project_name, e.employee_name\nFROM Projects p\nJOIN Risks r ON p.project_id = r.project_id\nJOIN Employees e ON p.assigned_to = e.employee_id\nWHERE r.impact = 'High' OR r.likelihood = 'Medium';\n```",
        "prompt_token_number": 201,
        "response_token_number": 59,
        "response_text_processed": "SELECT p.project_name, e.employee_name FROM Projects p JOIN Risks r ON p.project_id = r.project_id JOIN Employees e ON p.assigned_to = e.employee_id WHERE r.impact = 'High' OR r.likelihood = 'Medium'"
    },
    {
        "id": 34506,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve all projects along with the total count of risks associated with each project.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve all projects along with the total count of risks associated with each project.\"",
        "output": "SELECT Projects.project_id, Projects.project_name, COUNT(Risks.risk_id) AS total_risks FROM Projects LEFT JOIN Risks ON Projects.project_id = Risks.project_id GROUP BY Projects.project_id, Projects.project_name;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ]
        },
        "response_text": "```sql\nSELECT p.project_id, p.project_name, COUNT(r.risk_id) AS total_risks\nFROM Projects p\nLEFT JOIN Risks r ON p.project_id = r.project_id\nGROUP BY p.project_id, p.project_name;\n```",
        "prompt_token_number": 154,
        "response_token_number": 52,
        "response_text_processed": "SELECT p.project_id, p.project_name, COUNT(r.risk_id) AS total_risks FROM Projects p LEFT JOIN Risks r ON p.project_id = r.project_id GROUP BY p.project_id, p.project_name"
    },
    {
        "id": 34507,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Find the risks that have an impact of 'High' and retrieve the project name, the risk description, and the assigned employee's name.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Find the risks that have an impact of 'High' and retrieve the project name, the risk description, and the assigned employee's name.\"",
        "output": "SELECT Projects.project_name, Risks.risk_description, Employees.employee_name FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id WHERE Risks.impact = 'High';",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ],
            "Employees": [
                "employee_id",
                "department_id",
                "first_name",
                "last_name",
                "email",
                "phone_number",
                "employee_name"
            ]
        },
        "response_text": "```sql\nSELECT p.project_name, r.risk_description, e.employee_name\nFROM Risks r\nJOIN Projects p ON r.project_id = p.project_id\nJOIN Employees e ON r.assigned_to = e.employee_id\nWHERE r.impact = 'High';\n```",
        "prompt_token_number": 197,
        "response_token_number": 56,
        "response_text_processed": "SELECT p.project_name, r.risk_description, e.employee_name FROM Risks r JOIN Projects p ON r.project_id = p.project_id JOIN Employees e ON r.assigned_to = e.employee_id WHERE r.impact = 'High'"
    },
    {
        "id": 34508,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation']} and \n# the user question: Text Query: \"Retrieve the projects that have risks with an impact score greater than 7 and sort them in descending order based on the number of associated risks.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Retrieve the projects that have risks with an impact score greater than 7 and sort them in descending order based on the number of associated risks.\"",
        "output": "SELECT Projects.project_id, Projects.project_name, COUNT(Risks.risk_id) AS total_risks FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id WHERE Risks.impact_score > 7 GROUP BY Projects.project_id, Projects.project_name ORDER BY total_risks DESC;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ]
        },
        "response_text": "```sql\nSELECT P.project_id, P.project_name, COUNT(R.risk_id) AS risk_count\nFROM Projects P\nJOIN Risks R ON P.project_id = R.project_id\nWHERE R.impact_score > 7\nGROUP BY P.project_id, P.project_name\nORDER BY risk_count DESC;\n```",
        "prompt_token_number": 167,
        "response_token_number": 65,
        "response_text_processed": "SELECT P.project_id, P.project_name, COUNT(R.risk_id) AS risk_count FROM Projects P JOIN Risks R ON P.project_id = R.project_id WHERE R.impact_score > 7 GROUP BY P.project_id, P.project_name ORDER BY risk_count DESC"
    },
    {
        "id": 34509,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'Employees': ['employee_id', 'department_id', 'first_name', 'last_name', 'email', 'phone_number', 'employee_name']} and \n# the user question: Text Query: \"Find the projects that have risks with an impact score greater than 7, and retrieve the project name, the assigned employee's name, and the total budget allocated to those risks.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Find the projects that have risks with an impact score greater than 7, and retrieve the project name, the assigned employee's name, and the total budget allocated to those risks.\"",
        "output": "SELECT Projects.project_name, Employees.employee_name, SUM(Risks.budget_allocation) AS total_budget FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN Employees ON Risks.assigned_to = Employees.employee_id WHERE Risks.impact_score > 7 GROUP BY Projects.project_name;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ],
            "Employees": [
                "employee_id",
                "department_id",
                "first_name",
                "last_name",
                "email",
                "phone_number",
                "employee_name"
            ]
        },
        "response_text": "```sql\nSELECT \n    p.project_name, \n    e.employee_name, \n    SUM(r.budget_allocation) AS total_budget_allocated\nFROM \n    Projects p\nJOIN \n    Risks r ON p.project_id = r.project_id\nJOIN \n    Employees e ON p.assigned_to = e.employee_id\nWHERE \n    r.impact_score > 7\nGROUP BY \n    p.project_id, p.project_name, e.employee_name;\n```",
        "prompt_token_number": 205,
        "response_token_number": 93,
        "response_text_processed": "SELECT p.project_name, e.employee_name, SUM(r.budget_allocation) AS total_budget_allocated FROM Projects p JOIN Risks r ON p.project_id = r.project_id JOIN Employees e ON p.assigned_to = e.employee_id WHERE r.impact_score > 7 GROUP BY p.project_id, p.project_name, e.employee_name"
    },
    {
        "id": 34510,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Projects': ['project_id', 'project_name', 'start_date', 'end_date', 'assigned_to', 'status', 'department_id', 'budget'], 'Risks': ['risk_id', 'project_id', 'risk_name', 'description', 'likelihood', 'impact', 'status', 'impact_score', 'assigned_to', 'risk_description', 'budget_allocation'], 'RiskAssessment': ['assessment_id', 'risk_id', 'assessment_date', 'assessment_score', 'comments']} and \n# the user question: Text Query: \"Find the projects that have risks with a likelihood of 'Low' and an impact score between 4 and 6, and retrieve the project name, the number of associated risks, and the average assessment score.\",\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Text Query: \"Find the projects that have risks with a likelihood of 'Low' and an impact score between 4 and 6, and retrieve the project name, the number of associated risks, and the average assessment score.\"",
        "output": "SELECT Projects.project_name, COUNT(Risks.risk_id) AS total_risks, AVG(RiskAssessment.assessment_score) AS average_assessment_score FROM Projects INNER JOIN Risks ON Projects.project_id = Risks.project_id INNER JOIN RiskAssessment ON Risks.risk_id = RiskAssessment.risk_id WHERE Risks.likelihood = 'Low' AND Risks.impact_score BETWEEN 4 AND 6 GROUP BY Projects.project_name;",
        "schema": "risk_management",
        "processed_schema_content": {
            "Projects": [
                "project_id",
                "project_name",
                "start_date",
                "end_date",
                "assigned_to",
                "status",
                "department_id",
                "budget"
            ],
            "Risks": [
                "risk_id",
                "project_id",
                "risk_name",
                "description",
                "likelihood",
                "impact",
                "status",
                "impact_score",
                "assigned_to",
                "risk_description",
                "budget_allocation"
            ],
            "RiskAssessment": [
                "assessment_id",
                "risk_id",
                "assessment_date",
                "assessment_score",
                "comments"
            ]
        },
        "response_text": "```sql\nSELECT \n    p.project_name, \n    COUNT(r.risk_id) AS number_of_risks, \n    AVG(ra.assessment_score) AS average_assessment_score\nFROM \n    Projects p\nJOIN \n    Risks r ON p.project_id = r.project_id\nJOIN \n    RiskAssessment ra ON r.risk_id = ra.risk_id\nWHERE \n    r.likelihood = 'Low' \n    AND r.impact_score BETWEEN 4 AND 6\nGROUP BY \n    p.project_id, p.project_name;\n```",
        "prompt_token_number": 205,
        "response_token_number": 114,
        "response_text_processed": "SELECT p.project_name, COUNT(r.risk_id) AS number_of_risks, AVG(ra.assessment_score) AS average_assessment_score FROM Projects p JOIN Risks r ON p.project_id = r.project_id JOIN RiskAssessment ra ON r.risk_id = ra.risk_id WHERE r.likelihood = 'Low' AND r.impact_score BETWEEN 4 AND 6 GROUP BY p.project_id, p.project_name"
    },
    {
        "id": 34514,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the number of time entries made by each employee for the month of February 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the number of time entries made by each employee for the month of February 2022.",
        "output": "SELECT e.Employee_Name, COUNT(t.Time_Entry_ID) FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN '2022-02-01' AND '2022-02-28' GROUP BY e.Employee_ID;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT E.Employee_ID, COUNT(T.Time_Entry_ID) AS Entry_Count\nFROM Employee AS E\nJOIN Time_Entry AS T ON E.Employee_ID = T.Employee_ID\nWHERE T.Time_Entry_Date >= '2022-02-01' AND T.Time_Entry_Date <= '2022-02-28'\nGROUP BY E.Employee_ID;\n```",
        "prompt_token_number": 196,
        "response_token_number": 72,
        "response_text_processed": "SELECT E.Employee_ID, COUNT(T.Time_Entry_ID) AS Entry_Count FROM Employee AS E JOIN Time_Entry AS T ON E.Employee_ID = T.Employee_ID WHERE T.Time_Entry_Date >= '2022-02-01' AND T.Time_Entry_Date <= '2022-02-28' GROUP BY E.Employee_ID"
    },
    {
        "id": 34515,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration']} and \n# the user question: List the names of all employees who have taken a leave of absence in the month of May 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all employees who have taken a leave of absence in the month of May 2022.",
        "output": "SELECT e.Employee_Name, l.Leave_Type FROM Employee e INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN '2022-05-01' AND '2022-05-31';",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Leave l ON e.Employee_ID = l.Employee_ID\nWHERE l.Leave_Start_Date >= '2022-05-01' AND l.Leave_Start_Date <= '2022-05-31';\n```",
        "prompt_token_number": 191,
        "response_token_number": 56,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE l.Leave_Start_Date >= '2022-05-01' AND l.Leave_Start_Date <= '2022-05-31'"
    },
    {
        "id": 34516,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date']} and \n# the user question: Find the total revenue generated from each customer for the month of March 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total revenue generated from each customer for the month of March 2022.",
        "output": "SELECT c.Customer_Name, SUM(oi.Quantity * oi.Price) as Total_Revenue FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID AND o.Order_Date BETWEEN '2022-03-01' AND '2022-03-31' INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID GROUP BY c.Customer_ID;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ]
        },
        "response_text": "```sql\nSELECT \n    C.Customer_ID,\n    C.Customer_Name,\n    SUM(O.Order_Total_Amount) AS Total_Revenue\nFROM \n    `Order` O\nJOIN\n    `Customer` C ON O.Customer_ID = C.Customer_ID\nWHERE \n    O.Order_Date BETWEEN '2022-03-01' AND '2022-03-31'\nGROUP BY \n    C.Customer_ID, \n    C.Customer_Name;\n```",
        "prompt_token_number": 195,
        "response_token_number": 91,
        "response_text_processed": "SELECT C.Customer_ID, C.Customer_Name, SUM(O.Order_Total_Amount) AS Total_Revenue FROM `Order` O JOIN `Customer` C ON O.Customer_ID = C.Customer_ID WHERE O.Order_Date BETWEEN '2022-03-01' AND '2022-03-31' GROUP BY C.Customer_ID, C.Customer_Name"
    },
    {
        "id": 34517,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: List the names of all employees who have worked on a project that started in February 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all employees who have worked on a project that started in February 2022.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Start_Date >= '2022-02-01' AND p.Project_Start_Date < '2022-03-01';",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Project p ON e.Department_ID = p.Department_ID\nJOIN Task t ON p.Project_ID = t.Project_ID\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID AND t.Task_ID = te.Task_ID\nWHERE p.Project_Start_Date BETWEEN '2022-02-01' AND '2022-02-28';\n```",
        "prompt_token_number": 313,
        "response_token_number": 82,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Project p ON e.Department_ID = p.Department_ID JOIN Task t ON p.Project_ID = t.Project_ID JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID AND t.Task_ID = te.Task_ID WHERE p.Project_Start_Date BETWEEN '2022-02-01' AND '2022-02-28'"
    },
    {
        "id": 34518,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: List the names of employees who have worked on a project that ended in the year 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of employees who have worked on a project that ended in the year 2022.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_End_Date >= '2022-01-01' AND p.Project_End_Date < '2023-01-01';",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT E.Employee_Name\nFROM Employee E\nJOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID\nJOIN Task T ON TE.Task_ID = T.Task_ID\nJOIN Project P ON T.Project_ID = P.Project_ID\nWHERE P.Project_End_Date BETWEEN '2022-01-01' AND '2022-12-31';\n```",
        "prompt_token_number": 313,
        "response_token_number": 74,
        "response_text_processed": "SELECT DISTINCT E.Employee_Name FROM Employee E JOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID JOIN Task T ON TE.Task_ID = T.Task_ID JOIN Project P ON T.Project_ID = P.Project_ID WHERE P.Project_End_Date BETWEEN '2022-01-01' AND '2022-12-31'"
    },
    {
        "id": 34520,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration']} and \n# the user question: List the names of employees who have taken a leave of absence for more than 5 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of employees who have taken a leave of absence for more than 5 days.",
        "output": "SELECT e.Employee_Name, l.Leave_Type, l.Leave_Start_Date, l.Leave_End_Date FROM Employee e INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND (julianday(l.Leave_End_Date) - julianday(l.Leave_Start_Date)) + 1 > 5;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ]
        },
        "response_text": "```sql\nSELECT e.Employee_Name \nFROM Employee e\nJOIN Leave l ON e.Employee_ID = l.Employee_ID\nWHERE l.Leave_Duration > 5;\n```",
        "prompt_token_number": 188,
        "response_token_number": 35,
        "response_text_processed": "SELECT e.Employee_Name FROM Employee e JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE l.Leave_Duration > 5"
    },
    {
        "id": 34521,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the average number of hours worked per employee per day for the month of June 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the average number of hours worked per employee per day for the month of June 2022.",
        "output": "SELECT e.Employee_Name, AVG(t.Time_Entry_Hours) as Avg_Hours_Per_Day FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN '2022-06-01' AND '2022-06-30' GROUP BY e.Employee_ID;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT \n    te.Employee_ID,\n    AVG(te.Time_Entry_Hours) AS Average_Hours_Worked_Per_Day\nFROM \n    Time_Entry te\nJOIN \n    Employee e ON te.Employee_ID = e.Employee_ID\nWHERE \n    te.Time_Entry_Date BETWEEN '2022-06-01' AND '2022-06-30'\nGROUP BY \n    te.Employee_ID;\n```",
        "prompt_token_number": 197,
        "response_token_number": 83,
        "response_text_processed": "SELECT te.Employee_ID, AVG(te.Time_Entry_Hours) AS Average_Hours_Worked_Per_Day FROM Time_Entry te JOIN Employee e ON te.Employee_ID = e.Employee_ID WHERE te.Time_Entry_Date BETWEEN '2022-06-01' AND '2022-06-30' GROUP BY te.Employee_ID"
    },
    {
        "id": 34522,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration']} and \n# the user question: Find the names of all employees who have not taken any leave of absence in the year 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have not taken any leave of absence in the year 2022.",
        "output": "SELECT e.Employee_Name FROM Employee e LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN '2022-01-01' AND '2022-12-31' WHERE l.Leave_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ]
        },
        "response_text": "```sql\nSELECT e.Employee_Name \nFROM Employee e \nWHERE e.Employee_ID NOT IN (\n    SELECT l.Employee_ID \n    FROM Leave l \n    WHERE l.Leave_Start_Date BETWEEN '2022-01-01' AND '2022-12-31'\n);\n```",
        "prompt_token_number": 190,
        "response_token_number": 57,
        "response_text_processed": "SELECT e.Employee_Name FROM Employee e WHERE e.Employee_ID NOT IN ( SELECT l.Employee_ID FROM Leave l WHERE l.Leave_Start_Date BETWEEN '2022-01-01' AND '2022-12-31' )"
    },
    {
        "id": 34523,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: List the names of all projects and the total number of hours worked on each project by all employees.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all projects and the total number of hours worked on each project by all employees.",
        "output": "SELECT p.Project_Name, SUM(t.Time_Entry_Hours) FROM Project p LEFT JOIN Task tk ON p.Project_ID = tk.Project_ID LEFT JOIN Time_Entry t ON tk.Task_ID = t.Task_ID GROUP BY p.Project_ID;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT p.Project_Name, SUM(te.Time_Entry_Hours) AS Total_Hours_Worked\nFROM Project p\nJOIN Task t ON p.Project_ID = t.Project_ID\nJOIN Time_Entry te ON t.Task_ID = te.Task_ID\nGROUP BY p.Project_Name;\n```",
        "prompt_token_number": 232,
        "response_token_number": 58,
        "response_text_processed": "SELECT p.Project_Name, SUM(te.Time_Entry_Hours) AS Total_Hours_Worked FROM Project p JOIN Task t ON p.Project_ID = t.Project_ID JOIN Time_Entry te ON t.Task_ID = te.Task_ID GROUP BY p.Project_Name"
    },
    {
        "id": 34524,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status']} and \n# the user question: Find the total number of orders placed by each customer in the year 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the total number of orders placed by each customer in the year 2022.",
        "output": "SELECT c.Customer_Name, COUNT(o.Order_ID) FROM Customer c LEFT JOIN Order o ON c.Customer_ID = o.Customer_ID AND o.Order_Date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY c.Customer_ID;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ]
        },
        "response_text": "```sql\nSELECT \n    C.Customer_ID, \n    COUNT(O.Order_ID) AS Total_Orders\nFROM \n    Customer C\nJOIN \n    `Order` O ON C.Customer_ID = O.Customer_ID\nWHERE \n    YEAR(O.Order_Date) = 2022\nGROUP BY \n    C.Customer_ID;\n```",
        "prompt_token_number": 167,
        "response_token_number": 66,
        "response_text_processed": "SELECT C.Customer_ID, COUNT(O.Order_ID) AS Total_Orders FROM Customer C JOIN `Order` O ON C.Customer_ID = O.Customer_ID WHERE YEAR(O.Order_Date) = 2022 GROUP BY C.Customer_ID"
    },
    {
        "id": 34525,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: List the names of all employees who have worked on a project that lasted more than 6 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all employees who have worked on a project that lasted more than 6 months.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND (julianday(p.Project_End_Date) - julianday(p.Project_Start_Date)) + 1 > 180;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Task t ON e.Employee_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE DATEDIFF(p.Project_End_Date, p.Project_Start_Date) > 180;\n```",
        "prompt_token_number": 313,
        "response_token_number": 56,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Task t ON e.Employee_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE DATEDIFF(p.Project_End_Date, p.Project_Start_Date) > 180"
    },
    {
        "id": 34526,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a task that is related to product development.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a task that is related to product development.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID AND tk.Task_Name LIKE '%Product Development%';",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nWHERE t.Task_Name LIKE '%product development%';\n```",
        "prompt_token_number": 254,
        "response_token_number": 49,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID WHERE t.Task_Name LIKE '%product development%'"
    },
    {
        "id": 34527,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration']} and \n# the user question: Find the names of all employees who have taken a sick leave for more than 3 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have taken a sick leave for more than 3 days.",
        "output": "SELECT e.Employee_Name FROM Employee e INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Type = 'Sick' AND (julianday(l.Leave_End_Date) - julianday(l.Leave_Start_Date)) + 1 > 3;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ]
        },
        "response_text": "```sql\nSELECT E.Employee_Name\nFROM Employee E\nJOIN Leave L ON E.Employee_ID = L.Employee_ID\nWHERE L.Leave_Type = 'sick' AND L.Leave_Duration > 3;\n```",
        "prompt_token_number": 188,
        "response_token_number": 45,
        "response_text_processed": "SELECT E.Employee_Name FROM Employee E JOIN Leave L ON E.Employee_ID = L.Employee_ID WHERE L.Leave_Type = 'sick' AND L.Leave_Duration > 3"
    },
    {
        "id": 34528,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all products along with their price and the total number of units sold in the year 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all products along with their price and the total number of units sold in the year 2022.",
        "output": "SELECT p.Product_Name, p.Product_Price, SUM(oi.Quantity) as Total_Units_Sold FROM Product p LEFT JOIN Order_Item oi ON p.Product_ID = oi.Product_ID LEFT JOIN Order o ON oi.Order_ID = o.Order_ID AND o.Order_Date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY p.Product_ID;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT \n    P.Product_Name, \n    P.Product_Price, \n    SUM(OI.Quantity) AS Total_Units_Sold\nFROM \n    Product P\nJOIN \n    Order_Item OI ON P.Product_ID = OI.Product_ID\nJOIN \n    `Order` O ON OI.Order_ID = O.Order_ID\nWHERE \n    YEAR(O.Order_Date) = 2022\nGROUP BY \n    P.Product_Name, \n    P.Product_Price;\n```",
        "prompt_token_number": 240,
        "response_token_number": 98,
        "response_text_processed": "SELECT P.Product_Name, P.Product_Price, SUM(OI.Quantity) AS Total_Units_Sold FROM Product P JOIN Order_Item OI ON P.Product_ID = OI.Product_ID JOIN `Order` O ON OI.Order_ID = O.Order_ID WHERE YEAR(O.Order_Date) = 2022 GROUP BY P.Product_Name, P.Product_Price"
    },
    {
        "id": 34529,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked for more than 8 hours on a task related to the Sales Campaign project.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked for more than 8 hours on a task related to the Sales Campaign project.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Hours > 8 INNER JOIN Task tk ON t.Task_ID = tk.Task_ID AND tk.Task_Name LIKE '%Sales Campaign%' INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name = 'Sales Campaign';",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE p.Project_Name = 'Sales Campaign' AND te.Time_Entry_Hours > 8;\n```",
        "prompt_token_number": 318,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE p.Project_Name = 'Sales Campaign' AND te.Time_Entry_Hours > 8"
    },
    {
        "id": 34531,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on more than one project in the year 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on more than one project in the year 2022.",
        "output": "SELECT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Start_Date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY e.Employee_ID HAVING COUNT(DISTINCT p.Project_ID) > 1;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE YEAR(te.Time_Entry_Date) = 2022\nGROUP BY e.Employee_Name\nHAVING COUNT(DISTINCT p.Project_ID) > 1;\n```",
        "prompt_token_number": 314,
        "response_token_number": 83,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE YEAR(te.Time_Entry_Date) = 2022 GROUP BY e.Employee_Name HAVING COUNT(DISTINCT p.Project_ID) > 1"
    },
    {
        "id": 34532,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that was completed in the year 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that was completed in the year 2022.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_End_Date BETWEEN '2022-01-01' AND '2022-12-31';",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT E.Employee_Name\nFROM Employee E\nJOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID\nJOIN Task T ON TE.Task_ID = T.Task_ID\nJOIN Project P ON T.Project_ID = P.Project_ID\nWHERE P.Project_End_Date BETWEEN '2022-01-01' AND '2022-12-31';\n```",
        "prompt_token_number": 315,
        "response_token_number": 74,
        "response_text_processed": "SELECT DISTINCT E.Employee_Name FROM Employee E JOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID JOIN Task T ON TE.Task_ID = T.Task_ID JOIN Project P ON T.Project_ID = P.Project_ID WHERE P.Project_End_Date BETWEEN '2022-01-01' AND '2022-12-31'"
    },
    {
        "id": 34534,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project for more than 200 hours.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project for more than 200 hours.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID GROUP BY e.Employee_ID, p.Project_ID HAVING SUM(t.Time_Entry_Hours) > 200;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nGROUP BY e.Employee_ID\nHAVING SUM(te.Time_Entry_Hours) > 200;\n```",
        "prompt_token_number": 312,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID GROUP BY e.Employee_ID HAVING SUM(te.Time_Entry_Hours) > 200"
    },
    {
        "id": 34535,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status']} and \n# the user question: List the names of all customers who have not placed any orders in the year 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have not placed any orders in the year 2022.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c LEFT JOIN Order o ON c.Customer_ID = o.Customer_ID AND o.Order_Date BETWEEN '2022-01-01' AND '2022-12-31' WHERE o.Order_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ]
        },
        "response_text": "```sql\nSELECT c.Customer_Name\nFROM Customer c\nLEFT JOIN [Order] o ON c.Customer_ID = o.Customer_ID AND YEAR(o.Order_Date) = 2022\nWHERE o.Order_ID IS NULL;\n```",
        "prompt_token_number": 169,
        "response_token_number": 45,
        "response_text_processed": "SELECT c.Customer_Name FROM Customer c LEFT JOIN [Order] o ON c.Customer_ID = o.Customer_ID AND YEAR(o.Order_Date) = 2022 WHERE o.Order_ID IS NULL"
    },
    {
        "id": 34537,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project for more than 3 months and have not taken any leave of absence during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project for more than 3 months and have not taken any leave of absence during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND (julianday(p.Project_End_Date) - julianday(p.Project_Start_Date)) + 1 > 90 LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT E.Employee_Name \nFROM Employee E\nJOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID\nJOIN Task T ON TE.Task_ID = T.Task_ID\nJOIN Project P ON T.Project_ID = P.Project_ID\nWHERE TIMESTAMPDIFF(MONTH, P.Project_Start_Date, IFNULL(P.Project_Actual_End_Date, P.Project_Estimated_End_Date)) > 3\nAND NOT EXISTS (\n    SELECT 1\n    FROM Leave L\n    WHERE L.Employee_ID = E.Employee_ID\n    AND (\n        (L.Leave_Start_Date BETWEEN P.Project_Start_Date AND IFNULL(P.Project_Actual_End_Date, P.Project_Estimated_End_Date))\n        OR\n        (L.Leave_End_Date BETWEEN P.Project_Start_Date AND IFNULL(P.Project_Actual_End_Date, P.Project_Estimated_End_Date))\n        OR\n        (P.Project_Start_Date BETWEEN L.Leave_Start_Date AND L.Leave_End_Date)\n    )\n)\nGROUP BY E.Employee_Name;\n```",
        "prompt_token_number": 354,
        "response_token_number": 204,
        "response_text_processed": "SELECT E.Employee_Name FROM Employee E JOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID JOIN Task T ON TE.Task_ID = T.Task_ID JOIN Project P ON T.Project_ID = P.Project_ID WHERE TIMESTAMPDIFF(MONTH, P.Project_Start_Date, IFNULL(P.Project_Actual_End_Date, P.Project_Estimated_End_Date)) > 3 AND NOT EXISTS ( SELECT 1 FROM Leave L WHERE L.Employee_ID = E.Employee_ID AND ( (L.Leave_Start_Date BETWEEN P.Project_Start_Date AND IFNULL(P.Project_Actual_End_Date, P.Project_Estimated_End_Date)) OR (L.Leave_End_Date BETWEEN P.Project_Start_Date AND IFNULL(P.Project_Actual_End_Date, P.Project_Estimated_End_Date)) OR (P.Project_Start_Date BETWEEN L.Leave_Start_Date AND L.Leave_End_Date) ) ) GROUP BY E.Employee_Name"
    },
    {
        "id": 34538,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date']} and \n# the user question: List the names of all customers who have placed at least one order for a product that costs more than $200.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed at least one order for a product that costs more than $200.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID AND oi.Price > 200;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nWHERE oi.Price > 200;\n```",
        "prompt_token_number": 201,
        "response_token_number": 48,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID WHERE oi.Price > 200"
    },
    {
        "id": 34539,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to marketing and has a project manager who is not the CEO.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to marketing and has a project manager who is not the CEO.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Manager_ID <> 1 AND p.Project_Name LIKE '%Marketing%' WHERE e.Employee_Position <> 'CEO';",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE p.Department_ID IN (SELECT Department_ID FROM Employee WHERE Employee_Position LIKE '%Marketing%')\nAND p.Project_Manager_ID IN (SELECT Employee_ID FROM Employee WHERE Employee_Title <> 'CEO');\n```",
        "prompt_token_number": 321,
        "response_token_number": 89,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE p.Department_ID IN (SELECT Department_ID FROM Employee WHERE Employee_Position LIKE '%Marketing%') AND p.Project_Manager_ID IN (SELECT Employee_ID FROM Employee WHERE Employee_Title <> 'CEO')"
    },
    {
        "id": 34540,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project for more than 6 months and have taken a sick leave during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project for more than 6 months and have taken a sick leave during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND (julianday(p.Project_End_Date) - julianday(p.Project_Start_Date)) + 1 > 180 INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Type = 'Sick' AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT E.Employee_Name\nFROM Employee E\nJOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID\nJOIN Task T ON TE.Task_ID = T.Task_ID\nJOIN Project P ON T.Project_ID = P.Project_ID\nJOIN Leave L ON E.Employee_ID = L.Employee_ID\nWHERE (JULIANDAY(P.Project_End_Date) - JULIANDAY(P.Project_Start_Date) > 183)\n  AND L.Leave_Type = 'sick'\n  AND L.Leave_Start_Date BETWEEN P.Project_Start_Date AND P.Project_End_Date\n  AND L.Leave_End_Date BETWEEN P.Project_Start_Date AND P.Project_End_Date;\n```",
        "prompt_token_number": 352,
        "response_token_number": 136,
        "response_text_processed": "SELECT DISTINCT E.Employee_Name FROM Employee E JOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID JOIN Task T ON TE.Task_ID = T.Task_ID JOIN Project P ON T.Project_ID = P.Project_ID JOIN Leave L ON E.Employee_ID = L.Employee_ID WHERE (JULIANDAY(P.Project_End_Date) - JULIANDAY(P.Project_Start_Date) > 183) AND L.Leave_Type = 'sick' AND L.Leave_Start_Date BETWEEN P.Project_Start_Date AND P.Project_End_Date AND L.Leave_End_Date BETWEEN P.Project_Start_Date AND P.Project_End_Date"
    },
    {
        "id": 34541,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all products and the total amount of money spent on each product in the year 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all products and the total amount of money spent on each product in the year 2022.",
        "output": "SELECT p.Product_Name, SUM(oi.Quantity * oi.Price) as Total_Amount_Spent FROM Product p LEFT JOIN Order_Item oi ON p.Product_ID = oi.Product_ID LEFT JOIN Order o ON oi.Order_ID = o.Order_ID AND o.Order_Date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY p.Product_ID;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT P.Product_Name, SUM(OI.Quantity * OI.Price) AS Total_Amount_Spent\nFROM Order_Item OI\nJOIN `Order` O ON OI.Order_ID = O.Order_ID\nJOIN Product P ON OI.Product_ID = P.Product_ID\nWHERE YEAR(O.Order_Date) = 2022\nGROUP BY P.Product_Name;\n```",
        "prompt_token_number": 239,
        "response_token_number": 76,
        "response_text_processed": "SELECT P.Product_Name, SUM(OI.Quantity * OI.Price) AS Total_Amount_Spent FROM Order_Item OI JOIN `Order` O ON OI.Order_ID = O.Order_ID JOIN Product P ON OI.Product_ID = P.Product_ID WHERE YEAR(O.Order_Date) = 2022 GROUP BY P.Product_Name"
    },
    {
        "id": 34544,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status']} and \n# the user question: List the names of all customers and the number of orders placed by each customer in the year 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers and the number of orders placed by each customer in the year 2022.",
        "output": "SELECT c.Customer_Name, COUNT(o.Order_ID) as Num_Orders FROM Customer c LEFT JOIN Order o ON c.Customer_ID = o.Customer_ID AND o.Order_Date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY c.Customer_ID;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ]
        },
        "response_text": "```sql\nSELECT C.Customer_Name, COUNT(O.Order_ID) AS Number_of_Orders\nFROM Customer C\nJOIN [Order] O ON C.Customer_ID = O.Customer_ID\nWHERE YEAR(O.Order_Date) = 2022\nGROUP BY C.Customer_Name;\n```",
        "prompt_token_number": 172,
        "response_token_number": 55,
        "response_text_processed": "SELECT C.Customer_Name, COUNT(O.Order_ID) AS Number_of_Orders FROM Customer C JOIN [Order] O ON C.Customer_ID = O.Customer_ID WHERE YEAR(O.Order_Date) = 2022 GROUP BY C.Customer_Name"
    },
    {
        "id": 34545,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project for more than 3 months and have not taken any leave of absence in the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project for more than 3 months and have not taken any leave of absence in the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND (julianday(p.Project_End_Date) - julianday(p.Project_Start_Date)) + 1 > 90 LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Project p ON e.Employee_ID = p.Project_Manager_ID\nJOIN Task t ON p.Project_ID = t.Project_ID\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID AND t.Task_ID = te.Task_ID\nWHERE DATE_PART('month', AGE(COALESCE(p.Project_Actual_End_Date, p.Project_Estimated_End_Date), p.Project_Start_Date)) > 3\nAND NOT EXISTS (\n    SELECT 1\n    FROM Leave l\n    WHERE l.Employee_ID = e.Employee_ID\n    AND (\n        (l.Leave_Start_Date BETWEEN p.Project_Start_Date AND COALESCE(p.Project_Actual_End_Date, p.Project_Estimated_End_Date)) OR\n        (l.Leave_End_Date BETWEEN p.Project_Start_Date AND COALESCE(p.Project_Actual_End_Date, p.Project_Estimated_End_Date))\n    )\n);\n```",
        "prompt_token_number": 354,
        "response_token_number": 189,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Project p ON e.Employee_ID = p.Project_Manager_ID JOIN Task t ON p.Project_ID = t.Project_ID JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID AND t.Task_ID = te.Task_ID WHERE DATE_PART('month', AGE(COALESCE(p.Project_Actual_End_Date, p.Project_Estimated_End_Date), p.Project_Start_Date)) > 3 AND NOT EXISTS ( SELECT 1 FROM Leave l WHERE l.Employee_ID = e.Employee_ID AND ( (l.Leave_Start_Date BETWEEN p.Project_Start_Date AND COALESCE(p.Project_Actual_End_Date, p.Project_Estimated_End_Date)) OR (l.Leave_End_Date BETWEEN p.Project_Start_Date AND COALESCE(p.Project_Actual_End_Date, p.Project_Estimated_End_Date)) ) )"
    },
    {
        "id": 34547,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to finance and have not taken any leave of absence during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to finance and have not taken any leave of absence during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Finance%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE p.Project_Name LIKE '%finance%'\nAND NOT EXISTS (\n    SELECT 1\n    FROM Leave l\n    WHERE l.Employee_ID = e.Employee_ID\n    AND (\n        (l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date) OR\n        (l.Leave_End_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date) OR\n        (p.Project_Start_Date BETWEEN l.Leave_Start_Date AND l.Leave_End_Date) OR\n        (p.Project_End_Date BETWEEN l.Leave_Start_Date AND l.Leave_End_Date)\n    )\n);\n```",
        "prompt_token_number": 353,
        "response_token_number": 169,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE p.Project_Name LIKE '%finance%' AND NOT EXISTS ( SELECT 1 FROM Leave l WHERE l.Employee_ID = e.Employee_ID AND ( (l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date) OR (l.Leave_End_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date) OR (p.Project_Start_Date BETWEEN l.Leave_Start_Date AND l.Leave_End_Date) OR (p.Project_End_Date BETWEEN l.Leave_Start_Date AND l.Leave_End_Date) ) )"
    },
    {
        "id": 34548,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID']} and \n# the user question: List the names of all suppliers and the number of purchases made from each supplier in the year 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers and the number of purchases made from each supplier in the year 2022.",
        "output": "SELECT s.Supplier_Name, COUNT(p.Purchase_ID) as Num_Purchases FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID AND p.Purchase_Date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY s.Supplier_ID;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ]
        },
        "response_text": "```sql\nSELECT Supplier.Supplier_Name, COUNT(Purchase.Purchase_ID) AS Number_of_Purchases\nFROM Supplier\nLEFT JOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID\nWHERE YEAR(Purchase.Purchase_Date) = 2022\nGROUP BY Supplier.Supplier_Name;\n```",
        "prompt_token_number": 172,
        "response_token_number": 60,
        "response_text_processed": "SELECT Supplier.Supplier_Name, COUNT(Purchase.Purchase_ID) AS Number_of_Purchases FROM Supplier LEFT JOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID WHERE YEAR(Purchase.Purchase_Date) = 2022 GROUP BY Supplier.Supplier_Name"
    },
    {
        "id": 34550,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has been discontinued.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has been discontinued.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Discontinued';",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN \"Order\" o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Status = 'discontinued';\n```",
        "prompt_token_number": 286,
        "response_token_number": 62,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN \"Order\" o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Status = 'discontinued'"
    },
    {
        "id": 34551,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked for more than 8 hours on a task that is related to a project with a budget of more than $10,000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked for more than 8 hours on a task that is related to a project with a budget of more than $10,000.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Hours > 8 INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget > 10000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name \nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE te.Time_Entry_Hours > 8 AND p.Project_Budget > 10000;\n```",
        "prompt_token_number": 328,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE te.Time_Entry_Hours > 8 AND p.Project_Budget > 10000"
    },
    {
        "id": 34552,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status']} and \n# the user question: List the names of all customers who have not placed any orders in the month of March 2022 but have placed orders in the month of April 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have not placed any orders in the month of March 2022 but have placed orders in the month of April 2022.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID AND o.Order_Date BETWEEN '2022-04-01' AND '2022-04-30' LEFT JOIN Order o2 ON c.Customer_ID = o2.Customer_ID AND o2.Order_Date BETWEEN '2022-03-01' AND '2022-03-31' WHERE o2.Order_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ]
        },
        "response_text": "```sql\nSELECT C.Customer_Name\nFROM Customer C\nWHERE C.Customer_ID IN (\n    SELECT O.Customer_ID \n    FROM `Order` O\n    WHERE O.Order_Date >= '2022-04-01' AND O.Order_Date < '2022-05-01'\n) AND C.Customer_ID NOT IN (\n    SELECT O.Customer_ID \n    FROM `Order` O\n    WHERE O.Order_Date >= '2022-03-01' AND O.Order_Date < '2022-04-01'\n);\n```",
        "prompt_token_number": 183,
        "response_token_number": 108,
        "response_text_processed": "SELECT C.Customer_Name FROM Customer C WHERE C.Customer_ID IN ( SELECT O.Customer_ID FROM `Order` O WHERE O.Order_Date >= '2022-04-01' AND O.Order_Date < '2022-05-01' ) AND C.Customer_ID NOT IN ( SELECT O.Customer_ID FROM `Order` O WHERE O.Order_Date >= '2022-03-01' AND O.Order_Date < '2022-04-01' )"
    },
    {
        "id": 34553,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID']} and \n# the user question: List the names of all suppliers who have not received any purchases in the year 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have not received any purchases in the year 2022.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID AND p.Purchase_Date BETWEEN '2022-01-01' AND '2022-12-31' WHERE p.Purchase_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ]
        },
        "response_text": "```sql\nSELECT S.Supplier_Name\nFROM Supplier S\nLEFT JOIN Purchase P ON S.Supplier_ID = P.Supplier_ID AND YEAR(P.Purchase_Date) = 2022\nWHERE P.Purchase_ID IS NULL;\n```",
        "prompt_token_number": 169,
        "response_token_number": 48,
        "response_text_processed": "SELECT S.Supplier_Name FROM Supplier S LEFT JOIN Purchase P ON S.Supplier_ID = P.Supplier_ID AND YEAR(P.Purchase_Date) = 2022 WHERE P.Purchase_ID IS NULL"
    },
    {
        "id": 34554,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to software development and have not taken any leave of absence during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to software development and have not taken any leave of absence during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Software Development%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT E.Employee_Name\nFROM Employee E\nJOIN Task T ON E.Employee_ID = T.Task_ID\nJOIN Project P ON T.Project_ID = P.Project_ID\nLEFT JOIN Leave L ON E.Employee_ID = L.Employee_ID \n                 AND (L.Leave_Start_Date BETWEEN P.Project_Start_Date AND COALESCE(P.Project_End_Date, P.Project_Actual_End_Date))\nWHERE P.Project_Name LIKE '%software development%'\n  AND L.Leave_ID IS NULL;\n```",
        "prompt_token_number": 354,
        "response_token_number": 98,
        "response_text_processed": "SELECT DISTINCT E.Employee_Name FROM Employee E JOIN Task T ON E.Employee_ID = T.Task_ID JOIN Project P ON T.Project_ID = P.Project_ID LEFT JOIN Leave L ON E.Employee_ID = L.Employee_ID AND (L.Leave_Start_Date BETWEEN P.Project_Start_Date AND COALESCE(P.Project_End_Date, P.Project_Actual_End_Date)) WHERE P.Project_Name LIKE '%software development%' AND L.Leave_ID IS NULL"
    },
    {
        "id": 34557,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Stock': ['Stock_Quantity', 'Product_I', 'Product_ID', 'Last_Restocked_Date']} and \n# the user question: List the names of all customers who have placed an order for a product that is in stock but has not been restocked for more than 30 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is in stock but has not been restocked for more than 30 days.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' LEFT JOIN Stock s ON oi.Product_ID = s.Product_ID AND (julianday('now') - julianday(s.Last_Restocked_Date)) > 30;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Stock": [
                "Stock_Quantity",
                "Product_I",
                "Product_ID",
                "Last_Restocked_Date"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nJOIN Stock s ON p.Product_ID = s.Product_ID\nWHERE DATEDIFF(CURDATE(), s.Last_Restocked_Date) > 30\n  AND s.Stock_Quantity > 0;\n```",
        "prompt_token_number": 321,
        "response_token_number": 95,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID JOIN Stock s ON p.Product_ID = s.Product_ID WHERE DATEDIFF(CURDATE(), s.Last_Restocked_Date) > 30 AND s.Stock_Quantity > 0"
    },
    {
        "id": 34558,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to sales and have not taken any leave of absence during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to sales and have not taken any leave of absence during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Sales%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Task t ON e.Employee_ID = t.Employee_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nLEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID\nWHERE p.Project_Name LIKE '%sales%'\nAND (l.Leave_ID IS NULL OR NOT (l.Leave_Start_Date BETWEEN p.Project_Start_Date AND COALESCE(p.Project_Actual_End_Date, p.Project_End_Date)));\n```",
        "prompt_token_number": 353,
        "response_token_number": 96,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Task t ON e.Employee_ID = t.Employee_ID JOIN Project p ON t.Project_ID = p.Project_ID LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE p.Project_Name LIKE '%sales%' AND (l.Leave_ID IS NULL OR NOT (l.Leave_Start_Date BETWEEN p.Project_Start_Date AND COALESCE(p.Project_Actual_End_Date, p.Project_End_Date)))"
    },
    {
        "id": 34559,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date']} and \n# the user question: List the names of all customers and the total amount of money they have spent on all orders in the year 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers and the total amount of money they have spent on all orders in the year 2022.",
        "output": "SELECT c.Customer_Name, SUM(oi.Quantity * oi.Price) as Total_Amount_Spent FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID AND o.Order_Date BETWEEN '2022-01-01' AND '2022-12-31' INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID GROUP BY c.Customer_ID;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ]
        },
        "response_text": "```sql\nSELECT C.Customer_Name, SUM(O.Order_Total_Amount) AS Total_Spent\nFROM Customer C\nJOIN `Order` O ON C.Customer_ID = O.Customer_ID\nWHERE YEAR(O.Order_Date) = 2022\nGROUP BY C.Customer_Name;\n```",
        "prompt_token_number": 203,
        "response_token_number": 56,
        "response_text_processed": "SELECT C.Customer_Name, SUM(O.Order_Total_Amount) AS Total_Spent FROM Customer C JOIN `Order` O ON C.Customer_ID = O.Customer_ID WHERE YEAR(O.Order_Date) = 2022 GROUP BY C.Customer_Name"
    },
    {
        "id": 34562,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Stock': ['Stock_Quantity', 'Product_I', 'Product_ID', 'Last_Restocked_Date']} and \n# the user question: List the names of all customers who have placed an order for a product that is out of stock and has not been restocked for more than 7 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is out of stock and has not been restocked for more than 7 days.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' LEFT JOIN Stock s ON oi.Product_ID = s.Product_ID AND (julianday('now') - julianday(s.Last_Restocked_Date)) > 7;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Stock": [
                "Stock_Quantity",
                "Product_I",
                "Product_ID",
                "Last_Restocked_Date"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nJOIN Stock s ON p.Product_ID = s.Product_ID\nWHERE s.Stock_Quantity = 0\n  AND s.Last_Restocked_Date < DATE_SUB(CURDATE(), INTERVAL 7 DAY);\n```",
        "prompt_token_number": 322,
        "response_token_number": 95,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID JOIN Stock s ON p.Product_ID = s.Product_ID WHERE s.Stock_Quantity = 0 AND s.Last_Restocked_Date < DATE_SUB(CURDATE(), INTERVAL 7 DAY)"
    },
    {
        "id": 34565,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price greater than $50.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for a product that has a price greater than $50.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price > 50;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Supplier.Supplier_Name\nFROM Supplier\nJOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID\nJOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID\nJOIN Product ON Purchase_Item.Product_ID = Product.Product_ID\nWHERE Product.Product_Price > 50;\n```",
        "prompt_token_number": 273,
        "response_token_number": 62,
        "response_text_processed": "SELECT DISTINCT Supplier.Supplier_Name FROM Supplier JOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID JOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID JOIN Product ON Purchase_Item.Product_ID = Product.Product_ID WHERE Product.Product_Price > 50"
    },
    {
        "id": 34566,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on a project in the year 2022.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have not worked on a project in the year 2022.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN '2022-01-01' AND '2022-12-31' WHERE t.Time_Entry_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT e.Employee_Name\nFROM Employee e\nLEFT JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID AND YEAR(te.Time_Entry_Date) = 2022\nWHERE te.Time_Entry_ID IS NULL;\n```",
        "prompt_token_number": 197,
        "response_token_number": 46,
        "response_text_processed": "SELECT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID AND YEAR(te.Time_Entry_Date) = 2022 WHERE te.Time_Entry_ID IS NULL"
    },
    {
        "id": 34567,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently on sale.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is currently on sale.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'On Sale';",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN [Order] o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Sale_Price IS NOT NULL;\n```",
        "prompt_token_number": 287,
        "response_token_number": 63,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN [Order] o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Sale_Price IS NOT NULL"
    },
    {
        "id": 34569,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Stock': ['Stock_Quantity', 'Product_I', 'Product_ID', 'Last_Restocked_Date']} and \n# the user question: List the names of all customers who have placed an order for a product that has been restocked within the last 5 days.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has been restocked within the last 5 days.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' LEFT JOIN Stock s ON oi.Product_ID = s.Product_ID AND (julianday('now') - julianday(s.Last_Restocked_Date)) <= 5;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Stock": [
                "Stock_Quantity",
                "Product_I",
                "Product_ID",
                "Last_Restocked_Date"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Customer.Customer_Name\nFROM Customer\nJOIN `Order` ON Customer.Customer_ID = `Order`.Customer_ID\nJOIN Order_Item ON `Order`.Order_ID = Order_Item.Order_ID\nJOIN Stock ON Order_Item.Product_ID = Stock.Product_ID\nWHERE Stock.Last_Restocked_Date >= CURRENT_DATE - INTERVAL 5 DAY;\n```",
        "prompt_token_number": 316,
        "response_token_number": 71,
        "response_text_processed": "SELECT DISTINCT Customer.Customer_Name FROM Customer JOIN `Order` ON Customer.Customer_ID = `Order`.Customer_ID JOIN Order_Item ON `Order`.Order_ID = Order_Item.Order_ID JOIN Stock ON Order_Item.Product_ID = Stock.Product_ID WHERE Stock.Last_Restocked_Date >= CURRENT_DATE - INTERVAL 5 DAY"
    },
    {
        "id": 34570,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to research and development and have not taken any leave of absence during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to research and development and have not taken any leave of absence during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Research and Development%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Project p ON e.Department_ID = p.Department_ID\nJOIN Task t ON p.Project_ID = t.Project_ID\nJOIN Time_Entry te ON t.Task_ID = te.Task_ID AND te.Employee_ID = e.Employee_ID\nLEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID \n                  AND (l.Leave_Start_Date BETWEEN p.Project_Start_Date AND COALESCE(p.Project_End_Date, p.Project_Estimated_End_Date))\n                  OR (l.Leave_End_Date BETWEEN p.Project_Start_Date AND COALESCE(p.Project_End_Date, p.Project_Estimated_End_Date))\nWHERE p.Project_Name LIKE '%research and development%'\n  AND l.Leave_ID IS NULL;\n```",
        "prompt_token_number": 355,
        "response_token_number": 151,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Project p ON e.Department_ID = p.Department_ID JOIN Task t ON p.Project_ID = t.Project_ID JOIN Time_Entry te ON t.Task_ID = te.Task_ID AND te.Employee_ID = e.Employee_ID LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND (l.Leave_Start_Date BETWEEN p.Project_Start_Date AND COALESCE(p.Project_End_Date, p.Project_Estimated_End_Date)) OR (l.Leave_End_Date BETWEEN p.Project_Start_Date AND COALESCE(p.Project_End_Date, p.Project_Estimated_End_Date)) WHERE p.Project_Name LIKE '%research and development%' AND l.Leave_ID IS NULL"
    },
    {
        "id": 34571,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a price greater than $100 and is currently on sale.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a price greater than $100 and is currently on sale.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'On Sale' AND p.Product_Price > 100;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN \"Order\" o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Price > 100 AND p.Product_Status = 'on sale';\n```",
        "prompt_token_number": 295,
        "response_token_number": 69,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN \"Order\" o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price > 100 AND p.Product_Status = 'on sale'"
    },
    {
        "id": 34573,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is in stock and has a price less than $50.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is in stock and has a price less than $50.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Price < 50;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN \"Order\" o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Stock > 0 AND p.Product_Price < 50;\n```",
        "prompt_token_number": 294,
        "response_token_number": 69,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN \"Order\" o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock > 0 AND p.Product_Price < 50"
    },
    {
        "id": 34575,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a discount of more than 20%.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a discount of more than 20%.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Discount > 0.2;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Discount > 20;\n```",
        "prompt_token_number": 292,
        "response_token_number": 62,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Discount > 20"
    },
    {
        "id": 34577,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that is out of stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for a product that is out of stock.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'Out of Stock';",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Supplier.Supplier_Name\nFROM Supplier\nJOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID\nJOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID\nJOIN Product ON Purchase_Item.Product_ID = Product.Product_ID\nWHERE Product.Product_Stock = 0;\n```",
        "prompt_token_number": 270,
        "response_token_number": 63,
        "response_text_processed": "SELECT DISTINCT Supplier.Supplier_Name FROM Supplier JOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID JOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID JOIN Product ON Purchase_Item.Product_ID = Product.Product_ID WHERE Product.Product_Stock = 0"
    },
    {
        "id": 34578,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to customer support and have taken a leave of absence during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to customer support and have taken a leave of absence during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Customer Support%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE l.Leave_ID IS NOT NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nJOIN Leave l ON e.Employee_ID = l.Employee_ID\nWHERE p.Project_Name LIKE '%customer support%'\nAND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND COALESCE(p.Project_Actual_End_Date, p.Project_Estimated_End_Date);\n```",
        "prompt_token_number": 353,
        "response_token_number": 102,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE p.Project_Name LIKE '%customer support%' AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND COALESCE(p.Project_Actual_End_Date, p.Project_Estimated_End_Date)"
    },
    {
        "id": 34579,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a discount of 10% or less.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a discount of 10% or less.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Discount <= 0.1;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN [Order] o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Discount <= 10;\n```",
        "prompt_token_number": 292,
        "response_token_number": 62,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN [Order] o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Discount <= 10"
    },
    {
        "id": 34581,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a price greater than $100 and is out of stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a price greater than $100 and is out of stock.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Price > 100;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Price > 100 AND p.Product_Stock = 0;\n```",
        "prompt_token_number": 295,
        "response_token_number": 69,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price > 100 AND p.Product_Stock = 0"
    },
    {
        "id": 34582,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to finance and accounting and have not taken any leave of absence during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to finance and accounting and have not taken any leave of absence during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Finance and Accounting%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Task t ON e.Employee_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nLEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID\nWHERE p.Project_Name LIKE '%finance%' OR p.Project_Name LIKE '%accounting%'\nAND (l.Leave_ID IS NULL OR l.Leave_Start_Date > p.Project_End_Date OR l.Leave_End_Date < p.Project_Start_Date);\n```",
        "prompt_token_number": 355,
        "response_token_number": 99,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Task t ON e.Employee_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE p.Project_Name LIKE '%finance%' OR p.Project_Name LIKE '%accounting%' AND (l.Leave_ID IS NULL OR l.Leave_Start_Date > p.Project_End_Date OR l.Leave_End_Date < p.Project_Start_Date)"
    },
    {
        "id": 34585,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that is currently in stock and has a price less than $30.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for a product that is currently in stock and has a price less than $30.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'In Stock' AND pr.Product_Price < 30;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT S.Supplier_Name\nFROM Supplier S\nJOIN Purchase P ON S.Supplier_ID = P.Supplier_ID\nJOIN Purchase_Item PI ON P.Purchase_ID = PI.Purchase_ID\nJOIN Product PR ON PI.Product_ID = PR.Product_ID\nWHERE PR.Product_Stock > 0 AND PR.Product_Price < 30;\n```",
        "prompt_token_number": 278,
        "response_token_number": 72,
        "response_text_processed": "SELECT DISTINCT S.Supplier_Name FROM Supplier S JOIN Purchase P ON S.Supplier_ID = P.Supplier_ID JOIN Purchase_Item PI ON P.Purchase_ID = PI.Purchase_ID JOIN Product PR ON PI.Product_ID = PR.Product_ID WHERE PR.Product_Stock > 0 AND PR.Product_Price < 30"
    },
    {
        "id": 34586,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to marketing and have taken a leave of absence during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to marketing and have taken a leave of absence during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Marketing%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE l.Leave_ID IS NOT NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nJOIN Leave l ON e.Employee_ID = l.Employee_ID\nWHERE p.Project_Name LIKE '%marketing%' \n  AND (\n    (l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date) \n    OR (l.Leave_End_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date)\n    OR (l.Leave_Start_Date <= p.Project_Start_Date AND l.Leave_End_Date >= p.Project_End_Date)\n  );\n```",
        "prompt_token_number": 352,
        "response_token_number": 140,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE p.Project_Name LIKE '%marketing%' AND ( (l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date) OR (l.Leave_End_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date) OR (l.Leave_Start_Date <= p.Project_Start_Date AND l.Leave_End_Date >= p.Project_End_Date) )"
    },
    {
        "id": 34587,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a price greater than $200 and a discount of 10% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a price greater than $200 and a discount of 10% or more.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price > 200 AND p.Product_Discount >= 0.1;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name \nFROM Customer c\nJOIN \"Order\" o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Price > 200 AND p.Product_Discount >= 10;\n```",
        "prompt_token_number": 299,
        "response_token_number": 69,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN \"Order\" o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price > 200 AND p.Product_Discount >= 10"
    },
    {
        "id": 34589,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a discount of 20% or more and is currently in stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a discount of 20% or more and is currently in stock.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount >= 0.2;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name \nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Discount >= 20 AND p.Product_Stock > 0;\n```",
        "prompt_token_number": 297,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Discount >= 20 AND p.Product_Stock > 0"
    },
    {
        "id": 34590,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on any projects in the last 3 months and have not taken any leave of absence during that period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have not worked on any projects in the last 3 months and have not taken any leave of absence during that period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN DATE('now', '-3 months') AND DATE('now') LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN DATE('now', '-3 months') AND DATE('now') WHERE t.Time_Entry_ID IS NULL AND l.Leave_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT e.Employee_Name\nFROM Employee e\nLEFT JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nLEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID\nWHERE (te.Time_Entry_Date < DATE_SUB(CURDATE(), INTERVAL 3 MONTH) OR te.Time_Entry_Date IS NULL)\nAND (l.Leave_Start_Date < DATE_SUB(CURDATE(), INTERVAL 3 MONTH) OR l.Leave_Start_Date IS NULL)\nAND e.Employee_ID NOT IN (\n    SELECT te2.Employee_ID\n    FROM Time_Entry te2\n    WHERE te2.Time_Entry_Date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\n)\nAND e.Employee_ID NOT IN (\n    SELECT l2.Employee_ID\n    FROM Leave l2\n    WHERE l2.Leave_Start_Date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\n       OR l2.Leave_End_Date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\n);\n```",
        "prompt_token_number": 238,
        "response_token_number": 196,
        "response_text_processed": "SELECT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE (te.Time_Entry_Date < DATE_SUB(CURDATE(), INTERVAL 3 MONTH) OR te.Time_Entry_Date IS NULL) AND (l.Leave_Start_Date < DATE_SUB(CURDATE(), INTERVAL 3 MONTH) OR l.Leave_Start_Date IS NULL) AND e.Employee_ID NOT IN ( SELECT te2.Employee_ID FROM Time_Entry te2 WHERE te2.Time_Entry_Date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) ) AND e.Employee_ID NOT IN ( SELECT l2.Employee_ID FROM Leave l2 WHERE l2.Leave_Start_Date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) OR l2.Leave_End_Date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) )"
    },
    {
        "id": 34591,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a price less than $50 and is currently in stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a price less than $50 and is currently in stock.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Price < 50;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Price < 50 AND p.Product_Stock > 0;\n```",
        "prompt_token_number": 295,
        "response_token_number": 69,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price < 50 AND p.Product_Stock > 0"
    },
    {
        "id": 34592,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to software development and have taken a leave of absence during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to software development and have taken a leave of absence during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Software Development%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE l.Leave_ID IS NOT NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT E.Employee_Name\nFROM Employee E\nJOIN Task T ON E.Employee_ID = T.Employee_ID\nJOIN Project P ON T.Project_ID = P.Project_ID\nJOIN Leave L ON E.Employee_ID = L.Employee_ID\nWHERE P.Project_Name LIKE '%software development%' \nAND (L.Leave_Start_Date BETWEEN P.Project_Start_Date AND P.Project_End_Date\n     OR L.Leave_End_Date BETWEEN P.Project_Start_Date AND P.Project_End_Date);\n```",
        "prompt_token_number": 353,
        "response_token_number": 96,
        "response_text_processed": "SELECT DISTINCT E.Employee_Name FROM Employee E JOIN Task T ON E.Employee_ID = T.Employee_ID JOIN Project P ON T.Project_ID = P.Project_ID JOIN Leave L ON E.Employee_ID = L.Employee_ID WHERE P.Project_Name LIKE '%software development%' AND (L.Leave_Start_Date BETWEEN P.Project_Start_Date AND P.Project_End_Date OR L.Leave_End_Date BETWEEN P.Project_Start_Date AND P.Project_End_Date)"
    },
    {
        "id": 34593,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that is out of stock and has a price greater than $50.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for a product that is out of stock and has a price greater than $50.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'Out of Stock' AND pr.Product_Price > 50;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Supplier.Supplier_Name\nFROM Supplier\nJOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID\nJOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID\nJOIN Product ON Purchase_Item.Product_ID = Product.Product_ID\nWHERE Product.Product_Stock = 0 AND Product.Product_Price > 50;\n```",
        "prompt_token_number": 278,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT Supplier.Supplier_Name FROM Supplier JOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID JOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID JOIN Product ON Purchase_Item.Product_ID = Product.Product_ID WHERE Product.Product_Stock = 0 AND Product.Product_Price > 50"
    },
    {
        "id": 34594,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to human resources and have not taken any leave of absence during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to human resources and have not taken any leave of absence during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Human Resources%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Task t ON e.Employee_ID = t.Employee_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nLEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID\nWHERE p.Department_ID = (SELECT Department_ID FROM Department WHERE Department_Name = 'Human Resources')\nAND (l.Leave_Start_Date IS NULL OR l.Leave_Start_Date NOT BETWEEN p.Project_Start_Date AND p.Project_End_Date)\nAND (l.Leave_End_Date IS NULL OR l.Leave_End_Date NOT BETWEEN p.Project_Start_Date AND p.Project_End_Date);\n```",
        "prompt_token_number": 354,
        "response_token_number": 124,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Task t ON e.Employee_ID = t.Employee_ID JOIN Project p ON t.Project_ID = p.Project_ID LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE p.Department_ID = (SELECT Department_ID FROM Department WHERE Department_Name = 'Human Resources') AND (l.Leave_Start_Date IS NULL OR l.Leave_Start_Date NOT BETWEEN p.Project_Start_Date AND p.Project_End_Date) AND (l.Leave_End_Date IS NULL OR l.Leave_End_Date NOT BETWEEN p.Project_Start_Date AND p.Project_End_Date)"
    },
    {
        "id": 34595,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a price between $50 and $100 and is currently in stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a price between $50 and $100 and is currently in stock.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Price BETWEEN 50 AND 100;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN Order o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Price BETWEEN 50 AND 100\n  AND p.Product_Stock > 0;\n```",
        "prompt_token_number": 297,
        "response_token_number": 72,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN Order o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price BETWEEN 50 AND 100 AND p.Product_Stock > 0"
    },
    {
        "id": 34596,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a discount of 30% or more and is currently in stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for a product that has a discount of 30% or more and is currently in stock.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'In Stock' AND pr.Product_Discount >= 0.3;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Supplier.Supplier_Name\nFROM Supplier\nJOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID\nJOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID\nJOIN Product ON Purchase_Item.Product_ID = Product.Product_ID\nWHERE Product.Product_Discount >= 30 AND Product.Product_Stock > 0;\n```",
        "prompt_token_number": 280,
        "response_token_number": 71,
        "response_text_processed": "SELECT DISTINCT Supplier.Supplier_Name FROM Supplier JOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID JOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID JOIN Product ON Purchase_Item.Product_ID = Product.Product_ID WHERE Product.Product_Discount >= 30 AND Product.Product_Stock > 0"
    },
    {
        "id": 34597,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to sales and have taken a leave of absence during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to sales and have taken a leave of absence during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Sales%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE l.Leave_ID IS NOT NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT E.Employee_Name\nFROM Employee E\nJOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID\nJOIN Task T ON TE.Task_ID = T.Task_ID\nJOIN Project P ON T.Project_ID = P.Project_ID\nJOIN Leave L ON E.Employee_ID = L.Employee_ID\nWHERE P.Project_Name LIKE '%sales%'\nAND L.Leave_Start_Date BETWEEN P.Project_Start_Date AND P.Project_End_Date;\n```",
        "prompt_token_number": 352,
        "response_token_number": 88,
        "response_text_processed": "SELECT DISTINCT E.Employee_Name FROM Employee E JOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID JOIN Task T ON TE.Task_ID = T.Task_ID JOIN Project P ON T.Project_ID = P.Project_ID JOIN Leave L ON E.Employee_ID = L.Employee_ID WHERE P.Project_Name LIKE '%sales%' AND L.Leave_Start_Date BETWEEN P.Project_Start_Date AND P.Project_End_Date"
    },
    {
        "id": 34598,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a discount of 15% or more and a price greater than $100.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a discount of 15% or more and a price greater than $100.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price > 100 AND p.Product_Discount >= 0.15;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN \"Order\" o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Discount >= 15\nAND p.Product_Price > 100;\n```",
        "prompt_token_number": 299,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN \"Order\" o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Discount >= 15 AND p.Product_Price > 100"
    },
    {
        "id": 34599,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on any projects in the last 6 months and have not taken any leave of absence during that period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have not worked on any projects in the last 6 months and have not taken any leave of absence during that period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN DATE('now', '-6 months') AND DATE('now') LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN DATE('now', '-6 months') AND DATE('now') WHERE t.Time_Entry_ID IS NULL AND l.Leave_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT\n    e.Employee_Name\nFROM\n    Employee e\nLEFT JOIN\n    Time_Entry te ON e.Employee_ID = te.Employee_ID\nLEFT JOIN\n    Leave l ON e.Employee_ID = l.Employee_ID\nWHERE\n    (te.Time_Entry_Date IS NULL OR te.Time_Entry_Date < DATE_SUB(CURDATE(), INTERVAL 6 MONTH))\n    AND (l.Leave_Start_Date IS NULL OR l.Leave_Start_Date < DATE_SUB(CURDATE(), INTERVAL 6 MONTH))\n    AND (l.Leave_End_Date IS NULL OR l.Leave_End_Date < DATE_SUB(CURDATE(), INTERVAL 6 MONTH))\nGROUP BY\n    e.Employee_ID\nHAVING\n    COUNT(te.Time_Entry_ID) = 0\n    AND COUNT(l.Leave_ID) = 0;\n```",
        "prompt_token_number": 238,
        "response_token_number": 165,
        "response_text_processed": "SELECT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE (te.Time_Entry_Date IS NULL OR te.Time_Entry_Date < DATE_SUB(CURDATE(), INTERVAL 6 MONTH)) AND (l.Leave_Start_Date IS NULL OR l.Leave_Start_Date < DATE_SUB(CURDATE(), INTERVAL 6 MONTH)) AND (l.Leave_End_Date IS NULL OR l.Leave_End_Date < DATE_SUB(CURDATE(), INTERVAL 6 MONTH)) GROUP BY e.Employee_ID HAVING COUNT(te.Time_Entry_ID) = 0 AND COUNT(l.Leave_ID) = 0"
    },
    {
        "id": 34600,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price less than $100 and is currently out of stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for a product that has a price less than $100 and is currently out of stock.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'Out of Stock' AND pr.Product_Price < 100;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT s.Supplier_Name\nFROM Supplier s\nJOIN Purchase p ON s.Supplier_ID = p.Supplier_ID\nJOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID\nJOIN Product pr ON pi.Product_ID = pr.Product_ID\nWHERE pr.Product_Price < 100 AND pr.Product_Stock = 0;\n```",
        "prompt_token_number": 279,
        "response_token_number": 72,
        "response_text_processed": "SELECT DISTINCT s.Supplier_Name FROM Supplier s JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID JOIN Product pr ON pi.Product_ID = pr.Product_ID WHERE pr.Product_Price < 100 AND pr.Product_Stock = 0"
    },
    {
        "id": 34603,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price greater than $100 and is currently out of stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for a product that has a price greater than $100 and is currently out of stock.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'Out of Stock' AND pr.Product_Price > 100;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT s.Supplier_Name\nFROM Supplier s\nJOIN Purchase p ON s.Supplier_ID = p.Supplier_ID\nJOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID\nJOIN Product pr ON pi.Product_ID = pr.Product_ID\nWHERE pr.Product_Price > 100 AND pr.Product_Stock = 0;\n```",
        "prompt_token_number": 279,
        "response_token_number": 72,
        "response_text_processed": "SELECT DISTINCT s.Supplier_Name FROM Supplier s JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID JOIN Product pr ON pi.Product_ID = pr.Product_ID WHERE pr.Product_Price > 100 AND pr.Product_Stock = 0"
    },
    {
        "id": 34604,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on any projects in the last 12 months and have not taken any leave of absence during that period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have not worked on any projects in the last 12 months and have not taken any leave of absence during that period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN DATE('now', '-12 months') AND DATE('now') LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN DATE('now', '-12 months') AND DATE('now') WHERE t.Time_Entry_ID IS NULL AND l.Leave_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT E.Employee_Name\nFROM Employee E\nLEFT JOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID AND TE.Time_Entry_Date >= DATEADD(YEAR, -1, GETDATE())\nLEFT JOIN Leave L ON E.Employee_ID = L.Employee_ID AND L.Leave_Start_Date >= DATEADD(YEAR, -1, GETDATE())\nWHERE TE.Time_Entry_ID IS NULL AND L.Leave_ID IS NULL;\n```",
        "prompt_token_number": 238,
        "response_token_number": 88,
        "response_text_processed": "SELECT E.Employee_Name FROM Employee E LEFT JOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID AND TE.Time_Entry_Date >= DATEADD(YEAR, -1, GETDATE()) LEFT JOIN Leave L ON E.Employee_ID = L.Employee_ID AND L.Leave_Start_Date >= DATEADD(YEAR, -1, GETDATE()) WHERE TE.Time_Entry_ID IS NULL AND L.Leave_ID IS NULL"
    },
    {
        "id": 34607,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a price less than $25 and is currently in stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a price less than $25 and is currently in stock.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Price < 25;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Price < 25 AND p.Product_Stock > 0;\n```",
        "prompt_token_number": 295,
        "response_token_number": 69,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price < 25 AND p.Product_Stock > 0"
    },
    {
        "id": 34609,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price greater than $200 and a discount of 20% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for a product that has a price greater than $200 and a discount of 20% or more.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price > 200 AND pr.Product_Discount >= 0.2;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Supplier.Supplier_Name\nFROM Supplier\nJOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID\nJOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID\nJOIN Product ON Purchase_Item.Product_ID = Product.Product_ID\nWHERE Product.Product_Price > 200 AND Product.Product_Discount >= 20;\n```",
        "prompt_token_number": 282,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT Supplier.Supplier_Name FROM Supplier JOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID JOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID JOIN Product ON Purchase_Item.Product_ID = Product.Product_ID WHERE Product.Product_Price > 200 AND Product.Product_Discount >= 20"
    },
    {
        "id": 34610,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to research and have not taken any leave of absence during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to research and have not taken any leave of absence during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Research%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE p.Project_Name LIKE '%research%'\nAND NOT EXISTS (\n    SELECT 1\n    FROM Leave l\n    WHERE l.Employee_ID = e.Employee_ID\n    AND l.Leave_Start_Date <= p.Project_End_Date\n    AND l.Leave_End_Date >= p.Project_Start_Date\n);\n```",
        "prompt_token_number": 353,
        "response_token_number": 110,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE p.Project_Name LIKE '%research%' AND NOT EXISTS ( SELECT 1 FROM Leave l WHERE l.Employee_ID = e.Employee_ID AND l.Leave_Start_Date <= p.Project_End_Date AND l.Leave_End_Date >= p.Project_Start_Date )"
    },
    {
        "id": 34611,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a discount of 15% or more and is currently in stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a discount of 15% or more and is currently in stock.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount >= 0.15;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Discount >= 15 AND p.Product_Stock > 0;\n```",
        "prompt_token_number": 297,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Discount >= 15 AND p.Product_Stock > 0"
    },
    {
        "id": 34613,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price less than $50 and is currently in stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for a product that has a price less than $50 and is currently in stock.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'In Stock' AND pr.Product_Price < 50;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Supplier.Supplier_Name\nFROM Supplier\nJOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID\nJOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID\nJOIN Product ON Purchase_Item.Product_ID = Product.Product_ID\nWHERE Product.Product_Price < 50 AND Product.Product_Stock > 0;\n```",
        "prompt_token_number": 278,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT Supplier.Supplier_Name FROM Supplier JOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID JOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID JOIN Product ON Purchase_Item.Product_ID = Product.Product_ID WHERE Product.Product_Price < 50 AND Product.Product_Stock > 0"
    },
    {
        "id": 34614,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on any projects in the last 6 months and have taken at least 10 days of leave of absence during that period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have not worked on any projects in the last 6 months and have taken at least 10 days of leave of absence during that period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN DATE('now', '-6 months') AND DATE('now') LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN DATE('now', '-6 months') AND DATE('now') AND l.Leave_Duration >= 10 WHERE t.Time_Entry_ID IS NULL AND l.Leave_ID IS NOT NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT e.Employee_Name\nFROM Employee e\nLEFT JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nLEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID\nWHERE (te.Time_Entry_Date IS NULL OR te.Time_Entry_Date < (CURRENT_DATE - INTERVAL 6 MONTH))\n  AND (l.Leave_Start_Date >= (CURRENT_DATE - INTERVAL 6 MONTH) AND l.Leave_Duration >= 10);\n```",
        "prompt_token_number": 242,
        "response_token_number": 91,
        "response_text_processed": "SELECT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE (te.Time_Entry_Date IS NULL OR te.Time_Entry_Date < (CURRENT_DATE - INTERVAL 6 MONTH)) AND (l.Leave_Start_Date >= (CURRENT_DATE - INTERVAL 6 MONTH) AND l.Leave_Duration >= 10)"
    },
    {
        "id": 34615,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a price between $75 and $100 and is currently in stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a price between $75 and $100 and is currently in stock.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Price BETWEEN 75 AND 100;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN \"Order\" o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Price BETWEEN 75 AND 100 AND p.Product_Stock > 0;\n```",
        "prompt_token_number": 297,
        "response_token_number": 72,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN \"Order\" o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price BETWEEN 75 AND 100 AND p.Product_Stock > 0"
    },
    {
        "id": 34617,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price between $100 and $150 and a discount of 10% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for a product that has a price between $100 and $150 and a discount of 10% or more.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price BETWEEN 100 AND 150 AND pr.Product_Discount >= 0.1;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Supplier.Supplier_Name \nFROM Supplier\nJOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID\nJOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID\nJOIN Product ON Purchase_Item.Product_ID = Product.Product_ID\nWHERE Product.Product_Price BETWEEN 100 AND 150\n  AND Product.Product_Discount >= 10;\n```",
        "prompt_token_number": 284,
        "response_token_number": 75,
        "response_text_processed": "SELECT DISTINCT Supplier.Supplier_Name FROM Supplier JOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID JOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID JOIN Product ON Purchase_Item.Product_ID = Product.Product_ID WHERE Product.Product_Price BETWEEN 100 AND 150 AND Product.Product_Discount >= 10"
    },
    {
        "id": 34618,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to software development and have taken at least 5 days of leave of absence during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to software development and have taken at least 5 days of leave of absence during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Software Development%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date AND l.Leave_Duration >= 5 WHERE l.Leave_ID IS NOT NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nJOIN Leave l ON e.Employee_ID = l.Employee_ID\nWHERE p.Project_Name LIKE '%software development%'\n  AND l.Leave_Start_Date >= p.Project_Start_Date\n  AND l.Leave_End_Date <= p.Project_End_Date\nGROUP BY e.Employee_Name\nHAVING SUM(DATEDIFF(l.Leave_End_Date, l.Leave_Start_Date) + 1) >= 5;\n```",
        "prompt_token_number": 358,
        "response_token_number": 129,
        "response_text_processed": "SELECT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE p.Project_Name LIKE '%software development%' AND l.Leave_Start_Date >= p.Project_Start_Date AND l.Leave_End_Date <= p.Project_End_Date GROUP BY e.Employee_Name HAVING SUM(DATEDIFF(l.Leave_End_Date, l.Leave_Start_Date) + 1) >= 5"
    },
    {
        "id": 34619,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a discount of 5% or less and is currently in stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a discount of 5% or less and is currently in stock.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount <= 0.05;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Discount <= 5 AND p.Product_Stock > 0;\n```",
        "prompt_token_number": 297,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Discount <= 5 AND p.Product_Stock > 0"
    },
    {
        "id": 34621,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price between $50 and $100 and is currently in stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for a product that has a price between $50 and $100 and is currently in stock.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'In Stock' AND pr.Product_Price BETWEEN 50 AND 100;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT s.Supplier_Name\nFROM Supplier s\nJOIN Purchase p ON s.Supplier_ID = p.Supplier_ID\nJOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID\nJOIN Product pr ON pi.Product_ID = pr.Product_ID\nWHERE pr.Product_Price BETWEEN 50 AND 100 AND pr.Product_Stock > 0;\n```",
        "prompt_token_number": 280,
        "response_token_number": 75,
        "response_text_processed": "SELECT DISTINCT s.Supplier_Name FROM Supplier s JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID JOIN Product pr ON pi.Product_ID = pr.Product_ID WHERE pr.Product_Price BETWEEN 50 AND 100 AND pr.Product_Stock > 0"
    },
    {
        "id": 34622,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to data analysis and have not taken any leave of absence during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to data analysis and have not taken any leave of absence during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Data Analysis%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT e.Employee_Name\nFROM Employee e\nJOIN Task t ON e.Employee_ID = t.Employee_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nLEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID\nWHERE p.Project_Name LIKE '%data analysis%'\nAND (l.Leave_Start_Date IS NULL OR l.Leave_Start_Date NOT BETWEEN p.Project_Start_Date AND p.Project_End_Date)\nAND (l.Leave_End_Date IS NULL OR l.Leave_End_Date NOT BETWEEN p.Project_Start_Date AND p.Project_End_Date);\n```",
        "prompt_token_number": 354,
        "response_token_number": 113,
        "response_text_processed": "SELECT e.Employee_Name FROM Employee e JOIN Task t ON e.Employee_ID = t.Employee_ID JOIN Project p ON t.Project_ID = p.Project_ID LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE p.Project_Name LIKE '%data analysis%' AND (l.Leave_Start_Date IS NULL OR l.Leave_Start_Date NOT BETWEEN p.Project_Start_Date AND p.Project_End_Date) AND (l.Leave_End_Date IS NULL OR l.Leave_End_Date NOT BETWEEN p.Project_Start_Date AND p.Project_End_Date)"
    },
    {
        "id": 34623,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a discount of 10% or more and is currently out of stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a discount of 10% or more and is currently out of stock.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Discount >= 0.1;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Discount >= 10 AND p.Product_Stock = 0;\n```",
        "prompt_token_number": 298,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Discount >= 10 AND p.Product_Stock = 0"
    },
    {
        "id": 34625,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a discount of 25% or more and is currently in stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for a product that has a discount of 25% or more and is currently in stock.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'In Stock' AND pr.Product_Discount >= 0.25;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT s.Supplier_Name\nFROM Supplier s\nJOIN Purchase p ON s.Supplier_ID = p.Supplier_ID\nJOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID\nJOIN Product pr ON pi.Product_ID = pr.Product_ID\nWHERE pr.Product_Discount >= 25 AND pr.Product_Stock > 0;\n```",
        "prompt_token_number": 280,
        "response_token_number": 73,
        "response_text_processed": "SELECT DISTINCT s.Supplier_Name FROM Supplier s JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID JOIN Product pr ON pi.Product_ID = pr.Product_ID WHERE pr.Product_Discount >= 25 AND pr.Product_Stock > 0"
    },
    {
        "id": 34626,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a price greater than $200 and is currently out of stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a price greater than $200 and is currently out of stock.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Price > 200;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN \"Order\" o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Price > 200 AND p.Product_Stock = 0;\n```",
        "prompt_token_number": 296,
        "response_token_number": 69,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN \"Order\" o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price > 200 AND p.Product_Stock = 0"
    },
    {
        "id": 34629,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to marketing and have taken at least 3 days of leave of absence during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to marketing and have taken at least 3 days of leave of absence during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Marketing%' INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date AND l.Leave_Duration >= 3;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nJOIN Leave l ON e.Employee_ID = l.Employee_ID\nWHERE p.Project_Name LIKE '%marketing%'\nAND l.Leave_Duration >= 3\nAND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date\nAND l.Leave_End_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date;\n```",
        "prompt_token_number": 357,
        "response_token_number": 115,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE p.Project_Name LIKE '%marketing%' AND l.Leave_Duration >= 3 AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date AND l.Leave_End_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date"
    },
    {
        "id": 34630,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently out of stock and has a discount of 20% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is currently out of stock and has a discount of 20% or more.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Discount >= 0.2;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN [Order] o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Stock = 0 AND p.Product_Discount >= 20;\n```",
        "prompt_token_number": 298,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN [Order] o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock = 0 AND p.Product_Discount >= 20"
    },
    {
        "id": 34632,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price between $150 and $200 and a discount of 15% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for a product that has a price between $150 and $200 and a discount of 15% or more.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price BETWEEN 150 AND 200 AND pr.Product_Discount >= 0.15;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT s.Supplier_Name\nFROM Supplier s\nJOIN Purchase p ON s.Supplier_ID = p.Supplier_ID\nJOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID\nJOIN Product pr ON pi.Product_ID = pr.Product_ID\nWHERE pr.Product_Price BETWEEN 150 AND 200\nAND pr.Product_Discount >= 15;\n```",
        "prompt_token_number": 284,
        "response_token_number": 76,
        "response_text_processed": "SELECT DISTINCT s.Supplier_Name FROM Supplier s JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID JOIN Product pr ON pi.Product_ID = pr.Product_ID WHERE pr.Product_Price BETWEEN 150 AND 200 AND pr.Product_Discount >= 15"
    },
    {
        "id": 34633,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 10% or less.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 10% or less.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount <= 0.1;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name \nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Stock > 0 AND p.Product_Discount <= 10;\n```",
        "prompt_token_number": 297,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock > 0 AND p.Product_Discount <= 10"
    },
    {
        "id": 34635,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that is currently in stock and has a price less than $100.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for a product that is currently in stock and has a price less than $100.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Status = 'In Stock' AND pr.Product_Price < 100;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT s.Supplier_Name\nFROM Supplier s\nJOIN Purchase p ON s.Supplier_ID = p.Supplier_ID\nJOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID\nJOIN Product pr ON pi.Product_ID = pr.Product_ID\nWHERE pr.Product_Stock > 0 AND pr.Product_Price < 100;\n```",
        "prompt_token_number": 278,
        "response_token_number": 72,
        "response_text_processed": "SELECT DISTINCT s.Supplier_Name FROM Supplier s JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID JOIN Product pr ON pi.Product_ID = pr.Product_ID WHERE pr.Product_Stock > 0 AND pr.Product_Price < 100"
    },
    {
        "id": 34636,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to customer service and have not taken any leave of absence during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to customer service and have not taken any leave of absence during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Customer Service%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(l.Leave_ID) = 0;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Task t ON e.Employee_ID = t.Employee_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nLEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID\nWHERE p.Project_Name LIKE '%customer service%'\n  AND (l.Leave_ID IS NULL OR (l.Leave_Start_Date > p.Project_End_Date OR l.Leave_End_Date < p.Project_Start_Date));\n```",
        "prompt_token_number": 354,
        "response_token_number": 93,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Task t ON e.Employee_ID = t.Employee_ID JOIN Project p ON t.Project_ID = p.Project_ID LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE p.Project_Name LIKE '%customer service%' AND (l.Leave_ID IS NULL OR (l.Leave_Start_Date > p.Project_End_Date OR l.Leave_End_Date < p.Project_Start_Date))"
    },
    {
        "id": 34637,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 5% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 5% or more.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount >= 0.05;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT C.Customer_Name\nFROM Customer C\nJOIN `Order` O ON C.Customer_ID = O.Customer_ID\nJOIN Order_Item OI ON O.Order_ID = OI.Order_ID\nJOIN Product P ON OI.Product_ID = P.Product_ID\nWHERE P.Product_Stock > 0 AND P.Product_Discount >= 5;\n```",
        "prompt_token_number": 297,
        "response_token_number": 73,
        "response_text_processed": "SELECT DISTINCT C.Customer_Name FROM Customer C JOIN `Order` O ON C.Customer_ID = O.Customer_ID JOIN Order_Item OI ON O.Order_ID = OI.Order_ID JOIN Product P ON OI.Product_ID = P.Product_ID WHERE P.Product_Stock > 0 AND P.Product_Discount >= 5"
    },
    {
        "id": 34639,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to research and development and have taken at least one leave of absence during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to research and development and have taken at least one leave of absence during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Research and Development%' INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nJOIN Leave l ON e.Employee_ID = l.Employee_ID\nWHERE p.Project_Name LIKE '%research and development%'\n  AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date;\n```",
        "prompt_token_number": 356,
        "response_token_number": 91,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE p.Project_Name LIKE '%research and development%' AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date"
    },
    {
        "id": 34640,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently out of stock and has a discount of 10% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is currently out of stock and has a discount of 10% or more.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Discount >= 0.1;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Stock = 0 AND p.Product_Discount >= 10;\n```",
        "prompt_token_number": 298,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock = 0 AND p.Product_Discount >= 10"
    },
    {
        "id": 34642,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price greater than $500 and a discount of 25% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for a product that has a price greater than $500 and a discount of 25% or more.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price > 500 AND pr.Product_Discount >= 0.25;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT s.Supplier_Name\nFROM Supplier s\nJOIN Purchase p ON s.Supplier_ID = p.Supplier_ID\nJOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID\nJOIN Product pr ON pi.Product_ID = pr.Product_ID\nWHERE pr.Product_Price > 500 AND pr.Product_Discount >= 25;\n```",
        "prompt_token_number": 282,
        "response_token_number": 72,
        "response_text_processed": "SELECT DISTINCT s.Supplier_Name FROM Supplier s JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID JOIN Product pr ON pi.Product_ID = pr.Product_ID WHERE pr.Product_Price > 500 AND pr.Product_Discount >= 25"
    },
    {
        "id": 34643,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have not received any purchases for a product that has a price less than $50.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have not received any purchases for a product that has a price less than $50.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID LEFT JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID LEFT JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price < 50 WHERE pi.Product_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT Supplier_Name \nFROM Supplier \nWHERE Supplier_ID NOT IN (\n    SELECT Supplier.Supplier_ID \n    FROM Supplier \n    JOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID \n    JOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID \n    JOIN Product ON Purchase_Item.Product_ID = Product.Product_ID \n    WHERE Product.Product_Price < 50\n);\n```",
        "prompt_token_number": 275,
        "response_token_number": 81,
        "response_text_processed": "SELECT Supplier_Name FROM Supplier WHERE Supplier_ID NOT IN ( SELECT Supplier.Supplier_ID FROM Supplier JOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID JOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID JOIN Product ON Purchase_Item.Product_ID = Product.Product_ID WHERE Product.Product_Price < 50 )"
    },
    {
        "id": 34644,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to marketing and have taken at least two leave of absences during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to marketing and have taken at least two leave of absences during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Marketing%' INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID HAVING COUNT(DISTINCT l.Leave_ID) >= 2;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Leave l ON e.Employee_ID = l.Employee_ID\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE p.Project_Name LIKE '%marketing%'\n  AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date\n  AND (SELECT COUNT(*) FROM Leave l2 WHERE l2.Employee_ID = e.Employee_ID AND l2.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date) >= 2;\n```",
        "prompt_token_number": 355,
        "response_token_number": 130,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Leave l ON e.Employee_ID = l.Employee_ID JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE p.Project_Name LIKE '%marketing%' AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date AND (SELECT COUNT(*) FROM Leave l2 WHERE l2.Employee_ID = e.Employee_ID AND l2.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date) >= 2"
    },
    {
        "id": 34645,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 15% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 15% or more.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount >= 0.15;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Stock > 0 AND p.Product_Discount >= 15;\n```",
        "prompt_token_number": 297,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock > 0 AND p.Product_Discount >= 15"
    },
    {
        "id": 34648,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 30% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 30% or more.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount >= 0.3;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT C.Customer_Name\nFROM Customer C\nJOIN \"Order\" O ON C.Customer_ID = O.Customer_ID\nJOIN Order_Item OI ON O.Order_ID = OI.Order_ID\nJOIN Product P ON OI.Product_ID = P.Product_ID\nWHERE P.Product_Stock > 0 AND P.Product_Discount >= 30;\n```",
        "prompt_token_number": 297,
        "response_token_number": 73,
        "response_text_processed": "SELECT DISTINCT C.Customer_Name FROM Customer C JOIN \"Order\" O ON C.Customer_ID = O.Customer_ID JOIN Order_Item OI ON O.Order_ID = OI.Order_ID JOIN Product P ON OI.Product_ID = P.Product_ID WHERE P.Product_Stock > 0 AND P.Product_Discount >= 30"
    },
    {
        "id": 34650,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have not received any purchases for a product that has a price less than $100 and a discount of 15% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have not received any purchases for a product that has a price less than $100 and a discount of 15% or more.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID LEFT JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID LEFT JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price < 100 AND pr.Product_Discount >= 0.15 WHERE pi.Product_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT s.Supplier_Name\nFROM Supplier s\nWHERE s.Supplier_ID NOT IN (\n    SELECT p.Supplier_ID\n    FROM Purchase p\n    JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID\n    JOIN Product pr ON pi.Product_ID = pr.Product_ID\n    WHERE pr.Product_Price < 100 AND pr.Product_Discount >= 15\n);\n```",
        "prompt_token_number": 284,
        "response_token_number": 81,
        "response_text_processed": "SELECT s.Supplier_Name FROM Supplier s WHERE s.Supplier_ID NOT IN ( SELECT p.Supplier_ID FROM Purchase p JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID JOIN Product pr ON pi.Product_ID = pr.Product_ID WHERE pr.Product_Price < 100 AND pr.Product_Discount >= 15 )"
    },
    {
        "id": 34651,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to sales and have taken at least one leave of absence during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to sales and have taken at least one leave of absence during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Sales%' INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT E.Employee_Name\nFROM Employee E\nJOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID\nJOIN Task T ON TE.Task_ID = T.Task_ID\nJOIN Project P ON T.Project_ID = P.Project_ID\nJOIN Leave L ON E.Employee_ID = L.Employee_ID\nWHERE P.Project_Name LIKE '%sales%'\nAND L.Leave_Start_Date BETWEEN P.Project_Start_Date AND P.Project_End_Date;\n```",
        "prompt_token_number": 354,
        "response_token_number": 88,
        "response_text_processed": "SELECT DISTINCT E.Employee_Name FROM Employee E JOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID JOIN Task T ON TE.Task_ID = T.Task_ID JOIN Project P ON T.Project_ID = P.Project_ID JOIN Leave L ON E.Employee_ID = L.Employee_ID WHERE P.Project_Name LIKE '%sales%' AND L.Leave_Start_Date BETWEEN P.Project_Start_Date AND P.Project_End_Date"
    },
    {
        "id": 34652,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently in stock and has a discount between 5% and 10%.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is currently in stock and has a discount between 5% and 10%.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount BETWEEN 0.05 AND 0.1;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name \nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Stock > 0\nAND p.Product_Discount BETWEEN 5 AND 10;\n```",
        "prompt_token_number": 299,
        "response_token_number": 74,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock > 0 AND p.Product_Discount BETWEEN 5 AND 10"
    },
    {
        "id": 34654,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price between $50 and $100 and a discount of 20% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for a product that has a price between $50 and $100 and a discount of 20% or more.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price BETWEEN 50 AND 100 AND pr.Product_Discount >= 0.2;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT s.Supplier_Name\nFROM Supplier s\nJOIN Purchase p ON s.Supplier_ID = p.Supplier_ID\nJOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID\nJOIN Product pr ON pi.Product_ID = pr.Product_ID\nWHERE pr.Product_Price BETWEEN 50 AND 100 \n  AND pr.Product_Discount >= 20;\n```",
        "prompt_token_number": 284,
        "response_token_number": 77,
        "response_text_processed": "SELECT DISTINCT s.Supplier_Name FROM Supplier s JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID JOIN Product pr ON pi.Product_ID = pr.Product_ID WHERE pr.Product_Price BETWEEN 50 AND 100 AND pr.Product_Discount >= 20"
    },
    {
        "id": 34655,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on any projects in the last year and have not taken any leave of absence during that period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have not worked on any projects in the last year and have not taken any leave of absence during that period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN DATE('now', '-1 year') AND DATE('now') LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN DATE('now', '-1 year') AND DATE('now') WHERE t.Time_Entry_ID IS NULL AND l.Leave_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT e.Employee_Name\nFROM Employee e\nLEFT JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID AND te.Time_Entry_Date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\nLEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_End_Date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\nWHERE te.Time_Entry_ID IS NULL AND l.Leave_ID IS NULL;\n```",
        "prompt_token_number": 236,
        "response_token_number": 88,
        "response_text_processed": "SELECT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID AND te.Time_Entry_Date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_End_Date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) WHERE te.Time_Entry_ID IS NULL AND l.Leave_ID IS NULL"
    },
    {
        "id": 34656,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently out of stock and has a discount between 10% and 20%.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is currently out of stock and has a discount between 10% and 20%.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Discount BETWEEN 0.1 AND 0.2;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT C.Customer_Name\nFROM Customer C\nJOIN `Order` O ON C.Customer_ID = O.Customer_ID\nJOIN Order_Item OI ON O.Order_ID = OI.Order_ID\nJOIN Product P ON OI.Product_ID = P.Product_ID\nWHERE P.Product_Stock = 0\nAND P.Product_Discount BETWEEN 10 AND 20;\n```",
        "prompt_token_number": 300,
        "response_token_number": 77,
        "response_text_processed": "SELECT DISTINCT C.Customer_Name FROM Customer C JOIN `Order` O ON C.Customer_ID = O.Customer_ID JOIN Order_Item OI ON O.Order_ID = OI.Order_ID JOIN Product P ON OI.Product_ID = P.Product_ID WHERE P.Product_Stock = 0 AND P.Product_Discount BETWEEN 10 AND 20"
    },
    {
        "id": 34657,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have not received any purchases for a product that has a price less than $50 and a discount of 10% or less.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have not received any purchases for a product that has a price less than $50 and a discount of 10% or less.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID LEFT JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID LEFT JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price < 50 AND pr.Product_Discount <= 0.1 WHERE pi.Product_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT s.Supplier_Name\nFROM Supplier s\nWHERE s.Supplier_ID NOT IN (\n  SELECT p.Supplier_ID\n  FROM Purchase p\n  JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID\n  JOIN Product pr ON pi.Product_ID = pr.Product_ID\n  WHERE pr.Product_Price < 50 AND pr.Product_Discount <= 10\n);\n```",
        "prompt_token_number": 284,
        "response_token_number": 81,
        "response_text_processed": "SELECT s.Supplier_Name FROM Supplier s WHERE s.Supplier_ID NOT IN ( SELECT p.Supplier_ID FROM Purchase p JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID JOIN Product pr ON pi.Product_ID = pr.Product_ID WHERE pr.Product_Price < 50 AND pr.Product_Discount <= 10 )"
    },
    {
        "id": 34658,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 25% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 25% or more.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount >= 0.25;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Stock > 0\nAND p.Product_Discount >= 25;\n```",
        "prompt_token_number": 297,
        "response_token_number": 71,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock > 0 AND p.Product_Discount >= 25"
    },
    {
        "id": 34660,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price greater than $75 and a discount of 5% or less.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for a product that has a price greater than $75 and a discount of 5% or less.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price > 75 AND pr.Product_Discount <= 0.05;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT s.Supplier_Name\nFROM Supplier s\nJOIN Purchase p ON s.Supplier_ID = p.Supplier_ID\nJOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID\nJOIN Product pr ON pi.Product_ID = pr.Product_ID\nWHERE pr.Product_Price > 75 AND pr.Product_Discount <= 5;\n```",
        "prompt_token_number": 282,
        "response_token_number": 72,
        "response_text_processed": "SELECT DISTINCT s.Supplier_Name FROM Supplier s JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID JOIN Product pr ON pi.Product_ID = pr.Product_ID WHERE pr.Product_Price > 75 AND pr.Product_Discount <= 5"
    },
    {
        "id": 34661,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on any projects in the last 3 months and have taken at least one leave of absence during that period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have not worked on any projects in the last 3 months and have taken at least one leave of absence during that period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN DATE('now', '-3 months') AND DATE('now') LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN DATE('now', '-3 months') AND DATE('now') WHERE t.Time_Entry_ID IS NULL AND l.Leave_ID IS NOT NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT E.Employee_Name\nFROM Employee E\nWHERE E.Employee_ID NOT IN (\n    SELECT TE.Employee_ID \n    FROM Time_Entry TE \n    WHERE TE.Time_Entry_Date >= DATEADD(MONTH, -3, GETDATE())\n)\nAND E.Employee_ID IN (\n    SELECT L.Employee_ID \n    FROM Leave L \n    WHERE L.Leave_Start_Date >= DATEADD(MONTH, -3, GETDATE())\n);\n```",
        "prompt_token_number": 239,
        "response_token_number": 90,
        "response_text_processed": "SELECT E.Employee_Name FROM Employee E WHERE E.Employee_ID NOT IN ( SELECT TE.Employee_ID FROM Time_Entry TE WHERE TE.Time_Entry_Date >= DATEADD(MONTH, -3, GETDATE()) ) AND E.Employee_ID IN ( SELECT L.Employee_ID FROM Leave L WHERE L.Leave_Start_Date >= DATEADD(MONTH, -3, GETDATE()) )"
    },
    {
        "id": 34662,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently out of stock and has a discount of 30% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is currently out of stock and has a discount of 30% or more.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Discount >= 0.3;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Stock = 0 AND p.Product_Discount >= 30;\n```",
        "prompt_token_number": 298,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock = 0 AND p.Product_Discount >= 30"
    },
    {
        "id": 34664,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for a product that has a price less than $100 and a discount of 5% or less, but have not received any purchases for a product that has a price greater than $100 and a discount of 10% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for a product that has a price less than $100 and a discount of 5% or less, but have not received any purchases for a product that has a price greater than $100 and a discount of 10% or more.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price < 100 AND pr.Product_Discount <= 0.05 WHERE s.Supplier_ID NOT IN ( SELECT s2.Supplier_ID FROM Supplier s2 INNER JOIN Purchase p2 ON s2.Supplier_ID = p2.Supplier_ID INNER JOIN Purchase_Item pi2 ON p2.Purchase_ID = pi2.Purchase_ID INNER JOIN Product pr2 ON pi2.Product_ID = pr2.Product_ID AND pr2.Product_Price > 100 AND pr2.Product_Discount >= 0.1 );",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT s.Supplier_Name\nFROM Supplier s\nJOIN Purchase p ON s.Supplier_ID = p.Supplier_ID\nJOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID\nJOIN Product pr ON pi.Product_ID = pr.Product_ID\nWHERE pr.Product_Price < 100 AND pr.Product_Discount <= 5\nAND s.Supplier_ID NOT IN (\n    SELECT s2.Supplier_ID\n    FROM Supplier s2\n    JOIN Purchase p2 ON s2.Supplier_ID = p2.Supplier_ID\n    JOIN Purchase_Item pi2 ON p2.Purchase_ID = pi2.Purchase_ID\n    JOIN Product pr2 ON pi2.Product_ID = pr2.Product_ID\n    WHERE pr2.Product_Price > 100 AND pr2.Product_Discount >= 10\n);\n```",
        "prompt_token_number": 309,
        "response_token_number": 167,
        "response_text_processed": "SELECT DISTINCT s.Supplier_Name FROM Supplier s JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID JOIN Product pr ON pi.Product_ID = pr.Product_ID WHERE pr.Product_Price < 100 AND pr.Product_Discount <= 5 AND s.Supplier_ID NOT IN ( SELECT s2.Supplier_ID FROM Supplier s2 JOIN Purchase p2 ON s2.Supplier_ID = p2.Supplier_ID JOIN Purchase_Item pi2 ON p2.Purchase_ID = pi2.Purchase_ID JOIN Product pr2 ON pi2.Product_ID = pr2.Product_ID WHERE pr2.Product_Price > 100 AND pr2.Product_Discount >= 10 )"
    },
    {
        "id": 34665,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 20% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is currently in stock and has a discount of 20% or more.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Discount >= 0.2;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Stock > 0 AND p.Product_Discount >= 20;\n```",
        "prompt_token_number": 297,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock > 0 AND p.Product_Discount >= 20"
    },
    {
        "id": 34667,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have not received any purchases for a product that has a price greater than $200 and a discount of 15% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have not received any purchases for a product that has a price greater than $200 and a discount of 15% or more.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID LEFT JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID LEFT JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price > 200 AND pr.Product_Discount >= 0.15 WHERE pi.Product_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT S.Supplier_Name\nFROM Supplier S\nWHERE S.Supplier_ID NOT IN (\n    SELECT P.Supplier_ID\n    FROM Purchase P\n    JOIN Purchase_Item PI ON P.Purchase_ID = PI.Purchase_ID\n    JOIN Product PR ON PI.Product_ID = PR.Product_ID\n    WHERE PR.Product_Price > 200 AND PR.Product_Discount >= 15\n);\n```",
        "prompt_token_number": 284,
        "response_token_number": 81,
        "response_text_processed": "SELECT S.Supplier_Name FROM Supplier S WHERE S.Supplier_ID NOT IN ( SELECT P.Supplier_ID FROM Purchase P JOIN Purchase_Item PI ON P.Purchase_ID = PI.Purchase_ID JOIN Product PR ON PI.Product_ID = PR.Product_ID WHERE PR.Product_Price > 200 AND PR.Product_Discount >= 15 )"
    },
    {
        "id": 34668,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently out of stock and has a discount of 50% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is currently out of stock and has a discount of 50% or more.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Discount >= 0.5;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Stock = 0 AND p.Product_Discount >= 50;\n```",
        "prompt_token_number": 298,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock = 0 AND p.Product_Discount >= 50"
    },
    {
        "id": 34670,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have not received any purchases for a product that has a price less than $50 and a discount of 10% or more.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have not received any purchases for a product that has a price less than $50 and a discount of 10% or more.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID LEFT JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID LEFT JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price < 50 AND pr.Product_Discount >= 0.1 WHERE pi.Product_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT s.Supplier_Name\nFROM Supplier s\nWHERE s.Supplier_ID NOT IN (\n    SELECT DISTINCT p.Supplier_ID\n    FROM Purchase pu\n    JOIN Purchase_Item pi ON pu.Purchase_ID = pi.Purchase_ID\n    JOIN Product p ON pi.Product_ID = p.Product_ID\n    WHERE p.Product_Price < 50 AND p.Product_Discount >= 10\n);\n```",
        "prompt_token_number": 284,
        "response_token_number": 82,
        "response_text_processed": "SELECT s.Supplier_Name FROM Supplier s WHERE s.Supplier_ID NOT IN ( SELECT DISTINCT p.Supplier_ID FROM Purchase pu JOIN Purchase_Item pi ON pu.Purchase_ID = pi.Purchase_ID JOIN Product p ON pi.Product_ID = p.Product_ID WHERE p.Product_Price < 50 AND p.Product_Discount >= 10 )"
    },
    {
        "id": 34671,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that is related to software development and have not taken any leave of absences during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that is related to software development and have not taken any leave of absences during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Software Development%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE l.Leave_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE p.Project_Name LIKE '%software development%' AND NOT EXISTS (\n    SELECT 1\n    FROM Leave l\n    WHERE l.Employee_ID = e.Employee_ID\n      AND l.Leave_Start_Date <= p.Project_End_Date\n      AND l.Leave_End_Date >= p.Project_Start_Date\n);\n```",
        "prompt_token_number": 355,
        "response_token_number": 111,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE p.Project_Name LIKE '%software development%' AND NOT EXISTS ( SELECT 1 FROM Leave l WHERE l.Employee_ID = e.Employee_ID AND l.Leave_Start_Date <= p.Project_End_Date AND l.Leave_End_Date >= p.Project_Start_Date )"
    },
    {
        "id": 34672,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status']} and \n# the user question: List the names of all customers who have not placed an order in the last year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have not placed an order in the last year.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c LEFT JOIN Order o ON c.Customer_ID = o.Customer_ID AND o.Order_Date BETWEEN DATE('now', '-1 year') AND DATE('now') WHERE o.Order_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ]
        },
        "response_text": "```sql\nSELECT c.Customer_Name\nFROM Customer c\nWHERE c.Customer_ID NOT IN (\n    SELECT o.Customer_ID\n    FROM `Order` o\n    WHERE o.Order_Date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\n);\n```",
        "prompt_token_number": 167,
        "response_token_number": 51,
        "response_text_processed": "SELECT c.Customer_Name FROM Customer c WHERE c.Customer_ID NOT IN ( SELECT o.Customer_ID FROM `Order` o WHERE o.Order_Date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) )"
    },
    {
        "id": 34676,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for products that have a price less than $50 and a discount of 10% or more in the last 3 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for products that have a price less than $50 and a discount of 10% or more in the last 3 months.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID AND p.Purchase_Date BETWEEN DATE('now', '-3 months') AND DATE('now') INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price < 50 AND pr.Product_Discount >= 0.1;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Supplier.Supplier_Name\nFROM Supplier\nJOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID\nJOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID\nJOIN Product ON Purchase_Item.Product_ID = Product.Product_ID\nWHERE Product.Product_Price < 50 \n  AND Product.Product_Discount >= 10\n  AND Purchase.Purchase_Date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);\n```",
        "prompt_token_number": 287,
        "response_token_number": 90,
        "response_text_processed": "SELECT DISTINCT Supplier.Supplier_Name FROM Supplier JOIN Purchase ON Supplier.Supplier_ID = Purchase.Supplier_ID JOIN Purchase_Item ON Purchase.Purchase_ID = Purchase_Item.Purchase_ID JOIN Product ON Purchase_Item.Product_ID = Product.Product_ID WHERE Product.Product_Price < 50 AND Product.Product_Discount >= 10 AND Purchase.Purchase_Date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)"
    },
    {
        "id": 34677,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on at least two projects related to software development and have not taken any leave of absences during those project periods.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on at least two projects related to software development and have not taken any leave of absences during those project periods.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Software Development%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID HAVING COUNT(DISTINCT p.Project_ID) >= 2 AND COUNT(DISTINCT l.Leave_ID) = 0;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Task t ON e.Employee_ID = t.Employee_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE p.Project_Name LIKE '%software development%'\nGROUP BY e.Employee_ID\nHAVING COUNT(DISTINCT p.Project_ID) >= 2 AND\nNOT EXISTS (\n    SELECT 1\n    FROM Leave l\n    WHERE l.Employee_ID = e.Employee_ID AND\n          EXISTS (\n              SELECT 1\n              FROM Project p1\n              WHERE p1.Project_ID = t.Project_ID AND\n                    (\n                        (l.Leave_Start_Date BETWEEN p1.Project_Start_Date AND p1.Project_End_Date) OR\n                        (l.Leave_End_Date BETWEEN p1.Project_Start_Date AND p1.Project_End_Date) OR\n                        (l.Leave_Start_Date <= p1.Project_Start_Date AND l.Leave_End_Date >= p1.Project_End_Date)\n                    )\n          )\n);\n```",
        "prompt_token_number": 355,
        "response_token_number": 195,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Task t ON e.Employee_ID = t.Employee_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE p.Project_Name LIKE '%software development%' GROUP BY e.Employee_ID HAVING COUNT(DISTINCT p.Project_ID) >= 2 AND NOT EXISTS ( SELECT 1 FROM Leave l WHERE l.Employee_ID = e.Employee_ID AND EXISTS ( SELECT 1 FROM Project p1 WHERE p1.Project_ID = t.Project_ID AND ( (l.Leave_Start_Date BETWEEN p1.Project_Start_Date AND p1.Project_End_Date) OR (l.Leave_End_Date BETWEEN p1.Project_Start_Date AND p1.Project_End_Date) OR (l.Leave_Start_Date <= p1.Project_Start_Date AND l.Leave_End_Date >= p1.Project_End_Date) ) ) )"
    },
    {
        "id": 34678,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently in stock and has a price greater than $100.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is currently in stock and has a price greater than $100.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Price > 100;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Stock > 0 AND p.Product_Price > 100;\n```",
        "prompt_token_number": 295,
        "response_token_number": 69,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock > 0 AND p.Product_Price > 100"
    },
    {
        "id": 34680,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on at least one project that is related to marketing and at least one project that is related to software development, and have not taken any leave of absence during those project periods.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on at least one project that is related to marketing and at least one project that is related to software development, and have not taken any leave of absence during those project periods.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE p.Project_Name LIKE '%Marketing%' OR p.Project_Name LIKE '%Software Development%' GROUP BY e.Employee_ID HAVING COUNT(DISTINCT CASE WHEN p.Project_Name LIKE '%Marketing%' THEN p.Project_ID ELSE NULL END) >= 1 AND COUNT(DISTINCT CASE WHEN p.Project_Name LIKE '%Software Development%' THEN p.Project_ID ELSE NULL END) >= 1 AND COUNT(DISTINCT l.Leave_ID) = 0;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT E1.Employee_Name\nFROM Employee E1\nJOIN Project P1 ON E1.Employee_ID = P1.Project_Manager_ID\nJOIN Project P2 ON E1.Employee_ID = P2.Project_Manager_ID\nWHERE P1.Project_Name LIKE '%marketing%'\nAND P2.Project_Name LIKE '%software development%'\nAND NOT EXISTS (\n    SELECT 1\n    FROM Leave L\n    WHERE L.Employee_ID = E1.Employee_ID\n    AND (\n        (L.Leave_Start_Date BETWEEN P1.Project_Start_Date AND COALESCE(P1.Project_End_Date, CURRENT_DATE))\n        OR\n        (L.Leave_End_Date BETWEEN P1.Project_Start_Date AND COALESCE(P1.Project_End_Date, CURRENT_DATE))\n        OR\n        (L.Leave_Start_Date BETWEEN P2.Project_Start_Date AND COALESCE(P2.Project_End_Date, CURRENT_DATE))\n        OR\n        (L.Leave_End_Date BETWEEN P2.Project_Start_Date AND COALESCE(P2.Project_End_Date, CURRENT_DATE))\n    )\n);\n```",
        "prompt_token_number": 367,
        "response_token_number": 211,
        "response_text_processed": "SELECT DISTINCT E1.Employee_Name FROM Employee E1 JOIN Project P1 ON E1.Employee_ID = P1.Project_Manager_ID JOIN Project P2 ON E1.Employee_ID = P2.Project_Manager_ID WHERE P1.Project_Name LIKE '%marketing%' AND P2.Project_Name LIKE '%software development%' AND NOT EXISTS ( SELECT 1 FROM Leave L WHERE L.Employee_ID = E1.Employee_ID AND ( (L.Leave_Start_Date BETWEEN P1.Project_Start_Date AND COALESCE(P1.Project_End_Date, CURRENT_DATE)) OR (L.Leave_End_Date BETWEEN P1.Project_Start_Date AND COALESCE(P1.Project_End_Date, CURRENT_DATE)) OR (L.Leave_Start_Date BETWEEN P2.Project_Start_Date AND COALESCE(P2.Project_End_Date, CURRENT_DATE)) OR (L.Leave_End_Date BETWEEN P2.Project_Start_Date AND COALESCE(P2.Project_End_Date, CURRENT_DATE)) ) )"
    },
    {
        "id": 34681,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Order_Detail': ['Order_ID', 'Product_ID', 'Product_Price', 'Product_Quantity', 'Customer_ID', 'Supplier_ID', 'Order_Detail_Date', 'Order_Detail_ID', 'Order_Detail_Price', 'Order_Detail_Quantity']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently out of stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is currently out of stock.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Detail od ON o.Order_ID = od.Order_ID INNER JOIN Product p ON od.Product_ID = p.Product_ID AND p.Product_Quantity = 0;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Order_Detail": [
                "Order_ID",
                "Product_ID",
                "Product_Price",
                "Product_Quantity",
                "Customer_ID",
                "Supplier_ID",
                "Order_Detail_Date",
                "Order_Detail_ID",
                "Order_Detail_Price",
                "Order_Detail_Quantity"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Detail od ON o.Order_ID = od.Order_ID\nJOIN Product p ON od.Product_ID = p.Product_ID\nWHERE p.Product_Stock = 0;\n```",
        "prompt_token_number": 310,
        "response_token_number": 62,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Detail od ON o.Order_ID = od.Order_ID JOIN Product p ON od.Product_ID = p.Product_ID WHERE p.Product_Stock = 0"
    },
    {
        "id": 34682,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for products that have a price greater than $500 and a discount of less than 5%.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for products that have a price greater than $500 and a discount of less than 5%.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price > 500 AND pr.Product_Discount < 0.05;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT s.Supplier_Name\nFROM Supplier s\nJOIN Purchase p ON s.Supplier_ID = p.Supplier_ID\nJOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID\nJOIN Product pr ON pi.Product_ID = pr.Product_ID\nWHERE pr.Product_Price > 500 AND pr.Product_Discount < 0.05;\n```",
        "prompt_token_number": 281,
        "response_token_number": 74,
        "response_text_processed": "SELECT DISTINCT s.Supplier_Name FROM Supplier s JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID JOIN Product pr ON pi.Product_ID = pr.Product_ID WHERE pr.Product_Price > 500 AND pr.Product_Discount < 0.05"
    },
    {
        "id": 34683,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on at least one project related to customer service and have taken a leave of absence during that project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on at least one project related to customer service and have taken a leave of absence during that project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Customer Service%' INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Project p ON e.Department_ID = p.Department_ID\nJOIN Task t ON p.Project_ID = t.Project_ID\nJOIN Time_Entry te ON t.Task_ID = te.Task_ID\nJOIN Leave l ON e.Employee_ID = l.Employee_ID\nWHERE p.Project_Name LIKE '%customer service%'\nAND te.Employee_ID = e.Employee_ID\nAND (\n    (l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date)\n    OR (l.Leave_End_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date)\n    OR (l.Leave_Start_Date <= p.Project_Start_Date AND l.Leave_End_Date >= p.Project_End_Date)\n);\n```",
        "prompt_token_number": 353,
        "response_token_number": 146,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Project p ON e.Department_ID = p.Department_ID JOIN Task t ON p.Project_ID = t.Project_ID JOIN Time_Entry te ON t.Task_ID = te.Task_ID JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE p.Project_Name LIKE '%customer service%' AND te.Employee_ID = e.Employee_ID AND ( (l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date) OR (l.Leave_End_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date) OR (l.Leave_Start_Date <= p.Project_Start_Date AND l.Leave_End_Date >= p.Project_End_Date) )"
    },
    {
        "id": 34686,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on at least two projects related to software development and have taken a leave of absence during one of those project periods.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on at least two projects related to software development and have taken a leave of absence during one of those project periods.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Software Development%' INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date GROUP BY e.Employee_ID HAVING COUNT(DISTINCT p.Project_ID) >= 2 AND COUNT(DISTINCT l.Leave_ID) >= 1;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT e.Employee_Name\nFROM Employee e\nJOIN Task t ON e.Employee_ID = t.Employee_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nJOIN Leave l ON e.Employee_ID = l.Employee_ID\nWHERE p.Project_Name LIKE '%software development%'\n  AND (\n    (l.Leave_Start_Date BETWEEN p.Project_Start_Date AND COALESCE(p.Project_Actual_End_Date, p.Project_Estimated_End_Date))\n    OR \n    (l.Leave_End_Date BETWEEN p.Project_Start_Date AND COALESCE(p.Project_Actual_End_Date, p.Project_Estimated_End_Date))\n  )\nGROUP BY e.Employee_ID, e.Employee_Name\nHAVING COUNT(DISTINCT p.Project_ID) >= 2;\n```",
        "prompt_token_number": 355,
        "response_token_number": 152,
        "response_text_processed": "SELECT e.Employee_Name FROM Employee e JOIN Task t ON e.Employee_ID = t.Employee_ID JOIN Project p ON t.Project_ID = p.Project_ID JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE p.Project_Name LIKE '%software development%' AND ( (l.Leave_Start_Date BETWEEN p.Project_Start_Date AND COALESCE(p.Project_Actual_End_Date, p.Project_Estimated_End_Date)) OR (l.Leave_End_Date BETWEEN p.Project_Start_Date AND COALESCE(p.Project_Actual_End_Date, p.Project_Estimated_End_Date)) ) GROUP BY e.Employee_ID, e.Employee_Name HAVING COUNT(DISTINCT p.Project_ID) >= 2"
    },
    {
        "id": 34687,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently out of stock and has a price greater than $500.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is currently out of stock and has a price greater than $500.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Price > 500;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT C.Customer_Name\nFROM Customer C\nJOIN `Order` O ON C.Customer_ID = O.Customer_ID\nJOIN Order_Item OI ON O.Order_ID = OI.Order_ID\nJOIN Product P ON OI.Product_ID = P.Product_ID\nWHERE P.Product_Stock = 0\n  AND P.Product_Price > 500;\n```",
        "prompt_token_number": 296,
        "response_token_number": 74,
        "response_text_processed": "SELECT DISTINCT C.Customer_Name FROM Customer C JOIN `Order` O ON C.Customer_ID = O.Customer_ID JOIN Order_Item OI ON O.Order_ID = OI.Order_ID JOIN Product P ON OI.Product_ID = P.Product_ID WHERE P.Product_Stock = 0 AND P.Product_Price > 500"
    },
    {
        "id": 34689,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID']} and \n# the user question: List the names of all suppliers who have not received any purchases in the last year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have not received any purchases in the last year.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s LEFT JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID AND p.Purchase_Date BETWEEN DATE('now', '-1 year') AND DATE('now') WHERE p.Purchase_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ]
        },
        "response_text": "```sql\nSELECT Supplier_Name \nFROM Supplier \nWHERE Supplier_ID NOT IN (\n    SELECT Supplier_ID \n    FROM Purchase \n    WHERE Purchase_Date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\n);\n```",
        "prompt_token_number": 167,
        "response_token_number": 43,
        "response_text_processed": "SELECT Supplier_Name FROM Supplier WHERE Supplier_ID NOT IN ( SELECT Supplier_ID FROM Purchase WHERE Purchase_Date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) )"
    },
    {
        "id": 34690,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on at least one project that is related to marketing, has not taken any leave of absence during that project period, and have worked at least 40 hours in a week during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on at least one project that is related to marketing, has not taken any leave of absence during that project period, and have worked at least 40 hours in a week during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Marketing%' LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE t.Time_Worked >= 40 AND l.Leave_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Project p ON e.Department_ID = p.Department_ID\nJOIN Task t ON p.Project_ID = t.Project_ID\nJOIN Time_Entry te ON t.Task_ID = te.Task_ID\nWHERE e.Department LIKE '%Marketing%'\n  AND te.Time_Entry_Hours >= 40 \n  AND NOT EXISTS (\n      SELECT 1\n      FROM Leave l\n      WHERE l.Employee_ID = e.Employee_ID\n        AND l.Leave_Start_Date <= p.Project_End_Date\n        AND l.Leave_End_Date >= p.Project_Start_Date\n  );\n```",
        "prompt_token_number": 371,
        "response_token_number": 122,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Project p ON e.Department_ID = p.Department_ID JOIN Task t ON p.Project_ID = t.Project_ID JOIN Time_Entry te ON t.Task_ID = te.Task_ID WHERE e.Department LIKE '%Marketing%' AND te.Time_Entry_Hours >= 40 AND NOT EXISTS ( SELECT 1 FROM Leave l WHERE l.Employee_ID = e.Employee_ID AND l.Leave_Start_Date <= p.Project_End_Date AND l.Leave_End_Date >= p.Project_Start_Date )"
    },
    {
        "id": 34694,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on at least one project that is related to sales, and have taken a leave of absence during that project period, but also worked at least 30 hours in a week during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on at least one project that is related to sales, and have taken a leave of absence during that project period, but also worked at least 30 hours in a week during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Sales%' INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE t.Time_Worked >= 30;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Project p ON e.Department_ID = p.Department_ID\nJOIN Task t ON p.Project_ID = t.Project_ID\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID AND t.Task_ID = te.Task_ID\nJOIN Leave l ON e.Employee_ID = l.Employee_ID\nWHERE e.Employee_Position LIKE '%sales%' \nAND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date\nAND l.Leave_End_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date\nAND te.Time_Entry_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date\nAND te.Time_Entry_Hours >= 30\nGROUP BY e.Employee_Name, te.Time_Entry_Date\nHAVING SUM(te.Time_Entry_Hours) >= 30;\n```",
        "prompt_token_number": 371,
        "response_token_number": 164,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Project p ON e.Department_ID = p.Department_ID JOIN Task t ON p.Project_ID = t.Project_ID JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID AND t.Task_ID = te.Task_ID JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE e.Employee_Position LIKE '%sales%' AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date AND l.Leave_End_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date AND te.Time_Entry_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date AND te.Time_Entry_Hours >= 30 GROUP BY e.Employee_Name, te.Time_Entry_Date HAVING SUM(te.Time_Entry_Hours) >= 30"
    },
    {
        "id": 34699,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is currently in stock and has a price less than $100.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is currently in stock and has a price less than $100.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'In Stock' AND p.Product_Price < 100;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN \"Order\" o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Stock > 0 AND p.Product_Price < 100;\n```",
        "prompt_token_number": 295,
        "response_token_number": 69,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN \"Order\" o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock > 0 AND p.Product_Price < 100"
    },
    {
        "id": 34701,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Purchase': ['Purchase_ID', 'Purchase_Date', 'Supplier_ID', 'Employee_ID'], 'Purchase_Item': ['Product_ID', 'Purchase_ID']} and \n# the user question: List the names of all suppliers who have received purchases for products that have a discount greater than 10% and a price less than $500.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have received purchases for products that have a discount greater than 10% and a price less than $500.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID INNER JOIN Product pr ON pi.Product_ID = pr.Product_ID AND pr.Product_Price < 500 AND pr.Product_Discount > 0.1;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Purchase": [
                "Purchase_ID",
                "Purchase_Date",
                "Supplier_ID",
                "Employee_ID"
            ],
            "Purchase_Item": [
                "Product_ID",
                "Purchase_ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT s.Supplier_Name\nFROM Supplier s\nJOIN Purchase p ON s.Supplier_ID = p.Supplier_ID\nJOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID\nJOIN Product pr ON pi.Product_ID = pr.Product_ID\nWHERE pr.Product_Discount > 10 AND pr.Product_Price < 500;\n```",
        "prompt_token_number": 280,
        "response_token_number": 72,
        "response_text_processed": "SELECT DISTINCT s.Supplier_Name FROM Supplier s JOIN Purchase p ON s.Supplier_ID = p.Supplier_ID JOIN Purchase_Item pi ON p.Purchase_ID = pi.Purchase_ID JOIN Product pr ON pi.Product_ID = pr.Product_ID WHERE pr.Product_Discount > 10 AND pr.Product_Price < 500"
    },
    {
        "id": 34702,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on at least two projects that are related to marketing and sales, have not taken any leave of absence during those project periods, and have worked at least 40 hours in a week during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on at least two projects that are related to marketing and sales, have not taken any leave of absence during those project periods, and have worked at least 40 hours in a week during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND (p.Project_Name LIKE '%Marketing%' OR p.Project_Name LIKE '%Sales%') LEFT JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE t.Time_Worked >= 40 GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(DISTINCT p.Project_ID) >= 2 AND COUNT(DISTINCT l.Leave_ID) = 0;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT e.Employee_Name\nFROM Employee e\nJOIN Project p1 ON e.Employee_ID = p1.Project_Manager_ID\nJOIN Task t1 ON p1.Project_ID = t1.Project_ID\nJOIN Time_Entry te ON t1.Task_ID = te.Task_ID\nWHERE p1.Department_ID IN (\n    SELECT Department_ID\n    FROM Department\n    WHERE Department_Name IN ('Marketing', 'Sales')\n)\nAND NOT EXISTS (\n    SELECT 1\n    FROM Leave l\n    WHERE l.Employee_ID = e.Employee_ID\n    AND (l.Leave_Start_Date BETWEEN p1.Project_Start_Date AND p1.Project_End_Date\n         OR l.Leave_End_Date BETWEEN p1.Project_Start_Date AND p1.Project_End_Date)\n)\nGROUP BY e.Employee_ID\nHAVING COUNT(DISTINCT p1.Project_ID) >= 2\nAND MAX(te.Time_Worked) >= 40;\n```",
        "prompt_token_number": 373,
        "response_token_number": 183,
        "response_text_processed": "SELECT e.Employee_Name FROM Employee e JOIN Project p1 ON e.Employee_ID = p1.Project_Manager_ID JOIN Task t1 ON p1.Project_ID = t1.Project_ID JOIN Time_Entry te ON t1.Task_ID = te.Task_ID WHERE p1.Department_ID IN ( SELECT Department_ID FROM Department WHERE Department_Name IN ('Marketing', 'Sales') ) AND NOT EXISTS ( SELECT 1 FROM Leave l WHERE l.Employee_ID = e.Employee_ID AND (l.Leave_Start_Date BETWEEN p1.Project_Start_Date AND p1.Project_End_Date OR l.Leave_End_Date BETWEEN p1.Project_Start_Date AND p1.Project_End_Date) ) GROUP BY e.Employee_ID HAVING COUNT(DISTINCT p1.Project_ID) >= 2 AND MAX(te.Time_Worked) >= 40"
    },
    {
        "id": 34703,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed at least three orders for products that have a price greater than $1000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed at least three orders for products that have a price greater than $1000.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price > 1000 GROUP BY c.Customer_ID, p.Product_ID HAVING COUNT(DISTINCT o.Order_ID) >= 3;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT c.Customer_Name \nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Price > 1000\nGROUP BY c.Customer_Name\nHAVING COUNT(DISTINCT o.Order_ID) >= 3;\n```",
        "prompt_token_number": 292,
        "response_token_number": 80,
        "response_text_processed": "SELECT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Price > 1000 GROUP BY c.Customer_Name HAVING COUNT(DISTINCT o.Order_ID) >= 3"
    },
    {
        "id": 34706,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed at least one order for a product that is out of stock and has a price greater than $500.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed at least one order for a product that is out of stock and has a price greater than $500.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Price > 500;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT C.Customer_Name\nFROM Customer C\nJOIN `Order` O ON C.Customer_ID = O.Customer_ID\nJOIN Order_Item OI ON O.Order_ID = OI.Order_ID\nJOIN Product P ON OI.Product_ID = P.Product_ID\nWHERE P.Product_Stock = 0 AND P.Product_Price > 500;\n```",
        "prompt_token_number": 297,
        "response_token_number": 72,
        "response_text_processed": "SELECT DISTINCT C.Customer_Name FROM Customer C JOIN `Order` O ON C.Customer_ID = O.Customer_ID JOIN Order_Item OI ON O.Order_ID = OI.Order_ID JOIN Product P ON OI.Product_ID = P.Product_ID WHERE P.Product_Stock = 0 AND P.Product_Price > 500"
    },
    {
        "id": 34710,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed at least one order for a product that is out of stock and has a price greater than $1000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed at least one order for a product that is out of stock and has a price greater than $1000.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Price > 1000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN Order o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Stock = 0 AND p.Product_Price > 1000;\n```",
        "prompt_token_number": 298,
        "response_token_number": 68,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN Order o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock = 0 AND p.Product_Price > 1000"
    },
    {
        "id": 34714,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed at least two orders for products that have a price less than $500 and a discount of at least 20%.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed at least two orders for products that have a price less than $500 and a discount of at least 20%.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price < 500 AND p.Product_Discount >= 0.2 GROUP BY c.Customer_ID, p.Product_ID HAVING COUNT(DISTINCT o.Order_ID) >= 2;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT c.Customer_Name\nFROM Customer c\nJOIN \"Order\" o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Price < 500 AND p.Product_Discount >= 20\nGROUP BY c.Customer_Name\nHAVING COUNT(DISTINCT o.Order_ID) >= 2;\n```",
        "prompt_token_number": 300,
        "response_token_number": 88,
        "response_text_processed": "SELECT c.Customer_Name FROM Customer c JOIN \"Order\" o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price < 500 AND p.Product_Discount >= 20 GROUP BY c.Customer_Name HAVING COUNT(DISTINCT o.Order_ID) >= 2"
    },
    {
        "id": 34717,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Leave': ['Leave_ID', 'Employee_ID', 'Leave_Start_Date', 'Leave_End_Date', 'Leave_Type', 'Leave_Duration'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on at least two projects that are related to marketing, have taken a leave of absence during at least one of those project periods, and have worked at least 25 hours in a week during the project period.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on at least two projects that are related to marketing, have taken a leave of absence during at least one of those project periods, and have worked at least 25 hours in a week during the project period.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Name LIKE '%Marketing%' INNER JOIN Leave l ON e.Employee_ID = l.Employee_ID AND l.Leave_Start_Date BETWEEN p.Project_Start_Date AND p.Project_End_Date WHERE t.Time_Worked >= 25 GROUP BY e.Employee_ID, p.Project_ID HAVING COUNT(DISTINCT p.Project_ID) >= 2 AND COUNT(DISTINCT l.Leave_ID) >= 1;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Leave": [
                "Leave_ID",
                "Employee_ID",
                "Leave_Start_Date",
                "Leave_End_Date",
                "Leave_Type",
                "Leave_Duration"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nJOIN Leave l ON e.Employee_ID = l.Employee_ID\nWHERE p.Project_Name LIKE '%marketing%'\n  AND (\n    l.Leave_Start_Date BETWEEN p.Project_Start_Date AND IFNULL(p.Project_End_Date, NOW()) \n    OR l.Leave_End_Date BETWEEN p.Project_Start_Date AND IFNULL(p.Project_End_Date, NOW())\n  )\n  AND te.Time_Entry_Date BETWEEN p.Project_Start_Date AND IFNULL(p.Project_End_Date, NOW())\n  AND e.Employee_ID IN (\n    SELECT te2.Employee_ID\n    FROM Time_Entry te2\n    WHERE te2.Time_Entry_Hours >= 25\n    GROUP BY te2.Employee_ID, WEEK(te2.Time_Entry_Date)\n  )\nGROUP BY e.Employee_ID\nHAVING COUNT(DISTINCT p.Project_ID) >= 2;\n```",
        "prompt_token_number": 374,
        "response_token_number": 211,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID JOIN Leave l ON e.Employee_ID = l.Employee_ID WHERE p.Project_Name LIKE '%marketing%' AND ( l.Leave_Start_Date BETWEEN p.Project_Start_Date AND IFNULL(p.Project_End_Date, NOW()) OR l.Leave_End_Date BETWEEN p.Project_Start_Date AND IFNULL(p.Project_End_Date, NOW()) ) AND te.Time_Entry_Date BETWEEN p.Project_Start_Date AND IFNULL(p.Project_End_Date, NOW()) AND e.Employee_ID IN ( SELECT te2.Employee_ID FROM Time_Entry te2 WHERE te2.Time_Entry_Hours >= 25 GROUP BY te2.Employee_ID, WEEK(te2.Time_Entry_Date) ) GROUP BY e.Employee_ID HAVING COUNT(DISTINCT p.Project_ID) >= 2"
    },
    {
        "id": 34718,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed at least one order for a product that is out of stock and has a price less than $100.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed at least one order for a product that is out of stock and has a price less than $100.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Price < 100;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Stock = 0 AND p.Product_Price < 100;\n```",
        "prompt_token_number": 297,
        "response_token_number": 69,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock = 0 AND p.Product_Price < 100"
    },
    {
        "id": 34722,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed at least three orders for products that have a price greater than $500 and a discount of less than 10%.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed at least three orders for products that have a price greater than $500 and a discount of less than 10%.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price > 500 AND p.Product_Discount < 0.1 GROUP BY c.Customer_ID, p.Product_ID HAVING COUNT(DISTINCT o.Order_ID) >= 3;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Price > 500 AND p.Product_Discount < 10\nGROUP BY c.Customer_Name\nHAVING COUNT(o.Order_ID) >= 3;\n```",
        "prompt_token_number": 300,
        "response_token_number": 85,
        "response_text_processed": "SELECT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price > 500 AND p.Product_Discount < 10 GROUP BY c.Customer_Name HAVING COUNT(o.Order_ID) >= 3"
    },
    {
        "id": 34726,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed at least one order for products that are not in stock and have a price greater than $1000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed at least one order for products that are not in stock and have a price greater than $1000.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Status = 'Out of Stock' AND p.Product_Price > 1000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Stock = 0 AND p.Product_Price > 1000;\n```",
        "prompt_token_number": 297,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock = 0 AND p.Product_Price > 1000"
    },
    {
        "id": 34727,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: Find the names of all products that have been sold more than 100 times in the last year and have generated a profit of more than $50,000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all products that have been sold more than 100 times in the last year and have generated a profit of more than $50,000.",
        "output": "SELECT DISTINCT pr.Product_Name FROM Product pr INNER JOIN Order_Item oi ON pr.Product_ID = oi.Product_ID AND oi.Order_Item_Date BETWEEN DATE('now', '-1 year') AND DATE('now') GROUP BY pr.Product_ID HAVING COUNT(DISTINCT oi.Order_ID) > 100 AND SUM(oi.Quantity * (pr.Product_Price * (1 - pr.Product_Discount) - pr.Product_Cost)) > 50000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT P.Product_Name \nFROM Product P\nJOIN Order_Item OI ON P.Product_ID = OI.Product_ID\nWHERE OI.Order_Item_Date >= DATEADD(year, -1, GETDATE())\nGROUP BY P.Product_Name\nHAVING SUM(OI.Quantity) > 100 AND SUM((OI.Price - P.Product_Cost) * OI.Quantity) > 50000;\n```",
        "prompt_token_number": 207,
        "response_token_number": 82,
        "response_text_processed": "SELECT P.Product_Name FROM Product P JOIN Order_Item OI ON P.Product_ID = OI.Product_ID WHERE OI.Order_Item_Date >= DATEADD(year, -1, GETDATE()) GROUP BY P.Product_Name HAVING SUM(OI.Quantity) > 100 AND SUM((OI.Price - P.Product_Cost) * OI.Quantity) > 50000"
    },
    {
        "id": 34728,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: List the names of all employees who have worked on a project that has a project budget less than $1,000,000 and has been completed in the last 3 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all employees who have worked on a project that has a project budget less than $1,000,000 and has been completed in the last 3 months.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget < 1000000 AND p.Project_End_Date BETWEEN DATE('now', '-3 months') AND DATE('now');",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Employee.Employee_Name \nFROM Employee\nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID\nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID\nJOIN Project ON Task.Project_ID = Project.Project_ID\nWHERE Project.Project_Budget < 1000000 \nAND Project.Project_Status = 'Completed' \nAND Project.Project_End_Date >= DATEADD(month, -3, GETDATE());\n```",
        "prompt_token_number": 329,
        "response_token_number": 85,
        "response_text_processed": "SELECT DISTINCT Employee.Employee_Name FROM Employee JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID JOIN Task ON Time_Entry.Task_ID = Task.Task_ID JOIN Project ON Task.Project_ID = Project.Project_ID WHERE Project.Project_Budget < 1000000 AND Project.Project_Status = 'Completed' AND Project.Project_End_Date >= DATEADD(month, -3, GETDATE())"
    },
    {
        "id": 34731,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address']} and \n# the user question: List the names of all suppliers who have provided at least one product that is not in stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have provided at least one product that is not in stock.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Product p ON s.Supplier_ID = p.Supplier_ID AND p.Product_Status = 'Out of Stock';",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT s.Supplier_Name\nFROM Supplier s\nJOIN Product p ON s.Supplier_ID = p.Supplier_ID\nWHERE p.Product_Stock = 0;\n```",
        "prompt_token_number": 239,
        "response_token_number": 38,
        "response_text_processed": "SELECT DISTINCT s.Supplier_Name FROM Supplier s JOIN Product p ON s.Supplier_ID = p.Supplier_ID WHERE p.Product_Stock = 0"
    },
    {
        "id": 34732,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project budget between $500,000 and $1,000,000 and has been completed in the last 6 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that has a project budget between $500,000 and $1,000,000 and has been completed in the last 6 months.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget BETWEEN 500000 AND 1000000 AND p.Project_End_Date BETWEEN DATE('now', '-6 months') AND DATE('now');",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT E.Employee_Name\nFROM Employee E\nJOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID\nJOIN Task T ON TE.Task_ID = T.Task_ID\nJOIN Project P ON T.Project_ID = P.Project_ID\nWHERE P.Project_Budget BETWEEN 500000 AND 1000000\n  AND P.Project_Status = 'Completed'\n  AND P.Project_Actual_End_Date >= DATEADD(MONTH, -6, GETDATE());\n```",
        "prompt_token_number": 333,
        "response_token_number": 96,
        "response_text_processed": "SELECT DISTINCT E.Employee_Name FROM Employee E JOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID JOIN Task T ON TE.Task_ID = T.Task_ID JOIN Project P ON T.Project_ID = P.Project_ID WHERE P.Project_Budget BETWEEN 500000 AND 1000000 AND P.Project_Status = 'Completed' AND P.Project_Actual_End_Date >= DATEADD(MONTH, -6, GETDATE())"
    },
    {
        "id": 34733,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: List the names of all customers who have placed at least one order for products that have a price greater than $2,500 and have not been returned.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed at least one order for products that have a price greater than $2,500 and have not been returned.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price > 2500 LEFT JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID WHERE r.Return_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Return": [
                "Return_ID",
                "Order_Item_ID",
                "Order_Item_I",
                "Order_Detail_ID",
                "Order_Detail_I"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nLEFT JOIN `Return` r ON oi.Order_Item_ID = r.Order_Item_ID\nWHERE p.Product_Price > 2500 AND r.Return_ID IS NULL;\n```",
        "prompt_token_number": 325,
        "response_token_number": 85,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID LEFT JOIN `Return` r ON oi.Order_Item_ID = r.Order_Item_ID WHERE p.Product_Price > 2500 AND r.Return_ID IS NULL"
    },
    {
        "id": 34735,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address']} and \n# the user question: List the names of all suppliers who have provided at least one product that has a rating of 5 and a price greater than $1,000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have provided at least one product that has a rating of 5 and a price greater than $1,000.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Product p ON s.Supplier_ID = p.Supplier_ID AND p.Product_Rating = 5 AND p.Product_Price > 1000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Supplier.Supplier_Name\nFROM Supplier\nJOIN Product ON Supplier.Supplier_ID = Product.Supplier_ID\nWHERE Product.Product_Rating = 5 AND Product.Product_Price > 1000;\n```",
        "prompt_token_number": 250,
        "response_token_number": 44,
        "response_text_processed": "SELECT DISTINCT Supplier.Supplier_Name FROM Supplier JOIN Product ON Supplier.Supplier_ID = Product.Supplier_ID WHERE Product.Product_Rating = 5 AND Product.Product_Price > 1000"
    },
    {
        "id": 34737,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: List the names of all customers who have placed at least one order for products that have a rating of 3 or less and have not been returned.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed at least one order for products that have a rating of 3 or less and have not been returned.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Rating <= 3 LEFT JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID WHERE r.Return_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Return": [
                "Return_ID",
                "Order_Item_ID",
                "Order_Item_I",
                "Order_Detail_ID",
                "Order_Detail_I"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nLEFT JOIN `Return` r ON oi.Order_Item_ID = r.Order_Item_ID\nWHERE p.Product_Rating <= 3\nAND r.Order_Item_ID IS NULL;\n```",
        "prompt_token_number": 324,
        "response_token_number": 87,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID LEFT JOIN `Return` r ON oi.Order_Item_ID = r.Order_Item_ID WHERE p.Product_Rating <= 3 AND r.Order_Item_ID IS NULL"
    },
    {
        "id": 34739,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: Find the names of all customers who have placed at least one order for products that have a price between $500 and $1,000 and have been returned.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all customers who have placed at least one order for products that have a price between $500 and $1,000 and have been returned.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price BETWEEN 500 AND 1000 INNER JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Return": [
                "Return_ID",
                "Order_Item_ID",
                "Order_Item_I",
                "Order_Detail_ID",
                "Order_Detail_I"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN `Return` r ON oi.Order_Item_ID = r.Order_Item_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Price BETWEEN 500 AND 1000;\n```",
        "prompt_token_number": 326,
        "response_token_number": 81,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN `Return` r ON oi.Order_Item_ID = r.Order_Item_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price BETWEEN 500 AND 1000"
    },
    {
        "id": 34740,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all products that have never been sold.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all products that have never been sold.",
        "output": "SELECT DISTINCT pr.Product_Name FROM Product pr LEFT JOIN Order_Item oi ON pr.Product_ID = oi.Product_ID WHERE oi.Order_Item_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT Product_Name \nFROM Product \nWHERE Product_ID NOT IN (SELECT DISTINCT Product_ID FROM Order_Item);\n```",
        "prompt_token_number": 187,
        "response_token_number": 25,
        "response_text_processed": "SELECT Product_Name FROM Product WHERE Product_ID NOT IN (SELECT DISTINCT Product_ID FROM Order_Item)"
    },
    {
        "id": 34741,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project duration of less than 1 month and has a project budget greater than $50,000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that has a project duration of less than 1 month and has a project budget greater than $50,000.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) < 2592000 AND p.Project_Budget > 50000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE (p.Project_End_Date - p.Project_Start_Date) < INTERVAL '1 month'\n  AND p.Project_Budget > 50000;\n```",
        "prompt_token_number": 328,
        "response_token_number": 80,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE (p.Project_End_Date - p.Project_Start_Date) < INTERVAL '1 month' AND p.Project_Budget > 50000"
    },
    {
        "id": 34742,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address']} and \n# the user question: List the names of all suppliers who have provided at least one product that has a rating of 4 or higher and is in stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have provided at least one product that has a rating of 4 or higher and is in stock.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Product p ON s.Supplier_ID = p.Supplier_ID AND p.Product_Rating >= 4 AND p.Product_Status = 'In Stock';",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Supplier_Name\nFROM Supplier\nJOIN Product ON Supplier.Supplier_ID = Product.Supplier_ID\nWHERE Product.Product_Rating >= 4 AND Product.Product_Stock > 0;\n```",
        "prompt_token_number": 247,
        "response_token_number": 42,
        "response_text_processed": "SELECT DISTINCT Supplier_Name FROM Supplier JOIN Product ON Supplier.Supplier_ID = Product.Supplier_ID WHERE Product.Product_Rating >= 4 AND Product.Product_Stock > 0"
    },
    {
        "id": 34744,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: List the names of all customers who have placed at least one order for products that have a rating of 5 and have been returned.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed at least one order for products that have a rating of 5 and have been returned.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Rating = 5 INNER JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Return": [
                "Return_ID",
                "Order_Item_ID",
                "Order_Item_I",
                "Order_Detail_ID",
                "Order_Detail_I"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nJOIN `Return` r ON oi.Order_Item_ID = r.Order_Item_ID\nWHERE p.Product_Rating = 5;\n```",
        "prompt_token_number": 321,
        "response_token_number": 78,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID JOIN `Return` r ON oi.Order_Item_ID = r.Order_Item_ID WHERE p.Product_Rating = 5"
    },
    {
        "id": 34746,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: List the names of all employees who have worked on a project that has a project budget greater than $5,000,000 and has not been completed.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all employees who have worked on a project that has a project budget greater than $5,000,000 and has not been completed.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Status != 'Completed' AND p.Project_Budget > 5000000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE p.Project_Budget > 5000000\nAND p.Project_Status != 'Completed';\n```",
        "prompt_token_number": 324,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE p.Project_Budget > 5000000 AND p.Project_Status != 'Completed'"
    },
    {
        "id": 34747,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: Find the names of all customers who have placed at least one order for products that have a price between $100 and $500 and have not been returned.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all customers who have placed at least one order for products that have a price between $100 and $500 and have not been returned.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price BETWEEN 100 AND 500 LEFT JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID WHERE r.Return_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Return": [
                "Return_ID",
                "Order_Item_ID",
                "Order_Item_I",
                "Order_Detail_ID",
                "Order_Detail_I"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT C.Customer_Name\nFROM Customer C\nJOIN `Order` O ON C.Customer_ID = O.Customer_ID\nJOIN Order_Item OI ON O.Order_ID = OI.Order_ID\nLEFT JOIN `Return` R ON OI.Order_Item_ID = R.Order_Item_ID\nWHERE OI.Price BETWEEN 100 AND 500\n  AND R.Return_ID IS NULL;\n```",
        "prompt_token_number": 325,
        "response_token_number": 80,
        "response_text_processed": "SELECT DISTINCT C.Customer_Name FROM Customer C JOIN `Order` O ON C.Customer_ID = O.Customer_ID JOIN Order_Item OI ON O.Order_ID = OI.Order_ID LEFT JOIN `Return` R ON OI.Order_Item_ID = R.Order_Item_ID WHERE OI.Price BETWEEN 100 AND 500 AND R.Return_ID IS NULL"
    },
    {
        "id": 34749,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: List the names of all suppliers who have provided at least one product that has a rating of 5 and has not been returned.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have provided at least one product that has a rating of 5 and has not been returned.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Product p ON s.Supplier_ID = p.Supplier_ID AND p.Product_Rating = 5 INNER JOIN Order_Item oi ON p.Product_ID = oi.Product_ID LEFT JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID WHERE r.Return_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ],
            "Return": [
                "Return_ID",
                "Order_Item_ID",
                "Order_Item_I",
                "Order_Detail_ID",
                "Order_Detail_I"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT S.Supplier_Name\nFROM Supplier S\nJOIN Product P ON S.Supplier_ID = P.Supplier_ID\nJOIN Order_Item OI ON P.Product_ID = OI.Product_ID\nLEFT JOIN Return R ON OI.Order_Item_ID = R.Order_Item_ID\nWHERE P.Product_Rating = 5 AND R.Order_Item_ID IS NULL;\n```",
        "prompt_token_number": 301,
        "response_token_number": 76,
        "response_text_processed": "SELECT DISTINCT S.Supplier_Name FROM Supplier S JOIN Product P ON S.Supplier_ID = P.Supplier_ID JOIN Order_Item OI ON P.Product_ID = OI.Product_ID LEFT JOIN Return R ON OI.Order_Item_ID = R.Order_Item_ID WHERE P.Product_Rating = 5 AND R.Order_Item_ID IS NULL"
    },
    {
        "id": 34751,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on any project in the last 6 months and have a job title of \"Software Engineer\".,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have not worked on any project in the last 6 months and have a job title of \"Software Engineer\".",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND t.Time_Entry_Date BETWEEN DATE('now', '-6 months') AND DATE('now') WHERE t.Time_Entry_ID IS NULL AND e.Employee_Title = 'Software Engineer';",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT e.Employee_Name\nFROM Employee e\nLEFT JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID \nAND te.Time_Entry_Date >= DATEADD(MONTH, -6, GETDATE())\nWHERE te.Time_Entry_ID IS NULL \nAND e.Employee_Title = 'Software Engineer';\n```",
        "prompt_token_number": 207,
        "response_token_number": 62,
        "response_text_processed": "SELECT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID AND te.Time_Entry_Date >= DATEADD(MONTH, -6, GETDATE()) WHERE te.Time_Entry_ID IS NULL AND e.Employee_Title = 'Software Engineer'"
    },
    {
        "id": 34752,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project budget less than $1,000,000 and has not been completed.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that has a project budget less than $1,000,000 and has not been completed.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Status != 'Completed' AND p.Project_Budget < 1000000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE p.Project_Budget < 1000000\nAND p.Project_Status != 'Completed';\n```",
        "prompt_token_number": 324,
        "response_token_number": 70,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE p.Project_Budget < 1000000 AND p.Project_Status != 'Completed'"
    },
    {
        "id": 34753,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: List the names of all customers who have placed at least one order for products that have a price greater than $10,000 and have been returned.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed at least one order for products that have a price greater than $10,000 and have been returned.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Price > 10000 INNER JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Return": [
                "Return_ID",
                "Order_Item_ID",
                "Order_Item_I",
                "Order_Detail_ID",
                "Order_Detail_I"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nJOIN `Return` r ON oi.Order_Item_ID = r.Order_Item_ID\nWHERE p.Product_Price > 10000;\n```",
        "prompt_token_number": 324,
        "response_token_number": 78,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID JOIN `Return` r ON oi.Order_Item_ID = r.Order_Item_ID WHERE p.Product_Price > 10000"
    },
    {
        "id": 34754,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Supplier': ['Supplier_ID', 'Supplier_Name', 'Supplier_Address', 'Supplier_Phone', 'Supplier_Country_ID', 'Supplier_State', 'Supplier_Rating', 'Supplier_Country', 'Supplier_Continent', 'City', 'ContactName', 'SupplierName', 'Fax', 'Phone', 'Country', 'ContactTitle', 'Address']} and \n# the user question: List the names of all suppliers who have provided products that have been ordered by customers in the state of Texas.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all suppliers who have provided products that have been ordered by customers in the state of Texas.",
        "output": "SELECT DISTINCT s.Supplier_Name FROM Supplier s INNER JOIN Product p ON s.Supplier_ID = p.Supplier_ID INNER JOIN Order_Item oi ON p.Product_ID = oi.Product_ID INNER JOIN Order o ON oi.Order_ID = o.Order_ID INNER JOIN Customer c ON o.Customer_ID = c.Customer_ID AND c.Customer_State = 'Texas';",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Supplier": [
                "Supplier_ID",
                "Supplier_Name",
                "Supplier_Address",
                "Supplier_Phone",
                "Supplier_Country_ID",
                "Supplier_State",
                "Supplier_Rating",
                "Supplier_Country",
                "Supplier_Continent",
                "City",
                "ContactName",
                "SupplierName",
                "Fax",
                "Phone",
                "Country",
                "ContactTitle",
                "Address"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT s.Supplier_Name\nFROM Supplier s\nJOIN Product p ON s.Supplier_ID = p.Supplier_ID\nJOIN Order_Item oi ON p.Product_ID = oi.Product_ID\nJOIN `Order` o ON oi.Order_ID = o.Order_ID\nJOIN Customer c ON o.Customer_ID = c.Customer_ID\nWHERE c.Customer_State = 'Texas';\n```",
        "prompt_token_number": 362,
        "response_token_number": 76,
        "response_text_processed": "SELECT DISTINCT s.Supplier_Name FROM Supplier s JOIN Product p ON s.Supplier_ID = p.Supplier_ID JOIN Order_Item oi ON p.Product_ID = oi.Product_ID JOIN `Order` o ON oi.Order_ID = o.Order_ID JOIN Customer c ON o.Customer_ID = c.Customer_ID WHERE c.Customer_State = 'Texas'"
    },
    {
        "id": 34755,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project duration of more than 6 months and a project budget of at least $5,000,000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that has a project duration of more than 6 months and a project budget of at least $5,000,000.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) > 15552000 AND p.Project_Budget >= 5000000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Employee.Employee_Name\nFROM Employee\nJOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID\nJOIN Task ON Time_Entry.Task_ID = Task.Task_ID\nJOIN Project ON Task.Project_ID = Project.Project_ID\nWHERE \n    (julianday(Project.Project_End_Date) - julianday(Project.Project_Start_Date)) > 180\n    AND Project.Project_Budget >= 5000000;\n```",
        "prompt_token_number": 330,
        "response_token_number": 88,
        "response_text_processed": "SELECT DISTINCT Employee.Employee_Name FROM Employee JOIN Time_Entry ON Employee.Employee_ID = Time_Entry.Employee_ID JOIN Task ON Time_Entry.Task_ID = Task.Task_ID JOIN Project ON Task.Project_ID = Project.Project_ID WHERE (julianday(Project.Project_End_Date) - julianday(Project.Project_Start_Date)) > 180 AND Project.Project_Budget >= 5000000"
    },
    {
        "id": 34756,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: List the names of all customers who have placed at least one order for products that have a rating of 4 or higher and have not been returned.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed at least one order for products that have a rating of 4 or higher and have not been returned.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Rating >= 4 LEFT JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID WHERE r.Return_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Return": [
                "Return_ID",
                "Order_Item_ID",
                "Order_Item_I",
                "Order_Detail_ID",
                "Order_Detail_I"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nLEFT JOIN `Return` r ON oi.Order_Item_ID = r.Order_Item_ID\nWHERE p.Product_Rating >= 4 AND r.Return_ID IS NULL;\n```",
        "prompt_token_number": 324,
        "response_token_number": 85,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID LEFT JOIN `Return` r ON oi.Order_Item_ID = r.Order_Item_ID WHERE p.Product_Rating >= 4 AND r.Return_ID IS NULL"
    },
    {
        "id": 34758,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Order_Detail': ['Order_ID', 'Product_ID', 'Product_Price', 'Product_Quantity', 'Customer_ID', 'Supplier_ID', 'Order_Detail_Date', 'Order_Detail_ID', 'Order_Detail_Price', 'Order_Detail_Quantity']} and \n# the user question: List the names of all products that have not been ordered by any customer.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all products that have not been ordered by any customer.",
        "output": "SELECT DISTINCT p.Product_Name FROM Product p LEFT JOIN Order_Detail od ON p.Product_ID = od.Product_ID WHERE od.Order_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Order_Detail": [
                "Order_ID",
                "Product_ID",
                "Product_Price",
                "Product_Quantity",
                "Customer_ID",
                "Supplier_ID",
                "Order_Detail_Date",
                "Order_Detail_ID",
                "Order_Detail_Price",
                "Order_Detail_Quantity"
            ]
        },
        "response_text": "```sql\nSELECT Product_Name\nFROM Product\nWHERE Product_ID NOT IN (SELECT Product_ID FROM Order_Detail);\n```",
        "prompt_token_number": 212,
        "response_token_number": 24,
        "response_text_processed": "SELECT Product_Name FROM Product WHERE Product_ID NOT IN (SELECT Product_ID FROM Order_Detail)"
    },
    {
        "id": 34759,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on any project.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have not worked on any project.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID WHERE t.Time_Entry_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT Employee_Name\nFROM Employee\nWHERE Employee_ID NOT IN (SELECT DISTINCT Employee_ID FROM Time_Entry);\n```",
        "prompt_token_number": 191,
        "response_token_number": 25,
        "response_text_processed": "SELECT Employee_Name FROM Employee WHERE Employee_ID NOT IN (SELECT DISTINCT Employee_ID FROM Time_Entry)"
    },
    {
        "id": 34760,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: List the names of all customers who have placed an order for a product that has been returned more than once.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has been returned more than once.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID INNER JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID WHERE (SELECT COUNT(Return_ID) FROM Return WHERE Order_Item_ID = oi.Order_Item_ID) > 1;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Return": [
                "Return_ID",
                "Order_Item_ID",
                "Order_Item_I",
                "Order_Detail_ID",
                "Order_Detail_I"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN \"Order\" o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID\nGROUP BY c.Customer_Name\nHAVING COUNT(r.Return_ID) > 1;\n```",
        "prompt_token_number": 316,
        "response_token_number": 72,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN \"Order\" o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID GROUP BY c.Customer_Name HAVING COUNT(r.Return_ID) > 1"
    },
    {
        "id": 34762,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: Find the names of all products that have been ordered by more than 5 customers.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all products that have been ordered by more than 5 customers.",
        "output": "SELECT DISTINCT p.Product_Name FROM Product p INNER JOIN Order_Item oi ON p.Product_ID = oi.Product_ID INNER JOIN Order o ON oi.Order_ID = o.Order_ID GROUP BY p.Product_ID HAVING COUNT(DISTINCT o.Customer_ID) > 5;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT P.Product_Name\nFROM Product P\nJOIN Order_Item OI ON P.Product_ID = OI.Product_ID\nJOIN `Order` O ON OI.Order_ID = O.Order_ID\nGROUP BY P.Product_ID\nHAVING COUNT(DISTINCT O.Customer_ID) > 5;\n```",
        "prompt_token_number": 233,
        "response_token_number": 64,
        "response_text_processed": "SELECT DISTINCT P.Product_Name FROM Product P JOIN Order_Item OI ON P.Product_ID = OI.Product_ID JOIN `Order` O ON OI.Order_ID = O.Order_ID GROUP BY P.Product_ID HAVING COUNT(DISTINCT O.Customer_ID) > 5"
    },
    {
        "id": 34764,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status']} and \n# the user question: Find the names of all customers who have not placed an order in the last 6 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all customers who have not placed an order in the last 6 months.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c LEFT JOIN Order o ON c.Customer_ID = o.Customer_ID AND o.Order_Date >= date('now', '-6 months') WHERE o.Order_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ]
        },
        "response_text": "```sql\nSELECT Customer_Name\nFROM Customer\nWHERE Customer_ID NOT IN (\n    SELECT Customer_ID\n    FROM \"Order\"\n    WHERE Order_Date >= DATEADD(MONTH, -6, GETDATE())\n);\n```",
        "prompt_token_number": 169,
        "response_token_number": 45,
        "response_text_processed": "SELECT Customer_Name FROM Customer WHERE Customer_ID NOT IN ( SELECT Customer_ID FROM \"Order\" WHERE Order_Date >= DATEADD(MONTH, -6, GETDATE()) )"
    },
    {
        "id": 34765,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: List the names of all employees who have worked on a project that has a budget of at least $2,000,000 and a project duration of more than 1 year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all employees who have worked on a project that has a budget of at least $2,000,000 and a project duration of more than 1 year.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget >= 2000000 AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) > 31536000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT E.Employee_Name\nFROM Employee E\nJOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID\nJOIN Task T ON TE.Task_ID = T.Task_ID\nJOIN Project P ON T.Project_ID = P.Project_ID\nWHERE P.Project_Budget >= 2000000\nAND DATEDIFF(P.Project_End_Date, P.Project_Start_Date) > 365;\n```",
        "prompt_token_number": 329,
        "response_token_number": 80,
        "response_text_processed": "SELECT DISTINCT E.Employee_Name FROM Employee E JOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID JOIN Task T ON TE.Task_ID = T.Task_ID JOIN Project P ON T.Project_ID = P.Project_ID WHERE P.Project_Budget >= 2000000 AND DATEDIFF(P.Project_End_Date, P.Project_Start_Date) > 365"
    },
    {
        "id": 34766,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: Find the names of all customers who have placed an order for a product that has a rating of 5 and has not been returned.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all customers who have placed an order for a product that has a rating of 5 and has not been returned.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Rating = 5 LEFT JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID WHERE r.Return_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Return": [
                "Return_ID",
                "Order_Item_ID",
                "Order_Item_I",
                "Order_Detail_ID",
                "Order_Detail_I"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN \"Order\" o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nLEFT JOIN \"Return\" r ON oi.Order_Item_ID = r.Order_Item_ID\nWHERE p.Product_Rating = 5 AND r.Return_ID IS NULL;\n```",
        "prompt_token_number": 321,
        "response_token_number": 85,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN \"Order\" o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID LEFT JOIN \"Return\" r ON oi.Order_Item_ID = r.Order_Item_ID WHERE p.Product_Rating = 5 AND r.Return_ID IS NULL"
    },
    {
        "id": 34769,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project budget of at least $1,000,000 and has a project duration of less than 2 years.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that has a project budget of at least $1,000,000 and has a project duration of less than 2 years.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget >= 1000000 AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) < 63072000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE p.Project_Budget >= 1000000\n  AND DATEDIFF(p.Project_End_Date, p.Project_Start_Date) < 730;\n```",
        "prompt_token_number": 331,
        "response_token_number": 81,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE p.Project_Budget >= 1000000 AND DATEDIFF(p.Project_End_Date, p.Project_Start_Date) < 730"
    },
    {
        "id": 34771,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project budget of at least $500,000 and has a project duration of at least 1 year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that has a project budget of at least $500,000 and has a project duration of at least 1 year.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget >= 500000 AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) >= 31536000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE p.Project_Budget >= 500000\n  AND DATEDIFF(p.Project_End_Date, p.Project_Start_Date) >= 365;\n```",
        "prompt_token_number": 329,
        "response_token_number": 80,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE p.Project_Budget >= 500000 AND DATEDIFF(p.Project_End_Date, p.Project_Start_Date) >= 365"
    },
    {
        "id": 34772,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: List the names of all customers who have placed an order for a product that has a rating of 4 or higher and has been returned.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a rating of 4 or higher and has been returned.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Rating >= 4 INNER JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Return": [
                "Return_ID",
                "Order_Item_ID",
                "Order_Item_I",
                "Order_Detail_ID",
                "Order_Detail_I"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nJOIN `Return` r ON oi.Order_Item_ID = r.Order_Item_ID\nWHERE p.Product_Rating >= 4;\n```",
        "prompt_token_number": 322,
        "response_token_number": 78,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID JOIN `Return` r ON oi.Order_Item_ID = r.Order_Item_ID WHERE p.Product_Rating >= 4"
    },
    {
        "id": 34773,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project status of \"Completed\" and has a project duration of at least 6 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that has a project status of \"Completed\" and has a project duration of at least 6 months.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Status = 'Completed' AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) >= 15552000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT E.Employee_Name\nFROM Employee E\nJOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID\nJOIN Task T ON TE.Task_ID = T.Task_ID\nJOIN Project P ON T.Project_ID = P.Project_ID\nWHERE P.Project_Status = 'Completed' \n  AND DATEDIFF(MONTH, P.Project_Start_Date, P.Project_Actual_End_Date) >= 6;\n```",
        "prompt_token_number": 326,
        "response_token_number": 85,
        "response_text_processed": "SELECT DISTINCT E.Employee_Name FROM Employee E JOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID JOIN Task T ON TE.Task_ID = T.Task_ID JOIN Project P ON T.Project_ID = P.Project_ID WHERE P.Project_Status = 'Completed' AND DATEDIFF(MONTH, P.Project_Start_Date, P.Project_Actual_End_Date) >= 6"
    },
    {
        "id": 34775,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project budget of at least $2,000,000 and has a project duration of at least 2 years.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that has a project budget of at least $2,000,000 and has a project duration of at least 2 years.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget >= 2000000 AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) >= 63072000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE p.Project_Budget >= 2000000\n  AND DATEDIFF(p.Project_End_Date, p.Project_Start_Date) >= 730;\n```",
        "prompt_token_number": 331,
        "response_token_number": 81,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE p.Project_Budget >= 2000000 AND DATEDIFF(p.Project_End_Date, p.Project_Start_Date) >= 730"
    },
    {
        "id": 34776,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all products that have not been ordered by any customers.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all products that have not been ordered by any customers.",
        "output": "SELECT DISTINCT p.Product_Name FROM Product p LEFT JOIN Order_Item oi ON p.Product_ID = oi.Product_ID WHERE oi.Order_Item_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT P.Product_Name\nFROM Product P\nLEFT JOIN Order_Item OI ON P.Product_ID = OI.Product_ID\nWHERE OI.Order_Item_ID IS NULL;\n```",
        "prompt_token_number": 190,
        "response_token_number": 38,
        "response_text_processed": "SELECT P.Product_Name FROM Product P LEFT JOIN Order_Item OI ON P.Product_ID = OI.Product_ID WHERE OI.Order_Item_ID IS NULL"
    },
    {
        "id": 34777,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project status of \"In Progress\" and has a project duration of less than 1 year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that has a project status of \"In Progress\" and has a project duration of less than 1 year.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Status = 'In Progress' AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) < 31536000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE p.Project_Status = 'In Progress'\n  AND DATEDIFF(p.Project_End_Date, p.Project_Start_Date) < 365;\n```",
        "prompt_token_number": 327,
        "response_token_number": 79,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE p.Project_Status = 'In Progress' AND DATEDIFF(p.Project_End_Date, p.Project_Start_Date) < 365"
    },
    {
        "id": 34778,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID'], 'Return': ['Return_ID', 'Order_Item_ID', 'Order_Item_I', 'Order_Detail_ID', 'Order_Detail_I']} and \n# the user question: List the names of all customers who have placed an order for a product that has a rating of 4 or higher and has not been returned.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a rating of 4 or higher and has not been returned.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Rating >= 4 LEFT JOIN Return r ON oi.Order_Item_ID = r.Order_Item_ID WHERE r.Return_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ],
            "Return": [
                "Return_ID",
                "Order_Item_ID",
                "Order_Item_I",
                "Order_Detail_ID",
                "Order_Detail_I"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nLEFT JOIN `Return` r ON oi.Order_Item_ID = r.Order_Item_ID\nWHERE p.Product_Rating >= 4 AND r.Return_ID IS NULL;\n```",
        "prompt_token_number": 323,
        "response_token_number": 85,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID LEFT JOIN `Return` r ON oi.Order_Item_ID = r.Order_Item_ID WHERE p.Product_Rating >= 4 AND r.Return_ID IS NULL"
    },
    {
        "id": 34779,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have not worked on any projects in the last year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have not worked on any projects in the last year.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e LEFT JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID AND strftime('%s', 'now') - strftime('%s', t.Time_Entry_Date) < 31536000 WHERE t.Time_Entry_ID IS NULL;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT Employee_Name\nFROM Employee\nWHERE Employee_ID NOT IN (\n    SELECT DISTINCT Employee_ID\n    FROM Time_Entry\n    WHERE Time_Entry_Date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\n);\n```",
        "prompt_token_number": 195,
        "response_token_number": 46,
        "response_text_processed": "SELECT Employee_Name FROM Employee WHERE Employee_ID NOT IN ( SELECT DISTINCT Employee_ID FROM Time_Entry WHERE Time_Entry_Date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) )"
    },
    {
        "id": 34780,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that is out of stock.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that is out of stock.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock = 0;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN `Order` o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nWHERE p.Product_Stock = 0;\n```",
        "prompt_token_number": 287,
        "response_token_number": 62,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN `Order` o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Stock = 0"
    },
    {
        "id": 34781,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project budget of less than $500,000 and has a project duration of at least 1 year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that has a project budget of less than $500,000 and has a project duration of at least 1 year.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget < 500000 AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) >= 31536000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE p.Project_Budget < 500000\nAND DATEDIFF(day, p.Project_Start_Date, p.Project_End_Date) >= 365;\n```",
        "prompt_token_number": 329,
        "response_token_number": 81,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE p.Project_Budget < 500000 AND DATEDIFF(day, p.Project_Start_Date, p.Project_End_Date) >= 365"
    },
    {
        "id": 34783,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: Find the names of all customers who have placed an order for a product that is currently on sale.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all customers who have placed an order for a product that is currently on sale.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID AND p.Product_Sale_Price IS NOT NULL AND p.Product_Sale_Price < p.Product_Price;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT Customer.Customer_Name\nFROM Customer\nJOIN `Order` ON Customer.Customer_ID = `Order`.Customer_ID\nJOIN Order_Item ON `Order`.Order_ID = Order_Item.Order_ID\nJOIN Product ON Order_Item.Product_ID = Product.Product_ID\nWHERE Product.Product_Status = 'on sale';\n```",
        "prompt_token_number": 287,
        "response_token_number": 64,
        "response_text_processed": "SELECT DISTINCT Customer.Customer_Name FROM Customer JOIN `Order` ON Customer.Customer_ID = `Order`.Customer_ID JOIN Order_Item ON `Order`.Order_ID = Order_Item.Order_ID JOIN Product ON Order_Item.Product_ID = Product.Product_ID WHERE Product.Product_Status = 'on sale'"
    },
    {
        "id": 34784,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: List the names of all employees who have worked on a project that has a project budget of at least $1,000,000 and has a project duration of less than 6 months.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all employees who have worked on a project that has a project budget of at least $1,000,000 and has a project duration of less than 6 months.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Budget >= 1000000 AND strftime('%s', p.Project_End_Date) - strftime('%s', p.Project_Start_Date) < 15552000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE p.Project_Budget >= 1000000 \nAND DATEDIFF(day, p.Project_Start_Date, p.Project_End_Date) < 180;\n```",
        "prompt_token_number": 331,
        "response_token_number": 82,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE p.Project_Budget >= 1000000 AND DATEDIFF(day, p.Project_Start_Date, p.Project_End_Date) < 180"
    },
    {
        "id": 34785,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: List the names of all employees who have worked on a project that has a project status of \"Completed\" and has a project budget of at least $500,000.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all employees who have worked on a project that has a project status of \"Completed\" and has a project budget of at least $500,000.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Status = 'Completed' AND p.Project_Budget >= 500000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT E.Employee_Name\nFROM Employee E\nJOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID\nJOIN Task T ON TE.Task_ID = T.Task_ID\nJOIN Project P ON T.Project_ID = P.Project_ID\nWHERE P.Project_Status = 'Completed' \n  AND P.Project_Budget >= 500000;\n```",
        "prompt_token_number": 327,
        "response_token_number": 71,
        "response_text_processed": "SELECT DISTINCT E.Employee_Name FROM Employee E JOIN Time_Entry TE ON E.Employee_ID = TE.Employee_ID JOIN Task T ON TE.Task_ID = T.Task_ID JOIN Project P ON T.Project_ID = P.Project_ID WHERE P.Project_Status = 'Completed' AND P.Project_Budget >= 500000"
    },
    {
        "id": 34786,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Employee': ['Employee_ID', 'Employee_Name', 'Employee_Address', 'Employee_Phone', 'Employee_Email', 'Department_ID', 'Employee_Position', 'Employee_Title', 'Employee_Salary', 'Job_ID', 'Store_ID', 'Employee_City', 'Manager_ID', 'Status', 'Name', 'Years_of_Experience', 'Department', 'HireDate', 'Salary'], 'Project': ['Project_ID', 'Project_Name', 'Project_Start_Date', 'Project_End_Date', 'Project_Manager_ID', 'Project_Budget', 'Project_Actual_End_Date', 'Project_Status', 'Project_Estimated_End_Date', 'Department_ID', 'Store_ID'], 'Task': ['Task_ID', 'Task_Name', 'Project_ID', 'Task_Status', 'Task_Estimated_Cost', 'Task_Estimated_End_Date', 'Task_Actual_End_Date', 'Task_End_Date', 'Task_Due_Date', 'Task_Priority'], 'Time_Entry': ['Time_Entry_ID', 'Employee_ID', 'Task_ID', 'Time_Entry_Date', 'Time_Entry_Hours', 'Time_Worked', 'Time_Spent']} and \n# the user question: Find the names of all employees who have worked on a project that has a project status of \"In Progress\" and has a project duration of more than 1 year.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "Find the names of all employees who have worked on a project that has a project status of \"In Progress\" and has a project duration of more than 1 year.",
        "output": "SELECT DISTINCT e.Employee_Name FROM Employee e INNER JOIN Time_Entry t ON e.Employee_ID = t.Employee_ID INNER JOIN Task tk ON t.Task_ID = tk.Task_ID INNER JOIN Project p ON tk.Project_ID = p.Project_ID AND p.Project_Status = 'In Progress' AND strftime('%s', 'now') - strftime('%s', p.Project_Start_Date) > 31536000;",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Employee": [
                "Employee_ID",
                "Employee_Name",
                "Employee_Address",
                "Employee_Phone",
                "Employee_Email",
                "Department_ID",
                "Employee_Position",
                "Employee_Title",
                "Employee_Salary",
                "Job_ID",
                "Store_ID",
                "Employee_City",
                "Manager_ID",
                "Status",
                "Name",
                "Years_of_Experience",
                "Department",
                "HireDate",
                "Salary"
            ],
            "Project": [
                "Project_ID",
                "Project_Name",
                "Project_Start_Date",
                "Project_End_Date",
                "Project_Manager_ID",
                "Project_Budget",
                "Project_Actual_End_Date",
                "Project_Status",
                "Project_Estimated_End_Date",
                "Department_ID",
                "Store_ID"
            ],
            "Task": [
                "Task_ID",
                "Task_Name",
                "Project_ID",
                "Task_Status",
                "Task_Estimated_Cost",
                "Task_Estimated_End_Date",
                "Task_Actual_End_Date",
                "Task_End_Date",
                "Task_Due_Date",
                "Task_Priority"
            ],
            "Time_Entry": [
                "Time_Entry_ID",
                "Employee_ID",
                "Task_ID",
                "Time_Entry_Date",
                "Time_Entry_Hours",
                "Time_Worked",
                "Time_Spent"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT e.Employee_Name\nFROM Employee e\nJOIN Time_Entry te ON e.Employee_ID = te.Employee_ID\nJOIN Task t ON te.Task_ID = t.Task_ID\nJOIN Project p ON t.Project_ID = p.Project_ID\nWHERE p.Project_Status = 'In Progress' \n  AND DATEDIFF(p.Project_End_Date, p.Project_Start_Date) > 365;\n```",
        "prompt_token_number": 327,
        "response_token_number": 80,
        "response_text_processed": "SELECT DISTINCT e.Employee_Name FROM Employee e JOIN Time_Entry te ON e.Employee_ID = te.Employee_ID JOIN Task t ON te.Task_ID = t.Task_ID JOIN Project p ON t.Project_ID = p.Project_ID WHERE p.Project_Status = 'In Progress' AND DATEDIFF(p.Project_End_Date, p.Project_Start_Date) > 365"
    },
    {
        "id": 34787,
        "instruction": "You are an SQL expert. and proficient with the text-to-sql task.",
        "input": "Based on \n# the table&column(database schema) information {'Customer': ['Customer_ID', 'Customer_Name', 'Customer_Address', 'Customer_Phone', 'Customer_State', 'Country_ID', 'Customer_Country', 'Customer_City', 'Customer_Email', 'Name', 'Email', 'ID'], 'Order': ['Order_ID', 'Order_Date', 'Customer_ID', 'Employee_ID', 'Order_Total_Amount', 'Order_Total', 'Order_Total_Price', 'Store_ID', 'Status'], 'Order_Item': ['Order_Item_ID', 'Order_ID', 'Product_ID', 'Quantity', 'Price', 'Order_Item_Date'], 'Product': ['Product_ID', 'Product_Name', 'Product_Price', 'Product_Status', 'Product_Discount', 'Product_Quantity', 'Supplier_ID', 'Product_Cost', 'Product_Rating', 'Product_Stock', 'Product_Sale_Price', 'Product_Category_ID', 'Product_Category_I', 'Product_Category', 'Product_Weight', 'Name', 'ProductID', 'Category', 'Price', 'ID']} and \n# the user question: List the names of all customers who have placed an order for a product that has a price higher than the average price of products in their product category.,\nGive me the right SQL query to retrieve the information. Only SQL query, no explaination. # SQL query:",
        "user_question": "List the names of all customers who have placed an order for a product that has a price higher than the average price of products in their product category.",
        "output": "SELECT DISTINCT c.Customer_Name FROM Customer c INNER JOIN Order o ON c.Customer_ID = o.Customer_ID INNER JOIN Order_Item oi ON o.Order_ID = oi.Order_ID INNER JOIN Product p ON oi.Product_ID = p.Product_ID WHERE p.Product_Price > (SELECT AVG(Product_Price) FROM Product WHERE Product_Category_ID = p.Product_Category_ID);",
        "schema": "business_intelligence",
        "processed_schema_content": {
            "Customer": [
                "Customer_ID",
                "Customer_Name",
                "Customer_Address",
                "Customer_Phone",
                "Customer_State",
                "Country_ID",
                "Customer_Country",
                "Customer_City",
                "Customer_Email",
                "Name",
                "Email",
                "ID"
            ],
            "Order": [
                "Order_ID",
                "Order_Date",
                "Customer_ID",
                "Employee_ID",
                "Order_Total_Amount",
                "Order_Total",
                "Order_Total_Price",
                "Store_ID",
                "Status"
            ],
            "Order_Item": [
                "Order_Item_ID",
                "Order_ID",
                "Product_ID",
                "Quantity",
                "Price",
                "Order_Item_Date"
            ],
            "Product": [
                "Product_ID",
                "Product_Name",
                "Product_Price",
                "Product_Status",
                "Product_Discount",
                "Product_Quantity",
                "Supplier_ID",
                "Product_Cost",
                "Product_Rating",
                "Product_Stock",
                "Product_Sale_Price",
                "Product_Category_ID",
                "Product_Category_I",
                "Product_Category",
                "Product_Weight",
                "Name",
                "ProductID",
                "Category",
                "Price",
                "ID"
            ]
        },
        "response_text": "```sql\nSELECT DISTINCT c.Customer_Name\nFROM Customer c\nJOIN \"Order\" o ON c.Customer_ID = o.Customer_ID\nJOIN Order_Item oi ON o.Order_ID = oi.Order_ID\nJOIN Product p ON oi.Product_ID = p.Product_ID\nJOIN (\n    SELECT Product_Category_ID, AVG(Product_Price) AS Avg_Price\n    FROM Product\n    GROUP BY Product_Category_ID\n) avg_p ON p.Product_Category_ID = avg_p.Product_Category_ID\nWHERE p.Product_Price > avg_p.Avg_Price;\n```",
        "prompt_token_number": 297,
        "response_token_number": 106,
        "response_text_processed": "SELECT DISTINCT c.Customer_Name FROM Customer c JOIN \"Order\" o ON c.Customer_ID = o.Customer_ID JOIN Order_Item oi ON o.Order_ID = oi.Order_ID JOIN Product p ON oi.Product_ID = p.Product_ID JOIN ( SELECT Product_Category_ID, AVG(Product_Price) AS Avg_Price FROM Product GROUP BY Product_Category_ID ) avg_p ON p.Product_Category_ID = avg_p.Product_Category_ID WHERE p.Product_Price > avg_p.Avg_Price"
    }
]